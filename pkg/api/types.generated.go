/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_util.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				var yynn195 int = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				var yynn234 int = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
			}
			if yyr234 || yy2arr234 {
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep234 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = true
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yy255 := &x.APIVersion
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy255) {
					} else if !yym256 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy255)
					} else {
						z.EncFallback(yy255)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy257 := &x.APIVersion
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy257) {
					} else if !yym258 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy257)
					} else {
						z.EncFallback(yy257)
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy260 := &x.ObjectMeta
					yy260.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy261 := &x.ObjectMeta
					yy261.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy263 := &x.Spec
					yy263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy264 := &x.Spec
					yy264.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy266 := &x.Status
					yy266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy267 := &x.Status
					yy267.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym268 := z.DecBinary()
	_ = yym268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl269 := r.ReadMapStart()
			if yyl269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl269 := r.ReadArrayStart()
			if yyl269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys270Slc
	var yyhl270 bool = l >= 0
	for yyj270 := 0; ; yyj270++ {
		if yyhl270 {
			if yyj270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys270Slc = r.DecodeBytes(yys270Slc, true, true)
		yys270 := string(yys270Slc)
		switch yys270 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv272 := &x.APIVersion
				yym273 := z.DecBinary()
				_ = yym273
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv272) {
				} else if !yym273 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv272)
				} else {
					z.DecFallback(yyv272, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv274 := &x.ObjectMeta
				yyv274.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv275 := &x.Spec
				yyv275.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv276 := &x.Status
				yyv276.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys270)
		} // end switch yys270
	} // end for yyj270
	if !yyhl270 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj277 int
	var yyb277 bool
	var yyhl277 bool = l >= 0
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv279 := &x.APIVersion
		yym280 := z.DecBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv279) {
		} else if !yym280 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv279)
		} else {
			z.DecFallback(yyv279, false)
		}
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv281 := &x.ObjectMeta
		yyv281.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv282 := &x.Spec
		yyv282.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv283 := &x.Status
		yyv283.CodecDecodeSelf(d)
	}
	for {
		yyj277++
		if yyhl277 {
			yyb277 = yyj277 > l
		} else {
			yyb277 = r.CheckBreak()
		}
		if yyb277 {
			break
		}
		z.DecStructFieldNotFound(yyj277-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym284 := z.EncBinary()
		_ = yym284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep285 := !z.EncBinary()
			yy2arr285 := z.EncBasicHandle().StructToArray
			var yyq285 [15]bool
			_, _, _ = yysep285, yyq285, yy2arr285
			const yyr285 bool = false
			yyq285[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq285[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq285[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq285[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq285[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq285[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq285[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq285[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq285[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq285[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq285[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq285[12] = len(x.AccessModes) != 0
			yyq285[13] = x.ClaimRef != nil
			yyq285[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr285 || yy2arr285 {
				r.EncodeArrayStart(15)
			} else {
				var yynn285 int = 1
				for _, b := range yyq285 {
					if b {
						yynn285++
					}
				}
				r.EncodeMapStart(yynn285)
			}
			if yyr285 || yy2arr285 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr285 || yy2arr285 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq285[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr285 || yy2arr285 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq285[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr285 || yy2arr285 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq285[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr285 || yy2arr285 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq285[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr285 || yy2arr285 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq285[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr285 || yy2arr285 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq285[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr285 || yy2arr285 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq285[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr285 || yy2arr285 {
				if yyn294 {
					r.EncodeNil()
				} else {
					if yyq285[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr285 || yy2arr285 {
				if yyn295 {
					r.EncodeNil()
				} else {
					if yyq285[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr285 || yy2arr285 {
				if yyn296 {
					r.EncodeNil()
				} else {
					if yyq285[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr285 || yy2arr285 {
				if yyn297 {
					r.EncodeNil()
				} else {
					if yyq285[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq285[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym299 := z.EncBinary()
						_ = yym299
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq285[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym300 := z.EncBinary()
						_ = yym300
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq285[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq285[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep285 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym303 := z.DecBinary()
	_ = yym303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl304 := r.ReadMapStart()
			if yyl304 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl304, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl304 := r.ReadArrayStart()
			if yyl304 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl304, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys305Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys305Slc
	var yyhl305 bool = l >= 0
	for yyj305 := 0; ; yyj305++ {
		if yyhl305 {
			if yyj305 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys305Slc = r.DecodeBytes(yys305Slc, true, true)
		yys305 := string(yys305Slc)
		switch yys305 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv306 := &x.Capacity
				yyv306.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv318 := &x.AccessModes
				yym319 := z.DecBinary()
				_ = yym319
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv318), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys305)
		} // end switch yys305
	} // end for yyj305
	if !yyhl305 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj322 int
	var yyb322 bool
	var yyhl322 bool = l >= 0
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv323 := &x.Capacity
		yyv323.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv335 := &x.AccessModes
		yym336 := z.DecBinary()
		_ = yym336
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv335), d)
		}
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj322++
		if yyhl322 {
			yyb322 = yyj322 > l
		} else {
			yyb322 = r.CheckBreak()
		}
		if yyb322 {
			break
		}
		z.DecStructFieldNotFound(yyj322-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym339 := z.EncBinary()
	_ = yym339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym340 := z.DecBinary()
	_ = yym340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [3]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[0] = x.Phase != ""
			yyq342[1] = x.Message != ""
			yyq342[2] = x.Reason != ""
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(3)
			} else {
				var yynn342 int = 0
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
			}
			if yyr342 || yy2arr342 {
				if yyq342[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				if yyq342[1] {
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr342 || yy2arr342 {
				if yyq342[2] {
					yym348 := z.EncBinary()
					_ = yym348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep342 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym350 := z.DecBinary()
	_ = yym350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl351 := r.ReadMapStart()
			if yyl351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl351, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl351 := r.ReadArrayStart()
			if yyl351 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys352Slc
	var yyhl352 bool = l >= 0
	for yyj352 := 0; ; yyj352++ {
		if yyhl352 {
			if yyj352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys352Slc = r.DecodeBytes(yys352Slc, true, true)
		yys352 := string(yys352Slc)
		switch yys352 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys352)
		} // end switch yys352
	} // end for yyj352
	if !yyhl352 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj356 int
	var yyb356 bool
	var yyhl356 bool = l >= 0
	yyj356++
	if yyhl356 {
		yyb356 = yyj356 > l
	} else {
		yyb356 = r.CheckBreak()
	}
	if yyb356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj356++
	if yyhl356 {
		yyb356 = yyj356 > l
	} else {
		yyb356 = r.CheckBreak()
	}
	if yyb356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj356++
	if yyhl356 {
		yyb356 = yyj356 > l
	} else {
		yyb356 = r.CheckBreak()
	}
	if yyb356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj356++
		if yyhl356 {
			yyb356 = yyj356 > l
		} else {
			yyb356 = r.CheckBreak()
		}
		if yyb356 {
			break
		}
		z.DecStructFieldNotFound(yyj356-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym360 := z.EncBinary()
		_ = yym360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep361 := !z.EncBinary()
			yy2arr361 := z.EncBasicHandle().StructToArray
			var yyq361 [4]bool
			_, _, _ = yysep361, yyq361, yy2arr361
			const yyr361 bool = false
			yyq361[0] = x.Kind != ""
			yyq361[1] = true
			yyq361[2] = true
			if yyr361 || yy2arr361 {
				r.EncodeArrayStart(4)
			} else {
				var yynn361 int = 1
				for _, b := range yyq361 {
					if b {
						yynn361++
					}
				}
				r.EncodeMapStart(yynn361)
			}
			if yyr361 || yy2arr361 {
				if yyq361[0] {
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq361[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[1] {
					yy366 := &x.APIVersion
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy366) {
					} else if !yym367 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy366)
					} else {
						z.EncFallback(yy366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy368 := &x.APIVersion
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy368) {
					} else if !yym369 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy368)
					} else {
						z.EncFallback(yy368)
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[2] {
					yy371 := &x.ListMeta
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy371) {
					} else {
						z.EncFallback(yy371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy373 := &x.ListMeta
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy373) {
					} else {
						z.EncFallback(yy373)
					}
				}
			}
			if yyr361 || yy2arr361 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv382 := &x.APIVersion
				yym383 := z.DecBinary()
				_ = yym383
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv382) {
				} else if !yym383 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv382)
				} else {
					z.DecFallback(yyv382, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv384 := &x.ListMeta
				yym385 := z.DecBinary()
				_ = yym385
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv384) {
				} else {
					z.DecFallback(yyv384, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv386 := &x.Items
				yym387 := z.DecBinary()
				_ = yym387
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	if !yyhl380 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj388 int
	var yyb388 bool
	var yyhl388 bool = l >= 0
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv390 := &x.APIVersion
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv390) {
		} else if !yym391 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv390)
		} else {
			z.DecFallback(yyv390, false)
		}
	}
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv392 := &x.ListMeta
		yym393 := z.DecBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv392) {
		} else {
			z.DecFallback(yyv392, false)
		}
	}
	yyj388++
	if yyhl388 {
		yyb388 = yyj388 > l
	} else {
		yyb388 = r.CheckBreak()
	}
	if yyb388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv394 := &x.Items
		yym395 := z.DecBinary()
		_ = yym395
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv394), d)
		}
	}
	for {
		yyj388++
		if yyhl388 {
			yyb388 = yyj388 > l
		} else {
			yyb388 = r.CheckBreak()
		}
		if yyb388 {
			break
		}
		z.DecStructFieldNotFound(yyj388-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym396 := z.EncBinary()
		_ = yym396
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep397 := !z.EncBinary()
			yy2arr397 := z.EncBasicHandle().StructToArray
			var yyq397 [5]bool
			_, _, _ = yysep397, yyq397, yy2arr397
			const yyr397 bool = false
			yyq397[0] = x.Kind != ""
			yyq397[1] = true
			yyq397[2] = true
			yyq397[3] = true
			yyq397[4] = true
			if yyr397 || yy2arr397 {
				r.EncodeArrayStart(5)
			} else {
				var yynn397 int = 0
				for _, b := range yyq397 {
					if b {
						yynn397++
					}
				}
				r.EncodeMapStart(yynn397)
			}
			if yyr397 || yy2arr397 {
				if yyq397[0] {
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq397[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[1] {
					yy402 := &x.APIVersion
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else if z.HasExtensions() && z.EncExt(yy402) {
					} else if !yym403 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy402)
					} else {
						z.EncFallback(yy402)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy404 := &x.APIVersion
					yym405 := z.EncBinary()
					_ = yym405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy404) {
					} else if !yym405 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy404)
					} else {
						z.EncFallback(yy404)
					}
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[2] {
					yy407 := &x.ObjectMeta
					yy407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy408 := &x.ObjectMeta
					yy408.CodecEncodeSelf(e)
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[3] {
					yy410 := &x.Spec
					yy410.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy411 := &x.Spec
					yy411.CodecEncodeSelf(e)
				}
			}
			if yyr397 || yy2arr397 {
				if yyq397[4] {
					yy413 := &x.Status
					yy413.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq397[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy414 := &x.Status
					yy414.CodecEncodeSelf(e)
				}
			}
			if yysep397 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym415 := z.DecBinary()
	_ = yym415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl416 := r.ReadMapStart()
			if yyl416 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl416, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl416 := r.ReadArrayStart()
			if yyl416 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl416, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys417Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys417Slc
	var yyhl417 bool = l >= 0
	for yyj417 := 0; ; yyj417++ {
		if yyhl417 {
			if yyj417 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys417Slc = r.DecodeBytes(yys417Slc, true, true)
		yys417 := string(yys417Slc)
		switch yys417 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv419 := &x.APIVersion
				yym420 := z.DecBinary()
				_ = yym420
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv419) {
				} else if !yym420 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv419)
				} else {
					z.DecFallback(yyv419, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv421 := &x.ObjectMeta
				yyv421.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv422 := &x.Spec
				yyv422.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv423 := &x.Status
				yyv423.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys417)
		} // end switch yys417
	} // end for yyj417
	if !yyhl417 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj424 int
	var yyb424 bool
	var yyhl424 bool = l >= 0
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv426 := &x.APIVersion
		yym427 := z.DecBinary()
		_ = yym427
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv426) {
		} else if !yym427 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv426)
		} else {
			z.DecFallback(yyv426, false)
		}
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj424++
	if yyhl424 {
		yyb424 = yyj424 > l
	} else {
		yyb424 = r.CheckBreak()
	}
	if yyb424 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj424++
		if yyhl424 {
			yyb424 = yyj424 > l
		} else {
			yyb424 = r.CheckBreak()
		}
		if yyb424 {
			break
		}
		z.DecStructFieldNotFound(yyj424-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = true
			yyq432[2] = true
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				var yynn432 int = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
			}
			if yyr432 || yy2arr432 {
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				if yyq432[1] {
					yy437 := &x.APIVersion
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy437) {
					} else if !yym438 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy437)
					} else {
						z.EncFallback(yy437)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy439 := &x.APIVersion
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy439) {
					} else if !yym440 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy439)
					} else {
						z.EncFallback(yy439)
					}
				}
			}
			if yyr432 || yy2arr432 {
				if yyq432[2] {
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy444 := &x.ListMeta
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else if z.HasExtensions() && z.EncExt(yy444) {
					} else {
						z.EncFallback(yy444)
					}
				}
			}
			if yyr432 || yy2arr432 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep432 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym449 := z.DecBinary()
	_ = yym449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl450 := r.ReadMapStart()
			if yyl450 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl450, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl450 := r.ReadArrayStart()
			if yyl450 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys451Slc
	var yyhl451 bool = l >= 0
	for yyj451 := 0; ; yyj451++ {
		if yyhl451 {
			if yyj451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys451Slc = r.DecodeBytes(yys451Slc, true, true)
		yys451 := string(yys451Slc)
		switch yys451 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv453 := &x.APIVersion
				yym454 := z.DecBinary()
				_ = yym454
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv453) {
				} else if !yym454 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv453)
				} else {
					z.DecFallback(yyv453, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv455 := &x.ListMeta
				yym456 := z.DecBinary()
				_ = yym456
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv455) {
				} else {
					z.DecFallback(yyv455, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv457 := &x.Items
				yym458 := z.DecBinary()
				_ = yym458
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv457), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys451)
		} // end switch yys451
	} // end for yyj451
	if !yyhl451 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj459 int
	var yyb459 bool
	var yyhl459 bool = l >= 0
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv461 := &x.APIVersion
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv461) {
		} else if !yym462 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv461)
		} else {
			z.DecFallback(yyv461, false)
		}
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv463 := &x.ListMeta
		yym464 := z.DecBinary()
		_ = yym464
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv463) {
		} else {
			z.DecFallback(yyv463, false)
		}
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv465 := &x.Items
		yym466 := z.DecBinary()
		_ = yym466
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv465), d)
		}
	}
	for {
		yyj459++
		if yyhl459 {
			yyb459 = yyj459 > l
		} else {
			yyb459 = r.CheckBreak()
		}
		if yyb459 {
			break
		}
		z.DecStructFieldNotFound(yyj459-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym467 := z.EncBinary()
		_ = yym467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep468 := !z.EncBinary()
			yy2arr468 := z.EncBasicHandle().StructToArray
			var yyq468 [3]bool
			_, _, _ = yysep468, yyq468, yy2arr468
			const yyr468 bool = false
			yyq468[0] = len(x.AccessModes) != 0
			yyq468[1] = true
			yyq468[2] = x.VolumeName != ""
			if yyr468 || yy2arr468 {
				r.EncodeArrayStart(3)
			} else {
				var yynn468 int = 0
				for _, b := range yyq468 {
					if b {
						yynn468++
					}
				}
				r.EncodeMapStart(yynn468)
			}
			if yyr468 || yy2arr468 {
				if yyq468[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym470 := z.EncBinary()
						_ = yym470
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq468[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym471 := z.EncBinary()
						_ = yym471
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr468 || yy2arr468 {
				if yyq468[1] {
					yy473 := &x.Resources
					yy473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq468[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy474 := &x.Resources
					yy474.CodecEncodeSelf(e)
				}
			}
			if yyr468 || yy2arr468 {
				if yyq468[2] {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq468[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep468 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym478 := z.DecBinary()
	_ = yym478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl479 := r.ReadMapStart()
			if yyl479 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl479, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl479 := r.ReadArrayStart()
			if yyl479 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys480Slc
	var yyhl480 bool = l >= 0
	for yyj480 := 0; ; yyj480++ {
		if yyhl480 {
			if yyj480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys480Slc = r.DecodeBytes(yys480Slc, true, true)
		yys480 := string(yys480Slc)
		switch yys480 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv481 := &x.AccessModes
				yym482 := z.DecBinary()
				_ = yym482
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv481), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv483 := &x.Resources
				yyv483.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys480)
		} // end switch yys480
	} // end for yyj480
	if !yyhl480 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj485 int
	var yyb485 bool
	var yyhl485 bool = l >= 0
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv486 := &x.AccessModes
		yym487 := z.DecBinary()
		_ = yym487
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv486), d)
		}
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv488 := &x.Resources
		yyv488.CodecDecodeSelf(d)
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj485++
		if yyhl485 {
			yyb485 = yyj485 > l
		} else {
			yyb485 = r.CheckBreak()
		}
		if yyb485 {
			break
		}
		z.DecStructFieldNotFound(yyj485-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym490 := z.EncBinary()
		_ = yym490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep491 := !z.EncBinary()
			yy2arr491 := z.EncBasicHandle().StructToArray
			var yyq491 [3]bool
			_, _, _ = yysep491, yyq491, yy2arr491
			const yyr491 bool = false
			yyq491[0] = x.Phase != ""
			yyq491[1] = len(x.AccessModes) != 0
			yyq491[2] = len(x.Capacity) != 0
			if yyr491 || yy2arr491 {
				r.EncodeArrayStart(3)
			} else {
				var yynn491 int = 0
				for _, b := range yyq491 {
					if b {
						yynn491++
					}
				}
				r.EncodeMapStart(yynn491)
			}
			if yyr491 || yy2arr491 {
				if yyq491[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq491[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr491 || yy2arr491 {
				if yyq491[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym494 := z.EncBinary()
						_ = yym494
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym495 := z.EncBinary()
						_ = yym495
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr491 || yy2arr491 {
				if yyq491[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep491 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym497 := z.DecBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl498 := r.ReadMapStart()
			if yyl498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl498, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl498 := r.ReadArrayStart()
			if yyl498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys499Slc
	var yyhl499 bool = l >= 0
	for yyj499 := 0; ; yyj499++ {
		if yyhl499 {
			if yyj499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys499Slc = r.DecodeBytes(yys499Slc, true, true)
		yys499 := string(yys499Slc)
		switch yys499 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv501 := &x.AccessModes
				yym502 := z.DecBinary()
				_ = yym502
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv501), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv503 := &x.Capacity
				yyv503.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys499)
		} // end switch yys499
	} // end for yyj499
	if !yyhl499 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj504 int
	var yyb504 bool
	var yyhl504 bool = l >= 0
	yyj504++
	if yyhl504 {
		yyb504 = yyj504 > l
	} else {
		yyb504 = r.CheckBreak()
	}
	if yyb504 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj504++
	if yyhl504 {
		yyb504 = yyj504 > l
	} else {
		yyb504 = r.CheckBreak()
	}
	if yyb504 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv506 := &x.AccessModes
		yym507 := z.DecBinary()
		_ = yym507
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv506), d)
		}
	}
	yyj504++
	if yyhl504 {
		yyb504 = yyj504 > l
	} else {
		yyb504 = r.CheckBreak()
	}
	if yyb504 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv508 := &x.Capacity
		yyv508.CodecDecodeSelf(d)
	}
	for {
		yyj504++
		if yyhl504 {
			yyb504 = yyj504 > l
		} else {
			yyb504 = r.CheckBreak()
		}
		if yyb504 {
			break
		}
		z.DecStructFieldNotFound(yyj504-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym511 := z.EncBinary()
	_ = yym511
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym512 := z.DecBinary()
	_ = yym512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym513 := z.EncBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym514 := z.DecBinary()
	_ = yym514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym515 := z.EncBinary()
		_ = yym515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep516 := !z.EncBinary()
			yy2arr516 := z.EncBasicHandle().StructToArray
			var yyq516 [1]bool
			_, _, _ = yysep516, yyq516, yy2arr516
			const yyr516 bool = false
			if yyr516 || yy2arr516 {
				r.EncodeArrayStart(1)
			} else {
				var yynn516 int = 1
				for _, b := range yyq516 {
					if b {
						yynn516++
					}
				}
				r.EncodeMapStart(yynn516)
			}
			if yyr516 || yy2arr516 {
				yym518 := z.EncBinary()
				_ = yym518
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym519 := z.EncBinary()
				_ = yym519
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep516 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		switch yys522 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	if !yyhl522 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym526 := z.EncBinary()
		_ = yym526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep527 := !z.EncBinary()
			yy2arr527 := z.EncBasicHandle().StructToArray
			var yyq527 [1]bool
			_, _, _ = yysep527, yyq527, yy2arr527
			const yyr527 bool = false
			if yyr527 || yy2arr527 {
				r.EncodeArrayStart(1)
			} else {
				var yynn527 int = 1
				for _, b := range yyq527 {
					if b {
						yynn527++
					}
				}
				r.EncodeMapStart(yynn527)
			}
			if yyr527 || yy2arr527 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep527 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym529 := z.DecBinary()
	_ = yym529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl530 := r.ReadMapStart()
			if yyl530 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl530, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl530 := r.ReadArrayStart()
			if yyl530 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys531Slc
	var yyhl531 bool = l >= 0
	for yyj531 := 0; ; yyj531++ {
		if yyhl531 {
			if yyj531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys531Slc = r.DecodeBytes(yys531Slc, true, true)
		yys531 := string(yys531Slc)
		switch yys531 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys531)
		} // end switch yys531
	} // end for yyj531
	if !yyhl531 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj533 int
	var yyb533 bool
	var yyhl533 bool = l >= 0
	yyj533++
	if yyhl533 {
		yyb533 = yyj533 > l
	} else {
		yyb533 = r.CheckBreak()
	}
	if yyb533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj533++
		if yyhl533 {
			yyb533 = yyj533 > l
		} else {
			yyb533 = r.CheckBreak()
		}
		if yyb533 {
			break
		}
		z.DecStructFieldNotFound(yyj533-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym535 := z.EncBinary()
	_ = yym535
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym536 := z.DecBinary()
	_ = yym536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym537 := z.EncBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym538 := z.DecBinary()
	_ = yym538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym539 := z.EncBinary()
		_ = yym539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep540 := !z.EncBinary()
			yy2arr540 := z.EncBasicHandle().StructToArray
			var yyq540 [4]bool
			_, _, _ = yysep540, yyq540, yy2arr540
			const yyr540 bool = false
			yyq540[1] = x.FSType != ""
			yyq540[2] = x.Partition != 0
			yyq540[3] = x.ReadOnly != false
			if yyr540 || yy2arr540 {
				r.EncodeArrayStart(4)
			} else {
				var yynn540 int = 1
				for _, b := range yyq540 {
					if b {
						yynn540++
					}
				}
				r.EncodeMapStart(yynn540)
			}
			if yyr540 || yy2arr540 {
				yym542 := z.EncBinary()
				_ = yym542
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym543 := z.EncBinary()
				_ = yym543
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr540 || yy2arr540 {
				if yyq540[1] {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr540 || yy2arr540 {
				if yyq540[2] {
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq540[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr540 || yy2arr540 {
				if yyq540[3] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq540[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep540 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym553 := z.DecBinary()
	_ = yym553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl554 := r.ReadMapStart()
			if yyl554 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl554, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl554 := r.ReadArrayStart()
			if yyl554 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys555Slc
	var yyhl555 bool = l >= 0
	for yyj555 := 0; ; yyj555++ {
		if yyhl555 {
			if yyj555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys555Slc = r.DecodeBytes(yys555Slc, true, true)
		yys555 := string(yys555Slc)
		switch yys555 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys555)
		} // end switch yys555
	} // end for yyj555
	if !yyhl555 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj560 int
	var yyb560 bool
	var yyhl560 bool = l >= 0
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj560++
	if yyhl560 {
		yyb560 = yyj560 > l
	} else {
		yyb560 = r.CheckBreak()
	}
	if yyb560 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj560++
		if yyhl560 {
			yyb560 = yyj560 > l
		} else {
			yyb560 = r.CheckBreak()
		}
		if yyb560 {
			break
		}
		z.DecStructFieldNotFound(yyj560-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym565 := z.EncBinary()
		_ = yym565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep566 := !z.EncBinary()
			yy2arr566 := z.EncBasicHandle().StructToArray
			var yyq566 [5]bool
			_, _, _ = yysep566, yyq566, yy2arr566
			const yyr566 bool = false
			yyq566[0] = x.TargetPortal != ""
			yyq566[1] = x.IQN != ""
			yyq566[2] = x.Lun != 0
			yyq566[3] = x.FSType != ""
			yyq566[4] = x.ReadOnly != false
			if yyr566 || yy2arr566 {
				r.EncodeArrayStart(5)
			} else {
				var yynn566 int = 0
				for _, b := range yyq566 {
					if b {
						yynn566++
					}
				}
				r.EncodeMapStart(yynn566)
			}
			if yyr566 || yy2arr566 {
				if yyq566[0] {
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq566[0] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					yym569 := z.EncBinary()
					_ = yym569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr566 || yy2arr566 {
				if yyq566[1] {
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq566[1] {
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					yym572 := z.EncBinary()
					_ = yym572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr566 || yy2arr566 {
				if yyq566[2] {
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq566[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr566 || yy2arr566 {
				if yyq566[3] {
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq566[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym578 := z.EncBinary()
					_ = yym578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr566 || yy2arr566 {
				if yyq566[4] {
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq566[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep566 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym582 := z.DecBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl583 := r.ReadMapStart()
			if yyl583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl583, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl583 := r.ReadArrayStart()
			if yyl583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys584Slc
	var yyhl584 bool = l >= 0
	for yyj584 := 0; ; yyj584++ {
		if yyhl584 {
			if yyj584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys584Slc = r.DecodeBytes(yys584Slc, true, true)
		yys584 := string(yys584Slc)
		switch yys584 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys584)
		} // end switch yys584
	} // end for yyj584
	if !yyhl584 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj590 int
	var yyb590 bool
	var yyhl590 bool = l >= 0
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj590++
		if yyhl590 {
			yyb590 = yyj590 > l
		} else {
			yyb590 = r.CheckBreak()
		}
		if yyb590 {
			break
		}
		z.DecStructFieldNotFound(yyj590-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym596 := z.EncBinary()
		_ = yym596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep597 := !z.EncBinary()
			yy2arr597 := z.EncBasicHandle().StructToArray
			var yyq597 [4]bool
			_, _, _ = yysep597, yyq597, yy2arr597
			const yyr597 bool = false
			yyq597[3] = x.ReadOnly != false
			if yyr597 || yy2arr597 {
				r.EncodeArrayStart(4)
			} else {
				var yynn597 int = 3
				for _, b := range yyq597 {
					if b {
						yynn597++
					}
				}
				r.EncodeMapStart(yynn597)
			}
			if yyr597 || yy2arr597 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr597 || yy2arr597 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy602 := *x.Lun
					yym603 := z.EncBinary()
					_ = yym603
					if false {
					} else {
						r.EncodeInt(int64(yy602))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy604 := *x.Lun
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeInt(int64(yy604))
					}
				}
			}
			if yyr597 || yy2arr597 {
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr597 || yy2arr597 {
				if yyq597[3] {
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq597[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep597 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl613 := r.ReadMapStart()
			if yyl613 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl613, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl613 := r.ReadArrayStart()
			if yyl613 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl613, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys614Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys614Slc
	var yyhl614 bool = l >= 0
	for yyj614 := 0; ; yyj614++ {
		if yyhl614 {
			if yyj614 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys614Slc = r.DecodeBytes(yys614Slc, true, true)
		yys614 := string(yys614Slc)
		switch yys614 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv615 := &x.TargetWWNs
				yym616 := z.DecBinary()
				_ = yym616
				if false {
				} else {
					z.F.DecSliceStringX(yyv615, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym618 := z.DecBinary()
				_ = yym618
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys614)
		} // end switch yys614
	} // end for yyj614
	if !yyhl614 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv622 := &x.TargetWWNs
		yym623 := z.DecBinary()
		_ = yym623
		if false {
		} else {
			z.F.DecSliceStringX(yyv622, false, d)
		}
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym625 := z.DecBinary()
		_ = yym625
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym628 := z.EncBinary()
		_ = yym628
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep629 := !z.EncBinary()
			yy2arr629 := z.EncBasicHandle().StructToArray
			var yyq629 [4]bool
			_, _, _ = yysep629, yyq629, yy2arr629
			const yyr629 bool = false
			yyq629[1] = x.FSType != ""
			yyq629[2] = x.Partition != 0
			yyq629[3] = x.ReadOnly != false
			if yyr629 || yy2arr629 {
				r.EncodeArrayStart(4)
			} else {
				var yynn629 int = 1
				for _, b := range yyq629 {
					if b {
						yynn629++
					}
				}
				r.EncodeMapStart(yynn629)
			}
			if yyr629 || yy2arr629 {
				yym631 := z.EncBinary()
				_ = yym631
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym632 := z.EncBinary()
				_ = yym632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr629 || yy2arr629 {
				if yyq629[1] {
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq629[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr629 || yy2arr629 {
				if yyq629[2] {
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq629[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr629 || yy2arr629 {
				if yyq629[3] {
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq629[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep629 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym642 := z.DecBinary()
	_ = yym642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl643 := r.ReadMapStart()
			if yyl643 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl643, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl643 := r.ReadArrayStart()
			if yyl643 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl643, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys644Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys644Slc
	var yyhl644 bool = l >= 0
	for yyj644 := 0; ; yyj644++ {
		if yyhl644 {
			if yyj644 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys644Slc = r.DecodeBytes(yys644Slc, true, true)
		yys644 := string(yys644Slc)
		switch yys644 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys644)
		} // end switch yys644
	} // end for yyj644
	if !yyhl644 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [2]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(2)
			} else {
				var yynn655 int = 2
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr655 || yy2arr655 {
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym661 := z.EncBinary()
				_ = yym661
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep655 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym662 := z.DecBinary()
	_ = yym662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl663 := r.ReadMapStart()
			if yyl663 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl663, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl663 := r.ReadArrayStart()
			if yyl663 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys664Slc
	var yyhl664 bool = l >= 0
	for yyj664 := 0; ; yyj664++ {
		if yyhl664 {
			if yyj664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys664Slc = r.DecodeBytes(yys664Slc, true, true)
		yys664 := string(yys664Slc)
		switch yys664 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys664)
		} // end switch yys664
	} // end for yyj664
	if !yyhl664 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj667 int
	var yyb667 bool
	var yyhl667 bool = l >= 0
	yyj667++
	if yyhl667 {
		yyb667 = yyj667 > l
	} else {
		yyb667 = r.CheckBreak()
	}
	if yyb667 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj667++
	if yyhl667 {
		yyb667 = yyj667 > l
	} else {
		yyb667 = r.CheckBreak()
	}
	if yyb667 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj667++
		if yyhl667 {
			yyb667 = yyj667 > l
		} else {
			yyb667 = r.CheckBreak()
		}
		if yyb667 {
			break
		}
		z.DecStructFieldNotFound(yyj667-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [1]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(1)
			} else {
				var yynn671 int = 1
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
			}
			if yyr671 || yy2arr671 {
				yym673 := z.EncBinary()
				_ = yym673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep671 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl676 := r.ReadMapStart()
			if yyl676 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl676, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl676 := r.ReadArrayStart()
			if yyl676 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys677Slc
	var yyhl677 bool = l >= 0
	for yyj677 := 0; ; yyj677++ {
		if yyhl677 {
			if yyj677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys677Slc = r.DecodeBytes(yys677Slc, true, true)
		yys677 := string(yys677Slc)
		switch yys677 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys677)
		} // end switch yys677
	} // end for yyj677
	if !yyhl677 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj679 int
	var yyb679 bool
	var yyhl679 bool = l >= 0
	yyj679++
	if yyhl679 {
		yyb679 = yyj679 > l
	} else {
		yyb679 = r.CheckBreak()
	}
	if yyb679 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj679++
		if yyhl679 {
			yyb679 = yyj679 > l
		} else {
			yyb679 = r.CheckBreak()
		}
		if yyb679 {
			break
		}
		z.DecStructFieldNotFound(yyj679-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym681 := z.EncBinary()
		_ = yym681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep682 := !z.EncBinary()
			yy2arr682 := z.EncBasicHandle().StructToArray
			var yyq682 [3]bool
			_, _, _ = yysep682, yyq682, yy2arr682
			const yyr682 bool = false
			yyq682[2] = x.ReadOnly != false
			if yyr682 || yy2arr682 {
				r.EncodeArrayStart(3)
			} else {
				var yynn682 int = 2
				for _, b := range yyq682 {
					if b {
						yynn682++
					}
				}
				r.EncodeMapStart(yynn682)
			}
			if yyr682 || yy2arr682 {
				yym684 := z.EncBinary()
				_ = yym684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr682 || yy2arr682 {
				yym687 := z.EncBinary()
				_ = yym687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym688 := z.EncBinary()
				_ = yym688
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr682 || yy2arr682 {
				if yyq682[2] {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq682[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep682 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym692 := z.DecBinary()
	_ = yym692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl693 := r.ReadMapStart()
			if yyl693 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl693, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl693 := r.ReadArrayStart()
			if yyl693 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys694Slc
	var yyhl694 bool = l >= 0
	for yyj694 := 0; ; yyj694++ {
		if yyhl694 {
			if yyj694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys694Slc = r.DecodeBytes(yys694Slc, true, true)
		yys694 := string(yys694Slc)
		switch yys694 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys694)
		} // end switch yys694
	} // end for yyj694
	if !yyhl694 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj698 int
	var yyb698 bool
	var yyhl698 bool = l >= 0
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj698++
		if yyhl698 {
			yyb698 = yyj698 > l
		} else {
			yyb698 = r.CheckBreak()
		}
		if yyb698 {
			break
		}
		z.DecStructFieldNotFound(yyj698-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym702 := z.EncBinary()
		_ = yym702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep703 := !z.EncBinary()
			yy2arr703 := z.EncBasicHandle().StructToArray
			var yyq703 [3]bool
			_, _, _ = yysep703, yyq703, yy2arr703
			const yyr703 bool = false
			yyq703[2] = x.ReadOnly != false
			if yyr703 || yy2arr703 {
				r.EncodeArrayStart(3)
			} else {
				var yynn703 int = 2
				for _, b := range yyq703 {
					if b {
						yynn703++
					}
				}
				r.EncodeMapStart(yynn703)
			}
			if yyr703 || yy2arr703 {
				yym705 := z.EncBinary()
				_ = yym705
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym706 := z.EncBinary()
				_ = yym706
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr703 || yy2arr703 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr703 || yy2arr703 {
				if yyq703[2] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq703[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep703 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj719 int
	var yyb719 bool
	var yyhl719 bool = l >= 0
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj719++
	if yyhl719 {
		yyb719 = yyj719 > l
	} else {
		yyb719 = r.CheckBreak()
	}
	if yyb719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj719++
		if yyhl719 {
			yyb719 = yyj719 > l
		} else {
			yyb719 = r.CheckBreak()
		}
		if yyb719 {
			break
		}
		z.DecStructFieldNotFound(yyj719-1, "")
	}
	r.ReadEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym723 := z.EncBinary()
		_ = yym723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep724 := !z.EncBinary()
			yy2arr724 := z.EncBasicHandle().StructToArray
			var yyq724 [8]bool
			_, _, _ = yysep724, yyq724, yy2arr724
			const yyr724 bool = false
			yyq724[2] = x.FSType != ""
			yyq724[7] = x.ReadOnly != false
			if yyr724 || yy2arr724 {
				r.EncodeArrayStart(8)
			} else {
				var yynn724 int = 6
				for _, b := range yyq724 {
					if b {
						yynn724++
					}
				}
				r.EncodeMapStart(yynn724)
			}
			if yyr724 || yy2arr724 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr724 || yy2arr724 {
				yym729 := z.EncBinary()
				_ = yym729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr724 || yy2arr724 {
				if yyq724[2] {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr724 || yy2arr724 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr724 || yy2arr724 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr724 || yy2arr724 {
				yym741 := z.EncBinary()
				_ = yym741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr724 || yy2arr724 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr724 || yy2arr724 {
				if yyq724[7] {
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq724[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep724 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym747 := z.DecBinary()
	_ = yym747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl748 := r.ReadMapStart()
			if yyl748 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl748, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl748 := r.ReadArrayStart()
			if yyl748 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys749Slc
	var yyhl749 bool = l >= 0
	for yyj749 := 0; ; yyj749++ {
		if yyhl749 {
			if yyj749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys749Slc = r.DecodeBytes(yys749Slc, true, true)
		yys749 := string(yys749Slc)
		switch yys749 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv750 := &x.CephMonitors
				yym751 := z.DecBinary()
				_ = yym751
				if false {
				} else {
					z.F.DecSliceStringX(yyv750, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys749)
		} // end switch yys749
	} // end for yyj749
	if !yyhl749 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj759 int
	var yyb759 bool
	var yyhl759 bool = l >= 0
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv760 := &x.CephMonitors
		yym761 := z.DecBinary()
		_ = yym761
		if false {
		} else {
			z.F.DecSliceStringX(yyv760, false, d)
		}
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj759++
	if yyhl759 {
		yyb759 = yyj759 > l
	} else {
		yyb759 = r.CheckBreak()
	}
	if yyb759 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj759++
		if yyhl759 {
			yyb759 = yyj759 > l
		} else {
			yyb759 = r.CheckBreak()
		}
		if yyb759 {
			break
		}
		z.DecStructFieldNotFound(yyj759-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym769 := z.EncBinary()
		_ = yym769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep770 := !z.EncBinary()
			yy2arr770 := z.EncBasicHandle().StructToArray
			var yyq770 [3]bool
			_, _, _ = yysep770, yyq770, yy2arr770
			const yyr770 bool = false
			yyq770[1] = x.FSType != ""
			yyq770[2] = x.ReadOnly != false
			if yyr770 || yy2arr770 {
				r.EncodeArrayStart(3)
			} else {
				var yynn770 int = 1
				for _, b := range yyq770 {
					if b {
						yynn770++
					}
				}
				r.EncodeMapStart(yynn770)
			}
			if yyr770 || yy2arr770 {
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr770 || yy2arr770 {
				if yyq770[1] {
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq770[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr770 || yy2arr770 {
				if yyq770[2] {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq770[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep770 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym780 := z.DecBinary()
	_ = yym780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl781 := r.ReadMapStart()
			if yyl781 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl781, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl781 := r.ReadArrayStart()
			if yyl781 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys782Slc
	var yyhl782 bool = l >= 0
	for yyj782 := 0; ; yyj782++ {
		if yyhl782 {
			if yyj782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys782Slc = r.DecodeBytes(yys782Slc, true, true)
		yys782 := string(yys782Slc)
		switch yys782 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys782)
		} // end switch yys782
	} // end for yyj782
	if !yyhl782 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj786 int
	var yyb786 bool
	var yyhl786 bool = l >= 0
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj786++
		if yyhl786 {
			yyb786 = yyj786 > l
		} else {
			yyb786 = r.CheckBreak()
		}
		if yyb786 {
			break
		}
		z.DecStructFieldNotFound(yyj786-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym790 := z.EncBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep791 := !z.EncBinary()
			yy2arr791 := z.EncBasicHandle().StructToArray
			var yyq791 [5]bool
			_, _, _ = yysep791, yyq791, yy2arr791
			const yyr791 bool = false
			yyq791[1] = x.User != ""
			yyq791[2] = x.SecretFile != ""
			yyq791[3] = x.SecretRef != nil
			yyq791[4] = x.ReadOnly != false
			if yyr791 || yy2arr791 {
				r.EncodeArrayStart(5)
			} else {
				var yynn791 int = 1
				for _, b := range yyq791 {
					if b {
						yynn791++
					}
				}
				r.EncodeMapStart(yynn791)
			}
			if yyr791 || yy2arr791 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr791 || yy2arr791 {
				if yyq791[1] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr791 || yy2arr791 {
				if yyq791[2] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr791 || yy2arr791 {
				if yyq791[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq791[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr791 || yy2arr791 {
				if yyq791[4] {
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq791[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep791 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym805 := z.DecBinary()
	_ = yym805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl806 := r.ReadMapStart()
			if yyl806 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl806, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl806 := r.ReadArrayStart()
			if yyl806 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys807Slc
	var yyhl807 bool = l >= 0
	for yyj807 := 0; ; yyj807++ {
		if yyhl807 {
			if yyj807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys807Slc = r.DecodeBytes(yys807Slc, true, true)
		yys807 := string(yys807Slc)
		switch yys807 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv808 := &x.Monitors
				yym809 := z.DecBinary()
				_ = yym809
				if false {
				} else {
					z.F.DecSliceStringX(yyv808, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys807)
		} // end switch yys807
	} // end for yyj807
	if !yyhl807 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv815 := &x.Monitors
		yym816 := z.DecBinary()
		_ = yym816
		if false {
		} else {
			z.F.DecSliceStringX(yyv815, false, d)
		}
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym821 := z.EncBinary()
		_ = yym821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep822 := !z.EncBinary()
			yy2arr822 := z.EncBasicHandle().StructToArray
			var yyq822 [1]bool
			_, _, _ = yysep822, yyq822, yy2arr822
			const yyr822 bool = false
			if yyr822 || yy2arr822 {
				r.EncodeArrayStart(1)
			} else {
				var yynn822 int = 1
				for _, b := range yyq822 {
					if b {
						yynn822++
					}
				}
				r.EncodeMapStart(yynn822)
			}
			if yyr822 || yy2arr822 {
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep822 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym826 := z.DecBinary()
	_ = yym826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl827 := r.ReadMapStart()
			if yyl827 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl827, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl827 := r.ReadArrayStart()
			if yyl827 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys828Slc
	var yyhl828 bool = l >= 0
	for yyj828 := 0; ; yyj828++ {
		if yyhl828 {
			if yyj828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys828Slc = r.DecodeBytes(yys828Slc, true, true)
		yys828 := string(yys828Slc)
		switch yys828 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys828)
		} // end switch yys828
	} // end for yyj828
	if !yyhl828 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj830 int
	var yyb830 bool
	var yyhl830 bool = l >= 0
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj830++
		if yyhl830 {
			yyb830 = yyj830 > l
		} else {
			yyb830 = r.CheckBreak()
		}
		if yyb830 {
			break
		}
		z.DecStructFieldNotFound(yyj830-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym832 := z.EncBinary()
		_ = yym832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep833 := !z.EncBinary()
			yy2arr833 := z.EncBasicHandle().StructToArray
			var yyq833 [1]bool
			_, _, _ = yysep833, yyq833, yy2arr833
			const yyr833 bool = false
			yyq833[0] = len(x.Items) != 0
			if yyr833 || yy2arr833 {
				r.EncodeArrayStart(1)
			} else {
				var yynn833 int = 0
				for _, b := range yyq833 {
					if b {
						yynn833++
					}
				}
				r.EncodeMapStart(yynn833)
			}
			if yyr833 || yy2arr833 {
				if yyq833[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym835 := z.EncBinary()
						_ = yym835
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq833[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym836 := z.EncBinary()
						_ = yym836
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep833 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		switch yys839 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv840 := &x.Items
				yym841 := z.DecBinary()
				_ = yym841
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv840), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	if !yyhl839 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj842 int
	var yyb842 bool
	var yyhl842 bool = l >= 0
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv843 := &x.Items
		yym844 := z.DecBinary()
		_ = yym844
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv843), d)
		}
	}
	for {
		yyj842++
		if yyhl842 {
			yyb842 = yyj842 > l
		} else {
			yyb842 = r.CheckBreak()
		}
		if yyb842 {
			break
		}
		z.DecStructFieldNotFound(yyj842-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [2]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(2)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr846 || yy2arr846 {
				yy851 := &x.FieldRef
				yy851.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy852 := &x.FieldRef
				yy852.CodecEncodeSelf(e)
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym853 := z.DecBinary()
	_ = yym853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl854 := r.ReadMapStart()
			if yyl854 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl854, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl854 := r.ReadArrayStart()
			if yyl854 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl854, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys855Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys855Slc
	var yyhl855 bool = l >= 0
	for yyj855 := 0; ; yyj855++ {
		if yyhl855 {
			if yyj855 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys855Slc = r.DecodeBytes(yys855Slc, true, true)
		yys855 := string(yys855Slc)
		switch yys855 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv857 := &x.FieldRef
				yyv857.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys855)
		} // end switch yys855
	} // end for yyj855
	if !yyhl855 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj858 int
	var yyb858 bool
	var yyhl858 bool = l >= 0
	yyj858++
	if yyhl858 {
		yyb858 = yyj858 > l
	} else {
		yyb858 = r.CheckBreak()
	}
	if yyb858 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj858++
	if yyhl858 {
		yyb858 = yyj858 > l
	} else {
		yyb858 = r.CheckBreak()
	}
	if yyb858 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv860 := &x.FieldRef
		yyv860.CodecDecodeSelf(d)
	}
	for {
		yyj858++
		if yyhl858 {
			yyb858 = yyj858 > l
		} else {
			yyb858 = r.CheckBreak()
		}
		if yyb858 {
			break
		}
		z.DecStructFieldNotFound(yyj858-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym861 := z.EncBinary()
		_ = yym861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep862 := !z.EncBinary()
			yy2arr862 := z.EncBasicHandle().StructToArray
			var yyq862 [5]bool
			_, _, _ = yysep862, yyq862, yy2arr862
			const yyr862 bool = false
			yyq862[0] = x.Name != ""
			yyq862[1] = x.HostPort != 0
			yyq862[3] = x.Protocol != ""
			yyq862[4] = x.HostIP != ""
			if yyr862 || yy2arr862 {
				r.EncodeArrayStart(5)
			} else {
				var yynn862 int = 1
				for _, b := range yyq862 {
					if b {
						yynn862++
					}
				}
				r.EncodeMapStart(yynn862)
			}
			if yyr862 || yy2arr862 {
				if yyq862[0] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq862[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr862 || yy2arr862 {
				if yyq862[1] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq862[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr862 || yy2arr862 {
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym871 := z.EncBinary()
				_ = yym871
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr862 || yy2arr862 {
				if yyq862[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq862[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr862 || yy2arr862 {
				if yyq862[4] {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq862[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep862 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym876 := z.DecBinary()
	_ = yym876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl877 := r.ReadMapStart()
			if yyl877 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl877, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl877 := r.ReadArrayStart()
			if yyl877 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys878Slc
	var yyhl878 bool = l >= 0
	for yyj878 := 0; ; yyj878++ {
		if yyhl878 {
			if yyj878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys878Slc = r.DecodeBytes(yys878Slc, true, true)
		yys878 := string(yys878Slc)
		switch yys878 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys878)
		} // end switch yys878
	} // end for yyj878
	if !yyhl878 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj884 int
	var yyb884 bool
	var yyhl884 bool = l >= 0
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj884++
		if yyhl884 {
			yyb884 = yyj884 > l
		} else {
			yyb884 = r.CheckBreak()
		}
		if yyb884 {
			break
		}
		z.DecStructFieldNotFound(yyj884-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym890 := z.EncBinary()
		_ = yym890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep891 := !z.EncBinary()
			yy2arr891 := z.EncBasicHandle().StructToArray
			var yyq891 [3]bool
			_, _, _ = yysep891, yyq891, yy2arr891
			const yyr891 bool = false
			yyq891[1] = x.ReadOnly != false
			if yyr891 || yy2arr891 {
				r.EncodeArrayStart(3)
			} else {
				var yynn891 int = 2
				for _, b := range yyq891 {
					if b {
						yynn891++
					}
				}
				r.EncodeMapStart(yynn891)
			}
			if yyr891 || yy2arr891 {
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr891 || yy2arr891 {
				if yyq891[1] {
					yym896 := z.EncBinary()
					_ = yym896
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq891[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr891 || yy2arr891 {
				yym899 := z.EncBinary()
				_ = yym899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep891 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym901 := z.DecBinary()
	_ = yym901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl902 := r.ReadMapStart()
			if yyl902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl902, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl902 := r.ReadArrayStart()
			if yyl902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys903Slc
	var yyhl903 bool = l >= 0
	for yyj903 := 0; ; yyj903++ {
		if yyhl903 {
			if yyj903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys903Slc = r.DecodeBytes(yys903Slc, true, true)
		yys903 := string(yys903Slc)
		switch yys903 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys903)
		} // end switch yys903
	} // end for yyj903
	if !yyhl903 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym911 := z.EncBinary()
		_ = yym911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep912 := !z.EncBinary()
			yy2arr912 := z.EncBasicHandle().StructToArray
			var yyq912 [3]bool
			_, _, _ = yysep912, yyq912, yy2arr912
			const yyr912 bool = false
			yyq912[1] = x.Value != ""
			yyq912[2] = x.ValueFrom != nil
			if yyr912 || yy2arr912 {
				r.EncodeArrayStart(3)
			} else {
				var yynn912 int = 1
				for _, b := range yyq912 {
					if b {
						yynn912++
					}
				}
				r.EncodeMapStart(yynn912)
			}
			if yyr912 || yy2arr912 {
				yym914 := z.EncBinary()
				_ = yym914
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym915 := z.EncBinary()
				_ = yym915
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr912 || yy2arr912 {
				if yyq912[1] {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr912 || yy2arr912 {
				if yyq912[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq912[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep912 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym920 := z.DecBinary()
	_ = yym920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl921 := r.ReadMapStart()
			if yyl921 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl921, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl921 := r.ReadArrayStart()
			if yyl921 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys922Slc
	var yyhl922 bool = l >= 0
	for yyj922 := 0; ; yyj922++ {
		if yyhl922 {
			if yyj922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys922Slc = r.DecodeBytes(yys922Slc, true, true)
		yys922 := string(yys922Slc)
		switch yys922 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys922)
		} // end switch yys922
	} // end for yyj922
	if !yyhl922 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj926 int
	var yyb926 bool
	var yyhl926 bool = l >= 0
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj926++
		if yyhl926 {
			yyb926 = yyj926 > l
		} else {
			yyb926 = r.CheckBreak()
		}
		if yyb926 {
			break
		}
		z.DecStructFieldNotFound(yyj926-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym930 := z.EncBinary()
		_ = yym930
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep931 := !z.EncBinary()
			yy2arr931 := z.EncBasicHandle().StructToArray
			var yyq931 [1]bool
			_, _, _ = yysep931, yyq931, yy2arr931
			const yyr931 bool = false
			if yyr931 || yy2arr931 {
				r.EncodeArrayStart(1)
			} else {
				var yynn931 int = 1
				for _, b := range yyq931 {
					if b {
						yynn931++
					}
				}
				r.EncodeMapStart(yynn931)
			}
			if yyr931 || yy2arr931 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep931 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym933 := z.DecBinary()
	_ = yym933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl934 := r.ReadMapStart()
			if yyl934 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl934, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl934 := r.ReadArrayStart()
			if yyl934 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys935Slc
	var yyhl935 bool = l >= 0
	for yyj935 := 0; ; yyj935++ {
		if yyhl935 {
			if yyj935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys935Slc = r.DecodeBytes(yys935Slc, true, true)
		yys935 := string(yys935Slc)
		switch yys935 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys935)
		} // end switch yys935
	} // end for yyj935
	if !yyhl935 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj937 int
	var yyb937 bool
	var yyhl937 bool = l >= 0
	yyj937++
	if yyhl937 {
		yyb937 = yyj937 > l
	} else {
		yyb937 = r.CheckBreak()
	}
	if yyb937 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj937++
		if yyhl937 {
			yyb937 = yyj937 > l
		} else {
			yyb937 = r.CheckBreak()
		}
		if yyb937 {
			break
		}
		z.DecStructFieldNotFound(yyj937-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym939 := z.EncBinary()
		_ = yym939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep940 := !z.EncBinary()
			yy2arr940 := z.EncBasicHandle().StructToArray
			var yyq940 [2]bool
			_, _, _ = yysep940, yyq940, yy2arr940
			const yyr940 bool = false
			if yyr940 || yy2arr940 {
				r.EncodeArrayStart(2)
			} else {
				var yynn940 int = 2
				for _, b := range yyq940 {
					if b {
						yynn940++
					}
				}
				r.EncodeMapStart(yynn940)
			}
			if yyr940 || yy2arr940 {
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				yym943 := z.EncBinary()
				_ = yym943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr940 || yy2arr940 {
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep940 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [4]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = x.Path != ""
			yyq956[1] = true
			yyq956[2] = x.Host != ""
			yyq956[3] = x.Scheme != ""
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(4)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr956 || yy2arr956 {
				if yyq956[1] {
					yy961 := &x.Port
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else if z.HasExtensions() && z.EncExt(yy961) {
					} else if !yym962 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy961)
					} else {
						z.EncFallback(yy961)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[1] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy963 := &x.Port
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else if z.HasExtensions() && z.EncExt(yy963) {
					} else if !yym964 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy963)
					} else {
						z.EncFallback(yy963)
					}
				}
			}
			if yyr956 || yy2arr956 {
				if yyq956[2] {
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq956[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr956 || yy2arr956 {
				if yyq956[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq956[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym969 := z.DecBinary()
	_ = yym969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl970 := r.ReadMapStart()
			if yyl970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl970, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl970 := r.ReadArrayStart()
			if yyl970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys971Slc
	var yyhl971 bool = l >= 0
	for yyj971 := 0; ; yyj971++ {
		if yyhl971 {
			if yyj971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys971Slc = r.DecodeBytes(yys971Slc, true, true)
		yys971 := string(yys971Slc)
		switch yys971 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv973 := &x.Port
				yym974 := z.DecBinary()
				_ = yym974
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv973) {
				} else if !yym974 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv973)
				} else {
					z.DecFallback(yyv973, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys971)
		} // end switch yys971
	} // end for yyj971
	if !yyhl971 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj977 int
	var yyb977 bool
	var yyhl977 bool = l >= 0
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv979 := &x.Port
		yym980 := z.DecBinary()
		_ = yym980
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv979) {
		} else if !yym980 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv979)
		} else {
			z.DecFallback(yyv979, false)
		}
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj977++
		if yyhl977 {
			yyb977 = yyj977 > l
		} else {
			yyb977 = r.CheckBreak()
		}
		if yyb977 {
			break
		}
		z.DecStructFieldNotFound(yyj977-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym983 := z.EncBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym984 := z.DecBinary()
	_ = yym984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym985 := z.EncBinary()
		_ = yym985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep986 := !z.EncBinary()
			yy2arr986 := z.EncBasicHandle().StructToArray
			var yyq986 [1]bool
			_, _, _ = yysep986, yyq986, yy2arr986
			const yyr986 bool = false
			yyq986[0] = true
			if yyr986 || yy2arr986 {
				r.EncodeArrayStart(1)
			} else {
				var yynn986 int = 0
				for _, b := range yyq986 {
					if b {
						yynn986++
					}
				}
				r.EncodeMapStart(yynn986)
			}
			if yyr986 || yy2arr986 {
				if yyq986[0] {
					yy988 := &x.Port
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy988) {
					} else if !yym989 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy988)
					} else {
						z.EncFallback(yy988)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq986[0] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy990 := &x.Port
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else if z.HasExtensions() && z.EncExt(yy990) {
					} else if !yym991 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy990)
					} else {
						z.EncFallback(yy990)
					}
				}
			}
			if yysep986 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym992 := z.DecBinary()
	_ = yym992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl993 := r.ReadMapStart()
			if yyl993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl993, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl993 := r.ReadArrayStart()
			if yyl993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys994Slc
	var yyhl994 bool = l >= 0
	for yyj994 := 0; ; yyj994++ {
		if yyhl994 {
			if yyj994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys994Slc = r.DecodeBytes(yys994Slc, true, true)
		yys994 := string(yys994Slc)
		switch yys994 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv995 := &x.Port
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv995) {
				} else if !yym996 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv995)
				} else {
					z.DecFallback(yyv995, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys994)
		} // end switch yys994
	} // end for yyj994
	if !yyhl994 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj997 int
	var yyb997 bool
	var yyhl997 bool = l >= 0
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv998 := &x.Port
		yym999 := z.DecBinary()
		_ = yym999
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv998) {
		} else if !yym999 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv998)
		} else {
			z.DecFallback(yyv998, false)
		}
	}
	for {
		yyj997++
		if yyhl997 {
			yyb997 = yyj997 > l
		} else {
			yyb997 = r.CheckBreak()
		}
		if yyb997 {
			break
		}
		z.DecStructFieldNotFound(yyj997-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [1]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			yyq1001[0] = len(x.Command) != 0
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1001 int = 0
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
			}
			if yyr1001 || yy2arr1001 {
				if yyq1001[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1001[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep1001 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1008 := &x.Command
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					z.F.DecSliceStringX(yyv1008, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1011 := &x.Command
		yym1012 := z.DecBinary()
		_ = yym1012
		if false {
		} else {
			z.F.DecSliceStringX(yyv1011, false, d)
		}
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [8]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1014[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1014[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1014[3] = x.InitialDelaySeconds != 0
			yyq1014[4] = x.TimeoutSeconds != 0
			yyq1014[5] = x.PeriodSeconds != 0
			yyq1014[6] = x.SuccessThreshold != 0
			yyq1014[7] = x.FailureThreshold != 0
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1014 int = 0
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
			}
			var yyn1015 bool
			if x.Handler.Exec == nil {
				yyn1015 = true
				goto LABEL1015
			}
		LABEL1015:
			if yyr1014 || yy2arr1014 {
				if yyn1015 {
					r.EncodeNil()
				} else {
					if yyq1014[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1014[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn1015 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1016 bool
			if x.Handler.HTTPGet == nil {
				yyn1016 = true
				goto LABEL1016
			}
		LABEL1016:
			if yyr1014 || yy2arr1014 {
				if yyn1016 {
					r.EncodeNil()
				} else {
					if yyq1014[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1014[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn1016 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1017 bool
			if x.Handler.TCPSocket == nil {
				yyn1017 = true
				goto LABEL1017
			}
		LABEL1017:
			if yyr1014 || yy2arr1014 {
				if yyn1017 {
					r.EncodeNil()
				} else {
					if yyq1014[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1014[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn1017 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				if yyq1014[3] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1014[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				if yyq1014[4] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1014[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				if yyq1014[5] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1014[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				if yyq1014[6] {
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1014[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				if yyq1014[7] {
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1014[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym1032 := z.EncBinary()
					_ = yym1032
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep1014 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1033 := z.DecBinary()
	_ = yym1033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1034 := r.ReadMapStart()
			if yyl1034 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1034, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1034 := r.ReadArrayStart()
			if yyl1034 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1035Slc
	var yyhl1035 bool = l >= 0
	for yyj1035 := 0; ; yyj1035++ {
		if yyhl1035 {
			if yyj1035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1035Slc = r.DecodeBytes(yys1035Slc, true, true)
		yys1035 := string(yys1035Slc)
		switch yys1035 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1035)
		} // end switch yys1035
	} // end for yyj1035
	if !yyhl1035 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1044 int
	var yyb1044 bool
	var yyhl1044 bool = l >= 0
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1044++
		if yyhl1044 {
			yyb1044 = yyj1044 > l
		} else {
			yyb1044 = r.CheckBreak()
		}
		if yyb1044 {
			break
		}
		z.DecStructFieldNotFound(yyj1044-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1053 := z.EncBinary()
	_ = yym1053
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1054 := z.DecBinary()
	_ = yym1054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1055 := z.EncBinary()
	_ = yym1055
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1056 := z.DecBinary()
	_ = yym1056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1057 := z.EncBinary()
		_ = yym1057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1058 := !z.EncBinary()
			yy2arr1058 := z.EncBasicHandle().StructToArray
			var yyq1058 [2]bool
			_, _, _ = yysep1058, yyq1058, yy2arr1058
			const yyr1058 bool = false
			yyq1058[0] = len(x.Add) != 0
			yyq1058[1] = len(x.Drop) != 0
			if yyr1058 || yy2arr1058 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1058 int = 0
				for _, b := range yyq1058 {
					if b {
						yynn1058++
					}
				}
				r.EncodeMapStart(yynn1058)
			}
			if yyr1058 || yy2arr1058 {
				if yyq1058[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1058[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1061 := z.EncBinary()
						_ = yym1061
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				if yyq1058[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1058[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1064 := z.EncBinary()
						_ = yym1064
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1058 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1065 := z.DecBinary()
	_ = yym1065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1066 := r.ReadMapStart()
			if yyl1066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1066, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1066 := r.ReadArrayStart()
			if yyl1066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1067Slc
	var yyhl1067 bool = l >= 0
	for yyj1067 := 0; ; yyj1067++ {
		if yyhl1067 {
			if yyj1067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1067Slc = r.DecodeBytes(yys1067Slc, true, true)
		yys1067 := string(yys1067Slc)
		switch yys1067 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1068 := &x.Add
				yym1069 := z.DecBinary()
				_ = yym1069
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1068), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1070 := &x.Drop
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1070), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1067)
		} // end switch yys1067
	} // end for yyj1067
	if !yyhl1067 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1072 int
	var yyb1072 bool
	var yyhl1072 bool = l >= 0
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1073 := &x.Add
		yym1074 := z.DecBinary()
		_ = yym1074
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1073), d)
		}
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1075 := &x.Drop
		yym1076 := z.DecBinary()
		_ = yym1076
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1075), d)
		}
	}
	for {
		yyj1072++
		if yyhl1072 {
			yyb1072 = yyj1072 > l
		} else {
			yyb1072 = r.CheckBreak()
		}
		if yyb1072 {
			break
		}
		z.DecStructFieldNotFound(yyj1072-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyq1078 [2]bool
			_, _, _ = yysep1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[0] = len(x.Limits) != 0
			yyq1078[1] = len(x.Requests) != 0
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1078 int = 0
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
			}
			if yyr1078 || yy2arr1078 {
				if yyq1078[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				if yyq1078[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1078[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1078 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1081 := z.DecBinary()
	_ = yym1081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1082 := r.ReadMapStart()
			if yyl1082 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1082, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1082 := r.ReadArrayStart()
			if yyl1082 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1083Slc
	var yyhl1083 bool = l >= 0
	for yyj1083 := 0; ; yyj1083++ {
		if yyhl1083 {
			if yyj1083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1083Slc = r.DecodeBytes(yys1083Slc, true, true)
		yys1083 := string(yys1083Slc)
		switch yys1083 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1084 := &x.Limits
				yyv1084.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1085 := &x.Requests
				yyv1085.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1083)
		} // end switch yys1083
	} // end for yyj1083
	if !yyhl1083 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1086 int
	var yyb1086 bool
	var yyhl1086 bool = l >= 0
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1087 := &x.Limits
		yyv1087.CodecDecodeSelf(d)
	}
	yyj1086++
	if yyhl1086 {
		yyb1086 = yyj1086 > l
	} else {
		yyb1086 = r.CheckBreak()
	}
	if yyb1086 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1088 := &x.Requests
		yyv1088.CodecDecodeSelf(d)
	}
	for {
		yyj1086++
		if yyhl1086 {
			yyb1086 = yyj1086 > l
		} else {
			yyb1086 = r.CheckBreak()
		}
		if yyb1086 {
			break
		}
		z.DecStructFieldNotFound(yyj1086-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1089 := z.EncBinary()
		_ = yym1089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1090 := !z.EncBinary()
			yy2arr1090 := z.EncBasicHandle().StructToArray
			var yyq1090 [18]bool
			_, _, _ = yysep1090, yyq1090, yy2arr1090
			const yyr1090 bool = false
			yyq1090[2] = len(x.Command) != 0
			yyq1090[3] = len(x.Args) != 0
			yyq1090[4] = x.WorkingDir != ""
			yyq1090[5] = len(x.Ports) != 0
			yyq1090[6] = len(x.Env) != 0
			yyq1090[7] = true
			yyq1090[8] = len(x.VolumeMounts) != 0
			yyq1090[9] = x.LivenessProbe != nil
			yyq1090[10] = x.ReadinessProbe != nil
			yyq1090[11] = x.Lifecycle != nil
			yyq1090[12] = x.TerminationMessagePath != ""
			yyq1090[14] = x.SecurityContext != nil
			yyq1090[15] = x.Stdin != false
			yyq1090[16] = x.StdinOnce != false
			yyq1090[17] = x.TTY != false
			if yyr1090 || yy2arr1090 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1090 int = 3
				for _, b := range yyq1090 {
					if b {
						yynn1090++
					}
				}
				r.EncodeMapStart(yynn1090)
			}
			if yyr1090 || yy2arr1090 {
				yym1092 := z.EncBinary()
				_ = yym1092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1093 := z.EncBinary()
				_ = yym1093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1090 || yy2arr1090 {
				yym1095 := z.EncBinary()
				_ = yym1095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1096 := z.EncBinary()
				_ = yym1096
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1099 := z.EncBinary()
						_ = yym1099
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1102 := z.EncBinary()
						_ = yym1102
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[4] {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1107 := z.EncBinary()
						_ = yym1107
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1108 := z.EncBinary()
						_ = yym1108
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[7] {
					yy1113 := &x.Resources
					yy1113.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1114 := &x.Resources
					yy1114.CodecEncodeSelf(e)
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1116 := z.EncBinary()
						_ = yym1116
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1117 := z.EncBinary()
						_ = yym1117
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[12] {
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[15] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1090[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[16] {
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1090[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1131 := z.EncBinary()
					_ = yym1131
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				if yyq1090[17] {
					yym1133 := z.EncBinary()
					_ = yym1133
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1090[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1134 := z.EncBinary()
					_ = yym1134
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1090 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1135 := z.DecBinary()
	_ = yym1135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1136 := r.ReadMapStart()
			if yyl1136 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1136, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1136 := r.ReadArrayStart()
			if yyl1136 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1137Slc
	var yyhl1137 bool = l >= 0
	for yyj1137 := 0; ; yyj1137++ {
		if yyhl1137 {
			if yyj1137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1137Slc = r.DecodeBytes(yys1137Slc, true, true)
		yys1137 := string(yys1137Slc)
		switch yys1137 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1140 := &x.Command
				yym1141 := z.DecBinary()
				_ = yym1141
				if false {
				} else {
					z.F.DecSliceStringX(yyv1140, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1142 := &x.Args
				yym1143 := z.DecBinary()
				_ = yym1143
				if false {
				} else {
					z.F.DecSliceStringX(yyv1142, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1145 := &x.Ports
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1145), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1147 := &x.Env
				yym1148 := z.DecBinary()
				_ = yym1148
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1147), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1149 := &x.Resources
				yyv1149.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1150 := &x.VolumeMounts
				yym1151 := z.DecBinary()
				_ = yym1151
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1150), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1137)
		} // end switch yys1137
	} // end for yyj1137
	if !yyhl1137 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1164 := &x.Command
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else {
			z.F.DecSliceStringX(yyv1164, false, d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1166 := &x.Args
		yym1167 := z.DecBinary()
		_ = yym1167
		if false {
		} else {
			z.F.DecSliceStringX(yyv1166, false, d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1169 := &x.Ports
		yym1170 := z.DecBinary()
		_ = yym1170
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1169), d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1171 := &x.Env
		yym1172 := z.DecBinary()
		_ = yym1172
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1171), d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1173 := &x.Resources
		yyv1173.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1174 := &x.VolumeMounts
		yym1175 := z.DecBinary()
		_ = yym1175
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1174), d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [3]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[0] = x.Exec != nil
			yyq1186[1] = x.HTTPGet != nil
			yyq1186[2] = x.TCPSocket != nil
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1186 int = 0
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		switch yys1192 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	if !yyhl1192 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1200 := z.EncBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1201 := !z.EncBinary()
			yy2arr1201 := z.EncBasicHandle().StructToArray
			var yyq1201 [2]bool
			_, _, _ = yysep1201, yyq1201, yy2arr1201
			const yyr1201 bool = false
			yyq1201[0] = x.PostStart != nil
			yyq1201[1] = x.PreStop != nil
			if yyr1201 || yy2arr1201 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1201 int = 0
				for _, b := range yyq1201 {
					if b {
						yynn1201++
					}
				}
				r.EncodeMapStart(yynn1201)
			}
			if yyr1201 || yy2arr1201 {
				if yyq1201[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				if yyq1201[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1201 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1204 := z.DecBinary()
	_ = yym1204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1205 := r.ReadMapStart()
			if yyl1205 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1205, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1205 := r.ReadArrayStart()
			if yyl1205 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1206Slc
	var yyhl1206 bool = l >= 0
	for yyj1206 := 0; ; yyj1206++ {
		if yyhl1206 {
			if yyj1206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1206Slc = r.DecodeBytes(yys1206Slc, true, true)
		yys1206 := string(yys1206Slc)
		switch yys1206 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1206)
		} // end switch yys1206
	} // end for yyj1206
	if !yyhl1206 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1209 int
	var yyb1209 bool
	var yyhl1209 bool = l >= 0
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1209++
		if yyhl1209 {
			yyb1209 = yyj1209 > l
		} else {
			yyb1209 = r.CheckBreak()
		}
		if yyb1209 {
			break
		}
		z.DecStructFieldNotFound(yyj1209-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1212 := z.EncBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1213 := z.DecBinary()
	_ = yym1213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [2]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[0] = x.Reason != ""
			yyq1215[1] = x.Message != ""
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1215 int = 0
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[0] {
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[1] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1215 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1222 := z.DecBinary()
	_ = yym1222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1223 := r.ReadMapStart()
			if yyl1223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1223, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1223 := r.ReadArrayStart()
			if yyl1223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1224Slc
	var yyhl1224 bool = l >= 0
	for yyj1224 := 0; ; yyj1224++ {
		if yyhl1224 {
			if yyj1224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1224Slc = r.DecodeBytes(yys1224Slc, true, true)
		yys1224 := string(yys1224Slc)
		switch yys1224 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1224)
		} // end switch yys1224
	} // end for yyj1224
	if !yyhl1224 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1227 int
	var yyb1227 bool
	var yyhl1227 bool = l >= 0
	yyj1227++
	if yyhl1227 {
		yyb1227 = yyj1227 > l
	} else {
		yyb1227 = r.CheckBreak()
	}
	if yyb1227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1227++
	if yyhl1227 {
		yyb1227 = yyj1227 > l
	} else {
		yyb1227 = r.CheckBreak()
	}
	if yyb1227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1227++
		if yyhl1227 {
			yyb1227 = yyj1227 > l
		} else {
			yyb1227 = r.CheckBreak()
		}
		if yyb1227 {
			break
		}
		z.DecStructFieldNotFound(yyj1227-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1230 := z.EncBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1231 := !z.EncBinary()
			yy2arr1231 := z.EncBasicHandle().StructToArray
			var yyq1231 [1]bool
			_, _, _ = yysep1231, yyq1231, yy2arr1231
			const yyr1231 bool = false
			yyq1231[0] = true
			if yyr1231 || yy2arr1231 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1231 int = 0
				for _, b := range yyq1231 {
					if b {
						yynn1231++
					}
				}
				r.EncodeMapStart(yynn1231)
			}
			if yyr1231 || yy2arr1231 {
				if yyq1231[0] {
					yy1233 := &x.StartedAt
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1233) {
					} else if yym1234 {
						z.EncBinaryMarshal(yy1233)
					} else if !yym1234 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1233)
					} else {
						z.EncFallback(yy1233)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1231[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1235 := &x.StartedAt
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1235) {
					} else if yym1236 {
						z.EncBinaryMarshal(yy1235)
					} else if !yym1236 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1235)
					} else {
						z.EncFallback(yy1235)
					}
				}
			}
			if yysep1231 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1237 := z.DecBinary()
	_ = yym1237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1238 := r.ReadMapStart()
			if yyl1238 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1238, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1238 := r.ReadArrayStart()
			if yyl1238 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1239Slc
	var yyhl1239 bool = l >= 0
	for yyj1239 := 0; ; yyj1239++ {
		if yyhl1239 {
			if yyj1239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1239Slc = r.DecodeBytes(yys1239Slc, true, true)
		yys1239 := string(yys1239Slc)
		switch yys1239 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1240 := &x.StartedAt
				yym1241 := z.DecBinary()
				_ = yym1241
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1240) {
				} else if yym1241 {
					z.DecBinaryUnmarshal(yyv1240)
				} else if !yym1241 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1240)
				} else {
					z.DecFallback(yyv1240, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1239)
		} // end switch yys1239
	} // end for yyj1239
	if !yyhl1239 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1242 int
	var yyb1242 bool
	var yyhl1242 bool = l >= 0
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1243 := &x.StartedAt
		yym1244 := z.DecBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1243) {
		} else if yym1244 {
			z.DecBinaryUnmarshal(yyv1243)
		} else if !yym1244 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1243)
		} else {
			z.DecFallback(yyv1243, false)
		}
	}
	for {
		yyj1242++
		if yyhl1242 {
			yyb1242 = yyj1242 > l
		} else {
			yyb1242 = r.CheckBreak()
		}
		if yyb1242 {
			break
		}
		z.DecStructFieldNotFound(yyj1242-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1245 := z.EncBinary()
		_ = yym1245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1246 := !z.EncBinary()
			yy2arr1246 := z.EncBasicHandle().StructToArray
			var yyq1246 [7]bool
			_, _, _ = yysep1246, yyq1246, yy2arr1246
			const yyr1246 bool = false
			yyq1246[1] = x.Signal != 0
			yyq1246[2] = x.Reason != ""
			yyq1246[3] = x.Message != ""
			yyq1246[4] = true
			yyq1246[5] = true
			yyq1246[6] = x.ContainerID != ""
			if yyr1246 || yy2arr1246 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1246 int = 1
				for _, b := range yyq1246 {
					if b {
						yynn1246++
					}
				}
				r.EncodeMapStart(yynn1246)
			}
			if yyr1246 || yy2arr1246 {
				yym1248 := z.EncBinary()
				_ = yym1248
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1249 := z.EncBinary()
				_ = yym1249
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1246 || yy2arr1246 {
				if yyq1246[1] {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1246[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				if yyq1246[2] {
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1246[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				if yyq1246[3] {
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1246[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				if yyq1246[4] {
					yy1260 := &x.StartedAt
					yym1261 := z.EncBinary()
					_ = yym1261
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1260) {
					} else if yym1261 {
						z.EncBinaryMarshal(yy1260)
					} else if !yym1261 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1260)
					} else {
						z.EncFallback(yy1260)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1246[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1262 := &x.StartedAt
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1262) {
					} else if yym1263 {
						z.EncBinaryMarshal(yy1262)
					} else if !yym1263 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1262)
					} else {
						z.EncFallback(yy1262)
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				if yyq1246[5] {
					yy1265 := &x.FinishedAt
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1265) {
					} else if yym1266 {
						z.EncBinaryMarshal(yy1265)
					} else if !yym1266 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1265)
					} else {
						z.EncFallback(yy1265)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1246[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1267 := &x.FinishedAt
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1267) {
					} else if yym1268 {
						z.EncBinaryMarshal(yy1267)
					} else if !yym1268 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1267)
					} else {
						z.EncFallback(yy1267)
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				if yyq1246[6] {
					yym1270 := z.EncBinary()
					_ = yym1270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1246[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1271 := z.EncBinary()
					_ = yym1271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1246 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1272 := z.DecBinary()
	_ = yym1272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1273 := r.ReadMapStart()
			if yyl1273 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1273, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1273 := r.ReadArrayStart()
			if yyl1273 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1274Slc
	var yyhl1274 bool = l >= 0
	for yyj1274 := 0; ; yyj1274++ {
		if yyhl1274 {
			if yyj1274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1274Slc = r.DecodeBytes(yys1274Slc, true, true)
		yys1274 := string(yys1274Slc)
		switch yys1274 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1279 := &x.StartedAt
				yym1280 := z.DecBinary()
				_ = yym1280
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1279) {
				} else if yym1280 {
					z.DecBinaryUnmarshal(yyv1279)
				} else if !yym1280 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1279)
				} else {
					z.DecFallback(yyv1279, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1281 := &x.FinishedAt
				yym1282 := z.DecBinary()
				_ = yym1282
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1281) {
				} else if yym1282 {
					z.DecBinaryUnmarshal(yyv1281)
				} else if !yym1282 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1281)
				} else {
					z.DecFallback(yyv1281, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1274)
		} // end switch yys1274
	} // end for yyj1274
	if !yyhl1274 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1289 := &x.StartedAt
		yym1290 := z.DecBinary()
		_ = yym1290
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1289) {
		} else if yym1290 {
			z.DecBinaryUnmarshal(yyv1289)
		} else if !yym1290 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1289)
		} else {
			z.DecFallback(yyv1289, false)
		}
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1291 := &x.FinishedAt
		yym1292 := z.DecBinary()
		_ = yym1292
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1291) {
		} else if yym1292 {
			z.DecBinaryUnmarshal(yyv1291)
		} else if !yym1292 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1291)
		} else {
			z.DecFallback(yyv1291, false)
		}
	}
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1294 := z.EncBinary()
		_ = yym1294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1295 := !z.EncBinary()
			yy2arr1295 := z.EncBasicHandle().StructToArray
			var yyq1295 [3]bool
			_, _, _ = yysep1295, yyq1295, yy2arr1295
			const yyr1295 bool = false
			yyq1295[0] = x.Waiting != nil
			yyq1295[1] = x.Running != nil
			yyq1295[2] = x.Terminated != nil
			if yyr1295 || yy2arr1295 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1295 int = 0
				for _, b := range yyq1295 {
					if b {
						yynn1295++
					}
				}
				r.EncodeMapStart(yynn1295)
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1295 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1299 := z.DecBinary()
	_ = yym1299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1300 := r.ReadMapStart()
			if yyl1300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1300 := r.ReadArrayStart()
			if yyl1300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1301Slc
	var yyhl1301 bool = l >= 0
	for yyj1301 := 0; ; yyj1301++ {
		if yyhl1301 {
			if yyj1301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1301Slc = r.DecodeBytes(yys1301Slc, true, true)
		yys1301 := string(yys1301Slc)
		switch yys1301 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1301)
		} // end switch yys1301
	} // end for yyj1301
	if !yyhl1301 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1305 int
	var yyb1305 bool
	var yyhl1305 bool = l >= 0
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1305++
		if yyhl1305 {
			yyb1305 = yyj1305 > l
		} else {
			yyb1305 = r.CheckBreak()
		}
		if yyb1305 {
			break
		}
		z.DecStructFieldNotFound(yyj1305-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1309 := z.EncBinary()
		_ = yym1309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1310 := !z.EncBinary()
			yy2arr1310 := z.EncBasicHandle().StructToArray
			var yyq1310 [8]bool
			_, _, _ = yysep1310, yyq1310, yy2arr1310
			const yyr1310 bool = false
			yyq1310[1] = true
			yyq1310[2] = true
			yyq1310[7] = x.ContainerID != ""
			if yyr1310 || yy2arr1310 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1310 int = 5
				for _, b := range yyq1310 {
					if b {
						yynn1310++
					}
				}
				r.EncodeMapStart(yynn1310)
			}
			if yyr1310 || yy2arr1310 {
				yym1312 := z.EncBinary()
				_ = yym1312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1313 := z.EncBinary()
				_ = yym1313
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1310 || yy2arr1310 {
				if yyq1310[1] {
					yy1315 := &x.State
					yy1315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1310[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1316 := &x.State
					yy1316.CodecEncodeSelf(e)
				}
			}
			if yyr1310 || yy2arr1310 {
				if yyq1310[2] {
					yy1318 := &x.LastTerminationState
					yy1318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1310[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1319 := &x.LastTerminationState
					yy1319.CodecEncodeSelf(e)
				}
			}
			if yyr1310 || yy2arr1310 {
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1322 := z.EncBinary()
				_ = yym1322
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1310 || yy2arr1310 {
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1310 || yy2arr1310 {
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1310 || yy2arr1310 {
				yym1330 := z.EncBinary()
				_ = yym1330
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1331 := z.EncBinary()
				_ = yym1331
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1310 || yy2arr1310 {
				if yyq1310[7] {
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1310[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1310 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1335 := z.DecBinary()
	_ = yym1335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1336 := r.ReadMapStart()
			if yyl1336 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1336, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1336 := r.ReadArrayStart()
			if yyl1336 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1337Slc
	var yyhl1337 bool = l >= 0
	for yyj1337 := 0; ; yyj1337++ {
		if yyhl1337 {
			if yyj1337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1337Slc = r.DecodeBytes(yys1337Slc, true, true)
		yys1337 := string(yys1337Slc)
		switch yys1337 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1339 := &x.State
				yyv1339.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1340 := &x.LastTerminationState
				yyv1340.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1337)
		} // end switch yys1337
	} // end for yyj1337
	if !yyhl1337 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1346 int
	var yyb1346 bool
	var yyhl1346 bool = l >= 0
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1348 := &x.State
		yyv1348.CodecDecodeSelf(d)
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1349 := &x.LastTerminationState
		yyv1349.CodecDecodeSelf(d)
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1346++
		if yyhl1346 {
			yyb1346 = yyj1346 > l
		} else {
			yyb1346 = r.CheckBreak()
		}
		if yyb1346 {
			break
		}
		z.DecStructFieldNotFound(yyj1346-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1355 := z.EncBinary()
	_ = yym1355
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1356 := z.DecBinary()
	_ = yym1356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1357 := z.EncBinary()
	_ = yym1357
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1358 := z.DecBinary()
	_ = yym1358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1359 := z.EncBinary()
		_ = yym1359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1360 := !z.EncBinary()
			yy2arr1360 := z.EncBasicHandle().StructToArray
			var yyq1360 [6]bool
			_, _, _ = yysep1360, yyq1360, yy2arr1360
			const yyr1360 bool = false
			yyq1360[2] = true
			yyq1360[3] = true
			yyq1360[4] = x.Reason != ""
			yyq1360[5] = x.Message != ""
			if yyr1360 || yy2arr1360 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1360 int = 2
				for _, b := range yyq1360 {
					if b {
						yynn1360++
					}
				}
				r.EncodeMapStart(yynn1360)
			}
			if yyr1360 || yy2arr1360 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1360 || yy2arr1360 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1360 || yy2arr1360 {
				if yyq1360[2] {
					yy1364 := &x.LastProbeTime
					yym1365 := z.EncBinary()
					_ = yym1365
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1364) {
					} else if yym1365 {
						z.EncBinaryMarshal(yy1364)
					} else if !yym1365 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1364)
					} else {
						z.EncFallback(yy1364)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1360[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1366 := &x.LastProbeTime
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1366) {
					} else if yym1367 {
						z.EncBinaryMarshal(yy1366)
					} else if !yym1367 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1366)
					} else {
						z.EncFallback(yy1366)
					}
				}
			}
			if yyr1360 || yy2arr1360 {
				if yyq1360[3] {
					yy1369 := &x.LastTransitionTime
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1369) {
					} else if yym1370 {
						z.EncBinaryMarshal(yy1369)
					} else if !yym1370 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1369)
					} else {
						z.EncFallback(yy1369)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1360[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1371 := &x.LastTransitionTime
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1371) {
					} else if yym1372 {
						z.EncBinaryMarshal(yy1371)
					} else if !yym1372 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1371)
					} else {
						z.EncFallback(yy1371)
					}
				}
			}
			if yyr1360 || yy2arr1360 {
				if yyq1360[4] {
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1360[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1360 || yy2arr1360 {
				if yyq1360[5] {
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1360[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1360 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1379 := z.DecBinary()
	_ = yym1379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1380 := r.ReadMapStart()
			if yyl1380 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1380, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1380 := r.ReadArrayStart()
			if yyl1380 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1380, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1381Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1381Slc
	var yyhl1381 bool = l >= 0
	for yyj1381 := 0; ; yyj1381++ {
		if yyhl1381 {
			if yyj1381 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1381Slc = r.DecodeBytes(yys1381Slc, true, true)
		yys1381 := string(yys1381Slc)
		switch yys1381 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1384 := &x.LastProbeTime
				yym1385 := z.DecBinary()
				_ = yym1385
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1384) {
				} else if yym1385 {
					z.DecBinaryUnmarshal(yyv1384)
				} else if !yym1385 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1384)
				} else {
					z.DecFallback(yyv1384, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1386 := &x.LastTransitionTime
				yym1387 := z.DecBinary()
				_ = yym1387
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1386) {
				} else if yym1387 {
					z.DecBinaryUnmarshal(yyv1386)
				} else if !yym1387 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1386)
				} else {
					z.DecFallback(yyv1386, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1381)
		} // end switch yys1381
	} // end for yyj1381
	if !yyhl1381 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1390 int
	var yyb1390 bool
	var yyhl1390 bool = l >= 0
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1393 := &x.LastProbeTime
		yym1394 := z.DecBinary()
		_ = yym1394
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1393) {
		} else if yym1394 {
			z.DecBinaryUnmarshal(yyv1393)
		} else if !yym1394 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1393)
		} else {
			z.DecFallback(yyv1393, false)
		}
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1395 := &x.LastTransitionTime
		yym1396 := z.DecBinary()
		_ = yym1396
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1395) {
		} else if yym1396 {
			z.DecBinaryUnmarshal(yyv1395)
		} else if !yym1396 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1395)
		} else {
			z.DecFallback(yyv1395, false)
		}
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1390++
		if yyhl1390 {
			yyb1390 = yyj1390 > l
		} else {
			yyb1390 = r.CheckBreak()
		}
		if yyb1390 {
			break
		}
		z.DecStructFieldNotFound(yyj1390-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1399 := z.EncBinary()
	_ = yym1399
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1400 := z.DecBinary()
	_ = yym1400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1401 := z.EncBinary()
		_ = yym1401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1402 := !z.EncBinary()
			yy2arr1402 := z.EncBasicHandle().StructToArray
			var yyq1402 [4]bool
			_, _, _ = yysep1402, yyq1402, yy2arr1402
			const yyr1402 bool = false
			yyq1402[0] = x.Kind != ""
			yyq1402[1] = true
			yyq1402[2] = true
			if yyr1402 || yy2arr1402 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1402 int = 1
				for _, b := range yyq1402 {
					if b {
						yynn1402++
					}
				}
				r.EncodeMapStart(yynn1402)
			}
			if yyr1402 || yy2arr1402 {
				if yyq1402[0] {
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1402[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				if yyq1402[1] {
					yy1407 := &x.APIVersion
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1407) {
					} else if !yym1408 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1407)
					} else {
						z.EncFallback(yy1407)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1409 := &x.APIVersion
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1409) {
					} else if !yym1410 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1409)
					} else {
						z.EncFallback(yy1409)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				if yyq1402[2] {
					yy1412 := &x.ListMeta
					yym1413 := z.EncBinary()
					_ = yym1413
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1412) {
					} else {
						z.EncFallback(yy1412)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1402[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1414 := &x.ListMeta
					yym1415 := z.EncBinary()
					_ = yym1415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1414) {
					} else {
						z.EncFallback(yy1414)
					}
				}
			}
			if yyr1402 || yy2arr1402 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1418 := z.EncBinary()
					_ = yym1418
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1402 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1419 := z.DecBinary()
	_ = yym1419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1420 := r.ReadMapStart()
			if yyl1420 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1420, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1420 := r.ReadArrayStart()
			if yyl1420 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1421Slc
	var yyhl1421 bool = l >= 0
	for yyj1421 := 0; ; yyj1421++ {
		if yyhl1421 {
			if yyj1421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1421Slc = r.DecodeBytes(yys1421Slc, true, true)
		yys1421 := string(yys1421Slc)
		switch yys1421 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1423 := &x.APIVersion
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1423) {
				} else if !yym1424 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1423)
				} else {
					z.DecFallback(yyv1423, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1425 := &x.ListMeta
				yym1426 := z.DecBinary()
				_ = yym1426
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1425) {
				} else {
					z.DecFallback(yyv1425, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1427 := &x.Items
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1427), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1421)
		} // end switch yys1421
	} // end for yyj1421
	if !yyhl1421 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1429 int
	var yyb1429 bool
	var yyhl1429 bool = l >= 0
	yyj1429++
	if yyhl1429 {
		yyb1429 = yyj1429 > l
	} else {
		yyb1429 = r.CheckBreak()
	}
	if yyb1429 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1429++
	if yyhl1429 {
		yyb1429 = yyj1429 > l
	} else {
		yyb1429 = r.CheckBreak()
	}
	if yyb1429 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1431 := &x.APIVersion
		yym1432 := z.DecBinary()
		_ = yym1432
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1431) {
		} else if !yym1432 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1431)
		} else {
			z.DecFallback(yyv1431, false)
		}
	}
	yyj1429++
	if yyhl1429 {
		yyb1429 = yyj1429 > l
	} else {
		yyb1429 = r.CheckBreak()
	}
	if yyb1429 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1433 := &x.ListMeta
		yym1434 := z.DecBinary()
		_ = yym1434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1433) {
		} else {
			z.DecFallback(yyv1433, false)
		}
	}
	yyj1429++
	if yyhl1429 {
		yyb1429 = yyj1429 > l
	} else {
		yyb1429 = r.CheckBreak()
	}
	if yyb1429 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1435 := &x.Items
		yym1436 := z.DecBinary()
		_ = yym1436
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1435), d)
		}
	}
	for {
		yyj1429++
		if yyhl1429 {
			yyb1429 = yyj1429 > l
		} else {
			yyb1429 = r.CheckBreak()
		}
		if yyb1429 {
			break
		}
		z.DecStructFieldNotFound(yyj1429-1, "")
	}
	r.ReadEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1437 := z.EncBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1438 := z.DecBinary()
	_ = yym1438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1439 := z.EncBinary()
		_ = yym1439
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1440 := !z.EncBinary()
			yy2arr1440 := z.EncBasicHandle().StructToArray
			var yyq1440 [11]bool
			_, _, _ = yysep1440, yyq1440, yy2arr1440
			const yyr1440 bool = false
			yyq1440[2] = x.RestartPolicy != ""
			yyq1440[3] = x.TerminationGracePeriodSeconds != nil
			yyq1440[4] = x.ActiveDeadlineSeconds != nil
			yyq1440[5] = x.DNSPolicy != ""
			yyq1440[6] = len(x.NodeSelector) != 0
			yyq1440[8] = x.NodeName != ""
			yyq1440[9] = x.SecurityContext != nil
			yyq1440[10] = len(x.ImagePullSecrets) != 0
			if yyr1440 || yy2arr1440 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1440 int = 3
				for _, b := range yyq1440 {
					if b {
						yynn1440++
					}
				}
				r.EncodeMapStart(yynn1440)
			}
			if yyr1440 || yy2arr1440 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1443 := z.EncBinary()
					_ = yym1443
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1446 := z.EncBinary()
					_ = yym1446
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1440[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1449 := *x.TerminationGracePeriodSeconds
						yym1450 := z.EncBinary()
						_ = yym1450
						if false {
						} else {
							r.EncodeInt(int64(yy1449))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1440[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1451 := *x.TerminationGracePeriodSeconds
						yym1452 := z.EncBinary()
						_ = yym1452
						if false {
						} else {
							r.EncodeInt(int64(yy1451))
						}
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1454 := *x.ActiveDeadlineSeconds
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else {
							r.EncodeInt(int64(yy1454))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1440[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1456 := *x.ActiveDeadlineSeconds
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							r.EncodeInt(int64(yy1456))
						}
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1440[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1440[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				yym1463 := z.EncBinary()
				_ = yym1463
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				yym1464 := z.EncBinary()
				_ = yym1464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[8] {
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1440[8] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1467 := z.EncBinary()
					_ = yym1467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1440[9] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1440 || yy2arr1440 {
				if yyq1440[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1440[10] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1440 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1472 := z.DecBinary()
	_ = yym1472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1473 := r.ReadMapStart()
			if yyl1473 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1473, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1473 := r.ReadArrayStart()
			if yyl1473 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1474Slc
	var yyhl1474 bool = l >= 0
	for yyj1474 := 0; ; yyj1474++ {
		if yyhl1474 {
			if yyj1474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1474Slc = r.DecodeBytes(yys1474Slc, true, true)
		yys1474 := string(yys1474Slc)
		switch yys1474 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1475 := &x.Volumes
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1475), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1477 := &x.Containers
				yym1478 := z.DecBinary()
				_ = yym1478
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1477), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1481 := z.DecBinary()
				_ = yym1481
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1483 := z.DecBinary()
				_ = yym1483
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1485 := &x.NodeSelector
				yym1486 := z.DecBinary()
				_ = yym1486
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1485, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1490 := &x.ImagePullSecrets
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1490), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1474)
		} // end switch yys1474
	} // end for yyj1474
	if !yyhl1474 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1492 int
	var yyb1492 bool
	var yyhl1492 bool = l >= 0
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1493 := &x.Volumes
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1493), d)
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1495 := &x.Containers
		yym1496 := z.DecBinary()
		_ = yym1496
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1495), d)
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1501 := z.DecBinary()
		_ = yym1501
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1503 := &x.NodeSelector
		yym1504 := z.DecBinary()
		_ = yym1504
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1503, false, d)
		}
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1508 := &x.ImagePullSecrets
		yym1509 := z.DecBinary()
		_ = yym1509
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1508), d)
		}
	}
	for {
		yyj1492++
		if yyhl1492 {
			yyb1492 = yyj1492 > l
		} else {
			yyb1492 = r.CheckBreak()
		}
		if yyb1492 {
			break
		}
		z.DecStructFieldNotFound(yyj1492-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1510 := z.EncBinary()
		_ = yym1510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1511 := !z.EncBinary()
			yy2arr1511 := z.EncBasicHandle().StructToArray
			var yyq1511 [8]bool
			_, _, _ = yysep1511, yyq1511, yy2arr1511
			const yyr1511 bool = false
			yyq1511[0] = x.HostNetwork != false
			yyq1511[1] = x.HostPID != false
			yyq1511[2] = x.HostIPC != false
			yyq1511[3] = x.SELinuxOptions != nil
			yyq1511[4] = x.RunAsUser != nil
			yyq1511[5] = x.RunAsNonRoot != nil
			yyq1511[6] = len(x.SupplementalGroups) != 0
			yyq1511[7] = x.FSGroup != nil
			if yyr1511 || yy2arr1511 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1511 int = 0
				for _, b := range yyq1511 {
					if b {
						yynn1511++
					}
				}
				r.EncodeMapStart(yynn1511)
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[0] {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[1] {
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1511[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[2] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1511[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1511[3] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1523 := *x.RunAsUser
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							r.EncodeInt(int64(yy1523))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1511[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1525 := *x.RunAsUser
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							r.EncodeInt(int64(yy1525))
						}
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1528 := *x.RunAsNonRoot
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							r.EncodeBool(bool(yy1528))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1511[5] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1530 := *x.RunAsNonRoot
						yym1531 := z.EncBinary()
						_ = yym1531
						if false {
						} else {
							r.EncodeBool(bool(yy1530))
						}
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1533 := z.EncBinary()
						_ = yym1533
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1511[6] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1534 := z.EncBinary()
						_ = yym1534
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				if yyq1511[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1536 := *x.FSGroup
						yym1537 := z.EncBinary()
						_ = yym1537
						if false {
						} else {
							r.EncodeInt(int64(yy1536))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1511[7] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1538 := *x.FSGroup
						yym1539 := z.EncBinary()
						_ = yym1539
						if false {
						} else {
							r.EncodeInt(int64(yy1538))
						}
					}
				}
			}
			if yysep1511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1540 := z.DecBinary()
	_ = yym1540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1541 := r.ReadMapStart()
			if yyl1541 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1541, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1541 := r.ReadArrayStart()
			if yyl1541 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1542Slc
	var yyhl1542 bool = l >= 0
	for yyj1542 := 0; ; yyj1542++ {
		if yyhl1542 {
			if yyj1542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1542Slc = r.DecodeBytes(yys1542Slc, true, true)
		yys1542 := string(yys1542Slc)
		switch yys1542 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1548 := z.DecBinary()
				_ = yym1548
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1550 := z.DecBinary()
				_ = yym1550
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1551 := &x.SupplementalGroups
				yym1552 := z.DecBinary()
				_ = yym1552
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1551, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1554 := z.DecBinary()
				_ = yym1554
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1542)
		} // end switch yys1542
	} // end for yyj1542
	if !yyhl1542 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1555 int
	var yyb1555 bool
	var yyhl1555 bool = l >= 0
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1561 := z.DecBinary()
		_ = yym1561
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1563 := z.DecBinary()
		_ = yym1563
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1564 := &x.SupplementalGroups
		yym1565 := z.DecBinary()
		_ = yym1565
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1564, false, d)
		}
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1567 := z.DecBinary()
		_ = yym1567
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1555++
		if yyhl1555 {
			yyb1555 = yyj1555 > l
		} else {
			yyb1555 = r.CheckBreak()
		}
		if yyb1555 {
			break
		}
		z.DecStructFieldNotFound(yyj1555-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1568 := z.EncBinary()
		_ = yym1568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1569 := !z.EncBinary()
			yy2arr1569 := z.EncBasicHandle().StructToArray
			var yyq1569 [8]bool
			_, _, _ = yysep1569, yyq1569, yy2arr1569
			const yyr1569 bool = false
			yyq1569[0] = x.Phase != ""
			yyq1569[1] = len(x.Conditions) != 0
			yyq1569[2] = x.Message != ""
			yyq1569[3] = x.Reason != ""
			yyq1569[4] = x.HostIP != ""
			yyq1569[5] = x.PodIP != ""
			yyq1569[6] = x.StartTime != nil
			yyq1569[7] = len(x.ContainerStatuses) != 0
			if yyr1569 || yy2arr1569 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1569 int = 0
				for _, b := range yyq1569 {
					if b {
						yynn1569++
					}
				}
				r.EncodeMapStart(yynn1569)
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1569[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[2] {
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1576 := z.EncBinary()
					_ = yym1576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[3] {
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[4] {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[5] {
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1587 := z.EncBinary()
						_ = yym1587
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1587 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1587 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1569[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1588 := z.EncBinary()
						_ = yym1588
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1588 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1588 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				if yyq1569[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1590 := z.EncBinary()
						_ = yym1590
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1569[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1591 := z.EncBinary()
						_ = yym1591
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1569 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1592 := z.DecBinary()
	_ = yym1592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1593 := r.ReadMapStart()
			if yyl1593 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1593, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1593 := r.ReadArrayStart()
			if yyl1593 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1594Slc
	var yyhl1594 bool = l >= 0
	for yyj1594 := 0; ; yyj1594++ {
		if yyhl1594 {
			if yyj1594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1594Slc = r.DecodeBytes(yys1594Slc, true, true)
		yys1594 := string(yys1594Slc)
		switch yys1594 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1596 := &x.Conditions
				yym1597 := z.DecBinary()
				_ = yym1597
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1596), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1603 := z.DecBinary()
				_ = yym1603
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1603 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1603 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1604 := &x.ContainerStatuses
				yym1605 := z.DecBinary()
				_ = yym1605
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1604), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1594)
		} // end switch yys1594
	} // end for yyj1594
	if !yyhl1594 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1606 int
	var yyb1606 bool
	var yyhl1606 bool = l >= 0
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1608 := &x.Conditions
		yym1609 := z.DecBinary()
		_ = yym1609
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1608), d)
		}
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1615 := z.DecBinary()
		_ = yym1615
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1615 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1615 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1606++
	if yyhl1606 {
		yyb1606 = yyj1606 > l
	} else {
		yyb1606 = r.CheckBreak()
	}
	if yyb1606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1616 := &x.ContainerStatuses
		yym1617 := z.DecBinary()
		_ = yym1617
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1616), d)
		}
	}
	for {
		yyj1606++
		if yyhl1606 {
			yyb1606 = yyj1606 > l
		} else {
			yyb1606 = r.CheckBreak()
		}
		if yyb1606 {
			break
		}
		z.DecStructFieldNotFound(yyj1606-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1618 := z.EncBinary()
		_ = yym1618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1619 := !z.EncBinary()
			yy2arr1619 := z.EncBasicHandle().StructToArray
			var yyq1619 [4]bool
			_, _, _ = yysep1619, yyq1619, yy2arr1619
			const yyr1619 bool = false
			yyq1619[0] = x.Kind != ""
			yyq1619[1] = true
			yyq1619[2] = true
			yyq1619[3] = true
			if yyr1619 || yy2arr1619 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1619 int = 0
				for _, b := range yyq1619 {
					if b {
						yynn1619++
					}
				}
				r.EncodeMapStart(yynn1619)
			}
			if yyr1619 || yy2arr1619 {
				if yyq1619[0] {
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1619[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1619 || yy2arr1619 {
				if yyq1619[1] {
					yy1624 := &x.APIVersion
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1624) {
					} else if !yym1625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1624)
					} else {
						z.EncFallback(yy1624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1619[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1626 := &x.APIVersion
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1626) {
					} else if !yym1627 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1626)
					} else {
						z.EncFallback(yy1626)
					}
				}
			}
			if yyr1619 || yy2arr1619 {
				if yyq1619[2] {
					yy1629 := &x.ObjectMeta
					yy1629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1619[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1630 := &x.ObjectMeta
					yy1630.CodecEncodeSelf(e)
				}
			}
			if yyr1619 || yy2arr1619 {
				if yyq1619[3] {
					yy1632 := &x.Status
					yy1632.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1619[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1633 := &x.Status
					yy1633.CodecEncodeSelf(e)
				}
			}
			if yysep1619 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1634 := z.DecBinary()
	_ = yym1634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1635 := r.ReadMapStart()
			if yyl1635 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1635, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1635 := r.ReadArrayStart()
			if yyl1635 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1636Slc
	var yyhl1636 bool = l >= 0
	for yyj1636 := 0; ; yyj1636++ {
		if yyhl1636 {
			if yyj1636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1636Slc = r.DecodeBytes(yys1636Slc, true, true)
		yys1636 := string(yys1636Slc)
		switch yys1636 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1638 := &x.APIVersion
				yym1639 := z.DecBinary()
				_ = yym1639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1638) {
				} else if !yym1639 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1638)
				} else {
					z.DecFallback(yyv1638, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1640 := &x.ObjectMeta
				yyv1640.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1641 := &x.Status
				yyv1641.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1636)
		} // end switch yys1636
	} // end for yyj1636
	if !yyhl1636 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1642 int
	var yyb1642 bool
	var yyhl1642 bool = l >= 0
	yyj1642++
	if yyhl1642 {
		yyb1642 = yyj1642 > l
	} else {
		yyb1642 = r.CheckBreak()
	}
	if yyb1642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1642++
	if yyhl1642 {
		yyb1642 = yyj1642 > l
	} else {
		yyb1642 = r.CheckBreak()
	}
	if yyb1642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1644 := &x.APIVersion
		yym1645 := z.DecBinary()
		_ = yym1645
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1644) {
		} else if !yym1645 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1644)
		} else {
			z.DecFallback(yyv1644, false)
		}
	}
	yyj1642++
	if yyhl1642 {
		yyb1642 = yyj1642 > l
	} else {
		yyb1642 = r.CheckBreak()
	}
	if yyb1642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1646 := &x.ObjectMeta
		yyv1646.CodecDecodeSelf(d)
	}
	yyj1642++
	if yyhl1642 {
		yyb1642 = yyj1642 > l
	} else {
		yyb1642 = r.CheckBreak()
	}
	if yyb1642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1647 := &x.Status
		yyv1647.CodecDecodeSelf(d)
	}
	for {
		yyj1642++
		if yyhl1642 {
			yyb1642 = yyj1642 > l
		} else {
			yyb1642 = r.CheckBreak()
		}
		if yyb1642 {
			break
		}
		z.DecStructFieldNotFound(yyj1642-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1648 := z.EncBinary()
		_ = yym1648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1649 := !z.EncBinary()
			yy2arr1649 := z.EncBasicHandle().StructToArray
			var yyq1649 [5]bool
			_, _, _ = yysep1649, yyq1649, yy2arr1649
			const yyr1649 bool = false
			yyq1649[0] = x.Kind != ""
			yyq1649[1] = true
			yyq1649[2] = true
			yyq1649[3] = true
			yyq1649[4] = true
			if yyr1649 || yy2arr1649 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1649 int = 0
				for _, b := range yyq1649 {
					if b {
						yynn1649++
					}
				}
				r.EncodeMapStart(yynn1649)
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[0] {
					yym1651 := z.EncBinary()
					_ = yym1651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1649[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1652 := z.EncBinary()
					_ = yym1652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[1] {
					yy1654 := &x.APIVersion
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1654) {
					} else if !yym1655 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1654)
					} else {
						z.EncFallback(yy1654)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1656 := &x.APIVersion
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1656) {
					} else if !yym1657 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1656)
					} else {
						z.EncFallback(yy1656)
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[2] {
					yy1659 := &x.ObjectMeta
					yy1659.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1660 := &x.ObjectMeta
					yy1660.CodecEncodeSelf(e)
				}
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[3] {
					yy1662 := &x.Spec
					yy1662.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1663 := &x.Spec
					yy1663.CodecEncodeSelf(e)
				}
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[4] {
					yy1665 := &x.Status
					yy1665.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1666 := &x.Status
					yy1666.CodecEncodeSelf(e)
				}
			}
			if yysep1649 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1667 := z.DecBinary()
	_ = yym1667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1668 := r.ReadMapStart()
			if yyl1668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1668 := r.ReadArrayStart()
			if yyl1668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1669Slc
	var yyhl1669 bool = l >= 0
	for yyj1669 := 0; ; yyj1669++ {
		if yyhl1669 {
			if yyj1669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1669Slc = r.DecodeBytes(yys1669Slc, true, true)
		yys1669 := string(yys1669Slc)
		switch yys1669 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1671 := &x.APIVersion
				yym1672 := z.DecBinary()
				_ = yym1672
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1671) {
				} else if !yym1672 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1671)
				} else {
					z.DecFallback(yyv1671, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1673 := &x.ObjectMeta
				yyv1673.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1674 := &x.Spec
				yyv1674.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1675 := &x.Status
				yyv1675.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1669)
		} // end switch yys1669
	} // end for yyj1669
	if !yyhl1669 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1676 int
	var yyb1676 bool
	var yyhl1676 bool = l >= 0
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1678 := &x.APIVersion
		yym1679 := z.DecBinary()
		_ = yym1679
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1678) {
		} else if !yym1679 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1678)
		} else {
			z.DecFallback(yyv1678, false)
		}
	}
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1680 := &x.ObjectMeta
		yyv1680.CodecDecodeSelf(d)
	}
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1681 := &x.Spec
		yyv1681.CodecDecodeSelf(d)
	}
	yyj1676++
	if yyhl1676 {
		yyb1676 = yyj1676 > l
	} else {
		yyb1676 = r.CheckBreak()
	}
	if yyb1676 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1682 := &x.Status
		yyv1682.CodecDecodeSelf(d)
	}
	for {
		yyj1676++
		if yyhl1676 {
			yyb1676 = yyj1676 > l
		} else {
			yyb1676 = r.CheckBreak()
		}
		if yyb1676 {
			break
		}
		z.DecStructFieldNotFound(yyj1676-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1683 := z.EncBinary()
		_ = yym1683
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1684 := !z.EncBinary()
			yy2arr1684 := z.EncBasicHandle().StructToArray
			var yyq1684 [2]bool
			_, _, _ = yysep1684, yyq1684, yy2arr1684
			const yyr1684 bool = false
			yyq1684[0] = true
			yyq1684[1] = true
			if yyr1684 || yy2arr1684 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1684 int = 0
				for _, b := range yyq1684 {
					if b {
						yynn1684++
					}
				}
				r.EncodeMapStart(yynn1684)
			}
			if yyr1684 || yy2arr1684 {
				if yyq1684[0] {
					yy1686 := &x.ObjectMeta
					yy1686.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1684[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1687 := &x.ObjectMeta
					yy1687.CodecEncodeSelf(e)
				}
			}
			if yyr1684 || yy2arr1684 {
				if yyq1684[1] {
					yy1689 := &x.Spec
					yy1689.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1684[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1690 := &x.Spec
					yy1690.CodecEncodeSelf(e)
				}
			}
			if yysep1684 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1691 := z.DecBinary()
	_ = yym1691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1692 := r.ReadMapStart()
			if yyl1692 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1692, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1692 := r.ReadArrayStart()
			if yyl1692 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1693Slc
	var yyhl1693 bool = l >= 0
	for yyj1693 := 0; ; yyj1693++ {
		if yyhl1693 {
			if yyj1693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1693Slc = r.DecodeBytes(yys1693Slc, true, true)
		yys1693 := string(yys1693Slc)
		switch yys1693 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1694 := &x.ObjectMeta
				yyv1694.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1695 := &x.Spec
				yyv1695.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1693)
		} // end switch yys1693
	} // end for yyj1693
	if !yyhl1693 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1696 int
	var yyb1696 bool
	var yyhl1696 bool = l >= 0
	yyj1696++
	if yyhl1696 {
		yyb1696 = yyj1696 > l
	} else {
		yyb1696 = r.CheckBreak()
	}
	if yyb1696 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1697 := &x.ObjectMeta
		yyv1697.CodecDecodeSelf(d)
	}
	yyj1696++
	if yyhl1696 {
		yyb1696 = yyj1696 > l
	} else {
		yyb1696 = r.CheckBreak()
	}
	if yyb1696 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1698 := &x.Spec
		yyv1698.CodecDecodeSelf(d)
	}
	for {
		yyj1696++
		if yyhl1696 {
			yyb1696 = yyj1696 > l
		} else {
			yyb1696 = r.CheckBreak()
		}
		if yyb1696 {
			break
		}
		z.DecStructFieldNotFound(yyj1696-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1699 := z.EncBinary()
		_ = yym1699
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1700 := !z.EncBinary()
			yy2arr1700 := z.EncBasicHandle().StructToArray
			var yyq1700 [4]bool
			_, _, _ = yysep1700, yyq1700, yy2arr1700
			const yyr1700 bool = false
			yyq1700[0] = x.Kind != ""
			yyq1700[1] = true
			yyq1700[2] = true
			yyq1700[3] = true
			if yyr1700 || yy2arr1700 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1700 int = 0
				for _, b := range yyq1700 {
					if b {
						yynn1700++
					}
				}
				r.EncodeMapStart(yynn1700)
			}
			if yyr1700 || yy2arr1700 {
				if yyq1700[0] {
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1700[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1700 || yy2arr1700 {
				if yyq1700[1] {
					yy1705 := &x.APIVersion
					yym1706 := z.EncBinary()
					_ = yym1706
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1705) {
					} else if !yym1706 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1705)
					} else {
						z.EncFallback(yy1705)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1700[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1707 := &x.APIVersion
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1707) {
					} else if !yym1708 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1707)
					} else {
						z.EncFallback(yy1707)
					}
				}
			}
			if yyr1700 || yy2arr1700 {
				if yyq1700[2] {
					yy1710 := &x.ObjectMeta
					yy1710.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1700[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1711 := &x.ObjectMeta
					yy1711.CodecEncodeSelf(e)
				}
			}
			if yyr1700 || yy2arr1700 {
				if yyq1700[3] {
					yy1713 := &x.Template
					yy1713.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1700[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1714 := &x.Template
					yy1714.CodecEncodeSelf(e)
				}
			}
			if yysep1700 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1715 := z.DecBinary()
	_ = yym1715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1716 := r.ReadMapStart()
			if yyl1716 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1716, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1716 := r.ReadArrayStart()
			if yyl1716 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1716, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1717Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1717Slc
	var yyhl1717 bool = l >= 0
	for yyj1717 := 0; ; yyj1717++ {
		if yyhl1717 {
			if yyj1717 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1717Slc = r.DecodeBytes(yys1717Slc, true, true)
		yys1717 := string(yys1717Slc)
		switch yys1717 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1719 := &x.APIVersion
				yym1720 := z.DecBinary()
				_ = yym1720
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1719) {
				} else if !yym1720 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1719)
				} else {
					z.DecFallback(yyv1719, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1721 := &x.ObjectMeta
				yyv1721.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1722 := &x.Template
				yyv1722.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1717)
		} // end switch yys1717
	} // end for yyj1717
	if !yyhl1717 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1723 int
	var yyb1723 bool
	var yyhl1723 bool = l >= 0
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1725 := &x.APIVersion
		yym1726 := z.DecBinary()
		_ = yym1726
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1725) {
		} else if !yym1726 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1725)
		} else {
			z.DecFallback(yyv1725, false)
		}
	}
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1727 := &x.ObjectMeta
		yyv1727.CodecDecodeSelf(d)
	}
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1728 := &x.Template
		yyv1728.CodecDecodeSelf(d)
	}
	for {
		yyj1723++
		if yyhl1723 {
			yyb1723 = yyj1723 > l
		} else {
			yyb1723 = r.CheckBreak()
		}
		if yyb1723 {
			break
		}
		z.DecStructFieldNotFound(yyj1723-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1729 := z.EncBinary()
		_ = yym1729
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1730 := !z.EncBinary()
			yy2arr1730 := z.EncBasicHandle().StructToArray
			var yyq1730 [4]bool
			_, _, _ = yysep1730, yyq1730, yy2arr1730
			const yyr1730 bool = false
			yyq1730[0] = x.Kind != ""
			yyq1730[1] = true
			yyq1730[2] = true
			if yyr1730 || yy2arr1730 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1730 int = 1
				for _, b := range yyq1730 {
					if b {
						yynn1730++
					}
				}
				r.EncodeMapStart(yynn1730)
			}
			if yyr1730 || yy2arr1730 {
				if yyq1730[0] {
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1730[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1730 || yy2arr1730 {
				if yyq1730[1] {
					yy1735 := &x.APIVersion
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1735) {
					} else if !yym1736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1735)
					} else {
						z.EncFallback(yy1735)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1730[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1737 := &x.APIVersion
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1737) {
					} else if !yym1738 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1737)
					} else {
						z.EncFallback(yy1737)
					}
				}
			}
			if yyr1730 || yy2arr1730 {
				if yyq1730[2] {
					yy1740 := &x.ListMeta
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1740) {
					} else {
						z.EncFallback(yy1740)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1730[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1742 := &x.ListMeta
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1742) {
					} else {
						z.EncFallback(yy1742)
					}
				}
			}
			if yyr1730 || yy2arr1730 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1730 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1747 := z.DecBinary()
	_ = yym1747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1748 := r.ReadMapStart()
			if yyl1748 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1748, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1748 := r.ReadArrayStart()
			if yyl1748 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1749Slc
	var yyhl1749 bool = l >= 0
	for yyj1749 := 0; ; yyj1749++ {
		if yyhl1749 {
			if yyj1749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1749Slc = r.DecodeBytes(yys1749Slc, true, true)
		yys1749 := string(yys1749Slc)
		switch yys1749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1751 := &x.APIVersion
				yym1752 := z.DecBinary()
				_ = yym1752
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1751) {
				} else if !yym1752 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1751)
				} else {
					z.DecFallback(yyv1751, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1753 := &x.ListMeta
				yym1754 := z.DecBinary()
				_ = yym1754
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1753) {
				} else {
					z.DecFallback(yyv1753, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1755 := &x.Items
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1755), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1749)
		} // end switch yys1749
	} // end for yyj1749
	if !yyhl1749 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1757 int
	var yyb1757 bool
	var yyhl1757 bool = l >= 0
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1759 := &x.APIVersion
		yym1760 := z.DecBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1759) {
		} else if !yym1760 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1759)
		} else {
			z.DecFallback(yyv1759, false)
		}
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1761 := &x.ListMeta
		yym1762 := z.DecBinary()
		_ = yym1762
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1761) {
		} else {
			z.DecFallback(yyv1761, false)
		}
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1763 := &x.Items
		yym1764 := z.DecBinary()
		_ = yym1764
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1763), d)
		}
	}
	for {
		yyj1757++
		if yyhl1757 {
			yyb1757 = yyj1757 > l
		} else {
			yyb1757 = r.CheckBreak()
		}
		if yyb1757 {
			break
		}
		z.DecStructFieldNotFound(yyj1757-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1765 := z.EncBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1766 := !z.EncBinary()
			yy2arr1766 := z.EncBasicHandle().StructToArray
			var yyq1766 [3]bool
			_, _, _ = yysep1766, yyq1766, yy2arr1766
			const yyr1766 bool = false
			yyq1766[2] = x.Template != nil
			if yyr1766 || yy2arr1766 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1766 int = 2
				for _, b := range yyq1766 {
					if b {
						yynn1766++
					}
				}
				r.EncodeMapStart(yynn1766)
			}
			if yyr1766 || yy2arr1766 {
				yym1768 := z.EncBinary()
				_ = yym1768
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1769 := z.EncBinary()
				_ = yym1769
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1766 || yy2arr1766 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1771 := z.EncBinary()
					_ = yym1771
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1766 || yy2arr1766 {
				if yyq1766[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1766[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1766 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1774 := z.DecBinary()
	_ = yym1774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1775 := r.ReadMapStart()
			if yyl1775 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1775, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1775 := r.ReadArrayStart()
			if yyl1775 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1776Slc
	var yyhl1776 bool = l >= 0
	for yyj1776 := 0; ; yyj1776++ {
		if yyhl1776 {
			if yyj1776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1776Slc = r.DecodeBytes(yys1776Slc, true, true)
		yys1776 := string(yys1776Slc)
		switch yys1776 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1778 := &x.Selector
				yym1779 := z.DecBinary()
				_ = yym1779
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1778, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1776)
		} // end switch yys1776
	} // end for yyj1776
	if !yyhl1776 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1781 int
	var yyb1781 bool
	var yyhl1781 bool = l >= 0
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1783 := &x.Selector
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1783, false, d)
		}
	}
	yyj1781++
	if yyhl1781 {
		yyb1781 = yyj1781 > l
	} else {
		yyb1781 = r.CheckBreak()
	}
	if yyb1781 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1781++
		if yyhl1781 {
			yyb1781 = yyj1781 > l
		} else {
			yyb1781 = r.CheckBreak()
		}
		if yyb1781 {
			break
		}
		z.DecStructFieldNotFound(yyj1781-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1786 := z.EncBinary()
		_ = yym1786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1787 := !z.EncBinary()
			yy2arr1787 := z.EncBasicHandle().StructToArray
			var yyq1787 [2]bool
			_, _, _ = yysep1787, yyq1787, yy2arr1787
			const yyr1787 bool = false
			yyq1787[1] = x.ObservedGeneration != 0
			if yyr1787 || yy2arr1787 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1787 int = 1
				for _, b := range yyq1787 {
					if b {
						yynn1787++
					}
				}
				r.EncodeMapStart(yynn1787)
			}
			if yyr1787 || yy2arr1787 {
				yym1789 := z.EncBinary()
				_ = yym1789
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1790 := z.EncBinary()
				_ = yym1790
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1787 || yy2arr1787 {
				if yyq1787[1] {
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1787[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1787 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		switch yys1796 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	if !yyhl1796 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1799 int
	var yyb1799 bool
	var yyhl1799 bool = l >= 0
	yyj1799++
	if yyhl1799 {
		yyb1799 = yyj1799 > l
	} else {
		yyb1799 = r.CheckBreak()
	}
	if yyb1799 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1799++
	if yyhl1799 {
		yyb1799 = yyj1799 > l
	} else {
		yyb1799 = r.CheckBreak()
	}
	if yyb1799 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1799++
		if yyhl1799 {
			yyb1799 = yyj1799 > l
		} else {
			yyb1799 = r.CheckBreak()
		}
		if yyb1799 {
			break
		}
		z.DecStructFieldNotFound(yyj1799-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1802 := z.EncBinary()
		_ = yym1802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1803 := !z.EncBinary()
			yy2arr1803 := z.EncBasicHandle().StructToArray
			var yyq1803 [5]bool
			_, _, _ = yysep1803, yyq1803, yy2arr1803
			const yyr1803 bool = false
			yyq1803[0] = x.Kind != ""
			yyq1803[1] = true
			yyq1803[2] = true
			yyq1803[3] = true
			yyq1803[4] = true
			if yyr1803 || yy2arr1803 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1803 int = 0
				for _, b := range yyq1803 {
					if b {
						yynn1803++
					}
				}
				r.EncodeMapStart(yynn1803)
			}
			if yyr1803 || yy2arr1803 {
				if yyq1803[0] {
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1806 := z.EncBinary()
					_ = yym1806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				if yyq1803[1] {
					yy1808 := &x.APIVersion
					yym1809 := z.EncBinary()
					_ = yym1809
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1808) {
					} else if !yym1809 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1808)
					} else {
						z.EncFallback(yy1808)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1810 := &x.APIVersion
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1810) {
					} else if !yym1811 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1810)
					} else {
						z.EncFallback(yy1810)
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				if yyq1803[2] {
					yy1813 := &x.ObjectMeta
					yy1813.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1814 := &x.ObjectMeta
					yy1814.CodecEncodeSelf(e)
				}
			}
			if yyr1803 || yy2arr1803 {
				if yyq1803[3] {
					yy1816 := &x.Spec
					yy1816.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1817 := &x.Spec
					yy1817.CodecEncodeSelf(e)
				}
			}
			if yyr1803 || yy2arr1803 {
				if yyq1803[4] {
					yy1819 := &x.Status
					yy1819.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1820 := &x.Status
					yy1820.CodecEncodeSelf(e)
				}
			}
			if yysep1803 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1821 := z.DecBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1822 := r.ReadMapStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1822 := r.ReadArrayStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1823Slc
	var yyhl1823 bool = l >= 0
	for yyj1823 := 0; ; yyj1823++ {
		if yyhl1823 {
			if yyj1823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1823Slc = r.DecodeBytes(yys1823Slc, true, true)
		yys1823 := string(yys1823Slc)
		switch yys1823 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1825 := &x.APIVersion
				yym1826 := z.DecBinary()
				_ = yym1826
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1825) {
				} else if !yym1826 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1825)
				} else {
					z.DecFallback(yyv1825, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1827 := &x.ObjectMeta
				yyv1827.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1828 := &x.Spec
				yyv1828.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1829 := &x.Status
				yyv1829.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1823)
		} // end switch yys1823
	} // end for yyj1823
	if !yyhl1823 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1830 int
	var yyb1830 bool
	var yyhl1830 bool = l >= 0
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1832 := &x.APIVersion
		yym1833 := z.DecBinary()
		_ = yym1833
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1832) {
		} else if !yym1833 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1832)
		} else {
			z.DecFallback(yyv1832, false)
		}
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1834 := &x.ObjectMeta
		yyv1834.CodecDecodeSelf(d)
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1835 := &x.Spec
		yyv1835.CodecDecodeSelf(d)
	}
	yyj1830++
	if yyhl1830 {
		yyb1830 = yyj1830 > l
	} else {
		yyb1830 = r.CheckBreak()
	}
	if yyb1830 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1836 := &x.Status
		yyv1836.CodecDecodeSelf(d)
	}
	for {
		yyj1830++
		if yyhl1830 {
			yyb1830 = yyj1830 > l
		} else {
			yyb1830 = r.CheckBreak()
		}
		if yyb1830 {
			break
		}
		z.DecStructFieldNotFound(yyj1830-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1837 := z.EncBinary()
		_ = yym1837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1838 := !z.EncBinary()
			yy2arr1838 := z.EncBasicHandle().StructToArray
			var yyq1838 [4]bool
			_, _, _ = yysep1838, yyq1838, yy2arr1838
			const yyr1838 bool = false
			yyq1838[0] = x.Kind != ""
			yyq1838[1] = true
			yyq1838[2] = true
			if yyr1838 || yy2arr1838 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1838 int = 1
				for _, b := range yyq1838 {
					if b {
						yynn1838++
					}
				}
				r.EncodeMapStart(yynn1838)
			}
			if yyr1838 || yy2arr1838 {
				if yyq1838[0] {
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1841 := z.EncBinary()
					_ = yym1841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				if yyq1838[1] {
					yy1843 := &x.APIVersion
					yym1844 := z.EncBinary()
					_ = yym1844
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1843) {
					} else if !yym1844 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1843)
					} else {
						z.EncFallback(yy1843)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1845 := &x.APIVersion
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1845) {
					} else if !yym1846 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1845)
					} else {
						z.EncFallback(yy1845)
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				if yyq1838[2] {
					yy1848 := &x.ListMeta
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1848) {
					} else {
						z.EncFallback(yy1848)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1850 := &x.ListMeta
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1850) {
					} else {
						z.EncFallback(yy1850)
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1838 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		switch yys1857 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1859 := &x.APIVersion
				yym1860 := z.DecBinary()
				_ = yym1860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1859) {
				} else if !yym1860 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1859)
				} else {
					z.DecFallback(yyv1859, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1861 := &x.ListMeta
				yym1862 := z.DecBinary()
				_ = yym1862
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1861) {
				} else {
					z.DecFallback(yyv1861, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1863 := &x.Items
				yym1864 := z.DecBinary()
				_ = yym1864
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1863), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	if !yyhl1857 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1865 int
	var yyb1865 bool
	var yyhl1865 bool = l >= 0
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1867 := &x.APIVersion
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1867) {
		} else if !yym1868 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1867)
		} else {
			z.DecFallback(yyv1867, false)
		}
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1869 := &x.ListMeta
		yym1870 := z.DecBinary()
		_ = yym1870
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1869) {
		} else {
			z.DecFallback(yyv1869, false)
		}
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1871 := &x.Items
		yym1872 := z.DecBinary()
		_ = yym1872
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1871), d)
		}
	}
	for {
		yyj1865++
		if yyhl1865 {
			yyb1865 = yyj1865 > l
		} else {
			yyb1865 = r.CheckBreak()
		}
		if yyb1865 {
			break
		}
		z.DecStructFieldNotFound(yyj1865-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1873 := z.EncBinary()
		_ = yym1873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1874 := !z.EncBinary()
			yy2arr1874 := z.EncBasicHandle().StructToArray
			var yyq1874 [4]bool
			_, _, _ = yysep1874, yyq1874, yy2arr1874
			const yyr1874 bool = false
			yyq1874[0] = x.Kind != ""
			yyq1874[1] = true
			yyq1874[2] = true
			if yyr1874 || yy2arr1874 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1874 int = 1
				for _, b := range yyq1874 {
					if b {
						yynn1874++
					}
				}
				r.EncodeMapStart(yynn1874)
			}
			if yyr1874 || yy2arr1874 {
				if yyq1874[0] {
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1874[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1874 || yy2arr1874 {
				if yyq1874[1] {
					yy1879 := &x.APIVersion
					yym1880 := z.EncBinary()
					_ = yym1880
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1879) {
					} else if !yym1880 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1879)
					} else {
						z.EncFallback(yy1879)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1874[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1881 := &x.APIVersion
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1881) {
					} else if !yym1882 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1881)
					} else {
						z.EncFallback(yy1881)
					}
				}
			}
			if yyr1874 || yy2arr1874 {
				if yyq1874[2] {
					yy1884 := &x.ListMeta
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1884) {
					} else {
						z.EncFallback(yy1884)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1874[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1886 := &x.ListMeta
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1886) {
					} else {
						z.EncFallback(yy1886)
					}
				}
			}
			if yyr1874 || yy2arr1874 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1890 := z.EncBinary()
					_ = yym1890
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1874 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1891 := z.DecBinary()
	_ = yym1891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1892 := r.ReadMapStart()
			if yyl1892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1892, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1892 := r.ReadArrayStart()
			if yyl1892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1893Slc
	var yyhl1893 bool = l >= 0
	for yyj1893 := 0; ; yyj1893++ {
		if yyhl1893 {
			if yyj1893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1893Slc = r.DecodeBytes(yys1893Slc, true, true)
		yys1893 := string(yys1893Slc)
		switch yys1893 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv1895 := &x.APIVersion
				yym1896 := z.DecBinary()
				_ = yym1896
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1895) {
				} else if !yym1896 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1895)
				} else {
					z.DecFallback(yyv1895, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1897 := &x.ListMeta
				yym1898 := z.DecBinary()
				_ = yym1898
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1897) {
				} else {
					z.DecFallback(yyv1897, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1899 := &x.Items
				yym1900 := z.DecBinary()
				_ = yym1900
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1899), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1893)
		} // end switch yys1893
	} // end for yyj1893
	if !yyhl1893 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1901 int
	var yyb1901 bool
	var yyhl1901 bool = l >= 0
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv1903 := &x.APIVersion
		yym1904 := z.DecBinary()
		_ = yym1904
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1903) {
		} else if !yym1904 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1903)
		} else {
			z.DecFallback(yyv1903, false)
		}
	}
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1905 := &x.ListMeta
		yym1906 := z.DecBinary()
		_ = yym1906
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1905) {
		} else {
			z.DecFallback(yyv1905, false)
		}
	}
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1907 := &x.Items
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1907), d)
		}
	}
	for {
		yyj1901++
		if yyhl1901 {
			yyb1901 = yyj1901 > l
		} else {
			yyb1901 = r.CheckBreak()
		}
		if yyb1901 {
			break
		}
		z.DecStructFieldNotFound(yyj1901-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1909 := z.EncBinary()
	_ = yym1909
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1910 := z.DecBinary()
	_ = yym1910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1911 := z.EncBinary()
	_ = yym1911
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1913 := z.EncBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1914 := !z.EncBinary()
			yy2arr1914 := z.EncBasicHandle().StructToArray
			var yyq1914 [1]bool
			_, _, _ = yysep1914, yyq1914, yy2arr1914
			const yyr1914 bool = false
			yyq1914[0] = true
			if yyr1914 || yy2arr1914 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1914 int = 0
				for _, b := range yyq1914 {
					if b {
						yynn1914++
					}
				}
				r.EncodeMapStart(yynn1914)
			}
			if yyr1914 || yy2arr1914 {
				if yyq1914[0] {
					yy1916 := &x.LoadBalancer
					yy1916.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1914[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1917 := &x.LoadBalancer
					yy1917.CodecEncodeSelf(e)
				}
			}
			if yysep1914 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1918 := z.DecBinary()
	_ = yym1918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1919 := r.ReadMapStart()
			if yyl1919 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1919, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1919 := r.ReadArrayStart()
			if yyl1919 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1920Slc
	var yyhl1920 bool = l >= 0
	for yyj1920 := 0; ; yyj1920++ {
		if yyhl1920 {
			if yyj1920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1920Slc = r.DecodeBytes(yys1920Slc, true, true)
		yys1920 := string(yys1920Slc)
		switch yys1920 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1921 := &x.LoadBalancer
				yyv1921.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1920)
		} // end switch yys1920
	} // end for yyj1920
	if !yyhl1920 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1922 int
	var yyb1922 bool
	var yyhl1922 bool = l >= 0
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1923 := &x.LoadBalancer
		yyv1923.CodecDecodeSelf(d)
	}
	for {
		yyj1922++
		if yyhl1922 {
			yyb1922 = yyj1922 > l
		} else {
			yyb1922 = r.CheckBreak()
		}
		if yyb1922 {
			break
		}
		z.DecStructFieldNotFound(yyj1922-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1924 := z.EncBinary()
		_ = yym1924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1925 := !z.EncBinary()
			yy2arr1925 := z.EncBasicHandle().StructToArray
			var yyq1925 [1]bool
			_, _, _ = yysep1925, yyq1925, yy2arr1925
			const yyr1925 bool = false
			yyq1925[0] = len(x.Ingress) != 0
			if yyr1925 || yy2arr1925 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1925 int = 0
				for _, b := range yyq1925 {
					if b {
						yynn1925++
					}
				}
				r.EncodeMapStart(yynn1925)
			}
			if yyr1925 || yy2arr1925 {
				if yyq1925[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1927 := z.EncBinary()
						_ = yym1927
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1925[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1925 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1929 := z.DecBinary()
	_ = yym1929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1930 := r.ReadMapStart()
			if yyl1930 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1930, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1930 := r.ReadArrayStart()
			if yyl1930 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1931Slc
	var yyhl1931 bool = l >= 0
	for yyj1931 := 0; ; yyj1931++ {
		if yyhl1931 {
			if yyj1931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1931Slc = r.DecodeBytes(yys1931Slc, true, true)
		yys1931 := string(yys1931Slc)
		switch yys1931 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1932 := &x.Ingress
				yym1933 := z.DecBinary()
				_ = yym1933
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1932), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1931)
		} // end switch yys1931
	} // end for yyj1931
	if !yyhl1931 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1934 int
	var yyb1934 bool
	var yyhl1934 bool = l >= 0
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1935 := &x.Ingress
		yym1936 := z.DecBinary()
		_ = yym1936
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1935), d)
		}
	}
	for {
		yyj1934++
		if yyhl1934 {
			yyb1934 = yyj1934 > l
		} else {
			yyb1934 = r.CheckBreak()
		}
		if yyb1934 {
			break
		}
		z.DecStructFieldNotFound(yyj1934-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1937 := z.EncBinary()
		_ = yym1937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1938 := !z.EncBinary()
			yy2arr1938 := z.EncBasicHandle().StructToArray
			var yyq1938 [2]bool
			_, _, _ = yysep1938, yyq1938, yy2arr1938
			const yyr1938 bool = false
			yyq1938[0] = x.IP != ""
			yyq1938[1] = x.Hostname != ""
			if yyr1938 || yy2arr1938 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1938 int = 0
				for _, b := range yyq1938 {
					if b {
						yynn1938++
					}
				}
				r.EncodeMapStart(yynn1938)
			}
			if yyr1938 || yy2arr1938 {
				if yyq1938[0] {
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1941 := z.EncBinary()
					_ = yym1941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				if yyq1938[1] {
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1938 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1945 := z.DecBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1946 := r.ReadMapStart()
			if yyl1946 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1946, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1946 := r.ReadArrayStart()
			if yyl1946 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1947Slc
	var yyhl1947 bool = l >= 0
	for yyj1947 := 0; ; yyj1947++ {
		if yyhl1947 {
			if yyj1947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1947Slc = r.DecodeBytes(yys1947Slc, true, true)
		yys1947 := string(yys1947Slc)
		switch yys1947 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1947)
		} // end switch yys1947
	} // end for yyj1947
	if !yyhl1947 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1950 int
	var yyb1950 bool
	var yyhl1950 bool = l >= 0
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1950++
	if yyhl1950 {
		yyb1950 = yyj1950 > l
	} else {
		yyb1950 = r.CheckBreak()
	}
	if yyb1950 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1950++
		if yyhl1950 {
			yyb1950 = yyj1950 > l
		} else {
			yyb1950 = r.CheckBreak()
		}
		if yyb1950 {
			break
		}
		z.DecStructFieldNotFound(yyj1950-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1953 := z.EncBinary()
		_ = yym1953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1954 := !z.EncBinary()
			yy2arr1954 := z.EncBasicHandle().StructToArray
			var yyq1954 [7]bool
			_, _, _ = yysep1954, yyq1954, yy2arr1954
			const yyr1954 bool = false
			yyq1954[0] = x.Type != ""
			yyq1954[3] = x.ClusterIP != ""
			yyq1954[4] = len(x.ExternalIPs) != 0
			yyq1954[5] = x.LoadBalancerIP != ""
			yyq1954[6] = x.SessionAffinity != ""
			if yyr1954 || yy2arr1954 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1954 int = 2
				for _, b := range yyq1954 {
					if b {
						yynn1954++
					}
				}
				r.EncodeMapStart(yynn1954)
			}
			if yyr1954 || yy2arr1954 {
				if yyq1954[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1954[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1954 || yy2arr1954 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1961 := z.EncBinary()
					_ = yym1961
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				if yyq1954[3] {
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1954[3] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1964 := z.EncBinary()
					_ = yym1964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				if yyq1954[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1966 := z.EncBinary()
						_ = yym1966
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1954[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1967 := z.EncBinary()
						_ = yym1967
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				if yyq1954[5] {
					yym1969 := z.EncBinary()
					_ = yym1969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1954[5] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1954 || yy2arr1954 {
				if yyq1954[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1954[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1954 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1972 := z.DecBinary()
	_ = yym1972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1973 := r.ReadMapStart()
			if yyl1973 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1973, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1973 := r.ReadArrayStart()
			if yyl1973 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1974Slc
	var yyhl1974 bool = l >= 0
	for yyj1974 := 0; ; yyj1974++ {
		if yyhl1974 {
			if yyj1974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1974Slc = r.DecodeBytes(yys1974Slc, true, true)
		yys1974 := string(yys1974Slc)
		switch yys1974 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1976 := &x.Ports
				yym1977 := z.DecBinary()
				_ = yym1977
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1976), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1978 := &x.Selector
				yym1979 := z.DecBinary()
				_ = yym1979
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1978, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1981 := &x.ExternalIPs
				yym1982 := z.DecBinary()
				_ = yym1982
				if false {
				} else {
					z.F.DecSliceStringX(yyv1981, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1974)
		} // end switch yys1974
	} // end for yyj1974
	if !yyhl1974 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1985 int
	var yyb1985 bool
	var yyhl1985 bool = l >= 0
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1987 := &x.Ports
		yym1988 := z.DecBinary()
		_ = yym1988
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1987), d)
		}
	}
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1989 := &x.Selector
		yym1990 := z.DecBinary()
		_ = yym1990
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1989, false, d)
		}
	}
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1992 := &x.ExternalIPs
		yym1993 := z.DecBinary()
		_ = yym1993
		if false {
		} else {
			z.F.DecSliceStringX(yyv1992, false, d)
		}
	}
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1985++
	if yyhl1985 {
		yyb1985 = yyj1985 > l
	} else {
		yyb1985 = r.CheckBreak()
	}
	if yyb1985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1985++
		if yyhl1985 {
			yyb1985 = yyj1985 > l
		} else {
			yyb1985 = r.CheckBreak()
		}
		if yyb1985 {
			break
		}
		z.DecStructFieldNotFound(yyj1985-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1996 := z.EncBinary()
		_ = yym1996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1997 := !z.EncBinary()
			yy2arr1997 := z.EncBasicHandle().StructToArray
			var yyq1997 [5]bool
			_, _, _ = yysep1997, yyq1997, yy2arr1997
			const yyr1997 bool = false
			if yyr1997 || yy2arr1997 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1997 int = 5
				for _, b := range yyq1997 {
					if b {
						yynn1997++
					}
				}
				r.EncodeMapStart(yynn1997)
			}
			if yyr1997 || yy2arr1997 {
				yym1999 := z.EncBinary()
				_ = yym1999
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym2000 := z.EncBinary()
				_ = yym2000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1997 || yy2arr1997 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1997 || yy2arr1997 {
				yym2003 := z.EncBinary()
				_ = yym2003
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2004 := z.EncBinary()
				_ = yym2004
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1997 || yy2arr1997 {
				yy2006 := &x.TargetPort
				yym2007 := z.EncBinary()
				_ = yym2007
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2006) {
				} else if !yym2007 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2006)
				} else {
					z.EncFallback(yy2006)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				yy2008 := &x.TargetPort
				yym2009 := z.EncBinary()
				_ = yym2009
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2008) {
				} else if !yym2009 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2008)
				} else {
					z.EncFallback(yy2008)
				}
			}
			if yyr1997 || yy2arr1997 {
				yym2011 := z.EncBinary()
				_ = yym2011
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				yym2012 := z.EncBinary()
				_ = yym2012
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1997 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2013 := z.DecBinary()
	_ = yym2013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2014 := r.ReadMapStart()
			if yyl2014 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2014, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2014 := r.ReadArrayStart()
			if yyl2014 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2015Slc
	var yyhl2015 bool = l >= 0
	for yyj2015 := 0; ; yyj2015++ {
		if yyhl2015 {
			if yyj2015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2015Slc = r.DecodeBytes(yys2015Slc, true, true)
		yys2015 := string(yys2015Slc)
		switch yys2015 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv2019 := &x.TargetPort
				yym2020 := z.DecBinary()
				_ = yym2020
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2019) {
				} else if !yym2020 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2019)
				} else {
					z.DecFallback(yyv2019, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2015)
		} // end switch yys2015
	} // end for yyj2015
	if !yyhl2015 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2022 int
	var yyb2022 bool
	var yyhl2022 bool = l >= 0
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv2026 := &x.TargetPort
		yym2027 := z.DecBinary()
		_ = yym2027
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2026) {
		} else if !yym2027 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2026)
		} else {
			z.DecFallback(yyv2026, false)
		}
	}
	yyj2022++
	if yyhl2022 {
		yyb2022 = yyj2022 > l
	} else {
		yyb2022 = r.CheckBreak()
	}
	if yyb2022 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2022++
		if yyhl2022 {
			yyb2022 = yyj2022 > l
		} else {
			yyb2022 = r.CheckBreak()
		}
		if yyb2022 {
			break
		}
		z.DecStructFieldNotFound(yyj2022-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2029 := z.EncBinary()
		_ = yym2029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2030 := !z.EncBinary()
			yy2arr2030 := z.EncBasicHandle().StructToArray
			var yyq2030 [5]bool
			_, _, _ = yysep2030, yyq2030, yy2arr2030
			const yyr2030 bool = false
			yyq2030[0] = x.Kind != ""
			yyq2030[1] = true
			yyq2030[2] = true
			yyq2030[3] = true
			yyq2030[4] = true
			if yyr2030 || yy2arr2030 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2030 int = 0
				for _, b := range yyq2030 {
					if b {
						yynn2030++
					}
				}
				r.EncodeMapStart(yynn2030)
			}
			if yyr2030 || yy2arr2030 {
				if yyq2030[0] {
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2030[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				if yyq2030[1] {
					yy2035 := &x.APIVersion
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2035) {
					} else if !yym2036 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2035)
					} else {
						z.EncFallback(yy2035)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2037 := &x.APIVersion
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2037) {
					} else if !yym2038 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2037)
					} else {
						z.EncFallback(yy2037)
					}
				}
			}
			if yyr2030 || yy2arr2030 {
				if yyq2030[2] {
					yy2040 := &x.ObjectMeta
					yy2040.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2041 := &x.ObjectMeta
					yy2041.CodecEncodeSelf(e)
				}
			}
			if yyr2030 || yy2arr2030 {
				if yyq2030[3] {
					yy2043 := &x.Spec
					yy2043.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2044 := &x.Spec
					yy2044.CodecEncodeSelf(e)
				}
			}
			if yyr2030 || yy2arr2030 {
				if yyq2030[4] {
					yy2046 := &x.Status
					yy2046.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2030[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2047 := &x.Status
					yy2047.CodecEncodeSelf(e)
				}
			}
			if yysep2030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		switch yys2050 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2052 := &x.APIVersion
				yym2053 := z.DecBinary()
				_ = yym2053
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2052) {
				} else if !yym2053 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2052)
				} else {
					z.DecFallback(yyv2052, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2054 := &x.ObjectMeta
				yyv2054.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2055 := &x.Spec
				yyv2055.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2056 := &x.Status
				yyv2056.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	if !yyhl2050 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2057 int
	var yyb2057 bool
	var yyhl2057 bool = l >= 0
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2059 := &x.APIVersion
		yym2060 := z.DecBinary()
		_ = yym2060
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2059) {
		} else if !yym2060 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2059)
		} else {
			z.DecFallback(yyv2059, false)
		}
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2061 := &x.ObjectMeta
		yyv2061.CodecDecodeSelf(d)
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2062 := &x.Spec
		yyv2062.CodecDecodeSelf(d)
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2063 := &x.Status
		yyv2063.CodecDecodeSelf(d)
	}
	for {
		yyj2057++
		if yyhl2057 {
			yyb2057 = yyj2057 > l
		} else {
			yyb2057 = r.CheckBreak()
		}
		if yyb2057 {
			break
		}
		z.DecStructFieldNotFound(yyj2057-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2064 := z.EncBinary()
		_ = yym2064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2065 := !z.EncBinary()
			yy2arr2065 := z.EncBasicHandle().StructToArray
			var yyq2065 [5]bool
			_, _, _ = yysep2065, yyq2065, yy2arr2065
			const yyr2065 bool = false
			yyq2065[0] = x.Kind != ""
			yyq2065[1] = true
			yyq2065[2] = true
			yyq2065[4] = len(x.ImagePullSecrets) != 0
			if yyr2065 || yy2arr2065 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2065 int = 1
				for _, b := range yyq2065 {
					if b {
						yynn2065++
					}
				}
				r.EncodeMapStart(yynn2065)
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[0] {
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[1] {
					yy2070 := &x.APIVersion
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2070) {
					} else if !yym2071 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2070)
					} else {
						z.EncFallback(yy2070)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2072 := &x.APIVersion
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2072) {
					} else if !yym2073 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2072)
					} else {
						z.EncFallback(yy2072)
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[2] {
					yy2075 := &x.ObjectMeta
					yy2075.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2076 := &x.ObjectMeta
					yy2076.CodecEncodeSelf(e)
				}
			}
			if yyr2065 || yy2arr2065 {
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2081 := z.EncBinary()
						_ = yym2081
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2082 := z.EncBinary()
						_ = yym2082
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2065 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2083 := z.DecBinary()
	_ = yym2083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2084 := r.ReadMapStart()
			if yyl2084 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2084, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2084 := r.ReadArrayStart()
			if yyl2084 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2085Slc
	var yyhl2085 bool = l >= 0
	for yyj2085 := 0; ; yyj2085++ {
		if yyhl2085 {
			if yyj2085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2085Slc = r.DecodeBytes(yys2085Slc, true, true)
		yys2085 := string(yys2085Slc)
		switch yys2085 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2087 := &x.APIVersion
				yym2088 := z.DecBinary()
				_ = yym2088
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2087) {
				} else if !yym2088 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2087)
				} else {
					z.DecFallback(yyv2087, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2089 := &x.ObjectMeta
				yyv2089.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2090 := &x.Secrets
				yym2091 := z.DecBinary()
				_ = yym2091
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2090), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2092 := &x.ImagePullSecrets
				yym2093 := z.DecBinary()
				_ = yym2093
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2092), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2085)
		} // end switch yys2085
	} // end for yyj2085
	if !yyhl2085 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2094 int
	var yyb2094 bool
	var yyhl2094 bool = l >= 0
	yyj2094++
	if yyhl2094 {
		yyb2094 = yyj2094 > l
	} else {
		yyb2094 = r.CheckBreak()
	}
	if yyb2094 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2094++
	if yyhl2094 {
		yyb2094 = yyj2094 > l
	} else {
		yyb2094 = r.CheckBreak()
	}
	if yyb2094 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2096 := &x.APIVersion
		yym2097 := z.DecBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2096) {
		} else if !yym2097 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2096)
		} else {
			z.DecFallback(yyv2096, false)
		}
	}
	yyj2094++
	if yyhl2094 {
		yyb2094 = yyj2094 > l
	} else {
		yyb2094 = r.CheckBreak()
	}
	if yyb2094 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2098 := &x.ObjectMeta
		yyv2098.CodecDecodeSelf(d)
	}
	yyj2094++
	if yyhl2094 {
		yyb2094 = yyj2094 > l
	} else {
		yyb2094 = r.CheckBreak()
	}
	if yyb2094 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2099 := &x.Secrets
		yym2100 := z.DecBinary()
		_ = yym2100
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2099), d)
		}
	}
	yyj2094++
	if yyhl2094 {
		yyb2094 = yyj2094 > l
	} else {
		yyb2094 = r.CheckBreak()
	}
	if yyb2094 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2101 := &x.ImagePullSecrets
		yym2102 := z.DecBinary()
		_ = yym2102
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2101), d)
		}
	}
	for {
		yyj2094++
		if yyhl2094 {
			yyb2094 = yyj2094 > l
		} else {
			yyb2094 = r.CheckBreak()
		}
		if yyb2094 {
			break
		}
		z.DecStructFieldNotFound(yyj2094-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2103 := z.EncBinary()
		_ = yym2103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2104 := !z.EncBinary()
			yy2arr2104 := z.EncBasicHandle().StructToArray
			var yyq2104 [4]bool
			_, _, _ = yysep2104, yyq2104, yy2arr2104
			const yyr2104 bool = false
			yyq2104[0] = x.Kind != ""
			yyq2104[1] = true
			yyq2104[2] = true
			if yyr2104 || yy2arr2104 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2104 int = 1
				for _, b := range yyq2104 {
					if b {
						yynn2104++
					}
				}
				r.EncodeMapStart(yynn2104)
			}
			if yyr2104 || yy2arr2104 {
				if yyq2104[0] {
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2104[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2107 := z.EncBinary()
					_ = yym2107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2104 || yy2arr2104 {
				if yyq2104[1] {
					yy2109 := &x.APIVersion
					yym2110 := z.EncBinary()
					_ = yym2110
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2109) {
					} else if !yym2110 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2109)
					} else {
						z.EncFallback(yy2109)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2104[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2111 := &x.APIVersion
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2111) {
					} else if !yym2112 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2111)
					} else {
						z.EncFallback(yy2111)
					}
				}
			}
			if yyr2104 || yy2arr2104 {
				if yyq2104[2] {
					yy2114 := &x.ListMeta
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2114) {
					} else {
						z.EncFallback(yy2114)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2104[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2116 := &x.ListMeta
					yym2117 := z.EncBinary()
					_ = yym2117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2116) {
					} else {
						z.EncFallback(yy2116)
					}
				}
			}
			if yyr2104 || yy2arr2104 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2104 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2121 := z.DecBinary()
	_ = yym2121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2122 := r.ReadMapStart()
			if yyl2122 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2122, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2122 := r.ReadArrayStart()
			if yyl2122 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2123Slc
	var yyhl2123 bool = l >= 0
	for yyj2123 := 0; ; yyj2123++ {
		if yyhl2123 {
			if yyj2123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2123Slc = r.DecodeBytes(yys2123Slc, true, true)
		yys2123 := string(yys2123Slc)
		switch yys2123 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2125 := &x.APIVersion
				yym2126 := z.DecBinary()
				_ = yym2126
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2125) {
				} else if !yym2126 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2125)
				} else {
					z.DecFallback(yyv2125, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2127 := &x.ListMeta
				yym2128 := z.DecBinary()
				_ = yym2128
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2127) {
				} else {
					z.DecFallback(yyv2127, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2129 := &x.Items
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2129), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2123)
		} // end switch yys2123
	} // end for yyj2123
	if !yyhl2123 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2131 int
	var yyb2131 bool
	var yyhl2131 bool = l >= 0
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2133 := &x.APIVersion
		yym2134 := z.DecBinary()
		_ = yym2134
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2133) {
		} else if !yym2134 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2133)
		} else {
			z.DecFallback(yyv2133, false)
		}
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2135 := &x.ListMeta
		yym2136 := z.DecBinary()
		_ = yym2136
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2135) {
		} else {
			z.DecFallback(yyv2135, false)
		}
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2137 := &x.Items
		yym2138 := z.DecBinary()
		_ = yym2138
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2137), d)
		}
	}
	for {
		yyj2131++
		if yyhl2131 {
			yyb2131 = yyj2131 > l
		} else {
			yyb2131 = r.CheckBreak()
		}
		if yyb2131 {
			break
		}
		z.DecStructFieldNotFound(yyj2131-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2139 := z.EncBinary()
		_ = yym2139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2140 := !z.EncBinary()
			yy2arr2140 := z.EncBasicHandle().StructToArray
			var yyq2140 [4]bool
			_, _, _ = yysep2140, yyq2140, yy2arr2140
			const yyr2140 bool = false
			yyq2140[0] = x.Kind != ""
			yyq2140[1] = true
			yyq2140[2] = true
			if yyr2140 || yy2arr2140 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2140 int = 1
				for _, b := range yyq2140 {
					if b {
						yynn2140++
					}
				}
				r.EncodeMapStart(yynn2140)
			}
			if yyr2140 || yy2arr2140 {
				if yyq2140[0] {
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2140[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2140 || yy2arr2140 {
				if yyq2140[1] {
					yy2145 := &x.APIVersion
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2145) {
					} else if !yym2146 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2145)
					} else {
						z.EncFallback(yy2145)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2140[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2147 := &x.APIVersion
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2147) {
					} else if !yym2148 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2147)
					} else {
						z.EncFallback(yy2147)
					}
				}
			}
			if yyr2140 || yy2arr2140 {
				if yyq2140[2] {
					yy2150 := &x.ObjectMeta
					yy2150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2140[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2151 := &x.ObjectMeta
					yy2151.CodecEncodeSelf(e)
				}
			}
			if yyr2140 || yy2arr2140 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2140 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		switch yys2157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2159 := &x.APIVersion
				yym2160 := z.DecBinary()
				_ = yym2160
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2159) {
				} else if !yym2160 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2159)
				} else {
					z.DecFallback(yyv2159, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2161 := &x.ObjectMeta
				yyv2161.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2162 := &x.Subsets
				yym2163 := z.DecBinary()
				_ = yym2163
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2162), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	if !yyhl2157 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2164 int
	var yyb2164 bool
	var yyhl2164 bool = l >= 0
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2166 := &x.APIVersion
		yym2167 := z.DecBinary()
		_ = yym2167
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2166) {
		} else if !yym2167 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2166)
		} else {
			z.DecFallback(yyv2166, false)
		}
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2168 := &x.ObjectMeta
		yyv2168.CodecDecodeSelf(d)
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2169 := &x.Subsets
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2169), d)
		}
	}
	for {
		yyj2164++
		if yyhl2164 {
			yyb2164 = yyj2164 > l
		} else {
			yyb2164 = r.CheckBreak()
		}
		if yyb2164 {
			break
		}
		z.DecStructFieldNotFound(yyj2164-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2171 := z.EncBinary()
		_ = yym2171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2172 := !z.EncBinary()
			yy2arr2172 := z.EncBasicHandle().StructToArray
			var yyq2172 [3]bool
			_, _, _ = yysep2172, yyq2172, yy2arr2172
			const yyr2172 bool = false
			if yyr2172 || yy2arr2172 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2172 int = 3
				for _, b := range yyq2172 {
					if b {
						yynn2172++
					}
				}
				r.EncodeMapStart(yynn2172)
			}
			if yyr2172 || yy2arr2172 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep2172 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2182 := z.DecBinary()
	_ = yym2182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2183 := r.ReadMapStart()
			if yyl2183 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2183, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2183 := r.ReadArrayStart()
			if yyl2183 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2184Slc
	var yyhl2184 bool = l >= 0
	for yyj2184 := 0; ; yyj2184++ {
		if yyhl2184 {
			if yyj2184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2184Slc = r.DecodeBytes(yys2184Slc, true, true)
		yys2184 := string(yys2184Slc)
		switch yys2184 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2185 := &x.Addresses
				yym2186 := z.DecBinary()
				_ = yym2186
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2185), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2187 := &x.NotReadyAddresses
				yym2188 := z.DecBinary()
				_ = yym2188
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2187), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2189 := &x.Ports
				yym2190 := z.DecBinary()
				_ = yym2190
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2189), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2184)
		} // end switch yys2184
	} // end for yyj2184
	if !yyhl2184 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2191 int
	var yyb2191 bool
	var yyhl2191 bool = l >= 0
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2192 := &x.Addresses
		yym2193 := z.DecBinary()
		_ = yym2193
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2192), d)
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2194 := &x.NotReadyAddresses
		yym2195 := z.DecBinary()
		_ = yym2195
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2194), d)
		}
	}
	yyj2191++
	if yyhl2191 {
		yyb2191 = yyj2191 > l
	} else {
		yyb2191 = r.CheckBreak()
	}
	if yyb2191 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2196 := &x.Ports
		yym2197 := z.DecBinary()
		_ = yym2197
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2196), d)
		}
	}
	for {
		yyj2191++
		if yyhl2191 {
			yyb2191 = yyj2191 > l
		} else {
			yyb2191 = r.CheckBreak()
		}
		if yyb2191 {
			break
		}
		z.DecStructFieldNotFound(yyj2191-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2198 := z.EncBinary()
		_ = yym2198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2199 := !z.EncBinary()
			yy2arr2199 := z.EncBasicHandle().StructToArray
			var yyq2199 [2]bool
			_, _, _ = yysep2199, yyq2199, yy2arr2199
			const yyr2199 bool = false
			if yyr2199 || yy2arr2199 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2199 int = 2
				for _, b := range yyq2199 {
					if b {
						yynn2199++
					}
				}
				r.EncodeMapStart(yynn2199)
			}
			if yyr2199 || yy2arr2199 {
				yym2201 := z.EncBinary()
				_ = yym2201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				yym2202 := z.EncBinary()
				_ = yym2202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2199 || yy2arr2199 {
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep2199 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2204 := z.DecBinary()
	_ = yym2204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2205 := r.ReadMapStart()
			if yyl2205 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2205, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2205 := r.ReadArrayStart()
			if yyl2205 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2206Slc
	var yyhl2206 bool = l >= 0
	for yyj2206 := 0; ; yyj2206++ {
		if yyhl2206 {
			if yyj2206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2206Slc = r.DecodeBytes(yys2206Slc, true, true)
		yys2206 := string(yys2206Slc)
		switch yys2206 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2206)
		} // end switch yys2206
	} // end for yyj2206
	if !yyhl2206 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2209 int
	var yyb2209 bool
	var yyhl2209 bool = l >= 0
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2209++
		if yyhl2209 {
			yyb2209 = yyj2209 > l
		} else {
			yyb2209 = r.CheckBreak()
		}
		if yyb2209 {
			break
		}
		z.DecStructFieldNotFound(yyj2209-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2212 := z.EncBinary()
		_ = yym2212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2213 := !z.EncBinary()
			yy2arr2213 := z.EncBasicHandle().StructToArray
			var yyq2213 [3]bool
			_, _, _ = yysep2213, yyq2213, yy2arr2213
			const yyr2213 bool = false
			if yyr2213 || yy2arr2213 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2213 int = 3
				for _, b := range yyq2213 {
					if b {
						yynn2213++
					}
				}
				r.EncodeMapStart(yynn2213)
			}
			if yyr2213 || yy2arr2213 {
				yym2215 := z.EncBinary()
				_ = yym2215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2216 := z.EncBinary()
				_ = yym2216
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2213 || yy2arr2213 {
				yym2218 := z.EncBinary()
				_ = yym2218
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2219 := z.EncBinary()
				_ = yym2219
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2213 || yy2arr2213 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep2213 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2221 := z.DecBinary()
	_ = yym2221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2222 := r.ReadMapStart()
			if yyl2222 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2222, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2222 := r.ReadArrayStart()
			if yyl2222 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2223Slc
	var yyhl2223 bool = l >= 0
	for yyj2223 := 0; ; yyj2223++ {
		if yyhl2223 {
			if yyj2223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2223Slc = r.DecodeBytes(yys2223Slc, true, true)
		yys2223 := string(yys2223Slc)
		switch yys2223 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2223)
		} // end switch yys2223
	} // end for yyj2223
	if !yyhl2223 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2227 int
	var yyb2227 bool
	var yyhl2227 bool = l >= 0
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2227++
		if yyhl2227 {
			yyb2227 = yyj2227 > l
		} else {
			yyb2227 = r.CheckBreak()
		}
		if yyb2227 {
			break
		}
		z.DecStructFieldNotFound(yyj2227-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2231 := z.EncBinary()
		_ = yym2231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2232 := !z.EncBinary()
			yy2arr2232 := z.EncBasicHandle().StructToArray
			var yyq2232 [4]bool
			_, _, _ = yysep2232, yyq2232, yy2arr2232
			const yyr2232 bool = false
			yyq2232[0] = x.Kind != ""
			yyq2232[1] = true
			yyq2232[2] = true
			if yyr2232 || yy2arr2232 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2232 int = 1
				for _, b := range yyq2232 {
					if b {
						yynn2232++
					}
				}
				r.EncodeMapStart(yynn2232)
			}
			if yyr2232 || yy2arr2232 {
				if yyq2232[0] {
					yym2234 := z.EncBinary()
					_ = yym2234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2232[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				if yyq2232[1] {
					yy2237 := &x.APIVersion
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2237) {
					} else if !yym2238 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2237)
					} else {
						z.EncFallback(yy2237)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2239 := &x.APIVersion
					yym2240 := z.EncBinary()
					_ = yym2240
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2239) {
					} else if !yym2240 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2239)
					} else {
						z.EncFallback(yy2239)
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				if yyq2232[2] {
					yy2242 := &x.ListMeta
					yym2243 := z.EncBinary()
					_ = yym2243
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2242) {
					} else {
						z.EncFallback(yy2242)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2232[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2244 := &x.ListMeta
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2244) {
					} else {
						z.EncFallback(yy2244)
					}
				}
			}
			if yyr2232 || yy2arr2232 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2247 := z.EncBinary()
					_ = yym2247
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2248 := z.EncBinary()
					_ = yym2248
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2232 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2249 := z.DecBinary()
	_ = yym2249
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2250 := r.ReadMapStart()
			if yyl2250 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2250, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2250 := r.ReadArrayStart()
			if yyl2250 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2250, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2251Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2251Slc
	var yyhl2251 bool = l >= 0
	for yyj2251 := 0; ; yyj2251++ {
		if yyhl2251 {
			if yyj2251 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2251Slc = r.DecodeBytes(yys2251Slc, true, true)
		yys2251 := string(yys2251Slc)
		switch yys2251 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2253 := &x.APIVersion
				yym2254 := z.DecBinary()
				_ = yym2254
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2253) {
				} else if !yym2254 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2253)
				} else {
					z.DecFallback(yyv2253, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2255 := &x.ListMeta
				yym2256 := z.DecBinary()
				_ = yym2256
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2255) {
				} else {
					z.DecFallback(yyv2255, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2257 := &x.Items
				yym2258 := z.DecBinary()
				_ = yym2258
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2257), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2251)
		} // end switch yys2251
	} // end for yyj2251
	if !yyhl2251 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2259 int
	var yyb2259 bool
	var yyhl2259 bool = l >= 0
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2261 := &x.APIVersion
		yym2262 := z.DecBinary()
		_ = yym2262
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2261) {
		} else if !yym2262 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2261)
		} else {
			z.DecFallback(yyv2261, false)
		}
	}
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2263 := &x.ListMeta
		yym2264 := z.DecBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2263) {
		} else {
			z.DecFallback(yyv2263, false)
		}
	}
	yyj2259++
	if yyhl2259 {
		yyb2259 = yyj2259 > l
	} else {
		yyb2259 = r.CheckBreak()
	}
	if yyb2259 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2265 := &x.Items
		yym2266 := z.DecBinary()
		_ = yym2266
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2265), d)
		}
	}
	for {
		yyj2259++
		if yyhl2259 {
			yyb2259 = yyj2259 > l
		} else {
			yyb2259 = r.CheckBreak()
		}
		if yyb2259 {
			break
		}
		z.DecStructFieldNotFound(yyj2259-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2267 := z.EncBinary()
		_ = yym2267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2268 := !z.EncBinary()
			yy2arr2268 := z.EncBasicHandle().StructToArray
			var yyq2268 [4]bool
			_, _, _ = yysep2268, yyq2268, yy2arr2268
			const yyr2268 bool = false
			yyq2268[0] = x.PodCIDR != ""
			yyq2268[1] = x.ExternalID != ""
			yyq2268[2] = x.ProviderID != ""
			yyq2268[3] = x.Unschedulable != false
			if yyr2268 || yy2arr2268 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2268 int = 0
				for _, b := range yyq2268 {
					if b {
						yynn2268++
					}
				}
				r.EncodeMapStart(yynn2268)
			}
			if yyr2268 || yy2arr2268 {
				if yyq2268[0] {
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2268[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2271 := z.EncBinary()
					_ = yym2271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				if yyq2268[1] {
					yym2273 := z.EncBinary()
					_ = yym2273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2268[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2274 := z.EncBinary()
					_ = yym2274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				if yyq2268[2] {
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2268[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2277 := z.EncBinary()
					_ = yym2277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				if yyq2268[3] {
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2268[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2268 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2281 := z.DecBinary()
	_ = yym2281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2282 := r.ReadMapStart()
			if yyl2282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2282, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2282 := r.ReadArrayStart()
			if yyl2282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2283Slc
	var yyhl2283 bool = l >= 0
	for yyj2283 := 0; ; yyj2283++ {
		if yyhl2283 {
			if yyj2283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2283Slc = r.DecodeBytes(yys2283Slc, true, true)
		yys2283 := string(yys2283Slc)
		switch yys2283 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2283)
		} // end switch yys2283
	} // end for yyj2283
	if !yyhl2283 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2288 int
	var yyb2288 bool
	var yyhl2288 bool = l >= 0
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2288++
		if yyhl2288 {
			yyb2288 = yyj2288 > l
		} else {
			yyb2288 = r.CheckBreak()
		}
		if yyb2288 {
			break
		}
		z.DecStructFieldNotFound(yyj2288-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2293 := z.EncBinary()
		_ = yym2293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2294 := !z.EncBinary()
			yy2arr2294 := z.EncBasicHandle().StructToArray
			var yyq2294 [1]bool
			_, _, _ = yysep2294, yyq2294, yy2arr2294
			const yyr2294 bool = false
			if yyr2294 || yy2arr2294 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2294 int = 1
				for _, b := range yyq2294 {
					if b {
						yynn2294++
					}
				}
				r.EncodeMapStart(yynn2294)
			}
			if yyr2294 || yy2arr2294 {
				yym2296 := z.EncBinary()
				_ = yym2296
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2297 := z.EncBinary()
				_ = yym2297
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2294 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2298 := z.DecBinary()
	_ = yym2298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2299 := r.ReadMapStart()
			if yyl2299 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2299, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2299 := r.ReadArrayStart()
			if yyl2299 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2300Slc
	var yyhl2300 bool = l >= 0
	for yyj2300 := 0; ; yyj2300++ {
		if yyhl2300 {
			if yyj2300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2300Slc = r.DecodeBytes(yys2300Slc, true, true)
		yys2300 := string(yys2300Slc)
		switch yys2300 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2300)
		} // end switch yys2300
	} // end for yyj2300
	if !yyhl2300 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2302 int
	var yyb2302 bool
	var yyhl2302 bool = l >= 0
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2302++
		if yyhl2302 {
			yyb2302 = yyj2302 > l
		} else {
			yyb2302 = r.CheckBreak()
		}
		if yyb2302 {
			break
		}
		z.DecStructFieldNotFound(yyj2302-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2304 := z.EncBinary()
		_ = yym2304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2305 := !z.EncBinary()
			yy2arr2305 := z.EncBasicHandle().StructToArray
			var yyq2305 [1]bool
			_, _, _ = yysep2305, yyq2305, yy2arr2305
			const yyr2305 bool = false
			yyq2305[0] = true
			if yyr2305 || yy2arr2305 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2305 int = 0
				for _, b := range yyq2305 {
					if b {
						yynn2305++
					}
				}
				r.EncodeMapStart(yynn2305)
			}
			if yyr2305 || yy2arr2305 {
				if yyq2305[0] {
					yy2307 := &x.KubeletEndpoint
					yy2307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2305[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2308 := &x.KubeletEndpoint
					yy2308.CodecEncodeSelf(e)
				}
			}
			if yysep2305 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2309 := z.DecBinary()
	_ = yym2309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2310 := r.ReadMapStart()
			if yyl2310 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2310, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2310 := r.ReadArrayStart()
			if yyl2310 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2311Slc
	var yyhl2311 bool = l >= 0
	for yyj2311 := 0; ; yyj2311++ {
		if yyhl2311 {
			if yyj2311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2311Slc = r.DecodeBytes(yys2311Slc, true, true)
		yys2311 := string(yys2311Slc)
		switch yys2311 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2312 := &x.KubeletEndpoint
				yyv2312.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2311)
		} // end switch yys2311
	} // end for yyj2311
	if !yyhl2311 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2313 int
	var yyb2313 bool
	var yyhl2313 bool = l >= 0
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2314 := &x.KubeletEndpoint
		yyv2314.CodecDecodeSelf(d)
	}
	for {
		yyj2313++
		if yyhl2313 {
			yyb2313 = yyj2313 > l
		} else {
			yyb2313 = r.CheckBreak()
		}
		if yyb2313 {
			break
		}
		z.DecStructFieldNotFound(yyj2313-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2315 := z.EncBinary()
		_ = yym2315
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2316 := !z.EncBinary()
			yy2arr2316 := z.EncBasicHandle().StructToArray
			var yyq2316 [8]bool
			_, _, _ = yysep2316, yyq2316, yy2arr2316
			const yyr2316 bool = false
			if yyr2316 || yy2arr2316 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2316 int = 8
				for _, b := range yyq2316 {
					if b {
						yynn2316++
					}
				}
				r.EncodeMapStart(yynn2316)
			}
			if yyr2316 || yy2arr2316 {
				yym2318 := z.EncBinary()
				_ = yym2318
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2319 := z.EncBinary()
				_ = yym2319
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2321 := z.EncBinary()
				_ = yym2321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2322 := z.EncBinary()
				_ = yym2322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2324 := z.EncBinary()
				_ = yym2324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2325 := z.EncBinary()
				_ = yym2325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2327 := z.EncBinary()
				_ = yym2327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2328 := z.EncBinary()
				_ = yym2328
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2330 := z.EncBinary()
				_ = yym2330
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2331 := z.EncBinary()
				_ = yym2331
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2333 := z.EncBinary()
				_ = yym2333
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2334 := z.EncBinary()
				_ = yym2334
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2336 := z.EncBinary()
				_ = yym2336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2337 := z.EncBinary()
				_ = yym2337
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2316 || yy2arr2316 {
				yym2339 := z.EncBinary()
				_ = yym2339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2340 := z.EncBinary()
				_ = yym2340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2316 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2341 := z.DecBinary()
	_ = yym2341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2342 := r.ReadMapStart()
			if yyl2342 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2342, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2342 := r.ReadArrayStart()
			if yyl2342 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2343Slc
	var yyhl2343 bool = l >= 0
	for yyj2343 := 0; ; yyj2343++ {
		if yyhl2343 {
			if yyj2343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2343Slc = r.DecodeBytes(yys2343Slc, true, true)
		yys2343 := string(yys2343Slc)
		switch yys2343 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2343)
		} // end switch yys2343
	} // end for yyj2343
	if !yyhl2343 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2352 int
	var yyb2352 bool
	var yyhl2352 bool = l >= 0
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2352++
	if yyhl2352 {
		yyb2352 = yyj2352 > l
	} else {
		yyb2352 = r.CheckBreak()
	}
	if yyb2352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2352++
		if yyhl2352 {
			yyb2352 = yyj2352 > l
		} else {
			yyb2352 = r.CheckBreak()
		}
		if yyb2352 {
			break
		}
		z.DecStructFieldNotFound(yyj2352-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2361 := z.EncBinary()
		_ = yym2361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2362 := !z.EncBinary()
			yy2arr2362 := z.EncBasicHandle().StructToArray
			var yyq2362 [6]bool
			_, _, _ = yysep2362, yyq2362, yy2arr2362
			const yyr2362 bool = false
			yyq2362[0] = len(x.Capacity) != 0
			yyq2362[1] = x.Phase != ""
			yyq2362[2] = len(x.Conditions) != 0
			yyq2362[3] = len(x.Addresses) != 0
			yyq2362[4] = true
			yyq2362[5] = true
			if yyr2362 || yy2arr2362 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2362 int = 0
				for _, b := range yyq2362 {
					if b {
						yynn2362++
					}
				}
				r.EncodeMapStart(yynn2362)
			}
			if yyr2362 || yy2arr2362 {
				if yyq2362[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2362 || yy2arr2362 {
				if yyq2362[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2362[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2362 || yy2arr2362 {
				if yyq2362[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2366 := z.EncBinary()
						_ = yym2366
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2367 := z.EncBinary()
						_ = yym2367
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2362 || yy2arr2362 {
				if yyq2362[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2369 := z.EncBinary()
						_ = yym2369
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2370 := z.EncBinary()
						_ = yym2370
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2362 || yy2arr2362 {
				if yyq2362[4] {
					yy2372 := &x.DaemonEndpoints
					yy2372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2373 := &x.DaemonEndpoints
					yy2373.CodecEncodeSelf(e)
				}
			}
			if yyr2362 || yy2arr2362 {
				if yyq2362[5] {
					yy2375 := &x.NodeInfo
					yy2375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2362[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2376 := &x.NodeInfo
					yy2376.CodecEncodeSelf(e)
				}
			}
			if yysep2362 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2377 := z.DecBinary()
	_ = yym2377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2378 := r.ReadMapStart()
			if yyl2378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2378, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2378 := r.ReadArrayStart()
			if yyl2378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2379Slc
	var yyhl2379 bool = l >= 0
	for yyj2379 := 0; ; yyj2379++ {
		if yyhl2379 {
			if yyj2379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2379Slc = r.DecodeBytes(yys2379Slc, true, true)
		yys2379 := string(yys2379Slc)
		switch yys2379 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2380 := &x.Capacity
				yyv2380.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2382 := &x.Conditions
				yym2383 := z.DecBinary()
				_ = yym2383
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2382), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2384 := &x.Addresses
				yym2385 := z.DecBinary()
				_ = yym2385
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2384), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2386 := &x.DaemonEndpoints
				yyv2386.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2387 := &x.NodeInfo
				yyv2387.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2379)
		} // end switch yys2379
	} // end for yyj2379
	if !yyhl2379 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2388 int
	var yyb2388 bool
	var yyhl2388 bool = l >= 0
	yyj2388++
	if yyhl2388 {
		yyb2388 = yyj2388 > l
	} else {
		yyb2388 = r.CheckBreak()
	}
	if yyb2388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2389 := &x.Capacity
		yyv2389.CodecDecodeSelf(d)
	}
	yyj2388++
	if yyhl2388 {
		yyb2388 = yyj2388 > l
	} else {
		yyb2388 = r.CheckBreak()
	}
	if yyb2388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2388++
	if yyhl2388 {
		yyb2388 = yyj2388 > l
	} else {
		yyb2388 = r.CheckBreak()
	}
	if yyb2388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2391 := &x.Conditions
		yym2392 := z.DecBinary()
		_ = yym2392
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2391), d)
		}
	}
	yyj2388++
	if yyhl2388 {
		yyb2388 = yyj2388 > l
	} else {
		yyb2388 = r.CheckBreak()
	}
	if yyb2388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2393 := &x.Addresses
		yym2394 := z.DecBinary()
		_ = yym2394
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2393), d)
		}
	}
	yyj2388++
	if yyhl2388 {
		yyb2388 = yyj2388 > l
	} else {
		yyb2388 = r.CheckBreak()
	}
	if yyb2388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2395 := &x.DaemonEndpoints
		yyv2395.CodecDecodeSelf(d)
	}
	yyj2388++
	if yyhl2388 {
		yyb2388 = yyj2388 > l
	} else {
		yyb2388 = r.CheckBreak()
	}
	if yyb2388 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2396 := &x.NodeInfo
		yyv2396.CodecDecodeSelf(d)
	}
	for {
		yyj2388++
		if yyhl2388 {
			yyb2388 = yyj2388 > l
		} else {
			yyb2388 = r.CheckBreak()
		}
		if yyb2388 {
			break
		}
		z.DecStructFieldNotFound(yyj2388-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2397 := z.EncBinary()
	_ = yym2397
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2398 := z.DecBinary()
	_ = yym2398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2399 := z.EncBinary()
	_ = yym2399
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2401 := z.EncBinary()
		_ = yym2401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2402 := !z.EncBinary()
			yy2arr2402 := z.EncBasicHandle().StructToArray
			var yyq2402 [6]bool
			_, _, _ = yysep2402, yyq2402, yy2arr2402
			const yyr2402 bool = false
			yyq2402[2] = true
			yyq2402[3] = true
			yyq2402[4] = x.Reason != ""
			yyq2402[5] = x.Message != ""
			if yyr2402 || yy2arr2402 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2402 int = 2
				for _, b := range yyq2402 {
					if b {
						yynn2402++
					}
				}
				r.EncodeMapStart(yynn2402)
			}
			if yyr2402 || yy2arr2402 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2402 || yy2arr2402 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2402 || yy2arr2402 {
				if yyq2402[2] {
					yy2406 := &x.LastHeartbeatTime
					yym2407 := z.EncBinary()
					_ = yym2407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2406) {
					} else if yym2407 {
						z.EncBinaryMarshal(yy2406)
					} else if !yym2407 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2406)
					} else {
						z.EncFallback(yy2406)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2402[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2408 := &x.LastHeartbeatTime
					yym2409 := z.EncBinary()
					_ = yym2409
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2408) {
					} else if yym2409 {
						z.EncBinaryMarshal(yy2408)
					} else if !yym2409 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2408)
					} else {
						z.EncFallback(yy2408)
					}
				}
			}
			if yyr2402 || yy2arr2402 {
				if yyq2402[3] {
					yy2411 := &x.LastTransitionTime
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2411) {
					} else if yym2412 {
						z.EncBinaryMarshal(yy2411)
					} else if !yym2412 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2411)
					} else {
						z.EncFallback(yy2411)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2402[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2413 := &x.LastTransitionTime
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2413) {
					} else if yym2414 {
						z.EncBinaryMarshal(yy2413)
					} else if !yym2414 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2413)
					} else {
						z.EncFallback(yy2413)
					}
				}
			}
			if yyr2402 || yy2arr2402 {
				if yyq2402[4] {
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2402[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2402 || yy2arr2402 {
				if yyq2402[5] {
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2402[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2402 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2421 := z.DecBinary()
	_ = yym2421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2422 := r.ReadMapStart()
			if yyl2422 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2422, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2422 := r.ReadArrayStart()
			if yyl2422 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2423Slc
	var yyhl2423 bool = l >= 0
	for yyj2423 := 0; ; yyj2423++ {
		if yyhl2423 {
			if yyj2423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2423Slc = r.DecodeBytes(yys2423Slc, true, true)
		yys2423 := string(yys2423Slc)
		switch yys2423 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2426 := &x.LastHeartbeatTime
				yym2427 := z.DecBinary()
				_ = yym2427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2426) {
				} else if yym2427 {
					z.DecBinaryUnmarshal(yyv2426)
				} else if !yym2427 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2426)
				} else {
					z.DecFallback(yyv2426, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2428 := &x.LastTransitionTime
				yym2429 := z.DecBinary()
				_ = yym2429
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2428) {
				} else if yym2429 {
					z.DecBinaryUnmarshal(yyv2428)
				} else if !yym2429 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2428)
				} else {
					z.DecFallback(yyv2428, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2423)
		} // end switch yys2423
	} // end for yyj2423
	if !yyhl2423 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2432 int
	var yyb2432 bool
	var yyhl2432 bool = l >= 0
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2435 := &x.LastHeartbeatTime
		yym2436 := z.DecBinary()
		_ = yym2436
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2435) {
		} else if yym2436 {
			z.DecBinaryUnmarshal(yyv2435)
		} else if !yym2436 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2435)
		} else {
			z.DecFallback(yyv2435, false)
		}
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2437 := &x.LastTransitionTime
		yym2438 := z.DecBinary()
		_ = yym2438
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2437) {
		} else if yym2438 {
			z.DecBinaryUnmarshal(yyv2437)
		} else if !yym2438 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2437)
		} else {
			z.DecFallback(yyv2437, false)
		}
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2432++
		if yyhl2432 {
			yyb2432 = yyj2432 > l
		} else {
			yyb2432 = r.CheckBreak()
		}
		if yyb2432 {
			break
		}
		z.DecStructFieldNotFound(yyj2432-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2441 := z.EncBinary()
	_ = yym2441
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2442 := z.DecBinary()
	_ = yym2442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [2]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2444 int = 2
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
			}
			if yyr2444 || yy2arr2444 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2444 || yy2arr2444 {
				yym2447 := z.EncBinary()
				_ = yym2447
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2448 := z.EncBinary()
				_ = yym2448
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2444 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2449 := z.DecBinary()
	_ = yym2449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2450 := r.ReadMapStart()
			if yyl2450 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2450, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2450 := r.ReadArrayStart()
			if yyl2450 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2451Slc
	var yyhl2451 bool = l >= 0
	for yyj2451 := 0; ; yyj2451++ {
		if yyhl2451 {
			if yyj2451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2451Slc = r.DecodeBytes(yys2451Slc, true, true)
		yys2451 := string(yys2451Slc)
		switch yys2451 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2451)
		} // end switch yys2451
	} // end for yyj2451
	if !yyhl2451 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2454 int
	var yyb2454 bool
	var yyhl2454 bool = l >= 0
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2454++
	if yyhl2454 {
		yyb2454 = yyj2454 > l
	} else {
		yyb2454 = r.CheckBreak()
	}
	if yyb2454 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2454++
		if yyhl2454 {
			yyb2454 = yyj2454 > l
		} else {
			yyb2454 = r.CheckBreak()
		}
		if yyb2454 {
			break
		}
		z.DecStructFieldNotFound(yyj2454-1, "")
	}
	r.ReadEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2457 := z.EncBinary()
		_ = yym2457
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2458 := !z.EncBinary()
			yy2arr2458 := z.EncBasicHandle().StructToArray
			var yyq2458 [1]bool
			_, _, _ = yysep2458, yyq2458, yy2arr2458
			const yyr2458 bool = false
			yyq2458[0] = len(x.Capacity) != 0
			if yyr2458 || yy2arr2458 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2458 int = 0
				for _, b := range yyq2458 {
					if b {
						yynn2458++
					}
				}
				r.EncodeMapStart(yynn2458)
			}
			if yyr2458 || yy2arr2458 {
				if yyq2458[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2458[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2458 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2460 := z.DecBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2461 := r.ReadMapStart()
			if yyl2461 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2461, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2461 := r.ReadArrayStart()
			if yyl2461 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2462Slc
	var yyhl2462 bool = l >= 0
	for yyj2462 := 0; ; yyj2462++ {
		if yyhl2462 {
			if yyj2462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2462Slc = r.DecodeBytes(yys2462Slc, true, true)
		yys2462 := string(yys2462Slc)
		switch yys2462 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2463 := &x.Capacity
				yyv2463.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2462)
		} // end switch yys2462
	} // end for yyj2462
	if !yyhl2462 {
		r.ReadEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2464 int
	var yyb2464 bool
	var yyhl2464 bool = l >= 0
	yyj2464++
	if yyhl2464 {
		yyb2464 = yyj2464 > l
	} else {
		yyb2464 = r.CheckBreak()
	}
	if yyb2464 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2465 := &x.Capacity
		yyv2465.CodecDecodeSelf(d)
	}
	for {
		yyj2464++
		if yyhl2464 {
			yyb2464 = yyj2464 > l
		} else {
			yyb2464 = r.CheckBreak()
		}
		if yyb2464 {
			break
		}
		z.DecStructFieldNotFound(yyj2464-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2466 := z.EncBinary()
	_ = yym2466
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2467 := z.DecBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2468 := z.EncBinary()
		_ = yym2468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2469 := z.DecBinary()
	_ = yym2469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2470 := z.EncBinary()
		_ = yym2470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2471 := !z.EncBinary()
			yy2arr2471 := z.EncBasicHandle().StructToArray
			var yyq2471 [5]bool
			_, _, _ = yysep2471, yyq2471, yy2arr2471
			const yyr2471 bool = false
			yyq2471[0] = x.Kind != ""
			yyq2471[1] = true
			yyq2471[2] = true
			yyq2471[3] = true
			yyq2471[4] = true
			if yyr2471 || yy2arr2471 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2471 int = 0
				for _, b := range yyq2471 {
					if b {
						yynn2471++
					}
				}
				r.EncodeMapStart(yynn2471)
			}
			if yyr2471 || yy2arr2471 {
				if yyq2471[0] {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2471[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2471 || yy2arr2471 {
				if yyq2471[1] {
					yy2476 := &x.APIVersion
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2476) {
					} else if !yym2477 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2476)
					} else {
						z.EncFallback(yy2476)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2471[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2478 := &x.APIVersion
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2478) {
					} else if !yym2479 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2478)
					} else {
						z.EncFallback(yy2478)
					}
				}
			}
			if yyr2471 || yy2arr2471 {
				if yyq2471[2] {
					yy2481 := &x.ObjectMeta
					yy2481.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2471[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2482 := &x.ObjectMeta
					yy2482.CodecEncodeSelf(e)
				}
			}
			if yyr2471 || yy2arr2471 {
				if yyq2471[3] {
					yy2484 := &x.Spec
					yy2484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2471[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2485 := &x.Spec
					yy2485.CodecEncodeSelf(e)
				}
			}
			if yyr2471 || yy2arr2471 {
				if yyq2471[4] {
					yy2487 := &x.Status
					yy2487.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2471[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2488 := &x.Status
					yy2488.CodecEncodeSelf(e)
				}
			}
			if yysep2471 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2489 := z.DecBinary()
	_ = yym2489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2490 := r.ReadMapStart()
			if yyl2490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2490, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2490 := r.ReadArrayStart()
			if yyl2490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2491Slc
	var yyhl2491 bool = l >= 0
	for yyj2491 := 0; ; yyj2491++ {
		if yyhl2491 {
			if yyj2491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2491Slc = r.DecodeBytes(yys2491Slc, true, true)
		yys2491 := string(yys2491Slc)
		switch yys2491 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2493 := &x.APIVersion
				yym2494 := z.DecBinary()
				_ = yym2494
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2493) {
				} else if !yym2494 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2493)
				} else {
					z.DecFallback(yyv2493, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2495 := &x.ObjectMeta
				yyv2495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2496 := &x.Spec
				yyv2496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2497 := &x.Status
				yyv2497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2491)
		} // end switch yys2491
	} // end for yyj2491
	if !yyhl2491 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2498 int
	var yyb2498 bool
	var yyhl2498 bool = l >= 0
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2500 := &x.APIVersion
		yym2501 := z.DecBinary()
		_ = yym2501
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2500) {
		} else if !yym2501 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2500)
		} else {
			z.DecFallback(yyv2500, false)
		}
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2502 := &x.ObjectMeta
		yyv2502.CodecDecodeSelf(d)
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2503 := &x.Spec
		yyv2503.CodecDecodeSelf(d)
	}
	yyj2498++
	if yyhl2498 {
		yyb2498 = yyj2498 > l
	} else {
		yyb2498 = r.CheckBreak()
	}
	if yyb2498 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2504 := &x.Status
		yyv2504.CodecDecodeSelf(d)
	}
	for {
		yyj2498++
		if yyhl2498 {
			yyb2498 = yyj2498 > l
		} else {
			yyb2498 = r.CheckBreak()
		}
		if yyb2498 {
			break
		}
		z.DecStructFieldNotFound(yyj2498-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2505 := z.EncBinary()
		_ = yym2505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2506 := !z.EncBinary()
			yy2arr2506 := z.EncBasicHandle().StructToArray
			var yyq2506 [4]bool
			_, _, _ = yysep2506, yyq2506, yy2arr2506
			const yyr2506 bool = false
			yyq2506[0] = x.Kind != ""
			yyq2506[1] = true
			yyq2506[2] = true
			if yyr2506 || yy2arr2506 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2506 int = 1
				for _, b := range yyq2506 {
					if b {
						yynn2506++
					}
				}
				r.EncodeMapStart(yynn2506)
			}
			if yyr2506 || yy2arr2506 {
				if yyq2506[0] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2506[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2506 || yy2arr2506 {
				if yyq2506[1] {
					yy2511 := &x.APIVersion
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2511) {
					} else if !yym2512 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2511)
					} else {
						z.EncFallback(yy2511)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2506[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2513 := &x.APIVersion
					yym2514 := z.EncBinary()
					_ = yym2514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2513) {
					} else if !yym2514 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2513)
					} else {
						z.EncFallback(yy2513)
					}
				}
			}
			if yyr2506 || yy2arr2506 {
				if yyq2506[2] {
					yy2516 := &x.ListMeta
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2516) {
					} else {
						z.EncFallback(yy2516)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2506[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2518 := &x.ListMeta
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2518) {
					} else {
						z.EncFallback(yy2518)
					}
				}
			}
			if yyr2506 || yy2arr2506 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2506 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2523 := z.DecBinary()
	_ = yym2523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2524 := r.ReadMapStart()
			if yyl2524 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2524, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2524 := r.ReadArrayStart()
			if yyl2524 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2525Slc
	var yyhl2525 bool = l >= 0
	for yyj2525 := 0; ; yyj2525++ {
		if yyhl2525 {
			if yyj2525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2525Slc = r.DecodeBytes(yys2525Slc, true, true)
		yys2525 := string(yys2525Slc)
		switch yys2525 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2527 := &x.APIVersion
				yym2528 := z.DecBinary()
				_ = yym2528
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2527) {
				} else if !yym2528 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2527)
				} else {
					z.DecFallback(yyv2527, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2529 := &x.ListMeta
				yym2530 := z.DecBinary()
				_ = yym2530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2529) {
				} else {
					z.DecFallback(yyv2529, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2531 := &x.Items
				yym2532 := z.DecBinary()
				_ = yym2532
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2525)
		} // end switch yys2525
	} // end for yyj2525
	if !yyhl2525 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2533 int
	var yyb2533 bool
	var yyhl2533 bool = l >= 0
	yyj2533++
	if yyhl2533 {
		yyb2533 = yyj2533 > l
	} else {
		yyb2533 = r.CheckBreak()
	}
	if yyb2533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2533++
	if yyhl2533 {
		yyb2533 = yyj2533 > l
	} else {
		yyb2533 = r.CheckBreak()
	}
	if yyb2533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2535 := &x.APIVersion
		yym2536 := z.DecBinary()
		_ = yym2536
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2535) {
		} else if !yym2536 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2535)
		} else {
			z.DecFallback(yyv2535, false)
		}
	}
	yyj2533++
	if yyhl2533 {
		yyb2533 = yyj2533 > l
	} else {
		yyb2533 = r.CheckBreak()
	}
	if yyb2533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2537 := &x.ListMeta
		yym2538 := z.DecBinary()
		_ = yym2538
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2537) {
		} else {
			z.DecFallback(yyv2537, false)
		}
	}
	yyj2533++
	if yyhl2533 {
		yyb2533 = yyj2533 > l
	} else {
		yyb2533 = r.CheckBreak()
	}
	if yyb2533 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2539 := &x.Items
		yym2540 := z.DecBinary()
		_ = yym2540
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2539), d)
		}
	}
	for {
		yyj2533++
		if yyhl2533 {
			yyb2533 = yyj2533 > l
		} else {
			yyb2533 = r.CheckBreak()
		}
		if yyb2533 {
			break
		}
		z.DecStructFieldNotFound(yyj2533-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2541 := z.EncBinary()
		_ = yym2541
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2542 := !z.EncBinary()
			yy2arr2542 := z.EncBasicHandle().StructToArray
			var yyq2542 [1]bool
			_, _, _ = yysep2542, yyq2542, yy2arr2542
			const yyr2542 bool = false
			if yyr2542 || yy2arr2542 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2542 int = 1
				for _, b := range yyq2542 {
					if b {
						yynn2542++
					}
				}
				r.EncodeMapStart(yynn2542)
			}
			if yyr2542 || yy2arr2542 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yysep2542 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2546 := z.DecBinary()
	_ = yym2546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2547 := r.ReadMapStart()
			if yyl2547 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2547, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2547 := r.ReadArrayStart()
			if yyl2547 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2547, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2548Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2548Slc
	var yyhl2548 bool = l >= 0
	for yyj2548 := 0; ; yyj2548++ {
		if yyhl2548 {
			if yyj2548 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2548Slc = r.DecodeBytes(yys2548Slc, true, true)
		yys2548 := string(yys2548Slc)
		switch yys2548 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2549 := &x.Finalizers
				yym2550 := z.DecBinary()
				_ = yym2550
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2549), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2548)
		} // end switch yys2548
	} // end for yyj2548
	if !yyhl2548 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2551 int
	var yyb2551 bool
	var yyhl2551 bool = l >= 0
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2552 := &x.Finalizers
		yym2553 := z.DecBinary()
		_ = yym2553
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2552), d)
		}
	}
	for {
		yyj2551++
		if yyhl2551 {
			yyb2551 = yyj2551 > l
		} else {
			yyb2551 = r.CheckBreak()
		}
		if yyb2551 {
			break
		}
		z.DecStructFieldNotFound(yyj2551-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2554 := z.EncBinary()
	_ = yym2554
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2555 := z.DecBinary()
	_ = yym2555
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2556 := z.EncBinary()
		_ = yym2556
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2557 := !z.EncBinary()
			yy2arr2557 := z.EncBasicHandle().StructToArray
			var yyq2557 [1]bool
			_, _, _ = yysep2557, yyq2557, yy2arr2557
			const yyr2557 bool = false
			yyq2557[0] = x.Phase != ""
			if yyr2557 || yy2arr2557 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2557 int = 0
				for _, b := range yyq2557 {
					if b {
						yynn2557++
					}
				}
				r.EncodeMapStart(yynn2557)
			}
			if yyr2557 || yy2arr2557 {
				if yyq2557[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2557[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2557 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2559 := z.DecBinary()
	_ = yym2559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2560 := r.ReadMapStart()
			if yyl2560 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2560, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2560 := r.ReadArrayStart()
			if yyl2560 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2561Slc
	var yyhl2561 bool = l >= 0
	for yyj2561 := 0; ; yyj2561++ {
		if yyhl2561 {
			if yyj2561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2561Slc = r.DecodeBytes(yys2561Slc, true, true)
		yys2561 := string(yys2561Slc)
		switch yys2561 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2561)
		} // end switch yys2561
	} // end for yyj2561
	if !yyhl2561 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2563 int
	var yyb2563 bool
	var yyhl2563 bool = l >= 0
	yyj2563++
	if yyhl2563 {
		yyb2563 = yyj2563 > l
	} else {
		yyb2563 = r.CheckBreak()
	}
	if yyb2563 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2563++
		if yyhl2563 {
			yyb2563 = yyj2563 > l
		} else {
			yyb2563 = r.CheckBreak()
		}
		if yyb2563 {
			break
		}
		z.DecStructFieldNotFound(yyj2563-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2565 := z.EncBinary()
	_ = yym2565
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2566 := z.DecBinary()
	_ = yym2566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2567 := z.EncBinary()
		_ = yym2567
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2568 := !z.EncBinary()
			yy2arr2568 := z.EncBasicHandle().StructToArray
			var yyq2568 [5]bool
			_, _, _ = yysep2568, yyq2568, yy2arr2568
			const yyr2568 bool = false
			yyq2568[0] = x.Kind != ""
			yyq2568[1] = true
			yyq2568[2] = true
			yyq2568[3] = true
			yyq2568[4] = true
			if yyr2568 || yy2arr2568 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2568 int = 0
				for _, b := range yyq2568 {
					if b {
						yynn2568++
					}
				}
				r.EncodeMapStart(yynn2568)
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[0] {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2568[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[1] {
					yy2573 := &x.APIVersion
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2573) {
					} else if !yym2574 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2573)
					} else {
						z.EncFallback(yy2573)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2575 := &x.APIVersion
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2575) {
					} else if !yym2576 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2575)
					} else {
						z.EncFallback(yy2575)
					}
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[2] {
					yy2578 := &x.ObjectMeta
					yy2578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2579 := &x.ObjectMeta
					yy2579.CodecEncodeSelf(e)
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[3] {
					yy2581 := &x.Spec
					yy2581.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2582 := &x.Spec
					yy2582.CodecEncodeSelf(e)
				}
			}
			if yyr2568 || yy2arr2568 {
				if yyq2568[4] {
					yy2584 := &x.Status
					yy2584.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2568[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2585 := &x.Status
					yy2585.CodecEncodeSelf(e)
				}
			}
			if yysep2568 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2586 := z.DecBinary()
	_ = yym2586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2587 := r.ReadMapStart()
			if yyl2587 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2587, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2587 := r.ReadArrayStart()
			if yyl2587 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2587, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2588Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2588Slc
	var yyhl2588 bool = l >= 0
	for yyj2588 := 0; ; yyj2588++ {
		if yyhl2588 {
			if yyj2588 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2588Slc = r.DecodeBytes(yys2588Slc, true, true)
		yys2588 := string(yys2588Slc)
		switch yys2588 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2590 := &x.APIVersion
				yym2591 := z.DecBinary()
				_ = yym2591
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2590) {
				} else if !yym2591 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2590)
				} else {
					z.DecFallback(yyv2590, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2592 := &x.ObjectMeta
				yyv2592.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2593 := &x.Spec
				yyv2593.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2594 := &x.Status
				yyv2594.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2588)
		} // end switch yys2588
	} // end for yyj2588
	if !yyhl2588 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2595 int
	var yyb2595 bool
	var yyhl2595 bool = l >= 0
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2597 := &x.APIVersion
		yym2598 := z.DecBinary()
		_ = yym2598
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2597) {
		} else if !yym2598 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2597)
		} else {
			z.DecFallback(yyv2597, false)
		}
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2599 := &x.ObjectMeta
		yyv2599.CodecDecodeSelf(d)
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2600 := &x.Spec
		yyv2600.CodecDecodeSelf(d)
	}
	yyj2595++
	if yyhl2595 {
		yyb2595 = yyj2595 > l
	} else {
		yyb2595 = r.CheckBreak()
	}
	if yyb2595 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2601 := &x.Status
		yyv2601.CodecDecodeSelf(d)
	}
	for {
		yyj2595++
		if yyhl2595 {
			yyb2595 = yyj2595 > l
		} else {
			yyb2595 = r.CheckBreak()
		}
		if yyb2595 {
			break
		}
		z.DecStructFieldNotFound(yyj2595-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2602 := z.EncBinary()
		_ = yym2602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2603 := !z.EncBinary()
			yy2arr2603 := z.EncBasicHandle().StructToArray
			var yyq2603 [4]bool
			_, _, _ = yysep2603, yyq2603, yy2arr2603
			const yyr2603 bool = false
			yyq2603[0] = x.Kind != ""
			yyq2603[1] = true
			yyq2603[2] = true
			if yyr2603 || yy2arr2603 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2603 int = 1
				for _, b := range yyq2603 {
					if b {
						yynn2603++
					}
				}
				r.EncodeMapStart(yynn2603)
			}
			if yyr2603 || yy2arr2603 {
				if yyq2603[0] {
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2603[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2603 || yy2arr2603 {
				if yyq2603[1] {
					yy2608 := &x.APIVersion
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2608) {
					} else if !yym2609 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2608)
					} else {
						z.EncFallback(yy2608)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2603[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2610 := &x.APIVersion
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2610) {
					} else if !yym2611 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2610)
					} else {
						z.EncFallback(yy2610)
					}
				}
			}
			if yyr2603 || yy2arr2603 {
				if yyq2603[2] {
					yy2613 := &x.ListMeta
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2613) {
					} else {
						z.EncFallback(yy2613)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2603[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2615 := &x.ListMeta
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2615) {
					} else {
						z.EncFallback(yy2615)
					}
				}
			}
			if yyr2603 || yy2arr2603 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2603 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2620 := z.DecBinary()
	_ = yym2620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2621 := r.ReadMapStart()
			if yyl2621 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2621, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2621 := r.ReadArrayStart()
			if yyl2621 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2622Slc
	var yyhl2622 bool = l >= 0
	for yyj2622 := 0; ; yyj2622++ {
		if yyhl2622 {
			if yyj2622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2622Slc = r.DecodeBytes(yys2622Slc, true, true)
		yys2622 := string(yys2622Slc)
		switch yys2622 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2624 := &x.APIVersion
				yym2625 := z.DecBinary()
				_ = yym2625
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2624) {
				} else if !yym2625 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2624)
				} else {
					z.DecFallback(yyv2624, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2626 := &x.ListMeta
				yym2627 := z.DecBinary()
				_ = yym2627
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2626) {
				} else {
					z.DecFallback(yyv2626, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2628 := &x.Items
				yym2629 := z.DecBinary()
				_ = yym2629
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2628), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2622)
		} // end switch yys2622
	} // end for yyj2622
	if !yyhl2622 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2630 int
	var yyb2630 bool
	var yyhl2630 bool = l >= 0
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2632 := &x.APIVersion
		yym2633 := z.DecBinary()
		_ = yym2633
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2632) {
		} else if !yym2633 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2632)
		} else {
			z.DecFallback(yyv2632, false)
		}
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2634 := &x.ListMeta
		yym2635 := z.DecBinary()
		_ = yym2635
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2634) {
		} else {
			z.DecFallback(yyv2634, false)
		}
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2636 := &x.Items
		yym2637 := z.DecBinary()
		_ = yym2637
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2636), d)
		}
	}
	for {
		yyj2630++
		if yyhl2630 {
			yyb2630 = yyj2630 > l
		} else {
			yyb2630 = r.CheckBreak()
		}
		if yyb2630 {
			break
		}
		z.DecStructFieldNotFound(yyj2630-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2638 := z.EncBinary()
		_ = yym2638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2639 := !z.EncBinary()
			yy2arr2639 := z.EncBasicHandle().StructToArray
			var yyq2639 [4]bool
			_, _, _ = yysep2639, yyq2639, yy2arr2639
			const yyr2639 bool = false
			yyq2639[0] = x.Kind != ""
			yyq2639[1] = true
			yyq2639[2] = true
			if yyr2639 || yy2arr2639 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2639 int = 1
				for _, b := range yyq2639 {
					if b {
						yynn2639++
					}
				}
				r.EncodeMapStart(yynn2639)
			}
			if yyr2639 || yy2arr2639 {
				if yyq2639[0] {
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2639[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2639 || yy2arr2639 {
				if yyq2639[1] {
					yy2644 := &x.APIVersion
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2644) {
					} else if !yym2645 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2644)
					} else {
						z.EncFallback(yy2644)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2639[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2646 := &x.APIVersion
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2646) {
					} else if !yym2647 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2646)
					} else {
						z.EncFallback(yy2646)
					}
				}
			}
			if yyr2639 || yy2arr2639 {
				if yyq2639[2] {
					yy2649 := &x.ObjectMeta
					yy2649.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2639[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2650 := &x.ObjectMeta
					yy2650.CodecEncodeSelf(e)
				}
			}
			if yyr2639 || yy2arr2639 {
				yy2652 := &x.Target
				yy2652.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2653 := &x.Target
				yy2653.CodecEncodeSelf(e)
			}
			if yysep2639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2654 := z.DecBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2655 := r.ReadMapStart()
			if yyl2655 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2655, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2655 := r.ReadArrayStart()
			if yyl2655 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2656Slc
	var yyhl2656 bool = l >= 0
	for yyj2656 := 0; ; yyj2656++ {
		if yyhl2656 {
			if yyj2656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2656Slc = r.DecodeBytes(yys2656Slc, true, true)
		yys2656 := string(yys2656Slc)
		switch yys2656 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2658 := &x.APIVersion
				yym2659 := z.DecBinary()
				_ = yym2659
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2658) {
				} else if !yym2659 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2658)
				} else {
					z.DecFallback(yyv2658, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2660 := &x.ObjectMeta
				yyv2660.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2661 := &x.Target
				yyv2661.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2656)
		} // end switch yys2656
	} // end for yyj2656
	if !yyhl2656 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2662 int
	var yyb2662 bool
	var yyhl2662 bool = l >= 0
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2664 := &x.APIVersion
		yym2665 := z.DecBinary()
		_ = yym2665
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2664) {
		} else if !yym2665 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2664)
		} else {
			z.DecFallback(yyv2664, false)
		}
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2666 := &x.ObjectMeta
		yyv2666.CodecDecodeSelf(d)
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2667 := &x.Target
		yyv2667.CodecDecodeSelf(d)
	}
	for {
		yyj2662++
		if yyhl2662 {
			yyb2662 = yyj2662 > l
		} else {
			yyb2662 = r.CheckBreak()
		}
		if yyb2662 {
			break
		}
		z.DecStructFieldNotFound(yyj2662-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2668 := z.EncBinary()
		_ = yym2668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2669 := !z.EncBinary()
			yy2arr2669 := z.EncBasicHandle().StructToArray
			var yyq2669 [3]bool
			_, _, _ = yysep2669, yyq2669, yy2arr2669
			const yyr2669 bool = false
			yyq2669[0] = x.Kind != ""
			yyq2669[1] = true
			if yyr2669 || yy2arr2669 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2669 int = 1
				for _, b := range yyq2669 {
					if b {
						yynn2669++
					}
				}
				r.EncodeMapStart(yynn2669)
			}
			if yyr2669 || yy2arr2669 {
				if yyq2669[0] {
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2669[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				if yyq2669[1] {
					yy2674 := &x.APIVersion
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2674) {
					} else if !yym2675 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2674)
					} else {
						z.EncFallback(yy2674)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2676 := &x.APIVersion
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2676) {
					} else if !yym2677 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2676)
					} else {
						z.EncFallback(yy2676)
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2679 := *x.GracePeriodSeconds
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeInt(int64(yy2679))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2681 := *x.GracePeriodSeconds
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeInt(int64(yy2681))
					}
				}
			}
			if yysep2669 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		switch yys2685 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2687 := &x.APIVersion
				yym2688 := z.DecBinary()
				_ = yym2688
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2687) {
				} else if !yym2688 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2687)
				} else {
					z.DecFallback(yyv2687, false)
				}
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2690 := z.DecBinary()
				_ = yym2690
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	if !yyhl2685 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2691 int
	var yyb2691 bool
	var yyhl2691 bool = l >= 0
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2693 := &x.APIVersion
		yym2694 := z.DecBinary()
		_ = yym2694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2693) {
		} else if !yym2694 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2693)
		} else {
			z.DecFallback(yyv2693, false)
		}
	}
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2696 := z.DecBinary()
		_ = yym2696
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2691++
		if yyhl2691 {
			yyb2691 = yyj2691 > l
		} else {
			yyb2691 = r.CheckBreak()
		}
		if yyb2691 {
			break
		}
		z.DecStructFieldNotFound(yyj2691-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2697 := z.EncBinary()
		_ = yym2697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2698 := !z.EncBinary()
			yy2arr2698 := z.EncBasicHandle().StructToArray
			var yyq2698 [7]bool
			_, _, _ = yysep2698, yyq2698, yy2arr2698
			const yyr2698 bool = false
			yyq2698[0] = x.Kind != ""
			yyq2698[1] = true
			if yyr2698 || yy2arr2698 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2698 int = 5
				for _, b := range yyq2698 {
					if b {
						yynn2698++
					}
				}
				r.EncodeMapStart(yynn2698)
			}
			if yyr2698 || yy2arr2698 {
				if yyq2698[0] {
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2698[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2698 || yy2arr2698 {
				if yyq2698[1] {
					yy2703 := &x.APIVersion
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2703) {
					} else if !yym2704 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2703)
					} else {
						z.EncFallback(yy2703)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2698[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2705 := &x.APIVersion
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2705) {
					} else if !yym2706 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2705)
					} else {
						z.EncFallback(yy2705)
					}
				}
			}
			if yyr2698 || yy2arr2698 {
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2698 || yy2arr2698 {
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2698 || yy2arr2698 {
				yym2714 := z.EncBinary()
				_ = yym2714
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				yym2715 := z.EncBinary()
				_ = yym2715
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2698 || yy2arr2698 {
				yym2717 := z.EncBinary()
				_ = yym2717
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				yym2718 := z.EncBinary()
				_ = yym2718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2698 || yy2arr2698 {
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2720 := *x.TimeoutSeconds
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeInt(int64(yy2720))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2722 := *x.TimeoutSeconds
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeInt(int64(yy2722))
					}
				}
			}
			if yysep2698 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2724 := z.DecBinary()
	_ = yym2724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2725 := r.ReadMapStart()
			if yyl2725 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2725, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2725 := r.ReadArrayStart()
			if yyl2725 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2726Slc
	var yyhl2726 bool = l >= 0
	for yyj2726 := 0; ; yyj2726++ {
		if yyhl2726 {
			if yyj2726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2726Slc = r.DecodeBytes(yys2726Slc, true, true)
		yys2726 := string(yys2726Slc)
		switch yys2726 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2728 := &x.APIVersion
				yym2729 := z.DecBinary()
				_ = yym2729
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2728) {
				} else if !yym2729 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2728)
				} else {
					z.DecFallback(yyv2728, false)
				}
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2730 := &x.LabelSelector
				yym2731 := z.DecBinary()
				_ = yym2731
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2730) {
				} else {
					z.DecFallback(yyv2730, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2732 := &x.FieldSelector
				yym2733 := z.DecBinary()
				_ = yym2733
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2732) {
				} else {
					z.DecFallback(yyv2732, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2737 := z.DecBinary()
				_ = yym2737
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2726)
		} // end switch yys2726
	} // end for yyj2726
	if !yyhl2726 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2738 int
	var yyb2738 bool
	var yyhl2738 bool = l >= 0
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2740 := &x.APIVersion
		yym2741 := z.DecBinary()
		_ = yym2741
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2740) {
		} else if !yym2741 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2740)
		} else {
			z.DecFallback(yyv2740, false)
		}
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2742 := &x.LabelSelector
		yym2743 := z.DecBinary()
		_ = yym2743
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2742) {
		} else {
			z.DecFallback(yyv2742, true)
		}
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2744 := &x.FieldSelector
		yym2745 := z.DecBinary()
		_ = yym2745
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2744) {
		} else {
			z.DecFallback(yyv2744, true)
		}
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2749 := z.DecBinary()
		_ = yym2749
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2738++
		if yyhl2738 {
			yyb2738 = yyj2738 > l
		} else {
			yyb2738 = r.CheckBreak()
		}
		if yyb2738 {
			break
		}
		z.DecStructFieldNotFound(yyj2738-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2750 := z.EncBinary()
		_ = yym2750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2751 := !z.EncBinary()
			yy2arr2751 := z.EncBasicHandle().StructToArray
			var yyq2751 [10]bool
			_, _, _ = yysep2751, yyq2751, yy2arr2751
			const yyr2751 bool = false
			yyq2751[0] = x.Kind != ""
			yyq2751[1] = true
			if yyr2751 || yy2arr2751 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2751 int = 8
				for _, b := range yyq2751 {
					if b {
						yynn2751++
					}
				}
				r.EncodeMapStart(yynn2751)
			}
			if yyr2751 || yy2arr2751 {
				if yyq2751[0] {
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2751[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2751 || yy2arr2751 {
				if yyq2751[1] {
					yy2756 := &x.APIVersion
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2756) {
					} else if !yym2757 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2756)
					} else {
						z.EncFallback(yy2756)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2751[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2758 := &x.APIVersion
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2758) {
					} else if !yym2759 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2758)
					} else {
						z.EncFallback(yy2758)
					}
				}
			}
			if yyr2751 || yy2arr2751 {
				yym2761 := z.EncBinary()
				_ = yym2761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2762 := z.EncBinary()
				_ = yym2762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2751 || yy2arr2751 {
				yym2764 := z.EncBinary()
				_ = yym2764
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				yym2765 := z.EncBinary()
				_ = yym2765
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2751 || yy2arr2751 {
				yym2767 := z.EncBinary()
				_ = yym2767
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				yym2768 := z.EncBinary()
				_ = yym2768
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2751 || yy2arr2751 {
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2770 := *x.SinceSeconds
					yym2771 := z.EncBinary()
					_ = yym2771
					if false {
					} else {
						r.EncodeInt(int64(yy2770))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2772 := *x.SinceSeconds
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeInt(int64(yy2772))
					}
				}
			}
			if yyr2751 || yy2arr2751 {
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2775 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2775 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2776 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2776 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2751 || yy2arr2751 {
				yym2778 := z.EncBinary()
				_ = yym2778
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				yym2779 := z.EncBinary()
				_ = yym2779
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2751 || yy2arr2751 {
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2781 := *x.TailLines
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeInt(int64(yy2781))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2783 := *x.TailLines
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeInt(int64(yy2783))
					}
				}
			}
			if yyr2751 || yy2arr2751 {
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2786 := *x.LimitBytes
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeInt(int64(yy2786))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2788 := *x.LimitBytes
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeInt(int64(yy2788))
					}
				}
			}
			if yysep2751 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2790 := z.DecBinary()
	_ = yym2790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2791 := r.ReadMapStart()
			if yyl2791 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2791, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2791 := r.ReadArrayStart()
			if yyl2791 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2792Slc
	var yyhl2792 bool = l >= 0
	for yyj2792 := 0; ; yyj2792++ {
		if yyhl2792 {
			if yyj2792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2792Slc = r.DecodeBytes(yys2792Slc, true, true)
		yys2792 := string(yys2792Slc)
		switch yys2792 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2794 := &x.APIVersion
				yym2795 := z.DecBinary()
				_ = yym2795
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2794) {
				} else if !yym2795 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2794)
				} else {
					z.DecFallback(yyv2794, false)
				}
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2800 := z.DecBinary()
				_ = yym2800
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2802 := z.DecBinary()
				_ = yym2802
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2802 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2802 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2805 := z.DecBinary()
				_ = yym2805
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2807 := z.DecBinary()
				_ = yym2807
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2792)
		} // end switch yys2792
	} // end for yyj2792
	if !yyhl2792 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2808 int
	var yyb2808 bool
	var yyhl2808 bool = l >= 0
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2810 := &x.APIVersion
		yym2811 := z.DecBinary()
		_ = yym2811
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2810) {
		} else if !yym2811 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2810)
		} else {
			z.DecFallback(yyv2810, false)
		}
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2816 := z.DecBinary()
		_ = yym2816
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2818 := z.DecBinary()
		_ = yym2818
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2818 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2818 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2821 := z.DecBinary()
		_ = yym2821
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2823 := z.DecBinary()
		_ = yym2823
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2808++
		if yyhl2808 {
			yyb2808 = yyj2808 > l
		} else {
			yyb2808 = r.CheckBreak()
		}
		if yyb2808 {
			break
		}
		z.DecStructFieldNotFound(yyj2808-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2824 := z.EncBinary()
		_ = yym2824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2825 := !z.EncBinary()
			yy2arr2825 := z.EncBasicHandle().StructToArray
			var yyq2825 [7]bool
			_, _, _ = yysep2825, yyq2825, yy2arr2825
			const yyr2825 bool = false
			yyq2825[0] = x.Kind != ""
			yyq2825[1] = true
			yyq2825[2] = x.Stdin != false
			yyq2825[3] = x.Stdout != false
			yyq2825[4] = x.Stderr != false
			yyq2825[5] = x.TTY != false
			yyq2825[6] = x.Container != ""
			if yyr2825 || yy2arr2825 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2825 int = 0
				for _, b := range yyq2825 {
					if b {
						yynn2825++
					}
				}
				r.EncodeMapStart(yynn2825)
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[0] {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[1] {
					yy2830 := &x.APIVersion
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2830) {
					} else if !yym2831 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2830)
					} else {
						z.EncFallback(yy2830)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2825[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2832 := &x.APIVersion
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2832) {
					} else if !yym2833 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2832)
					} else {
						z.EncFallback(yy2832)
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[2] {
					yym2835 := z.EncBinary()
					_ = yym2835
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2825[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[3] {
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2825[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[4] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2825[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[5] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2825[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[6] {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2825 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2849 := z.DecBinary()
	_ = yym2849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2850 := r.ReadMapStart()
			if yyl2850 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2850, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2850 := r.ReadArrayStart()
			if yyl2850 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2851Slc
	var yyhl2851 bool = l >= 0
	for yyj2851 := 0; ; yyj2851++ {
		if yyhl2851 {
			if yyj2851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2851Slc = r.DecodeBytes(yys2851Slc, true, true)
		yys2851 := string(yys2851Slc)
		switch yys2851 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2853 := &x.APIVersion
				yym2854 := z.DecBinary()
				_ = yym2854
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2853) {
				} else if !yym2854 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2853)
				} else {
					z.DecFallback(yyv2853, false)
				}
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2851)
		} // end switch yys2851
	} // end for yyj2851
	if !yyhl2851 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2860 int
	var yyb2860 bool
	var yyhl2860 bool = l >= 0
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2862 := &x.APIVersion
		yym2863 := z.DecBinary()
		_ = yym2863
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2862) {
		} else if !yym2863 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2862)
		} else {
			z.DecFallback(yyv2862, false)
		}
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2860++
	if yyhl2860 {
		yyb2860 = yyj2860 > l
	} else {
		yyb2860 = r.CheckBreak()
	}
	if yyb2860 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2860++
		if yyhl2860 {
			yyb2860 = yyj2860 > l
		} else {
			yyb2860 = r.CheckBreak()
		}
		if yyb2860 {
			break
		}
		z.DecStructFieldNotFound(yyj2860-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2869 := z.EncBinary()
		_ = yym2869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2870 := !z.EncBinary()
			yy2arr2870 := z.EncBasicHandle().StructToArray
			var yyq2870 [8]bool
			_, _, _ = yysep2870, yyq2870, yy2arr2870
			const yyr2870 bool = false
			yyq2870[0] = x.Kind != ""
			yyq2870[1] = true
			if yyr2870 || yy2arr2870 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2870 int = 6
				for _, b := range yyq2870 {
					if b {
						yynn2870++
					}
				}
				r.EncodeMapStart(yynn2870)
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[0] {
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				if yyq2870[1] {
					yy2875 := &x.APIVersion
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2875) {
					} else if !yym2876 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2875)
					} else {
						z.EncFallback(yy2875)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2877 := &x.APIVersion
					yym2878 := z.EncBinary()
					_ = yym2878
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2877) {
					} else if !yym2878 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2877)
					} else {
						z.EncFallback(yy2877)
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				yym2880 := z.EncBinary()
				_ = yym2880
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				yym2881 := z.EncBinary()
				_ = yym2881
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2870 || yy2arr2870 {
				yym2883 := z.EncBinary()
				_ = yym2883
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				yym2884 := z.EncBinary()
				_ = yym2884
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2870 || yy2arr2870 {
				yym2886 := z.EncBinary()
				_ = yym2886
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				yym2887 := z.EncBinary()
				_ = yym2887
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2870 || yy2arr2870 {
				yym2889 := z.EncBinary()
				_ = yym2889
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				yym2890 := z.EncBinary()
				_ = yym2890
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2870 || yy2arr2870 {
				yym2892 := z.EncBinary()
				_ = yym2892
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2893 := z.EncBinary()
				_ = yym2893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2870 || yy2arr2870 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2870 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2897 := z.DecBinary()
	_ = yym2897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2898 := r.ReadMapStart()
			if yyl2898 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2898, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2898 := r.ReadArrayStart()
			if yyl2898 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2899Slc
	var yyhl2899 bool = l >= 0
	for yyj2899 := 0; ; yyj2899++ {
		if yyhl2899 {
			if yyj2899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2899Slc = r.DecodeBytes(yys2899Slc, true, true)
		yys2899 := string(yys2899Slc)
		switch yys2899 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2901 := &x.APIVersion
				yym2902 := z.DecBinary()
				_ = yym2902
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2901) {
				} else if !yym2902 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2901)
				} else {
					z.DecFallback(yyv2901, false)
				}
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2908 := &x.Command
				yym2909 := z.DecBinary()
				_ = yym2909
				if false {
				} else {
					z.F.DecSliceStringX(yyv2908, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2899)
		} // end switch yys2899
	} // end for yyj2899
	if !yyhl2899 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2910 int
	var yyb2910 bool
	var yyhl2910 bool = l >= 0
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2912 := &x.APIVersion
		yym2913 := z.DecBinary()
		_ = yym2913
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2912) {
		} else if !yym2913 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2912)
		} else {
			z.DecFallback(yyv2912, false)
		}
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2919 := &x.Command
		yym2920 := z.DecBinary()
		_ = yym2920
		if false {
		} else {
			z.F.DecSliceStringX(yyv2919, false, d)
		}
	}
	for {
		yyj2910++
		if yyhl2910 {
			yyb2910 = yyj2910 > l
		} else {
			yyb2910 = r.CheckBreak()
		}
		if yyb2910 {
			break
		}
		z.DecStructFieldNotFound(yyj2910-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2921 := z.EncBinary()
		_ = yym2921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2922 := !z.EncBinary()
			yy2arr2922 := z.EncBasicHandle().StructToArray
			var yyq2922 [3]bool
			_, _, _ = yysep2922, yyq2922, yy2arr2922
			const yyr2922 bool = false
			yyq2922[0] = x.Kind != ""
			yyq2922[1] = true
			if yyr2922 || yy2arr2922 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2922 int = 1
				for _, b := range yyq2922 {
					if b {
						yynn2922++
					}
				}
				r.EncodeMapStart(yynn2922)
			}
			if yyr2922 || yy2arr2922 {
				if yyq2922[0] {
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2922[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				if yyq2922[1] {
					yy2927 := &x.APIVersion
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2927) {
					} else if !yym2928 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2927)
					} else {
						z.EncFallback(yy2927)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2922[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy2929 := &x.APIVersion
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2929) {
					} else if !yym2930 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2929)
					} else {
						z.EncFallback(yy2929)
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				yym2932 := z.EncBinary()
				_ = yym2932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep2922 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2934 := z.DecBinary()
	_ = yym2934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2935 := r.ReadMapStart()
			if yyl2935 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2935, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2935 := r.ReadArrayStart()
			if yyl2935 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2936Slc
	var yyhl2936 bool = l >= 0
	for yyj2936 := 0; ; yyj2936++ {
		if yyhl2936 {
			if yyj2936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2936Slc = r.DecodeBytes(yys2936Slc, true, true)
		yys2936 := string(yys2936Slc)
		switch yys2936 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv2938 := &x.APIVersion
				yym2939 := z.DecBinary()
				_ = yym2939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2938) {
				} else if !yym2939 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2938)
				} else {
					z.DecFallback(yyv2938, false)
				}
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2936)
		} // end switch yys2936
	} // end for yyj2936
	if !yyhl2936 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2941 int
	var yyb2941 bool
	var yyhl2941 bool = l >= 0
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv2943 := &x.APIVersion
		yym2944 := z.DecBinary()
		_ = yym2944
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2943) {
		} else if !yym2944 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2943)
		} else {
			z.DecFallback(yyv2943, false)
		}
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2941++
		if yyhl2941 {
			yyb2941 = yyj2941 > l
		} else {
			yyb2941 = r.CheckBreak()
		}
		if yyb2941 {
			break
		}
		z.DecStructFieldNotFound(yyj2941-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2946 := z.EncBinary()
		_ = yym2946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2947 := !z.EncBinary()
			yy2arr2947 := z.EncBasicHandle().StructToArray
			var yyq2947 [7]bool
			_, _, _ = yysep2947, yyq2947, yy2arr2947
			const yyr2947 bool = false
			yyq2947[0] = x.Kind != ""
			yyq2947[1] = x.Namespace != ""
			yyq2947[2] = x.Name != ""
			yyq2947[3] = x.UID != ""
			yyq2947[4] = x.APIVersion != ""
			yyq2947[5] = x.ResourceVersion != ""
			yyq2947[6] = x.FieldPath != ""
			if yyr2947 || yy2arr2947 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2947 int = 0
				for _, b := range yyq2947 {
					if b {
						yynn2947++
					}
				}
				r.EncodeMapStart(yynn2947)
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[0] {
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2950 := z.EncBinary()
					_ = yym2950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[1] {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[2] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[3] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[4] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[5] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2947 || yy2arr2947 {
				if yyq2947[6] {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2947[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2947 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2969 := z.DecBinary()
	_ = yym2969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2970 := r.ReadMapStart()
			if yyl2970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2970, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2970 := r.ReadArrayStart()
			if yyl2970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2971Slc
	var yyhl2971 bool = l >= 0
	for yyj2971 := 0; ; yyj2971++ {
		if yyhl2971 {
			if yyj2971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2971Slc = r.DecodeBytes(yys2971Slc, true, true)
		yys2971 := string(yys2971Slc)
		switch yys2971 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2971)
		} // end switch yys2971
	} // end for yyj2971
	if !yyhl2971 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2979 int
	var yyb2979 bool
	var yyhl2979 bool = l >= 0
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2979++
	if yyhl2979 {
		yyb2979 = yyj2979 > l
	} else {
		yyb2979 = r.CheckBreak()
	}
	if yyb2979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2979++
		if yyhl2979 {
			yyb2979 = yyj2979 > l
		} else {
			yyb2979 = r.CheckBreak()
		}
		if yyb2979 {
			break
		}
		z.DecStructFieldNotFound(yyj2979-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2987 := z.EncBinary()
		_ = yym2987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2988 := !z.EncBinary()
			yy2arr2988 := z.EncBasicHandle().StructToArray
			var yyq2988 [1]bool
			_, _, _ = yysep2988, yyq2988, yy2arr2988
			const yyr2988 bool = false
			if yyr2988 || yy2arr2988 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2988 int = 1
				for _, b := range yyq2988 {
					if b {
						yynn2988++
					}
				}
				r.EncodeMapStart(yynn2988)
			}
			if yyr2988 || yy2arr2988 {
				yym2990 := z.EncBinary()
				_ = yym2990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2991 := z.EncBinary()
				_ = yym2991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep2988 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2992 := z.DecBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2993 := r.ReadMapStart()
			if yyl2993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2993, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2993 := r.ReadArrayStart()
			if yyl2993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2994Slc
	var yyhl2994 bool = l >= 0
	for yyj2994 := 0; ; yyj2994++ {
		if yyhl2994 {
			if yyj2994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2994Slc = r.DecodeBytes(yys2994Slc, true, true)
		yys2994 := string(yys2994Slc)
		switch yys2994 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2994)
		} // end switch yys2994
	} // end for yyj2994
	if !yyhl2994 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2996 int
	var yyb2996 bool
	var yyhl2996 bool = l >= 0
	yyj2996++
	if yyhl2996 {
		yyb2996 = yyj2996 > l
	} else {
		yyb2996 = r.CheckBreak()
	}
	if yyb2996 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2996++
		if yyhl2996 {
			yyb2996 = yyj2996 > l
		} else {
			yyb2996 = r.CheckBreak()
		}
		if yyb2996 {
			break
		}
		z.DecStructFieldNotFound(yyj2996-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2998 := z.EncBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2999 := !z.EncBinary()
			yy2arr2999 := z.EncBasicHandle().StructToArray
			var yyq2999 [3]bool
			_, _, _ = yysep2999, yyq2999, yy2arr2999
			const yyr2999 bool = false
			yyq2999[0] = x.Kind != ""
			yyq2999[1] = true
			yyq2999[2] = true
			if yyr2999 || yy2arr2999 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2999 int = 0
				for _, b := range yyq2999 {
					if b {
						yynn2999++
					}
				}
				r.EncodeMapStart(yynn2999)
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[0] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[1] {
					yy3004 := &x.APIVersion
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3004) {
					} else if !yym3005 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3004)
					} else {
						z.EncFallback(yy3004)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3006 := &x.APIVersion
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3006) {
					} else if !yym3007 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3006)
					} else {
						z.EncFallback(yy3006)
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[2] {
					yy3009 := &x.Reference
					yy3009.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy3010 := &x.Reference
					yy3010.CodecEncodeSelf(e)
				}
			}
			if yysep2999 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3011 := z.DecBinary()
	_ = yym3011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3012 := r.ReadMapStart()
			if yyl3012 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3012, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3012 := r.ReadArrayStart()
			if yyl3012 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3013Slc
	var yyhl3013 bool = l >= 0
	for yyj3013 := 0; ; yyj3013++ {
		if yyhl3013 {
			if yyj3013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3013Slc = r.DecodeBytes(yys3013Slc, true, true)
		yys3013 := string(yys3013Slc)
		switch yys3013 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3015 := &x.APIVersion
				yym3016 := z.DecBinary()
				_ = yym3016
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3015) {
				} else if !yym3016 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3015)
				} else {
					z.DecFallback(yyv3015, false)
				}
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3017 := &x.Reference
				yyv3017.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3013)
		} // end switch yys3013
	} // end for yyj3013
	if !yyhl3013 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3018 int
	var yyb3018 bool
	var yyhl3018 bool = l >= 0
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3020 := &x.APIVersion
		yym3021 := z.DecBinary()
		_ = yym3021
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3020) {
		} else if !yym3021 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3020)
		} else {
			z.DecFallback(yyv3020, false)
		}
	}
	yyj3018++
	if yyhl3018 {
		yyb3018 = yyj3018 > l
	} else {
		yyb3018 = r.CheckBreak()
	}
	if yyb3018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3022 := &x.Reference
		yyv3022.CodecDecodeSelf(d)
	}
	for {
		yyj3018++
		if yyhl3018 {
			yyb3018 = yyj3018 > l
		} else {
			yyb3018 = r.CheckBreak()
		}
		if yyb3018 {
			break
		}
		z.DecStructFieldNotFound(yyj3018-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3023 := z.EncBinary()
		_ = yym3023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3024 := !z.EncBinary()
			yy2arr3024 := z.EncBasicHandle().StructToArray
			var yyq3024 [2]bool
			_, _, _ = yysep3024, yyq3024, yy2arr3024
			const yyr3024 bool = false
			yyq3024[0] = x.Component != ""
			yyq3024[1] = x.Host != ""
			if yyr3024 || yy2arr3024 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3024 int = 0
				for _, b := range yyq3024 {
					if b {
						yynn3024++
					}
				}
				r.EncodeMapStart(yynn3024)
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[0] {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3024[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[1] {
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3024[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep3024 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3031 := z.DecBinary()
	_ = yym3031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3032 := r.ReadMapStart()
			if yyl3032 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3032, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3032 := r.ReadArrayStart()
			if yyl3032 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3033Slc
	var yyhl3033 bool = l >= 0
	for yyj3033 := 0; ; yyj3033++ {
		if yyhl3033 {
			if yyj3033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3033Slc = r.DecodeBytes(yys3033Slc, true, true)
		yys3033 := string(yys3033Slc)
		switch yys3033 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3033)
		} // end switch yys3033
	} // end for yyj3033
	if !yyhl3033 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3036 int
	var yyb3036 bool
	var yyhl3036 bool = l >= 0
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3036++
		if yyhl3036 {
			yyb3036 = yyj3036 > l
		} else {
			yyb3036 = r.CheckBreak()
		}
		if yyb3036 {
			break
		}
		z.DecStructFieldNotFound(yyj3036-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3039 := z.EncBinary()
		_ = yym3039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3040 := !z.EncBinary()
			yy2arr3040 := z.EncBasicHandle().StructToArray
			var yyq3040 [10]bool
			_, _, _ = yysep3040, yyq3040, yy2arr3040
			const yyr3040 bool = false
			yyq3040[0] = x.Kind != ""
			yyq3040[1] = true
			yyq3040[2] = true
			yyq3040[3] = true
			yyq3040[4] = x.Reason != ""
			yyq3040[5] = x.Message != ""
			yyq3040[6] = true
			yyq3040[7] = true
			yyq3040[8] = true
			yyq3040[9] = x.Count != 0
			if yyr3040 || yy2arr3040 {
				r.EncodeArrayStart(10)
			} else {
				var yynn3040 int = 0
				for _, b := range yyq3040 {
					if b {
						yynn3040++
					}
				}
				r.EncodeMapStart(yynn3040)
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[0] {
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3040[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[1] {
					yy3045 := &x.APIVersion
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3045) {
					} else if !yym3046 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3045)
					} else {
						z.EncFallback(yy3045)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3047 := &x.APIVersion
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3047) {
					} else if !yym3048 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3047)
					} else {
						z.EncFallback(yy3047)
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[2] {
					yy3050 := &x.ObjectMeta
					yy3050.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3051 := &x.ObjectMeta
					yy3051.CodecEncodeSelf(e)
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[3] {
					yy3053 := &x.InvolvedObject
					yy3053.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[3] {
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					yy3054 := &x.InvolvedObject
					yy3054.CodecEncodeSelf(e)
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[4] {
					yym3056 := z.EncBinary()
					_ = yym3056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3040[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[5] {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3040[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[6] {
					yy3062 := &x.Source
					yy3062.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy3063 := &x.Source
					yy3063.CodecEncodeSelf(e)
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[7] {
					yy3065 := &x.FirstTimestamp
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3065) {
					} else if yym3066 {
						z.EncBinaryMarshal(yy3065)
					} else if !yym3066 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3065)
					} else {
						z.EncFallback(yy3065)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy3067 := &x.FirstTimestamp
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3067) {
					} else if yym3068 {
						z.EncBinaryMarshal(yy3067)
					} else if !yym3068 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3067)
					} else {
						z.EncFallback(yy3067)
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[8] {
					yy3070 := &x.LastTimestamp
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3070) {
					} else if yym3071 {
						z.EncBinaryMarshal(yy3070)
					} else if !yym3071 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3070)
					} else {
						z.EncFallback(yy3070)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3040[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy3072 := &x.LastTimestamp
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3072) {
					} else if yym3073 {
						z.EncBinaryMarshal(yy3072)
					} else if !yym3073 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3072)
					} else {
						z.EncFallback(yy3072)
					}
				}
			}
			if yyr3040 || yy2arr3040 {
				if yyq3040[9] {
					yym3075 := z.EncBinary()
					_ = yym3075
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3040[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep3040 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3077 := z.DecBinary()
	_ = yym3077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3078 := r.ReadMapStart()
			if yyl3078 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3078, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3078 := r.ReadArrayStart()
			if yyl3078 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3079Slc
	var yyhl3079 bool = l >= 0
	for yyj3079 := 0; ; yyj3079++ {
		if yyhl3079 {
			if yyj3079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3079Slc = r.DecodeBytes(yys3079Slc, true, true)
		yys3079 := string(yys3079Slc)
		switch yys3079 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3081 := &x.APIVersion
				yym3082 := z.DecBinary()
				_ = yym3082
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3081) {
				} else if !yym3082 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3081)
				} else {
					z.DecFallback(yyv3081, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3083 := &x.ObjectMeta
				yyv3083.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3084 := &x.InvolvedObject
				yyv3084.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3087 := &x.Source
				yyv3087.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3088 := &x.FirstTimestamp
				yym3089 := z.DecBinary()
				_ = yym3089
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3088) {
				} else if yym3089 {
					z.DecBinaryUnmarshal(yyv3088)
				} else if !yym3089 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3088)
				} else {
					z.DecFallback(yyv3088, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3090 := &x.LastTimestamp
				yym3091 := z.DecBinary()
				_ = yym3091
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3090) {
				} else if yym3091 {
					z.DecBinaryUnmarshal(yyv3090)
				} else if !yym3091 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3090)
				} else {
					z.DecFallback(yyv3090, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3079)
		} // end switch yys3079
	} // end for yyj3079
	if !yyhl3079 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3093 int
	var yyb3093 bool
	var yyhl3093 bool = l >= 0
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3095 := &x.APIVersion
		yym3096 := z.DecBinary()
		_ = yym3096
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3095) {
		} else if !yym3096 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3095)
		} else {
			z.DecFallback(yyv3095, false)
		}
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3097 := &x.ObjectMeta
		yyv3097.CodecDecodeSelf(d)
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3098 := &x.InvolvedObject
		yyv3098.CodecDecodeSelf(d)
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3101 := &x.Source
		yyv3101.CodecDecodeSelf(d)
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3102 := &x.FirstTimestamp
		yym3103 := z.DecBinary()
		_ = yym3103
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3102) {
		} else if yym3103 {
			z.DecBinaryUnmarshal(yyv3102)
		} else if !yym3103 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3102)
		} else {
			z.DecFallback(yyv3102, false)
		}
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3104 := &x.LastTimestamp
		yym3105 := z.DecBinary()
		_ = yym3105
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3104) {
		} else if yym3105 {
			z.DecBinaryUnmarshal(yyv3104)
		} else if !yym3105 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3104)
		} else {
			z.DecFallback(yyv3104, false)
		}
	}
	yyj3093++
	if yyhl3093 {
		yyb3093 = yyj3093 > l
	} else {
		yyb3093 = r.CheckBreak()
	}
	if yyb3093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj3093++
		if yyhl3093 {
			yyb3093 = yyj3093 > l
		} else {
			yyb3093 = r.CheckBreak()
		}
		if yyb3093 {
			break
		}
		z.DecStructFieldNotFound(yyj3093-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3107 := z.EncBinary()
		_ = yym3107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3108 := !z.EncBinary()
			yy2arr3108 := z.EncBasicHandle().StructToArray
			var yyq3108 [4]bool
			_, _, _ = yysep3108, yyq3108, yy2arr3108
			const yyr3108 bool = false
			yyq3108[0] = x.Kind != ""
			yyq3108[1] = true
			yyq3108[2] = true
			if yyr3108 || yy2arr3108 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3108 int = 1
				for _, b := range yyq3108 {
					if b {
						yynn3108++
					}
				}
				r.EncodeMapStart(yynn3108)
			}
			if yyr3108 || yy2arr3108 {
				if yyq3108[0] {
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3108[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3108 || yy2arr3108 {
				if yyq3108[1] {
					yy3113 := &x.APIVersion
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3113) {
					} else if !yym3114 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3113)
					} else {
						z.EncFallback(yy3113)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3108[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3115 := &x.APIVersion
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3115) {
					} else if !yym3116 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3115)
					} else {
						z.EncFallback(yy3115)
					}
				}
			}
			if yyr3108 || yy2arr3108 {
				if yyq3108[2] {
					yy3118 := &x.ListMeta
					yym3119 := z.EncBinary()
					_ = yym3119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3118) {
					} else {
						z.EncFallback(yy3118)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3108[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3120 := &x.ListMeta
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3120) {
					} else {
						z.EncFallback(yy3120)
					}
				}
			}
			if yyr3108 || yy2arr3108 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3124 := z.EncBinary()
					_ = yym3124
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep3108 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3125 := z.DecBinary()
	_ = yym3125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3126 := r.ReadMapStart()
			if yyl3126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3126, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3126 := r.ReadArrayStart()
			if yyl3126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3127Slc
	var yyhl3127 bool = l >= 0
	for yyj3127 := 0; ; yyj3127++ {
		if yyhl3127 {
			if yyj3127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3127Slc = r.DecodeBytes(yys3127Slc, true, true)
		yys3127 := string(yys3127Slc)
		switch yys3127 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3129 := &x.APIVersion
				yym3130 := z.DecBinary()
				_ = yym3130
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3129) {
				} else if !yym3130 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3129)
				} else {
					z.DecFallback(yyv3129, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3131 := &x.ListMeta
				yym3132 := z.DecBinary()
				_ = yym3132
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3131) {
				} else {
					z.DecFallback(yyv3131, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3133 := &x.Items
				yym3134 := z.DecBinary()
				_ = yym3134
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3133), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3127)
		} // end switch yys3127
	} // end for yyj3127
	if !yyhl3127 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3135 int
	var yyb3135 bool
	var yyhl3135 bool = l >= 0
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3137 := &x.APIVersion
		yym3138 := z.DecBinary()
		_ = yym3138
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3137) {
		} else if !yym3138 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3137)
		} else {
			z.DecFallback(yyv3137, false)
		}
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3139 := &x.ListMeta
		yym3140 := z.DecBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3139) {
		} else {
			z.DecFallback(yyv3139, false)
		}
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3141 := &x.Items
		yym3142 := z.DecBinary()
		_ = yym3142
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3141), d)
		}
	}
	for {
		yyj3135++
		if yyhl3135 {
			yyb3135 = yyj3135 > l
		} else {
			yyb3135 = r.CheckBreak()
		}
		if yyb3135 {
			break
		}
		z.DecStructFieldNotFound(yyj3135-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3143 := z.EncBinary()
		_ = yym3143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3144 := !z.EncBinary()
			yy2arr3144 := z.EncBasicHandle().StructToArray
			var yyq3144 [4]bool
			_, _, _ = yysep3144, yyq3144, yy2arr3144
			const yyr3144 bool = false
			yyq3144[0] = x.Kind != ""
			yyq3144[1] = true
			yyq3144[2] = true
			if yyr3144 || yy2arr3144 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3144 int = 1
				for _, b := range yyq3144 {
					if b {
						yynn3144++
					}
				}
				r.EncodeMapStart(yynn3144)
			}
			if yyr3144 || yy2arr3144 {
				if yyq3144[0] {
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3144[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3144 || yy2arr3144 {
				if yyq3144[1] {
					yy3149 := &x.APIVersion
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3149) {
					} else if !yym3150 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3149)
					} else {
						z.EncFallback(yy3149)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3144[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3151 := &x.APIVersion
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3151) {
					} else if !yym3152 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3151)
					} else {
						z.EncFallback(yy3151)
					}
				}
			}
			if yyr3144 || yy2arr3144 {
				if yyq3144[2] {
					yy3154 := &x.ListMeta
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3154) {
					} else {
						z.EncFallback(yy3154)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3144[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3156 := &x.ListMeta
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3156) {
					} else {
						z.EncFallback(yy3156)
					}
				}
			}
			if yyr3144 || yy2arr3144 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep3144 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3161 := z.DecBinary()
	_ = yym3161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3162 := r.ReadMapStart()
			if yyl3162 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3162, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3162 := r.ReadArrayStart()
			if yyl3162 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3163Slc
	var yyhl3163 bool = l >= 0
	for yyj3163 := 0; ; yyj3163++ {
		if yyhl3163 {
			if yyj3163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3163Slc = r.DecodeBytes(yys3163Slc, true, true)
		yys3163 := string(yys3163Slc)
		switch yys3163 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3165 := &x.APIVersion
				yym3166 := z.DecBinary()
				_ = yym3166
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3165) {
				} else if !yym3166 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3165)
				} else {
					z.DecFallback(yyv3165, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3167 := &x.ListMeta
				yym3168 := z.DecBinary()
				_ = yym3168
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3167) {
				} else {
					z.DecFallback(yyv3167, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3169 := &x.Items
				yym3170 := z.DecBinary()
				_ = yym3170
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3169), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3163)
		} // end switch yys3163
	} // end for yyj3163
	if !yyhl3163 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3171 int
	var yyb3171 bool
	var yyhl3171 bool = l >= 0
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3173 := &x.APIVersion
		yym3174 := z.DecBinary()
		_ = yym3174
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3173) {
		} else if !yym3174 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3173)
		} else {
			z.DecFallback(yyv3173, false)
		}
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3175 := &x.ListMeta
		yym3176 := z.DecBinary()
		_ = yym3176
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3175) {
		} else {
			z.DecFallback(yyv3175, false)
		}
	}
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3177 := &x.Items
		yym3178 := z.DecBinary()
		_ = yym3178
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3177), d)
		}
	}
	for {
		yyj3171++
		if yyhl3171 {
			yyb3171 = yyj3171 > l
		} else {
			yyb3171 = r.CheckBreak()
		}
		if yyb3171 {
			break
		}
		z.DecStructFieldNotFound(yyj3171-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3179 := z.EncBinary()
	_ = yym3179
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3180 := z.DecBinary()
	_ = yym3180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [6]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[0] = x.Type != ""
			yyq3182[1] = len(x.Max) != 0
			yyq3182[2] = len(x.Min) != 0
			yyq3182[3] = len(x.Default) != 0
			yyq3182[4] = len(x.DefaultRequest) != 0
			yyq3182[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3182 int = 0
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
			}
			if yyr3182 || yy2arr3182 {
				if yyq3182[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				if yyq3182[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				if yyq3182[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				if yyq3182[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				if yyq3182[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				if yyq3182[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3182 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		switch yys3191 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3193 := &x.Max
				yyv3193.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3194 := &x.Min
				yyv3194.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3195 := &x.Default
				yyv3195.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3196 := &x.DefaultRequest
				yyv3196.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3197 := &x.MaxLimitRequestRatio
				yyv3197.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	if !yyhl3191 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3198 int
	var yyb3198 bool
	var yyhl3198 bool = l >= 0
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3200 := &x.Max
		yyv3200.CodecDecodeSelf(d)
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3201 := &x.Min
		yyv3201.CodecDecodeSelf(d)
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3202 := &x.Default
		yyv3202.CodecDecodeSelf(d)
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3203 := &x.DefaultRequest
		yyv3203.CodecDecodeSelf(d)
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3204 := &x.MaxLimitRequestRatio
		yyv3204.CodecDecodeSelf(d)
	}
	for {
		yyj3198++
		if yyhl3198 {
			yyb3198 = yyj3198 > l
		} else {
			yyb3198 = r.CheckBreak()
		}
		if yyb3198 {
			break
		}
		z.DecStructFieldNotFound(yyj3198-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3205 := z.EncBinary()
		_ = yym3205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3206 := !z.EncBinary()
			yy2arr3206 := z.EncBasicHandle().StructToArray
			var yyq3206 [1]bool
			_, _, _ = yysep3206, yyq3206, yy2arr3206
			const yyr3206 bool = false
			if yyr3206 || yy2arr3206 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3206 int = 1
				for _, b := range yyq3206 {
					if b {
						yynn3206++
					}
				}
				r.EncodeMapStart(yynn3206)
			}
			if yyr3206 || yy2arr3206 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3206 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3210 := z.DecBinary()
	_ = yym3210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3211 := r.ReadMapStart()
			if yyl3211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3211, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3211 := r.ReadArrayStart()
			if yyl3211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3212Slc
	var yyhl3212 bool = l >= 0
	for yyj3212 := 0; ; yyj3212++ {
		if yyhl3212 {
			if yyj3212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3212Slc = r.DecodeBytes(yys3212Slc, true, true)
		yys3212 := string(yys3212Slc)
		switch yys3212 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3213 := &x.Limits
				yym3214 := z.DecBinary()
				_ = yym3214
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3213), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3212)
		} // end switch yys3212
	} // end for yyj3212
	if !yyhl3212 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3215 int
	var yyb3215 bool
	var yyhl3215 bool = l >= 0
	yyj3215++
	if yyhl3215 {
		yyb3215 = yyj3215 > l
	} else {
		yyb3215 = r.CheckBreak()
	}
	if yyb3215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3216 := &x.Limits
		yym3217 := z.DecBinary()
		_ = yym3217
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3216), d)
		}
	}
	for {
		yyj3215++
		if yyhl3215 {
			yyb3215 = yyj3215 > l
		} else {
			yyb3215 = r.CheckBreak()
		}
		if yyb3215 {
			break
		}
		z.DecStructFieldNotFound(yyj3215-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3218 := z.EncBinary()
		_ = yym3218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3219 := !z.EncBinary()
			yy2arr3219 := z.EncBasicHandle().StructToArray
			var yyq3219 [4]bool
			_, _, _ = yysep3219, yyq3219, yy2arr3219
			const yyr3219 bool = false
			yyq3219[0] = x.Kind != ""
			yyq3219[1] = true
			yyq3219[2] = true
			yyq3219[3] = true
			if yyr3219 || yy2arr3219 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3219 int = 0
				for _, b := range yyq3219 {
					if b {
						yynn3219++
					}
				}
				r.EncodeMapStart(yynn3219)
			}
			if yyr3219 || yy2arr3219 {
				if yyq3219[0] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3219[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				if yyq3219[1] {
					yy3224 := &x.APIVersion
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3224) {
					} else if !yym3225 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3224)
					} else {
						z.EncFallback(yy3224)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3226 := &x.APIVersion
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3226) {
					} else if !yym3227 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3226)
					} else {
						z.EncFallback(yy3226)
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				if yyq3219[2] {
					yy3229 := &x.ObjectMeta
					yy3229.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3230 := &x.ObjectMeta
					yy3230.CodecEncodeSelf(e)
				}
			}
			if yyr3219 || yy2arr3219 {
				if yyq3219[3] {
					yy3232 := &x.Spec
					yy3232.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3233 := &x.Spec
					yy3233.CodecEncodeSelf(e)
				}
			}
			if yysep3219 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3234 := z.DecBinary()
	_ = yym3234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3235 := r.ReadMapStart()
			if yyl3235 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3235, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3235 := r.ReadArrayStart()
			if yyl3235 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3236Slc
	var yyhl3236 bool = l >= 0
	for yyj3236 := 0; ; yyj3236++ {
		if yyhl3236 {
			if yyj3236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3236Slc = r.DecodeBytes(yys3236Slc, true, true)
		yys3236 := string(yys3236Slc)
		switch yys3236 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3238 := &x.APIVersion
				yym3239 := z.DecBinary()
				_ = yym3239
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3238) {
				} else if !yym3239 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3238)
				} else {
					z.DecFallback(yyv3238, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3240 := &x.ObjectMeta
				yyv3240.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3241 := &x.Spec
				yyv3241.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3236)
		} // end switch yys3236
	} // end for yyj3236
	if !yyhl3236 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3242 int
	var yyb3242 bool
	var yyhl3242 bool = l >= 0
	yyj3242++
	if yyhl3242 {
		yyb3242 = yyj3242 > l
	} else {
		yyb3242 = r.CheckBreak()
	}
	if yyb3242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3242++
	if yyhl3242 {
		yyb3242 = yyj3242 > l
	} else {
		yyb3242 = r.CheckBreak()
	}
	if yyb3242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3244 := &x.APIVersion
		yym3245 := z.DecBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3244) {
		} else if !yym3245 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3244)
		} else {
			z.DecFallback(yyv3244, false)
		}
	}
	yyj3242++
	if yyhl3242 {
		yyb3242 = yyj3242 > l
	} else {
		yyb3242 = r.CheckBreak()
	}
	if yyb3242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3246 := &x.ObjectMeta
		yyv3246.CodecDecodeSelf(d)
	}
	yyj3242++
	if yyhl3242 {
		yyb3242 = yyj3242 > l
	} else {
		yyb3242 = r.CheckBreak()
	}
	if yyb3242 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3247 := &x.Spec
		yyv3247.CodecDecodeSelf(d)
	}
	for {
		yyj3242++
		if yyhl3242 {
			yyb3242 = yyj3242 > l
		} else {
			yyb3242 = r.CheckBreak()
		}
		if yyb3242 {
			break
		}
		z.DecStructFieldNotFound(yyj3242-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3248 := z.EncBinary()
		_ = yym3248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3249 := !z.EncBinary()
			yy2arr3249 := z.EncBasicHandle().StructToArray
			var yyq3249 [4]bool
			_, _, _ = yysep3249, yyq3249, yy2arr3249
			const yyr3249 bool = false
			yyq3249[0] = x.Kind != ""
			yyq3249[1] = true
			yyq3249[2] = true
			if yyr3249 || yy2arr3249 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3249 int = 1
				for _, b := range yyq3249 {
					if b {
						yynn3249++
					}
				}
				r.EncodeMapStart(yynn3249)
			}
			if yyr3249 || yy2arr3249 {
				if yyq3249[0] {
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3249[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3249 || yy2arr3249 {
				if yyq3249[1] {
					yy3254 := &x.APIVersion
					yym3255 := z.EncBinary()
					_ = yym3255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3254) {
					} else if !yym3255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3254)
					} else {
						z.EncFallback(yy3254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3249[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3256 := &x.APIVersion
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3256) {
					} else if !yym3257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3256)
					} else {
						z.EncFallback(yy3256)
					}
				}
			}
			if yyr3249 || yy2arr3249 {
				if yyq3249[2] {
					yy3259 := &x.ListMeta
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3259) {
					} else {
						z.EncFallback(yy3259)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3249[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3261 := &x.ListMeta
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3261) {
					} else {
						z.EncFallback(yy3261)
					}
				}
			}
			if yyr3249 || yy2arr3249 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3249 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3266 := z.DecBinary()
	_ = yym3266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3267 := r.ReadMapStart()
			if yyl3267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3267 := r.ReadArrayStart()
			if yyl3267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3268Slc
	var yyhl3268 bool = l >= 0
	for yyj3268 := 0; ; yyj3268++ {
		if yyhl3268 {
			if yyj3268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3268Slc = r.DecodeBytes(yys3268Slc, true, true)
		yys3268 := string(yys3268Slc)
		switch yys3268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3270 := &x.APIVersion
				yym3271 := z.DecBinary()
				_ = yym3271
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3270) {
				} else if !yym3271 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3270)
				} else {
					z.DecFallback(yyv3270, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3272 := &x.ListMeta
				yym3273 := z.DecBinary()
				_ = yym3273
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3272) {
				} else {
					z.DecFallback(yyv3272, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3274 := &x.Items
				yym3275 := z.DecBinary()
				_ = yym3275
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3274), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3268)
		} // end switch yys3268
	} // end for yyj3268
	if !yyhl3268 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3276 int
	var yyb3276 bool
	var yyhl3276 bool = l >= 0
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3278 := &x.APIVersion
		yym3279 := z.DecBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3278) {
		} else if !yym3279 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3278)
		} else {
			z.DecFallback(yyv3278, false)
		}
	}
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3280 := &x.ListMeta
		yym3281 := z.DecBinary()
		_ = yym3281
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3280) {
		} else {
			z.DecFallback(yyv3280, false)
		}
	}
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3282 := &x.Items
		yym3283 := z.DecBinary()
		_ = yym3283
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3282), d)
		}
	}
	for {
		yyj3276++
		if yyhl3276 {
			yyb3276 = yyj3276 > l
		} else {
			yyb3276 = r.CheckBreak()
		}
		if yyb3276 {
			break
		}
		z.DecStructFieldNotFound(yyj3276-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3284 := z.EncBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3285 := !z.EncBinary()
			yy2arr3285 := z.EncBasicHandle().StructToArray
			var yyq3285 [1]bool
			_, _, _ = yysep3285, yyq3285, yy2arr3285
			const yyr3285 bool = false
			yyq3285[0] = len(x.Hard) != 0
			if yyr3285 || yy2arr3285 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3285 int = 0
				for _, b := range yyq3285 {
					if b {
						yynn3285++
					}
				}
				r.EncodeMapStart(yynn3285)
			}
			if yyr3285 || yy2arr3285 {
				if yyq3285[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3285 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3287 := z.DecBinary()
	_ = yym3287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3288 := r.ReadMapStart()
			if yyl3288 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3288, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3288 := r.ReadArrayStart()
			if yyl3288 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3289Slc
	var yyhl3289 bool = l >= 0
	for yyj3289 := 0; ; yyj3289++ {
		if yyhl3289 {
			if yyj3289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3289Slc = r.DecodeBytes(yys3289Slc, true, true)
		yys3289 := string(yys3289Slc)
		switch yys3289 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3290 := &x.Hard
				yyv3290.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3289)
		} // end switch yys3289
	} // end for yyj3289
	if !yyhl3289 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3291 int
	var yyb3291 bool
	var yyhl3291 bool = l >= 0
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3292 := &x.Hard
		yyv3292.CodecDecodeSelf(d)
	}
	for {
		yyj3291++
		if yyhl3291 {
			yyb3291 = yyj3291 > l
		} else {
			yyb3291 = r.CheckBreak()
		}
		if yyb3291 {
			break
		}
		z.DecStructFieldNotFound(yyj3291-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3293 := z.EncBinary()
		_ = yym3293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3294 := !z.EncBinary()
			yy2arr3294 := z.EncBasicHandle().StructToArray
			var yyq3294 [2]bool
			_, _, _ = yysep3294, yyq3294, yy2arr3294
			const yyr3294 bool = false
			yyq3294[0] = len(x.Hard) != 0
			yyq3294[1] = len(x.Used) != 0
			if yyr3294 || yy2arr3294 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3294 int = 0
				for _, b := range yyq3294 {
					if b {
						yynn3294++
					}
				}
				r.EncodeMapStart(yynn3294)
			}
			if yyr3294 || yy2arr3294 {
				if yyq3294[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3294[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3294 || yy2arr3294 {
				if yyq3294[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3294[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3294 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3297 := z.DecBinary()
	_ = yym3297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3298 := r.ReadMapStart()
			if yyl3298 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3298, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3298 := r.ReadArrayStart()
			if yyl3298 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3299Slc
	var yyhl3299 bool = l >= 0
	for yyj3299 := 0; ; yyj3299++ {
		if yyhl3299 {
			if yyj3299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3299Slc = r.DecodeBytes(yys3299Slc, true, true)
		yys3299 := string(yys3299Slc)
		switch yys3299 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3300 := &x.Hard
				yyv3300.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3301 := &x.Used
				yyv3301.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3299)
		} // end switch yys3299
	} // end for yyj3299
	if !yyhl3299 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3302 int
	var yyb3302 bool
	var yyhl3302 bool = l >= 0
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3303 := &x.Hard
		yyv3303.CodecDecodeSelf(d)
	}
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3304 := &x.Used
		yyv3304.CodecDecodeSelf(d)
	}
	for {
		yyj3302++
		if yyhl3302 {
			yyb3302 = yyj3302 > l
		} else {
			yyb3302 = r.CheckBreak()
		}
		if yyb3302 {
			break
		}
		z.DecStructFieldNotFound(yyj3302-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3305 := z.EncBinary()
		_ = yym3305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3306 := !z.EncBinary()
			yy2arr3306 := z.EncBasicHandle().StructToArray
			var yyq3306 [5]bool
			_, _, _ = yysep3306, yyq3306, yy2arr3306
			const yyr3306 bool = false
			yyq3306[0] = x.Kind != ""
			yyq3306[1] = true
			yyq3306[2] = true
			yyq3306[3] = true
			yyq3306[4] = true
			if yyr3306 || yy2arr3306 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3306 int = 0
				for _, b := range yyq3306 {
					if b {
						yynn3306++
					}
				}
				r.EncodeMapStart(yynn3306)
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[0] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[1] {
					yy3311 := &x.APIVersion
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3311) {
					} else if !yym3312 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3311)
					} else {
						z.EncFallback(yy3311)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3313 := &x.APIVersion
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3313) {
					} else if !yym3314 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3313)
					} else {
						z.EncFallback(yy3313)
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[2] {
					yy3316 := &x.ObjectMeta
					yy3316.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3317 := &x.ObjectMeta
					yy3317.CodecEncodeSelf(e)
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[3] {
					yy3319 := &x.Spec
					yy3319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3320 := &x.Spec
					yy3320.CodecEncodeSelf(e)
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[4] {
					yy3322 := &x.Status
					yy3322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3323 := &x.Status
					yy3323.CodecEncodeSelf(e)
				}
			}
			if yysep3306 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3324 := z.DecBinary()
	_ = yym3324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3325 := r.ReadMapStart()
			if yyl3325 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3325, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3325 := r.ReadArrayStart()
			if yyl3325 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3326Slc
	var yyhl3326 bool = l >= 0
	for yyj3326 := 0; ; yyj3326++ {
		if yyhl3326 {
			if yyj3326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3326Slc = r.DecodeBytes(yys3326Slc, true, true)
		yys3326 := string(yys3326Slc)
		switch yys3326 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3328 := &x.APIVersion
				yym3329 := z.DecBinary()
				_ = yym3329
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3328) {
				} else if !yym3329 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3328)
				} else {
					z.DecFallback(yyv3328, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3330 := &x.ObjectMeta
				yyv3330.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3331 := &x.Spec
				yyv3331.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3332 := &x.Status
				yyv3332.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3326)
		} // end switch yys3326
	} // end for yyj3326
	if !yyhl3326 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3333 int
	var yyb3333 bool
	var yyhl3333 bool = l >= 0
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3335 := &x.APIVersion
		yym3336 := z.DecBinary()
		_ = yym3336
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3335) {
		} else if !yym3336 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3335)
		} else {
			z.DecFallback(yyv3335, false)
		}
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3337 := &x.ObjectMeta
		yyv3337.CodecDecodeSelf(d)
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3338 := &x.Spec
		yyv3338.CodecDecodeSelf(d)
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3339 := &x.Status
		yyv3339.CodecDecodeSelf(d)
	}
	for {
		yyj3333++
		if yyhl3333 {
			yyb3333 = yyj3333 > l
		} else {
			yyb3333 = r.CheckBreak()
		}
		if yyb3333 {
			break
		}
		z.DecStructFieldNotFound(yyj3333-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3340 := z.EncBinary()
		_ = yym3340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3341 := !z.EncBinary()
			yy2arr3341 := z.EncBasicHandle().StructToArray
			var yyq3341 [4]bool
			_, _, _ = yysep3341, yyq3341, yy2arr3341
			const yyr3341 bool = false
			yyq3341[0] = x.Kind != ""
			yyq3341[1] = true
			yyq3341[2] = true
			if yyr3341 || yy2arr3341 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3341 int = 1
				for _, b := range yyq3341 {
					if b {
						yynn3341++
					}
				}
				r.EncodeMapStart(yynn3341)
			}
			if yyr3341 || yy2arr3341 {
				if yyq3341[0] {
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3341[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3344 := z.EncBinary()
					_ = yym3344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				if yyq3341[1] {
					yy3346 := &x.APIVersion
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3346) {
					} else if !yym3347 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3346)
					} else {
						z.EncFallback(yy3346)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3341[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3348 := &x.APIVersion
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3348) {
					} else if !yym3349 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3348)
					} else {
						z.EncFallback(yy3348)
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				if yyq3341[2] {
					yy3351 := &x.ListMeta
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3351) {
					} else {
						z.EncFallback(yy3351)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3341[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3353 := &x.ListMeta
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3353) {
					} else {
						z.EncFallback(yy3353)
					}
				}
			}
			if yyr3341 || yy2arr3341 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3341 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3358 := z.DecBinary()
	_ = yym3358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3359 := r.ReadMapStart()
			if yyl3359 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3359, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3359 := r.ReadArrayStart()
			if yyl3359 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3360Slc
	var yyhl3360 bool = l >= 0
	for yyj3360 := 0; ; yyj3360++ {
		if yyhl3360 {
			if yyj3360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3360Slc = r.DecodeBytes(yys3360Slc, true, true)
		yys3360 := string(yys3360Slc)
		switch yys3360 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3362 := &x.APIVersion
				yym3363 := z.DecBinary()
				_ = yym3363
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3362) {
				} else if !yym3363 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3362)
				} else {
					z.DecFallback(yyv3362, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3364 := &x.ListMeta
				yym3365 := z.DecBinary()
				_ = yym3365
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3364) {
				} else {
					z.DecFallback(yyv3364, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3366 := &x.Items
				yym3367 := z.DecBinary()
				_ = yym3367
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3366), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3360)
		} // end switch yys3360
	} // end for yyj3360
	if !yyhl3360 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3368 int
	var yyb3368 bool
	var yyhl3368 bool = l >= 0
	yyj3368++
	if yyhl3368 {
		yyb3368 = yyj3368 > l
	} else {
		yyb3368 = r.CheckBreak()
	}
	if yyb3368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3368++
	if yyhl3368 {
		yyb3368 = yyj3368 > l
	} else {
		yyb3368 = r.CheckBreak()
	}
	if yyb3368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3370 := &x.APIVersion
		yym3371 := z.DecBinary()
		_ = yym3371
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3370) {
		} else if !yym3371 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3370)
		} else {
			z.DecFallback(yyv3370, false)
		}
	}
	yyj3368++
	if yyhl3368 {
		yyb3368 = yyj3368 > l
	} else {
		yyb3368 = r.CheckBreak()
	}
	if yyb3368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3372 := &x.ListMeta
		yym3373 := z.DecBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3372) {
		} else {
			z.DecFallback(yyv3372, false)
		}
	}
	yyj3368++
	if yyhl3368 {
		yyb3368 = yyj3368 > l
	} else {
		yyb3368 = r.CheckBreak()
	}
	if yyb3368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3374 := &x.Items
		yym3375 := z.DecBinary()
		_ = yym3375
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3374), d)
		}
	}
	for {
		yyj3368++
		if yyhl3368 {
			yyb3368 = yyj3368 > l
		} else {
			yyb3368 = r.CheckBreak()
		}
		if yyb3368 {
			break
		}
		z.DecStructFieldNotFound(yyj3368-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3376 := z.EncBinary()
		_ = yym3376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3377 := !z.EncBinary()
			yy2arr3377 := z.EncBasicHandle().StructToArray
			var yyq3377 [5]bool
			_, _, _ = yysep3377, yyq3377, yy2arr3377
			const yyr3377 bool = false
			yyq3377[0] = x.Kind != ""
			yyq3377[1] = true
			yyq3377[2] = true
			yyq3377[3] = len(x.Data) != 0
			yyq3377[4] = x.Type != ""
			if yyr3377 || yy2arr3377 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3377 int = 0
				for _, b := range yyq3377 {
					if b {
						yynn3377++
					}
				}
				r.EncodeMapStart(yynn3377)
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[0] {
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3377[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[1] {
					yy3382 := &x.APIVersion
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3382) {
					} else if !yym3383 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3382)
					} else {
						z.EncFallback(yy3382)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3384 := &x.APIVersion
					yym3385 := z.EncBinary()
					_ = yym3385
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3384) {
					} else if !yym3385 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3384)
					} else {
						z.EncFallback(yy3384)
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[2] {
					yy3387 := &x.ObjectMeta
					yy3387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3388 := &x.ObjectMeta
					yy3388.CodecEncodeSelf(e)
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3390 := z.EncBinary()
						_ = yym3390
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3377[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3391 := z.EncBinary()
						_ = yym3391
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3377 || yy2arr3377 {
				if yyq3377[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3377[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3377 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3393 := z.DecBinary()
	_ = yym3393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3394 := r.ReadMapStart()
			if yyl3394 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3394, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3394 := r.ReadArrayStart()
			if yyl3394 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3395Slc
	var yyhl3395 bool = l >= 0
	for yyj3395 := 0; ; yyj3395++ {
		if yyhl3395 {
			if yyj3395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3395Slc = r.DecodeBytes(yys3395Slc, true, true)
		yys3395 := string(yys3395Slc)
		switch yys3395 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3397 := &x.APIVersion
				yym3398 := z.DecBinary()
				_ = yym3398
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3397) {
				} else if !yym3398 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3397)
				} else {
					z.DecFallback(yyv3397, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3399 := &x.ObjectMeta
				yyv3399.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3400 := &x.Data
				yym3401 := z.DecBinary()
				_ = yym3401
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3400), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3395)
		} // end switch yys3395
	} // end for yyj3395
	if !yyhl3395 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3403 int
	var yyb3403 bool
	var yyhl3403 bool = l >= 0
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3405 := &x.APIVersion
		yym3406 := z.DecBinary()
		_ = yym3406
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3405) {
		} else if !yym3406 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3405)
		} else {
			z.DecFallback(yyv3405, false)
		}
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3407 := &x.ObjectMeta
		yyv3407.CodecDecodeSelf(d)
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3408 := &x.Data
		yym3409 := z.DecBinary()
		_ = yym3409
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3408), d)
		}
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3403++
		if yyhl3403 {
			yyb3403 = yyj3403 > l
		} else {
			yyb3403 = r.CheckBreak()
		}
		if yyb3403 {
			break
		}
		z.DecStructFieldNotFound(yyj3403-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3411 := z.EncBinary()
	_ = yym3411
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3412 := z.DecBinary()
	_ = yym3412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3413 := z.EncBinary()
		_ = yym3413
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3414 := !z.EncBinary()
			yy2arr3414 := z.EncBasicHandle().StructToArray
			var yyq3414 [4]bool
			_, _, _ = yysep3414, yyq3414, yy2arr3414
			const yyr3414 bool = false
			yyq3414[0] = x.Kind != ""
			yyq3414[1] = true
			yyq3414[2] = true
			if yyr3414 || yy2arr3414 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3414 int = 1
				for _, b := range yyq3414 {
					if b {
						yynn3414++
					}
				}
				r.EncodeMapStart(yynn3414)
			}
			if yyr3414 || yy2arr3414 {
				if yyq3414[0] {
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3414[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3414 || yy2arr3414 {
				if yyq3414[1] {
					yy3419 := &x.APIVersion
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3419) {
					} else if !yym3420 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3419)
					} else {
						z.EncFallback(yy3419)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3414[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3421 := &x.APIVersion
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3421) {
					} else if !yym3422 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3421)
					} else {
						z.EncFallback(yy3421)
					}
				}
			}
			if yyr3414 || yy2arr3414 {
				if yyq3414[2] {
					yy3424 := &x.ListMeta
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3424) {
					} else {
						z.EncFallback(yy3424)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3414[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3426 := &x.ListMeta
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3426) {
					} else {
						z.EncFallback(yy3426)
					}
				}
			}
			if yyr3414 || yy2arr3414 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3414 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3431 := z.DecBinary()
	_ = yym3431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3432 := r.ReadMapStart()
			if yyl3432 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3432, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3432 := r.ReadArrayStart()
			if yyl3432 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3433Slc
	var yyhl3433 bool = l >= 0
	for yyj3433 := 0; ; yyj3433++ {
		if yyhl3433 {
			if yyj3433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3433Slc = r.DecodeBytes(yys3433Slc, true, true)
		yys3433 := string(yys3433Slc)
		switch yys3433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3435 := &x.APIVersion
				yym3436 := z.DecBinary()
				_ = yym3436
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3435) {
				} else if !yym3436 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3435)
				} else {
					z.DecFallback(yyv3435, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3437 := &x.ListMeta
				yym3438 := z.DecBinary()
				_ = yym3438
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3437) {
				} else {
					z.DecFallback(yyv3437, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3439 := &x.Items
				yym3440 := z.DecBinary()
				_ = yym3440
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3439), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3433)
		} // end switch yys3433
	} // end for yyj3433
	if !yyhl3433 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3441 int
	var yyb3441 bool
	var yyhl3441 bool = l >= 0
	yyj3441++
	if yyhl3441 {
		yyb3441 = yyj3441 > l
	} else {
		yyb3441 = r.CheckBreak()
	}
	if yyb3441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3441++
	if yyhl3441 {
		yyb3441 = yyj3441 > l
	} else {
		yyb3441 = r.CheckBreak()
	}
	if yyb3441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3443 := &x.APIVersion
		yym3444 := z.DecBinary()
		_ = yym3444
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3443) {
		} else if !yym3444 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3443)
		} else {
			z.DecFallback(yyv3443, false)
		}
	}
	yyj3441++
	if yyhl3441 {
		yyb3441 = yyj3441 > l
	} else {
		yyb3441 = r.CheckBreak()
	}
	if yyb3441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3445 := &x.ListMeta
		yym3446 := z.DecBinary()
		_ = yym3446
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3445) {
		} else {
			z.DecFallback(yyv3445, false)
		}
	}
	yyj3441++
	if yyhl3441 {
		yyb3441 = yyj3441 > l
	} else {
		yyb3441 = r.CheckBreak()
	}
	if yyb3441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3447 := &x.Items
		yym3448 := z.DecBinary()
		_ = yym3448
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3447), d)
		}
	}
	for {
		yyj3441++
		if yyhl3441 {
			yyb3441 = yyj3441 > l
		} else {
			yyb3441 = r.CheckBreak()
		}
		if yyb3441 {
			break
		}
		z.DecStructFieldNotFound(yyj3441-1, "")
	}
	r.ReadEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3449 := z.EncBinary()
	_ = yym3449
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3450 := z.DecBinary()
	_ = yym3450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3451 := z.EncBinary()
	_ = yym3451
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3452 := z.DecBinary()
	_ = yym3452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3453 := z.EncBinary()
		_ = yym3453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3454 := !z.EncBinary()
			yy2arr3454 := z.EncBasicHandle().StructToArray
			var yyq3454 [4]bool
			_, _, _ = yysep3454, yyq3454, yy2arr3454
			const yyr3454 bool = false
			yyq3454[2] = x.Message != ""
			yyq3454[3] = x.Error != ""
			if yyr3454 || yy2arr3454 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3454 int = 2
				for _, b := range yyq3454 {
					if b {
						yynn3454++
					}
				}
				r.EncodeMapStart(yynn3454)
			}
			if yyr3454 || yy2arr3454 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3454 || yy2arr3454 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3454 || yy2arr3454 {
				if yyq3454[2] {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3454[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3454 || yy2arr3454 {
				if yyq3454[3] {
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3454[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3454 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3463 := z.DecBinary()
	_ = yym3463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3464 := r.ReadMapStart()
			if yyl3464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3464, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3464 := r.ReadArrayStart()
			if yyl3464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3465Slc
	var yyhl3465 bool = l >= 0
	for yyj3465 := 0; ; yyj3465++ {
		if yyhl3465 {
			if yyj3465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3465Slc = r.DecodeBytes(yys3465Slc, true, true)
		yys3465 := string(yys3465Slc)
		switch yys3465 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3465)
		} // end switch yys3465
	} // end for yyj3465
	if !yyhl3465 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3470 int
	var yyb3470 bool
	var yyhl3470 bool = l >= 0
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3470++
	if yyhl3470 {
		yyb3470 = yyj3470 > l
	} else {
		yyb3470 = r.CheckBreak()
	}
	if yyb3470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3470++
		if yyhl3470 {
			yyb3470 = yyj3470 > l
		} else {
			yyb3470 = r.CheckBreak()
		}
		if yyb3470 {
			break
		}
		z.DecStructFieldNotFound(yyj3470-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3475 := z.EncBinary()
		_ = yym3475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3476 := !z.EncBinary()
			yy2arr3476 := z.EncBasicHandle().StructToArray
			var yyq3476 [4]bool
			_, _, _ = yysep3476, yyq3476, yy2arr3476
			const yyr3476 bool = false
			yyq3476[0] = x.Kind != ""
			yyq3476[1] = true
			yyq3476[2] = true
			yyq3476[3] = len(x.Conditions) != 0
			if yyr3476 || yy2arr3476 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3476 int = 0
				for _, b := range yyq3476 {
					if b {
						yynn3476++
					}
				}
				r.EncodeMapStart(yynn3476)
			}
			if yyr3476 || yy2arr3476 {
				if yyq3476[0] {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3476[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				if yyq3476[1] {
					yy3481 := &x.APIVersion
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3481) {
					} else if !yym3482 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3481)
					} else {
						z.EncFallback(yy3481)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3476[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3483 := &x.APIVersion
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3483) {
					} else if !yym3484 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3483)
					} else {
						z.EncFallback(yy3483)
					}
				}
			}
			if yyr3476 || yy2arr3476 {
				if yyq3476[2] {
					yy3486 := &x.ObjectMeta
					yy3486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3476[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3487 := &x.ObjectMeta
					yy3487.CodecEncodeSelf(e)
				}
			}
			if yyr3476 || yy2arr3476 {
				if yyq3476[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3489 := z.EncBinary()
						_ = yym3489
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3476[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3490 := z.EncBinary()
						_ = yym3490
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3476 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3491 := z.DecBinary()
	_ = yym3491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3492 := r.ReadMapStart()
			if yyl3492 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3492, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3492 := r.ReadArrayStart()
			if yyl3492 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3493Slc
	var yyhl3493 bool = l >= 0
	for yyj3493 := 0; ; yyj3493++ {
		if yyhl3493 {
			if yyj3493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3493Slc = r.DecodeBytes(yys3493Slc, true, true)
		yys3493 := string(yys3493Slc)
		switch yys3493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3495 := &x.APIVersion
				yym3496 := z.DecBinary()
				_ = yym3496
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3495) {
				} else if !yym3496 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3495)
				} else {
					z.DecFallback(yyv3495, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3497 := &x.ObjectMeta
				yyv3497.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3498 := &x.Conditions
				yym3499 := z.DecBinary()
				_ = yym3499
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3498), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3493)
		} // end switch yys3493
	} // end for yyj3493
	if !yyhl3493 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3500 int
	var yyb3500 bool
	var yyhl3500 bool = l >= 0
	yyj3500++
	if yyhl3500 {
		yyb3500 = yyj3500 > l
	} else {
		yyb3500 = r.CheckBreak()
	}
	if yyb3500 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3500++
	if yyhl3500 {
		yyb3500 = yyj3500 > l
	} else {
		yyb3500 = r.CheckBreak()
	}
	if yyb3500 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3502 := &x.APIVersion
		yym3503 := z.DecBinary()
		_ = yym3503
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3502) {
		} else if !yym3503 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3502)
		} else {
			z.DecFallback(yyv3502, false)
		}
	}
	yyj3500++
	if yyhl3500 {
		yyb3500 = yyj3500 > l
	} else {
		yyb3500 = r.CheckBreak()
	}
	if yyb3500 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3504 := &x.ObjectMeta
		yyv3504.CodecDecodeSelf(d)
	}
	yyj3500++
	if yyhl3500 {
		yyb3500 = yyj3500 > l
	} else {
		yyb3500 = r.CheckBreak()
	}
	if yyb3500 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3505 := &x.Conditions
		yym3506 := z.DecBinary()
		_ = yym3506
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3505), d)
		}
	}
	for {
		yyj3500++
		if yyhl3500 {
			yyb3500 = yyj3500 > l
		} else {
			yyb3500 = r.CheckBreak()
		}
		if yyb3500 {
			break
		}
		z.DecStructFieldNotFound(yyj3500-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3507 := z.EncBinary()
		_ = yym3507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3508 := !z.EncBinary()
			yy2arr3508 := z.EncBasicHandle().StructToArray
			var yyq3508 [4]bool
			_, _, _ = yysep3508, yyq3508, yy2arr3508
			const yyr3508 bool = false
			yyq3508[0] = x.Kind != ""
			yyq3508[1] = true
			yyq3508[2] = true
			if yyr3508 || yy2arr3508 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3508 int = 1
				for _, b := range yyq3508 {
					if b {
						yynn3508++
					}
				}
				r.EncodeMapStart(yynn3508)
			}
			if yyr3508 || yy2arr3508 {
				if yyq3508[0] {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3508[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				if yyq3508[1] {
					yy3513 := &x.APIVersion
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3513) {
					} else if !yym3514 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3513)
					} else {
						z.EncFallback(yy3513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3508[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3515 := &x.APIVersion
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3515) {
					} else if !yym3516 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3515)
					} else {
						z.EncFallback(yy3515)
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				if yyq3508[2] {
					yy3518 := &x.ListMeta
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3518) {
					} else {
						z.EncFallback(yy3518)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3508[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3520 := &x.ListMeta
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3520) {
					} else {
						z.EncFallback(yy3520)
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3508 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3525 := z.DecBinary()
	_ = yym3525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3526 := r.ReadMapStart()
			if yyl3526 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3526, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3526 := r.ReadArrayStart()
			if yyl3526 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3527Slc
	var yyhl3527 bool = l >= 0
	for yyj3527 := 0; ; yyj3527++ {
		if yyhl3527 {
			if yyj3527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3527Slc = r.DecodeBytes(yys3527Slc, true, true)
		yys3527 := string(yys3527Slc)
		switch yys3527 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3529 := &x.APIVersion
				yym3530 := z.DecBinary()
				_ = yym3530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3529) {
				} else if !yym3530 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3529)
				} else {
					z.DecFallback(yyv3529, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3531 := &x.ListMeta
				yym3532 := z.DecBinary()
				_ = yym3532
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3531) {
				} else {
					z.DecFallback(yyv3531, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3533 := &x.Items
				yym3534 := z.DecBinary()
				_ = yym3534
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3533), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3527)
		} // end switch yys3527
	} // end for yyj3527
	if !yyhl3527 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3535 int
	var yyb3535 bool
	var yyhl3535 bool = l >= 0
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3537 := &x.APIVersion
		yym3538 := z.DecBinary()
		_ = yym3538
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3537) {
		} else if !yym3538 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3537)
		} else {
			z.DecFallback(yyv3537, false)
		}
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3539 := &x.ListMeta
		yym3540 := z.DecBinary()
		_ = yym3540
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3539) {
		} else {
			z.DecFallback(yyv3539, false)
		}
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3541 := &x.Items
		yym3542 := z.DecBinary()
		_ = yym3542
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3541), d)
		}
	}
	for {
		yyj3535++
		if yyhl3535 {
			yyb3535 = yyj3535 > l
		} else {
			yyb3535 = r.CheckBreak()
		}
		if yyb3535 {
			break
		}
		z.DecStructFieldNotFound(yyj3535-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3543 := z.EncBinary()
		_ = yym3543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3544 := !z.EncBinary()
			yy2arr3544 := z.EncBasicHandle().StructToArray
			var yyq3544 [5]bool
			_, _, _ = yysep3544, yyq3544, yy2arr3544
			const yyr3544 bool = false
			yyq3544[0] = x.Capabilities != nil
			yyq3544[1] = x.Privileged != nil
			yyq3544[2] = x.SELinuxOptions != nil
			yyq3544[3] = x.RunAsUser != nil
			yyq3544[4] = x.RunAsNonRoot != nil
			if yyr3544 || yy2arr3544 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3544 int = 0
				for _, b := range yyq3544 {
					if b {
						yynn3544++
					}
				}
				r.EncodeMapStart(yynn3544)
			}
			if yyr3544 || yy2arr3544 {
				if yyq3544[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				if yyq3544[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3547 := *x.Privileged
						yym3548 := z.EncBinary()
						_ = yym3548
						if false {
						} else {
							r.EncodeBool(bool(yy3547))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3549 := *x.Privileged
						yym3550 := z.EncBinary()
						_ = yym3550
						if false {
						} else {
							r.EncodeBool(bool(yy3549))
						}
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				if yyq3544[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				if yyq3544[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3553 := *x.RunAsUser
						yym3554 := z.EncBinary()
						_ = yym3554
						if false {
						} else {
							r.EncodeInt(int64(yy3553))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3555 := *x.RunAsUser
						yym3556 := z.EncBinary()
						_ = yym3556
						if false {
						} else {
							r.EncodeInt(int64(yy3555))
						}
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				if yyq3544[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3558 := *x.RunAsNonRoot
						yym3559 := z.EncBinary()
						_ = yym3559
						if false {
						} else {
							r.EncodeBool(bool(yy3558))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3560 := *x.RunAsNonRoot
						yym3561 := z.EncBinary()
						_ = yym3561
						if false {
						} else {
							r.EncodeBool(bool(yy3560))
						}
					}
				}
			}
			if yysep3544 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3562 := z.DecBinary()
	_ = yym3562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3563 := r.ReadMapStart()
			if yyl3563 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3563, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3563 := r.ReadArrayStart()
			if yyl3563 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3564Slc
	var yyhl3564 bool = l >= 0
	for yyj3564 := 0; ; yyj3564++ {
		if yyhl3564 {
			if yyj3564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3564Slc = r.DecodeBytes(yys3564Slc, true, true)
		yys3564 := string(yys3564Slc)
		switch yys3564 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3567 := z.DecBinary()
				_ = yym3567
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3570 := z.DecBinary()
				_ = yym3570
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3572 := z.DecBinary()
				_ = yym3572
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3564)
		} // end switch yys3564
	} // end for yyj3564
	if !yyhl3564 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3573 int
	var yyb3573 bool
	var yyhl3573 bool = l >= 0
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3576 := z.DecBinary()
		_ = yym3576
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3579 := z.DecBinary()
		_ = yym3579
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3581 := z.DecBinary()
		_ = yym3581
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3573++
		if yyhl3573 {
			yyb3573 = yyj3573 > l
		} else {
			yyb3573 = r.CheckBreak()
		}
		if yyb3573 {
			break
		}
		z.DecStructFieldNotFound(yyj3573-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3582 := z.EncBinary()
		_ = yym3582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3583 := !z.EncBinary()
			yy2arr3583 := z.EncBasicHandle().StructToArray
			var yyq3583 [4]bool
			_, _, _ = yysep3583, yyq3583, yy2arr3583
			const yyr3583 bool = false
			yyq3583[0] = x.User != ""
			yyq3583[1] = x.Role != ""
			yyq3583[2] = x.Type != ""
			yyq3583[3] = x.Level != ""
			if yyr3583 || yy2arr3583 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3583 int = 0
				for _, b := range yyq3583 {
					if b {
						yynn3583++
					}
				}
				r.EncodeMapStart(yynn3583)
			}
			if yyr3583 || yy2arr3583 {
				if yyq3583[0] {
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3583[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3586 := z.EncBinary()
					_ = yym3586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3583 || yy2arr3583 {
				if yyq3583[1] {
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3583[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3583 || yy2arr3583 {
				if yyq3583[2] {
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3583[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3583 || yy2arr3583 {
				if yyq3583[3] {
					yym3594 := z.EncBinary()
					_ = yym3594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3583[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3583 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3596 := z.DecBinary()
	_ = yym3596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3597 := r.ReadMapStart()
			if yyl3597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3597 := r.ReadArrayStart()
			if yyl3597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3598Slc
	var yyhl3598 bool = l >= 0
	for yyj3598 := 0; ; yyj3598++ {
		if yyhl3598 {
			if yyj3598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3598Slc = r.DecodeBytes(yys3598Slc, true, true)
		yys3598 := string(yys3598Slc)
		switch yys3598 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3598)
		} // end switch yys3598
	} // end for yyj3598
	if !yyhl3598 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3603 int
	var yyb3603 bool
	var yyhl3603 bool = l >= 0
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3603++
	if yyhl3603 {
		yyb3603 = yyj3603 > l
	} else {
		yyb3603 = r.CheckBreak()
	}
	if yyb3603 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3603++
		if yyhl3603 {
			yyb3603 = yyj3603 > l
		} else {
			yyb3603 = r.CheckBreak()
		}
		if yyb3603 {
			break
		}
		z.DecStructFieldNotFound(yyj3603-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3608 := z.EncBinary()
		_ = yym3608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3609 := !z.EncBinary()
			yy2arr3609 := z.EncBasicHandle().StructToArray
			var yyq3609 [5]bool
			_, _, _ = yysep3609, yyq3609, yy2arr3609
			const yyr3609 bool = false
			yyq3609[0] = x.Kind != ""
			yyq3609[1] = true
			yyq3609[2] = true
			if yyr3609 || yy2arr3609 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3609 int = 2
				for _, b := range yyq3609 {
					if b {
						yynn3609++
					}
				}
				r.EncodeMapStart(yynn3609)
			}
			if yyr3609 || yy2arr3609 {
				if yyq3609[0] {
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				if yyq3609[1] {
					yy3614 := &x.APIVersion
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3614) {
					} else if !yym3615 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3614)
					} else {
						z.EncFallback(yy3614)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3609[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy3616 := &x.APIVersion
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3616) {
					} else if !yym3617 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3616)
					} else {
						z.EncFallback(yy3616)
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				if yyq3609[2] {
					yy3619 := &x.ObjectMeta
					yy3619.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3609[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3620 := &x.ObjectMeta
					yy3620.CodecEncodeSelf(e)
				}
			}
			if yyr3609 || yy2arr3609 {
				yym3622 := z.EncBinary()
				_ = yym3622
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3623 := z.EncBinary()
				_ = yym3623
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3609 || yy2arr3609 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3609 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3627 := z.DecBinary()
	_ = yym3627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3628 := r.ReadMapStart()
			if yyl3628 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3628, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3628 := r.ReadArrayStart()
			if yyl3628 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3629Slc
	var yyhl3629 bool = l >= 0
	for yyj3629 := 0; ; yyj3629++ {
		if yyhl3629 {
			if yyj3629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3629Slc = r.DecodeBytes(yys3629Slc, true, true)
		yys3629 := string(yys3629Slc)
		switch yys3629 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg2_unversioned.GroupVersion{}
			} else {
				yyv3631 := &x.APIVersion
				yym3632 := z.DecBinary()
				_ = yym3632
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3631) {
				} else if !yym3632 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3631)
				} else {
					z.DecFallback(yyv3631, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3633 := &x.ObjectMeta
				yyv3633.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3635 := &x.Data
				yym3636 := z.DecBinary()
				_ = yym3636
				if false {
				} else {
					*yyv3635 = r.DecodeBytes(*(*[]byte)(yyv3635), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3629)
		} // end switch yys3629
	} // end for yyj3629
	if !yyhl3629 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3637 int
	var yyb3637 bool
	var yyhl3637 bool = l >= 0
	yyj3637++
	if yyhl3637 {
		yyb3637 = yyj3637 > l
	} else {
		yyb3637 = r.CheckBreak()
	}
	if yyb3637 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3637++
	if yyhl3637 {
		yyb3637 = yyj3637 > l
	} else {
		yyb3637 = r.CheckBreak()
	}
	if yyb3637 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg2_unversioned.GroupVersion{}
	} else {
		yyv3639 := &x.APIVersion
		yym3640 := z.DecBinary()
		_ = yym3640
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3639) {
		} else if !yym3640 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3639)
		} else {
			z.DecFallback(yyv3639, false)
		}
	}
	yyj3637++
	if yyhl3637 {
		yyb3637 = yyj3637 > l
	} else {
		yyb3637 = r.CheckBreak()
	}
	if yyb3637 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3641 := &x.ObjectMeta
		yyv3641.CodecDecodeSelf(d)
	}
	yyj3637++
	if yyhl3637 {
		yyb3637 = yyj3637 > l
	} else {
		yyb3637 = r.CheckBreak()
	}
	if yyb3637 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3637++
	if yyhl3637 {
		yyb3637 = yyj3637 > l
	} else {
		yyb3637 = r.CheckBreak()
	}
	if yyb3637 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3643 := &x.Data
		yym3644 := z.DecBinary()
		_ = yym3644
		if false {
		} else {
			*yyv3643 = r.DecodeBytes(*(*[]byte)(yyv3643), false, false)
		}
	}
	for {
		yyj3637++
		if yyhl3637 {
			yyb3637 = yyj3637 > l
		} else {
			yyb3637 = r.CheckBreak()
		}
		if yyb3637 {
			break
		}
		z.DecStructFieldNotFound(yyj3637-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3645 := range v {
		yyv3645.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3646 := *v
	yyh3646, yyl3646 := z.DecSliceHelperStart()

	var yyrr3646, yyrl3646 int
	var yyc3646, yyrt3646 bool
	_, _, _ = yyc3646, yyrt3646, yyrl3646
	yyrr3646 = yyl3646

	if yyv3646 == nil {
		if yyrl3646, yyrt3646 = z.DecInferLen(yyl3646, z.DecBasicHandle().MaxInitLen, 16); yyrt3646 {
			yyrr3646 = yyrl3646
		}
		yyv3646 = make([]PersistentVolumeAccessMode, yyrl3646)
		yyc3646 = true
	}

	if yyl3646 == 0 {
		if len(yyv3646) != 0 {
			yyv3646 = yyv3646[:0]
			yyc3646 = true
		}
	} else if yyl3646 > 0 {

		if yyl3646 > cap(yyv3646) {
			yyrl3646, yyrt3646 = z.DecInferLen(yyl3646, z.DecBasicHandle().MaxInitLen, 16)

			yyv23646 := yyv3646
			yyv3646 = make([]PersistentVolumeAccessMode, yyrl3646)
			if len(yyv3646) > 0 {
				copy(yyv3646, yyv23646[:cap(yyv23646)])
			}
			yyc3646 = true

			yyrr3646 = len(yyv3646)
		} else if yyl3646 != len(yyv3646) {
			yyv3646 = yyv3646[:yyl3646]
			yyc3646 = true
		}
		yyj3646 := 0
		for ; yyj3646 < yyrr3646; yyj3646++ {
			if r.TryDecodeAsNil() {
				yyv3646[yyj3646] = ""
			} else {
				yyv3646[yyj3646] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3646 {
			for ; yyj3646 < yyl3646; yyj3646++ {
				yyv3646 = append(yyv3646, "")
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = ""
				} else {
					yyv3646[yyj3646] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3646 := 0; !r.CheckBreak(); yyj3646++ {
			if yyj3646 >= len(yyv3646) {
				yyv3646 = append(yyv3646, "") // var yyz3646 PersistentVolumeAccessMode
				yyc3646 = true
			}

			if yyj3646 < len(yyv3646) {
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = ""
				} else {
					yyv3646[yyj3646] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3646.End()
	}
	if yyc3646 {
		*v = yyv3646
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3650 := range v {
		yy3651 := &yyv3650
		yy3651.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3652 := *v
	yyh3652, yyl3652 := z.DecSliceHelperStart()

	var yyrr3652, yyrl3652 int
	var yyc3652, yyrt3652 bool
	_, _, _ = yyc3652, yyrt3652, yyrl3652
	yyrr3652 = yyl3652

	if yyv3652 == nil {
		if yyrl3652, yyrt3652 = z.DecInferLen(yyl3652, z.DecBasicHandle().MaxInitLen, 400); yyrt3652 {
			yyrr3652 = yyrl3652
		}
		yyv3652 = make([]PersistentVolume, yyrl3652)
		yyc3652 = true
	}

	if yyl3652 == 0 {
		if len(yyv3652) != 0 {
			yyv3652 = yyv3652[:0]
			yyc3652 = true
		}
	} else if yyl3652 > 0 {

		if yyl3652 > cap(yyv3652) {
			yyrl3652, yyrt3652 = z.DecInferLen(yyl3652, z.DecBasicHandle().MaxInitLen, 400)
			yyv3652 = make([]PersistentVolume, yyrl3652)
			yyc3652 = true

			yyrr3652 = len(yyv3652)
		} else if yyl3652 != len(yyv3652) {
			yyv3652 = yyv3652[:yyl3652]
			yyc3652 = true
		}
		yyj3652 := 0
		for ; yyj3652 < yyrr3652; yyj3652++ {
			if r.TryDecodeAsNil() {
				yyv3652[yyj3652] = PersistentVolume{}
			} else {
				yyv3653 := &yyv3652[yyj3652]
				yyv3653.CodecDecodeSelf(d)
			}

		}
		if yyrt3652 {
			for ; yyj3652 < yyl3652; yyj3652++ {
				yyv3652 = append(yyv3652, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = PersistentVolume{}
				} else {
					yyv3654 := &yyv3652[yyj3652]
					yyv3654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3652 := 0; !r.CheckBreak(); yyj3652++ {
			if yyj3652 >= len(yyv3652) {
				yyv3652 = append(yyv3652, PersistentVolume{}) // var yyz3652 PersistentVolume
				yyc3652 = true
			}

			if yyj3652 < len(yyv3652) {
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = PersistentVolume{}
				} else {
					yyv3655 := &yyv3652[yyj3652]
					yyv3655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3652.End()
	}
	if yyc3652 {
		*v = yyv3652
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3656 := range v {
		yy3657 := &yyv3656
		yy3657.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3658 := *v
	yyh3658, yyl3658 := z.DecSliceHelperStart()

	var yyrr3658, yyrl3658 int
	var yyc3658, yyrt3658 bool
	_, _, _ = yyc3658, yyrt3658, yyrl3658
	yyrr3658 = yyl3658

	if yyv3658 == nil {
		if yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 312); yyrt3658 {
			yyrr3658 = yyrl3658
		}
		yyv3658 = make([]PersistentVolumeClaim, yyrl3658)
		yyc3658 = true
	}

	if yyl3658 == 0 {
		if len(yyv3658) != 0 {
			yyv3658 = yyv3658[:0]
			yyc3658 = true
		}
	} else if yyl3658 > 0 {

		if yyl3658 > cap(yyv3658) {
			yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 312)
			yyv3658 = make([]PersistentVolumeClaim, yyrl3658)
			yyc3658 = true

			yyrr3658 = len(yyv3658)
		} else if yyl3658 != len(yyv3658) {
			yyv3658 = yyv3658[:yyl3658]
			yyc3658 = true
		}
		yyj3658 := 0
		for ; yyj3658 < yyrr3658; yyj3658++ {
			if r.TryDecodeAsNil() {
				yyv3658[yyj3658] = PersistentVolumeClaim{}
			} else {
				yyv3659 := &yyv3658[yyj3658]
				yyv3659.CodecDecodeSelf(d)
			}

		}
		if yyrt3658 {
			for ; yyj3658 < yyl3658; yyj3658++ {
				yyv3658 = append(yyv3658, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = PersistentVolumeClaim{}
				} else {
					yyv3660 := &yyv3658[yyj3658]
					yyv3660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3658 := 0; !r.CheckBreak(); yyj3658++ {
			if yyj3658 >= len(yyv3658) {
				yyv3658 = append(yyv3658, PersistentVolumeClaim{}) // var yyz3658 PersistentVolumeClaim
				yyc3658 = true
			}

			if yyj3658 < len(yyv3658) {
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = PersistentVolumeClaim{}
				} else {
					yyv3661 := &yyv3658[yyj3658]
					yyv3661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3658.End()
	}
	if yyc3658 {
		*v = yyv3658
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3662 := range v {
		yy3663 := &yyv3662
		yy3663.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3664 := *v
	yyh3664, yyl3664 := z.DecSliceHelperStart()

	var yyrr3664, yyrl3664 int
	var yyc3664, yyrt3664 bool
	_, _, _ = yyc3664, yyrt3664, yyrl3664
	yyrr3664 = yyl3664

	if yyv3664 == nil {
		if yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 48); yyrt3664 {
			yyrr3664 = yyrl3664
		}
		yyv3664 = make([]DownwardAPIVolumeFile, yyrl3664)
		yyc3664 = true
	}

	if yyl3664 == 0 {
		if len(yyv3664) != 0 {
			yyv3664 = yyv3664[:0]
			yyc3664 = true
		}
	} else if yyl3664 > 0 {

		if yyl3664 > cap(yyv3664) {
			yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 48)
			yyv3664 = make([]DownwardAPIVolumeFile, yyrl3664)
			yyc3664 = true

			yyrr3664 = len(yyv3664)
		} else if yyl3664 != len(yyv3664) {
			yyv3664 = yyv3664[:yyl3664]
			yyc3664 = true
		}
		yyj3664 := 0
		for ; yyj3664 < yyrr3664; yyj3664++ {
			if r.TryDecodeAsNil() {
				yyv3664[yyj3664] = DownwardAPIVolumeFile{}
			} else {
				yyv3665 := &yyv3664[yyj3664]
				yyv3665.CodecDecodeSelf(d)
			}

		}
		if yyrt3664 {
			for ; yyj3664 < yyl3664; yyj3664++ {
				yyv3664 = append(yyv3664, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = DownwardAPIVolumeFile{}
				} else {
					yyv3666 := &yyv3664[yyj3664]
					yyv3666.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3664 := 0; !r.CheckBreak(); yyj3664++ {
			if yyj3664 >= len(yyv3664) {
				yyv3664 = append(yyv3664, DownwardAPIVolumeFile{}) // var yyz3664 DownwardAPIVolumeFile
				yyc3664 = true
			}

			if yyj3664 < len(yyv3664) {
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = DownwardAPIVolumeFile{}
				} else {
					yyv3667 := &yyv3664[yyj3664]
					yyv3667.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3664.End()
	}
	if yyc3664 {
		*v = yyv3664
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3668 := range v {
		yyv3668.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3669 := *v
	yyh3669, yyl3669 := z.DecSliceHelperStart()

	var yyrr3669, yyrl3669 int
	var yyc3669, yyrt3669 bool
	_, _, _ = yyc3669, yyrt3669, yyrl3669
	yyrr3669 = yyl3669

	if yyv3669 == nil {
		if yyrl3669, yyrt3669 = z.DecInferLen(yyl3669, z.DecBasicHandle().MaxInitLen, 16); yyrt3669 {
			yyrr3669 = yyrl3669
		}
		yyv3669 = make([]Capability, yyrl3669)
		yyc3669 = true
	}

	if yyl3669 == 0 {
		if len(yyv3669) != 0 {
			yyv3669 = yyv3669[:0]
			yyc3669 = true
		}
	} else if yyl3669 > 0 {

		if yyl3669 > cap(yyv3669) {
			yyrl3669, yyrt3669 = z.DecInferLen(yyl3669, z.DecBasicHandle().MaxInitLen, 16)

			yyv23669 := yyv3669
			yyv3669 = make([]Capability, yyrl3669)
			if len(yyv3669) > 0 {
				copy(yyv3669, yyv23669[:cap(yyv23669)])
			}
			yyc3669 = true

			yyrr3669 = len(yyv3669)
		} else if yyl3669 != len(yyv3669) {
			yyv3669 = yyv3669[:yyl3669]
			yyc3669 = true
		}
		yyj3669 := 0
		for ; yyj3669 < yyrr3669; yyj3669++ {
			if r.TryDecodeAsNil() {
				yyv3669[yyj3669] = ""
			} else {
				yyv3669[yyj3669] = Capability(r.DecodeString())
			}

		}
		if yyrt3669 {
			for ; yyj3669 < yyl3669; yyj3669++ {
				yyv3669 = append(yyv3669, "")
				if r.TryDecodeAsNil() {
					yyv3669[yyj3669] = ""
				} else {
					yyv3669[yyj3669] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3669 := 0; !r.CheckBreak(); yyj3669++ {
			if yyj3669 >= len(yyv3669) {
				yyv3669 = append(yyv3669, "") // var yyz3669 Capability
				yyc3669 = true
			}

			if yyj3669 < len(yyv3669) {
				if r.TryDecodeAsNil() {
					yyv3669[yyj3669] = ""
				} else {
					yyv3669[yyj3669] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3669.End()
	}
	if yyc3669 {
		*v = yyv3669
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3673 := range v {
		yy3674 := &yyv3673
		yy3674.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3675 := *v
	yyh3675, yyl3675 := z.DecSliceHelperStart()

	var yyrr3675, yyrl3675 int
	var yyc3675, yyrt3675 bool
	_, _, _ = yyc3675, yyrt3675, yyrl3675
	yyrr3675 = yyl3675

	if yyv3675 == nil {
		if yyrl3675, yyrt3675 = z.DecInferLen(yyl3675, z.DecBasicHandle().MaxInitLen, 64); yyrt3675 {
			yyrr3675 = yyrl3675
		}
		yyv3675 = make([]ContainerPort, yyrl3675)
		yyc3675 = true
	}

	if yyl3675 == 0 {
		if len(yyv3675) != 0 {
			yyv3675 = yyv3675[:0]
			yyc3675 = true
		}
	} else if yyl3675 > 0 {

		if yyl3675 > cap(yyv3675) {
			yyrl3675, yyrt3675 = z.DecInferLen(yyl3675, z.DecBasicHandle().MaxInitLen, 64)
			yyv3675 = make([]ContainerPort, yyrl3675)
			yyc3675 = true

			yyrr3675 = len(yyv3675)
		} else if yyl3675 != len(yyv3675) {
			yyv3675 = yyv3675[:yyl3675]
			yyc3675 = true
		}
		yyj3675 := 0
		for ; yyj3675 < yyrr3675; yyj3675++ {
			if r.TryDecodeAsNil() {
				yyv3675[yyj3675] = ContainerPort{}
			} else {
				yyv3676 := &yyv3675[yyj3675]
				yyv3676.CodecDecodeSelf(d)
			}

		}
		if yyrt3675 {
			for ; yyj3675 < yyl3675; yyj3675++ {
				yyv3675 = append(yyv3675, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3675[yyj3675] = ContainerPort{}
				} else {
					yyv3677 := &yyv3675[yyj3675]
					yyv3677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3675 := 0; !r.CheckBreak(); yyj3675++ {
			if yyj3675 >= len(yyv3675) {
				yyv3675 = append(yyv3675, ContainerPort{}) // var yyz3675 ContainerPort
				yyc3675 = true
			}

			if yyj3675 < len(yyv3675) {
				if r.TryDecodeAsNil() {
					yyv3675[yyj3675] = ContainerPort{}
				} else {
					yyv3678 := &yyv3675[yyj3675]
					yyv3678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3675.End()
	}
	if yyc3675 {
		*v = yyv3675
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3679 := range v {
		yy3680 := &yyv3679
		yy3680.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3681 := *v
	yyh3681, yyl3681 := z.DecSliceHelperStart()

	var yyrr3681, yyrl3681 int
	var yyc3681, yyrt3681 bool
	_, _, _ = yyc3681, yyrt3681, yyrl3681
	yyrr3681 = yyl3681

	if yyv3681 == nil {
		if yyrl3681, yyrt3681 = z.DecInferLen(yyl3681, z.DecBasicHandle().MaxInitLen, 40); yyrt3681 {
			yyrr3681 = yyrl3681
		}
		yyv3681 = make([]EnvVar, yyrl3681)
		yyc3681 = true
	}

	if yyl3681 == 0 {
		if len(yyv3681) != 0 {
			yyv3681 = yyv3681[:0]
			yyc3681 = true
		}
	} else if yyl3681 > 0 {

		if yyl3681 > cap(yyv3681) {
			yyrl3681, yyrt3681 = z.DecInferLen(yyl3681, z.DecBasicHandle().MaxInitLen, 40)
			yyv3681 = make([]EnvVar, yyrl3681)
			yyc3681 = true

			yyrr3681 = len(yyv3681)
		} else if yyl3681 != len(yyv3681) {
			yyv3681 = yyv3681[:yyl3681]
			yyc3681 = true
		}
		yyj3681 := 0
		for ; yyj3681 < yyrr3681; yyj3681++ {
			if r.TryDecodeAsNil() {
				yyv3681[yyj3681] = EnvVar{}
			} else {
				yyv3682 := &yyv3681[yyj3681]
				yyv3682.CodecDecodeSelf(d)
			}

		}
		if yyrt3681 {
			for ; yyj3681 < yyl3681; yyj3681++ {
				yyv3681 = append(yyv3681, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3681[yyj3681] = EnvVar{}
				} else {
					yyv3683 := &yyv3681[yyj3681]
					yyv3683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3681 := 0; !r.CheckBreak(); yyj3681++ {
			if yyj3681 >= len(yyv3681) {
				yyv3681 = append(yyv3681, EnvVar{}) // var yyz3681 EnvVar
				yyc3681 = true
			}

			if yyj3681 < len(yyv3681) {
				if r.TryDecodeAsNil() {
					yyv3681[yyj3681] = EnvVar{}
				} else {
					yyv3684 := &yyv3681[yyj3681]
					yyv3684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3681.End()
	}
	if yyc3681 {
		*v = yyv3681
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3685 := range v {
		yy3686 := &yyv3685
		yy3686.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3687 := *v
	yyh3687, yyl3687 := z.DecSliceHelperStart()

	var yyrr3687, yyrl3687 int
	var yyc3687, yyrt3687 bool
	_, _, _ = yyc3687, yyrt3687, yyrl3687
	yyrr3687 = yyl3687

	if yyv3687 == nil {
		if yyrl3687, yyrt3687 = z.DecInferLen(yyl3687, z.DecBasicHandle().MaxInitLen, 40); yyrt3687 {
			yyrr3687 = yyrl3687
		}
		yyv3687 = make([]VolumeMount, yyrl3687)
		yyc3687 = true
	}

	if yyl3687 == 0 {
		if len(yyv3687) != 0 {
			yyv3687 = yyv3687[:0]
			yyc3687 = true
		}
	} else if yyl3687 > 0 {

		if yyl3687 > cap(yyv3687) {
			yyrl3687, yyrt3687 = z.DecInferLen(yyl3687, z.DecBasicHandle().MaxInitLen, 40)
			yyv3687 = make([]VolumeMount, yyrl3687)
			yyc3687 = true

			yyrr3687 = len(yyv3687)
		} else if yyl3687 != len(yyv3687) {
			yyv3687 = yyv3687[:yyl3687]
			yyc3687 = true
		}
		yyj3687 := 0
		for ; yyj3687 < yyrr3687; yyj3687++ {
			if r.TryDecodeAsNil() {
				yyv3687[yyj3687] = VolumeMount{}
			} else {
				yyv3688 := &yyv3687[yyj3687]
				yyv3688.CodecDecodeSelf(d)
			}

		}
		if yyrt3687 {
			for ; yyj3687 < yyl3687; yyj3687++ {
				yyv3687 = append(yyv3687, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3687[yyj3687] = VolumeMount{}
				} else {
					yyv3689 := &yyv3687[yyj3687]
					yyv3689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3687 := 0; !r.CheckBreak(); yyj3687++ {
			if yyj3687 >= len(yyv3687) {
				yyv3687 = append(yyv3687, VolumeMount{}) // var yyz3687 VolumeMount
				yyc3687 = true
			}

			if yyj3687 < len(yyv3687) {
				if r.TryDecodeAsNil() {
					yyv3687[yyj3687] = VolumeMount{}
				} else {
					yyv3690 := &yyv3687[yyj3687]
					yyv3690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3687.End()
	}
	if yyc3687 {
		*v = yyv3687
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3691 := range v {
		yy3692 := &yyv3691
		yy3692.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3693 := *v
	yyh3693, yyl3693 := z.DecSliceHelperStart()

	var yyrr3693, yyrl3693 int
	var yyc3693, yyrt3693 bool
	_, _, _ = yyc3693, yyrt3693, yyrl3693
	yyrr3693 = yyl3693

	if yyv3693 == nil {
		if yyrl3693, yyrt3693 = z.DecInferLen(yyl3693, z.DecBasicHandle().MaxInitLen, 512); yyrt3693 {
			yyrr3693 = yyrl3693
		}
		yyv3693 = make([]Pod, yyrl3693)
		yyc3693 = true
	}

	if yyl3693 == 0 {
		if len(yyv3693) != 0 {
			yyv3693 = yyv3693[:0]
			yyc3693 = true
		}
	} else if yyl3693 > 0 {

		if yyl3693 > cap(yyv3693) {
			yyrl3693, yyrt3693 = z.DecInferLen(yyl3693, z.DecBasicHandle().MaxInitLen, 512)
			yyv3693 = make([]Pod, yyrl3693)
			yyc3693 = true

			yyrr3693 = len(yyv3693)
		} else if yyl3693 != len(yyv3693) {
			yyv3693 = yyv3693[:yyl3693]
			yyc3693 = true
		}
		yyj3693 := 0
		for ; yyj3693 < yyrr3693; yyj3693++ {
			if r.TryDecodeAsNil() {
				yyv3693[yyj3693] = Pod{}
			} else {
				yyv3694 := &yyv3693[yyj3693]
				yyv3694.CodecDecodeSelf(d)
			}

		}
		if yyrt3693 {
			for ; yyj3693 < yyl3693; yyj3693++ {
				yyv3693 = append(yyv3693, Pod{})
				if r.TryDecodeAsNil() {
					yyv3693[yyj3693] = Pod{}
				} else {
					yyv3695 := &yyv3693[yyj3693]
					yyv3695.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3693 := 0; !r.CheckBreak(); yyj3693++ {
			if yyj3693 >= len(yyv3693) {
				yyv3693 = append(yyv3693, Pod{}) // var yyz3693 Pod
				yyc3693 = true
			}

			if yyj3693 < len(yyv3693) {
				if r.TryDecodeAsNil() {
					yyv3693[yyj3693] = Pod{}
				} else {
					yyv3696 := &yyv3693[yyj3693]
					yyv3696.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3693.End()
	}
	if yyc3693 {
		*v = yyv3693
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3697 := range v {
		yy3698 := &yyv3697
		yy3698.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3699 := *v
	yyh3699, yyl3699 := z.DecSliceHelperStart()

	var yyrr3699, yyrl3699 int
	var yyc3699, yyrt3699 bool
	_, _, _ = yyc3699, yyrt3699, yyrl3699
	yyrr3699 = yyl3699

	if yyv3699 == nil {
		if yyrl3699, yyrt3699 = z.DecInferLen(yyl3699, z.DecBasicHandle().MaxInitLen, 144); yyrt3699 {
			yyrr3699 = yyrl3699
		}
		yyv3699 = make([]Volume, yyrl3699)
		yyc3699 = true
	}

	if yyl3699 == 0 {
		if len(yyv3699) != 0 {
			yyv3699 = yyv3699[:0]
			yyc3699 = true
		}
	} else if yyl3699 > 0 {

		if yyl3699 > cap(yyv3699) {
			yyrl3699, yyrt3699 = z.DecInferLen(yyl3699, z.DecBasicHandle().MaxInitLen, 144)
			yyv3699 = make([]Volume, yyrl3699)
			yyc3699 = true

			yyrr3699 = len(yyv3699)
		} else if yyl3699 != len(yyv3699) {
			yyv3699 = yyv3699[:yyl3699]
			yyc3699 = true
		}
		yyj3699 := 0
		for ; yyj3699 < yyrr3699; yyj3699++ {
			if r.TryDecodeAsNil() {
				yyv3699[yyj3699] = Volume{}
			} else {
				yyv3700 := &yyv3699[yyj3699]
				yyv3700.CodecDecodeSelf(d)
			}

		}
		if yyrt3699 {
			for ; yyj3699 < yyl3699; yyj3699++ {
				yyv3699 = append(yyv3699, Volume{})
				if r.TryDecodeAsNil() {
					yyv3699[yyj3699] = Volume{}
				} else {
					yyv3701 := &yyv3699[yyj3699]
					yyv3701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3699 := 0; !r.CheckBreak(); yyj3699++ {
			if yyj3699 >= len(yyv3699) {
				yyv3699 = append(yyv3699, Volume{}) // var yyz3699 Volume
				yyc3699 = true
			}

			if yyj3699 < len(yyv3699) {
				if r.TryDecodeAsNil() {
					yyv3699[yyj3699] = Volume{}
				} else {
					yyv3702 := &yyv3699[yyj3699]
					yyv3702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3699.End()
	}
	if yyc3699 {
		*v = yyv3699
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3703 := range v {
		yy3704 := &yyv3703
		yy3704.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3705 := *v
	yyh3705, yyl3705 := z.DecSliceHelperStart()

	var yyrr3705, yyrl3705 int
	var yyc3705, yyrt3705 bool
	_, _, _ = yyc3705, yyrt3705, yyrl3705
	yyrr3705 = yyl3705

	if yyv3705 == nil {
		if yyrl3705, yyrt3705 = z.DecInferLen(yyl3705, z.DecBasicHandle().MaxInitLen, 256); yyrt3705 {
			yyrr3705 = yyrl3705
		}
		yyv3705 = make([]Container, yyrl3705)
		yyc3705 = true
	}

	if yyl3705 == 0 {
		if len(yyv3705) != 0 {
			yyv3705 = yyv3705[:0]
			yyc3705 = true
		}
	} else if yyl3705 > 0 {

		if yyl3705 > cap(yyv3705) {
			yyrl3705, yyrt3705 = z.DecInferLen(yyl3705, z.DecBasicHandle().MaxInitLen, 256)
			yyv3705 = make([]Container, yyrl3705)
			yyc3705 = true

			yyrr3705 = len(yyv3705)
		} else if yyl3705 != len(yyv3705) {
			yyv3705 = yyv3705[:yyl3705]
			yyc3705 = true
		}
		yyj3705 := 0
		for ; yyj3705 < yyrr3705; yyj3705++ {
			if r.TryDecodeAsNil() {
				yyv3705[yyj3705] = Container{}
			} else {
				yyv3706 := &yyv3705[yyj3705]
				yyv3706.CodecDecodeSelf(d)
			}

		}
		if yyrt3705 {
			for ; yyj3705 < yyl3705; yyj3705++ {
				yyv3705 = append(yyv3705, Container{})
				if r.TryDecodeAsNil() {
					yyv3705[yyj3705] = Container{}
				} else {
					yyv3707 := &yyv3705[yyj3705]
					yyv3707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3705 := 0; !r.CheckBreak(); yyj3705++ {
			if yyj3705 >= len(yyv3705) {
				yyv3705 = append(yyv3705, Container{}) // var yyz3705 Container
				yyc3705 = true
			}

			if yyj3705 < len(yyv3705) {
				if r.TryDecodeAsNil() {
					yyv3705[yyj3705] = Container{}
				} else {
					yyv3708 := &yyv3705[yyj3705]
					yyv3708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3705.End()
	}
	if yyc3705 {
		*v = yyv3705
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3709 := range v {
		yy3710 := &yyv3709
		yy3710.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3711 := *v
	yyh3711, yyl3711 := z.DecSliceHelperStart()

	var yyrr3711, yyrl3711 int
	var yyc3711, yyrt3711 bool
	_, _, _ = yyc3711, yyrt3711, yyrl3711
	yyrr3711 = yyl3711

	if yyv3711 == nil {
		if yyrl3711, yyrt3711 = z.DecInferLen(yyl3711, z.DecBasicHandle().MaxInitLen, 16); yyrt3711 {
			yyrr3711 = yyrl3711
		}
		yyv3711 = make([]LocalObjectReference, yyrl3711)
		yyc3711 = true
	}

	if yyl3711 == 0 {
		if len(yyv3711) != 0 {
			yyv3711 = yyv3711[:0]
			yyc3711 = true
		}
	} else if yyl3711 > 0 {

		if yyl3711 > cap(yyv3711) {
			yyrl3711, yyrt3711 = z.DecInferLen(yyl3711, z.DecBasicHandle().MaxInitLen, 16)
			yyv3711 = make([]LocalObjectReference, yyrl3711)
			yyc3711 = true

			yyrr3711 = len(yyv3711)
		} else if yyl3711 != len(yyv3711) {
			yyv3711 = yyv3711[:yyl3711]
			yyc3711 = true
		}
		yyj3711 := 0
		for ; yyj3711 < yyrr3711; yyj3711++ {
			if r.TryDecodeAsNil() {
				yyv3711[yyj3711] = LocalObjectReference{}
			} else {
				yyv3712 := &yyv3711[yyj3711]
				yyv3712.CodecDecodeSelf(d)
			}

		}
		if yyrt3711 {
			for ; yyj3711 < yyl3711; yyj3711++ {
				yyv3711 = append(yyv3711, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3711[yyj3711] = LocalObjectReference{}
				} else {
					yyv3713 := &yyv3711[yyj3711]
					yyv3713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3711 := 0; !r.CheckBreak(); yyj3711++ {
			if yyj3711 >= len(yyv3711) {
				yyv3711 = append(yyv3711, LocalObjectReference{}) // var yyz3711 LocalObjectReference
				yyc3711 = true
			}

			if yyj3711 < len(yyv3711) {
				if r.TryDecodeAsNil() {
					yyv3711[yyj3711] = LocalObjectReference{}
				} else {
					yyv3714 := &yyv3711[yyj3711]
					yyv3714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3711.End()
	}
	if yyc3711 {
		*v = yyv3711
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3715 := range v {
		yy3716 := &yyv3715
		yy3716.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3717 := *v
	yyh3717, yyl3717 := z.DecSliceHelperStart()

	var yyrr3717, yyrl3717 int
	var yyc3717, yyrt3717 bool
	_, _, _ = yyc3717, yyrt3717, yyrl3717
	yyrr3717 = yyl3717

	if yyv3717 == nil {
		if yyrl3717, yyrt3717 = z.DecInferLen(yyl3717, z.DecBasicHandle().MaxInitLen, 112); yyrt3717 {
			yyrr3717 = yyrl3717
		}
		yyv3717 = make([]PodCondition, yyrl3717)
		yyc3717 = true
	}

	if yyl3717 == 0 {
		if len(yyv3717) != 0 {
			yyv3717 = yyv3717[:0]
			yyc3717 = true
		}
	} else if yyl3717 > 0 {

		if yyl3717 > cap(yyv3717) {
			yyrl3717, yyrt3717 = z.DecInferLen(yyl3717, z.DecBasicHandle().MaxInitLen, 112)
			yyv3717 = make([]PodCondition, yyrl3717)
			yyc3717 = true

			yyrr3717 = len(yyv3717)
		} else if yyl3717 != len(yyv3717) {
			yyv3717 = yyv3717[:yyl3717]
			yyc3717 = true
		}
		yyj3717 := 0
		for ; yyj3717 < yyrr3717; yyj3717++ {
			if r.TryDecodeAsNil() {
				yyv3717[yyj3717] = PodCondition{}
			} else {
				yyv3718 := &yyv3717[yyj3717]
				yyv3718.CodecDecodeSelf(d)
			}

		}
		if yyrt3717 {
			for ; yyj3717 < yyl3717; yyj3717++ {
				yyv3717 = append(yyv3717, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3717[yyj3717] = PodCondition{}
				} else {
					yyv3719 := &yyv3717[yyj3717]
					yyv3719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3717 := 0; !r.CheckBreak(); yyj3717++ {
			if yyj3717 >= len(yyv3717) {
				yyv3717 = append(yyv3717, PodCondition{}) // var yyz3717 PodCondition
				yyc3717 = true
			}

			if yyj3717 < len(yyv3717) {
				if r.TryDecodeAsNil() {
					yyv3717[yyj3717] = PodCondition{}
				} else {
					yyv3720 := &yyv3717[yyj3717]
					yyv3720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3717.End()
	}
	if yyc3717 {
		*v = yyv3717
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3721 := range v {
		yy3722 := &yyv3721
		yy3722.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3723 := *v
	yyh3723, yyl3723 := z.DecSliceHelperStart()

	var yyrr3723, yyrl3723 int
	var yyc3723, yyrt3723 bool
	_, _, _ = yyc3723, yyrt3723, yyrl3723
	yyrr3723 = yyl3723

	if yyv3723 == nil {
		if yyrl3723, yyrt3723 = z.DecInferLen(yyl3723, z.DecBasicHandle().MaxInitLen, 128); yyrt3723 {
			yyrr3723 = yyrl3723
		}
		yyv3723 = make([]ContainerStatus, yyrl3723)
		yyc3723 = true
	}

	if yyl3723 == 0 {
		if len(yyv3723) != 0 {
			yyv3723 = yyv3723[:0]
			yyc3723 = true
		}
	} else if yyl3723 > 0 {

		if yyl3723 > cap(yyv3723) {
			yyrl3723, yyrt3723 = z.DecInferLen(yyl3723, z.DecBasicHandle().MaxInitLen, 128)
			yyv3723 = make([]ContainerStatus, yyrl3723)
			yyc3723 = true

			yyrr3723 = len(yyv3723)
		} else if yyl3723 != len(yyv3723) {
			yyv3723 = yyv3723[:yyl3723]
			yyc3723 = true
		}
		yyj3723 := 0
		for ; yyj3723 < yyrr3723; yyj3723++ {
			if r.TryDecodeAsNil() {
				yyv3723[yyj3723] = ContainerStatus{}
			} else {
				yyv3724 := &yyv3723[yyj3723]
				yyv3724.CodecDecodeSelf(d)
			}

		}
		if yyrt3723 {
			for ; yyj3723 < yyl3723; yyj3723++ {
				yyv3723 = append(yyv3723, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3723[yyj3723] = ContainerStatus{}
				} else {
					yyv3725 := &yyv3723[yyj3723]
					yyv3725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3723 := 0; !r.CheckBreak(); yyj3723++ {
			if yyj3723 >= len(yyv3723) {
				yyv3723 = append(yyv3723, ContainerStatus{}) // var yyz3723 ContainerStatus
				yyc3723 = true
			}

			if yyj3723 < len(yyv3723) {
				if r.TryDecodeAsNil() {
					yyv3723[yyj3723] = ContainerStatus{}
				} else {
					yyv3726 := &yyv3723[yyj3723]
					yyv3726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3723.End()
	}
	if yyc3723 {
		*v = yyv3723
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3727 := range v {
		yy3728 := &yyv3727
		yy3728.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3729 := *v
	yyh3729, yyl3729 := z.DecSliceHelperStart()

	var yyrr3729, yyrl3729 int
	var yyc3729, yyrt3729 bool
	_, _, _ = yyc3729, yyrt3729, yyrl3729
	yyrr3729 = yyl3729

	if yyv3729 == nil {
		if yyrl3729, yyrt3729 = z.DecInferLen(yyl3729, z.DecBasicHandle().MaxInitLen, 536); yyrt3729 {
			yyrr3729 = yyrl3729
		}
		yyv3729 = make([]PodTemplate, yyrl3729)
		yyc3729 = true
	}

	if yyl3729 == 0 {
		if len(yyv3729) != 0 {
			yyv3729 = yyv3729[:0]
			yyc3729 = true
		}
	} else if yyl3729 > 0 {

		if yyl3729 > cap(yyv3729) {
			yyrl3729, yyrt3729 = z.DecInferLen(yyl3729, z.DecBasicHandle().MaxInitLen, 536)
			yyv3729 = make([]PodTemplate, yyrl3729)
			yyc3729 = true

			yyrr3729 = len(yyv3729)
		} else if yyl3729 != len(yyv3729) {
			yyv3729 = yyv3729[:yyl3729]
			yyc3729 = true
		}
		yyj3729 := 0
		for ; yyj3729 < yyrr3729; yyj3729++ {
			if r.TryDecodeAsNil() {
				yyv3729[yyj3729] = PodTemplate{}
			} else {
				yyv3730 := &yyv3729[yyj3729]
				yyv3730.CodecDecodeSelf(d)
			}

		}
		if yyrt3729 {
			for ; yyj3729 < yyl3729; yyj3729++ {
				yyv3729 = append(yyv3729, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3729[yyj3729] = PodTemplate{}
				} else {
					yyv3731 := &yyv3729[yyj3729]
					yyv3731.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3729 := 0; !r.CheckBreak(); yyj3729++ {
			if yyj3729 >= len(yyv3729) {
				yyv3729 = append(yyv3729, PodTemplate{}) // var yyz3729 PodTemplate
				yyc3729 = true
			}

			if yyj3729 < len(yyv3729) {
				if r.TryDecodeAsNil() {
					yyv3729[yyj3729] = PodTemplate{}
				} else {
					yyv3732 := &yyv3729[yyj3729]
					yyv3732.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3729.End()
	}
	if yyc3729 {
		*v = yyv3729
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3733 := range v {
		yy3734 := &yyv3733
		yy3734.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3735 := *v
	yyh3735, yyl3735 := z.DecSliceHelperStart()

	var yyrr3735, yyrl3735 int
	var yyc3735, yyrt3735 bool
	_, _, _ = yyc3735, yyrt3735, yyrl3735
	yyrr3735 = yyl3735

	if yyv3735 == nil {
		if yyrl3735, yyrt3735 = z.DecInferLen(yyl3735, z.DecBasicHandle().MaxInitLen, 248); yyrt3735 {
			yyrr3735 = yyrl3735
		}
		yyv3735 = make([]ReplicationController, yyrl3735)
		yyc3735 = true
	}

	if yyl3735 == 0 {
		if len(yyv3735) != 0 {
			yyv3735 = yyv3735[:0]
			yyc3735 = true
		}
	} else if yyl3735 > 0 {

		if yyl3735 > cap(yyv3735) {
			yyrl3735, yyrt3735 = z.DecInferLen(yyl3735, z.DecBasicHandle().MaxInitLen, 248)
			yyv3735 = make([]ReplicationController, yyrl3735)
			yyc3735 = true

			yyrr3735 = len(yyv3735)
		} else if yyl3735 != len(yyv3735) {
			yyv3735 = yyv3735[:yyl3735]
			yyc3735 = true
		}
		yyj3735 := 0
		for ; yyj3735 < yyrr3735; yyj3735++ {
			if r.TryDecodeAsNil() {
				yyv3735[yyj3735] = ReplicationController{}
			} else {
				yyv3736 := &yyv3735[yyj3735]
				yyv3736.CodecDecodeSelf(d)
			}

		}
		if yyrt3735 {
			for ; yyj3735 < yyl3735; yyj3735++ {
				yyv3735 = append(yyv3735, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3735[yyj3735] = ReplicationController{}
				} else {
					yyv3737 := &yyv3735[yyj3735]
					yyv3737.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3735 := 0; !r.CheckBreak(); yyj3735++ {
			if yyj3735 >= len(yyv3735) {
				yyv3735 = append(yyv3735, ReplicationController{}) // var yyz3735 ReplicationController
				yyc3735 = true
			}

			if yyj3735 < len(yyv3735) {
				if r.TryDecodeAsNil() {
					yyv3735[yyj3735] = ReplicationController{}
				} else {
					yyv3738 := &yyv3735[yyj3735]
					yyv3738.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3735.End()
	}
	if yyc3735 {
		*v = yyv3735
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3739 := range v {
		yy3740 := &yyv3739
		yy3740.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3741 := *v
	yyh3741, yyl3741 := z.DecSliceHelperStart()

	var yyrr3741, yyrl3741 int
	var yyc3741, yyrt3741 bool
	_, _, _ = yyc3741, yyrt3741, yyrl3741
	yyrr3741 = yyl3741

	if yyv3741 == nil {
		if yyrl3741, yyrt3741 = z.DecInferLen(yyl3741, z.DecBasicHandle().MaxInitLen, 352); yyrt3741 {
			yyrr3741 = yyrl3741
		}
		yyv3741 = make([]Service, yyrl3741)
		yyc3741 = true
	}

	if yyl3741 == 0 {
		if len(yyv3741) != 0 {
			yyv3741 = yyv3741[:0]
			yyc3741 = true
		}
	} else if yyl3741 > 0 {

		if yyl3741 > cap(yyv3741) {
			yyrl3741, yyrt3741 = z.DecInferLen(yyl3741, z.DecBasicHandle().MaxInitLen, 352)
			yyv3741 = make([]Service, yyrl3741)
			yyc3741 = true

			yyrr3741 = len(yyv3741)
		} else if yyl3741 != len(yyv3741) {
			yyv3741 = yyv3741[:yyl3741]
			yyc3741 = true
		}
		yyj3741 := 0
		for ; yyj3741 < yyrr3741; yyj3741++ {
			if r.TryDecodeAsNil() {
				yyv3741[yyj3741] = Service{}
			} else {
				yyv3742 := &yyv3741[yyj3741]
				yyv3742.CodecDecodeSelf(d)
			}

		}
		if yyrt3741 {
			for ; yyj3741 < yyl3741; yyj3741++ {
				yyv3741 = append(yyv3741, Service{})
				if r.TryDecodeAsNil() {
					yyv3741[yyj3741] = Service{}
				} else {
					yyv3743 := &yyv3741[yyj3741]
					yyv3743.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3741 := 0; !r.CheckBreak(); yyj3741++ {
			if yyj3741 >= len(yyv3741) {
				yyv3741 = append(yyv3741, Service{}) // var yyz3741 Service
				yyc3741 = true
			}

			if yyj3741 < len(yyv3741) {
				if r.TryDecodeAsNil() {
					yyv3741[yyj3741] = Service{}
				} else {
					yyv3744 := &yyv3741[yyj3741]
					yyv3744.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3741.End()
	}
	if yyc3741 {
		*v = yyv3741
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3745 := range v {
		yy3746 := &yyv3745
		yy3746.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3747 := *v
	yyh3747, yyl3747 := z.DecSliceHelperStart()

	var yyrr3747, yyrl3747 int
	var yyc3747, yyrt3747 bool
	_, _, _ = yyc3747, yyrt3747, yyrl3747
	yyrr3747 = yyl3747

	if yyv3747 == nil {
		if yyrl3747, yyrt3747 = z.DecInferLen(yyl3747, z.DecBasicHandle().MaxInitLen, 32); yyrt3747 {
			yyrr3747 = yyrl3747
		}
		yyv3747 = make([]LoadBalancerIngress, yyrl3747)
		yyc3747 = true
	}

	if yyl3747 == 0 {
		if len(yyv3747) != 0 {
			yyv3747 = yyv3747[:0]
			yyc3747 = true
		}
	} else if yyl3747 > 0 {

		if yyl3747 > cap(yyv3747) {
			yyrl3747, yyrt3747 = z.DecInferLen(yyl3747, z.DecBasicHandle().MaxInitLen, 32)
			yyv3747 = make([]LoadBalancerIngress, yyrl3747)
			yyc3747 = true

			yyrr3747 = len(yyv3747)
		} else if yyl3747 != len(yyv3747) {
			yyv3747 = yyv3747[:yyl3747]
			yyc3747 = true
		}
		yyj3747 := 0
		for ; yyj3747 < yyrr3747; yyj3747++ {
			if r.TryDecodeAsNil() {
				yyv3747[yyj3747] = LoadBalancerIngress{}
			} else {
				yyv3748 := &yyv3747[yyj3747]
				yyv3748.CodecDecodeSelf(d)
			}

		}
		if yyrt3747 {
			for ; yyj3747 < yyl3747; yyj3747++ {
				yyv3747 = append(yyv3747, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3747[yyj3747] = LoadBalancerIngress{}
				} else {
					yyv3749 := &yyv3747[yyj3747]
					yyv3749.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3747 := 0; !r.CheckBreak(); yyj3747++ {
			if yyj3747 >= len(yyv3747) {
				yyv3747 = append(yyv3747, LoadBalancerIngress{}) // var yyz3747 LoadBalancerIngress
				yyc3747 = true
			}

			if yyj3747 < len(yyv3747) {
				if r.TryDecodeAsNil() {
					yyv3747[yyj3747] = LoadBalancerIngress{}
				} else {
					yyv3750 := &yyv3747[yyj3747]
					yyv3750.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3747.End()
	}
	if yyc3747 {
		*v = yyv3747
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3751 := range v {
		yy3752 := &yyv3751
		yy3752.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3753 := *v
	yyh3753, yyl3753 := z.DecSliceHelperStart()

	var yyrr3753, yyrl3753 int
	var yyc3753, yyrt3753 bool
	_, _, _ = yyc3753, yyrt3753, yyrl3753
	yyrr3753 = yyl3753

	if yyv3753 == nil {
		if yyrl3753, yyrt3753 = z.DecInferLen(yyl3753, z.DecBasicHandle().MaxInitLen, 80); yyrt3753 {
			yyrr3753 = yyrl3753
		}
		yyv3753 = make([]ServicePort, yyrl3753)
		yyc3753 = true
	}

	if yyl3753 == 0 {
		if len(yyv3753) != 0 {
			yyv3753 = yyv3753[:0]
			yyc3753 = true
		}
	} else if yyl3753 > 0 {

		if yyl3753 > cap(yyv3753) {
			yyrl3753, yyrt3753 = z.DecInferLen(yyl3753, z.DecBasicHandle().MaxInitLen, 80)
			yyv3753 = make([]ServicePort, yyrl3753)
			yyc3753 = true

			yyrr3753 = len(yyv3753)
		} else if yyl3753 != len(yyv3753) {
			yyv3753 = yyv3753[:yyl3753]
			yyc3753 = true
		}
		yyj3753 := 0
		for ; yyj3753 < yyrr3753; yyj3753++ {
			if r.TryDecodeAsNil() {
				yyv3753[yyj3753] = ServicePort{}
			} else {
				yyv3754 := &yyv3753[yyj3753]
				yyv3754.CodecDecodeSelf(d)
			}

		}
		if yyrt3753 {
			for ; yyj3753 < yyl3753; yyj3753++ {
				yyv3753 = append(yyv3753, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3753[yyj3753] = ServicePort{}
				} else {
					yyv3755 := &yyv3753[yyj3753]
					yyv3755.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3753 := 0; !r.CheckBreak(); yyj3753++ {
			if yyj3753 >= len(yyv3753) {
				yyv3753 = append(yyv3753, ServicePort{}) // var yyz3753 ServicePort
				yyc3753 = true
			}

			if yyj3753 < len(yyv3753) {
				if r.TryDecodeAsNil() {
					yyv3753[yyj3753] = ServicePort{}
				} else {
					yyv3756 := &yyv3753[yyj3753]
					yyv3756.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3753.End()
	}
	if yyc3753 {
		*v = yyv3753
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3757 := range v {
		yy3758 := &yyv3757
		yy3758.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3759 := *v
	yyh3759, yyl3759 := z.DecSliceHelperStart()

	var yyrr3759, yyrl3759 int
	var yyc3759, yyrt3759 bool
	_, _, _ = yyc3759, yyrt3759, yyrl3759
	yyrr3759 = yyl3759

	if yyv3759 == nil {
		if yyrl3759, yyrt3759 = z.DecInferLen(yyl3759, z.DecBasicHandle().MaxInitLen, 112); yyrt3759 {
			yyrr3759 = yyrl3759
		}
		yyv3759 = make([]ObjectReference, yyrl3759)
		yyc3759 = true
	}

	if yyl3759 == 0 {
		if len(yyv3759) != 0 {
			yyv3759 = yyv3759[:0]
			yyc3759 = true
		}
	} else if yyl3759 > 0 {

		if yyl3759 > cap(yyv3759) {
			yyrl3759, yyrt3759 = z.DecInferLen(yyl3759, z.DecBasicHandle().MaxInitLen, 112)
			yyv3759 = make([]ObjectReference, yyrl3759)
			yyc3759 = true

			yyrr3759 = len(yyv3759)
		} else if yyl3759 != len(yyv3759) {
			yyv3759 = yyv3759[:yyl3759]
			yyc3759 = true
		}
		yyj3759 := 0
		for ; yyj3759 < yyrr3759; yyj3759++ {
			if r.TryDecodeAsNil() {
				yyv3759[yyj3759] = ObjectReference{}
			} else {
				yyv3760 := &yyv3759[yyj3759]
				yyv3760.CodecDecodeSelf(d)
			}

		}
		if yyrt3759 {
			for ; yyj3759 < yyl3759; yyj3759++ {
				yyv3759 = append(yyv3759, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3759[yyj3759] = ObjectReference{}
				} else {
					yyv3761 := &yyv3759[yyj3759]
					yyv3761.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3759 := 0; !r.CheckBreak(); yyj3759++ {
			if yyj3759 >= len(yyv3759) {
				yyv3759 = append(yyv3759, ObjectReference{}) // var yyz3759 ObjectReference
				yyc3759 = true
			}

			if yyj3759 < len(yyv3759) {
				if r.TryDecodeAsNil() {
					yyv3759[yyj3759] = ObjectReference{}
				} else {
					yyv3762 := &yyv3759[yyj3759]
					yyv3762.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3759.End()
	}
	if yyc3759 {
		*v = yyv3759
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3763 := range v {
		yy3764 := &yyv3763
		yy3764.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3765 := *v
	yyh3765, yyl3765 := z.DecSliceHelperStart()

	var yyrr3765, yyrl3765 int
	var yyc3765, yyrt3765 bool
	_, _, _ = yyc3765, yyrt3765, yyrl3765
	yyrr3765 = yyl3765

	if yyv3765 == nil {
		if yyrl3765, yyrt3765 = z.DecInferLen(yyl3765, z.DecBasicHandle().MaxInitLen, 256); yyrt3765 {
			yyrr3765 = yyrl3765
		}
		yyv3765 = make([]ServiceAccount, yyrl3765)
		yyc3765 = true
	}

	if yyl3765 == 0 {
		if len(yyv3765) != 0 {
			yyv3765 = yyv3765[:0]
			yyc3765 = true
		}
	} else if yyl3765 > 0 {

		if yyl3765 > cap(yyv3765) {
			yyrl3765, yyrt3765 = z.DecInferLen(yyl3765, z.DecBasicHandle().MaxInitLen, 256)
			yyv3765 = make([]ServiceAccount, yyrl3765)
			yyc3765 = true

			yyrr3765 = len(yyv3765)
		} else if yyl3765 != len(yyv3765) {
			yyv3765 = yyv3765[:yyl3765]
			yyc3765 = true
		}
		yyj3765 := 0
		for ; yyj3765 < yyrr3765; yyj3765++ {
			if r.TryDecodeAsNil() {
				yyv3765[yyj3765] = ServiceAccount{}
			} else {
				yyv3766 := &yyv3765[yyj3765]
				yyv3766.CodecDecodeSelf(d)
			}

		}
		if yyrt3765 {
			for ; yyj3765 < yyl3765; yyj3765++ {
				yyv3765 = append(yyv3765, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3765[yyj3765] = ServiceAccount{}
				} else {
					yyv3767 := &yyv3765[yyj3765]
					yyv3767.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3765 := 0; !r.CheckBreak(); yyj3765++ {
			if yyj3765 >= len(yyv3765) {
				yyv3765 = append(yyv3765, ServiceAccount{}) // var yyz3765 ServiceAccount
				yyc3765 = true
			}

			if yyj3765 < len(yyv3765) {
				if r.TryDecodeAsNil() {
					yyv3765[yyj3765] = ServiceAccount{}
				} else {
					yyv3768 := &yyv3765[yyj3765]
					yyv3768.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3765.End()
	}
	if yyc3765 {
		*v = yyv3765
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3769 := range v {
		yy3770 := &yyv3769
		yy3770.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3771 := *v
	yyh3771, yyl3771 := z.DecSliceHelperStart()

	var yyrr3771, yyrl3771 int
	var yyc3771, yyrt3771 bool
	_, _, _ = yyc3771, yyrt3771, yyrl3771
	yyrr3771 = yyl3771

	if yyv3771 == nil {
		if yyrl3771, yyrt3771 = z.DecInferLen(yyl3771, z.DecBasicHandle().MaxInitLen, 72); yyrt3771 {
			yyrr3771 = yyrl3771
		}
		yyv3771 = make([]EndpointSubset, yyrl3771)
		yyc3771 = true
	}

	if yyl3771 == 0 {
		if len(yyv3771) != 0 {
			yyv3771 = yyv3771[:0]
			yyc3771 = true
		}
	} else if yyl3771 > 0 {

		if yyl3771 > cap(yyv3771) {
			yyrl3771, yyrt3771 = z.DecInferLen(yyl3771, z.DecBasicHandle().MaxInitLen, 72)
			yyv3771 = make([]EndpointSubset, yyrl3771)
			yyc3771 = true

			yyrr3771 = len(yyv3771)
		} else if yyl3771 != len(yyv3771) {
			yyv3771 = yyv3771[:yyl3771]
			yyc3771 = true
		}
		yyj3771 := 0
		for ; yyj3771 < yyrr3771; yyj3771++ {
			if r.TryDecodeAsNil() {
				yyv3771[yyj3771] = EndpointSubset{}
			} else {
				yyv3772 := &yyv3771[yyj3771]
				yyv3772.CodecDecodeSelf(d)
			}

		}
		if yyrt3771 {
			for ; yyj3771 < yyl3771; yyj3771++ {
				yyv3771 = append(yyv3771, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3771[yyj3771] = EndpointSubset{}
				} else {
					yyv3773 := &yyv3771[yyj3771]
					yyv3773.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3771 := 0; !r.CheckBreak(); yyj3771++ {
			if yyj3771 >= len(yyv3771) {
				yyv3771 = append(yyv3771, EndpointSubset{}) // var yyz3771 EndpointSubset
				yyc3771 = true
			}

			if yyj3771 < len(yyv3771) {
				if r.TryDecodeAsNil() {
					yyv3771[yyj3771] = EndpointSubset{}
				} else {
					yyv3774 := &yyv3771[yyj3771]
					yyv3774.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3771.End()
	}
	if yyc3771 {
		*v = yyv3771
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3775 := range v {
		yy3776 := &yyv3775
		yy3776.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3777 := *v
	yyh3777, yyl3777 := z.DecSliceHelperStart()

	var yyrr3777, yyrl3777 int
	var yyc3777, yyrt3777 bool
	_, _, _ = yyc3777, yyrt3777, yyrl3777
	yyrr3777 = yyl3777

	if yyv3777 == nil {
		if yyrl3777, yyrt3777 = z.DecInferLen(yyl3777, z.DecBasicHandle().MaxInitLen, 24); yyrt3777 {
			yyrr3777 = yyrl3777
		}
		yyv3777 = make([]EndpointAddress, yyrl3777)
		yyc3777 = true
	}

	if yyl3777 == 0 {
		if len(yyv3777) != 0 {
			yyv3777 = yyv3777[:0]
			yyc3777 = true
		}
	} else if yyl3777 > 0 {

		if yyl3777 > cap(yyv3777) {
			yyrl3777, yyrt3777 = z.DecInferLen(yyl3777, z.DecBasicHandle().MaxInitLen, 24)
			yyv3777 = make([]EndpointAddress, yyrl3777)
			yyc3777 = true

			yyrr3777 = len(yyv3777)
		} else if yyl3777 != len(yyv3777) {
			yyv3777 = yyv3777[:yyl3777]
			yyc3777 = true
		}
		yyj3777 := 0
		for ; yyj3777 < yyrr3777; yyj3777++ {
			if r.TryDecodeAsNil() {
				yyv3777[yyj3777] = EndpointAddress{}
			} else {
				yyv3778 := &yyv3777[yyj3777]
				yyv3778.CodecDecodeSelf(d)
			}

		}
		if yyrt3777 {
			for ; yyj3777 < yyl3777; yyj3777++ {
				yyv3777 = append(yyv3777, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3777[yyj3777] = EndpointAddress{}
				} else {
					yyv3779 := &yyv3777[yyj3777]
					yyv3779.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3777 := 0; !r.CheckBreak(); yyj3777++ {
			if yyj3777 >= len(yyv3777) {
				yyv3777 = append(yyv3777, EndpointAddress{}) // var yyz3777 EndpointAddress
				yyc3777 = true
			}

			if yyj3777 < len(yyv3777) {
				if r.TryDecodeAsNil() {
					yyv3777[yyj3777] = EndpointAddress{}
				} else {
					yyv3780 := &yyv3777[yyj3777]
					yyv3780.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3777.End()
	}
	if yyc3777 {
		*v = yyv3777
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3781 := range v {
		yy3782 := &yyv3781
		yy3782.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3783 := *v
	yyh3783, yyl3783 := z.DecSliceHelperStart()

	var yyrr3783, yyrl3783 int
	var yyc3783, yyrt3783 bool
	_, _, _ = yyc3783, yyrt3783, yyrl3783
	yyrr3783 = yyl3783

	if yyv3783 == nil {
		if yyrl3783, yyrt3783 = z.DecInferLen(yyl3783, z.DecBasicHandle().MaxInitLen, 40); yyrt3783 {
			yyrr3783 = yyrl3783
		}
		yyv3783 = make([]EndpointPort, yyrl3783)
		yyc3783 = true
	}

	if yyl3783 == 0 {
		if len(yyv3783) != 0 {
			yyv3783 = yyv3783[:0]
			yyc3783 = true
		}
	} else if yyl3783 > 0 {

		if yyl3783 > cap(yyv3783) {
			yyrl3783, yyrt3783 = z.DecInferLen(yyl3783, z.DecBasicHandle().MaxInitLen, 40)
			yyv3783 = make([]EndpointPort, yyrl3783)
			yyc3783 = true

			yyrr3783 = len(yyv3783)
		} else if yyl3783 != len(yyv3783) {
			yyv3783 = yyv3783[:yyl3783]
			yyc3783 = true
		}
		yyj3783 := 0
		for ; yyj3783 < yyrr3783; yyj3783++ {
			if r.TryDecodeAsNil() {
				yyv3783[yyj3783] = EndpointPort{}
			} else {
				yyv3784 := &yyv3783[yyj3783]
				yyv3784.CodecDecodeSelf(d)
			}

		}
		if yyrt3783 {
			for ; yyj3783 < yyl3783; yyj3783++ {
				yyv3783 = append(yyv3783, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3783[yyj3783] = EndpointPort{}
				} else {
					yyv3785 := &yyv3783[yyj3783]
					yyv3785.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3783 := 0; !r.CheckBreak(); yyj3783++ {
			if yyj3783 >= len(yyv3783) {
				yyv3783 = append(yyv3783, EndpointPort{}) // var yyz3783 EndpointPort
				yyc3783 = true
			}

			if yyj3783 < len(yyv3783) {
				if r.TryDecodeAsNil() {
					yyv3783[yyj3783] = EndpointPort{}
				} else {
					yyv3786 := &yyv3783[yyj3783]
					yyv3786.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3783.End()
	}
	if yyc3783 {
		*v = yyv3783
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3787 := range v {
		yy3788 := &yyv3787
		yy3788.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3789 := *v
	yyh3789, yyl3789 := z.DecSliceHelperStart()

	var yyrr3789, yyrl3789 int
	var yyc3789, yyrt3789 bool
	_, _, _ = yyc3789, yyrt3789, yyrl3789
	yyrr3789 = yyl3789

	if yyv3789 == nil {
		if yyrl3789, yyrt3789 = z.DecInferLen(yyl3789, z.DecBasicHandle().MaxInitLen, 232); yyrt3789 {
			yyrr3789 = yyrl3789
		}
		yyv3789 = make([]Endpoints, yyrl3789)
		yyc3789 = true
	}

	if yyl3789 == 0 {
		if len(yyv3789) != 0 {
			yyv3789 = yyv3789[:0]
			yyc3789 = true
		}
	} else if yyl3789 > 0 {

		if yyl3789 > cap(yyv3789) {
			yyrl3789, yyrt3789 = z.DecInferLen(yyl3789, z.DecBasicHandle().MaxInitLen, 232)
			yyv3789 = make([]Endpoints, yyrl3789)
			yyc3789 = true

			yyrr3789 = len(yyv3789)
		} else if yyl3789 != len(yyv3789) {
			yyv3789 = yyv3789[:yyl3789]
			yyc3789 = true
		}
		yyj3789 := 0
		for ; yyj3789 < yyrr3789; yyj3789++ {
			if r.TryDecodeAsNil() {
				yyv3789[yyj3789] = Endpoints{}
			} else {
				yyv3790 := &yyv3789[yyj3789]
				yyv3790.CodecDecodeSelf(d)
			}

		}
		if yyrt3789 {
			for ; yyj3789 < yyl3789; yyj3789++ {
				yyv3789 = append(yyv3789, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3789[yyj3789] = Endpoints{}
				} else {
					yyv3791 := &yyv3789[yyj3789]
					yyv3791.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3789 := 0; !r.CheckBreak(); yyj3789++ {
			if yyj3789 >= len(yyv3789) {
				yyv3789 = append(yyv3789, Endpoints{}) // var yyz3789 Endpoints
				yyc3789 = true
			}

			if yyj3789 < len(yyv3789) {
				if r.TryDecodeAsNil() {
					yyv3789[yyj3789] = Endpoints{}
				} else {
					yyv3792 := &yyv3789[yyj3789]
					yyv3792.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3789.End()
	}
	if yyc3789 {
		*v = yyv3789
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3793 := range v {
		yy3794 := &yyv3793
		yy3794.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3795 := *v
	yyh3795, yyl3795 := z.DecSliceHelperStart()

	var yyrr3795, yyrl3795 int
	var yyc3795, yyrt3795 bool
	_, _, _ = yyc3795, yyrt3795, yyrl3795
	yyrr3795 = yyl3795

	if yyv3795 == nil {
		if yyrl3795, yyrt3795 = z.DecInferLen(yyl3795, z.DecBasicHandle().MaxInitLen, 112); yyrt3795 {
			yyrr3795 = yyrl3795
		}
		yyv3795 = make([]NodeCondition, yyrl3795)
		yyc3795 = true
	}

	if yyl3795 == 0 {
		if len(yyv3795) != 0 {
			yyv3795 = yyv3795[:0]
			yyc3795 = true
		}
	} else if yyl3795 > 0 {

		if yyl3795 > cap(yyv3795) {
			yyrl3795, yyrt3795 = z.DecInferLen(yyl3795, z.DecBasicHandle().MaxInitLen, 112)
			yyv3795 = make([]NodeCondition, yyrl3795)
			yyc3795 = true

			yyrr3795 = len(yyv3795)
		} else if yyl3795 != len(yyv3795) {
			yyv3795 = yyv3795[:yyl3795]
			yyc3795 = true
		}
		yyj3795 := 0
		for ; yyj3795 < yyrr3795; yyj3795++ {
			if r.TryDecodeAsNil() {
				yyv3795[yyj3795] = NodeCondition{}
			} else {
				yyv3796 := &yyv3795[yyj3795]
				yyv3796.CodecDecodeSelf(d)
			}

		}
		if yyrt3795 {
			for ; yyj3795 < yyl3795; yyj3795++ {
				yyv3795 = append(yyv3795, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3795[yyj3795] = NodeCondition{}
				} else {
					yyv3797 := &yyv3795[yyj3795]
					yyv3797.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3795 := 0; !r.CheckBreak(); yyj3795++ {
			if yyj3795 >= len(yyv3795) {
				yyv3795 = append(yyv3795, NodeCondition{}) // var yyz3795 NodeCondition
				yyc3795 = true
			}

			if yyj3795 < len(yyv3795) {
				if r.TryDecodeAsNil() {
					yyv3795[yyj3795] = NodeCondition{}
				} else {
					yyv3798 := &yyv3795[yyj3795]
					yyv3798.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3795.End()
	}
	if yyc3795 {
		*v = yyv3795
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3799 := range v {
		yy3800 := &yyv3799
		yy3800.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3801 := *v
	yyh3801, yyl3801 := z.DecSliceHelperStart()

	var yyrr3801, yyrl3801 int
	var yyc3801, yyrt3801 bool
	_, _, _ = yyc3801, yyrt3801, yyrl3801
	yyrr3801 = yyl3801

	if yyv3801 == nil {
		if yyrl3801, yyrt3801 = z.DecInferLen(yyl3801, z.DecBasicHandle().MaxInitLen, 32); yyrt3801 {
			yyrr3801 = yyrl3801
		}
		yyv3801 = make([]NodeAddress, yyrl3801)
		yyc3801 = true
	}

	if yyl3801 == 0 {
		if len(yyv3801) != 0 {
			yyv3801 = yyv3801[:0]
			yyc3801 = true
		}
	} else if yyl3801 > 0 {

		if yyl3801 > cap(yyv3801) {
			yyrl3801, yyrt3801 = z.DecInferLen(yyl3801, z.DecBasicHandle().MaxInitLen, 32)
			yyv3801 = make([]NodeAddress, yyrl3801)
			yyc3801 = true

			yyrr3801 = len(yyv3801)
		} else if yyl3801 != len(yyv3801) {
			yyv3801 = yyv3801[:yyl3801]
			yyc3801 = true
		}
		yyj3801 := 0
		for ; yyj3801 < yyrr3801; yyj3801++ {
			if r.TryDecodeAsNil() {
				yyv3801[yyj3801] = NodeAddress{}
			} else {
				yyv3802 := &yyv3801[yyj3801]
				yyv3802.CodecDecodeSelf(d)
			}

		}
		if yyrt3801 {
			for ; yyj3801 < yyl3801; yyj3801++ {
				yyv3801 = append(yyv3801, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3801[yyj3801] = NodeAddress{}
				} else {
					yyv3803 := &yyv3801[yyj3801]
					yyv3803.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3801 := 0; !r.CheckBreak(); yyj3801++ {
			if yyj3801 >= len(yyv3801) {
				yyv3801 = append(yyv3801, NodeAddress{}) // var yyz3801 NodeAddress
				yyc3801 = true
			}

			if yyj3801 < len(yyv3801) {
				if r.TryDecodeAsNil() {
					yyv3801[yyj3801] = NodeAddress{}
				} else {
					yyv3804 := &yyv3801[yyj3801]
					yyv3804.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3801.End()
	}
	if yyc3801 {
		*v = yyv3801
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3805, yyv3805 := range v {
		yyk3805.CodecEncodeSelf(e)
		yy3806 := &yyv3805
		yym3807 := z.EncBinary()
		_ = yym3807
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3806) {
		} else if !yym3807 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3806)
		} else {
			z.EncFallback(yy3806)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3808 := *v
	yyl3808 := r.ReadMapStart()
	yybh3808 := z.DecBasicHandle()
	if yyv3808 == nil {
		yyrl3808, _ := z.DecInferLen(yyl3808, yybh3808.MaxInitLen, 40)
		yyv3808 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3808)
		*v = yyv3808
	}
	var yymk3808 ResourceName
	var yymv3808 pkg3_resource.Quantity
	var yymg3808 bool
	if yybh3808.MapValueReset {
		yymg3808 = true
	}
	if yyl3808 > 0 {
		for yyj3808 := 0; yyj3808 < yyl3808; yyj3808++ {
			if r.TryDecodeAsNil() {
				yymk3808 = ""
			} else {
				yymk3808 = ResourceName(r.DecodeString())
			}

			if yymg3808 {
				yymv3808 = yyv3808[yymk3808]
			} else {
				yymv3808 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3808 = pkg3_resource.Quantity{}
			} else {
				yyv3810 := &yymv3808
				yym3811 := z.DecBinary()
				_ = yym3811
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3810) {
				} else if !yym3811 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3810)
				} else {
					z.DecFallback(yyv3810, false)
				}
			}

			if yyv3808 != nil {
				yyv3808[yymk3808] = yymv3808
			}
		}
	} else if yyl3808 < 0 {
		for yyj3808 := 0; !r.CheckBreak(); yyj3808++ {
			if r.TryDecodeAsNil() {
				yymk3808 = ""
			} else {
				yymk3808 = ResourceName(r.DecodeString())
			}

			if yymg3808 {
				yymv3808 = yyv3808[yymk3808]
			} else {
				yymv3808 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3808 = pkg3_resource.Quantity{}
			} else {
				yyv3813 := &yymv3808
				yym3814 := z.DecBinary()
				_ = yym3814
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3813) {
				} else if !yym3814 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3813)
				} else {
					z.DecFallback(yyv3813, false)
				}
			}

			if yyv3808 != nil {
				yyv3808[yymk3808] = yymv3808
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3815 := range v {
		yy3816 := &yyv3815
		yy3816.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3817 := *v
	yyh3817, yyl3817 := z.DecSliceHelperStart()

	var yyrr3817, yyrl3817 int
	var yyc3817, yyrt3817 bool
	_, _, _ = yyc3817, yyrt3817, yyrl3817
	yyrr3817 = yyl3817

	if yyv3817 == nil {
		if yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 472); yyrt3817 {
			yyrr3817 = yyrl3817
		}
		yyv3817 = make([]Node, yyrl3817)
		yyc3817 = true
	}

	if yyl3817 == 0 {
		if len(yyv3817) != 0 {
			yyv3817 = yyv3817[:0]
			yyc3817 = true
		}
	} else if yyl3817 > 0 {

		if yyl3817 > cap(yyv3817) {
			yyrl3817, yyrt3817 = z.DecInferLen(yyl3817, z.DecBasicHandle().MaxInitLen, 472)
			yyv3817 = make([]Node, yyrl3817)
			yyc3817 = true

			yyrr3817 = len(yyv3817)
		} else if yyl3817 != len(yyv3817) {
			yyv3817 = yyv3817[:yyl3817]
			yyc3817 = true
		}
		yyj3817 := 0
		for ; yyj3817 < yyrr3817; yyj3817++ {
			if r.TryDecodeAsNil() {
				yyv3817[yyj3817] = Node{}
			} else {
				yyv3818 := &yyv3817[yyj3817]
				yyv3818.CodecDecodeSelf(d)
			}

		}
		if yyrt3817 {
			for ; yyj3817 < yyl3817; yyj3817++ {
				yyv3817 = append(yyv3817, Node{})
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = Node{}
				} else {
					yyv3819 := &yyv3817[yyj3817]
					yyv3819.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3817 := 0; !r.CheckBreak(); yyj3817++ {
			if yyj3817 >= len(yyv3817) {
				yyv3817 = append(yyv3817, Node{}) // var yyz3817 Node
				yyc3817 = true
			}

			if yyj3817 < len(yyv3817) {
				if r.TryDecodeAsNil() {
					yyv3817[yyj3817] = Node{}
				} else {
					yyv3820 := &yyv3817[yyj3817]
					yyv3820.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3817.End()
	}
	if yyc3817 {
		*v = yyv3817
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3821 := range v {
		yyv3821.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3822 := *v
	yyh3822, yyl3822 := z.DecSliceHelperStart()

	var yyrr3822, yyrl3822 int
	var yyc3822, yyrt3822 bool
	_, _, _ = yyc3822, yyrt3822, yyrl3822
	yyrr3822 = yyl3822

	if yyv3822 == nil {
		if yyrl3822, yyrt3822 = z.DecInferLen(yyl3822, z.DecBasicHandle().MaxInitLen, 16); yyrt3822 {
			yyrr3822 = yyrl3822
		}
		yyv3822 = make([]FinalizerName, yyrl3822)
		yyc3822 = true
	}

	if yyl3822 == 0 {
		if len(yyv3822) != 0 {
			yyv3822 = yyv3822[:0]
			yyc3822 = true
		}
	} else if yyl3822 > 0 {

		if yyl3822 > cap(yyv3822) {
			yyrl3822, yyrt3822 = z.DecInferLen(yyl3822, z.DecBasicHandle().MaxInitLen, 16)

			yyv23822 := yyv3822
			yyv3822 = make([]FinalizerName, yyrl3822)
			if len(yyv3822) > 0 {
				copy(yyv3822, yyv23822[:cap(yyv23822)])
			}
			yyc3822 = true

			yyrr3822 = len(yyv3822)
		} else if yyl3822 != len(yyv3822) {
			yyv3822 = yyv3822[:yyl3822]
			yyc3822 = true
		}
		yyj3822 := 0
		for ; yyj3822 < yyrr3822; yyj3822++ {
			if r.TryDecodeAsNil() {
				yyv3822[yyj3822] = ""
			} else {
				yyv3822[yyj3822] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3822 {
			for ; yyj3822 < yyl3822; yyj3822++ {
				yyv3822 = append(yyv3822, "")
				if r.TryDecodeAsNil() {
					yyv3822[yyj3822] = ""
				} else {
					yyv3822[yyj3822] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3822 := 0; !r.CheckBreak(); yyj3822++ {
			if yyj3822 >= len(yyv3822) {
				yyv3822 = append(yyv3822, "") // var yyz3822 FinalizerName
				yyc3822 = true
			}

			if yyj3822 < len(yyv3822) {
				if r.TryDecodeAsNil() {
					yyv3822[yyj3822] = ""
				} else {
					yyv3822[yyj3822] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3822.End()
	}
	if yyc3822 {
		*v = yyv3822
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3826 := range v {
		yy3827 := &yyv3826
		yy3827.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3828 := *v
	yyh3828, yyl3828 := z.DecSliceHelperStart()

	var yyrr3828, yyrl3828 int
	var yyc3828, yyrt3828 bool
	_, _, _ = yyc3828, yyrt3828, yyrl3828
	yyrr3828 = yyl3828

	if yyv3828 == nil {
		if yyrl3828, yyrt3828 = z.DecInferLen(yyl3828, z.DecBasicHandle().MaxInitLen, 248); yyrt3828 {
			yyrr3828 = yyrl3828
		}
		yyv3828 = make([]Namespace, yyrl3828)
		yyc3828 = true
	}

	if yyl3828 == 0 {
		if len(yyv3828) != 0 {
			yyv3828 = yyv3828[:0]
			yyc3828 = true
		}
	} else if yyl3828 > 0 {

		if yyl3828 > cap(yyv3828) {
			yyrl3828, yyrt3828 = z.DecInferLen(yyl3828, z.DecBasicHandle().MaxInitLen, 248)
			yyv3828 = make([]Namespace, yyrl3828)
			yyc3828 = true

			yyrr3828 = len(yyv3828)
		} else if yyl3828 != len(yyv3828) {
			yyv3828 = yyv3828[:yyl3828]
			yyc3828 = true
		}
		yyj3828 := 0
		for ; yyj3828 < yyrr3828; yyj3828++ {
			if r.TryDecodeAsNil() {
				yyv3828[yyj3828] = Namespace{}
			} else {
				yyv3829 := &yyv3828[yyj3828]
				yyv3829.CodecDecodeSelf(d)
			}

		}
		if yyrt3828 {
			for ; yyj3828 < yyl3828; yyj3828++ {
				yyv3828 = append(yyv3828, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3828[yyj3828] = Namespace{}
				} else {
					yyv3830 := &yyv3828[yyj3828]
					yyv3830.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3828 := 0; !r.CheckBreak(); yyj3828++ {
			if yyj3828 >= len(yyv3828) {
				yyv3828 = append(yyv3828, Namespace{}) // var yyz3828 Namespace
				yyc3828 = true
			}

			if yyj3828 < len(yyv3828) {
				if r.TryDecodeAsNil() {
					yyv3828[yyj3828] = Namespace{}
				} else {
					yyv3831 := &yyv3828[yyj3828]
					yyv3831.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3828.End()
	}
	if yyc3828 {
		*v = yyv3828
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3832 := range v {
		yy3833 := &yyv3832
		yy3833.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3834 := *v
	yyh3834, yyl3834 := z.DecSliceHelperStart()

	var yyrr3834, yyrl3834 int
	var yyc3834, yyrt3834 bool
	_, _, _ = yyc3834, yyrt3834, yyrl3834
	yyrr3834 = yyl3834

	if yyv3834 == nil {
		if yyrl3834, yyrt3834 = z.DecInferLen(yyl3834, z.DecBasicHandle().MaxInitLen, 440); yyrt3834 {
			yyrr3834 = yyrl3834
		}
		yyv3834 = make([]Event, yyrl3834)
		yyc3834 = true
	}

	if yyl3834 == 0 {
		if len(yyv3834) != 0 {
			yyv3834 = yyv3834[:0]
			yyc3834 = true
		}
	} else if yyl3834 > 0 {

		if yyl3834 > cap(yyv3834) {
			yyrl3834, yyrt3834 = z.DecInferLen(yyl3834, z.DecBasicHandle().MaxInitLen, 440)
			yyv3834 = make([]Event, yyrl3834)
			yyc3834 = true

			yyrr3834 = len(yyv3834)
		} else if yyl3834 != len(yyv3834) {
			yyv3834 = yyv3834[:yyl3834]
			yyc3834 = true
		}
		yyj3834 := 0
		for ; yyj3834 < yyrr3834; yyj3834++ {
			if r.TryDecodeAsNil() {
				yyv3834[yyj3834] = Event{}
			} else {
				yyv3835 := &yyv3834[yyj3834]
				yyv3835.CodecDecodeSelf(d)
			}

		}
		if yyrt3834 {
			for ; yyj3834 < yyl3834; yyj3834++ {
				yyv3834 = append(yyv3834, Event{})
				if r.TryDecodeAsNil() {
					yyv3834[yyj3834] = Event{}
				} else {
					yyv3836 := &yyv3834[yyj3834]
					yyv3836.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3834 := 0; !r.CheckBreak(); yyj3834++ {
			if yyj3834 >= len(yyv3834) {
				yyv3834 = append(yyv3834, Event{}) // var yyz3834 Event
				yyc3834 = true
			}

			if yyj3834 < len(yyv3834) {
				if r.TryDecodeAsNil() {
					yyv3834[yyj3834] = Event{}
				} else {
					yyv3837 := &yyv3834[yyj3834]
					yyv3837.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3834.End()
	}
	if yyc3834 {
		*v = yyv3834
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3838 := range v {
		if yyv3838 == nil {
			r.EncodeNil()
		} else {
			yym3839 := z.EncBinary()
			_ = yym3839
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3838) {
			} else {
				z.EncFallback(yyv3838)
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3840 := *v
	yyh3840, yyl3840 := z.DecSliceHelperStart()

	var yyrr3840, yyrl3840 int
	var yyc3840, yyrt3840 bool
	_, _, _ = yyc3840, yyrt3840, yyrl3840
	yyrr3840 = yyl3840

	if yyv3840 == nil {
		if yyrl3840, yyrt3840 = z.DecInferLen(yyl3840, z.DecBasicHandle().MaxInitLen, 16); yyrt3840 {
			yyrr3840 = yyrl3840
		}
		yyv3840 = make([]pkg8_runtime.Object, yyrl3840)
		yyc3840 = true
	}

	if yyl3840 == 0 {
		if len(yyv3840) != 0 {
			yyv3840 = yyv3840[:0]
			yyc3840 = true
		}
	} else if yyl3840 > 0 {

		if yyl3840 > cap(yyv3840) {
			yyrl3840, yyrt3840 = z.DecInferLen(yyl3840, z.DecBasicHandle().MaxInitLen, 16)
			yyv3840 = make([]pkg8_runtime.Object, yyrl3840)
			yyc3840 = true

			yyrr3840 = len(yyv3840)
		} else if yyl3840 != len(yyv3840) {
			yyv3840 = yyv3840[:yyl3840]
			yyc3840 = true
		}
		yyj3840 := 0
		for ; yyj3840 < yyrr3840; yyj3840++ {
			if r.TryDecodeAsNil() {
				yyv3840[yyj3840] = nil
			} else {
				yyv3841 := &yyv3840[yyj3840]
				yym3842 := z.DecBinary()
				_ = yym3842
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3841) {
				} else {
					z.DecFallback(yyv3841, true)
				}
			}

		}
		if yyrt3840 {
			for ; yyj3840 < yyl3840; yyj3840++ {
				yyv3840 = append(yyv3840, nil)
				if r.TryDecodeAsNil() {
					yyv3840[yyj3840] = nil
				} else {
					yyv3843 := &yyv3840[yyj3840]
					yym3844 := z.DecBinary()
					_ = yym3844
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3843) {
					} else {
						z.DecFallback(yyv3843, true)
					}
				}

			}
		}

	} else {
		for yyj3840 := 0; !r.CheckBreak(); yyj3840++ {
			if yyj3840 >= len(yyv3840) {
				yyv3840 = append(yyv3840, nil) // var yyz3840 pkg8_runtime.Object
				yyc3840 = true
			}

			if yyj3840 < len(yyv3840) {
				if r.TryDecodeAsNil() {
					yyv3840[yyj3840] = nil
				} else {
					yyv3845 := &yyv3840[yyj3840]
					yym3846 := z.DecBinary()
					_ = yym3846
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3845) {
					} else {
						z.DecFallback(yyv3845, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3840.End()
	}
	if yyc3840 {
		*v = yyv3840
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3847 := range v {
		yy3848 := &yyv3847
		yy3848.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3849 := *v
	yyh3849, yyl3849 := z.DecSliceHelperStart()

	var yyrr3849, yyrl3849 int
	var yyc3849, yyrt3849 bool
	_, _, _ = yyc3849, yyrt3849, yyrl3849
	yyrr3849 = yyl3849

	if yyv3849 == nil {
		if yyrl3849, yyrt3849 = z.DecInferLen(yyl3849, z.DecBasicHandle().MaxInitLen, 56); yyrt3849 {
			yyrr3849 = yyrl3849
		}
		yyv3849 = make([]LimitRangeItem, yyrl3849)
		yyc3849 = true
	}

	if yyl3849 == 0 {
		if len(yyv3849) != 0 {
			yyv3849 = yyv3849[:0]
			yyc3849 = true
		}
	} else if yyl3849 > 0 {

		if yyl3849 > cap(yyv3849) {
			yyrl3849, yyrt3849 = z.DecInferLen(yyl3849, z.DecBasicHandle().MaxInitLen, 56)
			yyv3849 = make([]LimitRangeItem, yyrl3849)
			yyc3849 = true

			yyrr3849 = len(yyv3849)
		} else if yyl3849 != len(yyv3849) {
			yyv3849 = yyv3849[:yyl3849]
			yyc3849 = true
		}
		yyj3849 := 0
		for ; yyj3849 < yyrr3849; yyj3849++ {
			if r.TryDecodeAsNil() {
				yyv3849[yyj3849] = LimitRangeItem{}
			} else {
				yyv3850 := &yyv3849[yyj3849]
				yyv3850.CodecDecodeSelf(d)
			}

		}
		if yyrt3849 {
			for ; yyj3849 < yyl3849; yyj3849++ {
				yyv3849 = append(yyv3849, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3849[yyj3849] = LimitRangeItem{}
				} else {
					yyv3851 := &yyv3849[yyj3849]
					yyv3851.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3849 := 0; !r.CheckBreak(); yyj3849++ {
			if yyj3849 >= len(yyv3849) {
				yyv3849 = append(yyv3849, LimitRangeItem{}) // var yyz3849 LimitRangeItem
				yyc3849 = true
			}

			if yyj3849 < len(yyv3849) {
				if r.TryDecodeAsNil() {
					yyv3849[yyj3849] = LimitRangeItem{}
				} else {
					yyv3852 := &yyv3849[yyj3849]
					yyv3852.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3849.End()
	}
	if yyc3849 {
		*v = yyv3849
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3853 := range v {
		yy3854 := &yyv3853
		yy3854.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3855 := *v
	yyh3855, yyl3855 := z.DecSliceHelperStart()

	var yyrr3855, yyrl3855 int
	var yyc3855, yyrt3855 bool
	_, _, _ = yyc3855, yyrt3855, yyrl3855
	yyrr3855 = yyl3855

	if yyv3855 == nil {
		if yyrl3855, yyrt3855 = z.DecInferLen(yyl3855, z.DecBasicHandle().MaxInitLen, 232); yyrt3855 {
			yyrr3855 = yyrl3855
		}
		yyv3855 = make([]LimitRange, yyrl3855)
		yyc3855 = true
	}

	if yyl3855 == 0 {
		if len(yyv3855) != 0 {
			yyv3855 = yyv3855[:0]
			yyc3855 = true
		}
	} else if yyl3855 > 0 {

		if yyl3855 > cap(yyv3855) {
			yyrl3855, yyrt3855 = z.DecInferLen(yyl3855, z.DecBasicHandle().MaxInitLen, 232)
			yyv3855 = make([]LimitRange, yyrl3855)
			yyc3855 = true

			yyrr3855 = len(yyv3855)
		} else if yyl3855 != len(yyv3855) {
			yyv3855 = yyv3855[:yyl3855]
			yyc3855 = true
		}
		yyj3855 := 0
		for ; yyj3855 < yyrr3855; yyj3855++ {
			if r.TryDecodeAsNil() {
				yyv3855[yyj3855] = LimitRange{}
			} else {
				yyv3856 := &yyv3855[yyj3855]
				yyv3856.CodecDecodeSelf(d)
			}

		}
		if yyrt3855 {
			for ; yyj3855 < yyl3855; yyj3855++ {
				yyv3855 = append(yyv3855, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3855[yyj3855] = LimitRange{}
				} else {
					yyv3857 := &yyv3855[yyj3855]
					yyv3857.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3855 := 0; !r.CheckBreak(); yyj3855++ {
			if yyj3855 >= len(yyv3855) {
				yyv3855 = append(yyv3855, LimitRange{}) // var yyz3855 LimitRange
				yyc3855 = true
			}

			if yyj3855 < len(yyv3855) {
				if r.TryDecodeAsNil() {
					yyv3855[yyj3855] = LimitRange{}
				} else {
					yyv3858 := &yyv3855[yyj3855]
					yyv3858.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3855.End()
	}
	if yyc3855 {
		*v = yyv3855
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3859 := range v {
		yy3860 := &yyv3859
		yy3860.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3861 := *v
	yyh3861, yyl3861 := z.DecSliceHelperStart()

	var yyrr3861, yyrl3861 int
	var yyc3861, yyrt3861 bool
	_, _, _ = yyc3861, yyrt3861, yyrl3861
	yyrr3861 = yyl3861

	if yyv3861 == nil {
		if yyrl3861, yyrt3861 = z.DecInferLen(yyl3861, z.DecBasicHandle().MaxInitLen, 232); yyrt3861 {
			yyrr3861 = yyrl3861
		}
		yyv3861 = make([]ResourceQuota, yyrl3861)
		yyc3861 = true
	}

	if yyl3861 == 0 {
		if len(yyv3861) != 0 {
			yyv3861 = yyv3861[:0]
			yyc3861 = true
		}
	} else if yyl3861 > 0 {

		if yyl3861 > cap(yyv3861) {
			yyrl3861, yyrt3861 = z.DecInferLen(yyl3861, z.DecBasicHandle().MaxInitLen, 232)
			yyv3861 = make([]ResourceQuota, yyrl3861)
			yyc3861 = true

			yyrr3861 = len(yyv3861)
		} else if yyl3861 != len(yyv3861) {
			yyv3861 = yyv3861[:yyl3861]
			yyc3861 = true
		}
		yyj3861 := 0
		for ; yyj3861 < yyrr3861; yyj3861++ {
			if r.TryDecodeAsNil() {
				yyv3861[yyj3861] = ResourceQuota{}
			} else {
				yyv3862 := &yyv3861[yyj3861]
				yyv3862.CodecDecodeSelf(d)
			}

		}
		if yyrt3861 {
			for ; yyj3861 < yyl3861; yyj3861++ {
				yyv3861 = append(yyv3861, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3861[yyj3861] = ResourceQuota{}
				} else {
					yyv3863 := &yyv3861[yyj3861]
					yyv3863.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3861 := 0; !r.CheckBreak(); yyj3861++ {
			if yyj3861 >= len(yyv3861) {
				yyv3861 = append(yyv3861, ResourceQuota{}) // var yyz3861 ResourceQuota
				yyc3861 = true
			}

			if yyj3861 < len(yyv3861) {
				if r.TryDecodeAsNil() {
					yyv3861[yyj3861] = ResourceQuota{}
				} else {
					yyv3864 := &yyv3861[yyj3861]
					yyv3864.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3861.End()
	}
	if yyc3861 {
		*v = yyv3861
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3865, yyv3865 := range v {
		yym3866 := z.EncBinary()
		_ = yym3866
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3865))
		}
		if yyv3865 == nil {
			r.EncodeNil()
		} else {
			yym3867 := z.EncBinary()
			_ = yym3867
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3865))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3868 := *v
	yyl3868 := r.ReadMapStart()
	yybh3868 := z.DecBasicHandle()
	if yyv3868 == nil {
		yyrl3868, _ := z.DecInferLen(yyl3868, yybh3868.MaxInitLen, 40)
		yyv3868 = make(map[string][]uint8, yyrl3868)
		*v = yyv3868
	}
	var yymk3868 string
	var yymv3868 []uint8
	var yymg3868 bool
	if yybh3868.MapValueReset {
		yymg3868 = true
	}
	if yyl3868 > 0 {
		for yyj3868 := 0; yyj3868 < yyl3868; yyj3868++ {
			if r.TryDecodeAsNil() {
				yymk3868 = ""
			} else {
				yymk3868 = string(r.DecodeString())
			}

			if yymg3868 {
				yymv3868 = yyv3868[yymk3868]
			} else {
				yymv3868 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3868 = nil
			} else {
				yyv3870 := &yymv3868
				yym3871 := z.DecBinary()
				_ = yym3871
				if false {
				} else {
					*yyv3870 = r.DecodeBytes(*(*[]byte)(yyv3870), false, false)
				}
			}

			if yyv3868 != nil {
				yyv3868[yymk3868] = yymv3868
			}
		}
	} else if yyl3868 < 0 {
		for yyj3868 := 0; !r.CheckBreak(); yyj3868++ {
			if r.TryDecodeAsNil() {
				yymk3868 = ""
			} else {
				yymk3868 = string(r.DecodeString())
			}

			if yymg3868 {
				yymv3868 = yyv3868[yymk3868]
			} else {
				yymv3868 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3868 = nil
			} else {
				yyv3873 := &yymv3868
				yym3874 := z.DecBinary()
				_ = yym3874
				if false {
				} else {
					*yyv3873 = r.DecodeBytes(*(*[]byte)(yyv3873), false, false)
				}
			}

			if yyv3868 != nil {
				yyv3868[yymk3868] = yymv3868
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3875 := range v {
		yy3876 := &yyv3875
		yy3876.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3877 := *v
	yyh3877, yyl3877 := z.DecSliceHelperStart()

	var yyrr3877, yyrl3877 int
	var yyc3877, yyrt3877 bool
	_, _, _ = yyc3877, yyrt3877, yyrl3877
	yyrr3877 = yyl3877

	if yyv3877 == nil {
		if yyrl3877, yyrt3877 = z.DecInferLen(yyl3877, z.DecBasicHandle().MaxInitLen, 232); yyrt3877 {
			yyrr3877 = yyrl3877
		}
		yyv3877 = make([]Secret, yyrl3877)
		yyc3877 = true
	}

	if yyl3877 == 0 {
		if len(yyv3877) != 0 {
			yyv3877 = yyv3877[:0]
			yyc3877 = true
		}
	} else if yyl3877 > 0 {

		if yyl3877 > cap(yyv3877) {
			yyrl3877, yyrt3877 = z.DecInferLen(yyl3877, z.DecBasicHandle().MaxInitLen, 232)
			yyv3877 = make([]Secret, yyrl3877)
			yyc3877 = true

			yyrr3877 = len(yyv3877)
		} else if yyl3877 != len(yyv3877) {
			yyv3877 = yyv3877[:yyl3877]
			yyc3877 = true
		}
		yyj3877 := 0
		for ; yyj3877 < yyrr3877; yyj3877++ {
			if r.TryDecodeAsNil() {
				yyv3877[yyj3877] = Secret{}
			} else {
				yyv3878 := &yyv3877[yyj3877]
				yyv3878.CodecDecodeSelf(d)
			}

		}
		if yyrt3877 {
			for ; yyj3877 < yyl3877; yyj3877++ {
				yyv3877 = append(yyv3877, Secret{})
				if r.TryDecodeAsNil() {
					yyv3877[yyj3877] = Secret{}
				} else {
					yyv3879 := &yyv3877[yyj3877]
					yyv3879.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3877 := 0; !r.CheckBreak(); yyj3877++ {
			if yyj3877 >= len(yyv3877) {
				yyv3877 = append(yyv3877, Secret{}) // var yyz3877 Secret
				yyc3877 = true
			}

			if yyj3877 < len(yyv3877) {
				if r.TryDecodeAsNil() {
					yyv3877[yyj3877] = Secret{}
				} else {
					yyv3880 := &yyv3877[yyj3877]
					yyv3880.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3877.End()
	}
	if yyc3877 {
		*v = yyv3877
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3881 := range v {
		yy3882 := &yyv3881
		yy3882.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3883 := *v
	yyh3883, yyl3883 := z.DecSliceHelperStart()

	var yyrr3883, yyrl3883 int
	var yyc3883, yyrt3883 bool
	_, _, _ = yyc3883, yyrt3883, yyrl3883
	yyrr3883 = yyl3883

	if yyv3883 == nil {
		if yyrl3883, yyrt3883 = z.DecInferLen(yyl3883, z.DecBasicHandle().MaxInitLen, 64); yyrt3883 {
			yyrr3883 = yyrl3883
		}
		yyv3883 = make([]ComponentCondition, yyrl3883)
		yyc3883 = true
	}

	if yyl3883 == 0 {
		if len(yyv3883) != 0 {
			yyv3883 = yyv3883[:0]
			yyc3883 = true
		}
	} else if yyl3883 > 0 {

		if yyl3883 > cap(yyv3883) {
			yyrl3883, yyrt3883 = z.DecInferLen(yyl3883, z.DecBasicHandle().MaxInitLen, 64)
			yyv3883 = make([]ComponentCondition, yyrl3883)
			yyc3883 = true

			yyrr3883 = len(yyv3883)
		} else if yyl3883 != len(yyv3883) {
			yyv3883 = yyv3883[:yyl3883]
			yyc3883 = true
		}
		yyj3883 := 0
		for ; yyj3883 < yyrr3883; yyj3883++ {
			if r.TryDecodeAsNil() {
				yyv3883[yyj3883] = ComponentCondition{}
			} else {
				yyv3884 := &yyv3883[yyj3883]
				yyv3884.CodecDecodeSelf(d)
			}

		}
		if yyrt3883 {
			for ; yyj3883 < yyl3883; yyj3883++ {
				yyv3883 = append(yyv3883, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3883[yyj3883] = ComponentCondition{}
				} else {
					yyv3885 := &yyv3883[yyj3883]
					yyv3885.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3883 := 0; !r.CheckBreak(); yyj3883++ {
			if yyj3883 >= len(yyv3883) {
				yyv3883 = append(yyv3883, ComponentCondition{}) // var yyz3883 ComponentCondition
				yyc3883 = true
			}

			if yyj3883 < len(yyv3883) {
				if r.TryDecodeAsNil() {
					yyv3883[yyj3883] = ComponentCondition{}
				} else {
					yyv3886 := &yyv3883[yyj3883]
					yyv3886.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3883.End()
	}
	if yyc3883 {
		*v = yyv3883
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3887 := range v {
		yy3888 := &yyv3887
		yy3888.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3889 := *v
	yyh3889, yyl3889 := z.DecSliceHelperStart()

	var yyrr3889, yyrl3889 int
	var yyc3889, yyrt3889 bool
	_, _, _ = yyc3889, yyrt3889, yyrl3889
	yyrr3889 = yyl3889

	if yyv3889 == nil {
		if yyrl3889, yyrt3889 = z.DecInferLen(yyl3889, z.DecBasicHandle().MaxInitLen, 232); yyrt3889 {
			yyrr3889 = yyrl3889
		}
		yyv3889 = make([]ComponentStatus, yyrl3889)
		yyc3889 = true
	}

	if yyl3889 == 0 {
		if len(yyv3889) != 0 {
			yyv3889 = yyv3889[:0]
			yyc3889 = true
		}
	} else if yyl3889 > 0 {

		if yyl3889 > cap(yyv3889) {
			yyrl3889, yyrt3889 = z.DecInferLen(yyl3889, z.DecBasicHandle().MaxInitLen, 232)
			yyv3889 = make([]ComponentStatus, yyrl3889)
			yyc3889 = true

			yyrr3889 = len(yyv3889)
		} else if yyl3889 != len(yyv3889) {
			yyv3889 = yyv3889[:yyl3889]
			yyc3889 = true
		}
		yyj3889 := 0
		for ; yyj3889 < yyrr3889; yyj3889++ {
			if r.TryDecodeAsNil() {
				yyv3889[yyj3889] = ComponentStatus{}
			} else {
				yyv3890 := &yyv3889[yyj3889]
				yyv3890.CodecDecodeSelf(d)
			}

		}
		if yyrt3889 {
			for ; yyj3889 < yyl3889; yyj3889++ {
				yyv3889 = append(yyv3889, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3889[yyj3889] = ComponentStatus{}
				} else {
					yyv3891 := &yyv3889[yyj3889]
					yyv3891.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3889 := 0; !r.CheckBreak(); yyj3889++ {
			if yyj3889 >= len(yyv3889) {
				yyv3889 = append(yyv3889, ComponentStatus{}) // var yyz3889 ComponentStatus
				yyc3889 = true
			}

			if yyj3889 < len(yyv3889) {
				if r.TryDecodeAsNil() {
					yyv3889[yyj3889] = ComponentStatus{}
				} else {
					yyv3892 := &yyv3889[yyj3889]
					yyv3892.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3889.End()
	}
	if yyc3889 {
		*v = yyv3889
	}

}
