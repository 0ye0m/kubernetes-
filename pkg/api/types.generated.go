/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [18]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(18)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj124 int
	var yyb124 bool
	var yyhl124 bool = l >= 0
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj124++
		if yyhl124 {
			yyb124 = yyj124 > l
		} else {
			yyb124 = r.CheckBreak()
		}
		if yyb124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [17]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.HostPath != nil
			yyq144[1] = x.EmptyDir != nil
			yyq144[2] = x.GCEPersistentDisk != nil
			yyq144[3] = x.AWSElasticBlockStore != nil
			yyq144[4] = x.GitRepo != nil
			yyq144[5] = x.Secret != nil
			yyq144[6] = x.NFS != nil
			yyq144[7] = x.ISCSI != nil
			yyq144[8] = x.Glusterfs != nil
			yyq144[9] = x.PersistentVolumeClaim != nil
			yyq144[10] = x.RBD != nil
			yyq144[11] = x.FlexVolume != nil
			yyq144[12] = x.Cinder != nil
			yyq144[13] = x.CephFS != nil
			yyq144[14] = x.Flocker != nil
			yyq144[15] = x.DownwardAPI != nil
			yyq144[16] = x.FC != nil
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(17)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym200 := z.EncBinary()
		_ = yym200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep201 := !z.EncBinary()
			yy2arr201 := z.EncBasicHandle().StructToArray
			var yyq201 [12]bool
			_, _, _ = yysep201, yyq201, yy2arr201
			const yyr201 bool = false
			yyq201[0] = x.GCEPersistentDisk != nil
			yyq201[1] = x.AWSElasticBlockStore != nil
			yyq201[2] = x.HostPath != nil
			yyq201[3] = x.Glusterfs != nil
			yyq201[4] = x.NFS != nil
			yyq201[5] = x.RBD != nil
			yyq201[6] = x.ISCSI != nil
			yyq201[7] = x.FlexVolume != nil
			yyq201[8] = x.Cinder != nil
			yyq201[9] = x.CephFS != nil
			yyq201[10] = x.FC != nil
			yyq201[11] = x.Flocker != nil
			var yynn201 int
			if yyr201 || yy2arr201 {
				r.EncodeArrayStart(12)
			} else {
				yynn201 = 0
				for _, b := range yyq201 {
					if b {
						yynn201++
					}
				}
				r.EncodeMapStart(yynn201)
				yynn201 = 0
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq201[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym214 := z.DecBinary()
	_ = yym214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct215 := r.ContainerType()
		if yyct215 == codecSelferValueTypeMap1234 {
			yyl215 := r.ReadMapStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl215, d)
			}
		} else if yyct215 == codecSelferValueTypeArray1234 {
			yyl215 := r.ReadArrayStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys216Slc
	var yyhl216 bool = l >= 0
	for yyj216 := 0; ; yyj216++ {
		if yyhl216 {
			if yyj216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys216Slc = r.DecodeBytes(yys216Slc, true, true)
		yys216 := string(yys216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys216 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys216)
		} // end switch yys216
	} // end for yyj216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj229 int
	var yyb229 bool
	var yyhl229 bool = l >= 0
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj229++
		if yyhl229 {
			yyb229 = yyj229 > l
		} else {
			yyb229 = r.CheckBreak()
		}
		if yyb229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym242 := z.EncBinary()
		_ = yym242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep243 := !z.EncBinary()
			yy2arr243 := z.EncBasicHandle().StructToArray
			var yyq243 [2]bool
			_, _, _ = yysep243, yyq243, yy2arr243
			const yyr243 bool = false
			yyq243[1] = x.ReadOnly != false
			var yynn243 int
			if yyr243 || yy2arr243 {
				r.EncodeArrayStart(2)
			} else {
				yynn243 = 1
				for _, b := range yyq243 {
					if b {
						yynn243++
					}
				}
				r.EncodeMapStart(yynn243)
				yynn243 = 0
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym245 := z.EncBinary()
				_ = yym245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym246 := z.EncBinary()
				_ = yym246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq243[1] {
					yym248 := z.EncBinary()
					_ = yym248
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym249 := z.EncBinary()
					_ = yym249
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr243 || yy2arr243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym250 := z.DecBinary()
	_ = yym250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct251 := r.ContainerType()
		if yyct251 == codecSelferValueTypeMap1234 {
			yyl251 := r.ReadMapStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl251, d)
			}
		} else if yyct251 == codecSelferValueTypeArray1234 {
			yyl251 := r.ReadArrayStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys252Slc
	var yyhl252 bool = l >= 0
	for yyj252 := 0; ; yyj252++ {
		if yyhl252 {
			if yyj252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys252Slc = r.DecodeBytes(yys252Slc, true, true)
		yys252 := string(yys252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys252 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys252)
		} // end switch yys252
	} // end for yyj252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj255 int
	var yyb255 bool
	var yyhl255 bool = l >= 0
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj255++
		if yyhl255 {
			yyb255 = yyj255 > l
		} else {
			yyb255 = r.CheckBreak()
		}
		if yyb255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.ObjectMeta
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy270 := &x.Spec
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Spec
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy273 := &x.Status
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Status
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv280 := &x.ObjectMeta
				yyv280.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv281 := &x.Spec
				yyv281.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv282 := &x.Status
				yyv282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yyv286.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv287 := &x.Spec
		yyv287.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv288 := &x.Status
		yyv288.CodecDecodeSelf(d)
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [16]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq290[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq290[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq290[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq290[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq290[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq290[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq290[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq290[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq290[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq290[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq290[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq290[13] = len(x.AccessModes) != 0
			yyq290[14] = x.ClaimRef != nil
			yyq290[15] = x.PersistentVolumeReclaimPolicy != ""
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(16)
			} else {
				yynn290 = 1
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr290 || yy2arr290 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr290 || yy2arr290 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr290 || yy2arr290 {
				if yyn294 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr290 || yy2arr290 {
				if yyn295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr290 || yy2arr290 {
				if yyn296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr290 || yy2arr290 {
				if yyn297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr290 || yy2arr290 {
				if yyn298 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr290 || yy2arr290 {
				if yyn299 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr290 || yy2arr290 {
				if yyn300 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr290 || yy2arr290 {
				if yyn301 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr290 || yy2arr290 {
				if yyn302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr290 || yy2arr290 {
				if yyn303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[13] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym305 := z.EncBinary()
						_ = yym305
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[14] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[15] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq290[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv312 := &x.Capacity
				yyv312.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv325 := &x.AccessModes
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv325), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv330 := &x.Capacity
		yyv330.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv343 := &x.AccessModes
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv343), d)
		}
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym347 := z.EncBinary()
	_ = yym347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym349 := z.EncBinary()
		_ = yym349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep350 := !z.EncBinary()
			yy2arr350 := z.EncBasicHandle().StructToArray
			var yyq350 [3]bool
			_, _, _ = yysep350, yyq350, yy2arr350
			const yyr350 bool = false
			yyq350[0] = x.Phase != ""
			yyq350[1] = x.Message != ""
			yyq350[2] = x.Reason != ""
			var yynn350 int
			if yyr350 || yy2arr350 {
				r.EncodeArrayStart(3)
			} else {
				yynn350 = 0
				for _, b := range yyq350 {
					if b {
						yynn350++
					}
				}
				r.EncodeMapStart(yynn350)
				yynn350 = 0
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[1] {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[2] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym358 := z.DecBinary()
	_ = yym358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct359 := r.ContainerType()
		if yyct359 == codecSelferValueTypeMap1234 {
			yyl359 := r.ReadMapStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl359, d)
			}
		} else if yyct359 == codecSelferValueTypeArray1234 {
			yyl359 := r.ReadArrayStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys360Slc
	var yyhl360 bool = l >= 0
	for yyj360 := 0; ; yyj360++ {
		if yyhl360 {
			if yyj360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys360Slc = r.DecodeBytes(yys360Slc, true, true)
		yys360 := string(yys360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys360 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys360)
		} // end switch yys360
	} // end for yyj360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [4]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = x.Kind != ""
			yyq369[1] = x.APIVersion != ""
			yyq369[2] = true
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(4)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[1] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[2] {
					yy377 := &x.ListMeta
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy377) {
					} else {
						z.EncFallback(yy377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy379 := &x.ListMeta
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy379) {
					} else {
						z.EncFallback(yy379)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv389 := &x.ListMeta
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv389) {
				} else {
					z.DecFallback(yyv389, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv391 := &x.Items
				yym392 := z.DecBinary()
				_ = yym392
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv391), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv396 := &x.ListMeta
		yym397 := z.DecBinary()
		_ = yym397
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv396) {
		} else {
			z.DecFallback(yyv396, false)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv398 := &x.Items
		yym399 := z.DecBinary()
		_ = yym399
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv398), d)
		}
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym400 := z.EncBinary()
		_ = yym400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep401 := !z.EncBinary()
			yy2arr401 := z.EncBasicHandle().StructToArray
			var yyq401 [5]bool
			_, _, _ = yysep401, yyq401, yy2arr401
			const yyr401 bool = false
			yyq401[0] = x.Kind != ""
			yyq401[1] = x.APIVersion != ""
			yyq401[2] = true
			yyq401[3] = true
			yyq401[4] = true
			var yynn401 int
			if yyr401 || yy2arr401 {
				r.EncodeArrayStart(5)
			} else {
				yynn401 = 0
				for _, b := range yyq401 {
					if b {
						yynn401++
					}
				}
				r.EncodeMapStart(yynn401)
				yynn401 = 0
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[0] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[1] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[2] {
					yy409 := &x.ObjectMeta
					yy409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy410 := &x.ObjectMeta
					yy410.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[3] {
					yy412 := &x.Spec
					yy412.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy413 := &x.Spec
					yy413.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[4] {
					yy415 := &x.Status
					yy415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.Status
					yy416.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym417 := z.DecBinary()
	_ = yym417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct418 := r.ContainerType()
		if yyct418 == codecSelferValueTypeMap1234 {
			yyl418 := r.ReadMapStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl418, d)
			}
		} else if yyct418 == codecSelferValueTypeArray1234 {
			yyl418 := r.ReadArrayStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys419Slc
	var yyhl419 bool = l >= 0
	for yyj419 := 0; ; yyj419++ {
		if yyhl419 {
			if yyj419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys419Slc = r.DecodeBytes(yys419Slc, true, true)
		yys419 := string(yys419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys419 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv422 := &x.ObjectMeta
				yyv422.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv423 := &x.Spec
				yyv423.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv424 := &x.Status
				yyv424.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys419)
		} // end switch yys419
	} // end for yyj419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv428 := &x.ObjectMeta
		yyv428.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv429 := &x.Spec
		yyv429.CodecDecodeSelf(d)
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv430 := &x.Status
		yyv430.CodecDecodeSelf(d)
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = x.APIVersion != ""
			yyq432[2] = true
			var yynn432 int
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				yynn432 = 1
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
				yynn432 = 0
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[1] {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[2] {
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy442 := &x.ListMeta
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else {
						z.EncFallback(yy442)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv452 := &x.ListMeta
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv452) {
				} else {
					z.DecFallback(yyv452, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv454 := &x.Items
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv454), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj456 int
	var yyb456 bool
	var yyhl456 bool = l >= 0
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv459 := &x.ListMeta
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv459) {
		} else {
			z.DecFallback(yyv459, false)
		}
	}
	yyj456++
	if yyhl456 {
		yyb456 = yyj456 > l
	} else {
		yyb456 = r.CheckBreak()
	}
	if yyb456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv461 := &x.Items
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv461), d)
		}
	}
	for {
		yyj456++
		if yyhl456 {
			yyb456 = yyj456 > l
		} else {
			yyb456 = r.CheckBreak()
		}
		if yyb456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym463 := z.EncBinary()
		_ = yym463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep464 := !z.EncBinary()
			yy2arr464 := z.EncBasicHandle().StructToArray
			var yyq464 [3]bool
			_, _, _ = yysep464, yyq464, yy2arr464
			const yyr464 bool = false
			yyq464[0] = len(x.AccessModes) != 0
			yyq464[1] = true
			yyq464[2] = x.VolumeName != ""
			var yynn464 int
			if yyr464 || yy2arr464 {
				r.EncodeArrayStart(3)
			} else {
				yynn464 = 0
				for _, b := range yyq464 {
					if b {
						yynn464++
					}
				}
				r.EncodeMapStart(yynn464)
				yynn464 = 0
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym466 := z.EncBinary()
						_ = yym466
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym467 := z.EncBinary()
						_ = yym467
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[1] {
					yy469 := &x.Resources
					yy469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy470 := &x.Resources
					yy470.CodecEncodeSelf(e)
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq464[2] {
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr464 || yy2arr464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym474 := z.DecBinary()
	_ = yym474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct475 := r.ContainerType()
		if yyct475 == codecSelferValueTypeMap1234 {
			yyl475 := r.ReadMapStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl475, d)
			}
		} else if yyct475 == codecSelferValueTypeArray1234 {
			yyl475 := r.ReadArrayStart()
			if yyl475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys476Slc
	var yyhl476 bool = l >= 0
	for yyj476 := 0; ; yyj476++ {
		if yyhl476 {
			if yyj476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys476Slc = r.DecodeBytes(yys476Slc, true, true)
		yys476 := string(yys476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys476 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv477 := &x.AccessModes
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv477), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv479 := &x.Resources
				yyv479.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys476)
		} // end switch yys476
	} // end for yyj476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv482 := &x.AccessModes
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv482), d)
		}
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv484 := &x.Resources
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [3]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Phase != ""
			yyq487[1] = len(x.AccessModes) != 0
			yyq487[2] = len(x.Capacity) != 0
			var yynn487 int
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(3)
			} else {
				yynn487 = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
				yynn487 = 0
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym491 := z.EncBinary()
						_ = yym491
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq487[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr487 || yy2arr487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv497 := &x.AccessModes
				yym498 := z.DecBinary()
				_ = yym498
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv497), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv499 := &x.Capacity
				yyv499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv502 := &x.AccessModes
		yym503 := z.DecBinary()
		_ = yym503
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv502), d)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv504 := &x.Capacity
		yyv504.CodecDecodeSelf(d)
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym505 := z.EncBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym506 := z.DecBinary()
	_ = yym506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym507 := z.EncBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym509 := z.EncBinary()
	_ = yym509
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym510 := z.DecBinary()
	_ = yym510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym511 := z.EncBinary()
		_ = yym511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep512 := !z.EncBinary()
			yy2arr512 := z.EncBasicHandle().StructToArray
			var yyq512 [1]bool
			_, _, _ = yysep512, yyq512, yy2arr512
			const yyr512 bool = false
			var yynn512 int
			if yyr512 || yy2arr512 {
				r.EncodeArrayStart(1)
			} else {
				yynn512 = 1
				for _, b := range yyq512 {
					if b {
						yynn512++
					}
				}
				r.EncodeMapStart(yynn512)
				yynn512 = 0
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym514 := z.EncBinary()
				_ = yym514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym515 := z.EncBinary()
				_ = yym515
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr512 || yy2arr512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym516 := z.DecBinary()
	_ = yym516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct517 := r.ContainerType()
		if yyct517 == codecSelferValueTypeMap1234 {
			yyl517 := r.ReadMapStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl517, d)
			}
		} else if yyct517 == codecSelferValueTypeArray1234 {
			yyl517 := r.ReadArrayStart()
			if yyl517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys518Slc
	var yyhl518 bool = l >= 0
	for yyj518 := 0; ; yyj518++ {
		if yyhl518 {
			if yyj518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys518Slc = r.DecodeBytes(yys518Slc, true, true)
		yys518 := string(yys518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys518 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys518)
		} // end switch yys518
	} // end for yyj518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj520 int
	var yyb520 bool
	var yyhl520 bool = l >= 0
	yyj520++
	if yyhl520 {
		yyb520 = yyj520 > l
	} else {
		yyb520 = r.CheckBreak()
	}
	if yyb520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj520++
		if yyhl520 {
			yyb520 = yyj520 > l
		} else {
			yyb520 = r.CheckBreak()
		}
		if yyb520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym522 := z.EncBinary()
		_ = yym522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep523 := !z.EncBinary()
			yy2arr523 := z.EncBasicHandle().StructToArray
			var yyq523 [1]bool
			_, _, _ = yysep523, yyq523, yy2arr523
			const yyr523 bool = false
			yyq523[0] = x.Medium != ""
			var yynn523 int
			if yyr523 || yy2arr523 {
				r.EncodeArrayStart(1)
			} else {
				yynn523 = 0
				for _, b := range yyq523 {
					if b {
						yynn523++
					}
				}
				r.EncodeMapStart(yynn523)
				yynn523 = 0
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct526 := r.ContainerType()
		if yyct526 == codecSelferValueTypeMap1234 {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if yyct526 == codecSelferValueTypeArray1234 {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys527 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym531 := z.EncBinary()
	_ = yym531
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym533 := z.EncBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym534 := z.DecBinary()
	_ = yym534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [4]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[1] = x.FSType != ""
			yyq536[2] = x.Partition != 0
			yyq536[3] = x.ReadOnly != false
			var yynn536 int
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(4)
			} else {
				yynn536 = 1
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
				yynn536 = 0
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym538 := z.EncBinary()
				_ = yym538
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym539 := z.EncBinary()
				_ = yym539
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[1] {
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[2] {
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[3] {
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym549 := z.DecBinary()
	_ = yym549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct550 := r.ContainerType()
		if yyct550 == codecSelferValueTypeMap1234 {
			yyl550 := r.ReadMapStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl550, d)
			}
		} else if yyct550 == codecSelferValueTypeArray1234 {
			yyl550 := r.ReadArrayStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys551Slc
	var yyhl551 bool = l >= 0
	for yyj551 := 0; ; yyj551++ {
		if yyhl551 {
			if yyj551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys551Slc = r.DecodeBytes(yys551Slc, true, true)
		yys551 := string(yys551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys551 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys551)
		} // end switch yys551
	} // end for yyj551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj556 int
	var yyb556 bool
	var yyhl556 bool = l >= 0
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj556++
		if yyhl556 {
			yyb556 = yyj556 > l
		} else {
			yyb556 = r.CheckBreak()
		}
		if yyb556 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj556-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [6]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			yyq562[0] = x.TargetPortal != ""
			yyq562[1] = x.IQN != ""
			yyq562[2] = x.Lun != 0
			yyq562[3] = x.ISCSIInterface != ""
			yyq562[4] = x.FSType != ""
			yyq562[5] = x.ReadOnly != false
			var yynn562 int
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(6)
			} else {
				yynn562 = 0
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
				yynn562 = 0
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[0] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[1] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[2] {
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[3] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[4] {
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[5] {
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq562[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj590 int
	var yyb590 bool
	var yyhl590 bool = l >= 0
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj590++
		if yyhl590 {
			yyb590 = yyj590 > l
		} else {
			yyb590 = r.CheckBreak()
		}
		if yyb590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [4]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[3] = x.ReadOnly != false
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(4)
			} else {
				yynn598 = 3
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy603 := *x.Lun
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeInt(int64(yy603))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy605 := *x.Lun
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeInt(int64(yy605))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[3] {
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq598[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym613 := z.DecBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct614 := r.ContainerType()
		if yyct614 == codecSelferValueTypeMap1234 {
			yyl614 := r.ReadMapStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl614, d)
			}
		} else if yyct614 == codecSelferValueTypeArray1234 {
			yyl614 := r.ReadArrayStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys615Slc
	var yyhl615 bool = l >= 0
	for yyj615 := 0; ; yyj615++ {
		if yyhl615 {
			if yyj615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys615Slc = r.DecodeBytes(yys615Slc, true, true)
		yys615 := string(yys615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys615 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv616 := &x.TargetWWNs
				yym617 := z.DecBinary()
				_ = yym617
				if false {
				} else {
					z.F.DecSliceStringX(yyv616, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym619 := z.DecBinary()
				_ = yym619
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys615)
		} // end switch yys615
	} // end for yyj615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj622 int
	var yyb622 bool
	var yyhl622 bool = l >= 0
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv623 := &x.TargetWWNs
		yym624 := z.DecBinary()
		_ = yym624
		if false {
		} else {
			z.F.DecSliceStringX(yyv623, false, d)
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym626 := z.DecBinary()
		_ = yym626
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj622++
	if yyhl622 {
		yyb622 = yyj622 > l
	} else {
		yyb622 = r.CheckBreak()
	}
	if yyb622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj622++
		if yyhl622 {
			yyb622 = yyj622 > l
		} else {
			yyb622 = r.CheckBreak()
		}
		if yyb622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [5]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[1] = x.FSType != ""
			yyq630[2] = x.SecretRef != nil
			yyq630[3] = x.ReadOnly != false
			yyq630[4] = len(x.Options) != 0
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(5)
			} else {
				yynn630 = 1
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym632 := z.EncBinary()
				_ = yym632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[1] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym642 := z.EncBinary()
						_ = yym642
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym643 := z.EncBinary()
						_ = yym643
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym644 := z.DecBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct645 := r.ContainerType()
		if yyct645 == codecSelferValueTypeMap1234 {
			yyl645 := r.ReadMapStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl645, d)
			}
		} else if yyct645 == codecSelferValueTypeArray1234 {
			yyl645 := r.ReadArrayStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys646Slc
	var yyhl646 bool = l >= 0
	for yyj646 := 0; ; yyj646++ {
		if yyhl646 {
			if yyj646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys646Slc = r.DecodeBytes(yys646Slc, true, true)
		yys646 := string(yys646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys646 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv651 := &x.Options
				yym652 := z.DecBinary()
				_ = yym652
				if false {
				} else {
					z.F.DecMapStringStringX(yyv651, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys646)
		} // end switch yys646
	} // end for yyj646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj653 int
	var yyb653 bool
	var yyhl653 bool = l >= 0
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv658 := &x.Options
		yym659 := z.DecBinary()
		_ = yym659
		if false {
		} else {
			z.F.DecMapStringStringX(yyv658, false, d)
		}
	}
	for {
		yyj653++
		if yyhl653 {
			yyb653 = yyj653 > l
		} else {
			yyb653 = r.CheckBreak()
		}
		if yyb653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym660 := z.EncBinary()
		_ = yym660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep661 := !z.EncBinary()
			yy2arr661 := z.EncBasicHandle().StructToArray
			var yyq661 [4]bool
			_, _, _ = yysep661, yyq661, yy2arr661
			const yyr661 bool = false
			yyq661[1] = x.FSType != ""
			yyq661[2] = x.Partition != 0
			yyq661[3] = x.ReadOnly != false
			var yynn661 int
			if yyr661 || yy2arr661 {
				r.EncodeArrayStart(4)
			} else {
				yynn661 = 1
				for _, b := range yyq661 {
					if b {
						yynn661++
					}
				}
				r.EncodeMapStart(yynn661)
				yynn661 = 0
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym664 := z.EncBinary()
				_ = yym664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[1] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[2] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[3] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq661[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym674 := z.DecBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct675 := r.ContainerType()
		if yyct675 == codecSelferValueTypeMap1234 {
			yyl675 := r.ReadMapStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl675, d)
			}
		} else if yyct675 == codecSelferValueTypeArray1234 {
			yyl675 := r.ReadArrayStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys676Slc
	var yyhl676 bool = l >= 0
	for yyj676 := 0; ; yyj676++ {
		if yyhl676 {
			if yyj676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys676Slc = r.DecodeBytes(yys676Slc, true, true)
		yys676 := string(yys676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys676 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys676)
		} // end switch yys676
	} // end for yyj676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj681 int
	var yyb681 bool
	var yyhl681 bool = l >= 0
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj681++
		if yyhl681 {
			yyb681 = yyj681 > l
		} else {
			yyb681 = r.CheckBreak()
		}
		if yyb681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[1] = x.Revision != ""
			yyq687[2] = x.Directory != ""
			var yynn687 int
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				yynn687 = 1
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
				yynn687 = 0
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[1] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct698 := r.ContainerType()
		if yyct698 == codecSelferValueTypeMap1234 {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if yyct698 == codecSelferValueTypeArray1234 {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys699 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [1]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[0] = x.SecretName != ""
			var yynn708 int
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(1)
			} else {
				yynn708 = 0
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
				yynn708 = 0
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[0] {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj716 int
	var yyb716 bool
	var yyhl716 bool = l >= 0
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj716++
		if yyhl716 {
			yyb716 = yyj716 > l
		} else {
			yyb716 = r.CheckBreak()
		}
		if yyb716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [3]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[2] = x.ReadOnly != false
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(3)
			} else {
				yynn719 = 2
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[2] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj735 int
	var yyb735 bool
	var yyhl735 bool = l >= 0
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj735++
	if yyhl735 {
		yyb735 = yyj735 > l
	} else {
		yyb735 = r.CheckBreak()
	}
	if yyb735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj735++
		if yyhl735 {
			yyb735 = yyj735 > l
		} else {
			yyb735 = r.CheckBreak()
		}
		if yyb735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym739 := z.EncBinary()
		_ = yym739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep740 := !z.EncBinary()
			yy2arr740 := z.EncBasicHandle().StructToArray
			var yyq740 [3]bool
			_, _, _ = yysep740, yyq740, yy2arr740
			const yyr740 bool = false
			yyq740[2] = x.ReadOnly != false
			var yynn740 int
			if yyr740 || yy2arr740 {
				r.EncodeArrayStart(3)
			} else {
				yynn740 = 2
				for _, b := range yyq740 {
					if b {
						yynn740++
					}
				}
				r.EncodeMapStart(yynn740)
				yynn740 = 0
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq740[2] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym750 := z.DecBinary()
	_ = yym750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct751 := r.ContainerType()
		if yyct751 == codecSelferValueTypeMap1234 {
			yyl751 := r.ReadMapStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl751, d)
			}
		} else if yyct751 == codecSelferValueTypeArray1234 {
			yyl751 := r.ReadArrayStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys752Slc
	var yyhl752 bool = l >= 0
	for yyj752 := 0; ; yyj752++ {
		if yyhl752 {
			if yyj752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys752Slc = r.DecodeBytes(yys752Slc, true, true)
		yys752 := string(yys752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys752 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys752)
		} // end switch yys752
	} // end for yyj752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym760 := z.EncBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep761 := !z.EncBinary()
			yy2arr761 := z.EncBasicHandle().StructToArray
			var yyq761 [8]bool
			_, _, _ = yysep761, yyq761, yy2arr761
			const yyr761 bool = false
			yyq761[2] = x.FSType != ""
			yyq761[7] = x.ReadOnly != false
			var yynn761 int
			if yyr761 || yy2arr761 {
				r.EncodeArrayStart(8)
			} else {
				yynn761 = 6
				for _, b := range yyq761 {
					if b {
						yynn761++
					}
				}
				r.EncodeMapStart(yynn761)
				yynn761 = 0
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[2] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym773 := z.EncBinary()
				_ = yym773
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[7] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq761[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym784 := z.DecBinary()
	_ = yym784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct785 := r.ContainerType()
		if yyct785 == codecSelferValueTypeMap1234 {
			yyl785 := r.ReadMapStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl785, d)
			}
		} else if yyct785 == codecSelferValueTypeArray1234 {
			yyl785 := r.ReadArrayStart()
			if yyl785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys786Slc
	var yyhl786 bool = l >= 0
	for yyj786 := 0; ; yyj786++ {
		if yyhl786 {
			if yyj786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys786Slc = r.DecodeBytes(yys786Slc, true, true)
		yys786 := string(yys786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys786 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv787 := &x.CephMonitors
				yym788 := z.DecBinary()
				_ = yym788
				if false {
				} else {
					z.F.DecSliceStringX(yyv787, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys786)
		} // end switch yys786
	} // end for yyj786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv797 := &x.CephMonitors
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else {
			z.F.DecSliceStringX(yyv797, false, d)
		}
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym806 := z.EncBinary()
		_ = yym806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep807 := !z.EncBinary()
			yy2arr807 := z.EncBasicHandle().StructToArray
			var yyq807 [3]bool
			_, _, _ = yysep807, yyq807, yy2arr807
			const yyr807 bool = false
			yyq807[1] = x.FSType != ""
			yyq807[2] = x.ReadOnly != false
			var yynn807 int
			if yyr807 || yy2arr807 {
				r.EncodeArrayStart(3)
			} else {
				yynn807 = 1
				for _, b := range yyq807 {
					if b {
						yynn807++
					}
				}
				r.EncodeMapStart(yynn807)
				yynn807 = 0
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[1] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[2] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct818 := r.ContainerType()
		if yyct818 == codecSelferValueTypeMap1234 {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if yyct818 == codecSelferValueTypeArray1234 {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys819 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj823 int
	var yyb823 bool
	var yyhl823 bool = l >= 0
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj823++
	if yyhl823 {
		yyb823 = yyj823 > l
	} else {
		yyb823 = r.CheckBreak()
	}
	if yyb823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj823++
		if yyhl823 {
			yyb823 = yyj823 > l
		} else {
			yyb823 = r.CheckBreak()
		}
		if yyb823 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj823-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym827 := z.EncBinary()
		_ = yym827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep828 := !z.EncBinary()
			yy2arr828 := z.EncBasicHandle().StructToArray
			var yyq828 [5]bool
			_, _, _ = yysep828, yyq828, yy2arr828
			const yyr828 bool = false
			yyq828[1] = x.User != ""
			yyq828[2] = x.SecretFile != ""
			yyq828[3] = x.SecretRef != nil
			yyq828[4] = x.ReadOnly != false
			var yynn828 int
			if yyr828 || yy2arr828 {
				r.EncodeArrayStart(5)
			} else {
				yynn828 = 1
				for _, b := range yyq828 {
					if b {
						yynn828++
					}
				}
				r.EncodeMapStart(yynn828)
				yynn828 = 0
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[1] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[2] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq828[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[4] {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq828[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv845 := &x.Monitors
				yym846 := z.DecBinary()
				_ = yym846
				if false {
				} else {
					z.F.DecSliceStringX(yyv845, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj851 int
	var yyb851 bool
	var yyhl851 bool = l >= 0
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv852 := &x.Monitors
		yym853 := z.DecBinary()
		_ = yym853
		if false {
		} else {
			z.F.DecSliceStringX(yyv852, false, d)
		}
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj851++
		if yyhl851 {
			yyb851 = yyj851 > l
		} else {
			yyb851 = r.CheckBreak()
		}
		if yyb851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym858 := z.EncBinary()
		_ = yym858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep859 := !z.EncBinary()
			yy2arr859 := z.EncBasicHandle().StructToArray
			var yyq859 [1]bool
			_, _, _ = yysep859, yyq859, yy2arr859
			const yyr859 bool = false
			var yynn859 int
			if yyr859 || yy2arr859 {
				r.EncodeArrayStart(1)
			} else {
				yynn859 = 1
				for _, b := range yyq859 {
					if b {
						yynn859++
					}
				}
				r.EncodeMapStart(yynn859)
				yynn859 = 0
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym863 := z.DecBinary()
	_ = yym863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct864 := r.ContainerType()
		if yyct864 == codecSelferValueTypeMap1234 {
			yyl864 := r.ReadMapStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl864, d)
			}
		} else if yyct864 == codecSelferValueTypeArray1234 {
			yyl864 := r.ReadArrayStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys865Slc
	var yyhl865 bool = l >= 0
	for yyj865 := 0; ; yyj865++ {
		if yyhl865 {
			if yyj865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys865Slc = r.DecodeBytes(yys865Slc, true, true)
		yys865 := string(yys865Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys865 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys865)
		} // end switch yys865
	} // end for yyj865
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [1]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[0] = len(x.Items) != 0
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(1)
			} else {
				yynn870 = 0
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym872 := z.EncBinary()
						_ = yym872
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym873 := z.EncBinary()
						_ = yym873
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym874 := z.DecBinary()
	_ = yym874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct875 := r.ContainerType()
		if yyct875 == codecSelferValueTypeMap1234 {
			yyl875 := r.ReadMapStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl875, d)
			}
		} else if yyct875 == codecSelferValueTypeArray1234 {
			yyl875 := r.ReadArrayStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys876Slc
	var yyhl876 bool = l >= 0
	for yyj876 := 0; ; yyj876++ {
		if yyhl876 {
			if yyj876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys876Slc = r.DecodeBytes(yys876Slc, true, true)
		yys876 := string(yys876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys876 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv877 := &x.Items
				yym878 := z.DecBinary()
				_ = yym878
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys876)
		} // end switch yys876
	} // end for yyj876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj879 int
	var yyb879 bool
	var yyhl879 bool = l >= 0
	yyj879++
	if yyhl879 {
		yyb879 = yyj879 > l
	} else {
		yyb879 = r.CheckBreak()
	}
	if yyb879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv880 := &x.Items
		yym881 := z.DecBinary()
		_ = yym881
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv880), d)
		}
	}
	for {
		yyj879++
		if yyhl879 {
			yyb879 = yyj879 > l
		} else {
			yyb879 = r.CheckBreak()
		}
		if yyb879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym882 := z.EncBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep883 := !z.EncBinary()
			yy2arr883 := z.EncBasicHandle().StructToArray
			var yyq883 [2]bool
			_, _, _ = yysep883, yyq883, yy2arr883
			const yyr883 bool = false
			var yynn883 int
			if yyr883 || yy2arr883 {
				r.EncodeArrayStart(2)
			} else {
				yynn883 = 2
				for _, b := range yyq883 {
					if b {
						yynn883++
					}
				}
				r.EncodeMapStart(yynn883)
				yynn883 = 0
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy888 := &x.FieldRef
				yy888.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy889 := &x.FieldRef
				yy889.CodecEncodeSelf(e)
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv894 := &x.FieldRef
				yyv894.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv897 := &x.FieldRef
		yyv897.CodecDecodeSelf(d)
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym898 := z.EncBinary()
		_ = yym898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep899 := !z.EncBinary()
			yy2arr899 := z.EncBasicHandle().StructToArray
			var yyq899 [5]bool
			_, _, _ = yysep899, yyq899, yy2arr899
			const yyr899 bool = false
			yyq899[0] = x.Name != ""
			yyq899[1] = x.HostPort != 0
			yyq899[3] = x.Protocol != ""
			yyq899[4] = x.HostIP != ""
			var yynn899 int
			if yyr899 || yy2arr899 {
				r.EncodeArrayStart(5)
			} else {
				yynn899 = 1
				for _, b := range yyq899 {
					if b {
						yynn899++
					}
				}
				r.EncodeMapStart(yynn899)
				yynn899 = 0
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[0] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[1] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym907 := z.EncBinary()
				_ = yym907
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq899[4] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq899[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr899 || yy2arr899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym913 := z.DecBinary()
	_ = yym913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct914 := r.ContainerType()
		if yyct914 == codecSelferValueTypeMap1234 {
			yyl914 := r.ReadMapStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl914, d)
			}
		} else if yyct914 == codecSelferValueTypeArray1234 {
			yyl914 := r.ReadArrayStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys915Slc
	var yyhl915 bool = l >= 0
	for yyj915 := 0; ; yyj915++ {
		if yyhl915 {
			if yyj915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys915Slc = r.DecodeBytes(yys915Slc, true, true)
		yys915 := string(yys915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys915 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys915)
		} // end switch yys915
	} // end for yyj915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym927 := z.EncBinary()
		_ = yym927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep928 := !z.EncBinary()
			yy2arr928 := z.EncBasicHandle().StructToArray
			var yyq928 [3]bool
			_, _, _ = yysep928, yyq928, yy2arr928
			const yyr928 bool = false
			yyq928[1] = x.ReadOnly != false
			var yynn928 int
			if yyr928 || yy2arr928 {
				r.EncodeArrayStart(3)
			} else {
				yynn928 = 2
				for _, b := range yyq928 {
					if b {
						yynn928++
					}
				}
				r.EncodeMapStart(yynn928)
				yynn928 = 0
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq928[1] {
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym938 := z.DecBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct939 := r.ContainerType()
		if yyct939 == codecSelferValueTypeMap1234 {
			yyl939 := r.ReadMapStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl939, d)
			}
		} else if yyct939 == codecSelferValueTypeArray1234 {
			yyl939 := r.ReadArrayStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys940Slc
	var yyhl940 bool = l >= 0
	for yyj940 := 0; ; yyj940++ {
		if yyhl940 {
			if yyj940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys940Slc = r.DecodeBytes(yys940Slc, true, true)
		yys940 := string(yys940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys940 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys940)
		} // end switch yys940
	} // end for yyj940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj944 int
	var yyb944 bool
	var yyhl944 bool = l >= 0
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj944++
		if yyhl944 {
			yyb944 = yyj944 > l
		} else {
			yyb944 = r.CheckBreak()
		}
		if yyb944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym948 := z.EncBinary()
		_ = yym948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep949 := !z.EncBinary()
			yy2arr949 := z.EncBasicHandle().StructToArray
			var yyq949 [3]bool
			_, _, _ = yysep949, yyq949, yy2arr949
			const yyr949 bool = false
			yyq949[1] = x.Value != ""
			yyq949[2] = x.ValueFrom != nil
			var yynn949 int
			if yyr949 || yy2arr949 {
				r.EncodeArrayStart(3)
			} else {
				yynn949 = 1
				for _, b := range yyq949 {
					if b {
						yynn949++
					}
				}
				r.EncodeMapStart(yynn949)
				yynn949 = 0
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym951 := z.EncBinary()
				_ = yym951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym952 := z.EncBinary()
				_ = yym952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq949[1] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq949[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq949[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq949[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr949 || yy2arr949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym957 := z.DecBinary()
	_ = yym957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct958 := r.ContainerType()
		if yyct958 == codecSelferValueTypeMap1234 {
			yyl958 := r.ReadMapStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl958, d)
			}
		} else if yyct958 == codecSelferValueTypeArray1234 {
			yyl958 := r.ReadArrayStart()
			if yyl958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys959Slc
	var yyhl959 bool = l >= 0
	for yyj959 := 0; ; yyj959++ {
		if yyhl959 {
			if yyj959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys959Slc = r.DecodeBytes(yys959Slc, true, true)
		yys959 := string(yys959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys959 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys959)
		} // end switch yys959
	} // end for yyj959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym967 := z.EncBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep968 := !z.EncBinary()
			yy2arr968 := z.EncBasicHandle().StructToArray
			var yyq968 [3]bool
			_, _, _ = yysep968, yyq968, yy2arr968
			const yyr968 bool = false
			yyq968[0] = x.FieldRef != nil
			yyq968[1] = x.ConfigMapKeyRef != nil
			yyq968[2] = x.SecretKeyRef != nil
			var yynn968 int
			if yyr968 || yy2arr968 {
				r.EncodeArrayStart(3)
			} else {
				yynn968 = 0
				for _, b := range yyq968 {
					if b {
						yynn968++
					}
				}
				r.EncodeMapStart(yynn968)
				yynn968 = 0
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq968[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[1] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq968[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq968[2] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq968[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr968 || yy2arr968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym972 := z.DecBinary()
	_ = yym972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct973 := r.ContainerType()
		if yyct973 == codecSelferValueTypeMap1234 {
			yyl973 := r.ReadMapStart()
			if yyl973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl973, d)
			}
		} else if yyct973 == codecSelferValueTypeArray1234 {
			yyl973 := r.ReadArrayStart()
			if yyl973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys974Slc
	var yyhl974 bool = l >= 0
	for yyj974 := 0; ; yyj974++ {
		if yyhl974 {
			if yyj974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys974Slc = r.DecodeBytes(yys974Slc, true, true)
		yys974 := string(yys974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys974 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys974)
		} // end switch yys974
	} // end for yyj974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj978 int
	var yyb978 bool
	var yyhl978 bool = l >= 0
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj978++
		if yyhl978 {
			yyb978 = yyj978 > l
		} else {
			yyb978 = r.CheckBreak()
		}
		if yyb978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym982 := z.EncBinary()
		_ = yym982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep983 := !z.EncBinary()
			yy2arr983 := z.EncBasicHandle().StructToArray
			var yyq983 [2]bool
			_, _, _ = yysep983, yyq983, yy2arr983
			const yyr983 bool = false
			var yynn983 int
			if yyr983 || yy2arr983 {
				r.EncodeArrayStart(2)
			} else {
				yynn983 = 2
				for _, b := range yyq983 {
					if b {
						yynn983++
					}
				}
				r.EncodeMapStart(yynn983)
				yynn983 = 0
			}
			if yyr983 || yy2arr983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym985 := z.EncBinary()
				_ = yym985
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym986 := z.EncBinary()
				_ = yym986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr983 || yy2arr983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym988 := z.EncBinary()
				_ = yym988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr983 || yy2arr983 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym990 := z.DecBinary()
	_ = yym990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct991 := r.ContainerType()
		if yyct991 == codecSelferValueTypeMap1234 {
			yyl991 := r.ReadMapStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl991, d)
			}
		} else if yyct991 == codecSelferValueTypeArray1234 {
			yyl991 := r.ReadArrayStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys992Slc
	var yyhl992 bool = l >= 0
	for yyj992 := 0; ; yyj992++ {
		if yyhl992 {
			if yyj992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys992Slc = r.DecodeBytes(yys992Slc, true, true)
		yys992 := string(yys992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys992 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys992)
		} // end switch yys992
	} // end for yyj992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj995 int
	var yyb995 bool
	var yyhl995 bool = l >= 0
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj995++
		if yyhl995 {
			yyb995 = yyj995 > l
		} else {
			yyb995 = r.CheckBreak()
		}
		if yyb995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym998 := z.EncBinary()
		_ = yym998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep999 := !z.EncBinary()
			yy2arr999 := z.EncBasicHandle().StructToArray
			var yyq999 [2]bool
			_, _, _ = yysep999, yyq999, yy2arr999
			const yyr999 bool = false
			var yynn999 int
			if yyr999 || yy2arr999 {
				r.EncodeArrayStart(2)
			} else {
				yynn999 = 2
				for _, b := range yyq999 {
					if b {
						yynn999++
					}
				}
				r.EncodeMapStart(yynn999)
				yynn999 = 0
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1001 := z.EncBinary()
				_ = yym1001
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1002 := z.EncBinary()
				_ = yym1002
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1004 := z.EncBinary()
				_ = yym1004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1005 := z.EncBinary()
				_ = yym1005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1006 := z.DecBinary()
	_ = yym1006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1007 := r.ContainerType()
		if yyct1007 == codecSelferValueTypeMap1234 {
			yyl1007 := r.ReadMapStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1007, d)
			}
		} else if yyct1007 == codecSelferValueTypeArray1234 {
			yyl1007 := r.ReadArrayStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1008Slc
	var yyhl1008 bool = l >= 0
	for yyj1008 := 0; ; yyj1008++ {
		if yyhl1008 {
			if yyj1008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1008Slc = r.DecodeBytes(yys1008Slc, true, true)
		yys1008 := string(yys1008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1008 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1008)
		} // end switch yys1008
	} // end for yyj1008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1011 int
	var yyb1011 bool
	var yyhl1011 bool = l >= 0
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1011++
		if yyhl1011 {
			yyb1011 = yyj1011 > l
		} else {
			yyb1011 = r.CheckBreak()
		}
		if yyb1011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1014 := z.EncBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1015 := !z.EncBinary()
			yy2arr1015 := z.EncBasicHandle().StructToArray
			var yyq1015 [2]bool
			_, _, _ = yysep1015, yyq1015, yy2arr1015
			const yyr1015 bool = false
			var yynn1015 int
			if yyr1015 || yy2arr1015 {
				r.EncodeArrayStart(2)
			} else {
				yynn1015 = 2
				for _, b := range yyq1015 {
					if b {
						yynn1015++
					}
				}
				r.EncodeMapStart(yynn1015)
				yynn1015 = 0
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1017 := z.EncBinary()
				_ = yym1017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1018 := z.EncBinary()
				_ = yym1018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1022 := z.DecBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1023 := r.ContainerType()
		if yyct1023 == codecSelferValueTypeMap1234 {
			yyl1023 := r.ReadMapStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1023, d)
			}
		} else if yyct1023 == codecSelferValueTypeArray1234 {
			yyl1023 := r.ReadArrayStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1024Slc
	var yyhl1024 bool = l >= 0
	for yyj1024 := 0; ; yyj1024++ {
		if yyhl1024 {
			if yyj1024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1024Slc = r.DecodeBytes(yys1024Slc, true, true)
		yys1024 := string(yys1024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1024 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1024)
		} // end switch yys1024
	} // end for yyj1024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1030 := z.EncBinary()
		_ = yym1030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1031 := !z.EncBinary()
			yy2arr1031 := z.EncBasicHandle().StructToArray
			var yyq1031 [4]bool
			_, _, _ = yysep1031, yyq1031, yy2arr1031
			const yyr1031 bool = false
			yyq1031[0] = x.Path != ""
			yyq1031[1] = true
			yyq1031[2] = x.Host != ""
			yyq1031[3] = x.Scheme != ""
			var yynn1031 int
			if yyr1031 || yy2arr1031 {
				r.EncodeArrayStart(4)
			} else {
				yynn1031 = 0
				for _, b := range yyq1031 {
					if b {
						yynn1031++
					}
				}
				r.EncodeMapStart(yynn1031)
				yynn1031 = 0
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[0] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[1] {
					yy1036 := &x.Port
					yym1037 := z.EncBinary()
					_ = yym1037
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1036) {
					} else if !yym1037 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1036)
					} else {
						z.EncFallback(yy1036)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1038 := &x.Port
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1038) {
					} else if !yym1039 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1038)
					} else {
						z.EncFallback(yy1038)
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[2] {
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1031[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1042 := z.EncBinary()
					_ = yym1042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1031[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1045 := r.ContainerType()
		if yyct1045 == codecSelferValueTypeMap1234 {
			yyl1045 := r.ReadMapStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1045, d)
			}
		} else if yyct1045 == codecSelferValueTypeArray1234 {
			yyl1045 := r.ReadArrayStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1046Slc
	var yyhl1046 bool = l >= 0
	for yyj1046 := 0; ; yyj1046++ {
		if yyhl1046 {
			if yyj1046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1046Slc = r.DecodeBytes(yys1046Slc, true, true)
		yys1046 := string(yys1046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1046 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1048 := &x.Port
				yym1049 := z.DecBinary()
				_ = yym1049
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1048) {
				} else if !yym1049 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1048)
				} else {
					z.DecFallback(yyv1048, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1046)
		} // end switch yys1046
	} // end for yyj1046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1054 := &x.Port
		yym1055 := z.DecBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1054) {
		} else if !yym1055 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1054)
		} else {
			z.DecFallback(yyv1054, false)
		}
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1058 := z.EncBinary()
	_ = yym1058
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1059 := z.DecBinary()
	_ = yym1059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1060 := z.EncBinary()
		_ = yym1060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1061 := !z.EncBinary()
			yy2arr1061 := z.EncBasicHandle().StructToArray
			var yyq1061 [1]bool
			_, _, _ = yysep1061, yyq1061, yy2arr1061
			const yyr1061 bool = false
			yyq1061[0] = true
			var yynn1061 int
			if yyr1061 || yy2arr1061 {
				r.EncodeArrayStart(1)
			} else {
				yynn1061 = 0
				for _, b := range yyq1061 {
					if b {
						yynn1061++
					}
				}
				r.EncodeMapStart(yynn1061)
				yynn1061 = 0
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[0] {
					yy1063 := &x.Port
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1063) {
					} else if !yym1064 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1063)
					} else {
						z.EncFallback(yy1063)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1065 := &x.Port
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1065) {
					} else if !yym1066 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1065)
					} else {
						z.EncFallback(yy1065)
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1067 := z.DecBinary()
	_ = yym1067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1068 := r.ContainerType()
		if yyct1068 == codecSelferValueTypeMap1234 {
			yyl1068 := r.ReadMapStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1068, d)
			}
		} else if yyct1068 == codecSelferValueTypeArray1234 {
			yyl1068 := r.ReadArrayStart()
			if yyl1068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1069Slc
	var yyhl1069 bool = l >= 0
	for yyj1069 := 0; ; yyj1069++ {
		if yyhl1069 {
			if yyj1069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1069Slc = r.DecodeBytes(yys1069Slc, true, true)
		yys1069 := string(yys1069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1069 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1070 := &x.Port
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1070) {
				} else if !yym1071 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1070)
				} else {
					z.DecFallback(yyv1070, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1069)
		} // end switch yys1069
	} // end for yyj1069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1072 int
	var yyb1072 bool
	var yyhl1072 bool = l >= 0
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1073 := &x.Port
		yym1074 := z.DecBinary()
		_ = yym1074
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1073) {
		} else if !yym1074 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1073)
		} else {
			z.DecFallback(yyv1073, false)
		}
	}
	for {
		yyj1072++
		if yyhl1072 {
			yyb1072 = yyj1072 > l
		} else {
			yyb1072 = r.CheckBreak()
		}
		if yyb1072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1075 := z.EncBinary()
		_ = yym1075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1076 := !z.EncBinary()
			yy2arr1076 := z.EncBasicHandle().StructToArray
			var yyq1076 [1]bool
			_, _, _ = yysep1076, yyq1076, yy2arr1076
			const yyr1076 bool = false
			yyq1076[0] = len(x.Command) != 0
			var yynn1076 int
			if yyr1076 || yy2arr1076 {
				r.EncodeArrayStart(1)
			} else {
				yynn1076 = 0
				for _, b := range yyq1076 {
					if b {
						yynn1076++
					}
				}
				r.EncodeMapStart(yynn1076)
				yynn1076 = 0
			}
			if yyr1076 || yy2arr1076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1076[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1078 := z.EncBinary()
						_ = yym1078
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1076[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1076 || yy2arr1076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1081 := r.ContainerType()
		if yyct1081 == codecSelferValueTypeMap1234 {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if yyct1081 == codecSelferValueTypeArray1234 {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1082 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1083 := &x.Command
				yym1084 := z.DecBinary()
				_ = yym1084
				if false {
				} else {
					z.F.DecSliceStringX(yyv1083, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1086 := &x.Command
		yym1087 := z.DecBinary()
		_ = yym1087
		if false {
		} else {
			z.F.DecSliceStringX(yyv1086, false, d)
		}
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [8]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1089[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1089[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1089[3] = x.InitialDelaySeconds != 0
			yyq1089[4] = x.TimeoutSeconds != 0
			yyq1089[5] = x.PeriodSeconds != 0
			yyq1089[6] = x.SuccessThreshold != 0
			yyq1089[7] = x.FailureThreshold != 0
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(8)
			} else {
				yynn1089 = 0
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			var yyn1090 bool
			if x.Handler.Exec == nil {
				yyn1090 = true
				goto LABEL1090
			}
		LABEL1090:
			if yyr1089 || yy2arr1089 {
				if yyn1090 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1089[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1089[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1090 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1091 bool
			if x.Handler.HTTPGet == nil {
				yyn1091 = true
				goto LABEL1091
			}
		LABEL1091:
			if yyr1089 || yy2arr1089 {
				if yyn1091 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1089[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1089[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1091 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1092 bool
			if x.Handler.TCPSocket == nil {
				yyn1092 = true
				goto LABEL1092
			}
		LABEL1092:
			if yyr1089 || yy2arr1089 {
				if yyn1092 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1089[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1089[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1092 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[3] {
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[4] {
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[5] {
					yym1100 := z.EncBinary()
					_ = yym1100
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[6] {
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[7] {
					yym1106 := z.EncBinary()
					_ = yym1106
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1089[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1107 := z.EncBinary()
					_ = yym1107
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1108 := z.DecBinary()
	_ = yym1108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1109 := r.ContainerType()
		if yyct1109 == codecSelferValueTypeMap1234 {
			yyl1109 := r.ReadMapStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1109, d)
			}
		} else if yyct1109 == codecSelferValueTypeArray1234 {
			yyl1109 := r.ReadArrayStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1110Slc
	var yyhl1110 bool = l >= 0
	for yyj1110 := 0; ; yyj1110++ {
		if yyhl1110 {
			if yyj1110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1110Slc = r.DecodeBytes(yys1110Slc, true, true)
		yys1110 := string(yys1110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1110 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1110)
		} // end switch yys1110
	} // end for yyj1110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1119 int
	var yyb1119 bool
	var yyhl1119 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1119++
	if yyhl1119 {
		yyb1119 = yyj1119 > l
	} else {
		yyb1119 = r.CheckBreak()
	}
	if yyb1119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1119++
		if yyhl1119 {
			yyb1119 = yyj1119 > l
		} else {
			yyb1119 = r.CheckBreak()
		}
		if yyb1119 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1119-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1128 := z.EncBinary()
	_ = yym1128
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1130 := z.EncBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1131 := z.DecBinary()
	_ = yym1131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1132 := z.EncBinary()
		_ = yym1132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1133 := !z.EncBinary()
			yy2arr1133 := z.EncBasicHandle().StructToArray
			var yyq1133 [2]bool
			_, _, _ = yysep1133, yyq1133, yy2arr1133
			const yyr1133 bool = false
			yyq1133[0] = len(x.Add) != 0
			yyq1133[1] = len(x.Drop) != 0
			var yynn1133 int
			if yyr1133 || yy2arr1133 {
				r.EncodeArrayStart(2)
			} else {
				yynn1133 = 0
				for _, b := range yyq1133 {
					if b {
						yynn1133++
					}
				}
				r.EncodeMapStart(yynn1133)
				yynn1133 = 0
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1135 := z.EncBinary()
						_ = yym1135
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1138 := z.EncBinary()
						_ = yym1138
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1141 := r.ContainerType()
		if yyct1141 == codecSelferValueTypeMap1234 {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if yyct1141 == codecSelferValueTypeArray1234 {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1142 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1143 := &x.Add
				yym1144 := z.DecBinary()
				_ = yym1144
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1143), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1145 := &x.Drop
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1147 int
	var yyb1147 bool
	var yyhl1147 bool = l >= 0
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1148 := &x.Add
		yym1149 := z.DecBinary()
		_ = yym1149
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1148), d)
		}
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1150 := &x.Drop
		yym1151 := z.DecBinary()
		_ = yym1151
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1150), d)
		}
	}
	for {
		yyj1147++
		if yyhl1147 {
			yyb1147 = yyj1147 > l
		} else {
			yyb1147 = r.CheckBreak()
		}
		if yyb1147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1152 := z.EncBinary()
		_ = yym1152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1153 := !z.EncBinary()
			yy2arr1153 := z.EncBasicHandle().StructToArray
			var yyq1153 [2]bool
			_, _, _ = yysep1153, yyq1153, yy2arr1153
			const yyr1153 bool = false
			yyq1153[0] = len(x.Limits) != 0
			yyq1153[1] = len(x.Requests) != 0
			var yynn1153 int
			if yyr1153 || yy2arr1153 {
				r.EncodeArrayStart(2)
			} else {
				yynn1153 = 0
				for _, b := range yyq1153 {
					if b {
						yynn1153++
					}
				}
				r.EncodeMapStart(yynn1153)
				yynn1153 = 0
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1153[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1153[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1153 || yy2arr1153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1156 := z.DecBinary()
	_ = yym1156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1157 := r.ContainerType()
		if yyct1157 == codecSelferValueTypeMap1234 {
			yyl1157 := r.ReadMapStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1157, d)
			}
		} else if yyct1157 == codecSelferValueTypeArray1234 {
			yyl1157 := r.ReadArrayStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1157, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1158Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1158Slc
	var yyhl1158 bool = l >= 0
	for yyj1158 := 0; ; yyj1158++ {
		if yyhl1158 {
			if yyj1158 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1158Slc = r.DecodeBytes(yys1158Slc, true, true)
		yys1158 := string(yys1158Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1158 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1159 := &x.Limits
				yyv1159.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1160 := &x.Requests
				yyv1160.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1158)
		} // end switch yys1158
	} // end for yyj1158
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1162 := &x.Limits
		yyv1162.CodecDecodeSelf(d)
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1163 := &x.Requests
		yyv1163.CodecDecodeSelf(d)
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [19]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[2] = len(x.Command) != 0
			yyq1165[3] = len(x.Args) != 0
			yyq1165[4] = x.WorkingDir != ""
			yyq1165[5] = len(x.Ports) != 0
			yyq1165[6] = len(x.Env) != 0
			yyq1165[7] = true
			yyq1165[8] = len(x.VolumeMounts) != 0
			yyq1165[9] = x.LivenessProbe != nil
			yyq1165[10] = x.ReadinessProbe != nil
			yyq1165[11] = x.Lifecycle != nil
			yyq1165[12] = x.TerminationMessagePath != ""
			yyq1165[14] = x.SecurityContext != nil
			yyq1165[15] = x.Stdin != false
			yyq1165[16] = x.StdinOnce != false
			yyq1165[17] = x.TTY != false
			yyq1165[18] = len(x.GPUIndexs) != 0
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(19)
			} else {
				yynn1165 = 3
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1167 := z.EncBinary()
				_ = yym1167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1171 := z.EncBinary()
				_ = yym1171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1173 := z.EncBinary()
						_ = yym1173
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1174 := z.EncBinary()
						_ = yym1174
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1176 := z.EncBinary()
						_ = yym1176
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1177 := z.EncBinary()
						_ = yym1177
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[4] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1182 := z.EncBinary()
						_ = yym1182
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1183 := z.EncBinary()
						_ = yym1183
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1185 := z.EncBinary()
						_ = yym1185
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1186 := z.EncBinary()
						_ = yym1186
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[7] {
					yy1188 := &x.Resources
					yy1188.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1189 := &x.Resources
					yy1189.CodecEncodeSelf(e)
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1191 := z.EncBinary()
						_ = yym1191
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1192 := z.EncBinary()
						_ = yym1192
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[12] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[15] {
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1165[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[16] {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1165[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[17] {
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1165[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[18] {
					if x.GPUIndexs == nil {
						r.EncodeNil()
					} else {
						yym1211 := z.EncBinary()
						_ = yym1211
						if false {
						} else {
							z.F.EncSliceUintV(x.GPUIndexs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gpuIndexs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GPUIndexs == nil {
						r.EncodeNil()
					} else {
						yym1212 := z.EncBinary()
						_ = yym1212
						if false {
						} else {
							z.F.EncSliceUintV(x.GPUIndexs, false, e)
						}
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1213 := z.DecBinary()
	_ = yym1213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1214 := r.ContainerType()
		if yyct1214 == codecSelferValueTypeMap1234 {
			yyl1214 := r.ReadMapStart()
			if yyl1214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1214, d)
			}
		} else if yyct1214 == codecSelferValueTypeArray1234 {
			yyl1214 := r.ReadArrayStart()
			if yyl1214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1215Slc
	var yyhl1215 bool = l >= 0
	for yyj1215 := 0; ; yyj1215++ {
		if yyhl1215 {
			if yyj1215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1215Slc = r.DecodeBytes(yys1215Slc, true, true)
		yys1215 := string(yys1215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1215 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1218 := &x.Command
				yym1219 := z.DecBinary()
				_ = yym1219
				if false {
				} else {
					z.F.DecSliceStringX(yyv1218, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1220 := &x.Args
				yym1221 := z.DecBinary()
				_ = yym1221
				if false {
				} else {
					z.F.DecSliceStringX(yyv1220, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1223 := &x.Ports
				yym1224 := z.DecBinary()
				_ = yym1224
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1223), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1225 := &x.Env
				yym1226 := z.DecBinary()
				_ = yym1226
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1225), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1227 := &x.Resources
				yyv1227.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1228 := &x.VolumeMounts
				yym1229 := z.DecBinary()
				_ = yym1229
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1228), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "gpuIndexs":
			if r.TryDecodeAsNil() {
				x.GPUIndexs = nil
			} else {
				yyv1239 := &x.GPUIndexs
				yym1240 := z.DecBinary()
				_ = yym1240
				if false {
				} else {
					z.F.DecSliceUintX(yyv1239, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1215)
		} // end switch yys1215
	} // end for yyj1215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1244 := &x.Command
		yym1245 := z.DecBinary()
		_ = yym1245
		if false {
		} else {
			z.F.DecSliceStringX(yyv1244, false, d)
		}
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1246 := &x.Args
		yym1247 := z.DecBinary()
		_ = yym1247
		if false {
		} else {
			z.F.DecSliceStringX(yyv1246, false, d)
		}
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1249 := &x.Ports
		yym1250 := z.DecBinary()
		_ = yym1250
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1249), d)
		}
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1251 := &x.Env
		yym1252 := z.DecBinary()
		_ = yym1252
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1251), d)
		}
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1253 := &x.Resources
		yyv1253.CodecDecodeSelf(d)
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1254 := &x.VolumeMounts
		yym1255 := z.DecBinary()
		_ = yym1255
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1254), d)
		}
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GPUIndexs = nil
	} else {
		yyv1265 := &x.GPUIndexs
		yym1266 := z.DecBinary()
		_ = yym1266
		if false {
		} else {
			z.F.DecSliceUintX(yyv1265, false, d)
		}
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1267 := z.EncBinary()
		_ = yym1267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1268 := !z.EncBinary()
			yy2arr1268 := z.EncBasicHandle().StructToArray
			var yyq1268 [3]bool
			_, _, _ = yysep1268, yyq1268, yy2arr1268
			const yyr1268 bool = false
			yyq1268[0] = x.Exec != nil
			yyq1268[1] = x.HTTPGet != nil
			yyq1268[2] = x.TCPSocket != nil
			var yynn1268 int
			if yyr1268 || yy2arr1268 {
				r.EncodeArrayStart(3)
			} else {
				yynn1268 = 0
				for _, b := range yyq1268 {
					if b {
						yynn1268++
					}
				}
				r.EncodeMapStart(yynn1268)
				yynn1268 = 0
			}
			if yyr1268 || yy2arr1268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1268[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1268[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1268[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1268 || yy2arr1268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1272 := z.DecBinary()
	_ = yym1272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1273 := r.ContainerType()
		if yyct1273 == codecSelferValueTypeMap1234 {
			yyl1273 := r.ReadMapStart()
			if yyl1273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1273, d)
			}
		} else if yyct1273 == codecSelferValueTypeArray1234 {
			yyl1273 := r.ReadArrayStart()
			if yyl1273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1274Slc
	var yyhl1274 bool = l >= 0
	for yyj1274 := 0; ; yyj1274++ {
		if yyhl1274 {
			if yyj1274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1274Slc = r.DecodeBytes(yys1274Slc, true, true)
		yys1274 := string(yys1274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1274 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1274)
		} // end switch yys1274
	} // end for yyj1274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1278 int
	var yyb1278 bool
	var yyhl1278 bool = l >= 0
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1278++
		if yyhl1278 {
			yyb1278 = yyj1278 > l
		} else {
			yyb1278 = r.CheckBreak()
		}
		if yyb1278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1282 := z.EncBinary()
		_ = yym1282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1283 := !z.EncBinary()
			yy2arr1283 := z.EncBasicHandle().StructToArray
			var yyq1283 [2]bool
			_, _, _ = yysep1283, yyq1283, yy2arr1283
			const yyr1283 bool = false
			yyq1283[0] = x.PostStart != nil
			yyq1283[1] = x.PreStop != nil
			var yynn1283 int
			if yyr1283 || yy2arr1283 {
				r.EncodeArrayStart(2)
			} else {
				yynn1283 = 0
				for _, b := range yyq1283 {
					if b {
						yynn1283++
					}
				}
				r.EncodeMapStart(yynn1283)
				yynn1283 = 0
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1286 := z.DecBinary()
	_ = yym1286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1287 := r.ContainerType()
		if yyct1287 == codecSelferValueTypeMap1234 {
			yyl1287 := r.ReadMapStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1287, d)
			}
		} else if yyct1287 == codecSelferValueTypeArray1234 {
			yyl1287 := r.ReadArrayStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1288Slc
	var yyhl1288 bool = l >= 0
	for yyj1288 := 0; ; yyj1288++ {
		if yyhl1288 {
			if yyj1288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1288Slc = r.DecodeBytes(yys1288Slc, true, true)
		yys1288 := string(yys1288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1288 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1288)
		} // end switch yys1288
	} // end for yyj1288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1291 int
	var yyb1291 bool
	var yyhl1291 bool = l >= 0
	yyj1291++
	if yyhl1291 {
		yyb1291 = yyj1291 > l
	} else {
		yyb1291 = r.CheckBreak()
	}
	if yyb1291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1291++
	if yyhl1291 {
		yyb1291 = yyj1291 > l
	} else {
		yyb1291 = r.CheckBreak()
	}
	if yyb1291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1291++
		if yyhl1291 {
			yyb1291 = yyj1291 > l
		} else {
			yyb1291 = r.CheckBreak()
		}
		if yyb1291 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1291-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1294 := z.EncBinary()
	_ = yym1294
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1295 := z.DecBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1296 := z.EncBinary()
		_ = yym1296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1297 := !z.EncBinary()
			yy2arr1297 := z.EncBasicHandle().StructToArray
			var yyq1297 [2]bool
			_, _, _ = yysep1297, yyq1297, yy2arr1297
			const yyr1297 bool = false
			yyq1297[0] = x.Reason != ""
			yyq1297[1] = x.Message != ""
			var yynn1297 int
			if yyr1297 || yy2arr1297 {
				r.EncodeArrayStart(2)
			} else {
				yynn1297 = 0
				for _, b := range yyq1297 {
					if b {
						yynn1297++
					}
				}
				r.EncodeMapStart(yynn1297)
				yynn1297 = 0
			}
			if yyr1297 || yy2arr1297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1297[0] {
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1297 || yy2arr1297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1297[1] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1297 || yy2arr1297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1305 := r.ContainerType()
		if yyct1305 == codecSelferValueTypeMap1234 {
			yyl1305 := r.ReadMapStart()
			if yyl1305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1305, d)
			}
		} else if yyct1305 == codecSelferValueTypeArray1234 {
			yyl1305 := r.ReadArrayStart()
			if yyl1305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1306Slc
	var yyhl1306 bool = l >= 0
	for yyj1306 := 0; ; yyj1306++ {
		if yyhl1306 {
			if yyj1306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1306Slc = r.DecodeBytes(yys1306Slc, true, true)
		yys1306 := string(yys1306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1306 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1306)
		} // end switch yys1306
	} // end for yyj1306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1309 int
	var yyb1309 bool
	var yyhl1309 bool = l >= 0
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1309++
		if yyhl1309 {
			yyb1309 = yyj1309 > l
		} else {
			yyb1309 = r.CheckBreak()
		}
		if yyb1309 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1309-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1312 := z.EncBinary()
		_ = yym1312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1313 := !z.EncBinary()
			yy2arr1313 := z.EncBasicHandle().StructToArray
			var yyq1313 [1]bool
			_, _, _ = yysep1313, yyq1313, yy2arr1313
			const yyr1313 bool = false
			yyq1313[0] = true
			var yynn1313 int
			if yyr1313 || yy2arr1313 {
				r.EncodeArrayStart(1)
			} else {
				yynn1313 = 0
				for _, b := range yyq1313 {
					if b {
						yynn1313++
					}
				}
				r.EncodeMapStart(yynn1313)
				yynn1313 = 0
			}
			if yyr1313 || yy2arr1313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1313[0] {
					yy1315 := &x.StartedAt
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1315) {
					} else if yym1316 {
						z.EncBinaryMarshal(yy1315)
					} else if !yym1316 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1315)
					} else {
						z.EncFallback(yy1315)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1313[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1317 := &x.StartedAt
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1317) {
					} else if yym1318 {
						z.EncBinaryMarshal(yy1317)
					} else if !yym1318 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1317)
					} else {
						z.EncFallback(yy1317)
					}
				}
			}
			if yyr1313 || yy2arr1313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1320 := r.ContainerType()
		if yyct1320 == codecSelferValueTypeMap1234 {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if yyct1320 == codecSelferValueTypeArray1234 {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1321 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1322 := &x.StartedAt
				yym1323 := z.DecBinary()
				_ = yym1323
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1322) {
				} else if yym1323 {
					z.DecBinaryUnmarshal(yyv1322)
				} else if !yym1323 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1322)
				} else {
					z.DecFallback(yyv1322, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1324 int
	var yyb1324 bool
	var yyhl1324 bool = l >= 0
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1325 := &x.StartedAt
		yym1326 := z.DecBinary()
		_ = yym1326
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1325) {
		} else if yym1326 {
			z.DecBinaryUnmarshal(yyv1325)
		} else if !yym1326 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1325)
		} else {
			z.DecFallback(yyv1325, false)
		}
	}
	for {
		yyj1324++
		if yyhl1324 {
			yyb1324 = yyj1324 > l
		} else {
			yyb1324 = r.CheckBreak()
		}
		if yyb1324 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1324-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1327 := z.EncBinary()
		_ = yym1327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1328 := !z.EncBinary()
			yy2arr1328 := z.EncBasicHandle().StructToArray
			var yyq1328 [7]bool
			_, _, _ = yysep1328, yyq1328, yy2arr1328
			const yyr1328 bool = false
			yyq1328[1] = x.Signal != 0
			yyq1328[2] = x.Reason != ""
			yyq1328[3] = x.Message != ""
			yyq1328[4] = true
			yyq1328[5] = true
			yyq1328[6] = x.ContainerID != ""
			var yynn1328 int
			if yyr1328 || yy2arr1328 {
				r.EncodeArrayStart(7)
			} else {
				yynn1328 = 1
				for _, b := range yyq1328 {
					if b {
						yynn1328++
					}
				}
				r.EncodeMapStart(yynn1328)
				yynn1328 = 0
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1330 := z.EncBinary()
				_ = yym1330
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1331 := z.EncBinary()
				_ = yym1331
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[1] {
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[2] {
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1337 := z.EncBinary()
					_ = yym1337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[3] {
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1340 := z.EncBinary()
					_ = yym1340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[4] {
					yy1342 := &x.StartedAt
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1342) {
					} else if yym1343 {
						z.EncBinaryMarshal(yy1342)
					} else if !yym1343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1342)
					} else {
						z.EncFallback(yy1342)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1328[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1344 := &x.StartedAt
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1344) {
					} else if yym1345 {
						z.EncBinaryMarshal(yy1344)
					} else if !yym1345 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1344)
					} else {
						z.EncFallback(yy1344)
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[5] {
					yy1347 := &x.FinishedAt
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1347) {
					} else if yym1348 {
						z.EncBinaryMarshal(yy1347)
					} else if !yym1348 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1347)
					} else {
						z.EncFallback(yy1347)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1328[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1349 := &x.FinishedAt
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1349) {
					} else if yym1350 {
						z.EncBinaryMarshal(yy1349)
					} else if !yym1350 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1349)
					} else {
						z.EncFallback(yy1349)
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1328[6] {
					yym1352 := z.EncBinary()
					_ = yym1352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1328[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1328 || yy2arr1328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1354 := z.DecBinary()
	_ = yym1354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1355 := r.ContainerType()
		if yyct1355 == codecSelferValueTypeMap1234 {
			yyl1355 := r.ReadMapStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1355, d)
			}
		} else if yyct1355 == codecSelferValueTypeArray1234 {
			yyl1355 := r.ReadArrayStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1356Slc
	var yyhl1356 bool = l >= 0
	for yyj1356 := 0; ; yyj1356++ {
		if yyhl1356 {
			if yyj1356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1356Slc = r.DecodeBytes(yys1356Slc, true, true)
		yys1356 := string(yys1356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1356 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1361 := &x.StartedAt
				yym1362 := z.DecBinary()
				_ = yym1362
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1361) {
				} else if yym1362 {
					z.DecBinaryUnmarshal(yyv1361)
				} else if !yym1362 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1361)
				} else {
					z.DecFallback(yyv1361, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1363 := &x.FinishedAt
				yym1364 := z.DecBinary()
				_ = yym1364
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1363) {
				} else if yym1364 {
					z.DecBinaryUnmarshal(yyv1363)
				} else if !yym1364 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1363)
				} else {
					z.DecFallback(yyv1363, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1356)
		} // end switch yys1356
	} // end for yyj1356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1366 int
	var yyb1366 bool
	var yyhl1366 bool = l >= 0
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1371 := &x.StartedAt
		yym1372 := z.DecBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1371) {
		} else if yym1372 {
			z.DecBinaryUnmarshal(yyv1371)
		} else if !yym1372 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1371)
		} else {
			z.DecFallback(yyv1371, false)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1373 := &x.FinishedAt
		yym1374 := z.DecBinary()
		_ = yym1374
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1373) {
		} else if yym1374 {
			z.DecBinaryUnmarshal(yyv1373)
		} else if !yym1374 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1373)
		} else {
			z.DecFallback(yyv1373, false)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1366++
		if yyhl1366 {
			yyb1366 = yyj1366 > l
		} else {
			yyb1366 = r.CheckBreak()
		}
		if yyb1366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1376 := z.EncBinary()
		_ = yym1376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1377 := !z.EncBinary()
			yy2arr1377 := z.EncBasicHandle().StructToArray
			var yyq1377 [3]bool
			_, _, _ = yysep1377, yyq1377, yy2arr1377
			const yyr1377 bool = false
			yyq1377[0] = x.Waiting != nil
			yyq1377[1] = x.Running != nil
			yyq1377[2] = x.Terminated != nil
			var yynn1377 int
			if yyr1377 || yy2arr1377 {
				r.EncodeArrayStart(3)
			} else {
				yynn1377 = 0
				for _, b := range yyq1377 {
					if b {
						yynn1377++
					}
				}
				r.EncodeMapStart(yynn1377)
				yynn1377 = 0
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1381 := z.DecBinary()
	_ = yym1381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1382 := r.ContainerType()
		if yyct1382 == codecSelferValueTypeMap1234 {
			yyl1382 := r.ReadMapStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1382, d)
			}
		} else if yyct1382 == codecSelferValueTypeArray1234 {
			yyl1382 := r.ReadArrayStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1383Slc
	var yyhl1383 bool = l >= 0
	for yyj1383 := 0; ; yyj1383++ {
		if yyhl1383 {
			if yyj1383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1383Slc = r.DecodeBytes(yys1383Slc, true, true)
		yys1383 := string(yys1383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1383 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1383)
		} // end switch yys1383
	} // end for yyj1383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1387 int
	var yyb1387 bool
	var yyhl1387 bool = l >= 0
	yyj1387++
	if yyhl1387 {
		yyb1387 = yyj1387 > l
	} else {
		yyb1387 = r.CheckBreak()
	}
	if yyb1387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1387++
	if yyhl1387 {
		yyb1387 = yyj1387 > l
	} else {
		yyb1387 = r.CheckBreak()
	}
	if yyb1387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1387++
	if yyhl1387 {
		yyb1387 = yyj1387 > l
	} else {
		yyb1387 = r.CheckBreak()
	}
	if yyb1387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1387++
		if yyhl1387 {
			yyb1387 = yyj1387 > l
		} else {
			yyb1387 = r.CheckBreak()
		}
		if yyb1387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1391 := z.EncBinary()
		_ = yym1391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1392 := !z.EncBinary()
			yy2arr1392 := z.EncBasicHandle().StructToArray
			var yyq1392 [8]bool
			_, _, _ = yysep1392, yyq1392, yy2arr1392
			const yyr1392 bool = false
			yyq1392[1] = true
			yyq1392[2] = true
			yyq1392[7] = x.ContainerID != ""
			var yynn1392 int
			if yyr1392 || yy2arr1392 {
				r.EncodeArrayStart(8)
			} else {
				yynn1392 = 5
				for _, b := range yyq1392 {
					if b {
						yynn1392++
					}
				}
				r.EncodeMapStart(yynn1392)
				yynn1392 = 0
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1394 := z.EncBinary()
				_ = yym1394
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1395 := z.EncBinary()
				_ = yym1395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[1] {
					yy1397 := &x.State
					yy1397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1398 := &x.State
					yy1398.CodecEncodeSelf(e)
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[2] {
					yy1400 := &x.LastTerminationState
					yy1400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1401 := &x.LastTerminationState
					yy1401.CodecEncodeSelf(e)
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1403 := z.EncBinary()
				_ = yym1403
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1404 := z.EncBinary()
				_ = yym1404
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1406 := z.EncBinary()
				_ = yym1406
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1407 := z.EncBinary()
				_ = yym1407
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1409 := z.EncBinary()
				_ = yym1409
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1410 := z.EncBinary()
				_ = yym1410
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1412 := z.EncBinary()
				_ = yym1412
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1413 := z.EncBinary()
				_ = yym1413
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[7] {
					yym1415 := z.EncBinary()
					_ = yym1415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1392[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1416 := z.EncBinary()
					_ = yym1416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1417 := z.DecBinary()
	_ = yym1417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1418 := r.ContainerType()
		if yyct1418 == codecSelferValueTypeMap1234 {
			yyl1418 := r.ReadMapStart()
			if yyl1418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1418, d)
			}
		} else if yyct1418 == codecSelferValueTypeArray1234 {
			yyl1418 := r.ReadArrayStart()
			if yyl1418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1419Slc
	var yyhl1419 bool = l >= 0
	for yyj1419 := 0; ; yyj1419++ {
		if yyhl1419 {
			if yyj1419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1419Slc = r.DecodeBytes(yys1419Slc, true, true)
		yys1419 := string(yys1419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1419 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1421 := &x.State
				yyv1421.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1422 := &x.LastTerminationState
				yyv1422.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1419)
		} // end switch yys1419
	} // end for yyj1419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1428 int
	var yyb1428 bool
	var yyhl1428 bool = l >= 0
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1430 := &x.State
		yyv1430.CodecDecodeSelf(d)
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1431 := &x.LastTerminationState
		yyv1431.CodecDecodeSelf(d)
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1428++
	if yyhl1428 {
		yyb1428 = yyj1428 > l
	} else {
		yyb1428 = r.CheckBreak()
	}
	if yyb1428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1428++
		if yyhl1428 {
			yyb1428 = yyj1428 > l
		} else {
			yyb1428 = r.CheckBreak()
		}
		if yyb1428 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1428-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1437 := z.EncBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1438 := z.DecBinary()
	_ = yym1438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1439 := z.EncBinary()
	_ = yym1439
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1441 := z.EncBinary()
		_ = yym1441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1442 := !z.EncBinary()
			yy2arr1442 := z.EncBasicHandle().StructToArray
			var yyq1442 [6]bool
			_, _, _ = yysep1442, yyq1442, yy2arr1442
			const yyr1442 bool = false
			yyq1442[2] = true
			yyq1442[3] = true
			yyq1442[4] = x.Reason != ""
			yyq1442[5] = x.Message != ""
			var yynn1442 int
			if yyr1442 || yy2arr1442 {
				r.EncodeArrayStart(6)
			} else {
				yynn1442 = 2
				for _, b := range yyq1442 {
					if b {
						yynn1442++
					}
				}
				r.EncodeMapStart(yynn1442)
				yynn1442 = 0
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[2] {
					yy1446 := &x.LastProbeTime
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1446) {
					} else if yym1447 {
						z.EncBinaryMarshal(yy1446)
					} else if !yym1447 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1446)
					} else {
						z.EncFallback(yy1446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1448 := &x.LastProbeTime
					yym1449 := z.EncBinary()
					_ = yym1449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1448) {
					} else if yym1449 {
						z.EncBinaryMarshal(yy1448)
					} else if !yym1449 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1448)
					} else {
						z.EncFallback(yy1448)
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[3] {
					yy1451 := &x.LastTransitionTime
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1451) {
					} else if yym1452 {
						z.EncBinaryMarshal(yy1451)
					} else if !yym1452 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1451)
					} else {
						z.EncFallback(yy1451)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1453 := &x.LastTransitionTime
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1453) {
					} else if yym1454 {
						z.EncBinaryMarshal(yy1453)
					} else if !yym1454 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1453)
					} else {
						z.EncFallback(yy1453)
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[4] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1442[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[5] {
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1442[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1460 := z.EncBinary()
					_ = yym1460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1461 := z.DecBinary()
	_ = yym1461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1462 := r.ContainerType()
		if yyct1462 == codecSelferValueTypeMap1234 {
			yyl1462 := r.ReadMapStart()
			if yyl1462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1462, d)
			}
		} else if yyct1462 == codecSelferValueTypeArray1234 {
			yyl1462 := r.ReadArrayStart()
			if yyl1462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1463Slc
	var yyhl1463 bool = l >= 0
	for yyj1463 := 0; ; yyj1463++ {
		if yyhl1463 {
			if yyj1463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1463Slc = r.DecodeBytes(yys1463Slc, true, true)
		yys1463 := string(yys1463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1463 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1466 := &x.LastProbeTime
				yym1467 := z.DecBinary()
				_ = yym1467
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1466) {
				} else if yym1467 {
					z.DecBinaryUnmarshal(yyv1466)
				} else if !yym1467 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1466)
				} else {
					z.DecFallback(yyv1466, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1468 := &x.LastTransitionTime
				yym1469 := z.DecBinary()
				_ = yym1469
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1468) {
				} else if yym1469 {
					z.DecBinaryUnmarshal(yyv1468)
				} else if !yym1469 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1468)
				} else {
					z.DecFallback(yyv1468, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1463)
		} // end switch yys1463
	} // end for yyj1463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1472 int
	var yyb1472 bool
	var yyhl1472 bool = l >= 0
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1475 := &x.LastProbeTime
		yym1476 := z.DecBinary()
		_ = yym1476
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1475) {
		} else if yym1476 {
			z.DecBinaryUnmarshal(yyv1475)
		} else if !yym1476 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1475)
		} else {
			z.DecFallback(yyv1475, false)
		}
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1477 := &x.LastTransitionTime
		yym1478 := z.DecBinary()
		_ = yym1478
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1477) {
		} else if yym1478 {
			z.DecBinaryUnmarshal(yyv1477)
		} else if !yym1478 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1477)
		} else {
			z.DecFallback(yyv1477, false)
		}
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1472++
		if yyhl1472 {
			yyb1472 = yyj1472 > l
		} else {
			yyb1472 = r.CheckBreak()
		}
		if yyb1472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1481 := z.EncBinary()
	_ = yym1481
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1482 := z.DecBinary()
	_ = yym1482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1483 := z.EncBinary()
		_ = yym1483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1484 := !z.EncBinary()
			yy2arr1484 := z.EncBasicHandle().StructToArray
			var yyq1484 [4]bool
			_, _, _ = yysep1484, yyq1484, yy2arr1484
			const yyr1484 bool = false
			yyq1484[0] = x.Kind != ""
			yyq1484[1] = x.APIVersion != ""
			yyq1484[2] = true
			var yynn1484 int
			if yyr1484 || yy2arr1484 {
				r.EncodeArrayStart(4)
			} else {
				yynn1484 = 1
				for _, b := range yyq1484 {
					if b {
						yynn1484++
					}
				}
				r.EncodeMapStart(yynn1484)
				yynn1484 = 0
			}
			if yyr1484 || yy2arr1484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1484[0] {
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1484 || yy2arr1484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1484[1] {
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1484[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1484 || yy2arr1484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1484[2] {
					yy1492 := &x.ListMeta
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1492) {
					} else {
						z.EncFallback(yy1492)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1484[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1494 := &x.ListMeta
					yym1495 := z.EncBinary()
					_ = yym1495
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1494) {
					} else {
						z.EncFallback(yy1494)
					}
				}
			}
			if yyr1484 || yy2arr1484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1484 || yy2arr1484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1499 := z.DecBinary()
	_ = yym1499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1500 := r.ContainerType()
		if yyct1500 == codecSelferValueTypeMap1234 {
			yyl1500 := r.ReadMapStart()
			if yyl1500 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1500, d)
			}
		} else if yyct1500 == codecSelferValueTypeArray1234 {
			yyl1500 := r.ReadArrayStart()
			if yyl1500 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1500, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1501Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1501Slc
	var yyhl1501 bool = l >= 0
	for yyj1501 := 0; ; yyj1501++ {
		if yyhl1501 {
			if yyj1501 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1501Slc = r.DecodeBytes(yys1501Slc, true, true)
		yys1501 := string(yys1501Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1501 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1504 := &x.ListMeta
				yym1505 := z.DecBinary()
				_ = yym1505
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1504) {
				} else {
					z.DecFallback(yyv1504, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1506 := &x.Items
				yym1507 := z.DecBinary()
				_ = yym1507
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1506), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1501)
		} // end switch yys1501
	} // end for yyj1501
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1508 int
	var yyb1508 bool
	var yyhl1508 bool = l >= 0
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1511 := &x.ListMeta
		yym1512 := z.DecBinary()
		_ = yym1512
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1511) {
		} else {
			z.DecFallback(yyv1511, false)
		}
	}
	yyj1508++
	if yyhl1508 {
		yyb1508 = yyj1508 > l
	} else {
		yyb1508 = r.CheckBreak()
	}
	if yyb1508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1513 := &x.Items
		yym1514 := z.DecBinary()
		_ = yym1514
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1513), d)
		}
	}
	for {
		yyj1508++
		if yyhl1508 {
			yyb1508 = yyj1508 > l
		} else {
			yyb1508 = r.CheckBreak()
		}
		if yyb1508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1515 := z.EncBinary()
	_ = yym1515
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1516 := z.DecBinary()
	_ = yym1516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1517 := z.EncBinary()
		_ = yym1517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1518 := !z.EncBinary()
			yy2arr1518 := z.EncBasicHandle().StructToArray
			var yyq1518 [11]bool
			_, _, _ = yysep1518, yyq1518, yy2arr1518
			const yyr1518 bool = false
			yyq1518[2] = x.RestartPolicy != ""
			yyq1518[3] = x.TerminationGracePeriodSeconds != nil
			yyq1518[4] = x.ActiveDeadlineSeconds != nil
			yyq1518[5] = x.DNSPolicy != ""
			yyq1518[6] = len(x.NodeSelector) != 0
			yyq1518[8] = x.NodeName != ""
			yyq1518[9] = x.SecurityContext != nil
			yyq1518[10] = len(x.ImagePullSecrets) != 0
			var yynn1518 int
			if yyr1518 || yy2arr1518 {
				r.EncodeArrayStart(11)
			} else {
				yynn1518 = 3
				for _, b := range yyq1518 {
					if b {
						yynn1518++
					}
				}
				r.EncodeMapStart(yynn1518)
				yynn1518 = 0
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1518[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1527 := *x.TerminationGracePeriodSeconds
						yym1528 := z.EncBinary()
						_ = yym1528
						if false {
						} else {
							r.EncodeInt(int64(yy1527))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1529 := *x.TerminationGracePeriodSeconds
						yym1530 := z.EncBinary()
						_ = yym1530
						if false {
						} else {
							r.EncodeInt(int64(yy1529))
						}
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1532 := *x.ActiveDeadlineSeconds
						yym1533 := z.EncBinary()
						_ = yym1533
						if false {
						} else {
							r.EncodeInt(int64(yy1532))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1534 := *x.ActiveDeadlineSeconds
						yym1535 := z.EncBinary()
						_ = yym1535
						if false {
						} else {
							r.EncodeInt(int64(yy1534))
						}
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1518[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1539 := z.EncBinary()
						_ = yym1539
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1541 := z.EncBinary()
				_ = yym1541
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1542 := z.EncBinary()
				_ = yym1542
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[8] {
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1518[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1545 := z.EncBinary()
					_ = yym1545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1548 := z.EncBinary()
						_ = yym1548
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1549 := z.EncBinary()
						_ = yym1549
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1550 := z.DecBinary()
	_ = yym1550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1551 := r.ContainerType()
		if yyct1551 == codecSelferValueTypeMap1234 {
			yyl1551 := r.ReadMapStart()
			if yyl1551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1551, d)
			}
		} else if yyct1551 == codecSelferValueTypeArray1234 {
			yyl1551 := r.ReadArrayStart()
			if yyl1551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1552Slc
	var yyhl1552 bool = l >= 0
	for yyj1552 := 0; ; yyj1552++ {
		if yyhl1552 {
			if yyj1552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1552Slc = r.DecodeBytes(yys1552Slc, true, true)
		yys1552 := string(yys1552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1552 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1553 := &x.Volumes
				yym1554 := z.DecBinary()
				_ = yym1554
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1553), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1555 := &x.Containers
				yym1556 := z.DecBinary()
				_ = yym1556
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1555), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1559 := z.DecBinary()
				_ = yym1559
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1561 := z.DecBinary()
				_ = yym1561
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1563 := &x.NodeSelector
				yym1564 := z.DecBinary()
				_ = yym1564
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1563, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1568 := &x.ImagePullSecrets
				yym1569 := z.DecBinary()
				_ = yym1569
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1568), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1552)
		} // end switch yys1552
	} // end for yyj1552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1570 int
	var yyb1570 bool
	var yyhl1570 bool = l >= 0
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1571 := &x.Volumes
		yym1572 := z.DecBinary()
		_ = yym1572
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1571), d)
		}
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1573 := &x.Containers
		yym1574 := z.DecBinary()
		_ = yym1574
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1573), d)
		}
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1577 := z.DecBinary()
		_ = yym1577
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1579 := z.DecBinary()
		_ = yym1579
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1581 := &x.NodeSelector
		yym1582 := z.DecBinary()
		_ = yym1582
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1581, false, d)
		}
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1570++
	if yyhl1570 {
		yyb1570 = yyj1570 > l
	} else {
		yyb1570 = r.CheckBreak()
	}
	if yyb1570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1586 := &x.ImagePullSecrets
		yym1587 := z.DecBinary()
		_ = yym1587
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1586), d)
		}
	}
	for {
		yyj1570++
		if yyhl1570 {
			yyb1570 = yyj1570 > l
		} else {
			yyb1570 = r.CheckBreak()
		}
		if yyb1570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1588 := z.EncBinary()
		_ = yym1588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1589 := !z.EncBinary()
			yy2arr1589 := z.EncBasicHandle().StructToArray
			var yyq1589 [8]bool
			_, _, _ = yysep1589, yyq1589, yy2arr1589
			const yyr1589 bool = false
			yyq1589[0] = x.HostNetwork != false
			yyq1589[1] = x.HostPID != false
			yyq1589[2] = x.HostIPC != false
			yyq1589[3] = x.SELinuxOptions != nil
			yyq1589[4] = x.RunAsUser != nil
			yyq1589[5] = x.RunAsNonRoot != nil
			yyq1589[6] = len(x.SupplementalGroups) != 0
			yyq1589[7] = x.FSGroup != nil
			var yynn1589 int
			if yyr1589 || yy2arr1589 {
				r.EncodeArrayStart(8)
			} else {
				yynn1589 = 0
				for _, b := range yyq1589 {
					if b {
						yynn1589++
					}
				}
				r.EncodeMapStart(yynn1589)
				yynn1589 = 0
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[0] {
					yym1591 := z.EncBinary()
					_ = yym1591
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1589[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1592 := z.EncBinary()
					_ = yym1592
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[1] {
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1589[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[2] {
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1589[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1598 := z.EncBinary()
					_ = yym1598
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1601 := *x.RunAsUser
						yym1602 := z.EncBinary()
						_ = yym1602
						if false {
						} else {
							r.EncodeInt(int64(yy1601))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1603 := *x.RunAsUser
						yym1604 := z.EncBinary()
						_ = yym1604
						if false {
						} else {
							r.EncodeInt(int64(yy1603))
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1606 := *x.RunAsNonRoot
						yym1607 := z.EncBinary()
						_ = yym1607
						if false {
						} else {
							r.EncodeBool(bool(yy1606))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1608 := *x.RunAsNonRoot
						yym1609 := z.EncBinary()
						_ = yym1609
						if false {
						} else {
							r.EncodeBool(bool(yy1608))
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1611 := z.EncBinary()
						_ = yym1611
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1612 := z.EncBinary()
						_ = yym1612
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1589[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1614 := *x.FSGroup
						yym1615 := z.EncBinary()
						_ = yym1615
						if false {
						} else {
							r.EncodeInt(int64(yy1614))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1589[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1616 := *x.FSGroup
						yym1617 := z.EncBinary()
						_ = yym1617
						if false {
						} else {
							r.EncodeInt(int64(yy1616))
						}
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1618 := z.DecBinary()
	_ = yym1618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1619 := r.ContainerType()
		if yyct1619 == codecSelferValueTypeMap1234 {
			yyl1619 := r.ReadMapStart()
			if yyl1619 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1619, d)
			}
		} else if yyct1619 == codecSelferValueTypeArray1234 {
			yyl1619 := r.ReadArrayStart()
			if yyl1619 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1620Slc
	var yyhl1620 bool = l >= 0
	for yyj1620 := 0; ; yyj1620++ {
		if yyhl1620 {
			if yyj1620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1620Slc = r.DecodeBytes(yys1620Slc, true, true)
		yys1620 := string(yys1620Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1620 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1626 := z.DecBinary()
				_ = yym1626
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1628 := z.DecBinary()
				_ = yym1628
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1629 := &x.SupplementalGroups
				yym1630 := z.DecBinary()
				_ = yym1630
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1629, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1632 := z.DecBinary()
				_ = yym1632
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1620)
		} // end switch yys1620
	} // end for yyj1620
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1633 int
	var yyb1633 bool
	var yyhl1633 bool = l >= 0
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1639 := z.DecBinary()
		_ = yym1639
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1641 := z.DecBinary()
		_ = yym1641
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1642 := &x.SupplementalGroups
		yym1643 := z.DecBinary()
		_ = yym1643
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1642, false, d)
		}
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1645 := z.DecBinary()
		_ = yym1645
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1633++
		if yyhl1633 {
			yyb1633 = yyj1633 > l
		} else {
			yyb1633 = r.CheckBreak()
		}
		if yyb1633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1646 := z.EncBinary()
		_ = yym1646
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1647 := !z.EncBinary()
			yy2arr1647 := z.EncBasicHandle().StructToArray
			var yyq1647 [8]bool
			_, _, _ = yysep1647, yyq1647, yy2arr1647
			const yyr1647 bool = false
			yyq1647[0] = x.Phase != ""
			yyq1647[1] = len(x.Conditions) != 0
			yyq1647[2] = x.Message != ""
			yyq1647[3] = x.Reason != ""
			yyq1647[4] = x.HostIP != ""
			yyq1647[5] = x.PodIP != ""
			yyq1647[6] = x.StartTime != nil
			yyq1647[7] = len(x.ContainerStatuses) != 0
			var yynn1647 int
			if yyr1647 || yy2arr1647 {
				r.EncodeArrayStart(8)
			} else {
				yynn1647 = 0
				for _, b := range yyq1647 {
					if b {
						yynn1647++
					}
				}
				r.EncodeMapStart(yynn1647)
				yynn1647 = 0
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1650 := z.EncBinary()
						_ = yym1650
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1647[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1651 := z.EncBinary()
						_ = yym1651
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[2] {
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[3] {
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[4] {
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[5] {
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1665 := z.EncBinary()
						_ = yym1665
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1665 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1665 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1647[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1666 := z.EncBinary()
						_ = yym1666
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1666 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1666 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1668 := z.EncBinary()
						_ = yym1668
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1647[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1669 := z.EncBinary()
						_ = yym1669
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1670 := z.DecBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1671 := r.ContainerType()
		if yyct1671 == codecSelferValueTypeMap1234 {
			yyl1671 := r.ReadMapStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1671, d)
			}
		} else if yyct1671 == codecSelferValueTypeArray1234 {
			yyl1671 := r.ReadArrayStart()
			if yyl1671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1672Slc
	var yyhl1672 bool = l >= 0
	for yyj1672 := 0; ; yyj1672++ {
		if yyhl1672 {
			if yyj1672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1672Slc = r.DecodeBytes(yys1672Slc, true, true)
		yys1672 := string(yys1672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1672 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1674 := &x.Conditions
				yym1675 := z.DecBinary()
				_ = yym1675
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1674), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1681 := z.DecBinary()
				_ = yym1681
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1681 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1681 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1682 := &x.ContainerStatuses
				yym1683 := z.DecBinary()
				_ = yym1683
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1682), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1672)
		} // end switch yys1672
	} // end for yyj1672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1684 int
	var yyb1684 bool
	var yyhl1684 bool = l >= 0
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1686 := &x.Conditions
		yym1687 := z.DecBinary()
		_ = yym1687
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1686), d)
		}
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1693 := z.DecBinary()
		_ = yym1693
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1693 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1693 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1694 := &x.ContainerStatuses
		yym1695 := z.DecBinary()
		_ = yym1695
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1694), d)
		}
	}
	for {
		yyj1684++
		if yyhl1684 {
			yyb1684 = yyj1684 > l
		} else {
			yyb1684 = r.CheckBreak()
		}
		if yyb1684 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1684-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1696 := z.EncBinary()
		_ = yym1696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1697 := !z.EncBinary()
			yy2arr1697 := z.EncBasicHandle().StructToArray
			var yyq1697 [4]bool
			_, _, _ = yysep1697, yyq1697, yy2arr1697
			const yyr1697 bool = false
			yyq1697[0] = x.Kind != ""
			yyq1697[1] = x.APIVersion != ""
			yyq1697[2] = true
			yyq1697[3] = true
			var yynn1697 int
			if yyr1697 || yy2arr1697 {
				r.EncodeArrayStart(4)
			} else {
				yynn1697 = 0
				for _, b := range yyq1697 {
					if b {
						yynn1697++
					}
				}
				r.EncodeMapStart(yynn1697)
				yynn1697 = 0
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[0] {
					yym1699 := z.EncBinary()
					_ = yym1699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[1] {
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[2] {
					yy1705 := &x.ObjectMeta
					yy1705.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1706 := &x.ObjectMeta
					yy1706.CodecEncodeSelf(e)
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[3] {
					yy1708 := &x.Status
					yy1708.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1709 := &x.Status
					yy1709.CodecEncodeSelf(e)
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1710 := z.DecBinary()
	_ = yym1710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1711 := r.ContainerType()
		if yyct1711 == codecSelferValueTypeMap1234 {
			yyl1711 := r.ReadMapStart()
			if yyl1711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1711, d)
			}
		} else if yyct1711 == codecSelferValueTypeArray1234 {
			yyl1711 := r.ReadArrayStart()
			if yyl1711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1712Slc
	var yyhl1712 bool = l >= 0
	for yyj1712 := 0; ; yyj1712++ {
		if yyhl1712 {
			if yyj1712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1712Slc = r.DecodeBytes(yys1712Slc, true, true)
		yys1712 := string(yys1712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1712 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1715 := &x.ObjectMeta
				yyv1715.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1716 := &x.Status
				yyv1716.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1712)
		} // end switch yys1712
	} // end for yyj1712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1717 int
	var yyb1717 bool
	var yyhl1717 bool = l >= 0
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1720 := &x.ObjectMeta
		yyv1720.CodecDecodeSelf(d)
	}
	yyj1717++
	if yyhl1717 {
		yyb1717 = yyj1717 > l
	} else {
		yyb1717 = r.CheckBreak()
	}
	if yyb1717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1721 := &x.Status
		yyv1721.CodecDecodeSelf(d)
	}
	for {
		yyj1717++
		if yyhl1717 {
			yyb1717 = yyj1717 > l
		} else {
			yyb1717 = r.CheckBreak()
		}
		if yyb1717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1722 := z.EncBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1723 := !z.EncBinary()
			yy2arr1723 := z.EncBasicHandle().StructToArray
			var yyq1723 [5]bool
			_, _, _ = yysep1723, yyq1723, yy2arr1723
			const yyr1723 bool = false
			yyq1723[0] = x.Kind != ""
			yyq1723[1] = x.APIVersion != ""
			yyq1723[2] = true
			yyq1723[3] = true
			yyq1723[4] = true
			var yynn1723 int
			if yyr1723 || yy2arr1723 {
				r.EncodeArrayStart(5)
			} else {
				yynn1723 = 0
				for _, b := range yyq1723 {
					if b {
						yynn1723++
					}
				}
				r.EncodeMapStart(yynn1723)
				yynn1723 = 0
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[0] {
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1723[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[1] {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1723[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[2] {
					yy1731 := &x.ObjectMeta
					yy1731.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1732 := &x.ObjectMeta
					yy1732.CodecEncodeSelf(e)
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[3] {
					yy1734 := &x.Spec
					yy1734.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1735 := &x.Spec
					yy1735.CodecEncodeSelf(e)
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1723[4] {
					yy1737 := &x.Status
					yy1737.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1738 := &x.Status
					yy1738.CodecEncodeSelf(e)
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1739 := z.DecBinary()
	_ = yym1739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1740 := r.ContainerType()
		if yyct1740 == codecSelferValueTypeMap1234 {
			yyl1740 := r.ReadMapStart()
			if yyl1740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1740, d)
			}
		} else if yyct1740 == codecSelferValueTypeArray1234 {
			yyl1740 := r.ReadArrayStart()
			if yyl1740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1741Slc
	var yyhl1741 bool = l >= 0
	for yyj1741 := 0; ; yyj1741++ {
		if yyhl1741 {
			if yyj1741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1741Slc = r.DecodeBytes(yys1741Slc, true, true)
		yys1741 := string(yys1741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1741 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1744 := &x.ObjectMeta
				yyv1744.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1745 := &x.Spec
				yyv1745.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1746 := &x.Status
				yyv1746.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1741)
		} // end switch yys1741
	} // end for yyj1741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1747 int
	var yyb1747 bool
	var yyhl1747 bool = l >= 0
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1750 := &x.ObjectMeta
		yyv1750.CodecDecodeSelf(d)
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1751 := &x.Spec
		yyv1751.CodecDecodeSelf(d)
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1752 := &x.Status
		yyv1752.CodecDecodeSelf(d)
	}
	for {
		yyj1747++
		if yyhl1747 {
			yyb1747 = yyj1747 > l
		} else {
			yyb1747 = r.CheckBreak()
		}
		if yyb1747 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1747-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1753 := z.EncBinary()
		_ = yym1753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1754 := !z.EncBinary()
			yy2arr1754 := z.EncBasicHandle().StructToArray
			var yyq1754 [2]bool
			_, _, _ = yysep1754, yyq1754, yy2arr1754
			const yyr1754 bool = false
			yyq1754[0] = true
			yyq1754[1] = true
			var yynn1754 int
			if yyr1754 || yy2arr1754 {
				r.EncodeArrayStart(2)
			} else {
				yynn1754 = 0
				for _, b := range yyq1754 {
					if b {
						yynn1754++
					}
				}
				r.EncodeMapStart(yynn1754)
				yynn1754 = 0
			}
			if yyr1754 || yy2arr1754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1754[0] {
					yy1756 := &x.ObjectMeta
					yy1756.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1754[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1757 := &x.ObjectMeta
					yy1757.CodecEncodeSelf(e)
				}
			}
			if yyr1754 || yy2arr1754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1754[1] {
					yy1759 := &x.Spec
					yy1759.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1754[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1760 := &x.Spec
					yy1760.CodecEncodeSelf(e)
				}
			}
			if yyr1754 || yy2arr1754 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1761 := z.DecBinary()
	_ = yym1761
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1762 := r.ContainerType()
		if yyct1762 == codecSelferValueTypeMap1234 {
			yyl1762 := r.ReadMapStart()
			if yyl1762 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1762, d)
			}
		} else if yyct1762 == codecSelferValueTypeArray1234 {
			yyl1762 := r.ReadArrayStart()
			if yyl1762 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1762, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1763Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1763Slc
	var yyhl1763 bool = l >= 0
	for yyj1763 := 0; ; yyj1763++ {
		if yyhl1763 {
			if yyj1763 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1763Slc = r.DecodeBytes(yys1763Slc, true, true)
		yys1763 := string(yys1763Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1763 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1764 := &x.ObjectMeta
				yyv1764.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1765 := &x.Spec
				yyv1765.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1763)
		} // end switch yys1763
	} // end for yyj1763
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1766 int
	var yyb1766 bool
	var yyhl1766 bool = l >= 0
	yyj1766++
	if yyhl1766 {
		yyb1766 = yyj1766 > l
	} else {
		yyb1766 = r.CheckBreak()
	}
	if yyb1766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1767 := &x.ObjectMeta
		yyv1767.CodecDecodeSelf(d)
	}
	yyj1766++
	if yyhl1766 {
		yyb1766 = yyj1766 > l
	} else {
		yyb1766 = r.CheckBreak()
	}
	if yyb1766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1768 := &x.Spec
		yyv1768.CodecDecodeSelf(d)
	}
	for {
		yyj1766++
		if yyhl1766 {
			yyb1766 = yyj1766 > l
		} else {
			yyb1766 = r.CheckBreak()
		}
		if yyb1766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1769 := z.EncBinary()
		_ = yym1769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1770 := !z.EncBinary()
			yy2arr1770 := z.EncBasicHandle().StructToArray
			var yyq1770 [4]bool
			_, _, _ = yysep1770, yyq1770, yy2arr1770
			const yyr1770 bool = false
			yyq1770[0] = x.Kind != ""
			yyq1770[1] = x.APIVersion != ""
			yyq1770[2] = true
			yyq1770[3] = true
			var yynn1770 int
			if yyr1770 || yy2arr1770 {
				r.EncodeArrayStart(4)
			} else {
				yynn1770 = 0
				for _, b := range yyq1770 {
					if b {
						yynn1770++
					}
				}
				r.EncodeMapStart(yynn1770)
				yynn1770 = 0
			}
			if yyr1770 || yy2arr1770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1770[0] {
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1770[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1773 := z.EncBinary()
					_ = yym1773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1770 || yy2arr1770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1770[1] {
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1770[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1770 || yy2arr1770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1770[2] {
					yy1778 := &x.ObjectMeta
					yy1778.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1770[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1779 := &x.ObjectMeta
					yy1779.CodecEncodeSelf(e)
				}
			}
			if yyr1770 || yy2arr1770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1770[3] {
					yy1781 := &x.Template
					yy1781.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1770[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1782 := &x.Template
					yy1782.CodecEncodeSelf(e)
				}
			}
			if yyr1770 || yy2arr1770 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1783 := z.DecBinary()
	_ = yym1783
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1784 := r.ContainerType()
		if yyct1784 == codecSelferValueTypeMap1234 {
			yyl1784 := r.ReadMapStart()
			if yyl1784 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1784, d)
			}
		} else if yyct1784 == codecSelferValueTypeArray1234 {
			yyl1784 := r.ReadArrayStart()
			if yyl1784 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1784, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1785Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1785Slc
	var yyhl1785 bool = l >= 0
	for yyj1785 := 0; ; yyj1785++ {
		if yyhl1785 {
			if yyj1785 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1785Slc = r.DecodeBytes(yys1785Slc, true, true)
		yys1785 := string(yys1785Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1785 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1788 := &x.ObjectMeta
				yyv1788.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1789 := &x.Template
				yyv1789.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1785)
		} // end switch yys1785
	} // end for yyj1785
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1790 int
	var yyb1790 bool
	var yyhl1790 bool = l >= 0
	yyj1790++
	if yyhl1790 {
		yyb1790 = yyj1790 > l
	} else {
		yyb1790 = r.CheckBreak()
	}
	if yyb1790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1790++
	if yyhl1790 {
		yyb1790 = yyj1790 > l
	} else {
		yyb1790 = r.CheckBreak()
	}
	if yyb1790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1790++
	if yyhl1790 {
		yyb1790 = yyj1790 > l
	} else {
		yyb1790 = r.CheckBreak()
	}
	if yyb1790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1793 := &x.ObjectMeta
		yyv1793.CodecDecodeSelf(d)
	}
	yyj1790++
	if yyhl1790 {
		yyb1790 = yyj1790 > l
	} else {
		yyb1790 = r.CheckBreak()
	}
	if yyb1790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1794 := &x.Template
		yyv1794.CodecDecodeSelf(d)
	}
	for {
		yyj1790++
		if yyhl1790 {
			yyb1790 = yyj1790 > l
		} else {
			yyb1790 = r.CheckBreak()
		}
		if yyb1790 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1790-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1795 := z.EncBinary()
		_ = yym1795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1796 := !z.EncBinary()
			yy2arr1796 := z.EncBasicHandle().StructToArray
			var yyq1796 [4]bool
			_, _, _ = yysep1796, yyq1796, yy2arr1796
			const yyr1796 bool = false
			yyq1796[0] = x.Kind != ""
			yyq1796[1] = x.APIVersion != ""
			yyq1796[2] = true
			var yynn1796 int
			if yyr1796 || yy2arr1796 {
				r.EncodeArrayStart(4)
			} else {
				yynn1796 = 1
				for _, b := range yyq1796 {
					if b {
						yynn1796++
					}
				}
				r.EncodeMapStart(yynn1796)
				yynn1796 = 0
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1796[0] {
					yym1798 := z.EncBinary()
					_ = yym1798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1796[1] {
					yym1801 := z.EncBinary()
					_ = yym1801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1802 := z.EncBinary()
					_ = yym1802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1796[2] {
					yy1804 := &x.ListMeta
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1804) {
					} else {
						z.EncFallback(yy1804)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1806 := &x.ListMeta
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1806) {
					} else {
						z.EncFallback(yy1806)
					}
				}
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1809 := z.EncBinary()
					_ = yym1809
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1811 := z.DecBinary()
	_ = yym1811
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1812 := r.ContainerType()
		if yyct1812 == codecSelferValueTypeMap1234 {
			yyl1812 := r.ReadMapStart()
			if yyl1812 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1812, d)
			}
		} else if yyct1812 == codecSelferValueTypeArray1234 {
			yyl1812 := r.ReadArrayStart()
			if yyl1812 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1812, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1813Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1813Slc
	var yyhl1813 bool = l >= 0
	for yyj1813 := 0; ; yyj1813++ {
		if yyhl1813 {
			if yyj1813 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1813Slc = r.DecodeBytes(yys1813Slc, true, true)
		yys1813 := string(yys1813Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1813 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1816 := &x.ListMeta
				yym1817 := z.DecBinary()
				_ = yym1817
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1816) {
				} else {
					z.DecFallback(yyv1816, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1818 := &x.Items
				yym1819 := z.DecBinary()
				_ = yym1819
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1818), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1813)
		} // end switch yys1813
	} // end for yyj1813
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1820 int
	var yyb1820 bool
	var yyhl1820 bool = l >= 0
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1823 := &x.ListMeta
		yym1824 := z.DecBinary()
		_ = yym1824
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1823) {
		} else {
			z.DecFallback(yyv1823, false)
		}
	}
	yyj1820++
	if yyhl1820 {
		yyb1820 = yyj1820 > l
	} else {
		yyb1820 = r.CheckBreak()
	}
	if yyb1820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1825 := &x.Items
		yym1826 := z.DecBinary()
		_ = yym1826
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1825), d)
		}
	}
	for {
		yyj1820++
		if yyhl1820 {
			yyb1820 = yyj1820 > l
		} else {
			yyb1820 = r.CheckBreak()
		}
		if yyb1820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1827 := z.EncBinary()
		_ = yym1827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1828 := !z.EncBinary()
			yy2arr1828 := z.EncBasicHandle().StructToArray
			var yyq1828 [3]bool
			_, _, _ = yysep1828, yyq1828, yy2arr1828
			const yyr1828 bool = false
			yyq1828[2] = x.Template != nil
			var yynn1828 int
			if yyr1828 || yy2arr1828 {
				r.EncodeArrayStart(3)
			} else {
				yynn1828 = 2
				for _, b := range yyq1828 {
					if b {
						yynn1828++
					}
				}
				r.EncodeMapStart(yynn1828)
				yynn1828 = 0
			}
			if yyr1828 || yy2arr1828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1830 := z.EncBinary()
				_ = yym1830
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1831 := z.EncBinary()
				_ = yym1831
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1828 || yy2arr1828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1834 := z.EncBinary()
					_ = yym1834
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1828 || yy2arr1828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1828[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1828 || yy2arr1828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1836 := z.DecBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1837 := r.ContainerType()
		if yyct1837 == codecSelferValueTypeMap1234 {
			yyl1837 := r.ReadMapStart()
			if yyl1837 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1837, d)
			}
		} else if yyct1837 == codecSelferValueTypeArray1234 {
			yyl1837 := r.ReadArrayStart()
			if yyl1837 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1838Slc
	var yyhl1838 bool = l >= 0
	for yyj1838 := 0; ; yyj1838++ {
		if yyhl1838 {
			if yyj1838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1838Slc = r.DecodeBytes(yys1838Slc, true, true)
		yys1838 := string(yys1838Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1838 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1840 := &x.Selector
				yym1841 := z.DecBinary()
				_ = yym1841
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1840, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1838)
		} // end switch yys1838
	} // end for yyj1838
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1843 int
	var yyb1843 bool
	var yyhl1843 bool = l >= 0
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1845 := &x.Selector
		yym1846 := z.DecBinary()
		_ = yym1846
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1845, false, d)
		}
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1843++
		if yyhl1843 {
			yyb1843 = yyj1843 > l
		} else {
			yyb1843 = r.CheckBreak()
		}
		if yyb1843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1848 := z.EncBinary()
		_ = yym1848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1849 := !z.EncBinary()
			yy2arr1849 := z.EncBasicHandle().StructToArray
			var yyq1849 [2]bool
			_, _, _ = yysep1849, yyq1849, yy2arr1849
			const yyr1849 bool = false
			yyq1849[1] = x.ObservedGeneration != 0
			var yynn1849 int
			if yyr1849 || yy2arr1849 {
				r.EncodeArrayStart(2)
			} else {
				yynn1849 = 1
				for _, b := range yyq1849 {
					if b {
						yynn1849++
					}
				}
				r.EncodeMapStart(yynn1849)
				yynn1849 = 0
			}
			if yyr1849 || yy2arr1849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1851 := z.EncBinary()
				_ = yym1851
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1852 := z.EncBinary()
				_ = yym1852
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1849 || yy2arr1849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1849[1] {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1849[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1849 || yy2arr1849 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1856 := z.DecBinary()
	_ = yym1856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1857 := r.ContainerType()
		if yyct1857 == codecSelferValueTypeMap1234 {
			yyl1857 := r.ReadMapStart()
			if yyl1857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1857, d)
			}
		} else if yyct1857 == codecSelferValueTypeArray1234 {
			yyl1857 := r.ReadArrayStart()
			if yyl1857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1858Slc
	var yyhl1858 bool = l >= 0
	for yyj1858 := 0; ; yyj1858++ {
		if yyhl1858 {
			if yyj1858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1858Slc = r.DecodeBytes(yys1858Slc, true, true)
		yys1858 := string(yys1858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1858 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1858)
		} // end switch yys1858
	} // end for yyj1858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1861 int
	var yyb1861 bool
	var yyhl1861 bool = l >= 0
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1861++
		if yyhl1861 {
			yyb1861 = yyj1861 > l
		} else {
			yyb1861 = r.CheckBreak()
		}
		if yyb1861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1864 := z.EncBinary()
		_ = yym1864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1865 := !z.EncBinary()
			yy2arr1865 := z.EncBasicHandle().StructToArray
			var yyq1865 [5]bool
			_, _, _ = yysep1865, yyq1865, yy2arr1865
			const yyr1865 bool = false
			yyq1865[0] = x.Kind != ""
			yyq1865[1] = x.APIVersion != ""
			yyq1865[2] = true
			yyq1865[3] = true
			yyq1865[4] = true
			var yynn1865 int
			if yyr1865 || yy2arr1865 {
				r.EncodeArrayStart(5)
			} else {
				yynn1865 = 0
				for _, b := range yyq1865 {
					if b {
						yynn1865++
					}
				}
				r.EncodeMapStart(yynn1865)
				yynn1865 = 0
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[0] {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1865[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[1] {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1865[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1871 := z.EncBinary()
					_ = yym1871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[2] {
					yy1873 := &x.ObjectMeta
					yy1873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1865[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1874 := &x.ObjectMeta
					yy1874.CodecEncodeSelf(e)
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[3] {
					yy1876 := &x.Spec
					yy1876.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1865[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1877 := &x.Spec
					yy1877.CodecEncodeSelf(e)
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1865[4] {
					yy1879 := &x.Status
					yy1879.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1865[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1880 := &x.Status
					yy1880.CodecEncodeSelf(e)
				}
			}
			if yyr1865 || yy2arr1865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1881 := z.DecBinary()
	_ = yym1881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1882 := r.ContainerType()
		if yyct1882 == codecSelferValueTypeMap1234 {
			yyl1882 := r.ReadMapStart()
			if yyl1882 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1882, d)
			}
		} else if yyct1882 == codecSelferValueTypeArray1234 {
			yyl1882 := r.ReadArrayStart()
			if yyl1882 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1883Slc
	var yyhl1883 bool = l >= 0
	for yyj1883 := 0; ; yyj1883++ {
		if yyhl1883 {
			if yyj1883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1883Slc = r.DecodeBytes(yys1883Slc, true, true)
		yys1883 := string(yys1883Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1883 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1886 := &x.ObjectMeta
				yyv1886.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1887 := &x.Spec
				yyv1887.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1888 := &x.Status
				yyv1888.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1883)
		} // end switch yys1883
	} // end for yyj1883
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1889 int
	var yyb1889 bool
	var yyhl1889 bool = l >= 0
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1892 := &x.ObjectMeta
		yyv1892.CodecDecodeSelf(d)
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1893 := &x.Spec
		yyv1893.CodecDecodeSelf(d)
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1894 := &x.Status
		yyv1894.CodecDecodeSelf(d)
	}
	for {
		yyj1889++
		if yyhl1889 {
			yyb1889 = yyj1889 > l
		} else {
			yyb1889 = r.CheckBreak()
		}
		if yyb1889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1895 := z.EncBinary()
		_ = yym1895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1896 := !z.EncBinary()
			yy2arr1896 := z.EncBasicHandle().StructToArray
			var yyq1896 [4]bool
			_, _, _ = yysep1896, yyq1896, yy2arr1896
			const yyr1896 bool = false
			yyq1896[0] = x.Kind != ""
			yyq1896[1] = x.APIVersion != ""
			yyq1896[2] = true
			var yynn1896 int
			if yyr1896 || yy2arr1896 {
				r.EncodeArrayStart(4)
			} else {
				yynn1896 = 1
				for _, b := range yyq1896 {
					if b {
						yynn1896++
					}
				}
				r.EncodeMapStart(yynn1896)
				yynn1896 = 0
			}
			if yyr1896 || yy2arr1896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1896[0] {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1896[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1896 || yy2arr1896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1896[1] {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1896[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1896 || yy2arr1896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1896[2] {
					yy1904 := &x.ListMeta
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1904) {
					} else {
						z.EncFallback(yy1904)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1896[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1906 := &x.ListMeta
					yym1907 := z.EncBinary()
					_ = yym1907
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1906) {
					} else {
						z.EncFallback(yy1906)
					}
				}
			}
			if yyr1896 || yy2arr1896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1896 || yy2arr1896 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1911 := z.DecBinary()
	_ = yym1911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1912 := r.ContainerType()
		if yyct1912 == codecSelferValueTypeMap1234 {
			yyl1912 := r.ReadMapStart()
			if yyl1912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1912, d)
			}
		} else if yyct1912 == codecSelferValueTypeArray1234 {
			yyl1912 := r.ReadArrayStart()
			if yyl1912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1913Slc
	var yyhl1913 bool = l >= 0
	for yyj1913 := 0; ; yyj1913++ {
		if yyhl1913 {
			if yyj1913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1913Slc = r.DecodeBytes(yys1913Slc, true, true)
		yys1913 := string(yys1913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1913 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1916 := &x.ListMeta
				yym1917 := z.DecBinary()
				_ = yym1917
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1916) {
				} else {
					z.DecFallback(yyv1916, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1918 := &x.Items
				yym1919 := z.DecBinary()
				_ = yym1919
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1918), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1913)
		} // end switch yys1913
	} // end for yyj1913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1920 int
	var yyb1920 bool
	var yyhl1920 bool = l >= 0
	yyj1920++
	if yyhl1920 {
		yyb1920 = yyj1920 > l
	} else {
		yyb1920 = r.CheckBreak()
	}
	if yyb1920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1920++
	if yyhl1920 {
		yyb1920 = yyj1920 > l
	} else {
		yyb1920 = r.CheckBreak()
	}
	if yyb1920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1920++
	if yyhl1920 {
		yyb1920 = yyj1920 > l
	} else {
		yyb1920 = r.CheckBreak()
	}
	if yyb1920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1923 := &x.ListMeta
		yym1924 := z.DecBinary()
		_ = yym1924
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1923) {
		} else {
			z.DecFallback(yyv1923, false)
		}
	}
	yyj1920++
	if yyhl1920 {
		yyb1920 = yyj1920 > l
	} else {
		yyb1920 = r.CheckBreak()
	}
	if yyb1920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1925 := &x.Items
		yym1926 := z.DecBinary()
		_ = yym1926
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1925), d)
		}
	}
	for {
		yyj1920++
		if yyhl1920 {
			yyb1920 = yyj1920 > l
		} else {
			yyb1920 = r.CheckBreak()
		}
		if yyb1920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1927 := z.EncBinary()
		_ = yym1927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1928 := !z.EncBinary()
			yy2arr1928 := z.EncBasicHandle().StructToArray
			var yyq1928 [4]bool
			_, _, _ = yysep1928, yyq1928, yy2arr1928
			const yyr1928 bool = false
			yyq1928[0] = x.Kind != ""
			yyq1928[1] = x.APIVersion != ""
			yyq1928[2] = true
			var yynn1928 int
			if yyr1928 || yy2arr1928 {
				r.EncodeArrayStart(4)
			} else {
				yynn1928 = 1
				for _, b := range yyq1928 {
					if b {
						yynn1928++
					}
				}
				r.EncodeMapStart(yynn1928)
				yynn1928 = 0
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[0] {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1928[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[1] {
					yym1933 := z.EncBinary()
					_ = yym1933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1928[2] {
					yy1936 := &x.ListMeta
					yym1937 := z.EncBinary()
					_ = yym1937
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1936) {
					} else {
						z.EncFallback(yy1936)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1928[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1938 := &x.ListMeta
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1938) {
					} else {
						z.EncFallback(yy1938)
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1941 := z.EncBinary()
					_ = yym1941
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1928 || yy2arr1928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1943 := z.DecBinary()
	_ = yym1943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1944 := r.ContainerType()
		if yyct1944 == codecSelferValueTypeMap1234 {
			yyl1944 := r.ReadMapStart()
			if yyl1944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1944, d)
			}
		} else if yyct1944 == codecSelferValueTypeArray1234 {
			yyl1944 := r.ReadArrayStart()
			if yyl1944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1945Slc
	var yyhl1945 bool = l >= 0
	for yyj1945 := 0; ; yyj1945++ {
		if yyhl1945 {
			if yyj1945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1945Slc = r.DecodeBytes(yys1945Slc, true, true)
		yys1945 := string(yys1945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1945 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1948 := &x.ListMeta
				yym1949 := z.DecBinary()
				_ = yym1949
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1948) {
				} else {
					z.DecFallback(yyv1948, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1950 := &x.Items
				yym1951 := z.DecBinary()
				_ = yym1951
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1950), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1945)
		} // end switch yys1945
	} // end for yyj1945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1952 int
	var yyb1952 bool
	var yyhl1952 bool = l >= 0
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1955 := &x.ListMeta
		yym1956 := z.DecBinary()
		_ = yym1956
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1955) {
		} else {
			z.DecFallback(yyv1955, false)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1957 := &x.Items
		yym1958 := z.DecBinary()
		_ = yym1958
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1957), d)
		}
	}
	for {
		yyj1952++
		if yyhl1952 {
			yyb1952 = yyj1952 > l
		} else {
			yyb1952 = r.CheckBreak()
		}
		if yyb1952 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1952-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1959 := z.EncBinary()
	_ = yym1959
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1960 := z.DecBinary()
	_ = yym1960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1961 := z.EncBinary()
	_ = yym1961
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1962 := z.DecBinary()
	_ = yym1962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1963 := z.EncBinary()
		_ = yym1963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1964 := !z.EncBinary()
			yy2arr1964 := z.EncBasicHandle().StructToArray
			var yyq1964 [1]bool
			_, _, _ = yysep1964, yyq1964, yy2arr1964
			const yyr1964 bool = false
			yyq1964[0] = true
			var yynn1964 int
			if yyr1964 || yy2arr1964 {
				r.EncodeArrayStart(1)
			} else {
				yynn1964 = 0
				for _, b := range yyq1964 {
					if b {
						yynn1964++
					}
				}
				r.EncodeMapStart(yynn1964)
				yynn1964 = 0
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1964[0] {
					yy1966 := &x.LoadBalancer
					yy1966.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1967 := &x.LoadBalancer
					yy1967.CodecEncodeSelf(e)
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1968 := z.DecBinary()
	_ = yym1968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1969 := r.ContainerType()
		if yyct1969 == codecSelferValueTypeMap1234 {
			yyl1969 := r.ReadMapStart()
			if yyl1969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1969, d)
			}
		} else if yyct1969 == codecSelferValueTypeArray1234 {
			yyl1969 := r.ReadArrayStart()
			if yyl1969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1970Slc
	var yyhl1970 bool = l >= 0
	for yyj1970 := 0; ; yyj1970++ {
		if yyhl1970 {
			if yyj1970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1970Slc = r.DecodeBytes(yys1970Slc, true, true)
		yys1970 := string(yys1970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1970 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1971 := &x.LoadBalancer
				yyv1971.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1970)
		} // end switch yys1970
	} // end for yyj1970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1972 int
	var yyb1972 bool
	var yyhl1972 bool = l >= 0
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1973 := &x.LoadBalancer
		yyv1973.CodecDecodeSelf(d)
	}
	for {
		yyj1972++
		if yyhl1972 {
			yyb1972 = yyj1972 > l
		} else {
			yyb1972 = r.CheckBreak()
		}
		if yyb1972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1974 := z.EncBinary()
		_ = yym1974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1975 := !z.EncBinary()
			yy2arr1975 := z.EncBasicHandle().StructToArray
			var yyq1975 [1]bool
			_, _, _ = yysep1975, yyq1975, yy2arr1975
			const yyr1975 bool = false
			yyq1975[0] = len(x.Ingress) != 0
			var yynn1975 int
			if yyr1975 || yy2arr1975 {
				r.EncodeArrayStart(1)
			} else {
				yynn1975 = 0
				for _, b := range yyq1975 {
					if b {
						yynn1975++
					}
				}
				r.EncodeMapStart(yynn1975)
				yynn1975 = 0
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1975[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1977 := z.EncBinary()
						_ = yym1977
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1978 := z.EncBinary()
						_ = yym1978
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1979 := z.DecBinary()
	_ = yym1979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1980 := r.ContainerType()
		if yyct1980 == codecSelferValueTypeMap1234 {
			yyl1980 := r.ReadMapStart()
			if yyl1980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1980, d)
			}
		} else if yyct1980 == codecSelferValueTypeArray1234 {
			yyl1980 := r.ReadArrayStart()
			if yyl1980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1981Slc
	var yyhl1981 bool = l >= 0
	for yyj1981 := 0; ; yyj1981++ {
		if yyhl1981 {
			if yyj1981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1981Slc = r.DecodeBytes(yys1981Slc, true, true)
		yys1981 := string(yys1981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1981 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1982 := &x.Ingress
				yym1983 := z.DecBinary()
				_ = yym1983
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1982), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1981)
		} // end switch yys1981
	} // end for yyj1981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1985 := &x.Ingress
		yym1986 := z.DecBinary()
		_ = yym1986
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1985), d)
		}
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1987 := z.EncBinary()
		_ = yym1987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1988 := !z.EncBinary()
			yy2arr1988 := z.EncBasicHandle().StructToArray
			var yyq1988 [2]bool
			_, _, _ = yysep1988, yyq1988, yy2arr1988
			const yyr1988 bool = false
			yyq1988[0] = x.IP != ""
			yyq1988[1] = x.Hostname != ""
			var yynn1988 int
			if yyr1988 || yy2arr1988 {
				r.EncodeArrayStart(2)
			} else {
				yynn1988 = 0
				for _, b := range yyq1988 {
					if b {
						yynn1988++
					}
				}
				r.EncodeMapStart(yynn1988)
				yynn1988 = 0
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[0] {
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[1] {
					yym1993 := z.EncBinary()
					_ = yym1993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1995 := z.DecBinary()
	_ = yym1995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1996 := r.ContainerType()
		if yyct1996 == codecSelferValueTypeMap1234 {
			yyl1996 := r.ReadMapStart()
			if yyl1996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1996, d)
			}
		} else if yyct1996 == codecSelferValueTypeArray1234 {
			yyl1996 := r.ReadArrayStart()
			if yyl1996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1997Slc
	var yyhl1997 bool = l >= 0
	for yyj1997 := 0; ; yyj1997++ {
		if yyhl1997 {
			if yyj1997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1997Slc = r.DecodeBytes(yys1997Slc, true, true)
		yys1997 := string(yys1997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1997 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1997)
		} // end switch yys1997
	} // end for yyj1997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2000 int
	var yyb2000 bool
	var yyhl2000 bool = l >= 0
	yyj2000++
	if yyhl2000 {
		yyb2000 = yyj2000 > l
	} else {
		yyb2000 = r.CheckBreak()
	}
	if yyb2000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2000++
	if yyhl2000 {
		yyb2000 = yyj2000 > l
	} else {
		yyb2000 = r.CheckBreak()
	}
	if yyb2000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2000++
		if yyhl2000 {
			yyb2000 = yyj2000 > l
		} else {
			yyb2000 = r.CheckBreak()
		}
		if yyb2000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2003 := z.EncBinary()
		_ = yym2003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2004 := !z.EncBinary()
			yy2arr2004 := z.EncBasicHandle().StructToArray
			var yyq2004 [7]bool
			_, _, _ = yysep2004, yyq2004, yy2arr2004
			const yyr2004 bool = false
			yyq2004[0] = x.Type != ""
			yyq2004[3] = x.ClusterIP != ""
			yyq2004[4] = len(x.ExternalIPs) != 0
			yyq2004[5] = x.LoadBalancerIP != ""
			yyq2004[6] = x.SessionAffinity != ""
			var yynn2004 int
			if yyr2004 || yy2arr2004 {
				r.EncodeArrayStart(7)
			} else {
				yynn2004 = 2
				for _, b := range yyq2004 {
					if b {
						yynn2004++
					}
				}
				r.EncodeMapStart(yynn2004)
				yynn2004 = 0
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2007 := z.EncBinary()
					_ = yym2007
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[3] {
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2016 := z.EncBinary()
						_ = yym2016
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2004[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2017 := z.EncBinary()
						_ = yym2017
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[5] {
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2022 := z.DecBinary()
	_ = yym2022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2023 := r.ContainerType()
		if yyct2023 == codecSelferValueTypeMap1234 {
			yyl2023 := r.ReadMapStart()
			if yyl2023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2023, d)
			}
		} else if yyct2023 == codecSelferValueTypeArray1234 {
			yyl2023 := r.ReadArrayStart()
			if yyl2023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2024Slc
	var yyhl2024 bool = l >= 0
	for yyj2024 := 0; ; yyj2024++ {
		if yyhl2024 {
			if yyj2024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2024Slc = r.DecodeBytes(yys2024Slc, true, true)
		yys2024 := string(yys2024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2024 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2026 := &x.Ports
				yym2027 := z.DecBinary()
				_ = yym2027
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2026), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2028 := &x.Selector
				yym2029 := z.DecBinary()
				_ = yym2029
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2028, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2031 := &x.ExternalIPs
				yym2032 := z.DecBinary()
				_ = yym2032
				if false {
				} else {
					z.F.DecSliceStringX(yyv2031, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2024)
		} // end switch yys2024
	} // end for yyj2024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2035 int
	var yyb2035 bool
	var yyhl2035 bool = l >= 0
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2037 := &x.Ports
		yym2038 := z.DecBinary()
		_ = yym2038
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2037), d)
		}
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2039 := &x.Selector
		yym2040 := z.DecBinary()
		_ = yym2040
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2039, false, d)
		}
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2042 := &x.ExternalIPs
		yym2043 := z.DecBinary()
		_ = yym2043
		if false {
		} else {
			z.F.DecSliceStringX(yyv2042, false, d)
		}
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj2035++
		if yyhl2035 {
			yyb2035 = yyj2035 > l
		} else {
			yyb2035 = r.CheckBreak()
		}
		if yyb2035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2046 := z.EncBinary()
		_ = yym2046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2047 := !z.EncBinary()
			yy2arr2047 := z.EncBasicHandle().StructToArray
			var yyq2047 [5]bool
			_, _, _ = yysep2047, yyq2047, yy2arr2047
			const yyr2047 bool = false
			var yynn2047 int
			if yyr2047 || yy2arr2047 {
				r.EncodeArrayStart(5)
			} else {
				yynn2047 = 5
				for _, b := range yyq2047 {
					if b {
						yynn2047++
					}
				}
				r.EncodeMapStart(yynn2047)
				yynn2047 = 0
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2049 := z.EncBinary()
				_ = yym2049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2050 := z.EncBinary()
				_ = yym2050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2053 := z.EncBinary()
				_ = yym2053
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2054 := z.EncBinary()
				_ = yym2054
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2056 := &x.TargetPort
				yym2057 := z.EncBinary()
				_ = yym2057
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2056) {
				} else if !yym2057 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2056)
				} else {
					z.EncFallback(yy2056)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2058 := &x.TargetPort
				yym2059 := z.EncBinary()
				_ = yym2059
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2058) {
				} else if !yym2059 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2058)
				} else {
					z.EncFallback(yy2058)
				}
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2061 := z.EncBinary()
				_ = yym2061
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2062 := z.EncBinary()
				_ = yym2062
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2063 := z.DecBinary()
	_ = yym2063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2064 := r.ContainerType()
		if yyct2064 == codecSelferValueTypeMap1234 {
			yyl2064 := r.ReadMapStart()
			if yyl2064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2064, d)
			}
		} else if yyct2064 == codecSelferValueTypeArray1234 {
			yyl2064 := r.ReadArrayStart()
			if yyl2064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2065Slc
	var yyhl2065 bool = l >= 0
	for yyj2065 := 0; ; yyj2065++ {
		if yyhl2065 {
			if yyj2065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2065Slc = r.DecodeBytes(yys2065Slc, true, true)
		yys2065 := string(yys2065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2065 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2069 := &x.TargetPort
				yym2070 := z.DecBinary()
				_ = yym2070
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2069) {
				} else if !yym2070 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2069)
				} else {
					z.DecFallback(yyv2069, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2065)
		} // end switch yys2065
	} // end for yyj2065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2072 int
	var yyb2072 bool
	var yyhl2072 bool = l >= 0
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2076 := &x.TargetPort
		yym2077 := z.DecBinary()
		_ = yym2077
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2076) {
		} else if !yym2077 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2076)
		} else {
			z.DecFallback(yyv2076, false)
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2072++
		if yyhl2072 {
			yyb2072 = yyj2072 > l
		} else {
			yyb2072 = r.CheckBreak()
		}
		if yyb2072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2079 := z.EncBinary()
		_ = yym2079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2080 := !z.EncBinary()
			yy2arr2080 := z.EncBasicHandle().StructToArray
			var yyq2080 [5]bool
			_, _, _ = yysep2080, yyq2080, yy2arr2080
			const yyr2080 bool = false
			yyq2080[0] = x.Kind != ""
			yyq2080[1] = x.APIVersion != ""
			yyq2080[2] = true
			yyq2080[3] = true
			yyq2080[4] = true
			var yynn2080 int
			if yyr2080 || yy2arr2080 {
				r.EncodeArrayStart(5)
			} else {
				yynn2080 = 0
				for _, b := range yyq2080 {
					if b {
						yynn2080++
					}
				}
				r.EncodeMapStart(yynn2080)
				yynn2080 = 0
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[0] {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2080[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[1] {
					yym2085 := z.EncBinary()
					_ = yym2085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2080[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[2] {
					yy2088 := &x.ObjectMeta
					yy2088.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2089 := &x.ObjectMeta
					yy2089.CodecEncodeSelf(e)
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[3] {
					yy2091 := &x.Spec
					yy2091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2092 := &x.Spec
					yy2092.CodecEncodeSelf(e)
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2080[4] {
					yy2094 := &x.Status
					yy2094.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2080[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2095 := &x.Status
					yy2095.CodecEncodeSelf(e)
				}
			}
			if yyr2080 || yy2arr2080 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2096 := z.DecBinary()
	_ = yym2096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2097 := r.ContainerType()
		if yyct2097 == codecSelferValueTypeMap1234 {
			yyl2097 := r.ReadMapStart()
			if yyl2097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2097, d)
			}
		} else if yyct2097 == codecSelferValueTypeArray1234 {
			yyl2097 := r.ReadArrayStart()
			if yyl2097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2098Slc
	var yyhl2098 bool = l >= 0
	for yyj2098 := 0; ; yyj2098++ {
		if yyhl2098 {
			if yyj2098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2098Slc = r.DecodeBytes(yys2098Slc, true, true)
		yys2098 := string(yys2098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2098 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2101 := &x.ObjectMeta
				yyv2101.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2102 := &x.Spec
				yyv2102.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2103 := &x.Status
				yyv2103.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2098)
		} // end switch yys2098
	} // end for yyj2098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2104 int
	var yyb2104 bool
	var yyhl2104 bool = l >= 0
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2107 := &x.ObjectMeta
		yyv2107.CodecDecodeSelf(d)
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2108 := &x.Spec
		yyv2108.CodecDecodeSelf(d)
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2109 := &x.Status
		yyv2109.CodecDecodeSelf(d)
	}
	for {
		yyj2104++
		if yyhl2104 {
			yyb2104 = yyj2104 > l
		} else {
			yyb2104 = r.CheckBreak()
		}
		if yyb2104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2110 := z.EncBinary()
		_ = yym2110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2111 := !z.EncBinary()
			yy2arr2111 := z.EncBasicHandle().StructToArray
			var yyq2111 [5]bool
			_, _, _ = yysep2111, yyq2111, yy2arr2111
			const yyr2111 bool = false
			yyq2111[0] = x.Kind != ""
			yyq2111[1] = x.APIVersion != ""
			yyq2111[2] = true
			yyq2111[4] = len(x.ImagePullSecrets) != 0
			var yynn2111 int
			if yyr2111 || yy2arr2111 {
				r.EncodeArrayStart(5)
			} else {
				yynn2111 = 1
				for _, b := range yyq2111 {
					if b {
						yynn2111++
					}
				}
				r.EncodeMapStart(yynn2111)
				yynn2111 = 0
			}
			if yyr2111 || yy2arr2111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2111[0] {
					yym2113 := z.EncBinary()
					_ = yym2113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2111[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2111 || yy2arr2111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2111[1] {
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2111[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2117 := z.EncBinary()
					_ = yym2117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2111 || yy2arr2111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2111[2] {
					yy2119 := &x.ObjectMeta
					yy2119.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2111[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2120 := &x.ObjectMeta
					yy2120.CodecEncodeSelf(e)
				}
			}
			if yyr2111 || yy2arr2111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2111 || yy2arr2111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2111[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2125 := z.EncBinary()
						_ = yym2125
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2111[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2126 := z.EncBinary()
						_ = yym2126
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2111 || yy2arr2111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2127 := z.DecBinary()
	_ = yym2127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2128 := r.ContainerType()
		if yyct2128 == codecSelferValueTypeMap1234 {
			yyl2128 := r.ReadMapStart()
			if yyl2128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2128, d)
			}
		} else if yyct2128 == codecSelferValueTypeArray1234 {
			yyl2128 := r.ReadArrayStart()
			if yyl2128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2129Slc
	var yyhl2129 bool = l >= 0
	for yyj2129 := 0; ; yyj2129++ {
		if yyhl2129 {
			if yyj2129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2129Slc = r.DecodeBytes(yys2129Slc, true, true)
		yys2129 := string(yys2129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2129 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2132 := &x.ObjectMeta
				yyv2132.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2133 := &x.Secrets
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2133), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2135 := &x.ImagePullSecrets
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2129)
		} // end switch yys2129
	} // end for yyj2129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2140 := &x.ObjectMeta
		yyv2140.CodecDecodeSelf(d)
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2141 := &x.Secrets
		yym2142 := z.DecBinary()
		_ = yym2142
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2141), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2143 := &x.ImagePullSecrets
		yym2144 := z.DecBinary()
		_ = yym2144
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2143), d)
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2145 := z.EncBinary()
		_ = yym2145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2146 := !z.EncBinary()
			yy2arr2146 := z.EncBasicHandle().StructToArray
			var yyq2146 [4]bool
			_, _, _ = yysep2146, yyq2146, yy2arr2146
			const yyr2146 bool = false
			yyq2146[0] = x.Kind != ""
			yyq2146[1] = x.APIVersion != ""
			yyq2146[2] = true
			var yynn2146 int
			if yyr2146 || yy2arr2146 {
				r.EncodeArrayStart(4)
			} else {
				yynn2146 = 1
				for _, b := range yyq2146 {
					if b {
						yynn2146++
					}
				}
				r.EncodeMapStart(yynn2146)
				yynn2146 = 0
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[0] {
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[1] {
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2146[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2152 := z.EncBinary()
					_ = yym2152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[2] {
					yy2154 := &x.ListMeta
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2154) {
					} else {
						z.EncFallback(yy2154)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2146[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2156 := &x.ListMeta
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2156) {
					} else {
						z.EncFallback(yy2156)
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2159 := z.EncBinary()
					_ = yym2159
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2161 := z.DecBinary()
	_ = yym2161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2162 := r.ContainerType()
		if yyct2162 == codecSelferValueTypeMap1234 {
			yyl2162 := r.ReadMapStart()
			if yyl2162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2162, d)
			}
		} else if yyct2162 == codecSelferValueTypeArray1234 {
			yyl2162 := r.ReadArrayStart()
			if yyl2162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2163Slc
	var yyhl2163 bool = l >= 0
	for yyj2163 := 0; ; yyj2163++ {
		if yyhl2163 {
			if yyj2163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2163Slc = r.DecodeBytes(yys2163Slc, true, true)
		yys2163 := string(yys2163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2163 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2166 := &x.ListMeta
				yym2167 := z.DecBinary()
				_ = yym2167
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2166) {
				} else {
					z.DecFallback(yyv2166, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2168 := &x.Items
				yym2169 := z.DecBinary()
				_ = yym2169
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2168), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2163)
		} // end switch yys2163
	} // end for yyj2163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2170 int
	var yyb2170 bool
	var yyhl2170 bool = l >= 0
	yyj2170++
	if yyhl2170 {
		yyb2170 = yyj2170 > l
	} else {
		yyb2170 = r.CheckBreak()
	}
	if yyb2170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2170++
	if yyhl2170 {
		yyb2170 = yyj2170 > l
	} else {
		yyb2170 = r.CheckBreak()
	}
	if yyb2170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2170++
	if yyhl2170 {
		yyb2170 = yyj2170 > l
	} else {
		yyb2170 = r.CheckBreak()
	}
	if yyb2170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2173 := &x.ListMeta
		yym2174 := z.DecBinary()
		_ = yym2174
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2173) {
		} else {
			z.DecFallback(yyv2173, false)
		}
	}
	yyj2170++
	if yyhl2170 {
		yyb2170 = yyj2170 > l
	} else {
		yyb2170 = r.CheckBreak()
	}
	if yyb2170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2175 := &x.Items
		yym2176 := z.DecBinary()
		_ = yym2176
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2175), d)
		}
	}
	for {
		yyj2170++
		if yyhl2170 {
			yyb2170 = yyj2170 > l
		} else {
			yyb2170 = r.CheckBreak()
		}
		if yyb2170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2177 := z.EncBinary()
		_ = yym2177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2178 := !z.EncBinary()
			yy2arr2178 := z.EncBasicHandle().StructToArray
			var yyq2178 [4]bool
			_, _, _ = yysep2178, yyq2178, yy2arr2178
			const yyr2178 bool = false
			yyq2178[0] = x.Kind != ""
			yyq2178[1] = x.APIVersion != ""
			yyq2178[2] = true
			var yynn2178 int
			if yyr2178 || yy2arr2178 {
				r.EncodeArrayStart(4)
			} else {
				yynn2178 = 1
				for _, b := range yyq2178 {
					if b {
						yynn2178++
					}
				}
				r.EncodeMapStart(yynn2178)
				yynn2178 = 0
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[0] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[1] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[2] {
					yy2186 := &x.ObjectMeta
					yy2186.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2187 := &x.ObjectMeta
					yy2187.CodecEncodeSelf(e)
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2191 := z.DecBinary()
	_ = yym2191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2192 := r.ContainerType()
		if yyct2192 == codecSelferValueTypeMap1234 {
			yyl2192 := r.ReadMapStart()
			if yyl2192 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2192, d)
			}
		} else if yyct2192 == codecSelferValueTypeArray1234 {
			yyl2192 := r.ReadArrayStart()
			if yyl2192 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2193Slc
	var yyhl2193 bool = l >= 0
	for yyj2193 := 0; ; yyj2193++ {
		if yyhl2193 {
			if yyj2193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2193Slc = r.DecodeBytes(yys2193Slc, true, true)
		yys2193 := string(yys2193Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2193 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2196 := &x.ObjectMeta
				yyv2196.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2197 := &x.Subsets
				yym2198 := z.DecBinary()
				_ = yym2198
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2197), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2193)
		} // end switch yys2193
	} // end for yyj2193
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2199 int
	var yyb2199 bool
	var yyhl2199 bool = l >= 0
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2202 := &x.ObjectMeta
		yyv2202.CodecDecodeSelf(d)
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2203 := &x.Subsets
		yym2204 := z.DecBinary()
		_ = yym2204
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2203), d)
		}
	}
	for {
		yyj2199++
		if yyhl2199 {
			yyb2199 = yyj2199 > l
		} else {
			yyb2199 = r.CheckBreak()
		}
		if yyb2199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2205 := z.EncBinary()
		_ = yym2205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2206 := !z.EncBinary()
			yy2arr2206 := z.EncBasicHandle().StructToArray
			var yyq2206 [3]bool
			_, _, _ = yysep2206, yyq2206, yy2arr2206
			const yyr2206 bool = false
			var yynn2206 int
			if yyr2206 || yy2arr2206 {
				r.EncodeArrayStart(3)
			} else {
				yynn2206 = 3
				for _, b := range yyq2206 {
					if b {
						yynn2206++
					}
				}
				r.EncodeMapStart(yynn2206)
				yynn2206 = 0
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2206 || yy2arr2206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2216 := z.DecBinary()
	_ = yym2216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2217 := r.ContainerType()
		if yyct2217 == codecSelferValueTypeMap1234 {
			yyl2217 := r.ReadMapStart()
			if yyl2217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2217, d)
			}
		} else if yyct2217 == codecSelferValueTypeArray1234 {
			yyl2217 := r.ReadArrayStart()
			if yyl2217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2218Slc
	var yyhl2218 bool = l >= 0
	for yyj2218 := 0; ; yyj2218++ {
		if yyhl2218 {
			if yyj2218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2218Slc = r.DecodeBytes(yys2218Slc, true, true)
		yys2218 := string(yys2218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2218 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2219 := &x.Addresses
				yym2220 := z.DecBinary()
				_ = yym2220
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2219), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2221 := &x.NotReadyAddresses
				yym2222 := z.DecBinary()
				_ = yym2222
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2221), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2223 := &x.Ports
				yym2224 := z.DecBinary()
				_ = yym2224
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2223), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2218)
		} // end switch yys2218
	} // end for yyj2218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2225 int
	var yyb2225 bool
	var yyhl2225 bool = l >= 0
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2226 := &x.Addresses
		yym2227 := z.DecBinary()
		_ = yym2227
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2226), d)
		}
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2228 := &x.NotReadyAddresses
		yym2229 := z.DecBinary()
		_ = yym2229
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2228), d)
		}
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2230 := &x.Ports
		yym2231 := z.DecBinary()
		_ = yym2231
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2230), d)
		}
	}
	for {
		yyj2225++
		if yyhl2225 {
			yyb2225 = yyj2225 > l
		} else {
			yyb2225 = r.CheckBreak()
		}
		if yyb2225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2232 := z.EncBinary()
		_ = yym2232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2233 := !z.EncBinary()
			yy2arr2233 := z.EncBasicHandle().StructToArray
			var yyq2233 [2]bool
			_, _, _ = yysep2233, yyq2233, yy2arr2233
			const yyr2233 bool = false
			var yynn2233 int
			if yyr2233 || yy2arr2233 {
				r.EncodeArrayStart(2)
			} else {
				yynn2233 = 2
				for _, b := range yyq2233 {
					if b {
						yynn2233++
					}
				}
				r.EncodeMapStart(yynn2233)
				yynn2233 = 0
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2235 := z.EncBinary()
				_ = yym2235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2236 := z.EncBinary()
				_ = yym2236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2238 := z.DecBinary()
	_ = yym2238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2239 := r.ContainerType()
		if yyct2239 == codecSelferValueTypeMap1234 {
			yyl2239 := r.ReadMapStart()
			if yyl2239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2239, d)
			}
		} else if yyct2239 == codecSelferValueTypeArray1234 {
			yyl2239 := r.ReadArrayStart()
			if yyl2239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2240Slc
	var yyhl2240 bool = l >= 0
	for yyj2240 := 0; ; yyj2240++ {
		if yyhl2240 {
			if yyj2240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2240Slc = r.DecodeBytes(yys2240Slc, true, true)
		yys2240 := string(yys2240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2240 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2240)
		} // end switch yys2240
	} // end for yyj2240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2243 int
	var yyb2243 bool
	var yyhl2243 bool = l >= 0
	yyj2243++
	if yyhl2243 {
		yyb2243 = yyj2243 > l
	} else {
		yyb2243 = r.CheckBreak()
	}
	if yyb2243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2243++
	if yyhl2243 {
		yyb2243 = yyj2243 > l
	} else {
		yyb2243 = r.CheckBreak()
	}
	if yyb2243 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2243++
		if yyhl2243 {
			yyb2243 = yyj2243 > l
		} else {
			yyb2243 = r.CheckBreak()
		}
		if yyb2243 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2243-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [3]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			var yynn2247 int
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(3)
			} else {
				yynn2247 = 3
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
				yynn2247 = 0
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2249 := z.EncBinary()
				_ = yym2249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2250 := z.EncBinary()
				_ = yym2250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2252 := z.EncBinary()
				_ = yym2252
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2253 := z.EncBinary()
				_ = yym2253
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2255 := z.DecBinary()
	_ = yym2255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2256 := r.ContainerType()
		if yyct2256 == codecSelferValueTypeMap1234 {
			yyl2256 := r.ReadMapStart()
			if yyl2256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2256, d)
			}
		} else if yyct2256 == codecSelferValueTypeArray1234 {
			yyl2256 := r.ReadArrayStart()
			if yyl2256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2257Slc
	var yyhl2257 bool = l >= 0
	for yyj2257 := 0; ; yyj2257++ {
		if yyhl2257 {
			if yyj2257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2257Slc = r.DecodeBytes(yys2257Slc, true, true)
		yys2257 := string(yys2257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2257 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2257)
		} // end switch yys2257
	} // end for yyj2257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2261 int
	var yyb2261 bool
	var yyhl2261 bool = l >= 0
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2261++
		if yyhl2261 {
			yyb2261 = yyj2261 > l
		} else {
			yyb2261 = r.CheckBreak()
		}
		if yyb2261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2265 := z.EncBinary()
		_ = yym2265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2266 := !z.EncBinary()
			yy2arr2266 := z.EncBasicHandle().StructToArray
			var yyq2266 [4]bool
			_, _, _ = yysep2266, yyq2266, yy2arr2266
			const yyr2266 bool = false
			yyq2266[0] = x.Kind != ""
			yyq2266[1] = x.APIVersion != ""
			yyq2266[2] = true
			var yynn2266 int
			if yyr2266 || yy2arr2266 {
				r.EncodeArrayStart(4)
			} else {
				yynn2266 = 1
				for _, b := range yyq2266 {
					if b {
						yynn2266++
					}
				}
				r.EncodeMapStart(yynn2266)
				yynn2266 = 0
			}
			if yyr2266 || yy2arr2266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2266[0] {
					yym2268 := z.EncBinary()
					_ = yym2268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2269 := z.EncBinary()
					_ = yym2269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2266[1] {
					yym2271 := z.EncBinary()
					_ = yym2271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2266[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2272 := z.EncBinary()
					_ = yym2272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2266[2] {
					yy2274 := &x.ListMeta
					yym2275 := z.EncBinary()
					_ = yym2275
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2274) {
					} else {
						z.EncFallback(yy2274)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2266[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2276 := &x.ListMeta
					yym2277 := z.EncBinary()
					_ = yym2277
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2276) {
					} else {
						z.EncFallback(yy2276)
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2266 || yy2arr2266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2281 := z.DecBinary()
	_ = yym2281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2282 := r.ContainerType()
		if yyct2282 == codecSelferValueTypeMap1234 {
			yyl2282 := r.ReadMapStart()
			if yyl2282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2282, d)
			}
		} else if yyct2282 == codecSelferValueTypeArray1234 {
			yyl2282 := r.ReadArrayStart()
			if yyl2282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2283Slc
	var yyhl2283 bool = l >= 0
	for yyj2283 := 0; ; yyj2283++ {
		if yyhl2283 {
			if yyj2283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2283Slc = r.DecodeBytes(yys2283Slc, true, true)
		yys2283 := string(yys2283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2283 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2286 := &x.ListMeta
				yym2287 := z.DecBinary()
				_ = yym2287
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2286) {
				} else {
					z.DecFallback(yyv2286, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2288 := &x.Items
				yym2289 := z.DecBinary()
				_ = yym2289
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2288), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2283)
		} // end switch yys2283
	} // end for yyj2283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2290 int
	var yyb2290 bool
	var yyhl2290 bool = l >= 0
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2293 := &x.ListMeta
		yym2294 := z.DecBinary()
		_ = yym2294
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2293) {
		} else {
			z.DecFallback(yyv2293, false)
		}
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2295 := &x.Items
		yym2296 := z.DecBinary()
		_ = yym2296
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2295), d)
		}
	}
	for {
		yyj2290++
		if yyhl2290 {
			yyb2290 = yyj2290 > l
		} else {
			yyb2290 = r.CheckBreak()
		}
		if yyb2290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2297 := z.EncBinary()
		_ = yym2297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2298 := !z.EncBinary()
			yy2arr2298 := z.EncBasicHandle().StructToArray
			var yyq2298 [4]bool
			_, _, _ = yysep2298, yyq2298, yy2arr2298
			const yyr2298 bool = false
			yyq2298[0] = x.PodCIDR != ""
			yyq2298[1] = x.ExternalID != ""
			yyq2298[2] = x.ProviderID != ""
			yyq2298[3] = x.Unschedulable != false
			var yynn2298 int
			if yyr2298 || yy2arr2298 {
				r.EncodeArrayStart(4)
			} else {
				yynn2298 = 0
				for _, b := range yyq2298 {
					if b {
						yynn2298++
					}
				}
				r.EncodeMapStart(yynn2298)
				yynn2298 = 0
			}
			if yyr2298 || yy2arr2298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2298[0] {
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2298[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2298[1] {
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2298[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2298[2] {
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2298[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2298[3] {
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2298[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2311 := z.DecBinary()
	_ = yym2311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2312 := r.ContainerType()
		if yyct2312 == codecSelferValueTypeMap1234 {
			yyl2312 := r.ReadMapStart()
			if yyl2312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2312, d)
			}
		} else if yyct2312 == codecSelferValueTypeArray1234 {
			yyl2312 := r.ReadArrayStart()
			if yyl2312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2313Slc
	var yyhl2313 bool = l >= 0
	for yyj2313 := 0; ; yyj2313++ {
		if yyhl2313 {
			if yyj2313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2313Slc = r.DecodeBytes(yys2313Slc, true, true)
		yys2313 := string(yys2313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2313 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2313)
		} // end switch yys2313
	} // end for yyj2313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2318 int
	var yyb2318 bool
	var yyhl2318 bool = l >= 0
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2318++
	if yyhl2318 {
		yyb2318 = yyj2318 > l
	} else {
		yyb2318 = r.CheckBreak()
	}
	if yyb2318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2318++
		if yyhl2318 {
			yyb2318 = yyj2318 > l
		} else {
			yyb2318 = r.CheckBreak()
		}
		if yyb2318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2323 := z.EncBinary()
		_ = yym2323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2324 := !z.EncBinary()
			yy2arr2324 := z.EncBasicHandle().StructToArray
			var yyq2324 [1]bool
			_, _, _ = yysep2324, yyq2324, yy2arr2324
			const yyr2324 bool = false
			var yynn2324 int
			if yyr2324 || yy2arr2324 {
				r.EncodeArrayStart(1)
			} else {
				yynn2324 = 1
				for _, b := range yyq2324 {
					if b {
						yynn2324++
					}
				}
				r.EncodeMapStart(yynn2324)
				yynn2324 = 0
			}
			if yyr2324 || yy2arr2324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2326 := z.EncBinary()
				_ = yym2326
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2327 := z.EncBinary()
				_ = yym2327
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2324 || yy2arr2324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2328 := z.DecBinary()
	_ = yym2328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2329 := r.ContainerType()
		if yyct2329 == codecSelferValueTypeMap1234 {
			yyl2329 := r.ReadMapStart()
			if yyl2329 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2329, d)
			}
		} else if yyct2329 == codecSelferValueTypeArray1234 {
			yyl2329 := r.ReadArrayStart()
			if yyl2329 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2329, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2330Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2330Slc
	var yyhl2330 bool = l >= 0
	for yyj2330 := 0; ; yyj2330++ {
		if yyhl2330 {
			if yyj2330 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2330Slc = r.DecodeBytes(yys2330Slc, true, true)
		yys2330 := string(yys2330Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2330 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2330)
		} // end switch yys2330
	} // end for yyj2330
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2332 int
	var yyb2332 bool
	var yyhl2332 bool = l >= 0
	yyj2332++
	if yyhl2332 {
		yyb2332 = yyj2332 > l
	} else {
		yyb2332 = r.CheckBreak()
	}
	if yyb2332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2332++
		if yyhl2332 {
			yyb2332 = yyj2332 > l
		} else {
			yyb2332 = r.CheckBreak()
		}
		if yyb2332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2334 := z.EncBinary()
		_ = yym2334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2335 := !z.EncBinary()
			yy2arr2335 := z.EncBasicHandle().StructToArray
			var yyq2335 [1]bool
			_, _, _ = yysep2335, yyq2335, yy2arr2335
			const yyr2335 bool = false
			yyq2335[0] = true
			var yynn2335 int
			if yyr2335 || yy2arr2335 {
				r.EncodeArrayStart(1)
			} else {
				yynn2335 = 0
				for _, b := range yyq2335 {
					if b {
						yynn2335++
					}
				}
				r.EncodeMapStart(yynn2335)
				yynn2335 = 0
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2335[0] {
					yy2337 := &x.KubeletEndpoint
					yy2337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2335[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2338 := &x.KubeletEndpoint
					yy2338.CodecEncodeSelf(e)
				}
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2339 := z.DecBinary()
	_ = yym2339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2340 := r.ContainerType()
		if yyct2340 == codecSelferValueTypeMap1234 {
			yyl2340 := r.ReadMapStart()
			if yyl2340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2340, d)
			}
		} else if yyct2340 == codecSelferValueTypeArray1234 {
			yyl2340 := r.ReadArrayStart()
			if yyl2340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2341Slc
	var yyhl2341 bool = l >= 0
	for yyj2341 := 0; ; yyj2341++ {
		if yyhl2341 {
			if yyj2341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2341Slc = r.DecodeBytes(yys2341Slc, true, true)
		yys2341 := string(yys2341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2341 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2342 := &x.KubeletEndpoint
				yyv2342.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2341)
		} // end switch yys2341
	} // end for yyj2341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2343 int
	var yyb2343 bool
	var yyhl2343 bool = l >= 0
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2344 := &x.KubeletEndpoint
		yyv2344.CodecDecodeSelf(d)
	}
	for {
		yyj2343++
		if yyhl2343 {
			yyb2343 = yyj2343 > l
		} else {
			yyb2343 = r.CheckBreak()
		}
		if yyb2343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2345 := z.EncBinary()
		_ = yym2345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2346 := !z.EncBinary()
			yy2arr2346 := z.EncBasicHandle().StructToArray
			var yyq2346 [8]bool
			_, _, _ = yysep2346, yyq2346, yy2arr2346
			const yyr2346 bool = false
			var yynn2346 int
			if yyr2346 || yy2arr2346 {
				r.EncodeArrayStart(8)
			} else {
				yynn2346 = 8
				for _, b := range yyq2346 {
					if b {
						yynn2346++
					}
				}
				r.EncodeMapStart(yynn2346)
				yynn2346 = 0
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2348 := z.EncBinary()
				_ = yym2348
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2349 := z.EncBinary()
				_ = yym2349
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2351 := z.EncBinary()
				_ = yym2351
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2352 := z.EncBinary()
				_ = yym2352
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2354 := z.EncBinary()
				_ = yym2354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2355 := z.EncBinary()
				_ = yym2355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2357 := z.EncBinary()
				_ = yym2357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2358 := z.EncBinary()
				_ = yym2358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2360 := z.EncBinary()
				_ = yym2360
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2361 := z.EncBinary()
				_ = yym2361
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2363 := z.EncBinary()
				_ = yym2363
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2364 := z.EncBinary()
				_ = yym2364
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2366 := z.EncBinary()
				_ = yym2366
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2367 := z.EncBinary()
				_ = yym2367
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2369 := z.EncBinary()
				_ = yym2369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2370 := z.EncBinary()
				_ = yym2370
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2346 || yy2arr2346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2382 int
	var yyb2382 bool
	var yyhl2382 bool = l >= 0
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2382++
		if yyhl2382 {
			yyb2382 = yyj2382 > l
		} else {
			yyb2382 = r.CheckBreak()
		}
		if yyb2382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2391 := z.EncBinary()
		_ = yym2391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2392 := !z.EncBinary()
			yy2arr2392 := z.EncBasicHandle().StructToArray
			var yyq2392 [8]bool
			_, _, _ = yysep2392, yyq2392, yy2arr2392
			const yyr2392 bool = false
			yyq2392[0] = len(x.Capacity) != 0
			yyq2392[1] = len(x.Allocatable) != 0
			yyq2392[2] = x.Phase != ""
			yyq2392[3] = len(x.Conditions) != 0
			yyq2392[4] = len(x.Addresses) != 0
			yyq2392[5] = true
			yyq2392[6] = true
			var yynn2392 int
			if yyr2392 || yy2arr2392 {
				r.EncodeArrayStart(8)
			} else {
				yynn2392 = 1
				for _, b := range yyq2392 {
					if b {
						yynn2392++
					}
				}
				r.EncodeMapStart(yynn2392)
				yynn2392 = 0
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2397 := z.EncBinary()
						_ = yym2397
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2392[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2398 := z.EncBinary()
						_ = yym2398
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2400 := z.EncBinary()
						_ = yym2400
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2392[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2401 := z.EncBinary()
						_ = yym2401
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[5] {
					yy2403 := &x.DaemonEndpoints
					yy2403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2392[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2404 := &x.DaemonEndpoints
					yy2404.CodecEncodeSelf(e)
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2392[6] {
					yy2406 := &x.NodeInfo
					yy2406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2392[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2407 := &x.NodeInfo
					yy2407.CodecEncodeSelf(e)
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2409 := z.EncBinary()
					_ = yym2409
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2392 || yy2arr2392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2411 := z.DecBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2412 := r.ContainerType()
		if yyct2412 == codecSelferValueTypeMap1234 {
			yyl2412 := r.ReadMapStart()
			if yyl2412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2412, d)
			}
		} else if yyct2412 == codecSelferValueTypeArray1234 {
			yyl2412 := r.ReadArrayStart()
			if yyl2412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2413Slc
	var yyhl2413 bool = l >= 0
	for yyj2413 := 0; ; yyj2413++ {
		if yyhl2413 {
			if yyj2413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2413Slc = r.DecodeBytes(yys2413Slc, true, true)
		yys2413 := string(yys2413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2413 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2414 := &x.Capacity
				yyv2414.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2415 := &x.Allocatable
				yyv2415.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2417 := &x.Conditions
				yym2418 := z.DecBinary()
				_ = yym2418
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2417), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2419 := &x.Addresses
				yym2420 := z.DecBinary()
				_ = yym2420
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2419), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2421 := &x.DaemonEndpoints
				yyv2421.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2422 := &x.NodeInfo
				yyv2422.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2423 := &x.Images
				yym2424 := z.DecBinary()
				_ = yym2424
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2423), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2413)
		} // end switch yys2413
	} // end for yyj2413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2425 int
	var yyb2425 bool
	var yyhl2425 bool = l >= 0
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2426 := &x.Capacity
		yyv2426.CodecDecodeSelf(d)
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2427 := &x.Allocatable
		yyv2427.CodecDecodeSelf(d)
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2429 := &x.Conditions
		yym2430 := z.DecBinary()
		_ = yym2430
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2429), d)
		}
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2431 := &x.Addresses
		yym2432 := z.DecBinary()
		_ = yym2432
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2431), d)
		}
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2433 := &x.DaemonEndpoints
		yyv2433.CodecDecodeSelf(d)
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2434 := &x.NodeInfo
		yyv2434.CodecDecodeSelf(d)
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2435 := &x.Images
		yym2436 := z.DecBinary()
		_ = yym2436
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2435), d)
		}
	}
	for {
		yyj2425++
		if yyhl2425 {
			yyb2425 = yyj2425 > l
		} else {
			yyb2425 = r.CheckBreak()
		}
		if yyb2425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2437 := z.EncBinary()
		_ = yym2437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2438 := !z.EncBinary()
			yy2arr2438 := z.EncBasicHandle().StructToArray
			var yyq2438 [2]bool
			_, _, _ = yysep2438, yyq2438, yy2arr2438
			const yyr2438 bool = false
			yyq2438[1] = x.Size != 0
			var yynn2438 int
			if yyr2438 || yy2arr2438 {
				r.EncodeArrayStart(2)
			} else {
				yynn2438 = 1
				for _, b := range yyq2438 {
					if b {
						yynn2438++
					}
				}
				r.EncodeMapStart(yynn2438)
				yynn2438 = 0
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[1] {
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2445 := z.DecBinary()
	_ = yym2445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2446 := r.ContainerType()
		if yyct2446 == codecSelferValueTypeMap1234 {
			yyl2446 := r.ReadMapStart()
			if yyl2446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2446, d)
			}
		} else if yyct2446 == codecSelferValueTypeArray1234 {
			yyl2446 := r.ReadArrayStart()
			if yyl2446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2447Slc
	var yyhl2447 bool = l >= 0
	for yyj2447 := 0; ; yyj2447++ {
		if yyhl2447 {
			if yyj2447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2447Slc = r.DecodeBytes(yys2447Slc, true, true)
		yys2447 := string(yys2447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2447 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2448 := &x.RepoTags
				yym2449 := z.DecBinary()
				_ = yym2449
				if false {
				} else {
					z.F.DecSliceStringX(yyv2448, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2447)
		} // end switch yys2447
	} // end for yyj2447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2451 int
	var yyb2451 bool
	var yyhl2451 bool = l >= 0
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2452 := &x.RepoTags
		yym2453 := z.DecBinary()
		_ = yym2453
		if false {
		} else {
			z.F.DecSliceStringX(yyv2452, false, d)
		}
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2451++
		if yyhl2451 {
			yyb2451 = yyj2451 > l
		} else {
			yyb2451 = r.CheckBreak()
		}
		if yyb2451 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2451-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2455 := z.EncBinary()
	_ = yym2455
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2456 := z.DecBinary()
	_ = yym2456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2457 := z.EncBinary()
	_ = yym2457
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2458 := z.DecBinary()
	_ = yym2458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2459 := z.EncBinary()
		_ = yym2459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2460 := !z.EncBinary()
			yy2arr2460 := z.EncBasicHandle().StructToArray
			var yyq2460 [6]bool
			_, _, _ = yysep2460, yyq2460, yy2arr2460
			const yyr2460 bool = false
			yyq2460[2] = true
			yyq2460[3] = true
			yyq2460[4] = x.Reason != ""
			yyq2460[5] = x.Message != ""
			var yynn2460 int
			if yyr2460 || yy2arr2460 {
				r.EncodeArrayStart(6)
			} else {
				yynn2460 = 2
				for _, b := range yyq2460 {
					if b {
						yynn2460++
					}
				}
				r.EncodeMapStart(yynn2460)
				yynn2460 = 0
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[2] {
					yy2464 := &x.LastHeartbeatTime
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2464) {
					} else if yym2465 {
						z.EncBinaryMarshal(yy2464)
					} else if !yym2465 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2464)
					} else {
						z.EncFallback(yy2464)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2466 := &x.LastHeartbeatTime
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2466) {
					} else if yym2467 {
						z.EncBinaryMarshal(yy2466)
					} else if !yym2467 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2466)
					} else {
						z.EncFallback(yy2466)
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[3] {
					yy2469 := &x.LastTransitionTime
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2469) {
					} else if yym2470 {
						z.EncBinaryMarshal(yy2469)
					} else if !yym2470 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2469)
					} else {
						z.EncFallback(yy2469)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2460[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2471 := &x.LastTransitionTime
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2471) {
					} else if yym2472 {
						z.EncBinaryMarshal(yy2471)
					} else if !yym2472 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2471)
					} else {
						z.EncFallback(yy2471)
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[4] {
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2460[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2475 := z.EncBinary()
					_ = yym2475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[5] {
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2460[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2479 := z.DecBinary()
	_ = yym2479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2480 := r.ContainerType()
		if yyct2480 == codecSelferValueTypeMap1234 {
			yyl2480 := r.ReadMapStart()
			if yyl2480 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2480, d)
			}
		} else if yyct2480 == codecSelferValueTypeArray1234 {
			yyl2480 := r.ReadArrayStart()
			if yyl2480 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2480, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2481Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2481Slc
	var yyhl2481 bool = l >= 0
	for yyj2481 := 0; ; yyj2481++ {
		if yyhl2481 {
			if yyj2481 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2481Slc = r.DecodeBytes(yys2481Slc, true, true)
		yys2481 := string(yys2481Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2481 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2484 := &x.LastHeartbeatTime
				yym2485 := z.DecBinary()
				_ = yym2485
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2484) {
				} else if yym2485 {
					z.DecBinaryUnmarshal(yyv2484)
				} else if !yym2485 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2484)
				} else {
					z.DecFallback(yyv2484, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2486 := &x.LastTransitionTime
				yym2487 := z.DecBinary()
				_ = yym2487
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2486) {
				} else if yym2487 {
					z.DecBinaryUnmarshal(yyv2486)
				} else if !yym2487 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2486)
				} else {
					z.DecFallback(yyv2486, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2481)
		} // end switch yys2481
	} // end for yyj2481
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2490 int
	var yyb2490 bool
	var yyhl2490 bool = l >= 0
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2493 := &x.LastHeartbeatTime
		yym2494 := z.DecBinary()
		_ = yym2494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2493) {
		} else if yym2494 {
			z.DecBinaryUnmarshal(yyv2493)
		} else if !yym2494 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2493)
		} else {
			z.DecFallback(yyv2493, false)
		}
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2495 := &x.LastTransitionTime
		yym2496 := z.DecBinary()
		_ = yym2496
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2495) {
		} else if yym2496 {
			z.DecBinaryUnmarshal(yyv2495)
		} else if !yym2496 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2495)
		} else {
			z.DecFallback(yyv2495, false)
		}
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2490++
		if yyhl2490 {
			yyb2490 = yyj2490 > l
		} else {
			yyb2490 = r.CheckBreak()
		}
		if yyb2490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2499 := z.EncBinary()
	_ = yym2499
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2500 := z.DecBinary()
	_ = yym2500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2501 := z.EncBinary()
		_ = yym2501
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2502 := !z.EncBinary()
			yy2arr2502 := z.EncBasicHandle().StructToArray
			var yyq2502 [2]bool
			_, _, _ = yysep2502, yyq2502, yy2arr2502
			const yyr2502 bool = false
			var yynn2502 int
			if yyr2502 || yy2arr2502 {
				r.EncodeArrayStart(2)
			} else {
				yynn2502 = 2
				for _, b := range yyq2502 {
					if b {
						yynn2502++
					}
				}
				r.EncodeMapStart(yynn2502)
				yynn2502 = 0
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2505 := z.EncBinary()
				_ = yym2505
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2506 := z.EncBinary()
				_ = yym2506
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2507 := z.DecBinary()
	_ = yym2507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2508 := r.ContainerType()
		if yyct2508 == codecSelferValueTypeMap1234 {
			yyl2508 := r.ReadMapStart()
			if yyl2508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2508, d)
			}
		} else if yyct2508 == codecSelferValueTypeArray1234 {
			yyl2508 := r.ReadArrayStart()
			if yyl2508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2509Slc
	var yyhl2509 bool = l >= 0
	for yyj2509 := 0; ; yyj2509++ {
		if yyhl2509 {
			if yyj2509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2509Slc = r.DecodeBytes(yys2509Slc, true, true)
		yys2509 := string(yys2509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2509 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2509)
		} // end switch yys2509
	} // end for yyj2509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2512 int
	var yyb2512 bool
	var yyhl2512 bool = l >= 0
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2512++
	if yyhl2512 {
		yyb2512 = yyj2512 > l
	} else {
		yyb2512 = r.CheckBreak()
	}
	if yyb2512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2512++
		if yyhl2512 {
			yyb2512 = yyj2512 > l
		} else {
			yyb2512 = r.CheckBreak()
		}
		if yyb2512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2515 := z.EncBinary()
		_ = yym2515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2516 := !z.EncBinary()
			yy2arr2516 := z.EncBasicHandle().StructToArray
			var yyq2516 [1]bool
			_, _, _ = yysep2516, yyq2516, yy2arr2516
			const yyr2516 bool = false
			yyq2516[0] = len(x.Capacity) != 0
			var yynn2516 int
			if yyr2516 || yy2arr2516 {
				r.EncodeArrayStart(1)
			} else {
				yynn2516 = 0
				for _, b := range yyq2516 {
					if b {
						yynn2516++
					}
				}
				r.EncodeMapStart(yynn2516)
				yynn2516 = 0
			}
			if yyr2516 || yy2arr2516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2516[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2516[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2516 || yy2arr2516 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2518 := z.DecBinary()
	_ = yym2518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2519 := r.ContainerType()
		if yyct2519 == codecSelferValueTypeMap1234 {
			yyl2519 := r.ReadMapStart()
			if yyl2519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2519, d)
			}
		} else if yyct2519 == codecSelferValueTypeArray1234 {
			yyl2519 := r.ReadArrayStart()
			if yyl2519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2520Slc
	var yyhl2520 bool = l >= 0
	for yyj2520 := 0; ; yyj2520++ {
		if yyhl2520 {
			if yyj2520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2520Slc = r.DecodeBytes(yys2520Slc, true, true)
		yys2520 := string(yys2520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2520 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2521 := &x.Capacity
				yyv2521.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2520)
		} // end switch yys2520
	} // end for yyj2520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2522 int
	var yyb2522 bool
	var yyhl2522 bool = l >= 0
	yyj2522++
	if yyhl2522 {
		yyb2522 = yyj2522 > l
	} else {
		yyb2522 = r.CheckBreak()
	}
	if yyb2522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2523 := &x.Capacity
		yyv2523.CodecDecodeSelf(d)
	}
	for {
		yyj2522++
		if yyhl2522 {
			yyb2522 = yyj2522 > l
		} else {
			yyb2522 = r.CheckBreak()
		}
		if yyb2522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2524 := z.EncBinary()
	_ = yym2524
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2525 := z.DecBinary()
	_ = yym2525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2526 := z.EncBinary()
		_ = yym2526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2527 := z.DecBinary()
	_ = yym2527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2528 := z.EncBinary()
		_ = yym2528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2529 := !z.EncBinary()
			yy2arr2529 := z.EncBasicHandle().StructToArray
			var yyq2529 [5]bool
			_, _, _ = yysep2529, yyq2529, yy2arr2529
			const yyr2529 bool = false
			yyq2529[0] = x.Kind != ""
			yyq2529[1] = x.APIVersion != ""
			yyq2529[2] = true
			yyq2529[3] = true
			yyq2529[4] = true
			var yynn2529 int
			if yyr2529 || yy2arr2529 {
				r.EncodeArrayStart(5)
			} else {
				yynn2529 = 0
				for _, b := range yyq2529 {
					if b {
						yynn2529++
					}
				}
				r.EncodeMapStart(yynn2529)
				yynn2529 = 0
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[0] {
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[1] {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[2] {
					yy2537 := &x.ObjectMeta
					yy2537.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2538 := &x.ObjectMeta
					yy2538.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[3] {
					yy2540 := &x.Spec
					yy2540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2541 := &x.Spec
					yy2541.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[4] {
					yy2543 := &x.Status
					yy2543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2544 := &x.Status
					yy2544.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2545 := z.DecBinary()
	_ = yym2545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2546 := r.ContainerType()
		if yyct2546 == codecSelferValueTypeMap1234 {
			yyl2546 := r.ReadMapStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2546, d)
			}
		} else if yyct2546 == codecSelferValueTypeArray1234 {
			yyl2546 := r.ReadArrayStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2547Slc
	var yyhl2547 bool = l >= 0
	for yyj2547 := 0; ; yyj2547++ {
		if yyhl2547 {
			if yyj2547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2547Slc = r.DecodeBytes(yys2547Slc, true, true)
		yys2547 := string(yys2547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2547 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2550 := &x.ObjectMeta
				yyv2550.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2551 := &x.Spec
				yyv2551.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2552 := &x.Status
				yyv2552.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2547)
		} // end switch yys2547
	} // end for yyj2547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2553 int
	var yyb2553 bool
	var yyhl2553 bool = l >= 0
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2556 := &x.ObjectMeta
		yyv2556.CodecDecodeSelf(d)
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2557 := &x.Spec
		yyv2557.CodecDecodeSelf(d)
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2558 := &x.Status
		yyv2558.CodecDecodeSelf(d)
	}
	for {
		yyj2553++
		if yyhl2553 {
			yyb2553 = yyj2553 > l
		} else {
			yyb2553 = r.CheckBreak()
		}
		if yyb2553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2559 := z.EncBinary()
		_ = yym2559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2560 := !z.EncBinary()
			yy2arr2560 := z.EncBasicHandle().StructToArray
			var yyq2560 [4]bool
			_, _, _ = yysep2560, yyq2560, yy2arr2560
			const yyr2560 bool = false
			yyq2560[0] = x.Kind != ""
			yyq2560[1] = x.APIVersion != ""
			yyq2560[2] = true
			var yynn2560 int
			if yyr2560 || yy2arr2560 {
				r.EncodeArrayStart(4)
			} else {
				yynn2560 = 1
				for _, b := range yyq2560 {
					if b {
						yynn2560++
					}
				}
				r.EncodeMapStart(yynn2560)
				yynn2560 = 0
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[0] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[1] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[2] {
					yy2568 := &x.ListMeta
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2568) {
					} else {
						z.EncFallback(yy2568)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2560[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2570 := &x.ListMeta
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2570) {
					} else {
						z.EncFallback(yy2570)
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2575 := z.DecBinary()
	_ = yym2575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2576 := r.ContainerType()
		if yyct2576 == codecSelferValueTypeMap1234 {
			yyl2576 := r.ReadMapStart()
			if yyl2576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2576, d)
			}
		} else if yyct2576 == codecSelferValueTypeArray1234 {
			yyl2576 := r.ReadArrayStart()
			if yyl2576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2577Slc
	var yyhl2577 bool = l >= 0
	for yyj2577 := 0; ; yyj2577++ {
		if yyhl2577 {
			if yyj2577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2577Slc = r.DecodeBytes(yys2577Slc, true, true)
		yys2577 := string(yys2577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2577 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2580 := &x.ListMeta
				yym2581 := z.DecBinary()
				_ = yym2581
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2580) {
				} else {
					z.DecFallback(yyv2580, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2582 := &x.Items
				yym2583 := z.DecBinary()
				_ = yym2583
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2582), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2577)
		} // end switch yys2577
	} // end for yyj2577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2584 int
	var yyb2584 bool
	var yyhl2584 bool = l >= 0
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2587 := &x.ListMeta
		yym2588 := z.DecBinary()
		_ = yym2588
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2587) {
		} else {
			z.DecFallback(yyv2587, false)
		}
	}
	yyj2584++
	if yyhl2584 {
		yyb2584 = yyj2584 > l
	} else {
		yyb2584 = r.CheckBreak()
	}
	if yyb2584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2589 := &x.Items
		yym2590 := z.DecBinary()
		_ = yym2590
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2589), d)
		}
	}
	for {
		yyj2584++
		if yyhl2584 {
			yyb2584 = yyj2584 > l
		} else {
			yyb2584 = r.CheckBreak()
		}
		if yyb2584 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2584-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2591 := z.EncBinary()
		_ = yym2591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2592 := !z.EncBinary()
			yy2arr2592 := z.EncBasicHandle().StructToArray
			var yyq2592 [1]bool
			_, _, _ = yysep2592, yyq2592, yy2arr2592
			const yyr2592 bool = false
			var yynn2592 int
			if yyr2592 || yy2arr2592 {
				r.EncodeArrayStart(1)
			} else {
				yynn2592 = 1
				for _, b := range yyq2592 {
					if b {
						yynn2592++
					}
				}
				r.EncodeMapStart(yynn2592)
				yynn2592 = 0
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2592 || yy2arr2592 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2596 := z.DecBinary()
	_ = yym2596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2597 := r.ContainerType()
		if yyct2597 == codecSelferValueTypeMap1234 {
			yyl2597 := r.ReadMapStart()
			if yyl2597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2597, d)
			}
		} else if yyct2597 == codecSelferValueTypeArray1234 {
			yyl2597 := r.ReadArrayStart()
			if yyl2597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2598Slc
	var yyhl2598 bool = l >= 0
	for yyj2598 := 0; ; yyj2598++ {
		if yyhl2598 {
			if yyj2598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2598Slc = r.DecodeBytes(yys2598Slc, true, true)
		yys2598 := string(yys2598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2598 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2599 := &x.Finalizers
				yym2600 := z.DecBinary()
				_ = yym2600
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2599), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2598)
		} // end switch yys2598
	} // end for yyj2598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2601 int
	var yyb2601 bool
	var yyhl2601 bool = l >= 0
	yyj2601++
	if yyhl2601 {
		yyb2601 = yyj2601 > l
	} else {
		yyb2601 = r.CheckBreak()
	}
	if yyb2601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2602 := &x.Finalizers
		yym2603 := z.DecBinary()
		_ = yym2603
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2602), d)
		}
	}
	for {
		yyj2601++
		if yyhl2601 {
			yyb2601 = yyj2601 > l
		} else {
			yyb2601 = r.CheckBreak()
		}
		if yyb2601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2604 := z.EncBinary()
	_ = yym2604
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2605 := z.DecBinary()
	_ = yym2605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2606 := z.EncBinary()
		_ = yym2606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2607 := !z.EncBinary()
			yy2arr2607 := z.EncBasicHandle().StructToArray
			var yyq2607 [1]bool
			_, _, _ = yysep2607, yyq2607, yy2arr2607
			const yyr2607 bool = false
			yyq2607[0] = x.Phase != ""
			var yynn2607 int
			if yyr2607 || yy2arr2607 {
				r.EncodeArrayStart(1)
			} else {
				yynn2607 = 0
				for _, b := range yyq2607 {
					if b {
						yynn2607++
					}
				}
				r.EncodeMapStart(yynn2607)
				yynn2607 = 0
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2607[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2607[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2607 || yy2arr2607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2609 := z.DecBinary()
	_ = yym2609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2610 := r.ContainerType()
		if yyct2610 == codecSelferValueTypeMap1234 {
			yyl2610 := r.ReadMapStart()
			if yyl2610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2610, d)
			}
		} else if yyct2610 == codecSelferValueTypeArray1234 {
			yyl2610 := r.ReadArrayStart()
			if yyl2610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2611Slc
	var yyhl2611 bool = l >= 0
	for yyj2611 := 0; ; yyj2611++ {
		if yyhl2611 {
			if yyj2611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2611Slc = r.DecodeBytes(yys2611Slc, true, true)
		yys2611 := string(yys2611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2611 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2611)
		} // end switch yys2611
	} // end for yyj2611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2613 int
	var yyb2613 bool
	var yyhl2613 bool = l >= 0
	yyj2613++
	if yyhl2613 {
		yyb2613 = yyj2613 > l
	} else {
		yyb2613 = r.CheckBreak()
	}
	if yyb2613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2613++
		if yyhl2613 {
			yyb2613 = yyj2613 > l
		} else {
			yyb2613 = r.CheckBreak()
		}
		if yyb2613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2615 := z.EncBinary()
	_ = yym2615
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2616 := z.DecBinary()
	_ = yym2616
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2617 := z.EncBinary()
		_ = yym2617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2618 := !z.EncBinary()
			yy2arr2618 := z.EncBasicHandle().StructToArray
			var yyq2618 [5]bool
			_, _, _ = yysep2618, yyq2618, yy2arr2618
			const yyr2618 bool = false
			yyq2618[0] = x.Kind != ""
			yyq2618[1] = x.APIVersion != ""
			yyq2618[2] = true
			yyq2618[3] = true
			yyq2618[4] = true
			var yynn2618 int
			if yyr2618 || yy2arr2618 {
				r.EncodeArrayStart(5)
			} else {
				yynn2618 = 0
				for _, b := range yyq2618 {
					if b {
						yynn2618++
					}
				}
				r.EncodeMapStart(yynn2618)
				yynn2618 = 0
			}
			if yyr2618 || yy2arr2618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2618[0] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2618[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2618 || yy2arr2618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2618[1] {
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2618[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2618 || yy2arr2618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2618[2] {
					yy2626 := &x.ObjectMeta
					yy2626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2618[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2627 := &x.ObjectMeta
					yy2627.CodecEncodeSelf(e)
				}
			}
			if yyr2618 || yy2arr2618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2618[3] {
					yy2629 := &x.Spec
					yy2629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2618[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2630 := &x.Spec
					yy2630.CodecEncodeSelf(e)
				}
			}
			if yyr2618 || yy2arr2618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2618[4] {
					yy2632 := &x.Status
					yy2632.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2618[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2633 := &x.Status
					yy2633.CodecEncodeSelf(e)
				}
			}
			if yyr2618 || yy2arr2618 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2634 := z.DecBinary()
	_ = yym2634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2635 := r.ContainerType()
		if yyct2635 == codecSelferValueTypeMap1234 {
			yyl2635 := r.ReadMapStart()
			if yyl2635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2635, d)
			}
		} else if yyct2635 == codecSelferValueTypeArray1234 {
			yyl2635 := r.ReadArrayStart()
			if yyl2635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2636Slc
	var yyhl2636 bool = l >= 0
	for yyj2636 := 0; ; yyj2636++ {
		if yyhl2636 {
			if yyj2636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2636Slc = r.DecodeBytes(yys2636Slc, true, true)
		yys2636 := string(yys2636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2636 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2639 := &x.ObjectMeta
				yyv2639.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2640 := &x.Spec
				yyv2640.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2641 := &x.Status
				yyv2641.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2636)
		} // end switch yys2636
	} // end for yyj2636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2642 int
	var yyb2642 bool
	var yyhl2642 bool = l >= 0
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2645 := &x.ObjectMeta
		yyv2645.CodecDecodeSelf(d)
	}
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2646 := &x.Spec
		yyv2646.CodecDecodeSelf(d)
	}
	yyj2642++
	if yyhl2642 {
		yyb2642 = yyj2642 > l
	} else {
		yyb2642 = r.CheckBreak()
	}
	if yyb2642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2647 := &x.Status
		yyv2647.CodecDecodeSelf(d)
	}
	for {
		yyj2642++
		if yyhl2642 {
			yyb2642 = yyj2642 > l
		} else {
			yyb2642 = r.CheckBreak()
		}
		if yyb2642 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2642-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2648 := z.EncBinary()
		_ = yym2648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2649 := !z.EncBinary()
			yy2arr2649 := z.EncBasicHandle().StructToArray
			var yyq2649 [4]bool
			_, _, _ = yysep2649, yyq2649, yy2arr2649
			const yyr2649 bool = false
			yyq2649[0] = x.Kind != ""
			yyq2649[1] = x.APIVersion != ""
			yyq2649[2] = true
			var yynn2649 int
			if yyr2649 || yy2arr2649 {
				r.EncodeArrayStart(4)
			} else {
				yynn2649 = 1
				for _, b := range yyq2649 {
					if b {
						yynn2649++
					}
				}
				r.EncodeMapStart(yynn2649)
				yynn2649 = 0
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2649[0] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2649[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2649[1] {
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2649[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2649[2] {
					yy2657 := &x.ListMeta
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2657) {
					} else {
						z.EncFallback(yy2657)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2659 := &x.ListMeta
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2659) {
					} else {
						z.EncFallback(yy2659)
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2662 := z.EncBinary()
					_ = yym2662
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2664 := z.DecBinary()
	_ = yym2664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2665 := r.ContainerType()
		if yyct2665 == codecSelferValueTypeMap1234 {
			yyl2665 := r.ReadMapStart()
			if yyl2665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2665, d)
			}
		} else if yyct2665 == codecSelferValueTypeArray1234 {
			yyl2665 := r.ReadArrayStart()
			if yyl2665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2666Slc
	var yyhl2666 bool = l >= 0
	for yyj2666 := 0; ; yyj2666++ {
		if yyhl2666 {
			if yyj2666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2666Slc = r.DecodeBytes(yys2666Slc, true, true)
		yys2666 := string(yys2666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2666 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2669 := &x.ListMeta
				yym2670 := z.DecBinary()
				_ = yym2670
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2669) {
				} else {
					z.DecFallback(yyv2669, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2671 := &x.Items
				yym2672 := z.DecBinary()
				_ = yym2672
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2671), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2666)
		} // end switch yys2666
	} // end for yyj2666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2673 int
	var yyb2673 bool
	var yyhl2673 bool = l >= 0
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2676 := &x.ListMeta
		yym2677 := z.DecBinary()
		_ = yym2677
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2676) {
		} else {
			z.DecFallback(yyv2676, false)
		}
	}
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2678 := &x.Items
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2678), d)
		}
	}
	for {
		yyj2673++
		if yyhl2673 {
			yyb2673 = yyj2673 > l
		} else {
			yyb2673 = r.CheckBreak()
		}
		if yyb2673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2680 := z.EncBinary()
		_ = yym2680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2681 := !z.EncBinary()
			yy2arr2681 := z.EncBasicHandle().StructToArray
			var yyq2681 [4]bool
			_, _, _ = yysep2681, yyq2681, yy2arr2681
			const yyr2681 bool = false
			yyq2681[0] = x.Kind != ""
			yyq2681[1] = x.APIVersion != ""
			yyq2681[2] = true
			var yynn2681 int
			if yyr2681 || yy2arr2681 {
				r.EncodeArrayStart(4)
			} else {
				yynn2681 = 1
				for _, b := range yyq2681 {
					if b {
						yynn2681++
					}
				}
				r.EncodeMapStart(yynn2681)
				yynn2681 = 0
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[0] {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2681[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[1] {
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[2] {
					yy2689 := &x.ObjectMeta
					yy2689.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2690 := &x.ObjectMeta
					yy2690.CodecEncodeSelf(e)
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2692 := &x.Target
				yy2692.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2693 := &x.Target
				yy2693.CodecEncodeSelf(e)
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2694 := z.DecBinary()
	_ = yym2694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2695 := r.ContainerType()
		if yyct2695 == codecSelferValueTypeMap1234 {
			yyl2695 := r.ReadMapStart()
			if yyl2695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2695, d)
			}
		} else if yyct2695 == codecSelferValueTypeArray1234 {
			yyl2695 := r.ReadArrayStart()
			if yyl2695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2696Slc
	var yyhl2696 bool = l >= 0
	for yyj2696 := 0; ; yyj2696++ {
		if yyhl2696 {
			if yyj2696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2696Slc = r.DecodeBytes(yys2696Slc, true, true)
		yys2696 := string(yys2696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2696 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2699 := &x.ObjectMeta
				yyv2699.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2700 := &x.Target
				yyv2700.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2696)
		} // end switch yys2696
	} // end for yyj2696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2701 int
	var yyb2701 bool
	var yyhl2701 bool = l >= 0
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2704 := &x.ObjectMeta
		yyv2704.CodecDecodeSelf(d)
	}
	yyj2701++
	if yyhl2701 {
		yyb2701 = yyj2701 > l
	} else {
		yyb2701 = r.CheckBreak()
	}
	if yyb2701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2705 := &x.Target
		yyv2705.CodecDecodeSelf(d)
	}
	for {
		yyj2701++
		if yyhl2701 {
			yyb2701 = yyj2701 > l
		} else {
			yyb2701 = r.CheckBreak()
		}
		if yyb2701 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2701-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2706 := z.EncBinary()
		_ = yym2706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2707 := !z.EncBinary()
			yy2arr2707 := z.EncBasicHandle().StructToArray
			var yyq2707 [3]bool
			_, _, _ = yysep2707, yyq2707, yy2arr2707
			const yyr2707 bool = false
			yyq2707[0] = x.Kind != ""
			yyq2707[1] = x.APIVersion != ""
			var yynn2707 int
			if yyr2707 || yy2arr2707 {
				r.EncodeArrayStart(3)
			} else {
				yynn2707 = 1
				for _, b := range yyq2707 {
					if b {
						yynn2707++
					}
				}
				r.EncodeMapStart(yynn2707)
				yynn2707 = 0
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[0] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[1] {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2715 := *x.GracePeriodSeconds
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeInt(int64(yy2715))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2717 := *x.GracePeriodSeconds
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeInt(int64(yy2717))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2719 := z.DecBinary()
	_ = yym2719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2720 := r.ContainerType()
		if yyct2720 == codecSelferValueTypeMap1234 {
			yyl2720 := r.ReadMapStart()
			if yyl2720 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2720, d)
			}
		} else if yyct2720 == codecSelferValueTypeArray1234 {
			yyl2720 := r.ReadArrayStart()
			if yyl2720 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2721Slc
	var yyhl2721 bool = l >= 0
	for yyj2721 := 0; ; yyj2721++ {
		if yyhl2721 {
			if yyj2721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2721Slc = r.DecodeBytes(yys2721Slc, true, true)
		yys2721 := string(yys2721Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2721 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2725 := z.DecBinary()
				_ = yym2725
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2721)
		} // end switch yys2721
	} // end for yyj2721
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2726 int
	var yyb2726 bool
	var yyhl2726 bool = l >= 0
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2730 := z.DecBinary()
		_ = yym2730
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2726++
		if yyhl2726 {
			yyb2726 = yyj2726 > l
		} else {
			yyb2726 = r.CheckBreak()
		}
		if yyb2726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2731 := z.EncBinary()
		_ = yym2731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2732 := !z.EncBinary()
			yy2arr2732 := z.EncBasicHandle().StructToArray
			var yyq2732 [4]bool
			_, _, _ = yysep2732, yyq2732, yy2arr2732
			const yyr2732 bool = false
			yyq2732[0] = x.Kind != ""
			yyq2732[1] = x.APIVersion != ""
			var yynn2732 int
			if yyr2732 || yy2arr2732 {
				r.EncodeArrayStart(4)
			} else {
				yynn2732 = 2
				for _, b := range yyq2732 {
					if b {
						yynn2732++
					}
				}
				r.EncodeMapStart(yynn2732)
				yynn2732 = 0
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[0] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[1] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2740 := z.EncBinary()
				_ = yym2740
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2741 := z.EncBinary()
				_ = yym2741
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2743 := z.EncBinary()
				_ = yym2743
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2744 := z.EncBinary()
				_ = yym2744
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2745 := z.DecBinary()
	_ = yym2745
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2746 := r.ContainerType()
		if yyct2746 == codecSelferValueTypeMap1234 {
			yyl2746 := r.ReadMapStart()
			if yyl2746 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2746, d)
			}
		} else if yyct2746 == codecSelferValueTypeArray1234 {
			yyl2746 := r.ReadArrayStart()
			if yyl2746 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2746, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2747Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2747Slc
	var yyhl2747 bool = l >= 0
	for yyj2747 := 0; ; yyj2747++ {
		if yyhl2747 {
			if yyj2747 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2747Slc = r.DecodeBytes(yys2747Slc, true, true)
		yys2747 := string(yys2747Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2747 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2747)
		} // end switch yys2747
	} // end for yyj2747
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2752 int
	var yyb2752 bool
	var yyhl2752 bool = l >= 0
	yyj2752++
	if yyhl2752 {
		yyb2752 = yyj2752 > l
	} else {
		yyb2752 = r.CheckBreak()
	}
	if yyb2752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2752++
	if yyhl2752 {
		yyb2752 = yyj2752 > l
	} else {
		yyb2752 = r.CheckBreak()
	}
	if yyb2752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2752++
	if yyhl2752 {
		yyb2752 = yyj2752 > l
	} else {
		yyb2752 = r.CheckBreak()
	}
	if yyb2752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2752++
	if yyhl2752 {
		yyb2752 = yyj2752 > l
	} else {
		yyb2752 = r.CheckBreak()
	}
	if yyb2752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj2752++
		if yyhl2752 {
			yyb2752 = yyj2752 > l
		} else {
			yyb2752 = r.CheckBreak()
		}
		if yyb2752 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2752-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2757 := z.EncBinary()
		_ = yym2757
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2758 := !z.EncBinary()
			yy2arr2758 := z.EncBasicHandle().StructToArray
			var yyq2758 [7]bool
			_, _, _ = yysep2758, yyq2758, yy2arr2758
			const yyr2758 bool = false
			yyq2758[0] = x.Kind != ""
			yyq2758[1] = x.APIVersion != ""
			var yynn2758 int
			if yyr2758 || yy2arr2758 {
				r.EncodeArrayStart(7)
			} else {
				yynn2758 = 5
				for _, b := range yyq2758 {
					if b {
						yynn2758++
					}
				}
				r.EncodeMapStart(yynn2758)
				yynn2758 = 0
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2758[0] {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2758[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2758[1] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2758[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2772 := z.EncBinary()
				_ = yym2772
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2773 := z.EncBinary()
				_ = yym2773
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2775 := z.EncBinary()
				_ = yym2775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2776 := z.EncBinary()
				_ = yym2776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2778 := *x.TimeoutSeconds
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else {
						r.EncodeInt(int64(yy2778))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2780 := *x.TimeoutSeconds
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else {
						r.EncodeInt(int64(yy2780))
					}
				}
			}
			if yyr2758 || yy2arr2758 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2782 := z.DecBinary()
	_ = yym2782
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2783 := r.ContainerType()
		if yyct2783 == codecSelferValueTypeMap1234 {
			yyl2783 := r.ReadMapStart()
			if yyl2783 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2783, d)
			}
		} else if yyct2783 == codecSelferValueTypeArray1234 {
			yyl2783 := r.ReadArrayStart()
			if yyl2783 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2783, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2784Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2784Slc
	var yyhl2784 bool = l >= 0
	for yyj2784 := 0; ; yyj2784++ {
		if yyhl2784 {
			if yyj2784 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2784Slc = r.DecodeBytes(yys2784Slc, true, true)
		yys2784 := string(yys2784Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2784 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2787 := &x.LabelSelector
				yym2788 := z.DecBinary()
				_ = yym2788
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2787) {
				} else {
					z.DecFallback(yyv2787, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2789 := &x.FieldSelector
				yym2790 := z.DecBinary()
				_ = yym2790
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2789) {
				} else {
					z.DecFallback(yyv2789, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2794 := z.DecBinary()
				_ = yym2794
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2784)
		} // end switch yys2784
	} // end for yyj2784
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2795 int
	var yyb2795 bool
	var yyhl2795 bool = l >= 0
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2798 := &x.LabelSelector
		yym2799 := z.DecBinary()
		_ = yym2799
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2798) {
		} else {
			z.DecFallback(yyv2798, true)
		}
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2800 := &x.FieldSelector
		yym2801 := z.DecBinary()
		_ = yym2801
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2800) {
		} else {
			z.DecFallback(yyv2800, true)
		}
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2805 := z.DecBinary()
		_ = yym2805
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2795++
		if yyhl2795 {
			yyb2795 = yyj2795 > l
		} else {
			yyb2795 = r.CheckBreak()
		}
		if yyb2795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2806 := z.EncBinary()
		_ = yym2806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2807 := !z.EncBinary()
			yy2arr2807 := z.EncBasicHandle().StructToArray
			var yyq2807 [10]bool
			_, _, _ = yysep2807, yyq2807, yy2arr2807
			const yyr2807 bool = false
			yyq2807[0] = x.Kind != ""
			yyq2807[1] = x.APIVersion != ""
			var yynn2807 int
			if yyr2807 || yy2arr2807 {
				r.EncodeArrayStart(10)
			} else {
				yynn2807 = 8
				for _, b := range yyq2807 {
					if b {
						yynn2807++
					}
				}
				r.EncodeMapStart(yynn2807)
				yynn2807 = 0
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2807[0] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2807[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2807[1] {
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2816 := z.EncBinary()
				_ = yym2816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2819 := z.EncBinary()
				_ = yym2819
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2821 := z.EncBinary()
				_ = yym2821
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2822 := z.EncBinary()
				_ = yym2822
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2824 := *x.SinceSeconds
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else {
						r.EncodeInt(int64(yy2824))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2826 := *x.SinceSeconds
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeInt(int64(yy2826))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2829 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2829 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2830 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2830 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2832 := z.EncBinary()
				_ = yym2832
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2833 := z.EncBinary()
				_ = yym2833
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2835 := *x.TailLines
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else {
						r.EncodeInt(int64(yy2835))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2837 := *x.TailLines
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						r.EncodeInt(int64(yy2837))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2840 := *x.LimitBytes
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeInt(int64(yy2840))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2842 := *x.LimitBytes
					yym2843 := z.EncBinary()
					_ = yym2843
					if false {
					} else {
						r.EncodeInt(int64(yy2842))
					}
				}
			}
			if yyr2807 || yy2arr2807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2844 := z.DecBinary()
	_ = yym2844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2845 := r.ContainerType()
		if yyct2845 == codecSelferValueTypeMap1234 {
			yyl2845 := r.ReadMapStart()
			if yyl2845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2845, d)
			}
		} else if yyct2845 == codecSelferValueTypeArray1234 {
			yyl2845 := r.ReadArrayStart()
			if yyl2845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2846Slc
	var yyhl2846 bool = l >= 0
	for yyj2846 := 0; ; yyj2846++ {
		if yyhl2846 {
			if yyj2846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2846Slc = r.DecodeBytes(yys2846Slc, true, true)
		yys2846 := string(yys2846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2846 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2853 := z.DecBinary()
				_ = yym2853
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2855 := z.DecBinary()
				_ = yym2855
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2855 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2855 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2858 := z.DecBinary()
				_ = yym2858
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2860 := z.DecBinary()
				_ = yym2860
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2846)
		} // end switch yys2846
	} // end for yyj2846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2861 int
	var yyb2861 bool
	var yyhl2861 bool = l >= 0
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2868 := z.DecBinary()
		_ = yym2868
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2870 := z.DecBinary()
		_ = yym2870
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2870 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2870 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2873 := z.DecBinary()
		_ = yym2873
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2875 := z.DecBinary()
		_ = yym2875
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2861++
		if yyhl2861 {
			yyb2861 = yyj2861 > l
		} else {
			yyb2861 = r.CheckBreak()
		}
		if yyb2861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2876 := z.EncBinary()
		_ = yym2876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2877 := !z.EncBinary()
			yy2arr2877 := z.EncBasicHandle().StructToArray
			var yyq2877 [7]bool
			_, _, _ = yysep2877, yyq2877, yy2arr2877
			const yyr2877 bool = false
			yyq2877[0] = x.Kind != ""
			yyq2877[1] = x.APIVersion != ""
			yyq2877[2] = x.Stdin != false
			yyq2877[3] = x.Stdout != false
			yyq2877[4] = x.Stderr != false
			yyq2877[5] = x.TTY != false
			yyq2877[6] = x.Container != ""
			var yynn2877 int
			if yyr2877 || yy2arr2877 {
				r.EncodeArrayStart(7)
			} else {
				yynn2877 = 0
				for _, b := range yyq2877 {
					if b {
						yynn2877++
					}
				}
				r.EncodeMapStart(yynn2877)
				yynn2877 = 0
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[0] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[1] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[2] {
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2877[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2886 := z.EncBinary()
					_ = yym2886
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[3] {
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2877[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2889 := z.EncBinary()
					_ = yym2889
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[4] {
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2877[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[5] {
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2877[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[6] {
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2899 := z.DecBinary()
	_ = yym2899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2900 := r.ContainerType()
		if yyct2900 == codecSelferValueTypeMap1234 {
			yyl2900 := r.ReadMapStart()
			if yyl2900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2900, d)
			}
		} else if yyct2900 == codecSelferValueTypeArray1234 {
			yyl2900 := r.ReadArrayStart()
			if yyl2900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2901Slc
	var yyhl2901 bool = l >= 0
	for yyj2901 := 0; ; yyj2901++ {
		if yyhl2901 {
			if yyj2901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2901Slc = r.DecodeBytes(yys2901Slc, true, true)
		yys2901 := string(yys2901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2901 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2901)
		} // end switch yys2901
	} // end for yyj2901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2909 int
	var yyb2909 bool
	var yyhl2909 bool = l >= 0
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2909++
	if yyhl2909 {
		yyb2909 = yyj2909 > l
	} else {
		yyb2909 = r.CheckBreak()
	}
	if yyb2909 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2909++
		if yyhl2909 {
			yyb2909 = yyj2909 > l
		} else {
			yyb2909 = r.CheckBreak()
		}
		if yyb2909 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2909-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2917 := z.EncBinary()
		_ = yym2917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2918 := !z.EncBinary()
			yy2arr2918 := z.EncBasicHandle().StructToArray
			var yyq2918 [8]bool
			_, _, _ = yysep2918, yyq2918, yy2arr2918
			const yyr2918 bool = false
			yyq2918[0] = x.Kind != ""
			yyq2918[1] = x.APIVersion != ""
			var yynn2918 int
			if yyr2918 || yy2arr2918 {
				r.EncodeArrayStart(8)
			} else {
				yynn2918 = 6
				for _, b := range yyq2918 {
					if b {
						yynn2918++
					}
				}
				r.EncodeMapStart(yynn2918)
				yynn2918 = 0
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[0] {
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[1] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2926 := z.EncBinary()
				_ = yym2926
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2927 := z.EncBinary()
				_ = yym2927
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2929 := z.EncBinary()
				_ = yym2929
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2932 := z.EncBinary()
				_ = yym2932
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2935 := z.EncBinary()
				_ = yym2935
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2936 := z.EncBinary()
				_ = yym2936
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2938 := z.EncBinary()
				_ = yym2938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2939 := z.EncBinary()
				_ = yym2939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2943 := z.DecBinary()
	_ = yym2943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2944 := r.ContainerType()
		if yyct2944 == codecSelferValueTypeMap1234 {
			yyl2944 := r.ReadMapStart()
			if yyl2944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2944, d)
			}
		} else if yyct2944 == codecSelferValueTypeArray1234 {
			yyl2944 := r.ReadArrayStart()
			if yyl2944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2945Slc
	var yyhl2945 bool = l >= 0
	for yyj2945 := 0; ; yyj2945++ {
		if yyhl2945 {
			if yyj2945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2945Slc = r.DecodeBytes(yys2945Slc, true, true)
		yys2945 := string(yys2945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2945 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2953 := &x.Command
				yym2954 := z.DecBinary()
				_ = yym2954
				if false {
				} else {
					z.F.DecSliceStringX(yyv2953, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2945)
		} // end switch yys2945
	} // end for yyj2945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2955 int
	var yyb2955 bool
	var yyhl2955 bool = l >= 0
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2963 := &x.Command
		yym2964 := z.DecBinary()
		_ = yym2964
		if false {
		} else {
			z.F.DecSliceStringX(yyv2963, false, d)
		}
	}
	for {
		yyj2955++
		if yyhl2955 {
			yyb2955 = yyj2955 > l
		} else {
			yyb2955 = r.CheckBreak()
		}
		if yyb2955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2965 := z.EncBinary()
		_ = yym2965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2966 := !z.EncBinary()
			yy2arr2966 := z.EncBasicHandle().StructToArray
			var yyq2966 [3]bool
			_, _, _ = yysep2966, yyq2966, yy2arr2966
			const yyr2966 bool = false
			yyq2966[0] = x.Kind != ""
			yyq2966[1] = x.APIVersion != ""
			var yynn2966 int
			if yyr2966 || yy2arr2966 {
				r.EncodeArrayStart(3)
			} else {
				yynn2966 = 1
				for _, b := range yyq2966 {
					if b {
						yynn2966++
					}
				}
				r.EncodeMapStart(yynn2966)
				yynn2966 = 0
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2966[0] {
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2966[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2966[1] {
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2966[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2974 := z.EncBinary()
				_ = yym2974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2975 := z.EncBinary()
				_ = yym2975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2976 := z.DecBinary()
	_ = yym2976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2977 := r.ContainerType()
		if yyct2977 == codecSelferValueTypeMap1234 {
			yyl2977 := r.ReadMapStart()
			if yyl2977 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2977, d)
			}
		} else if yyct2977 == codecSelferValueTypeArray1234 {
			yyl2977 := r.ReadArrayStart()
			if yyl2977 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2978Slc
	var yyhl2978 bool = l >= 0
	for yyj2978 := 0; ; yyj2978++ {
		if yyhl2978 {
			if yyj2978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2978Slc = r.DecodeBytes(yys2978Slc, true, true)
		yys2978 := string(yys2978Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2978 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2978)
		} // end switch yys2978
	} // end for yyj2978
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2982 int
	var yyb2982 bool
	var yyhl2982 bool = l >= 0
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2982++
		if yyhl2982 {
			yyb2982 = yyj2982 > l
		} else {
			yyb2982 = r.CheckBreak()
		}
		if yyb2982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2986 := z.EncBinary()
		_ = yym2986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2987 := !z.EncBinary()
			yy2arr2987 := z.EncBasicHandle().StructToArray
			var yyq2987 [7]bool
			_, _, _ = yysep2987, yyq2987, yy2arr2987
			const yyr2987 bool = false
			yyq2987[0] = x.Kind != ""
			yyq2987[1] = x.Namespace != ""
			yyq2987[2] = x.Name != ""
			yyq2987[3] = x.UID != ""
			yyq2987[4] = x.APIVersion != ""
			yyq2987[5] = x.ResourceVersion != ""
			yyq2987[6] = x.FieldPath != ""
			var yynn2987 int
			if yyr2987 || yy2arr2987 {
				r.EncodeArrayStart(7)
			} else {
				yynn2987 = 0
				for _, b := range yyq2987 {
					if b {
						yynn2987++
					}
				}
				r.EncodeMapStart(yynn2987)
				yynn2987 = 0
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[0] {
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[1] {
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[2] {
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[3] {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[4] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[5] {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[6] {
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2987[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3009 := z.DecBinary()
	_ = yym3009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3010 := r.ContainerType()
		if yyct3010 == codecSelferValueTypeMap1234 {
			yyl3010 := r.ReadMapStart()
			if yyl3010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3010, d)
			}
		} else if yyct3010 == codecSelferValueTypeArray1234 {
			yyl3010 := r.ReadArrayStart()
			if yyl3010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3011Slc
	var yyhl3011 bool = l >= 0
	for yyj3011 := 0; ; yyj3011++ {
		if yyhl3011 {
			if yyj3011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3011Slc = r.DecodeBytes(yys3011Slc, true, true)
		yys3011 := string(yys3011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3011 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3011)
		} // end switch yys3011
	} // end for yyj3011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3019 int
	var yyb3019 bool
	var yyhl3019 bool = l >= 0
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3019++
		if yyhl3019 {
			yyb3019 = yyj3019 > l
		} else {
			yyb3019 = r.CheckBreak()
		}
		if yyb3019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3027 := z.EncBinary()
		_ = yym3027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3028 := !z.EncBinary()
			yy2arr3028 := z.EncBasicHandle().StructToArray
			var yyq3028 [1]bool
			_, _, _ = yysep3028, yyq3028, yy2arr3028
			const yyr3028 bool = false
			var yynn3028 int
			if yyr3028 || yy2arr3028 {
				r.EncodeArrayStart(1)
			} else {
				yynn3028 = 1
				for _, b := range yyq3028 {
					if b {
						yynn3028++
					}
				}
				r.EncodeMapStart(yynn3028)
				yynn3028 = 0
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3030 := z.EncBinary()
				_ = yym3030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3031 := z.EncBinary()
				_ = yym3031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3032 := z.DecBinary()
	_ = yym3032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3033 := r.ContainerType()
		if yyct3033 == codecSelferValueTypeMap1234 {
			yyl3033 := r.ReadMapStart()
			if yyl3033 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3033, d)
			}
		} else if yyct3033 == codecSelferValueTypeArray1234 {
			yyl3033 := r.ReadArrayStart()
			if yyl3033 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3034Slc
	var yyhl3034 bool = l >= 0
	for yyj3034 := 0; ; yyj3034++ {
		if yyhl3034 {
			if yyj3034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3034Slc = r.DecodeBytes(yys3034Slc, true, true)
		yys3034 := string(yys3034Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3034 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3034)
		} // end switch yys3034
	} // end for yyj3034
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3036 int
	var yyb3036 bool
	var yyhl3036 bool = l >= 0
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3036++
		if yyhl3036 {
			yyb3036 = yyj3036 > l
		} else {
			yyb3036 = r.CheckBreak()
		}
		if yyb3036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3038 := z.EncBinary()
		_ = yym3038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3039 := !z.EncBinary()
			yy2arr3039 := z.EncBasicHandle().StructToArray
			var yyq3039 [3]bool
			_, _, _ = yysep3039, yyq3039, yy2arr3039
			const yyr3039 bool = false
			yyq3039[0] = x.Kind != ""
			yyq3039[1] = x.APIVersion != ""
			yyq3039[2] = true
			var yynn3039 int
			if yyr3039 || yy2arr3039 {
				r.EncodeArrayStart(3)
			} else {
				yynn3039 = 0
				for _, b := range yyq3039 {
					if b {
						yynn3039++
					}
				}
				r.EncodeMapStart(yynn3039)
				yynn3039 = 0
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3039[0] {
					yym3041 := z.EncBinary()
					_ = yym3041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3039[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3039[1] {
					yym3044 := z.EncBinary()
					_ = yym3044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3039[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3039[2] {
					yy3047 := &x.Reference
					yy3047.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3039[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3048 := &x.Reference
					yy3048.CodecEncodeSelf(e)
				}
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3049 := z.DecBinary()
	_ = yym3049
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3050 := r.ContainerType()
		if yyct3050 == codecSelferValueTypeMap1234 {
			yyl3050 := r.ReadMapStart()
			if yyl3050 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3050, d)
			}
		} else if yyct3050 == codecSelferValueTypeArray1234 {
			yyl3050 := r.ReadArrayStart()
			if yyl3050 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3050, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3051Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3051Slc
	var yyhl3051 bool = l >= 0
	for yyj3051 := 0; ; yyj3051++ {
		if yyhl3051 {
			if yyj3051 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3051Slc = r.DecodeBytes(yys3051Slc, true, true)
		yys3051 := string(yys3051Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3051 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3054 := &x.Reference
				yyv3054.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3051)
		} // end switch yys3051
	} // end for yyj3051
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3055 int
	var yyb3055 bool
	var yyhl3055 bool = l >= 0
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3058 := &x.Reference
		yyv3058.CodecDecodeSelf(d)
	}
	for {
		yyj3055++
		if yyhl3055 {
			yyb3055 = yyj3055 > l
		} else {
			yyb3055 = r.CheckBreak()
		}
		if yyb3055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3059 := z.EncBinary()
		_ = yym3059
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3060 := !z.EncBinary()
			yy2arr3060 := z.EncBasicHandle().StructToArray
			var yyq3060 [2]bool
			_, _, _ = yysep3060, yyq3060, yy2arr3060
			const yyr3060 bool = false
			yyq3060[0] = x.Component != ""
			yyq3060[1] = x.Host != ""
			var yynn3060 int
			if yyr3060 || yy2arr3060 {
				r.EncodeArrayStart(2)
			} else {
				yynn3060 = 0
				for _, b := range yyq3060 {
					if b {
						yynn3060++
					}
				}
				r.EncodeMapStart(yynn3060)
				yynn3060 = 0
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3060[0] {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3060[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3060[1] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3060[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3067 := z.DecBinary()
	_ = yym3067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3068 := r.ContainerType()
		if yyct3068 == codecSelferValueTypeMap1234 {
			yyl3068 := r.ReadMapStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3068, d)
			}
		} else if yyct3068 == codecSelferValueTypeArray1234 {
			yyl3068 := r.ReadArrayStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3069Slc
	var yyhl3069 bool = l >= 0
	for yyj3069 := 0; ; yyj3069++ {
		if yyhl3069 {
			if yyj3069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3069Slc = r.DecodeBytes(yys3069Slc, true, true)
		yys3069 := string(yys3069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3069 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3069)
		} // end switch yys3069
	} // end for yyj3069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3072 int
	var yyb3072 bool
	var yyhl3072 bool = l >= 0
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3072++
		if yyhl3072 {
			yyb3072 = yyj3072 > l
		} else {
			yyb3072 = r.CheckBreak()
		}
		if yyb3072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3075 := z.EncBinary()
		_ = yym3075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3076 := !z.EncBinary()
			yy2arr3076 := z.EncBasicHandle().StructToArray
			var yyq3076 [11]bool
			_, _, _ = yysep3076, yyq3076, yy2arr3076
			const yyr3076 bool = false
			yyq3076[0] = x.Kind != ""
			yyq3076[1] = x.APIVersion != ""
			yyq3076[2] = true
			yyq3076[3] = true
			yyq3076[4] = x.Reason != ""
			yyq3076[5] = x.Message != ""
			yyq3076[6] = true
			yyq3076[7] = true
			yyq3076[8] = true
			yyq3076[9] = x.Count != 0
			yyq3076[10] = x.Type != ""
			var yynn3076 int
			if yyr3076 || yy2arr3076 {
				r.EncodeArrayStart(11)
			} else {
				yynn3076 = 0
				for _, b := range yyq3076 {
					if b {
						yynn3076++
					}
				}
				r.EncodeMapStart(yynn3076)
				yynn3076 = 0
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[0] {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[1] {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[2] {
					yy3084 := &x.ObjectMeta
					yy3084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3085 := &x.ObjectMeta
					yy3085.CodecEncodeSelf(e)
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[3] {
					yy3087 := &x.InvolvedObject
					yy3087.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3088 := &x.InvolvedObject
					yy3088.CodecEncodeSelf(e)
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[4] {
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[5] {
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[6] {
					yy3096 := &x.Source
					yy3096.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3097 := &x.Source
					yy3097.CodecEncodeSelf(e)
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[7] {
					yy3099 := &x.FirstTimestamp
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3099) {
					} else if yym3100 {
						z.EncBinaryMarshal(yy3099)
					} else if !yym3100 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3099)
					} else {
						z.EncFallback(yy3099)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3101 := &x.FirstTimestamp
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3101) {
					} else if yym3102 {
						z.EncBinaryMarshal(yy3101)
					} else if !yym3102 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3101)
					} else {
						z.EncFallback(yy3101)
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[8] {
					yy3104 := &x.LastTimestamp
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3104) {
					} else if yym3105 {
						z.EncBinaryMarshal(yy3104)
					} else if !yym3105 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3104)
					} else {
						z.EncFallback(yy3104)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3106 := &x.LastTimestamp
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3106) {
					} else if yym3107 {
						z.EncBinaryMarshal(yy3106)
					} else if !yym3107 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3106)
					} else {
						z.EncFallback(yy3106)
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[9] {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3076[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3076[10] {
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3114 := z.DecBinary()
	_ = yym3114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3115 := r.ContainerType()
		if yyct3115 == codecSelferValueTypeMap1234 {
			yyl3115 := r.ReadMapStart()
			if yyl3115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3115, d)
			}
		} else if yyct3115 == codecSelferValueTypeArray1234 {
			yyl3115 := r.ReadArrayStart()
			if yyl3115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3116Slc
	var yyhl3116 bool = l >= 0
	for yyj3116 := 0; ; yyj3116++ {
		if yyhl3116 {
			if yyj3116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3116Slc = r.DecodeBytes(yys3116Slc, true, true)
		yys3116 := string(yys3116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3116 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3119 := &x.ObjectMeta
				yyv3119.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3120 := &x.InvolvedObject
				yyv3120.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3123 := &x.Source
				yyv3123.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3124 := &x.FirstTimestamp
				yym3125 := z.DecBinary()
				_ = yym3125
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3124) {
				} else if yym3125 {
					z.DecBinaryUnmarshal(yyv3124)
				} else if !yym3125 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3124)
				} else {
					z.DecFallback(yyv3124, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3126 := &x.LastTimestamp
				yym3127 := z.DecBinary()
				_ = yym3127
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3126) {
				} else if yym3127 {
					z.DecBinaryUnmarshal(yyv3126)
				} else if !yym3127 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3126)
				} else {
					z.DecFallback(yyv3126, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3116)
		} // end switch yys3116
	} // end for yyj3116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3130 int
	var yyb3130 bool
	var yyhl3130 bool = l >= 0
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3133 := &x.ObjectMeta
		yyv3133.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3134 := &x.InvolvedObject
		yyv3134.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3137 := &x.Source
		yyv3137.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3138 := &x.FirstTimestamp
		yym3139 := z.DecBinary()
		_ = yym3139
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3138) {
		} else if yym3139 {
			z.DecBinaryUnmarshal(yyv3138)
		} else if !yym3139 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3138)
		} else {
			z.DecFallback(yyv3138, false)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3140 := &x.LastTimestamp
		yym3141 := z.DecBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3140) {
		} else if yym3141 {
			z.DecBinaryUnmarshal(yyv3140)
		} else if !yym3141 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3140)
		} else {
			z.DecFallback(yyv3140, false)
		}
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3130++
		if yyhl3130 {
			yyb3130 = yyj3130 > l
		} else {
			yyb3130 = r.CheckBreak()
		}
		if yyb3130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3144 := z.EncBinary()
		_ = yym3144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3145 := !z.EncBinary()
			yy2arr3145 := z.EncBasicHandle().StructToArray
			var yyq3145 [4]bool
			_, _, _ = yysep3145, yyq3145, yy2arr3145
			const yyr3145 bool = false
			yyq3145[0] = x.Kind != ""
			yyq3145[1] = x.APIVersion != ""
			yyq3145[2] = true
			var yynn3145 int
			if yyr3145 || yy2arr3145 {
				r.EncodeArrayStart(4)
			} else {
				yynn3145 = 1
				for _, b := range yyq3145 {
					if b {
						yynn3145++
					}
				}
				r.EncodeMapStart(yynn3145)
				yynn3145 = 0
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[0] {
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3145[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[1] {
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3145[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[2] {
					yy3153 := &x.ListMeta
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3153) {
					} else {
						z.EncFallback(yy3153)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3145[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3155 := &x.ListMeta
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3155) {
					} else {
						z.EncFallback(yy3155)
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3160 := z.DecBinary()
	_ = yym3160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3161 := r.ContainerType()
		if yyct3161 == codecSelferValueTypeMap1234 {
			yyl3161 := r.ReadMapStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3161, d)
			}
		} else if yyct3161 == codecSelferValueTypeArray1234 {
			yyl3161 := r.ReadArrayStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3162Slc
	var yyhl3162 bool = l >= 0
	for yyj3162 := 0; ; yyj3162++ {
		if yyhl3162 {
			if yyj3162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3162Slc = r.DecodeBytes(yys3162Slc, true, true)
		yys3162 := string(yys3162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3165 := &x.ListMeta
				yym3166 := z.DecBinary()
				_ = yym3166
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3165) {
				} else {
					z.DecFallback(yyv3165, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3167 := &x.Items
				yym3168 := z.DecBinary()
				_ = yym3168
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3167), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3162)
		} // end switch yys3162
	} // end for yyj3162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3169 int
	var yyb3169 bool
	var yyhl3169 bool = l >= 0
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3172 := &x.ListMeta
		yym3173 := z.DecBinary()
		_ = yym3173
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3172) {
		} else {
			z.DecFallback(yyv3172, false)
		}
	}
	yyj3169++
	if yyhl3169 {
		yyb3169 = yyj3169 > l
	} else {
		yyb3169 = r.CheckBreak()
	}
	if yyb3169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3174 := &x.Items
		yym3175 := z.DecBinary()
		_ = yym3175
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3174), d)
		}
	}
	for {
		yyj3169++
		if yyhl3169 {
			yyb3169 = yyj3169 > l
		} else {
			yyb3169 = r.CheckBreak()
		}
		if yyb3169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3176 := z.EncBinary()
		_ = yym3176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3177 := !z.EncBinary()
			yy2arr3177 := z.EncBasicHandle().StructToArray
			var yyq3177 [4]bool
			_, _, _ = yysep3177, yyq3177, yy2arr3177
			const yyr3177 bool = false
			yyq3177[0] = x.Kind != ""
			yyq3177[1] = x.APIVersion != ""
			yyq3177[2] = true
			var yynn3177 int
			if yyr3177 || yy2arr3177 {
				r.EncodeArrayStart(4)
			} else {
				yynn3177 = 1
				for _, b := range yyq3177 {
					if b {
						yynn3177++
					}
				}
				r.EncodeMapStart(yynn3177)
				yynn3177 = 0
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3177[0] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3177[1] {
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3177[2] {
					yy3185 := &x.ListMeta
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3185) {
					} else {
						z.EncFallback(yy3185)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3187 := &x.ListMeta
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3187) {
					} else {
						z.EncFallback(yy3187)
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3177 || yy2arr3177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3193 := r.ContainerType()
		if yyct3193 == codecSelferValueTypeMap1234 {
			yyl3193 := r.ReadMapStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3193, d)
			}
		} else if yyct3193 == codecSelferValueTypeArray1234 {
			yyl3193 := r.ReadArrayStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3194Slc
	var yyhl3194 bool = l >= 0
	for yyj3194 := 0; ; yyj3194++ {
		if yyhl3194 {
			if yyj3194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3194Slc = r.DecodeBytes(yys3194Slc, true, true)
		yys3194 := string(yys3194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3197 := &x.ListMeta
				yym3198 := z.DecBinary()
				_ = yym3198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3197) {
				} else {
					z.DecFallback(yyv3197, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3199 := &x.Items
				yym3200 := z.DecBinary()
				_ = yym3200
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3199), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3194)
		} // end switch yys3194
	} // end for yyj3194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3201 int
	var yyb3201 bool
	var yyhl3201 bool = l >= 0
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3204 := &x.ListMeta
		yym3205 := z.DecBinary()
		_ = yym3205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3204) {
		} else {
			z.DecFallback(yyv3204, false)
		}
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3206 := &x.Items
		yym3207 := z.DecBinary()
		_ = yym3207
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3206), d)
		}
	}
	for {
		yyj3201++
		if yyhl3201 {
			yyb3201 = yyj3201 > l
		} else {
			yyb3201 = r.CheckBreak()
		}
		if yyb3201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3208 := z.EncBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3209 := z.DecBinary()
	_ = yym3209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3210 := z.EncBinary()
		_ = yym3210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3211 := !z.EncBinary()
			yy2arr3211 := z.EncBasicHandle().StructToArray
			var yyq3211 [6]bool
			_, _, _ = yysep3211, yyq3211, yy2arr3211
			const yyr3211 bool = false
			yyq3211[0] = x.Type != ""
			yyq3211[1] = len(x.Max) != 0
			yyq3211[2] = len(x.Min) != 0
			yyq3211[3] = len(x.Default) != 0
			yyq3211[4] = len(x.DefaultRequest) != 0
			yyq3211[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3211 int
			if yyr3211 || yy2arr3211 {
				r.EncodeArrayStart(6)
			} else {
				yynn3211 = 0
				for _, b := range yyq3211 {
					if b {
						yynn3211++
					}
				}
				r.EncodeMapStart(yynn3211)
				yynn3211 = 0
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3211[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3211[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3211[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3211[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3211[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3211[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3211[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3211[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3211[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3211[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3218 := z.DecBinary()
	_ = yym3218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3219 := r.ContainerType()
		if yyct3219 == codecSelferValueTypeMap1234 {
			yyl3219 := r.ReadMapStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3219, d)
			}
		} else if yyct3219 == codecSelferValueTypeArray1234 {
			yyl3219 := r.ReadArrayStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3220Slc
	var yyhl3220 bool = l >= 0
	for yyj3220 := 0; ; yyj3220++ {
		if yyhl3220 {
			if yyj3220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3220Slc = r.DecodeBytes(yys3220Slc, true, true)
		yys3220 := string(yys3220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3220 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3222 := &x.Max
				yyv3222.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3223 := &x.Min
				yyv3223.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3224 := &x.Default
				yyv3224.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3225 := &x.DefaultRequest
				yyv3225.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3226 := &x.MaxLimitRequestRatio
				yyv3226.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3220)
		} // end switch yys3220
	} // end for yyj3220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3227 int
	var yyb3227 bool
	var yyhl3227 bool = l >= 0
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3229 := &x.Max
		yyv3229.CodecDecodeSelf(d)
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3230 := &x.Min
		yyv3230.CodecDecodeSelf(d)
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3231 := &x.Default
		yyv3231.CodecDecodeSelf(d)
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3232 := &x.DefaultRequest
		yyv3232.CodecDecodeSelf(d)
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3233 := &x.MaxLimitRequestRatio
		yyv3233.CodecDecodeSelf(d)
	}
	for {
		yyj3227++
		if yyhl3227 {
			yyb3227 = yyj3227 > l
		} else {
			yyb3227 = r.CheckBreak()
		}
		if yyb3227 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3227-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3234 := z.EncBinary()
		_ = yym3234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3235 := !z.EncBinary()
			yy2arr3235 := z.EncBasicHandle().StructToArray
			var yyq3235 [1]bool
			_, _, _ = yysep3235, yyq3235, yy2arr3235
			const yyr3235 bool = false
			var yynn3235 int
			if yyr3235 || yy2arr3235 {
				r.EncodeArrayStart(1)
			} else {
				yynn3235 = 1
				for _, b := range yyq3235 {
					if b {
						yynn3235++
					}
				}
				r.EncodeMapStart(yynn3235)
				yynn3235 = 0
			}
			if yyr3235 || yy2arr3235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3235 || yy2arr3235 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3239 := z.DecBinary()
	_ = yym3239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3240 := r.ContainerType()
		if yyct3240 == codecSelferValueTypeMap1234 {
			yyl3240 := r.ReadMapStart()
			if yyl3240 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3240, d)
			}
		} else if yyct3240 == codecSelferValueTypeArray1234 {
			yyl3240 := r.ReadArrayStart()
			if yyl3240 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3241Slc
	var yyhl3241 bool = l >= 0
	for yyj3241 := 0; ; yyj3241++ {
		if yyhl3241 {
			if yyj3241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3241Slc = r.DecodeBytes(yys3241Slc, true, true)
		yys3241 := string(yys3241Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3241 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3242 := &x.Limits
				yym3243 := z.DecBinary()
				_ = yym3243
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3242), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3241)
		} // end switch yys3241
	} // end for yyj3241
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3244 int
	var yyb3244 bool
	var yyhl3244 bool = l >= 0
	yyj3244++
	if yyhl3244 {
		yyb3244 = yyj3244 > l
	} else {
		yyb3244 = r.CheckBreak()
	}
	if yyb3244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3245 := &x.Limits
		yym3246 := z.DecBinary()
		_ = yym3246
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3245), d)
		}
	}
	for {
		yyj3244++
		if yyhl3244 {
			yyb3244 = yyj3244 > l
		} else {
			yyb3244 = r.CheckBreak()
		}
		if yyb3244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3247 := z.EncBinary()
		_ = yym3247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3248 := !z.EncBinary()
			yy2arr3248 := z.EncBasicHandle().StructToArray
			var yyq3248 [4]bool
			_, _, _ = yysep3248, yyq3248, yy2arr3248
			const yyr3248 bool = false
			yyq3248[0] = x.Kind != ""
			yyq3248[1] = x.APIVersion != ""
			yyq3248[2] = true
			yyq3248[3] = true
			var yynn3248 int
			if yyr3248 || yy2arr3248 {
				r.EncodeArrayStart(4)
			} else {
				yynn3248 = 0
				for _, b := range yyq3248 {
					if b {
						yynn3248++
					}
				}
				r.EncodeMapStart(yynn3248)
				yynn3248 = 0
			}
			if yyr3248 || yy2arr3248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3248[0] {
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3248 || yy2arr3248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3248[1] {
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3248 || yy2arr3248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3248[2] {
					yy3256 := &x.ObjectMeta
					yy3256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3257 := &x.ObjectMeta
					yy3257.CodecEncodeSelf(e)
				}
			}
			if yyr3248 || yy2arr3248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3248[3] {
					yy3259 := &x.Spec
					yy3259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3260 := &x.Spec
					yy3260.CodecEncodeSelf(e)
				}
			}
			if yyr3248 || yy2arr3248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3261 := z.DecBinary()
	_ = yym3261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3262 := r.ContainerType()
		if yyct3262 == codecSelferValueTypeMap1234 {
			yyl3262 := r.ReadMapStart()
			if yyl3262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3262, d)
			}
		} else if yyct3262 == codecSelferValueTypeArray1234 {
			yyl3262 := r.ReadArrayStart()
			if yyl3262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3263Slc
	var yyhl3263 bool = l >= 0
	for yyj3263 := 0; ; yyj3263++ {
		if yyhl3263 {
			if yyj3263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3263Slc = r.DecodeBytes(yys3263Slc, true, true)
		yys3263 := string(yys3263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3263 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3266 := &x.ObjectMeta
				yyv3266.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3267 := &x.Spec
				yyv3267.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3263)
		} // end switch yys3263
	} // end for yyj3263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3268 int
	var yyb3268 bool
	var yyhl3268 bool = l >= 0
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3271 := &x.ObjectMeta
		yyv3271.CodecDecodeSelf(d)
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3272 := &x.Spec
		yyv3272.CodecDecodeSelf(d)
	}
	for {
		yyj3268++
		if yyhl3268 {
			yyb3268 = yyj3268 > l
		} else {
			yyb3268 = r.CheckBreak()
		}
		if yyb3268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3273 := z.EncBinary()
		_ = yym3273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3274 := !z.EncBinary()
			yy2arr3274 := z.EncBasicHandle().StructToArray
			var yyq3274 [4]bool
			_, _, _ = yysep3274, yyq3274, yy2arr3274
			const yyr3274 bool = false
			yyq3274[0] = x.Kind != ""
			yyq3274[1] = x.APIVersion != ""
			yyq3274[2] = true
			var yynn3274 int
			if yyr3274 || yy2arr3274 {
				r.EncodeArrayStart(4)
			} else {
				yynn3274 = 1
				for _, b := range yyq3274 {
					if b {
						yynn3274++
					}
				}
				r.EncodeMapStart(yynn3274)
				yynn3274 = 0
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[0] {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3274[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[1] {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3274[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3274[2] {
					yy3282 := &x.ListMeta
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3282) {
					} else {
						z.EncFallback(yy3282)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3274[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3284 := &x.ListMeta
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3284) {
					} else {
						z.EncFallback(yy3284)
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3274 || yy2arr3274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3289 := z.DecBinary()
	_ = yym3289
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3290 := r.ContainerType()
		if yyct3290 == codecSelferValueTypeMap1234 {
			yyl3290 := r.ReadMapStart()
			if yyl3290 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3290, d)
			}
		} else if yyct3290 == codecSelferValueTypeArray1234 {
			yyl3290 := r.ReadArrayStart()
			if yyl3290 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3290, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3291Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3291Slc
	var yyhl3291 bool = l >= 0
	for yyj3291 := 0; ; yyj3291++ {
		if yyhl3291 {
			if yyj3291 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3291Slc = r.DecodeBytes(yys3291Slc, true, true)
		yys3291 := string(yys3291Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3291 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3294 := &x.ListMeta
				yym3295 := z.DecBinary()
				_ = yym3295
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3294) {
				} else {
					z.DecFallback(yyv3294, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3296 := &x.Items
				yym3297 := z.DecBinary()
				_ = yym3297
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3296), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3291)
		} // end switch yys3291
	} // end for yyj3291
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3298 int
	var yyb3298 bool
	var yyhl3298 bool = l >= 0
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3301 := &x.ListMeta
		yym3302 := z.DecBinary()
		_ = yym3302
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3301) {
		} else {
			z.DecFallback(yyv3301, false)
		}
	}
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3303 := &x.Items
		yym3304 := z.DecBinary()
		_ = yym3304
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3303), d)
		}
	}
	for {
		yyj3298++
		if yyhl3298 {
			yyb3298 = yyj3298 > l
		} else {
			yyb3298 = r.CheckBreak()
		}
		if yyb3298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3305 := z.EncBinary()
		_ = yym3305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3306 := !z.EncBinary()
			yy2arr3306 := z.EncBasicHandle().StructToArray
			var yyq3306 [1]bool
			_, _, _ = yysep3306, yyq3306, yy2arr3306
			const yyr3306 bool = false
			yyq3306[0] = len(x.Hard) != 0
			var yynn3306 int
			if yyr3306 || yy2arr3306 {
				r.EncodeArrayStart(1)
			} else {
				yynn3306 = 0
				for _, b := range yyq3306 {
					if b {
						yynn3306++
					}
				}
				r.EncodeMapStart(yynn3306)
				yynn3306 = 0
			}
			if yyr3306 || yy2arr3306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3306[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3308 := z.DecBinary()
	_ = yym3308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3309 := r.ContainerType()
		if yyct3309 == codecSelferValueTypeMap1234 {
			yyl3309 := r.ReadMapStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3309, d)
			}
		} else if yyct3309 == codecSelferValueTypeArray1234 {
			yyl3309 := r.ReadArrayStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3310Slc
	var yyhl3310 bool = l >= 0
	for yyj3310 := 0; ; yyj3310++ {
		if yyhl3310 {
			if yyj3310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3310Slc = r.DecodeBytes(yys3310Slc, true, true)
		yys3310 := string(yys3310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3310 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3311 := &x.Hard
				yyv3311.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3310)
		} // end switch yys3310
	} // end for yyj3310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3312 int
	var yyb3312 bool
	var yyhl3312 bool = l >= 0
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3313 := &x.Hard
		yyv3313.CodecDecodeSelf(d)
	}
	for {
		yyj3312++
		if yyhl3312 {
			yyb3312 = yyj3312 > l
		} else {
			yyb3312 = r.CheckBreak()
		}
		if yyb3312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3314 := z.EncBinary()
		_ = yym3314
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3315 := !z.EncBinary()
			yy2arr3315 := z.EncBasicHandle().StructToArray
			var yyq3315 [2]bool
			_, _, _ = yysep3315, yyq3315, yy2arr3315
			const yyr3315 bool = false
			yyq3315[0] = len(x.Hard) != 0
			yyq3315[1] = len(x.Used) != 0
			var yynn3315 int
			if yyr3315 || yy2arr3315 {
				r.EncodeArrayStart(2)
			} else {
				yynn3315 = 0
				for _, b := range yyq3315 {
					if b {
						yynn3315++
					}
				}
				r.EncodeMapStart(yynn3315)
				yynn3315 = 0
			}
			if yyr3315 || yy2arr3315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3315[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3315[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3315 || yy2arr3315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3315[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3315[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3315 || yy2arr3315 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3318 := z.DecBinary()
	_ = yym3318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3319 := r.ContainerType()
		if yyct3319 == codecSelferValueTypeMap1234 {
			yyl3319 := r.ReadMapStart()
			if yyl3319 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3319, d)
			}
		} else if yyct3319 == codecSelferValueTypeArray1234 {
			yyl3319 := r.ReadArrayStart()
			if yyl3319 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3319, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3320Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3320Slc
	var yyhl3320 bool = l >= 0
	for yyj3320 := 0; ; yyj3320++ {
		if yyhl3320 {
			if yyj3320 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3320Slc = r.DecodeBytes(yys3320Slc, true, true)
		yys3320 := string(yys3320Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3320 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3321 := &x.Hard
				yyv3321.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3322 := &x.Used
				yyv3322.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3320)
		} // end switch yys3320
	} // end for yyj3320
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3323 int
	var yyb3323 bool
	var yyhl3323 bool = l >= 0
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3324 := &x.Hard
		yyv3324.CodecDecodeSelf(d)
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3325 := &x.Used
		yyv3325.CodecDecodeSelf(d)
	}
	for {
		yyj3323++
		if yyhl3323 {
			yyb3323 = yyj3323 > l
		} else {
			yyb3323 = r.CheckBreak()
		}
		if yyb3323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3326 := z.EncBinary()
		_ = yym3326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3327 := !z.EncBinary()
			yy2arr3327 := z.EncBasicHandle().StructToArray
			var yyq3327 [5]bool
			_, _, _ = yysep3327, yyq3327, yy2arr3327
			const yyr3327 bool = false
			yyq3327[0] = x.Kind != ""
			yyq3327[1] = x.APIVersion != ""
			yyq3327[2] = true
			yyq3327[3] = true
			yyq3327[4] = true
			var yynn3327 int
			if yyr3327 || yy2arr3327 {
				r.EncodeArrayStart(5)
			} else {
				yynn3327 = 0
				for _, b := range yyq3327 {
					if b {
						yynn3327++
					}
				}
				r.EncodeMapStart(yynn3327)
				yynn3327 = 0
			}
			if yyr3327 || yy2arr3327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3327[0] {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3327 || yy2arr3327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3327[1] {
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3327 || yy2arr3327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3327[2] {
					yy3335 := &x.ObjectMeta
					yy3335.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3336 := &x.ObjectMeta
					yy3336.CodecEncodeSelf(e)
				}
			}
			if yyr3327 || yy2arr3327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3327[3] {
					yy3338 := &x.Spec
					yy3338.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3327[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3339 := &x.Spec
					yy3339.CodecEncodeSelf(e)
				}
			}
			if yyr3327 || yy2arr3327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3327[4] {
					yy3341 := &x.Status
					yy3341.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3327[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3342 := &x.Status
					yy3342.CodecEncodeSelf(e)
				}
			}
			if yyr3327 || yy2arr3327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3343 := z.DecBinary()
	_ = yym3343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3344 := r.ContainerType()
		if yyct3344 == codecSelferValueTypeMap1234 {
			yyl3344 := r.ReadMapStart()
			if yyl3344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3344, d)
			}
		} else if yyct3344 == codecSelferValueTypeArray1234 {
			yyl3344 := r.ReadArrayStart()
			if yyl3344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3345Slc
	var yyhl3345 bool = l >= 0
	for yyj3345 := 0; ; yyj3345++ {
		if yyhl3345 {
			if yyj3345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3345Slc = r.DecodeBytes(yys3345Slc, true, true)
		yys3345 := string(yys3345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3345 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3348 := &x.ObjectMeta
				yyv3348.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3349 := &x.Spec
				yyv3349.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3350 := &x.Status
				yyv3350.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3345)
		} // end switch yys3345
	} // end for yyj3345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3351 int
	var yyb3351 bool
	var yyhl3351 bool = l >= 0
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3354 := &x.ObjectMeta
		yyv3354.CodecDecodeSelf(d)
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3355 := &x.Spec
		yyv3355.CodecDecodeSelf(d)
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3356 := &x.Status
		yyv3356.CodecDecodeSelf(d)
	}
	for {
		yyj3351++
		if yyhl3351 {
			yyb3351 = yyj3351 > l
		} else {
			yyb3351 = r.CheckBreak()
		}
		if yyb3351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3357 := z.EncBinary()
		_ = yym3357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3358 := !z.EncBinary()
			yy2arr3358 := z.EncBasicHandle().StructToArray
			var yyq3358 [4]bool
			_, _, _ = yysep3358, yyq3358, yy2arr3358
			const yyr3358 bool = false
			yyq3358[0] = x.Kind != ""
			yyq3358[1] = x.APIVersion != ""
			yyq3358[2] = true
			var yynn3358 int
			if yyr3358 || yy2arr3358 {
				r.EncodeArrayStart(4)
			} else {
				yynn3358 = 1
				for _, b := range yyq3358 {
					if b {
						yynn3358++
					}
				}
				r.EncodeMapStart(yynn3358)
				yynn3358 = 0
			}
			if yyr3358 || yy2arr3358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3358[0] {
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3358 || yy2arr3358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3358[1] {
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3358 || yy2arr3358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3358[2] {
					yy3366 := &x.ListMeta
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3366) {
					} else {
						z.EncFallback(yy3366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3368 := &x.ListMeta
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3368) {
					} else {
						z.EncFallback(yy3368)
					}
				}
			}
			if yyr3358 || yy2arr3358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3358 || yy2arr3358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3373 := z.DecBinary()
	_ = yym3373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3374 := r.ContainerType()
		if yyct3374 == codecSelferValueTypeMap1234 {
			yyl3374 := r.ReadMapStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3374, d)
			}
		} else if yyct3374 == codecSelferValueTypeArray1234 {
			yyl3374 := r.ReadArrayStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3375Slc
	var yyhl3375 bool = l >= 0
	for yyj3375 := 0; ; yyj3375++ {
		if yyhl3375 {
			if yyj3375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3375Slc = r.DecodeBytes(yys3375Slc, true, true)
		yys3375 := string(yys3375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3378 := &x.ListMeta
				yym3379 := z.DecBinary()
				_ = yym3379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3378) {
				} else {
					z.DecFallback(yyv3378, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3380 := &x.Items
				yym3381 := z.DecBinary()
				_ = yym3381
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3380), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3375)
		} // end switch yys3375
	} // end for yyj3375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3382 int
	var yyb3382 bool
	var yyhl3382 bool = l >= 0
	yyj3382++
	if yyhl3382 {
		yyb3382 = yyj3382 > l
	} else {
		yyb3382 = r.CheckBreak()
	}
	if yyb3382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3382++
	if yyhl3382 {
		yyb3382 = yyj3382 > l
	} else {
		yyb3382 = r.CheckBreak()
	}
	if yyb3382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3382++
	if yyhl3382 {
		yyb3382 = yyj3382 > l
	} else {
		yyb3382 = r.CheckBreak()
	}
	if yyb3382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3385 := &x.ListMeta
		yym3386 := z.DecBinary()
		_ = yym3386
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3385) {
		} else {
			z.DecFallback(yyv3385, false)
		}
	}
	yyj3382++
	if yyhl3382 {
		yyb3382 = yyj3382 > l
	} else {
		yyb3382 = r.CheckBreak()
	}
	if yyb3382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3387 := &x.Items
		yym3388 := z.DecBinary()
		_ = yym3388
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3387), d)
		}
	}
	for {
		yyj3382++
		if yyhl3382 {
			yyb3382 = yyj3382 > l
		} else {
			yyb3382 = r.CheckBreak()
		}
		if yyb3382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3389 := z.EncBinary()
		_ = yym3389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3390 := !z.EncBinary()
			yy2arr3390 := z.EncBasicHandle().StructToArray
			var yyq3390 [5]bool
			_, _, _ = yysep3390, yyq3390, yy2arr3390
			const yyr3390 bool = false
			yyq3390[0] = x.Kind != ""
			yyq3390[1] = x.APIVersion != ""
			yyq3390[2] = true
			yyq3390[3] = len(x.Data) != 0
			yyq3390[4] = x.Type != ""
			var yynn3390 int
			if yyr3390 || yy2arr3390 {
				r.EncodeArrayStart(5)
			} else {
				yynn3390 = 0
				for _, b := range yyq3390 {
					if b {
						yynn3390++
					}
				}
				r.EncodeMapStart(yynn3390)
				yynn3390 = 0
			}
			if yyr3390 || yy2arr3390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3390[0] {
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3390[1] {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3390[2] {
					yy3398 := &x.ObjectMeta
					yy3398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3399 := &x.ObjectMeta
					yy3399.CodecEncodeSelf(e)
				}
			}
			if yyr3390 || yy2arr3390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3390[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3401 := z.EncBinary()
						_ = yym3401
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3402 := z.EncBinary()
						_ = yym3402
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3390[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3390 || yy2arr3390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3404 := z.DecBinary()
	_ = yym3404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3405 := r.ContainerType()
		if yyct3405 == codecSelferValueTypeMap1234 {
			yyl3405 := r.ReadMapStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3405, d)
			}
		} else if yyct3405 == codecSelferValueTypeArray1234 {
			yyl3405 := r.ReadArrayStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3406Slc
	var yyhl3406 bool = l >= 0
	for yyj3406 := 0; ; yyj3406++ {
		if yyhl3406 {
			if yyj3406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3406Slc = r.DecodeBytes(yys3406Slc, true, true)
		yys3406 := string(yys3406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3406 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3409 := &x.ObjectMeta
				yyv3409.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3410 := &x.Data
				yym3411 := z.DecBinary()
				_ = yym3411
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3410), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3406)
		} // end switch yys3406
	} // end for yyj3406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3413 int
	var yyb3413 bool
	var yyhl3413 bool = l >= 0
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3416 := &x.ObjectMeta
		yyv3416.CodecDecodeSelf(d)
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3417 := &x.Data
		yym3418 := z.DecBinary()
		_ = yym3418
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3417), d)
		}
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3413++
		if yyhl3413 {
			yyb3413 = yyj3413 > l
		} else {
			yyb3413 = r.CheckBreak()
		}
		if yyb3413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3420 := z.EncBinary()
	_ = yym3420
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3421 := z.DecBinary()
	_ = yym3421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3422 := z.EncBinary()
		_ = yym3422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3423 := !z.EncBinary()
			yy2arr3423 := z.EncBasicHandle().StructToArray
			var yyq3423 [4]bool
			_, _, _ = yysep3423, yyq3423, yy2arr3423
			const yyr3423 bool = false
			yyq3423[0] = x.Kind != ""
			yyq3423[1] = x.APIVersion != ""
			yyq3423[2] = true
			var yynn3423 int
			if yyr3423 || yy2arr3423 {
				r.EncodeArrayStart(4)
			} else {
				yynn3423 = 1
				for _, b := range yyq3423 {
					if b {
						yynn3423++
					}
				}
				r.EncodeMapStart(yynn3423)
				yynn3423 = 0
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[0] {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[1] {
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[2] {
					yy3431 := &x.ListMeta
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3431) {
					} else {
						z.EncFallback(yy3431)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3433 := &x.ListMeta
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3433) {
					} else {
						z.EncFallback(yy3433)
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3438 := z.DecBinary()
	_ = yym3438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3439 := r.ContainerType()
		if yyct3439 == codecSelferValueTypeMap1234 {
			yyl3439 := r.ReadMapStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3439, d)
			}
		} else if yyct3439 == codecSelferValueTypeArray1234 {
			yyl3439 := r.ReadArrayStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3440Slc
	var yyhl3440 bool = l >= 0
	for yyj3440 := 0; ; yyj3440++ {
		if yyhl3440 {
			if yyj3440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3440Slc = r.DecodeBytes(yys3440Slc, true, true)
		yys3440 := string(yys3440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3443 := &x.ListMeta
				yym3444 := z.DecBinary()
				_ = yym3444
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3443) {
				} else {
					z.DecFallback(yyv3443, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3445 := &x.Items
				yym3446 := z.DecBinary()
				_ = yym3446
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3445), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3440)
		} // end switch yys3440
	} // end for yyj3440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3447 int
	var yyb3447 bool
	var yyhl3447 bool = l >= 0
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3450 := &x.ListMeta
		yym3451 := z.DecBinary()
		_ = yym3451
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3450) {
		} else {
			z.DecFallback(yyv3450, false)
		}
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3452 := &x.Items
		yym3453 := z.DecBinary()
		_ = yym3453
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3452), d)
		}
	}
	for {
		yyj3447++
		if yyhl3447 {
			yyb3447 = yyj3447 > l
		} else {
			yyb3447 = r.CheckBreak()
		}
		if yyb3447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3454 := z.EncBinary()
	_ = yym3454
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3455 := z.DecBinary()
	_ = yym3455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3456 := z.EncBinary()
	_ = yym3456
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3457 := z.DecBinary()
	_ = yym3457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3458 := z.EncBinary()
		_ = yym3458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3459 := !z.EncBinary()
			yy2arr3459 := z.EncBasicHandle().StructToArray
			var yyq3459 [4]bool
			_, _, _ = yysep3459, yyq3459, yy2arr3459
			const yyr3459 bool = false
			yyq3459[2] = x.Message != ""
			yyq3459[3] = x.Error != ""
			var yynn3459 int
			if yyr3459 || yy2arr3459 {
				r.EncodeArrayStart(4)
			} else {
				yynn3459 = 2
				for _, b := range yyq3459 {
					if b {
						yynn3459++
					}
				}
				r.EncodeMapStart(yynn3459)
				yynn3459 = 0
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[2] {
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[3] {
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3459[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3468 := z.DecBinary()
	_ = yym3468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3469 := r.ContainerType()
		if yyct3469 == codecSelferValueTypeMap1234 {
			yyl3469 := r.ReadMapStart()
			if yyl3469 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3469, d)
			}
		} else if yyct3469 == codecSelferValueTypeArray1234 {
			yyl3469 := r.ReadArrayStart()
			if yyl3469 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3469, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3470Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3470Slc
	var yyhl3470 bool = l >= 0
	for yyj3470 := 0; ; yyj3470++ {
		if yyhl3470 {
			if yyj3470 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3470Slc = r.DecodeBytes(yys3470Slc, true, true)
		yys3470 := string(yys3470Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3470 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3470)
		} // end switch yys3470
	} // end for yyj3470
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3475 int
	var yyb3475 bool
	var yyhl3475 bool = l >= 0
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3475++
		if yyhl3475 {
			yyb3475 = yyj3475 > l
		} else {
			yyb3475 = r.CheckBreak()
		}
		if yyb3475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3480 := z.EncBinary()
		_ = yym3480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3481 := !z.EncBinary()
			yy2arr3481 := z.EncBasicHandle().StructToArray
			var yyq3481 [4]bool
			_, _, _ = yysep3481, yyq3481, yy2arr3481
			const yyr3481 bool = false
			yyq3481[0] = x.Kind != ""
			yyq3481[1] = x.APIVersion != ""
			yyq3481[2] = true
			yyq3481[3] = len(x.Conditions) != 0
			var yynn3481 int
			if yyr3481 || yy2arr3481 {
				r.EncodeArrayStart(4)
			} else {
				yynn3481 = 0
				for _, b := range yyq3481 {
					if b {
						yynn3481++
					}
				}
				r.EncodeMapStart(yynn3481)
				yynn3481 = 0
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3481[0] {
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3481[1] {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3481[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3481[2] {
					yy3489 := &x.ObjectMeta
					yy3489.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3481[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3490 := &x.ObjectMeta
					yy3490.CodecEncodeSelf(e)
				}
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3481[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3492 := z.EncBinary()
						_ = yym3492
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3481[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3493 := z.EncBinary()
						_ = yym3493
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3481 || yy2arr3481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3494 := z.DecBinary()
	_ = yym3494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3495 := r.ContainerType()
		if yyct3495 == codecSelferValueTypeMap1234 {
			yyl3495 := r.ReadMapStart()
			if yyl3495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3495, d)
			}
		} else if yyct3495 == codecSelferValueTypeArray1234 {
			yyl3495 := r.ReadArrayStart()
			if yyl3495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3496Slc
	var yyhl3496 bool = l >= 0
	for yyj3496 := 0; ; yyj3496++ {
		if yyhl3496 {
			if yyj3496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3496Slc = r.DecodeBytes(yys3496Slc, true, true)
		yys3496 := string(yys3496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3496 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3499 := &x.ObjectMeta
				yyv3499.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3500 := &x.Conditions
				yym3501 := z.DecBinary()
				_ = yym3501
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3496)
		} // end switch yys3496
	} // end for yyj3496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3502 int
	var yyb3502 bool
	var yyhl3502 bool = l >= 0
	yyj3502++
	if yyhl3502 {
		yyb3502 = yyj3502 > l
	} else {
		yyb3502 = r.CheckBreak()
	}
	if yyb3502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3502++
	if yyhl3502 {
		yyb3502 = yyj3502 > l
	} else {
		yyb3502 = r.CheckBreak()
	}
	if yyb3502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3502++
	if yyhl3502 {
		yyb3502 = yyj3502 > l
	} else {
		yyb3502 = r.CheckBreak()
	}
	if yyb3502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3505 := &x.ObjectMeta
		yyv3505.CodecDecodeSelf(d)
	}
	yyj3502++
	if yyhl3502 {
		yyb3502 = yyj3502 > l
	} else {
		yyb3502 = r.CheckBreak()
	}
	if yyb3502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3506 := &x.Conditions
		yym3507 := z.DecBinary()
		_ = yym3507
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3506), d)
		}
	}
	for {
		yyj3502++
		if yyhl3502 {
			yyb3502 = yyj3502 > l
		} else {
			yyb3502 = r.CheckBreak()
		}
		if yyb3502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3508 := z.EncBinary()
		_ = yym3508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3509 := !z.EncBinary()
			yy2arr3509 := z.EncBasicHandle().StructToArray
			var yyq3509 [4]bool
			_, _, _ = yysep3509, yyq3509, yy2arr3509
			const yyr3509 bool = false
			yyq3509[0] = x.Kind != ""
			yyq3509[1] = x.APIVersion != ""
			yyq3509[2] = true
			var yynn3509 int
			if yyr3509 || yy2arr3509 {
				r.EncodeArrayStart(4)
			} else {
				yynn3509 = 1
				for _, b := range yyq3509 {
					if b {
						yynn3509++
					}
				}
				r.EncodeMapStart(yynn3509)
				yynn3509 = 0
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3509[0] {
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3509[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3512 := z.EncBinary()
					_ = yym3512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3509[1] {
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3509[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3515 := z.EncBinary()
					_ = yym3515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3509[2] {
					yy3517 := &x.ListMeta
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3517) {
					} else {
						z.EncFallback(yy3517)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3509[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3519 := &x.ListMeta
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3519) {
					} else {
						z.EncFallback(yy3519)
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3509 || yy2arr3509 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3524 := z.DecBinary()
	_ = yym3524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3525 := r.ContainerType()
		if yyct3525 == codecSelferValueTypeMap1234 {
			yyl3525 := r.ReadMapStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3525, d)
			}
		} else if yyct3525 == codecSelferValueTypeArray1234 {
			yyl3525 := r.ReadArrayStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3526Slc
	var yyhl3526 bool = l >= 0
	for yyj3526 := 0; ; yyj3526++ {
		if yyhl3526 {
			if yyj3526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3526Slc = r.DecodeBytes(yys3526Slc, true, true)
		yys3526 := string(yys3526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3529 := &x.ListMeta
				yym3530 := z.DecBinary()
				_ = yym3530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3529) {
				} else {
					z.DecFallback(yyv3529, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3531 := &x.Items
				yym3532 := z.DecBinary()
				_ = yym3532
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3531), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3526)
		} // end switch yys3526
	} // end for yyj3526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3533 int
	var yyb3533 bool
	var yyhl3533 bool = l >= 0
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3536 := &x.ListMeta
		yym3537 := z.DecBinary()
		_ = yym3537
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3536) {
		} else {
			z.DecFallback(yyv3536, false)
		}
	}
	yyj3533++
	if yyhl3533 {
		yyb3533 = yyj3533 > l
	} else {
		yyb3533 = r.CheckBreak()
	}
	if yyb3533 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3538 := &x.Items
		yym3539 := z.DecBinary()
		_ = yym3539
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3538), d)
		}
	}
	for {
		yyj3533++
		if yyhl3533 {
			yyb3533 = yyj3533 > l
		} else {
			yyb3533 = r.CheckBreak()
		}
		if yyb3533 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3533-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3540 := z.EncBinary()
		_ = yym3540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3541 := !z.EncBinary()
			yy2arr3541 := z.EncBasicHandle().StructToArray
			var yyq3541 [5]bool
			_, _, _ = yysep3541, yyq3541, yy2arr3541
			const yyr3541 bool = false
			yyq3541[0] = x.Capabilities != nil
			yyq3541[1] = x.Privileged != nil
			yyq3541[2] = x.SELinuxOptions != nil
			yyq3541[3] = x.RunAsUser != nil
			yyq3541[4] = x.RunAsNonRoot != nil
			var yynn3541 int
			if yyr3541 || yy2arr3541 {
				r.EncodeArrayStart(5)
			} else {
				yynn3541 = 0
				for _, b := range yyq3541 {
					if b {
						yynn3541++
					}
				}
				r.EncodeMapStart(yynn3541)
				yynn3541 = 0
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3541[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3544 := *x.Privileged
						yym3545 := z.EncBinary()
						_ = yym3545
						if false {
						} else {
							r.EncodeBool(bool(yy3544))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3541[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3546 := *x.Privileged
						yym3547 := z.EncBinary()
						_ = yym3547
						if false {
						} else {
							r.EncodeBool(bool(yy3546))
						}
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3541[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3550 := *x.RunAsUser
						yym3551 := z.EncBinary()
						_ = yym3551
						if false {
						} else {
							r.EncodeInt(int64(yy3550))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3541[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3552 := *x.RunAsUser
						yym3553 := z.EncBinary()
						_ = yym3553
						if false {
						} else {
							r.EncodeInt(int64(yy3552))
						}
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3555 := *x.RunAsNonRoot
						yym3556 := z.EncBinary()
						_ = yym3556
						if false {
						} else {
							r.EncodeBool(bool(yy3555))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3541[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3557 := *x.RunAsNonRoot
						yym3558 := z.EncBinary()
						_ = yym3558
						if false {
						} else {
							r.EncodeBool(bool(yy3557))
						}
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3559 := z.DecBinary()
	_ = yym3559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3560 := r.ContainerType()
		if yyct3560 == codecSelferValueTypeMap1234 {
			yyl3560 := r.ReadMapStart()
			if yyl3560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3560, d)
			}
		} else if yyct3560 == codecSelferValueTypeArray1234 {
			yyl3560 := r.ReadArrayStart()
			if yyl3560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3561Slc
	var yyhl3561 bool = l >= 0
	for yyj3561 := 0; ; yyj3561++ {
		if yyhl3561 {
			if yyj3561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3561Slc = r.DecodeBytes(yys3561Slc, true, true)
		yys3561 := string(yys3561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3561 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3564 := z.DecBinary()
				_ = yym3564
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3567 := z.DecBinary()
				_ = yym3567
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3569 := z.DecBinary()
				_ = yym3569
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3561)
		} // end switch yys3561
	} // end for yyj3561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3570 int
	var yyb3570 bool
	var yyhl3570 bool = l >= 0
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3573 := z.DecBinary()
		_ = yym3573
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3576 := z.DecBinary()
		_ = yym3576
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3578 := z.DecBinary()
		_ = yym3578
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3570++
		if yyhl3570 {
			yyb3570 = yyj3570 > l
		} else {
			yyb3570 = r.CheckBreak()
		}
		if yyb3570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3579 := z.EncBinary()
		_ = yym3579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3580 := !z.EncBinary()
			yy2arr3580 := z.EncBasicHandle().StructToArray
			var yyq3580 [4]bool
			_, _, _ = yysep3580, yyq3580, yy2arr3580
			const yyr3580 bool = false
			yyq3580[0] = x.User != ""
			yyq3580[1] = x.Role != ""
			yyq3580[2] = x.Type != ""
			yyq3580[3] = x.Level != ""
			var yynn3580 int
			if yyr3580 || yy2arr3580 {
				r.EncodeArrayStart(4)
			} else {
				yynn3580 = 0
				for _, b := range yyq3580 {
					if b {
						yynn3580++
					}
				}
				r.EncodeMapStart(yynn3580)
				yynn3580 = 0
			}
			if yyr3580 || yy2arr3580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3580[0] {
					yym3582 := z.EncBinary()
					_ = yym3582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3580[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3580 || yy2arr3580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3580[1] {
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3580[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3586 := z.EncBinary()
					_ = yym3586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3580 || yy2arr3580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3580[2] {
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3580[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3580 || yy2arr3580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3580[3] {
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3580[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3580 || yy2arr3580 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3593 := z.DecBinary()
	_ = yym3593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3594 := r.ContainerType()
		if yyct3594 == codecSelferValueTypeMap1234 {
			yyl3594 := r.ReadMapStart()
			if yyl3594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3594, d)
			}
		} else if yyct3594 == codecSelferValueTypeArray1234 {
			yyl3594 := r.ReadArrayStart()
			if yyl3594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3595Slc
	var yyhl3595 bool = l >= 0
	for yyj3595 := 0; ; yyj3595++ {
		if yyhl3595 {
			if yyj3595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3595Slc = r.DecodeBytes(yys3595Slc, true, true)
		yys3595 := string(yys3595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3595 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3595)
		} // end switch yys3595
	} // end for yyj3595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3600 int
	var yyb3600 bool
	var yyhl3600 bool = l >= 0
	yyj3600++
	if yyhl3600 {
		yyb3600 = yyj3600 > l
	} else {
		yyb3600 = r.CheckBreak()
	}
	if yyb3600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3600++
	if yyhl3600 {
		yyb3600 = yyj3600 > l
	} else {
		yyb3600 = r.CheckBreak()
	}
	if yyb3600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3600++
	if yyhl3600 {
		yyb3600 = yyj3600 > l
	} else {
		yyb3600 = r.CheckBreak()
	}
	if yyb3600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3600++
	if yyhl3600 {
		yyb3600 = yyj3600 > l
	} else {
		yyb3600 = r.CheckBreak()
	}
	if yyb3600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3600++
		if yyhl3600 {
			yyb3600 = yyj3600 > l
		} else {
			yyb3600 = r.CheckBreak()
		}
		if yyb3600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3605 := z.EncBinary()
		_ = yym3605
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3606 := !z.EncBinary()
			yy2arr3606 := z.EncBasicHandle().StructToArray
			var yyq3606 [5]bool
			_, _, _ = yysep3606, yyq3606, yy2arr3606
			const yyr3606 bool = false
			yyq3606[0] = x.Kind != ""
			yyq3606[1] = x.APIVersion != ""
			yyq3606[2] = true
			var yynn3606 int
			if yyr3606 || yy2arr3606 {
				r.EncodeArrayStart(5)
			} else {
				yynn3606 = 2
				for _, b := range yyq3606 {
					if b {
						yynn3606++
					}
				}
				r.EncodeMapStart(yynn3606)
				yynn3606 = 0
			}
			if yyr3606 || yy2arr3606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3606[0] {
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3606[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3606 || yy2arr3606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3606[1] {
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3606[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3606 || yy2arr3606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3606[2] {
					yy3614 := &x.ObjectMeta
					yy3614.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3606[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3615 := &x.ObjectMeta
					yy3615.CodecEncodeSelf(e)
				}
			}
			if yyr3606 || yy2arr3606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3617 := z.EncBinary()
				_ = yym3617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3618 := z.EncBinary()
				_ = yym3618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3606 || yy2arr3606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3606 || yy2arr3606 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3622 := z.DecBinary()
	_ = yym3622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3623 := r.ContainerType()
		if yyct3623 == codecSelferValueTypeMap1234 {
			yyl3623 := r.ReadMapStart()
			if yyl3623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3623, d)
			}
		} else if yyct3623 == codecSelferValueTypeArray1234 {
			yyl3623 := r.ReadArrayStart()
			if yyl3623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3624Slc
	var yyhl3624 bool = l >= 0
	for yyj3624 := 0; ; yyj3624++ {
		if yyhl3624 {
			if yyj3624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3624Slc = r.DecodeBytes(yys3624Slc, true, true)
		yys3624 := string(yys3624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3627 := &x.ObjectMeta
				yyv3627.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3629 := &x.Data
				yym3630 := z.DecBinary()
				_ = yym3630
				if false {
				} else {
					*yyv3629 = r.DecodeBytes(*(*[]byte)(yyv3629), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3624)
		} // end switch yys3624
	} // end for yyj3624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3631 int
	var yyb3631 bool
	var yyhl3631 bool = l >= 0
	yyj3631++
	if yyhl3631 {
		yyb3631 = yyj3631 > l
	} else {
		yyb3631 = r.CheckBreak()
	}
	if yyb3631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3631++
	if yyhl3631 {
		yyb3631 = yyj3631 > l
	} else {
		yyb3631 = r.CheckBreak()
	}
	if yyb3631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3631++
	if yyhl3631 {
		yyb3631 = yyj3631 > l
	} else {
		yyb3631 = r.CheckBreak()
	}
	if yyb3631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3634 := &x.ObjectMeta
		yyv3634.CodecDecodeSelf(d)
	}
	yyj3631++
	if yyhl3631 {
		yyb3631 = yyj3631 > l
	} else {
		yyb3631 = r.CheckBreak()
	}
	if yyb3631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3631++
	if yyhl3631 {
		yyb3631 = yyj3631 > l
	} else {
		yyb3631 = r.CheckBreak()
	}
	if yyb3631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3636 := &x.Data
		yym3637 := z.DecBinary()
		_ = yym3637
		if false {
		} else {
			*yyv3636 = r.DecodeBytes(*(*[]byte)(yyv3636), false, false)
		}
	}
	for {
		yyj3631++
		if yyhl3631 {
			yyb3631 = yyj3631 > l
		} else {
			yyb3631 = r.CheckBreak()
		}
		if yyb3631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3638 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3639 := *v
	yyh3639, yyl3639 := z.DecSliceHelperStart()
	var yyc3639 bool
	if yyl3639 == 0 {
		if yyv3639 == nil {
			yyv3639 = []PersistentVolumeAccessMode{}
			yyc3639 = true
		} else if len(yyv3639) != 0 {
			yyv3639 = yyv3639[:0]
			yyc3639 = true
		}
	} else if yyl3639 > 0 {
		var yyrr3639, yyrl3639 int
		var yyrt3639 bool
		if yyl3639 > cap(yyv3639) {

			yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3639 {
				if yyrl3639 <= cap(yyv3639) {
					yyv3639 = yyv3639[:yyrl3639]
				} else {
					yyv3639 = make([]PersistentVolumeAccessMode, yyrl3639)
				}
			} else {
				yyv3639 = make([]PersistentVolumeAccessMode, yyrl3639)
			}
			yyc3639 = true
			yyrr3639 = len(yyv3639)
		} else if yyl3639 != len(yyv3639) {
			yyv3639 = yyv3639[:yyl3639]
			yyc3639 = true
		}
		yyj3639 := 0
		for ; yyj3639 < yyrr3639; yyj3639++ {
			yyh3639.ElemContainerState(yyj3639)
			if r.TryDecodeAsNil() {
				yyv3639[yyj3639] = ""
			} else {
				yyv3639[yyj3639] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3639 {
			for ; yyj3639 < yyl3639; yyj3639++ {
				yyv3639 = append(yyv3639, "")
				yyh3639.ElemContainerState(yyj3639)
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = ""
				} else {
					yyv3639[yyj3639] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3639 := 0
		for ; !r.CheckBreak(); yyj3639++ {

			if yyj3639 >= len(yyv3639) {
				yyv3639 = append(yyv3639, "") // var yyz3639 PersistentVolumeAccessMode
				yyc3639 = true
			}
			yyh3639.ElemContainerState(yyj3639)
			if yyj3639 < len(yyv3639) {
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = ""
				} else {
					yyv3639[yyj3639] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3639 < len(yyv3639) {
			yyv3639 = yyv3639[:yyj3639]
			yyc3639 = true
		} else if yyj3639 == 0 && yyv3639 == nil {
			yyv3639 = []PersistentVolumeAccessMode{}
			yyc3639 = true
		}
	}
	yyh3639.End()
	if yyc3639 {
		*v = yyv3639
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3644 := &yyv3643
		yy3644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3645 := *v
	yyh3645, yyl3645 := z.DecSliceHelperStart()
	var yyc3645 bool
	if yyl3645 == 0 {
		if yyv3645 == nil {
			yyv3645 = []PersistentVolume{}
			yyc3645 = true
		} else if len(yyv3645) != 0 {
			yyv3645 = yyv3645[:0]
			yyc3645 = true
		}
	} else if yyl3645 > 0 {
		var yyrr3645, yyrl3645 int
		var yyrt3645 bool
		if yyl3645 > cap(yyv3645) {

			yyrg3645 := len(yyv3645) > 0
			yyv23645 := yyv3645
			yyrl3645, yyrt3645 = z.DecInferLen(yyl3645, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt3645 {
				if yyrl3645 <= cap(yyv3645) {
					yyv3645 = yyv3645[:yyrl3645]
				} else {
					yyv3645 = make([]PersistentVolume, yyrl3645)
				}
			} else {
				yyv3645 = make([]PersistentVolume, yyrl3645)
			}
			yyc3645 = true
			yyrr3645 = len(yyv3645)
			if yyrg3645 {
				copy(yyv3645, yyv23645)
			}
		} else if yyl3645 != len(yyv3645) {
			yyv3645 = yyv3645[:yyl3645]
			yyc3645 = true
		}
		yyj3645 := 0
		for ; yyj3645 < yyrr3645; yyj3645++ {
			yyh3645.ElemContainerState(yyj3645)
			if r.TryDecodeAsNil() {
				yyv3645[yyj3645] = PersistentVolume{}
			} else {
				yyv3646 := &yyv3645[yyj3645]
				yyv3646.CodecDecodeSelf(d)
			}

		}
		if yyrt3645 {
			for ; yyj3645 < yyl3645; yyj3645++ {
				yyv3645 = append(yyv3645, PersistentVolume{})
				yyh3645.ElemContainerState(yyj3645)
				if r.TryDecodeAsNil() {
					yyv3645[yyj3645] = PersistentVolume{}
				} else {
					yyv3647 := &yyv3645[yyj3645]
					yyv3647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3645 := 0
		for ; !r.CheckBreak(); yyj3645++ {

			if yyj3645 >= len(yyv3645) {
				yyv3645 = append(yyv3645, PersistentVolume{}) // var yyz3645 PersistentVolume
				yyc3645 = true
			}
			yyh3645.ElemContainerState(yyj3645)
			if yyj3645 < len(yyv3645) {
				if r.TryDecodeAsNil() {
					yyv3645[yyj3645] = PersistentVolume{}
				} else {
					yyv3648 := &yyv3645[yyj3645]
					yyv3648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3645 < len(yyv3645) {
			yyv3645 = yyv3645[:yyj3645]
			yyc3645 = true
		} else if yyj3645 == 0 && yyv3645 == nil {
			yyv3645 = []PersistentVolume{}
			yyc3645 = true
		}
	}
	yyh3645.End()
	if yyc3645 {
		*v = yyv3645
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3650 := &yyv3649
		yy3650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3651 := *v
	yyh3651, yyl3651 := z.DecSliceHelperStart()
	var yyc3651 bool
	if yyl3651 == 0 {
		if yyv3651 == nil {
			yyv3651 = []PersistentVolumeClaim{}
			yyc3651 = true
		} else if len(yyv3651) != 0 {
			yyv3651 = yyv3651[:0]
			yyc3651 = true
		}
	} else if yyl3651 > 0 {
		var yyrr3651, yyrl3651 int
		var yyrt3651 bool
		if yyl3651 > cap(yyv3651) {

			yyrg3651 := len(yyv3651) > 0
			yyv23651 := yyv3651
			yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3651 {
				if yyrl3651 <= cap(yyv3651) {
					yyv3651 = yyv3651[:yyrl3651]
				} else {
					yyv3651 = make([]PersistentVolumeClaim, yyrl3651)
				}
			} else {
				yyv3651 = make([]PersistentVolumeClaim, yyrl3651)
			}
			yyc3651 = true
			yyrr3651 = len(yyv3651)
			if yyrg3651 {
				copy(yyv3651, yyv23651)
			}
		} else if yyl3651 != len(yyv3651) {
			yyv3651 = yyv3651[:yyl3651]
			yyc3651 = true
		}
		yyj3651 := 0
		for ; yyj3651 < yyrr3651; yyj3651++ {
			yyh3651.ElemContainerState(yyj3651)
			if r.TryDecodeAsNil() {
				yyv3651[yyj3651] = PersistentVolumeClaim{}
			} else {
				yyv3652 := &yyv3651[yyj3651]
				yyv3652.CodecDecodeSelf(d)
			}

		}
		if yyrt3651 {
			for ; yyj3651 < yyl3651; yyj3651++ {
				yyv3651 = append(yyv3651, PersistentVolumeClaim{})
				yyh3651.ElemContainerState(yyj3651)
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = PersistentVolumeClaim{}
				} else {
					yyv3653 := &yyv3651[yyj3651]
					yyv3653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3651 := 0
		for ; !r.CheckBreak(); yyj3651++ {

			if yyj3651 >= len(yyv3651) {
				yyv3651 = append(yyv3651, PersistentVolumeClaim{}) // var yyz3651 PersistentVolumeClaim
				yyc3651 = true
			}
			yyh3651.ElemContainerState(yyj3651)
			if yyj3651 < len(yyv3651) {
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = PersistentVolumeClaim{}
				} else {
					yyv3654 := &yyv3651[yyj3651]
					yyv3654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3651 < len(yyv3651) {
			yyv3651 = yyv3651[:yyj3651]
			yyc3651 = true
		} else if yyj3651 == 0 && yyv3651 == nil {
			yyv3651 = []PersistentVolumeClaim{}
			yyc3651 = true
		}
	}
	yyh3651.End()
	if yyc3651 {
		*v = yyv3651
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3656 := &yyv3655
		yy3656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyh3657, yyl3657 := z.DecSliceHelperStart()
	var yyc3657 bool
	if yyl3657 == 0 {
		if yyv3657 == nil {
			yyv3657 = []DownwardAPIVolumeFile{}
			yyc3657 = true
		} else if len(yyv3657) != 0 {
			yyv3657 = yyv3657[:0]
			yyc3657 = true
		}
	} else if yyl3657 > 0 {
		var yyrr3657, yyrl3657 int
		var yyrt3657 bool
		if yyl3657 > cap(yyv3657) {

			yyrg3657 := len(yyv3657) > 0
			yyv23657 := yyv3657
			yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3657 {
				if yyrl3657 <= cap(yyv3657) {
					yyv3657 = yyv3657[:yyrl3657]
				} else {
					yyv3657 = make([]DownwardAPIVolumeFile, yyrl3657)
				}
			} else {
				yyv3657 = make([]DownwardAPIVolumeFile, yyrl3657)
			}
			yyc3657 = true
			yyrr3657 = len(yyv3657)
			if yyrg3657 {
				copy(yyv3657, yyv23657)
			}
		} else if yyl3657 != len(yyv3657) {
			yyv3657 = yyv3657[:yyl3657]
			yyc3657 = true
		}
		yyj3657 := 0
		for ; yyj3657 < yyrr3657; yyj3657++ {
			yyh3657.ElemContainerState(yyj3657)
			if r.TryDecodeAsNil() {
				yyv3657[yyj3657] = DownwardAPIVolumeFile{}
			} else {
				yyv3658 := &yyv3657[yyj3657]
				yyv3658.CodecDecodeSelf(d)
			}

		}
		if yyrt3657 {
			for ; yyj3657 < yyl3657; yyj3657++ {
				yyv3657 = append(yyv3657, DownwardAPIVolumeFile{})
				yyh3657.ElemContainerState(yyj3657)
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = DownwardAPIVolumeFile{}
				} else {
					yyv3659 := &yyv3657[yyj3657]
					yyv3659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3657 := 0
		for ; !r.CheckBreak(); yyj3657++ {

			if yyj3657 >= len(yyv3657) {
				yyv3657 = append(yyv3657, DownwardAPIVolumeFile{}) // var yyz3657 DownwardAPIVolumeFile
				yyc3657 = true
			}
			yyh3657.ElemContainerState(yyj3657)
			if yyj3657 < len(yyv3657) {
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = DownwardAPIVolumeFile{}
				} else {
					yyv3660 := &yyv3657[yyj3657]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3657 < len(yyv3657) {
			yyv3657 = yyv3657[:yyj3657]
			yyc3657 = true
		} else if yyj3657 == 0 && yyv3657 == nil {
			yyv3657 = []DownwardAPIVolumeFile{}
			yyc3657 = true
		}
	}
	yyh3657.End()
	if yyc3657 {
		*v = yyv3657
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyh3662, yyl3662 := z.DecSliceHelperStart()
	var yyc3662 bool
	if yyl3662 == 0 {
		if yyv3662 == nil {
			yyv3662 = []Capability{}
			yyc3662 = true
		} else if len(yyv3662) != 0 {
			yyv3662 = yyv3662[:0]
			yyc3662 = true
		}
	} else if yyl3662 > 0 {
		var yyrr3662, yyrl3662 int
		var yyrt3662 bool
		if yyl3662 > cap(yyv3662) {

			yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3662 {
				if yyrl3662 <= cap(yyv3662) {
					yyv3662 = yyv3662[:yyrl3662]
				} else {
					yyv3662 = make([]Capability, yyrl3662)
				}
			} else {
				yyv3662 = make([]Capability, yyrl3662)
			}
			yyc3662 = true
			yyrr3662 = len(yyv3662)
		} else if yyl3662 != len(yyv3662) {
			yyv3662 = yyv3662[:yyl3662]
			yyc3662 = true
		}
		yyj3662 := 0
		for ; yyj3662 < yyrr3662; yyj3662++ {
			yyh3662.ElemContainerState(yyj3662)
			if r.TryDecodeAsNil() {
				yyv3662[yyj3662] = ""
			} else {
				yyv3662[yyj3662] = Capability(r.DecodeString())
			}

		}
		if yyrt3662 {
			for ; yyj3662 < yyl3662; yyj3662++ {
				yyv3662 = append(yyv3662, "")
				yyh3662.ElemContainerState(yyj3662)
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = ""
				} else {
					yyv3662[yyj3662] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3662 := 0
		for ; !r.CheckBreak(); yyj3662++ {

			if yyj3662 >= len(yyv3662) {
				yyv3662 = append(yyv3662, "") // var yyz3662 Capability
				yyc3662 = true
			}
			yyh3662.ElemContainerState(yyj3662)
			if yyj3662 < len(yyv3662) {
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = ""
				} else {
					yyv3662[yyj3662] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3662 < len(yyv3662) {
			yyv3662 = yyv3662[:yyj3662]
			yyc3662 = true
		} else if yyj3662 == 0 && yyv3662 == nil {
			yyv3662 = []Capability{}
			yyc3662 = true
		}
	}
	yyh3662.End()
	if yyc3662 {
		*v = yyv3662
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3667 := &yyv3666
		yy3667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3668 := *v
	yyh3668, yyl3668 := z.DecSliceHelperStart()
	var yyc3668 bool
	if yyl3668 == 0 {
		if yyv3668 == nil {
			yyv3668 = []ContainerPort{}
			yyc3668 = true
		} else if len(yyv3668) != 0 {
			yyv3668 = yyv3668[:0]
			yyc3668 = true
		}
	} else if yyl3668 > 0 {
		var yyrr3668, yyrl3668 int
		var yyrt3668 bool
		if yyl3668 > cap(yyv3668) {

			yyrg3668 := len(yyv3668) > 0
			yyv23668 := yyv3668
			yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3668 {
				if yyrl3668 <= cap(yyv3668) {
					yyv3668 = yyv3668[:yyrl3668]
				} else {
					yyv3668 = make([]ContainerPort, yyrl3668)
				}
			} else {
				yyv3668 = make([]ContainerPort, yyrl3668)
			}
			yyc3668 = true
			yyrr3668 = len(yyv3668)
			if yyrg3668 {
				copy(yyv3668, yyv23668)
			}
		} else if yyl3668 != len(yyv3668) {
			yyv3668 = yyv3668[:yyl3668]
			yyc3668 = true
		}
		yyj3668 := 0
		for ; yyj3668 < yyrr3668; yyj3668++ {
			yyh3668.ElemContainerState(yyj3668)
			if r.TryDecodeAsNil() {
				yyv3668[yyj3668] = ContainerPort{}
			} else {
				yyv3669 := &yyv3668[yyj3668]
				yyv3669.CodecDecodeSelf(d)
			}

		}
		if yyrt3668 {
			for ; yyj3668 < yyl3668; yyj3668++ {
				yyv3668 = append(yyv3668, ContainerPort{})
				yyh3668.ElemContainerState(yyj3668)
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = ContainerPort{}
				} else {
					yyv3670 := &yyv3668[yyj3668]
					yyv3670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3668 := 0
		for ; !r.CheckBreak(); yyj3668++ {

			if yyj3668 >= len(yyv3668) {
				yyv3668 = append(yyv3668, ContainerPort{}) // var yyz3668 ContainerPort
				yyc3668 = true
			}
			yyh3668.ElemContainerState(yyj3668)
			if yyj3668 < len(yyv3668) {
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = ContainerPort{}
				} else {
					yyv3671 := &yyv3668[yyj3668]
					yyv3671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3668 < len(yyv3668) {
			yyv3668 = yyv3668[:yyj3668]
			yyc3668 = true
		} else if yyj3668 == 0 && yyv3668 == nil {
			yyv3668 = []ContainerPort{}
			yyc3668 = true
		}
	}
	yyh3668.End()
	if yyc3668 {
		*v = yyv3668
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3673 := &yyv3672
		yy3673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3674 := *v
	yyh3674, yyl3674 := z.DecSliceHelperStart()
	var yyc3674 bool
	if yyl3674 == 0 {
		if yyv3674 == nil {
			yyv3674 = []EnvVar{}
			yyc3674 = true
		} else if len(yyv3674) != 0 {
			yyv3674 = yyv3674[:0]
			yyc3674 = true
		}
	} else if yyl3674 > 0 {
		var yyrr3674, yyrl3674 int
		var yyrt3674 bool
		if yyl3674 > cap(yyv3674) {

			yyrg3674 := len(yyv3674) > 0
			yyv23674 := yyv3674
			yyrl3674, yyrt3674 = z.DecInferLen(yyl3674, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3674 {
				if yyrl3674 <= cap(yyv3674) {
					yyv3674 = yyv3674[:yyrl3674]
				} else {
					yyv3674 = make([]EnvVar, yyrl3674)
				}
			} else {
				yyv3674 = make([]EnvVar, yyrl3674)
			}
			yyc3674 = true
			yyrr3674 = len(yyv3674)
			if yyrg3674 {
				copy(yyv3674, yyv23674)
			}
		} else if yyl3674 != len(yyv3674) {
			yyv3674 = yyv3674[:yyl3674]
			yyc3674 = true
		}
		yyj3674 := 0
		for ; yyj3674 < yyrr3674; yyj3674++ {
			yyh3674.ElemContainerState(yyj3674)
			if r.TryDecodeAsNil() {
				yyv3674[yyj3674] = EnvVar{}
			} else {
				yyv3675 := &yyv3674[yyj3674]
				yyv3675.CodecDecodeSelf(d)
			}

		}
		if yyrt3674 {
			for ; yyj3674 < yyl3674; yyj3674++ {
				yyv3674 = append(yyv3674, EnvVar{})
				yyh3674.ElemContainerState(yyj3674)
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = EnvVar{}
				} else {
					yyv3676 := &yyv3674[yyj3674]
					yyv3676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3674 := 0
		for ; !r.CheckBreak(); yyj3674++ {

			if yyj3674 >= len(yyv3674) {
				yyv3674 = append(yyv3674, EnvVar{}) // var yyz3674 EnvVar
				yyc3674 = true
			}
			yyh3674.ElemContainerState(yyj3674)
			if yyj3674 < len(yyv3674) {
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = EnvVar{}
				} else {
					yyv3677 := &yyv3674[yyj3674]
					yyv3677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3674 < len(yyv3674) {
			yyv3674 = yyv3674[:yyj3674]
			yyc3674 = true
		} else if yyj3674 == 0 && yyv3674 == nil {
			yyv3674 = []EnvVar{}
			yyc3674 = true
		}
	}
	yyh3674.End()
	if yyc3674 {
		*v = yyv3674
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3679 := &yyv3678
		yy3679.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3680 := *v
	yyh3680, yyl3680 := z.DecSliceHelperStart()
	var yyc3680 bool
	if yyl3680 == 0 {
		if yyv3680 == nil {
			yyv3680 = []VolumeMount{}
			yyc3680 = true
		} else if len(yyv3680) != 0 {
			yyv3680 = yyv3680[:0]
			yyc3680 = true
		}
	} else if yyl3680 > 0 {
		var yyrr3680, yyrl3680 int
		var yyrt3680 bool
		if yyl3680 > cap(yyv3680) {

			yyrg3680 := len(yyv3680) > 0
			yyv23680 := yyv3680
			yyrl3680, yyrt3680 = z.DecInferLen(yyl3680, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3680 {
				if yyrl3680 <= cap(yyv3680) {
					yyv3680 = yyv3680[:yyrl3680]
				} else {
					yyv3680 = make([]VolumeMount, yyrl3680)
				}
			} else {
				yyv3680 = make([]VolumeMount, yyrl3680)
			}
			yyc3680 = true
			yyrr3680 = len(yyv3680)
			if yyrg3680 {
				copy(yyv3680, yyv23680)
			}
		} else if yyl3680 != len(yyv3680) {
			yyv3680 = yyv3680[:yyl3680]
			yyc3680 = true
		}
		yyj3680 := 0
		for ; yyj3680 < yyrr3680; yyj3680++ {
			yyh3680.ElemContainerState(yyj3680)
			if r.TryDecodeAsNil() {
				yyv3680[yyj3680] = VolumeMount{}
			} else {
				yyv3681 := &yyv3680[yyj3680]
				yyv3681.CodecDecodeSelf(d)
			}

		}
		if yyrt3680 {
			for ; yyj3680 < yyl3680; yyj3680++ {
				yyv3680 = append(yyv3680, VolumeMount{})
				yyh3680.ElemContainerState(yyj3680)
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = VolumeMount{}
				} else {
					yyv3682 := &yyv3680[yyj3680]
					yyv3682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3680 := 0
		for ; !r.CheckBreak(); yyj3680++ {

			if yyj3680 >= len(yyv3680) {
				yyv3680 = append(yyv3680, VolumeMount{}) // var yyz3680 VolumeMount
				yyc3680 = true
			}
			yyh3680.ElemContainerState(yyj3680)
			if yyj3680 < len(yyv3680) {
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = VolumeMount{}
				} else {
					yyv3683 := &yyv3680[yyj3680]
					yyv3683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3680 < len(yyv3680) {
			yyv3680 = yyv3680[:yyj3680]
			yyc3680 = true
		} else if yyj3680 == 0 && yyv3680 == nil {
			yyv3680 = []VolumeMount{}
			yyc3680 = true
		}
	}
	yyh3680.End()
	if yyc3680 {
		*v = yyv3680
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3684 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3685 := &yyv3684
		yy3685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3686 := *v
	yyh3686, yyl3686 := z.DecSliceHelperStart()
	var yyc3686 bool
	if yyl3686 == 0 {
		if yyv3686 == nil {
			yyv3686 = []Pod{}
			yyc3686 = true
		} else if len(yyv3686) != 0 {
			yyv3686 = yyv3686[:0]
			yyc3686 = true
		}
	} else if yyl3686 > 0 {
		var yyrr3686, yyrl3686 int
		var yyrt3686 bool
		if yyl3686 > cap(yyv3686) {

			yyrg3686 := len(yyv3686) > 0
			yyv23686 := yyv3686
			yyrl3686, yyrt3686 = z.DecInferLen(yyl3686, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3686 {
				if yyrl3686 <= cap(yyv3686) {
					yyv3686 = yyv3686[:yyrl3686]
				} else {
					yyv3686 = make([]Pod, yyrl3686)
				}
			} else {
				yyv3686 = make([]Pod, yyrl3686)
			}
			yyc3686 = true
			yyrr3686 = len(yyv3686)
			if yyrg3686 {
				copy(yyv3686, yyv23686)
			}
		} else if yyl3686 != len(yyv3686) {
			yyv3686 = yyv3686[:yyl3686]
			yyc3686 = true
		}
		yyj3686 := 0
		for ; yyj3686 < yyrr3686; yyj3686++ {
			yyh3686.ElemContainerState(yyj3686)
			if r.TryDecodeAsNil() {
				yyv3686[yyj3686] = Pod{}
			} else {
				yyv3687 := &yyv3686[yyj3686]
				yyv3687.CodecDecodeSelf(d)
			}

		}
		if yyrt3686 {
			for ; yyj3686 < yyl3686; yyj3686++ {
				yyv3686 = append(yyv3686, Pod{})
				yyh3686.ElemContainerState(yyj3686)
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = Pod{}
				} else {
					yyv3688 := &yyv3686[yyj3686]
					yyv3688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3686 := 0
		for ; !r.CheckBreak(); yyj3686++ {

			if yyj3686 >= len(yyv3686) {
				yyv3686 = append(yyv3686, Pod{}) // var yyz3686 Pod
				yyc3686 = true
			}
			yyh3686.ElemContainerState(yyj3686)
			if yyj3686 < len(yyv3686) {
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = Pod{}
				} else {
					yyv3689 := &yyv3686[yyj3686]
					yyv3689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3686 < len(yyv3686) {
			yyv3686 = yyv3686[:yyj3686]
			yyc3686 = true
		} else if yyj3686 == 0 && yyv3686 == nil {
			yyv3686 = []Pod{}
			yyc3686 = true
		}
	}
	yyh3686.End()
	if yyc3686 {
		*v = yyv3686
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3690 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3691 := &yyv3690
		yy3691.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3692 := *v
	yyh3692, yyl3692 := z.DecSliceHelperStart()
	var yyc3692 bool
	if yyl3692 == 0 {
		if yyv3692 == nil {
			yyv3692 = []Volume{}
			yyc3692 = true
		} else if len(yyv3692) != 0 {
			yyv3692 = yyv3692[:0]
			yyc3692 = true
		}
	} else if yyl3692 > 0 {
		var yyrr3692, yyrl3692 int
		var yyrt3692 bool
		if yyl3692 > cap(yyv3692) {

			yyrg3692 := len(yyv3692) > 0
			yyv23692 := yyv3692
			yyrl3692, yyrt3692 = z.DecInferLen(yyl3692, z.DecBasicHandle().MaxInitLen, 152)
			if yyrt3692 {
				if yyrl3692 <= cap(yyv3692) {
					yyv3692 = yyv3692[:yyrl3692]
				} else {
					yyv3692 = make([]Volume, yyrl3692)
				}
			} else {
				yyv3692 = make([]Volume, yyrl3692)
			}
			yyc3692 = true
			yyrr3692 = len(yyv3692)
			if yyrg3692 {
				copy(yyv3692, yyv23692)
			}
		} else if yyl3692 != len(yyv3692) {
			yyv3692 = yyv3692[:yyl3692]
			yyc3692 = true
		}
		yyj3692 := 0
		for ; yyj3692 < yyrr3692; yyj3692++ {
			yyh3692.ElemContainerState(yyj3692)
			if r.TryDecodeAsNil() {
				yyv3692[yyj3692] = Volume{}
			} else {
				yyv3693 := &yyv3692[yyj3692]
				yyv3693.CodecDecodeSelf(d)
			}

		}
		if yyrt3692 {
			for ; yyj3692 < yyl3692; yyj3692++ {
				yyv3692 = append(yyv3692, Volume{})
				yyh3692.ElemContainerState(yyj3692)
				if r.TryDecodeAsNil() {
					yyv3692[yyj3692] = Volume{}
				} else {
					yyv3694 := &yyv3692[yyj3692]
					yyv3694.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3692 := 0
		for ; !r.CheckBreak(); yyj3692++ {

			if yyj3692 >= len(yyv3692) {
				yyv3692 = append(yyv3692, Volume{}) // var yyz3692 Volume
				yyc3692 = true
			}
			yyh3692.ElemContainerState(yyj3692)
			if yyj3692 < len(yyv3692) {
				if r.TryDecodeAsNil() {
					yyv3692[yyj3692] = Volume{}
				} else {
					yyv3695 := &yyv3692[yyj3692]
					yyv3695.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3692 < len(yyv3692) {
			yyv3692 = yyv3692[:yyj3692]
			yyc3692 = true
		} else if yyj3692 == 0 && yyv3692 == nil {
			yyv3692 = []Volume{}
			yyc3692 = true
		}
	}
	yyh3692.End()
	if yyc3692 {
		*v = yyv3692
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3696 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3697 := &yyv3696
		yy3697.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3698 := *v
	yyh3698, yyl3698 := z.DecSliceHelperStart()
	var yyc3698 bool
	if yyl3698 == 0 {
		if yyv3698 == nil {
			yyv3698 = []Container{}
			yyc3698 = true
		} else if len(yyv3698) != 0 {
			yyv3698 = yyv3698[:0]
			yyc3698 = true
		}
	} else if yyl3698 > 0 {
		var yyrr3698, yyrl3698 int
		var yyrt3698 bool
		if yyl3698 > cap(yyv3698) {

			yyrg3698 := len(yyv3698) > 0
			yyv23698 := yyv3698
			yyrl3698, yyrt3698 = z.DecInferLen(yyl3698, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt3698 {
				if yyrl3698 <= cap(yyv3698) {
					yyv3698 = yyv3698[:yyrl3698]
				} else {
					yyv3698 = make([]Container, yyrl3698)
				}
			} else {
				yyv3698 = make([]Container, yyrl3698)
			}
			yyc3698 = true
			yyrr3698 = len(yyv3698)
			if yyrg3698 {
				copy(yyv3698, yyv23698)
			}
		} else if yyl3698 != len(yyv3698) {
			yyv3698 = yyv3698[:yyl3698]
			yyc3698 = true
		}
		yyj3698 := 0
		for ; yyj3698 < yyrr3698; yyj3698++ {
			yyh3698.ElemContainerState(yyj3698)
			if r.TryDecodeAsNil() {
				yyv3698[yyj3698] = Container{}
			} else {
				yyv3699 := &yyv3698[yyj3698]
				yyv3699.CodecDecodeSelf(d)
			}

		}
		if yyrt3698 {
			for ; yyj3698 < yyl3698; yyj3698++ {
				yyv3698 = append(yyv3698, Container{})
				yyh3698.ElemContainerState(yyj3698)
				if r.TryDecodeAsNil() {
					yyv3698[yyj3698] = Container{}
				} else {
					yyv3700 := &yyv3698[yyj3698]
					yyv3700.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3698 := 0
		for ; !r.CheckBreak(); yyj3698++ {

			if yyj3698 >= len(yyv3698) {
				yyv3698 = append(yyv3698, Container{}) // var yyz3698 Container
				yyc3698 = true
			}
			yyh3698.ElemContainerState(yyj3698)
			if yyj3698 < len(yyv3698) {
				if r.TryDecodeAsNil() {
					yyv3698[yyj3698] = Container{}
				} else {
					yyv3701 := &yyv3698[yyj3698]
					yyv3701.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3698 < len(yyv3698) {
			yyv3698 = yyv3698[:yyj3698]
			yyc3698 = true
		} else if yyj3698 == 0 && yyv3698 == nil {
			yyv3698 = []Container{}
			yyc3698 = true
		}
	}
	yyh3698.End()
	if yyc3698 {
		*v = yyv3698
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3702 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3703 := &yyv3702
		yy3703.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3704 := *v
	yyh3704, yyl3704 := z.DecSliceHelperStart()
	var yyc3704 bool
	if yyl3704 == 0 {
		if yyv3704 == nil {
			yyv3704 = []LocalObjectReference{}
			yyc3704 = true
		} else if len(yyv3704) != 0 {
			yyv3704 = yyv3704[:0]
			yyc3704 = true
		}
	} else if yyl3704 > 0 {
		var yyrr3704, yyrl3704 int
		var yyrt3704 bool
		if yyl3704 > cap(yyv3704) {

			yyrg3704 := len(yyv3704) > 0
			yyv23704 := yyv3704
			yyrl3704, yyrt3704 = z.DecInferLen(yyl3704, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3704 {
				if yyrl3704 <= cap(yyv3704) {
					yyv3704 = yyv3704[:yyrl3704]
				} else {
					yyv3704 = make([]LocalObjectReference, yyrl3704)
				}
			} else {
				yyv3704 = make([]LocalObjectReference, yyrl3704)
			}
			yyc3704 = true
			yyrr3704 = len(yyv3704)
			if yyrg3704 {
				copy(yyv3704, yyv23704)
			}
		} else if yyl3704 != len(yyv3704) {
			yyv3704 = yyv3704[:yyl3704]
			yyc3704 = true
		}
		yyj3704 := 0
		for ; yyj3704 < yyrr3704; yyj3704++ {
			yyh3704.ElemContainerState(yyj3704)
			if r.TryDecodeAsNil() {
				yyv3704[yyj3704] = LocalObjectReference{}
			} else {
				yyv3705 := &yyv3704[yyj3704]
				yyv3705.CodecDecodeSelf(d)
			}

		}
		if yyrt3704 {
			for ; yyj3704 < yyl3704; yyj3704++ {
				yyv3704 = append(yyv3704, LocalObjectReference{})
				yyh3704.ElemContainerState(yyj3704)
				if r.TryDecodeAsNil() {
					yyv3704[yyj3704] = LocalObjectReference{}
				} else {
					yyv3706 := &yyv3704[yyj3704]
					yyv3706.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3704 := 0
		for ; !r.CheckBreak(); yyj3704++ {

			if yyj3704 >= len(yyv3704) {
				yyv3704 = append(yyv3704, LocalObjectReference{}) // var yyz3704 LocalObjectReference
				yyc3704 = true
			}
			yyh3704.ElemContainerState(yyj3704)
			if yyj3704 < len(yyv3704) {
				if r.TryDecodeAsNil() {
					yyv3704[yyj3704] = LocalObjectReference{}
				} else {
					yyv3707 := &yyv3704[yyj3704]
					yyv3707.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3704 < len(yyv3704) {
			yyv3704 = yyv3704[:yyj3704]
			yyc3704 = true
		} else if yyj3704 == 0 && yyv3704 == nil {
			yyv3704 = []LocalObjectReference{}
			yyc3704 = true
		}
	}
	yyh3704.End()
	if yyc3704 {
		*v = yyv3704
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3708 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3709 := &yyv3708
		yy3709.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3710 := *v
	yyh3710, yyl3710 := z.DecSliceHelperStart()
	var yyc3710 bool
	if yyl3710 == 0 {
		if yyv3710 == nil {
			yyv3710 = []PodCondition{}
			yyc3710 = true
		} else if len(yyv3710) != 0 {
			yyv3710 = yyv3710[:0]
			yyc3710 = true
		}
	} else if yyl3710 > 0 {
		var yyrr3710, yyrl3710 int
		var yyrt3710 bool
		if yyl3710 > cap(yyv3710) {

			yyrg3710 := len(yyv3710) > 0
			yyv23710 := yyv3710
			yyrl3710, yyrt3710 = z.DecInferLen(yyl3710, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3710 {
				if yyrl3710 <= cap(yyv3710) {
					yyv3710 = yyv3710[:yyrl3710]
				} else {
					yyv3710 = make([]PodCondition, yyrl3710)
				}
			} else {
				yyv3710 = make([]PodCondition, yyrl3710)
			}
			yyc3710 = true
			yyrr3710 = len(yyv3710)
			if yyrg3710 {
				copy(yyv3710, yyv23710)
			}
		} else if yyl3710 != len(yyv3710) {
			yyv3710 = yyv3710[:yyl3710]
			yyc3710 = true
		}
		yyj3710 := 0
		for ; yyj3710 < yyrr3710; yyj3710++ {
			yyh3710.ElemContainerState(yyj3710)
			if r.TryDecodeAsNil() {
				yyv3710[yyj3710] = PodCondition{}
			} else {
				yyv3711 := &yyv3710[yyj3710]
				yyv3711.CodecDecodeSelf(d)
			}

		}
		if yyrt3710 {
			for ; yyj3710 < yyl3710; yyj3710++ {
				yyv3710 = append(yyv3710, PodCondition{})
				yyh3710.ElemContainerState(yyj3710)
				if r.TryDecodeAsNil() {
					yyv3710[yyj3710] = PodCondition{}
				} else {
					yyv3712 := &yyv3710[yyj3710]
					yyv3712.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3710 := 0
		for ; !r.CheckBreak(); yyj3710++ {

			if yyj3710 >= len(yyv3710) {
				yyv3710 = append(yyv3710, PodCondition{}) // var yyz3710 PodCondition
				yyc3710 = true
			}
			yyh3710.ElemContainerState(yyj3710)
			if yyj3710 < len(yyv3710) {
				if r.TryDecodeAsNil() {
					yyv3710[yyj3710] = PodCondition{}
				} else {
					yyv3713 := &yyv3710[yyj3710]
					yyv3713.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3710 < len(yyv3710) {
			yyv3710 = yyv3710[:yyj3710]
			yyc3710 = true
		} else if yyj3710 == 0 && yyv3710 == nil {
			yyv3710 = []PodCondition{}
			yyc3710 = true
		}
	}
	yyh3710.End()
	if yyc3710 {
		*v = yyv3710
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3714 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3715 := &yyv3714
		yy3715.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3716 := *v
	yyh3716, yyl3716 := z.DecSliceHelperStart()
	var yyc3716 bool
	if yyl3716 == 0 {
		if yyv3716 == nil {
			yyv3716 = []ContainerStatus{}
			yyc3716 = true
		} else if len(yyv3716) != 0 {
			yyv3716 = yyv3716[:0]
			yyc3716 = true
		}
	} else if yyl3716 > 0 {
		var yyrr3716, yyrl3716 int
		var yyrt3716 bool
		if yyl3716 > cap(yyv3716) {

			yyrg3716 := len(yyv3716) > 0
			yyv23716 := yyv3716
			yyrl3716, yyrt3716 = z.DecInferLen(yyl3716, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3716 {
				if yyrl3716 <= cap(yyv3716) {
					yyv3716 = yyv3716[:yyrl3716]
				} else {
					yyv3716 = make([]ContainerStatus, yyrl3716)
				}
			} else {
				yyv3716 = make([]ContainerStatus, yyrl3716)
			}
			yyc3716 = true
			yyrr3716 = len(yyv3716)
			if yyrg3716 {
				copy(yyv3716, yyv23716)
			}
		} else if yyl3716 != len(yyv3716) {
			yyv3716 = yyv3716[:yyl3716]
			yyc3716 = true
		}
		yyj3716 := 0
		for ; yyj3716 < yyrr3716; yyj3716++ {
			yyh3716.ElemContainerState(yyj3716)
			if r.TryDecodeAsNil() {
				yyv3716[yyj3716] = ContainerStatus{}
			} else {
				yyv3717 := &yyv3716[yyj3716]
				yyv3717.CodecDecodeSelf(d)
			}

		}
		if yyrt3716 {
			for ; yyj3716 < yyl3716; yyj3716++ {
				yyv3716 = append(yyv3716, ContainerStatus{})
				yyh3716.ElemContainerState(yyj3716)
				if r.TryDecodeAsNil() {
					yyv3716[yyj3716] = ContainerStatus{}
				} else {
					yyv3718 := &yyv3716[yyj3716]
					yyv3718.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3716 := 0
		for ; !r.CheckBreak(); yyj3716++ {

			if yyj3716 >= len(yyv3716) {
				yyv3716 = append(yyv3716, ContainerStatus{}) // var yyz3716 ContainerStatus
				yyc3716 = true
			}
			yyh3716.ElemContainerState(yyj3716)
			if yyj3716 < len(yyv3716) {
				if r.TryDecodeAsNil() {
					yyv3716[yyj3716] = ContainerStatus{}
				} else {
					yyv3719 := &yyv3716[yyj3716]
					yyv3719.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3716 < len(yyv3716) {
			yyv3716 = yyv3716[:yyj3716]
			yyc3716 = true
		} else if yyj3716 == 0 && yyv3716 == nil {
			yyv3716 = []ContainerStatus{}
			yyc3716 = true
		}
	}
	yyh3716.End()
	if yyc3716 {
		*v = yyv3716
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3720 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3721 := &yyv3720
		yy3721.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3722 := *v
	yyh3722, yyl3722 := z.DecSliceHelperStart()
	var yyc3722 bool
	if yyl3722 == 0 {
		if yyv3722 == nil {
			yyv3722 = []PodTemplate{}
			yyc3722 = true
		} else if len(yyv3722) != 0 {
			yyv3722 = yyv3722[:0]
			yyc3722 = true
		}
	} else if yyl3722 > 0 {
		var yyrr3722, yyrl3722 int
		var yyrt3722 bool
		if yyl3722 > cap(yyv3722) {

			yyrg3722 := len(yyv3722) > 0
			yyv23722 := yyv3722
			yyrl3722, yyrt3722 = z.DecInferLen(yyl3722, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3722 {
				if yyrl3722 <= cap(yyv3722) {
					yyv3722 = yyv3722[:yyrl3722]
				} else {
					yyv3722 = make([]PodTemplate, yyrl3722)
				}
			} else {
				yyv3722 = make([]PodTemplate, yyrl3722)
			}
			yyc3722 = true
			yyrr3722 = len(yyv3722)
			if yyrg3722 {
				copy(yyv3722, yyv23722)
			}
		} else if yyl3722 != len(yyv3722) {
			yyv3722 = yyv3722[:yyl3722]
			yyc3722 = true
		}
		yyj3722 := 0
		for ; yyj3722 < yyrr3722; yyj3722++ {
			yyh3722.ElemContainerState(yyj3722)
			if r.TryDecodeAsNil() {
				yyv3722[yyj3722] = PodTemplate{}
			} else {
				yyv3723 := &yyv3722[yyj3722]
				yyv3723.CodecDecodeSelf(d)
			}

		}
		if yyrt3722 {
			for ; yyj3722 < yyl3722; yyj3722++ {
				yyv3722 = append(yyv3722, PodTemplate{})
				yyh3722.ElemContainerState(yyj3722)
				if r.TryDecodeAsNil() {
					yyv3722[yyj3722] = PodTemplate{}
				} else {
					yyv3724 := &yyv3722[yyj3722]
					yyv3724.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3722 := 0
		for ; !r.CheckBreak(); yyj3722++ {

			if yyj3722 >= len(yyv3722) {
				yyv3722 = append(yyv3722, PodTemplate{}) // var yyz3722 PodTemplate
				yyc3722 = true
			}
			yyh3722.ElemContainerState(yyj3722)
			if yyj3722 < len(yyv3722) {
				if r.TryDecodeAsNil() {
					yyv3722[yyj3722] = PodTemplate{}
				} else {
					yyv3725 := &yyv3722[yyj3722]
					yyv3725.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3722 < len(yyv3722) {
			yyv3722 = yyv3722[:yyj3722]
			yyc3722 = true
		} else if yyj3722 == 0 && yyv3722 == nil {
			yyv3722 = []PodTemplate{}
			yyc3722 = true
		}
	}
	yyh3722.End()
	if yyc3722 {
		*v = yyv3722
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3726 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3727 := &yyv3726
		yy3727.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3728 := *v
	yyh3728, yyl3728 := z.DecSliceHelperStart()
	var yyc3728 bool
	if yyl3728 == 0 {
		if yyv3728 == nil {
			yyv3728 = []ReplicationController{}
			yyc3728 = true
		} else if len(yyv3728) != 0 {
			yyv3728 = yyv3728[:0]
			yyc3728 = true
		}
	} else if yyl3728 > 0 {
		var yyrr3728, yyrl3728 int
		var yyrt3728 bool
		if yyl3728 > cap(yyv3728) {

			yyrg3728 := len(yyv3728) > 0
			yyv23728 := yyv3728
			yyrl3728, yyrt3728 = z.DecInferLen(yyl3728, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3728 {
				if yyrl3728 <= cap(yyv3728) {
					yyv3728 = yyv3728[:yyrl3728]
				} else {
					yyv3728 = make([]ReplicationController, yyrl3728)
				}
			} else {
				yyv3728 = make([]ReplicationController, yyrl3728)
			}
			yyc3728 = true
			yyrr3728 = len(yyv3728)
			if yyrg3728 {
				copy(yyv3728, yyv23728)
			}
		} else if yyl3728 != len(yyv3728) {
			yyv3728 = yyv3728[:yyl3728]
			yyc3728 = true
		}
		yyj3728 := 0
		for ; yyj3728 < yyrr3728; yyj3728++ {
			yyh3728.ElemContainerState(yyj3728)
			if r.TryDecodeAsNil() {
				yyv3728[yyj3728] = ReplicationController{}
			} else {
				yyv3729 := &yyv3728[yyj3728]
				yyv3729.CodecDecodeSelf(d)
			}

		}
		if yyrt3728 {
			for ; yyj3728 < yyl3728; yyj3728++ {
				yyv3728 = append(yyv3728, ReplicationController{})
				yyh3728.ElemContainerState(yyj3728)
				if r.TryDecodeAsNil() {
					yyv3728[yyj3728] = ReplicationController{}
				} else {
					yyv3730 := &yyv3728[yyj3728]
					yyv3730.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3728 := 0
		for ; !r.CheckBreak(); yyj3728++ {

			if yyj3728 >= len(yyv3728) {
				yyv3728 = append(yyv3728, ReplicationController{}) // var yyz3728 ReplicationController
				yyc3728 = true
			}
			yyh3728.ElemContainerState(yyj3728)
			if yyj3728 < len(yyv3728) {
				if r.TryDecodeAsNil() {
					yyv3728[yyj3728] = ReplicationController{}
				} else {
					yyv3731 := &yyv3728[yyj3728]
					yyv3731.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3728 < len(yyv3728) {
			yyv3728 = yyv3728[:yyj3728]
			yyc3728 = true
		} else if yyj3728 == 0 && yyv3728 == nil {
			yyv3728 = []ReplicationController{}
			yyc3728 = true
		}
	}
	yyh3728.End()
	if yyc3728 {
		*v = yyv3728
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3732 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3733 := &yyv3732
		yy3733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3734 := *v
	yyh3734, yyl3734 := z.DecSliceHelperStart()
	var yyc3734 bool
	if yyl3734 == 0 {
		if yyv3734 == nil {
			yyv3734 = []Service{}
			yyc3734 = true
		} else if len(yyv3734) != 0 {
			yyv3734 = yyv3734[:0]
			yyc3734 = true
		}
	} else if yyl3734 > 0 {
		var yyrr3734, yyrl3734 int
		var yyrt3734 bool
		if yyl3734 > cap(yyv3734) {

			yyrg3734 := len(yyv3734) > 0
			yyv23734 := yyv3734
			yyrl3734, yyrt3734 = z.DecInferLen(yyl3734, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3734 {
				if yyrl3734 <= cap(yyv3734) {
					yyv3734 = yyv3734[:yyrl3734]
				} else {
					yyv3734 = make([]Service, yyrl3734)
				}
			} else {
				yyv3734 = make([]Service, yyrl3734)
			}
			yyc3734 = true
			yyrr3734 = len(yyv3734)
			if yyrg3734 {
				copy(yyv3734, yyv23734)
			}
		} else if yyl3734 != len(yyv3734) {
			yyv3734 = yyv3734[:yyl3734]
			yyc3734 = true
		}
		yyj3734 := 0
		for ; yyj3734 < yyrr3734; yyj3734++ {
			yyh3734.ElemContainerState(yyj3734)
			if r.TryDecodeAsNil() {
				yyv3734[yyj3734] = Service{}
			} else {
				yyv3735 := &yyv3734[yyj3734]
				yyv3735.CodecDecodeSelf(d)
			}

		}
		if yyrt3734 {
			for ; yyj3734 < yyl3734; yyj3734++ {
				yyv3734 = append(yyv3734, Service{})
				yyh3734.ElemContainerState(yyj3734)
				if r.TryDecodeAsNil() {
					yyv3734[yyj3734] = Service{}
				} else {
					yyv3736 := &yyv3734[yyj3734]
					yyv3736.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3734 := 0
		for ; !r.CheckBreak(); yyj3734++ {

			if yyj3734 >= len(yyv3734) {
				yyv3734 = append(yyv3734, Service{}) // var yyz3734 Service
				yyc3734 = true
			}
			yyh3734.ElemContainerState(yyj3734)
			if yyj3734 < len(yyv3734) {
				if r.TryDecodeAsNil() {
					yyv3734[yyj3734] = Service{}
				} else {
					yyv3737 := &yyv3734[yyj3734]
					yyv3737.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3734 < len(yyv3734) {
			yyv3734 = yyv3734[:yyj3734]
			yyc3734 = true
		} else if yyj3734 == 0 && yyv3734 == nil {
			yyv3734 = []Service{}
			yyc3734 = true
		}
	}
	yyh3734.End()
	if yyc3734 {
		*v = yyv3734
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3739 := &yyv3738
		yy3739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3740 := *v
	yyh3740, yyl3740 := z.DecSliceHelperStart()
	var yyc3740 bool
	if yyl3740 == 0 {
		if yyv3740 == nil {
			yyv3740 = []LoadBalancerIngress{}
			yyc3740 = true
		} else if len(yyv3740) != 0 {
			yyv3740 = yyv3740[:0]
			yyc3740 = true
		}
	} else if yyl3740 > 0 {
		var yyrr3740, yyrl3740 int
		var yyrt3740 bool
		if yyl3740 > cap(yyv3740) {

			yyrg3740 := len(yyv3740) > 0
			yyv23740 := yyv3740
			yyrl3740, yyrt3740 = z.DecInferLen(yyl3740, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3740 {
				if yyrl3740 <= cap(yyv3740) {
					yyv3740 = yyv3740[:yyrl3740]
				} else {
					yyv3740 = make([]LoadBalancerIngress, yyrl3740)
				}
			} else {
				yyv3740 = make([]LoadBalancerIngress, yyrl3740)
			}
			yyc3740 = true
			yyrr3740 = len(yyv3740)
			if yyrg3740 {
				copy(yyv3740, yyv23740)
			}
		} else if yyl3740 != len(yyv3740) {
			yyv3740 = yyv3740[:yyl3740]
			yyc3740 = true
		}
		yyj3740 := 0
		for ; yyj3740 < yyrr3740; yyj3740++ {
			yyh3740.ElemContainerState(yyj3740)
			if r.TryDecodeAsNil() {
				yyv3740[yyj3740] = LoadBalancerIngress{}
			} else {
				yyv3741 := &yyv3740[yyj3740]
				yyv3741.CodecDecodeSelf(d)
			}

		}
		if yyrt3740 {
			for ; yyj3740 < yyl3740; yyj3740++ {
				yyv3740 = append(yyv3740, LoadBalancerIngress{})
				yyh3740.ElemContainerState(yyj3740)
				if r.TryDecodeAsNil() {
					yyv3740[yyj3740] = LoadBalancerIngress{}
				} else {
					yyv3742 := &yyv3740[yyj3740]
					yyv3742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3740 := 0
		for ; !r.CheckBreak(); yyj3740++ {

			if yyj3740 >= len(yyv3740) {
				yyv3740 = append(yyv3740, LoadBalancerIngress{}) // var yyz3740 LoadBalancerIngress
				yyc3740 = true
			}
			yyh3740.ElemContainerState(yyj3740)
			if yyj3740 < len(yyv3740) {
				if r.TryDecodeAsNil() {
					yyv3740[yyj3740] = LoadBalancerIngress{}
				} else {
					yyv3743 := &yyv3740[yyj3740]
					yyv3743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3740 < len(yyv3740) {
			yyv3740 = yyv3740[:yyj3740]
			yyc3740 = true
		} else if yyj3740 == 0 && yyv3740 == nil {
			yyv3740 = []LoadBalancerIngress{}
			yyc3740 = true
		}
	}
	yyh3740.End()
	if yyc3740 {
		*v = yyv3740
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3745 := &yyv3744
		yy3745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3746 := *v
	yyh3746, yyl3746 := z.DecSliceHelperStart()
	var yyc3746 bool
	if yyl3746 == 0 {
		if yyv3746 == nil {
			yyv3746 = []ServicePort{}
			yyc3746 = true
		} else if len(yyv3746) != 0 {
			yyv3746 = yyv3746[:0]
			yyc3746 = true
		}
	} else if yyl3746 > 0 {
		var yyrr3746, yyrl3746 int
		var yyrt3746 bool
		if yyl3746 > cap(yyv3746) {

			yyrg3746 := len(yyv3746) > 0
			yyv23746 := yyv3746
			yyrl3746, yyrt3746 = z.DecInferLen(yyl3746, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3746 {
				if yyrl3746 <= cap(yyv3746) {
					yyv3746 = yyv3746[:yyrl3746]
				} else {
					yyv3746 = make([]ServicePort, yyrl3746)
				}
			} else {
				yyv3746 = make([]ServicePort, yyrl3746)
			}
			yyc3746 = true
			yyrr3746 = len(yyv3746)
			if yyrg3746 {
				copy(yyv3746, yyv23746)
			}
		} else if yyl3746 != len(yyv3746) {
			yyv3746 = yyv3746[:yyl3746]
			yyc3746 = true
		}
		yyj3746 := 0
		for ; yyj3746 < yyrr3746; yyj3746++ {
			yyh3746.ElemContainerState(yyj3746)
			if r.TryDecodeAsNil() {
				yyv3746[yyj3746] = ServicePort{}
			} else {
				yyv3747 := &yyv3746[yyj3746]
				yyv3747.CodecDecodeSelf(d)
			}

		}
		if yyrt3746 {
			for ; yyj3746 < yyl3746; yyj3746++ {
				yyv3746 = append(yyv3746, ServicePort{})
				yyh3746.ElemContainerState(yyj3746)
				if r.TryDecodeAsNil() {
					yyv3746[yyj3746] = ServicePort{}
				} else {
					yyv3748 := &yyv3746[yyj3746]
					yyv3748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3746 := 0
		for ; !r.CheckBreak(); yyj3746++ {

			if yyj3746 >= len(yyv3746) {
				yyv3746 = append(yyv3746, ServicePort{}) // var yyz3746 ServicePort
				yyc3746 = true
			}
			yyh3746.ElemContainerState(yyj3746)
			if yyj3746 < len(yyv3746) {
				if r.TryDecodeAsNil() {
					yyv3746[yyj3746] = ServicePort{}
				} else {
					yyv3749 := &yyv3746[yyj3746]
					yyv3749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3746 < len(yyv3746) {
			yyv3746 = yyv3746[:yyj3746]
			yyc3746 = true
		} else if yyj3746 == 0 && yyv3746 == nil {
			yyv3746 = []ServicePort{}
			yyc3746 = true
		}
	}
	yyh3746.End()
	if yyc3746 {
		*v = yyv3746
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3750 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3751 := &yyv3750
		yy3751.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3752 := *v
	yyh3752, yyl3752 := z.DecSliceHelperStart()
	var yyc3752 bool
	if yyl3752 == 0 {
		if yyv3752 == nil {
			yyv3752 = []ObjectReference{}
			yyc3752 = true
		} else if len(yyv3752) != 0 {
			yyv3752 = yyv3752[:0]
			yyc3752 = true
		}
	} else if yyl3752 > 0 {
		var yyrr3752, yyrl3752 int
		var yyrt3752 bool
		if yyl3752 > cap(yyv3752) {

			yyrg3752 := len(yyv3752) > 0
			yyv23752 := yyv3752
			yyrl3752, yyrt3752 = z.DecInferLen(yyl3752, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3752 {
				if yyrl3752 <= cap(yyv3752) {
					yyv3752 = yyv3752[:yyrl3752]
				} else {
					yyv3752 = make([]ObjectReference, yyrl3752)
				}
			} else {
				yyv3752 = make([]ObjectReference, yyrl3752)
			}
			yyc3752 = true
			yyrr3752 = len(yyv3752)
			if yyrg3752 {
				copy(yyv3752, yyv23752)
			}
		} else if yyl3752 != len(yyv3752) {
			yyv3752 = yyv3752[:yyl3752]
			yyc3752 = true
		}
		yyj3752 := 0
		for ; yyj3752 < yyrr3752; yyj3752++ {
			yyh3752.ElemContainerState(yyj3752)
			if r.TryDecodeAsNil() {
				yyv3752[yyj3752] = ObjectReference{}
			} else {
				yyv3753 := &yyv3752[yyj3752]
				yyv3753.CodecDecodeSelf(d)
			}

		}
		if yyrt3752 {
			for ; yyj3752 < yyl3752; yyj3752++ {
				yyv3752 = append(yyv3752, ObjectReference{})
				yyh3752.ElemContainerState(yyj3752)
				if r.TryDecodeAsNil() {
					yyv3752[yyj3752] = ObjectReference{}
				} else {
					yyv3754 := &yyv3752[yyj3752]
					yyv3754.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3752 := 0
		for ; !r.CheckBreak(); yyj3752++ {

			if yyj3752 >= len(yyv3752) {
				yyv3752 = append(yyv3752, ObjectReference{}) // var yyz3752 ObjectReference
				yyc3752 = true
			}
			yyh3752.ElemContainerState(yyj3752)
			if yyj3752 < len(yyv3752) {
				if r.TryDecodeAsNil() {
					yyv3752[yyj3752] = ObjectReference{}
				} else {
					yyv3755 := &yyv3752[yyj3752]
					yyv3755.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3752 < len(yyv3752) {
			yyv3752 = yyv3752[:yyj3752]
			yyc3752 = true
		} else if yyj3752 == 0 && yyv3752 == nil {
			yyv3752 = []ObjectReference{}
			yyc3752 = true
		}
	}
	yyh3752.End()
	if yyc3752 {
		*v = yyv3752
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3756 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3757 := &yyv3756
		yy3757.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3758 := *v
	yyh3758, yyl3758 := z.DecSliceHelperStart()
	var yyc3758 bool
	if yyl3758 == 0 {
		if yyv3758 == nil {
			yyv3758 = []ServiceAccount{}
			yyc3758 = true
		} else if len(yyv3758) != 0 {
			yyv3758 = yyv3758[:0]
			yyc3758 = true
		}
	} else if yyl3758 > 0 {
		var yyrr3758, yyrl3758 int
		var yyrt3758 bool
		if yyl3758 > cap(yyv3758) {

			yyrg3758 := len(yyv3758) > 0
			yyv23758 := yyv3758
			yyrl3758, yyrt3758 = z.DecInferLen(yyl3758, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3758 {
				if yyrl3758 <= cap(yyv3758) {
					yyv3758 = yyv3758[:yyrl3758]
				} else {
					yyv3758 = make([]ServiceAccount, yyrl3758)
				}
			} else {
				yyv3758 = make([]ServiceAccount, yyrl3758)
			}
			yyc3758 = true
			yyrr3758 = len(yyv3758)
			if yyrg3758 {
				copy(yyv3758, yyv23758)
			}
		} else if yyl3758 != len(yyv3758) {
			yyv3758 = yyv3758[:yyl3758]
			yyc3758 = true
		}
		yyj3758 := 0
		for ; yyj3758 < yyrr3758; yyj3758++ {
			yyh3758.ElemContainerState(yyj3758)
			if r.TryDecodeAsNil() {
				yyv3758[yyj3758] = ServiceAccount{}
			} else {
				yyv3759 := &yyv3758[yyj3758]
				yyv3759.CodecDecodeSelf(d)
			}

		}
		if yyrt3758 {
			for ; yyj3758 < yyl3758; yyj3758++ {
				yyv3758 = append(yyv3758, ServiceAccount{})
				yyh3758.ElemContainerState(yyj3758)
				if r.TryDecodeAsNil() {
					yyv3758[yyj3758] = ServiceAccount{}
				} else {
					yyv3760 := &yyv3758[yyj3758]
					yyv3760.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3758 := 0
		for ; !r.CheckBreak(); yyj3758++ {

			if yyj3758 >= len(yyv3758) {
				yyv3758 = append(yyv3758, ServiceAccount{}) // var yyz3758 ServiceAccount
				yyc3758 = true
			}
			yyh3758.ElemContainerState(yyj3758)
			if yyj3758 < len(yyv3758) {
				if r.TryDecodeAsNil() {
					yyv3758[yyj3758] = ServiceAccount{}
				} else {
					yyv3761 := &yyv3758[yyj3758]
					yyv3761.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3758 < len(yyv3758) {
			yyv3758 = yyv3758[:yyj3758]
			yyc3758 = true
		} else if yyj3758 == 0 && yyv3758 == nil {
			yyv3758 = []ServiceAccount{}
			yyc3758 = true
		}
	}
	yyh3758.End()
	if yyc3758 {
		*v = yyv3758
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3762 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3763 := &yyv3762
		yy3763.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3764 := *v
	yyh3764, yyl3764 := z.DecSliceHelperStart()
	var yyc3764 bool
	if yyl3764 == 0 {
		if yyv3764 == nil {
			yyv3764 = []EndpointSubset{}
			yyc3764 = true
		} else if len(yyv3764) != 0 {
			yyv3764 = yyv3764[:0]
			yyc3764 = true
		}
	} else if yyl3764 > 0 {
		var yyrr3764, yyrl3764 int
		var yyrt3764 bool
		if yyl3764 > cap(yyv3764) {

			yyrg3764 := len(yyv3764) > 0
			yyv23764 := yyv3764
			yyrl3764, yyrt3764 = z.DecInferLen(yyl3764, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3764 {
				if yyrl3764 <= cap(yyv3764) {
					yyv3764 = yyv3764[:yyrl3764]
				} else {
					yyv3764 = make([]EndpointSubset, yyrl3764)
				}
			} else {
				yyv3764 = make([]EndpointSubset, yyrl3764)
			}
			yyc3764 = true
			yyrr3764 = len(yyv3764)
			if yyrg3764 {
				copy(yyv3764, yyv23764)
			}
		} else if yyl3764 != len(yyv3764) {
			yyv3764 = yyv3764[:yyl3764]
			yyc3764 = true
		}
		yyj3764 := 0
		for ; yyj3764 < yyrr3764; yyj3764++ {
			yyh3764.ElemContainerState(yyj3764)
			if r.TryDecodeAsNil() {
				yyv3764[yyj3764] = EndpointSubset{}
			} else {
				yyv3765 := &yyv3764[yyj3764]
				yyv3765.CodecDecodeSelf(d)
			}

		}
		if yyrt3764 {
			for ; yyj3764 < yyl3764; yyj3764++ {
				yyv3764 = append(yyv3764, EndpointSubset{})
				yyh3764.ElemContainerState(yyj3764)
				if r.TryDecodeAsNil() {
					yyv3764[yyj3764] = EndpointSubset{}
				} else {
					yyv3766 := &yyv3764[yyj3764]
					yyv3766.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3764 := 0
		for ; !r.CheckBreak(); yyj3764++ {

			if yyj3764 >= len(yyv3764) {
				yyv3764 = append(yyv3764, EndpointSubset{}) // var yyz3764 EndpointSubset
				yyc3764 = true
			}
			yyh3764.ElemContainerState(yyj3764)
			if yyj3764 < len(yyv3764) {
				if r.TryDecodeAsNil() {
					yyv3764[yyj3764] = EndpointSubset{}
				} else {
					yyv3767 := &yyv3764[yyj3764]
					yyv3767.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3764 < len(yyv3764) {
			yyv3764 = yyv3764[:yyj3764]
			yyc3764 = true
		} else if yyj3764 == 0 && yyv3764 == nil {
			yyv3764 = []EndpointSubset{}
			yyc3764 = true
		}
	}
	yyh3764.End()
	if yyc3764 {
		*v = yyv3764
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3768 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3769 := &yyv3768
		yy3769.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3770 := *v
	yyh3770, yyl3770 := z.DecSliceHelperStart()
	var yyc3770 bool
	if yyl3770 == 0 {
		if yyv3770 == nil {
			yyv3770 = []EndpointAddress{}
			yyc3770 = true
		} else if len(yyv3770) != 0 {
			yyv3770 = yyv3770[:0]
			yyc3770 = true
		}
	} else if yyl3770 > 0 {
		var yyrr3770, yyrl3770 int
		var yyrt3770 bool
		if yyl3770 > cap(yyv3770) {

			yyrg3770 := len(yyv3770) > 0
			yyv23770 := yyv3770
			yyrl3770, yyrt3770 = z.DecInferLen(yyl3770, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3770 {
				if yyrl3770 <= cap(yyv3770) {
					yyv3770 = yyv3770[:yyrl3770]
				} else {
					yyv3770 = make([]EndpointAddress, yyrl3770)
				}
			} else {
				yyv3770 = make([]EndpointAddress, yyrl3770)
			}
			yyc3770 = true
			yyrr3770 = len(yyv3770)
			if yyrg3770 {
				copy(yyv3770, yyv23770)
			}
		} else if yyl3770 != len(yyv3770) {
			yyv3770 = yyv3770[:yyl3770]
			yyc3770 = true
		}
		yyj3770 := 0
		for ; yyj3770 < yyrr3770; yyj3770++ {
			yyh3770.ElemContainerState(yyj3770)
			if r.TryDecodeAsNil() {
				yyv3770[yyj3770] = EndpointAddress{}
			} else {
				yyv3771 := &yyv3770[yyj3770]
				yyv3771.CodecDecodeSelf(d)
			}

		}
		if yyrt3770 {
			for ; yyj3770 < yyl3770; yyj3770++ {
				yyv3770 = append(yyv3770, EndpointAddress{})
				yyh3770.ElemContainerState(yyj3770)
				if r.TryDecodeAsNil() {
					yyv3770[yyj3770] = EndpointAddress{}
				} else {
					yyv3772 := &yyv3770[yyj3770]
					yyv3772.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3770 := 0
		for ; !r.CheckBreak(); yyj3770++ {

			if yyj3770 >= len(yyv3770) {
				yyv3770 = append(yyv3770, EndpointAddress{}) // var yyz3770 EndpointAddress
				yyc3770 = true
			}
			yyh3770.ElemContainerState(yyj3770)
			if yyj3770 < len(yyv3770) {
				if r.TryDecodeAsNil() {
					yyv3770[yyj3770] = EndpointAddress{}
				} else {
					yyv3773 := &yyv3770[yyj3770]
					yyv3773.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3770 < len(yyv3770) {
			yyv3770 = yyv3770[:yyj3770]
			yyc3770 = true
		} else if yyj3770 == 0 && yyv3770 == nil {
			yyv3770 = []EndpointAddress{}
			yyc3770 = true
		}
	}
	yyh3770.End()
	if yyc3770 {
		*v = yyv3770
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3775 := &yyv3774
		yy3775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3776 := *v
	yyh3776, yyl3776 := z.DecSliceHelperStart()
	var yyc3776 bool
	if yyl3776 == 0 {
		if yyv3776 == nil {
			yyv3776 = []EndpointPort{}
			yyc3776 = true
		} else if len(yyv3776) != 0 {
			yyv3776 = yyv3776[:0]
			yyc3776 = true
		}
	} else if yyl3776 > 0 {
		var yyrr3776, yyrl3776 int
		var yyrt3776 bool
		if yyl3776 > cap(yyv3776) {

			yyrg3776 := len(yyv3776) > 0
			yyv23776 := yyv3776
			yyrl3776, yyrt3776 = z.DecInferLen(yyl3776, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3776 {
				if yyrl3776 <= cap(yyv3776) {
					yyv3776 = yyv3776[:yyrl3776]
				} else {
					yyv3776 = make([]EndpointPort, yyrl3776)
				}
			} else {
				yyv3776 = make([]EndpointPort, yyrl3776)
			}
			yyc3776 = true
			yyrr3776 = len(yyv3776)
			if yyrg3776 {
				copy(yyv3776, yyv23776)
			}
		} else if yyl3776 != len(yyv3776) {
			yyv3776 = yyv3776[:yyl3776]
			yyc3776 = true
		}
		yyj3776 := 0
		for ; yyj3776 < yyrr3776; yyj3776++ {
			yyh3776.ElemContainerState(yyj3776)
			if r.TryDecodeAsNil() {
				yyv3776[yyj3776] = EndpointPort{}
			} else {
				yyv3777 := &yyv3776[yyj3776]
				yyv3777.CodecDecodeSelf(d)
			}

		}
		if yyrt3776 {
			for ; yyj3776 < yyl3776; yyj3776++ {
				yyv3776 = append(yyv3776, EndpointPort{})
				yyh3776.ElemContainerState(yyj3776)
				if r.TryDecodeAsNil() {
					yyv3776[yyj3776] = EndpointPort{}
				} else {
					yyv3778 := &yyv3776[yyj3776]
					yyv3778.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3776 := 0
		for ; !r.CheckBreak(); yyj3776++ {

			if yyj3776 >= len(yyv3776) {
				yyv3776 = append(yyv3776, EndpointPort{}) // var yyz3776 EndpointPort
				yyc3776 = true
			}
			yyh3776.ElemContainerState(yyj3776)
			if yyj3776 < len(yyv3776) {
				if r.TryDecodeAsNil() {
					yyv3776[yyj3776] = EndpointPort{}
				} else {
					yyv3779 := &yyv3776[yyj3776]
					yyv3779.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3776 < len(yyv3776) {
			yyv3776 = yyv3776[:yyj3776]
			yyc3776 = true
		} else if yyj3776 == 0 && yyv3776 == nil {
			yyv3776 = []EndpointPort{}
			yyc3776 = true
		}
	}
	yyh3776.End()
	if yyc3776 {
		*v = yyv3776
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3780 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3781 := &yyv3780
		yy3781.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3782 := *v
	yyh3782, yyl3782 := z.DecSliceHelperStart()
	var yyc3782 bool
	if yyl3782 == 0 {
		if yyv3782 == nil {
			yyv3782 = []Endpoints{}
			yyc3782 = true
		} else if len(yyv3782) != 0 {
			yyv3782 = yyv3782[:0]
			yyc3782 = true
		}
	} else if yyl3782 > 0 {
		var yyrr3782, yyrl3782 int
		var yyrt3782 bool
		if yyl3782 > cap(yyv3782) {

			yyrg3782 := len(yyv3782) > 0
			yyv23782 := yyv3782
			yyrl3782, yyrt3782 = z.DecInferLen(yyl3782, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3782 {
				if yyrl3782 <= cap(yyv3782) {
					yyv3782 = yyv3782[:yyrl3782]
				} else {
					yyv3782 = make([]Endpoints, yyrl3782)
				}
			} else {
				yyv3782 = make([]Endpoints, yyrl3782)
			}
			yyc3782 = true
			yyrr3782 = len(yyv3782)
			if yyrg3782 {
				copy(yyv3782, yyv23782)
			}
		} else if yyl3782 != len(yyv3782) {
			yyv3782 = yyv3782[:yyl3782]
			yyc3782 = true
		}
		yyj3782 := 0
		for ; yyj3782 < yyrr3782; yyj3782++ {
			yyh3782.ElemContainerState(yyj3782)
			if r.TryDecodeAsNil() {
				yyv3782[yyj3782] = Endpoints{}
			} else {
				yyv3783 := &yyv3782[yyj3782]
				yyv3783.CodecDecodeSelf(d)
			}

		}
		if yyrt3782 {
			for ; yyj3782 < yyl3782; yyj3782++ {
				yyv3782 = append(yyv3782, Endpoints{})
				yyh3782.ElemContainerState(yyj3782)
				if r.TryDecodeAsNil() {
					yyv3782[yyj3782] = Endpoints{}
				} else {
					yyv3784 := &yyv3782[yyj3782]
					yyv3784.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3782 := 0
		for ; !r.CheckBreak(); yyj3782++ {

			if yyj3782 >= len(yyv3782) {
				yyv3782 = append(yyv3782, Endpoints{}) // var yyz3782 Endpoints
				yyc3782 = true
			}
			yyh3782.ElemContainerState(yyj3782)
			if yyj3782 < len(yyv3782) {
				if r.TryDecodeAsNil() {
					yyv3782[yyj3782] = Endpoints{}
				} else {
					yyv3785 := &yyv3782[yyj3782]
					yyv3785.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3782 < len(yyv3782) {
			yyv3782 = yyv3782[:yyj3782]
			yyc3782 = true
		} else if yyj3782 == 0 && yyv3782 == nil {
			yyv3782 = []Endpoints{}
			yyc3782 = true
		}
	}
	yyh3782.End()
	if yyc3782 {
		*v = yyv3782
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3786 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3787 := &yyv3786
		yy3787.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3788 := *v
	yyh3788, yyl3788 := z.DecSliceHelperStart()
	var yyc3788 bool
	if yyl3788 == 0 {
		if yyv3788 == nil {
			yyv3788 = []NodeCondition{}
			yyc3788 = true
		} else if len(yyv3788) != 0 {
			yyv3788 = yyv3788[:0]
			yyc3788 = true
		}
	} else if yyl3788 > 0 {
		var yyrr3788, yyrl3788 int
		var yyrt3788 bool
		if yyl3788 > cap(yyv3788) {

			yyrg3788 := len(yyv3788) > 0
			yyv23788 := yyv3788
			yyrl3788, yyrt3788 = z.DecInferLen(yyl3788, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3788 {
				if yyrl3788 <= cap(yyv3788) {
					yyv3788 = yyv3788[:yyrl3788]
				} else {
					yyv3788 = make([]NodeCondition, yyrl3788)
				}
			} else {
				yyv3788 = make([]NodeCondition, yyrl3788)
			}
			yyc3788 = true
			yyrr3788 = len(yyv3788)
			if yyrg3788 {
				copy(yyv3788, yyv23788)
			}
		} else if yyl3788 != len(yyv3788) {
			yyv3788 = yyv3788[:yyl3788]
			yyc3788 = true
		}
		yyj3788 := 0
		for ; yyj3788 < yyrr3788; yyj3788++ {
			yyh3788.ElemContainerState(yyj3788)
			if r.TryDecodeAsNil() {
				yyv3788[yyj3788] = NodeCondition{}
			} else {
				yyv3789 := &yyv3788[yyj3788]
				yyv3789.CodecDecodeSelf(d)
			}

		}
		if yyrt3788 {
			for ; yyj3788 < yyl3788; yyj3788++ {
				yyv3788 = append(yyv3788, NodeCondition{})
				yyh3788.ElemContainerState(yyj3788)
				if r.TryDecodeAsNil() {
					yyv3788[yyj3788] = NodeCondition{}
				} else {
					yyv3790 := &yyv3788[yyj3788]
					yyv3790.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3788 := 0
		for ; !r.CheckBreak(); yyj3788++ {

			if yyj3788 >= len(yyv3788) {
				yyv3788 = append(yyv3788, NodeCondition{}) // var yyz3788 NodeCondition
				yyc3788 = true
			}
			yyh3788.ElemContainerState(yyj3788)
			if yyj3788 < len(yyv3788) {
				if r.TryDecodeAsNil() {
					yyv3788[yyj3788] = NodeCondition{}
				} else {
					yyv3791 := &yyv3788[yyj3788]
					yyv3791.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3788 < len(yyv3788) {
			yyv3788 = yyv3788[:yyj3788]
			yyc3788 = true
		} else if yyj3788 == 0 && yyv3788 == nil {
			yyv3788 = []NodeCondition{}
			yyc3788 = true
		}
	}
	yyh3788.End()
	if yyc3788 {
		*v = yyv3788
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3792 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3793 := &yyv3792
		yy3793.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3794 := *v
	yyh3794, yyl3794 := z.DecSliceHelperStart()
	var yyc3794 bool
	if yyl3794 == 0 {
		if yyv3794 == nil {
			yyv3794 = []NodeAddress{}
			yyc3794 = true
		} else if len(yyv3794) != 0 {
			yyv3794 = yyv3794[:0]
			yyc3794 = true
		}
	} else if yyl3794 > 0 {
		var yyrr3794, yyrl3794 int
		var yyrt3794 bool
		if yyl3794 > cap(yyv3794) {

			yyrg3794 := len(yyv3794) > 0
			yyv23794 := yyv3794
			yyrl3794, yyrt3794 = z.DecInferLen(yyl3794, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3794 {
				if yyrl3794 <= cap(yyv3794) {
					yyv3794 = yyv3794[:yyrl3794]
				} else {
					yyv3794 = make([]NodeAddress, yyrl3794)
				}
			} else {
				yyv3794 = make([]NodeAddress, yyrl3794)
			}
			yyc3794 = true
			yyrr3794 = len(yyv3794)
			if yyrg3794 {
				copy(yyv3794, yyv23794)
			}
		} else if yyl3794 != len(yyv3794) {
			yyv3794 = yyv3794[:yyl3794]
			yyc3794 = true
		}
		yyj3794 := 0
		for ; yyj3794 < yyrr3794; yyj3794++ {
			yyh3794.ElemContainerState(yyj3794)
			if r.TryDecodeAsNil() {
				yyv3794[yyj3794] = NodeAddress{}
			} else {
				yyv3795 := &yyv3794[yyj3794]
				yyv3795.CodecDecodeSelf(d)
			}

		}
		if yyrt3794 {
			for ; yyj3794 < yyl3794; yyj3794++ {
				yyv3794 = append(yyv3794, NodeAddress{})
				yyh3794.ElemContainerState(yyj3794)
				if r.TryDecodeAsNil() {
					yyv3794[yyj3794] = NodeAddress{}
				} else {
					yyv3796 := &yyv3794[yyj3794]
					yyv3796.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3794 := 0
		for ; !r.CheckBreak(); yyj3794++ {

			if yyj3794 >= len(yyv3794) {
				yyv3794 = append(yyv3794, NodeAddress{}) // var yyz3794 NodeAddress
				yyc3794 = true
			}
			yyh3794.ElemContainerState(yyj3794)
			if yyj3794 < len(yyv3794) {
				if r.TryDecodeAsNil() {
					yyv3794[yyj3794] = NodeAddress{}
				} else {
					yyv3797 := &yyv3794[yyj3794]
					yyv3797.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3794 < len(yyv3794) {
			yyv3794 = yyv3794[:yyj3794]
			yyc3794 = true
		} else if yyj3794 == 0 && yyv3794 == nil {
			yyv3794 = []NodeAddress{}
			yyc3794 = true
		}
	}
	yyh3794.End()
	if yyc3794 {
		*v = yyv3794
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3798 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3799 := &yyv3798
		yy3799.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3800 := *v
	yyh3800, yyl3800 := z.DecSliceHelperStart()
	var yyc3800 bool
	if yyl3800 == 0 {
		if yyv3800 == nil {
			yyv3800 = []ContainerImage{}
			yyc3800 = true
		} else if len(yyv3800) != 0 {
			yyv3800 = yyv3800[:0]
			yyc3800 = true
		}
	} else if yyl3800 > 0 {
		var yyrr3800, yyrl3800 int
		var yyrt3800 bool
		if yyl3800 > cap(yyv3800) {

			yyrg3800 := len(yyv3800) > 0
			yyv23800 := yyv3800
			yyrl3800, yyrt3800 = z.DecInferLen(yyl3800, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3800 {
				if yyrl3800 <= cap(yyv3800) {
					yyv3800 = yyv3800[:yyrl3800]
				} else {
					yyv3800 = make([]ContainerImage, yyrl3800)
				}
			} else {
				yyv3800 = make([]ContainerImage, yyrl3800)
			}
			yyc3800 = true
			yyrr3800 = len(yyv3800)
			if yyrg3800 {
				copy(yyv3800, yyv23800)
			}
		} else if yyl3800 != len(yyv3800) {
			yyv3800 = yyv3800[:yyl3800]
			yyc3800 = true
		}
		yyj3800 := 0
		for ; yyj3800 < yyrr3800; yyj3800++ {
			yyh3800.ElemContainerState(yyj3800)
			if r.TryDecodeAsNil() {
				yyv3800[yyj3800] = ContainerImage{}
			} else {
				yyv3801 := &yyv3800[yyj3800]
				yyv3801.CodecDecodeSelf(d)
			}

		}
		if yyrt3800 {
			for ; yyj3800 < yyl3800; yyj3800++ {
				yyv3800 = append(yyv3800, ContainerImage{})
				yyh3800.ElemContainerState(yyj3800)
				if r.TryDecodeAsNil() {
					yyv3800[yyj3800] = ContainerImage{}
				} else {
					yyv3802 := &yyv3800[yyj3800]
					yyv3802.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3800 := 0
		for ; !r.CheckBreak(); yyj3800++ {

			if yyj3800 >= len(yyv3800) {
				yyv3800 = append(yyv3800, ContainerImage{}) // var yyz3800 ContainerImage
				yyc3800 = true
			}
			yyh3800.ElemContainerState(yyj3800)
			if yyj3800 < len(yyv3800) {
				if r.TryDecodeAsNil() {
					yyv3800[yyj3800] = ContainerImage{}
				} else {
					yyv3803 := &yyv3800[yyj3800]
					yyv3803.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3800 < len(yyv3800) {
			yyv3800 = yyv3800[:yyj3800]
			yyc3800 = true
		} else if yyj3800 == 0 && yyv3800 == nil {
			yyv3800 = []ContainerImage{}
			yyc3800 = true
		}
	}
	yyh3800.End()
	if yyc3800 {
		*v = yyv3800
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3804, yyv3804 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3804.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3805 := &yyv3804
		yym3806 := z.EncBinary()
		_ = yym3806
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3805) {
		} else if !yym3806 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3805)
		} else {
			z.EncFallback(yy3805)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3807 := *v
	yyl3807 := r.ReadMapStart()
	yybh3807 := z.DecBasicHandle()
	if yyv3807 == nil {
		yyrl3807, _ := z.DecInferLen(yyl3807, yybh3807.MaxInitLen, 40)
		yyv3807 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3807)
		*v = yyv3807
	}
	var yymk3807 ResourceName
	var yymv3807 pkg3_resource.Quantity
	var yymg3807 bool
	if yybh3807.MapValueReset {
		yymg3807 = true
	}
	if yyl3807 > 0 {
		for yyj3807 := 0; yyj3807 < yyl3807; yyj3807++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3807 = ""
			} else {
				yymk3807 = ResourceName(r.DecodeString())
			}

			if yymg3807 {
				yymv3807 = yyv3807[yymk3807]
			} else {
				yymv3807 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3807 = pkg3_resource.Quantity{}
			} else {
				yyv3809 := &yymv3807
				yym3810 := z.DecBinary()
				_ = yym3810
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3809) {
				} else if !yym3810 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3809)
				} else {
					z.DecFallback(yyv3809, false)
				}
			}

			if yyv3807 != nil {
				yyv3807[yymk3807] = yymv3807
			}
		}
	} else if yyl3807 < 0 {
		for yyj3807 := 0; !r.CheckBreak(); yyj3807++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3807 = ""
			} else {
				yymk3807 = ResourceName(r.DecodeString())
			}

			if yymg3807 {
				yymv3807 = yyv3807[yymk3807]
			} else {
				yymv3807 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3807 = pkg3_resource.Quantity{}
			} else {
				yyv3812 := &yymv3807
				yym3813 := z.DecBinary()
				_ = yym3813
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3812) {
				} else if !yym3813 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3812)
				} else {
					z.DecFallback(yyv3812, false)
				}
			}

			if yyv3807 != nil {
				yyv3807[yymk3807] = yymv3807
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3814 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3815 := &yyv3814
		yy3815.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3816 := *v
	yyh3816, yyl3816 := z.DecSliceHelperStart()
	var yyc3816 bool
	if yyl3816 == 0 {
		if yyv3816 == nil {
			yyv3816 = []Node{}
			yyc3816 = true
		} else if len(yyv3816) != 0 {
			yyv3816 = yyv3816[:0]
			yyc3816 = true
		}
	} else if yyl3816 > 0 {
		var yyrr3816, yyrl3816 int
		var yyrt3816 bool
		if yyl3816 > cap(yyv3816) {

			yyrg3816 := len(yyv3816) > 0
			yyv23816 := yyv3816
			yyrl3816, yyrt3816 = z.DecInferLen(yyl3816, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt3816 {
				if yyrl3816 <= cap(yyv3816) {
					yyv3816 = yyv3816[:yyrl3816]
				} else {
					yyv3816 = make([]Node, yyrl3816)
				}
			} else {
				yyv3816 = make([]Node, yyrl3816)
			}
			yyc3816 = true
			yyrr3816 = len(yyv3816)
			if yyrg3816 {
				copy(yyv3816, yyv23816)
			}
		} else if yyl3816 != len(yyv3816) {
			yyv3816 = yyv3816[:yyl3816]
			yyc3816 = true
		}
		yyj3816 := 0
		for ; yyj3816 < yyrr3816; yyj3816++ {
			yyh3816.ElemContainerState(yyj3816)
			if r.TryDecodeAsNil() {
				yyv3816[yyj3816] = Node{}
			} else {
				yyv3817 := &yyv3816[yyj3816]
				yyv3817.CodecDecodeSelf(d)
			}

		}
		if yyrt3816 {
			for ; yyj3816 < yyl3816; yyj3816++ {
				yyv3816 = append(yyv3816, Node{})
				yyh3816.ElemContainerState(yyj3816)
				if r.TryDecodeAsNil() {
					yyv3816[yyj3816] = Node{}
				} else {
					yyv3818 := &yyv3816[yyj3816]
					yyv3818.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3816 := 0
		for ; !r.CheckBreak(); yyj3816++ {

			if yyj3816 >= len(yyv3816) {
				yyv3816 = append(yyv3816, Node{}) // var yyz3816 Node
				yyc3816 = true
			}
			yyh3816.ElemContainerState(yyj3816)
			if yyj3816 < len(yyv3816) {
				if r.TryDecodeAsNil() {
					yyv3816[yyj3816] = Node{}
				} else {
					yyv3819 := &yyv3816[yyj3816]
					yyv3819.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3816 < len(yyv3816) {
			yyv3816 = yyv3816[:yyj3816]
			yyc3816 = true
		} else if yyj3816 == 0 && yyv3816 == nil {
			yyv3816 = []Node{}
			yyc3816 = true
		}
	}
	yyh3816.End()
	if yyc3816 {
		*v = yyv3816
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3820 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3820.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3821 := *v
	yyh3821, yyl3821 := z.DecSliceHelperStart()
	var yyc3821 bool
	if yyl3821 == 0 {
		if yyv3821 == nil {
			yyv3821 = []FinalizerName{}
			yyc3821 = true
		} else if len(yyv3821) != 0 {
			yyv3821 = yyv3821[:0]
			yyc3821 = true
		}
	} else if yyl3821 > 0 {
		var yyrr3821, yyrl3821 int
		var yyrt3821 bool
		if yyl3821 > cap(yyv3821) {

			yyrl3821, yyrt3821 = z.DecInferLen(yyl3821, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3821 {
				if yyrl3821 <= cap(yyv3821) {
					yyv3821 = yyv3821[:yyrl3821]
				} else {
					yyv3821 = make([]FinalizerName, yyrl3821)
				}
			} else {
				yyv3821 = make([]FinalizerName, yyrl3821)
			}
			yyc3821 = true
			yyrr3821 = len(yyv3821)
		} else if yyl3821 != len(yyv3821) {
			yyv3821 = yyv3821[:yyl3821]
			yyc3821 = true
		}
		yyj3821 := 0
		for ; yyj3821 < yyrr3821; yyj3821++ {
			yyh3821.ElemContainerState(yyj3821)
			if r.TryDecodeAsNil() {
				yyv3821[yyj3821] = ""
			} else {
				yyv3821[yyj3821] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3821 {
			for ; yyj3821 < yyl3821; yyj3821++ {
				yyv3821 = append(yyv3821, "")
				yyh3821.ElemContainerState(yyj3821)
				if r.TryDecodeAsNil() {
					yyv3821[yyj3821] = ""
				} else {
					yyv3821[yyj3821] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3821 := 0
		for ; !r.CheckBreak(); yyj3821++ {

			if yyj3821 >= len(yyv3821) {
				yyv3821 = append(yyv3821, "") // var yyz3821 FinalizerName
				yyc3821 = true
			}
			yyh3821.ElemContainerState(yyj3821)
			if yyj3821 < len(yyv3821) {
				if r.TryDecodeAsNil() {
					yyv3821[yyj3821] = ""
				} else {
					yyv3821[yyj3821] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3821 < len(yyv3821) {
			yyv3821 = yyv3821[:yyj3821]
			yyc3821 = true
		} else if yyj3821 == 0 && yyv3821 == nil {
			yyv3821 = []FinalizerName{}
			yyc3821 = true
		}
	}
	yyh3821.End()
	if yyc3821 {
		*v = yyv3821
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3825 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3826 := &yyv3825
		yy3826.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3827 := *v
	yyh3827, yyl3827 := z.DecSliceHelperStart()
	var yyc3827 bool
	if yyl3827 == 0 {
		if yyv3827 == nil {
			yyv3827 = []Namespace{}
			yyc3827 = true
		} else if len(yyv3827) != 0 {
			yyv3827 = yyv3827[:0]
			yyc3827 = true
		}
	} else if yyl3827 > 0 {
		var yyrr3827, yyrl3827 int
		var yyrt3827 bool
		if yyl3827 > cap(yyv3827) {

			yyrg3827 := len(yyv3827) > 0
			yyv23827 := yyv3827
			yyrl3827, yyrt3827 = z.DecInferLen(yyl3827, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3827 {
				if yyrl3827 <= cap(yyv3827) {
					yyv3827 = yyv3827[:yyrl3827]
				} else {
					yyv3827 = make([]Namespace, yyrl3827)
				}
			} else {
				yyv3827 = make([]Namespace, yyrl3827)
			}
			yyc3827 = true
			yyrr3827 = len(yyv3827)
			if yyrg3827 {
				copy(yyv3827, yyv23827)
			}
		} else if yyl3827 != len(yyv3827) {
			yyv3827 = yyv3827[:yyl3827]
			yyc3827 = true
		}
		yyj3827 := 0
		for ; yyj3827 < yyrr3827; yyj3827++ {
			yyh3827.ElemContainerState(yyj3827)
			if r.TryDecodeAsNil() {
				yyv3827[yyj3827] = Namespace{}
			} else {
				yyv3828 := &yyv3827[yyj3827]
				yyv3828.CodecDecodeSelf(d)
			}

		}
		if yyrt3827 {
			for ; yyj3827 < yyl3827; yyj3827++ {
				yyv3827 = append(yyv3827, Namespace{})
				yyh3827.ElemContainerState(yyj3827)
				if r.TryDecodeAsNil() {
					yyv3827[yyj3827] = Namespace{}
				} else {
					yyv3829 := &yyv3827[yyj3827]
					yyv3829.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3827 := 0
		for ; !r.CheckBreak(); yyj3827++ {

			if yyj3827 >= len(yyv3827) {
				yyv3827 = append(yyv3827, Namespace{}) // var yyz3827 Namespace
				yyc3827 = true
			}
			yyh3827.ElemContainerState(yyj3827)
			if yyj3827 < len(yyv3827) {
				if r.TryDecodeAsNil() {
					yyv3827[yyj3827] = Namespace{}
				} else {
					yyv3830 := &yyv3827[yyj3827]
					yyv3830.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3827 < len(yyv3827) {
			yyv3827 = yyv3827[:yyj3827]
			yyc3827 = true
		} else if yyj3827 == 0 && yyv3827 == nil {
			yyv3827 = []Namespace{}
			yyc3827 = true
		}
	}
	yyh3827.End()
	if yyc3827 {
		*v = yyv3827
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3831 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3832 := &yyv3831
		yy3832.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3833 := *v
	yyh3833, yyl3833 := z.DecSliceHelperStart()
	var yyc3833 bool
	if yyl3833 == 0 {
		if yyv3833 == nil {
			yyv3833 = []Event{}
			yyc3833 = true
		} else if len(yyv3833) != 0 {
			yyv3833 = yyv3833[:0]
			yyc3833 = true
		}
	} else if yyl3833 > 0 {
		var yyrr3833, yyrl3833 int
		var yyrt3833 bool
		if yyl3833 > cap(yyv3833) {

			yyrg3833 := len(yyv3833) > 0
			yyv23833 := yyv3833
			yyrl3833, yyrt3833 = z.DecInferLen(yyl3833, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3833 {
				if yyrl3833 <= cap(yyv3833) {
					yyv3833 = yyv3833[:yyrl3833]
				} else {
					yyv3833 = make([]Event, yyrl3833)
				}
			} else {
				yyv3833 = make([]Event, yyrl3833)
			}
			yyc3833 = true
			yyrr3833 = len(yyv3833)
			if yyrg3833 {
				copy(yyv3833, yyv23833)
			}
		} else if yyl3833 != len(yyv3833) {
			yyv3833 = yyv3833[:yyl3833]
			yyc3833 = true
		}
		yyj3833 := 0
		for ; yyj3833 < yyrr3833; yyj3833++ {
			yyh3833.ElemContainerState(yyj3833)
			if r.TryDecodeAsNil() {
				yyv3833[yyj3833] = Event{}
			} else {
				yyv3834 := &yyv3833[yyj3833]
				yyv3834.CodecDecodeSelf(d)
			}

		}
		if yyrt3833 {
			for ; yyj3833 < yyl3833; yyj3833++ {
				yyv3833 = append(yyv3833, Event{})
				yyh3833.ElemContainerState(yyj3833)
				if r.TryDecodeAsNil() {
					yyv3833[yyj3833] = Event{}
				} else {
					yyv3835 := &yyv3833[yyj3833]
					yyv3835.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3833 := 0
		for ; !r.CheckBreak(); yyj3833++ {

			if yyj3833 >= len(yyv3833) {
				yyv3833 = append(yyv3833, Event{}) // var yyz3833 Event
				yyc3833 = true
			}
			yyh3833.ElemContainerState(yyj3833)
			if yyj3833 < len(yyv3833) {
				if r.TryDecodeAsNil() {
					yyv3833[yyj3833] = Event{}
				} else {
					yyv3836 := &yyv3833[yyj3833]
					yyv3836.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3833 < len(yyv3833) {
			yyv3833 = yyv3833[:yyj3833]
			yyc3833 = true
		} else if yyj3833 == 0 && yyv3833 == nil {
			yyv3833 = []Event{}
			yyc3833 = true
		}
	}
	yyh3833.End()
	if yyc3833 {
		*v = yyv3833
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3837 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3837 == nil {
			r.EncodeNil()
		} else {
			yym3838 := z.EncBinary()
			_ = yym3838
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3837) {
			} else {
				z.EncFallback(yyv3837)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3839 := *v
	yyh3839, yyl3839 := z.DecSliceHelperStart()
	var yyc3839 bool
	if yyl3839 == 0 {
		if yyv3839 == nil {
			yyv3839 = []pkg8_runtime.Object{}
			yyc3839 = true
		} else if len(yyv3839) != 0 {
			yyv3839 = yyv3839[:0]
			yyc3839 = true
		}
	} else if yyl3839 > 0 {
		var yyrr3839, yyrl3839 int
		var yyrt3839 bool
		if yyl3839 > cap(yyv3839) {

			yyrg3839 := len(yyv3839) > 0
			yyv23839 := yyv3839
			yyrl3839, yyrt3839 = z.DecInferLen(yyl3839, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3839 {
				if yyrl3839 <= cap(yyv3839) {
					yyv3839 = yyv3839[:yyrl3839]
				} else {
					yyv3839 = make([]pkg8_runtime.Object, yyrl3839)
				}
			} else {
				yyv3839 = make([]pkg8_runtime.Object, yyrl3839)
			}
			yyc3839 = true
			yyrr3839 = len(yyv3839)
			if yyrg3839 {
				copy(yyv3839, yyv23839)
			}
		} else if yyl3839 != len(yyv3839) {
			yyv3839 = yyv3839[:yyl3839]
			yyc3839 = true
		}
		yyj3839 := 0
		for ; yyj3839 < yyrr3839; yyj3839++ {
			yyh3839.ElemContainerState(yyj3839)
			if r.TryDecodeAsNil() {
				yyv3839[yyj3839] = nil
			} else {
				yyv3840 := &yyv3839[yyj3839]
				yym3841 := z.DecBinary()
				_ = yym3841
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3840) {
				} else {
					z.DecFallback(yyv3840, true)
				}
			}

		}
		if yyrt3839 {
			for ; yyj3839 < yyl3839; yyj3839++ {
				yyv3839 = append(yyv3839, nil)
				yyh3839.ElemContainerState(yyj3839)
				if r.TryDecodeAsNil() {
					yyv3839[yyj3839] = nil
				} else {
					yyv3842 := &yyv3839[yyj3839]
					yym3843 := z.DecBinary()
					_ = yym3843
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3842) {
					} else {
						z.DecFallback(yyv3842, true)
					}
				}

			}
		}

	} else {
		yyj3839 := 0
		for ; !r.CheckBreak(); yyj3839++ {

			if yyj3839 >= len(yyv3839) {
				yyv3839 = append(yyv3839, nil) // var yyz3839 pkg8_runtime.Object
				yyc3839 = true
			}
			yyh3839.ElemContainerState(yyj3839)
			if yyj3839 < len(yyv3839) {
				if r.TryDecodeAsNil() {
					yyv3839[yyj3839] = nil
				} else {
					yyv3844 := &yyv3839[yyj3839]
					yym3845 := z.DecBinary()
					_ = yym3845
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3844) {
					} else {
						z.DecFallback(yyv3844, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3839 < len(yyv3839) {
			yyv3839 = yyv3839[:yyj3839]
			yyc3839 = true
		} else if yyj3839 == 0 && yyv3839 == nil {
			yyv3839 = []pkg8_runtime.Object{}
			yyc3839 = true
		}
	}
	yyh3839.End()
	if yyc3839 {
		*v = yyv3839
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3846 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3847 := &yyv3846
		yy3847.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3848 := *v
	yyh3848, yyl3848 := z.DecSliceHelperStart()
	var yyc3848 bool
	if yyl3848 == 0 {
		if yyv3848 == nil {
			yyv3848 = []LimitRangeItem{}
			yyc3848 = true
		} else if len(yyv3848) != 0 {
			yyv3848 = yyv3848[:0]
			yyc3848 = true
		}
	} else if yyl3848 > 0 {
		var yyrr3848, yyrl3848 int
		var yyrt3848 bool
		if yyl3848 > cap(yyv3848) {

			yyrg3848 := len(yyv3848) > 0
			yyv23848 := yyv3848
			yyrl3848, yyrt3848 = z.DecInferLen(yyl3848, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3848 {
				if yyrl3848 <= cap(yyv3848) {
					yyv3848 = yyv3848[:yyrl3848]
				} else {
					yyv3848 = make([]LimitRangeItem, yyrl3848)
				}
			} else {
				yyv3848 = make([]LimitRangeItem, yyrl3848)
			}
			yyc3848 = true
			yyrr3848 = len(yyv3848)
			if yyrg3848 {
				copy(yyv3848, yyv23848)
			}
		} else if yyl3848 != len(yyv3848) {
			yyv3848 = yyv3848[:yyl3848]
			yyc3848 = true
		}
		yyj3848 := 0
		for ; yyj3848 < yyrr3848; yyj3848++ {
			yyh3848.ElemContainerState(yyj3848)
			if r.TryDecodeAsNil() {
				yyv3848[yyj3848] = LimitRangeItem{}
			} else {
				yyv3849 := &yyv3848[yyj3848]
				yyv3849.CodecDecodeSelf(d)
			}

		}
		if yyrt3848 {
			for ; yyj3848 < yyl3848; yyj3848++ {
				yyv3848 = append(yyv3848, LimitRangeItem{})
				yyh3848.ElemContainerState(yyj3848)
				if r.TryDecodeAsNil() {
					yyv3848[yyj3848] = LimitRangeItem{}
				} else {
					yyv3850 := &yyv3848[yyj3848]
					yyv3850.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3848 := 0
		for ; !r.CheckBreak(); yyj3848++ {

			if yyj3848 >= len(yyv3848) {
				yyv3848 = append(yyv3848, LimitRangeItem{}) // var yyz3848 LimitRangeItem
				yyc3848 = true
			}
			yyh3848.ElemContainerState(yyj3848)
			if yyj3848 < len(yyv3848) {
				if r.TryDecodeAsNil() {
					yyv3848[yyj3848] = LimitRangeItem{}
				} else {
					yyv3851 := &yyv3848[yyj3848]
					yyv3851.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3848 < len(yyv3848) {
			yyv3848 = yyv3848[:yyj3848]
			yyc3848 = true
		} else if yyj3848 == 0 && yyv3848 == nil {
			yyv3848 = []LimitRangeItem{}
			yyc3848 = true
		}
	}
	yyh3848.End()
	if yyc3848 {
		*v = yyv3848
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3852 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3853 := &yyv3852
		yy3853.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3854 := *v
	yyh3854, yyl3854 := z.DecSliceHelperStart()
	var yyc3854 bool
	if yyl3854 == 0 {
		if yyv3854 == nil {
			yyv3854 = []LimitRange{}
			yyc3854 = true
		} else if len(yyv3854) != 0 {
			yyv3854 = yyv3854[:0]
			yyc3854 = true
		}
	} else if yyl3854 > 0 {
		var yyrr3854, yyrl3854 int
		var yyrt3854 bool
		if yyl3854 > cap(yyv3854) {

			yyrg3854 := len(yyv3854) > 0
			yyv23854 := yyv3854
			yyrl3854, yyrt3854 = z.DecInferLen(yyl3854, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3854 {
				if yyrl3854 <= cap(yyv3854) {
					yyv3854 = yyv3854[:yyrl3854]
				} else {
					yyv3854 = make([]LimitRange, yyrl3854)
				}
			} else {
				yyv3854 = make([]LimitRange, yyrl3854)
			}
			yyc3854 = true
			yyrr3854 = len(yyv3854)
			if yyrg3854 {
				copy(yyv3854, yyv23854)
			}
		} else if yyl3854 != len(yyv3854) {
			yyv3854 = yyv3854[:yyl3854]
			yyc3854 = true
		}
		yyj3854 := 0
		for ; yyj3854 < yyrr3854; yyj3854++ {
			yyh3854.ElemContainerState(yyj3854)
			if r.TryDecodeAsNil() {
				yyv3854[yyj3854] = LimitRange{}
			} else {
				yyv3855 := &yyv3854[yyj3854]
				yyv3855.CodecDecodeSelf(d)
			}

		}
		if yyrt3854 {
			for ; yyj3854 < yyl3854; yyj3854++ {
				yyv3854 = append(yyv3854, LimitRange{})
				yyh3854.ElemContainerState(yyj3854)
				if r.TryDecodeAsNil() {
					yyv3854[yyj3854] = LimitRange{}
				} else {
					yyv3856 := &yyv3854[yyj3854]
					yyv3856.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3854 := 0
		for ; !r.CheckBreak(); yyj3854++ {

			if yyj3854 >= len(yyv3854) {
				yyv3854 = append(yyv3854, LimitRange{}) // var yyz3854 LimitRange
				yyc3854 = true
			}
			yyh3854.ElemContainerState(yyj3854)
			if yyj3854 < len(yyv3854) {
				if r.TryDecodeAsNil() {
					yyv3854[yyj3854] = LimitRange{}
				} else {
					yyv3857 := &yyv3854[yyj3854]
					yyv3857.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3854 < len(yyv3854) {
			yyv3854 = yyv3854[:yyj3854]
			yyc3854 = true
		} else if yyj3854 == 0 && yyv3854 == nil {
			yyv3854 = []LimitRange{}
			yyc3854 = true
		}
	}
	yyh3854.End()
	if yyc3854 {
		*v = yyv3854
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3858 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3859 := &yyv3858
		yy3859.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3860 := *v
	yyh3860, yyl3860 := z.DecSliceHelperStart()
	var yyc3860 bool
	if yyl3860 == 0 {
		if yyv3860 == nil {
			yyv3860 = []ResourceQuota{}
			yyc3860 = true
		} else if len(yyv3860) != 0 {
			yyv3860 = yyv3860[:0]
			yyc3860 = true
		}
	} else if yyl3860 > 0 {
		var yyrr3860, yyrl3860 int
		var yyrt3860 bool
		if yyl3860 > cap(yyv3860) {

			yyrg3860 := len(yyv3860) > 0
			yyv23860 := yyv3860
			yyrl3860, yyrt3860 = z.DecInferLen(yyl3860, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3860 {
				if yyrl3860 <= cap(yyv3860) {
					yyv3860 = yyv3860[:yyrl3860]
				} else {
					yyv3860 = make([]ResourceQuota, yyrl3860)
				}
			} else {
				yyv3860 = make([]ResourceQuota, yyrl3860)
			}
			yyc3860 = true
			yyrr3860 = len(yyv3860)
			if yyrg3860 {
				copy(yyv3860, yyv23860)
			}
		} else if yyl3860 != len(yyv3860) {
			yyv3860 = yyv3860[:yyl3860]
			yyc3860 = true
		}
		yyj3860 := 0
		for ; yyj3860 < yyrr3860; yyj3860++ {
			yyh3860.ElemContainerState(yyj3860)
			if r.TryDecodeAsNil() {
				yyv3860[yyj3860] = ResourceQuota{}
			} else {
				yyv3861 := &yyv3860[yyj3860]
				yyv3861.CodecDecodeSelf(d)
			}

		}
		if yyrt3860 {
			for ; yyj3860 < yyl3860; yyj3860++ {
				yyv3860 = append(yyv3860, ResourceQuota{})
				yyh3860.ElemContainerState(yyj3860)
				if r.TryDecodeAsNil() {
					yyv3860[yyj3860] = ResourceQuota{}
				} else {
					yyv3862 := &yyv3860[yyj3860]
					yyv3862.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3860 := 0
		for ; !r.CheckBreak(); yyj3860++ {

			if yyj3860 >= len(yyv3860) {
				yyv3860 = append(yyv3860, ResourceQuota{}) // var yyz3860 ResourceQuota
				yyc3860 = true
			}
			yyh3860.ElemContainerState(yyj3860)
			if yyj3860 < len(yyv3860) {
				if r.TryDecodeAsNil() {
					yyv3860[yyj3860] = ResourceQuota{}
				} else {
					yyv3863 := &yyv3860[yyj3860]
					yyv3863.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3860 < len(yyv3860) {
			yyv3860 = yyv3860[:yyj3860]
			yyc3860 = true
		} else if yyj3860 == 0 && yyv3860 == nil {
			yyv3860 = []ResourceQuota{}
			yyc3860 = true
		}
	}
	yyh3860.End()
	if yyc3860 {
		*v = yyv3860
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3864, yyv3864 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3865 := z.EncBinary()
		_ = yym3865
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3864))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3864 == nil {
			r.EncodeNil()
		} else {
			yym3866 := z.EncBinary()
			_ = yym3866
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3864))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3867 := *v
	yyl3867 := r.ReadMapStart()
	yybh3867 := z.DecBasicHandle()
	if yyv3867 == nil {
		yyrl3867, _ := z.DecInferLen(yyl3867, yybh3867.MaxInitLen, 40)
		yyv3867 = make(map[string][]uint8, yyrl3867)
		*v = yyv3867
	}
	var yymk3867 string
	var yymv3867 []uint8
	var yymg3867 bool
	if yybh3867.MapValueReset {
		yymg3867 = true
	}
	if yyl3867 > 0 {
		for yyj3867 := 0; yyj3867 < yyl3867; yyj3867++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3867 = ""
			} else {
				yymk3867 = string(r.DecodeString())
			}

			if yymg3867 {
				yymv3867 = yyv3867[yymk3867]
			} else {
				yymv3867 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3867 = nil
			} else {
				yyv3869 := &yymv3867
				yym3870 := z.DecBinary()
				_ = yym3870
				if false {
				} else {
					*yyv3869 = r.DecodeBytes(*(*[]byte)(yyv3869), false, false)
				}
			}

			if yyv3867 != nil {
				yyv3867[yymk3867] = yymv3867
			}
		}
	} else if yyl3867 < 0 {
		for yyj3867 := 0; !r.CheckBreak(); yyj3867++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3867 = ""
			} else {
				yymk3867 = string(r.DecodeString())
			}

			if yymg3867 {
				yymv3867 = yyv3867[yymk3867]
			} else {
				yymv3867 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3867 = nil
			} else {
				yyv3872 := &yymv3867
				yym3873 := z.DecBinary()
				_ = yym3873
				if false {
				} else {
					*yyv3872 = r.DecodeBytes(*(*[]byte)(yyv3872), false, false)
				}
			}

			if yyv3867 != nil {
				yyv3867[yymk3867] = yymv3867
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3874 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3875 := &yyv3874
		yy3875.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3876 := *v
	yyh3876, yyl3876 := z.DecSliceHelperStart()
	var yyc3876 bool
	if yyl3876 == 0 {
		if yyv3876 == nil {
			yyv3876 = []Secret{}
			yyc3876 = true
		} else if len(yyv3876) != 0 {
			yyv3876 = yyv3876[:0]
			yyc3876 = true
		}
	} else if yyl3876 > 0 {
		var yyrr3876, yyrl3876 int
		var yyrt3876 bool
		if yyl3876 > cap(yyv3876) {

			yyrg3876 := len(yyv3876) > 0
			yyv23876 := yyv3876
			yyrl3876, yyrt3876 = z.DecInferLen(yyl3876, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3876 {
				if yyrl3876 <= cap(yyv3876) {
					yyv3876 = yyv3876[:yyrl3876]
				} else {
					yyv3876 = make([]Secret, yyrl3876)
				}
			} else {
				yyv3876 = make([]Secret, yyrl3876)
			}
			yyc3876 = true
			yyrr3876 = len(yyv3876)
			if yyrg3876 {
				copy(yyv3876, yyv23876)
			}
		} else if yyl3876 != len(yyv3876) {
			yyv3876 = yyv3876[:yyl3876]
			yyc3876 = true
		}
		yyj3876 := 0
		for ; yyj3876 < yyrr3876; yyj3876++ {
			yyh3876.ElemContainerState(yyj3876)
			if r.TryDecodeAsNil() {
				yyv3876[yyj3876] = Secret{}
			} else {
				yyv3877 := &yyv3876[yyj3876]
				yyv3877.CodecDecodeSelf(d)
			}

		}
		if yyrt3876 {
			for ; yyj3876 < yyl3876; yyj3876++ {
				yyv3876 = append(yyv3876, Secret{})
				yyh3876.ElemContainerState(yyj3876)
				if r.TryDecodeAsNil() {
					yyv3876[yyj3876] = Secret{}
				} else {
					yyv3878 := &yyv3876[yyj3876]
					yyv3878.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3876 := 0
		for ; !r.CheckBreak(); yyj3876++ {

			if yyj3876 >= len(yyv3876) {
				yyv3876 = append(yyv3876, Secret{}) // var yyz3876 Secret
				yyc3876 = true
			}
			yyh3876.ElemContainerState(yyj3876)
			if yyj3876 < len(yyv3876) {
				if r.TryDecodeAsNil() {
					yyv3876[yyj3876] = Secret{}
				} else {
					yyv3879 := &yyv3876[yyj3876]
					yyv3879.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3876 < len(yyv3876) {
			yyv3876 = yyv3876[:yyj3876]
			yyc3876 = true
		} else if yyj3876 == 0 && yyv3876 == nil {
			yyv3876 = []Secret{}
			yyc3876 = true
		}
	}
	yyh3876.End()
	if yyc3876 {
		*v = yyv3876
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3880 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3881 := &yyv3880
		yy3881.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3882 := *v
	yyh3882, yyl3882 := z.DecSliceHelperStart()
	var yyc3882 bool
	if yyl3882 == 0 {
		if yyv3882 == nil {
			yyv3882 = []ComponentCondition{}
			yyc3882 = true
		} else if len(yyv3882) != 0 {
			yyv3882 = yyv3882[:0]
			yyc3882 = true
		}
	} else if yyl3882 > 0 {
		var yyrr3882, yyrl3882 int
		var yyrt3882 bool
		if yyl3882 > cap(yyv3882) {

			yyrg3882 := len(yyv3882) > 0
			yyv23882 := yyv3882
			yyrl3882, yyrt3882 = z.DecInferLen(yyl3882, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3882 {
				if yyrl3882 <= cap(yyv3882) {
					yyv3882 = yyv3882[:yyrl3882]
				} else {
					yyv3882 = make([]ComponentCondition, yyrl3882)
				}
			} else {
				yyv3882 = make([]ComponentCondition, yyrl3882)
			}
			yyc3882 = true
			yyrr3882 = len(yyv3882)
			if yyrg3882 {
				copy(yyv3882, yyv23882)
			}
		} else if yyl3882 != len(yyv3882) {
			yyv3882 = yyv3882[:yyl3882]
			yyc3882 = true
		}
		yyj3882 := 0
		for ; yyj3882 < yyrr3882; yyj3882++ {
			yyh3882.ElemContainerState(yyj3882)
			if r.TryDecodeAsNil() {
				yyv3882[yyj3882] = ComponentCondition{}
			} else {
				yyv3883 := &yyv3882[yyj3882]
				yyv3883.CodecDecodeSelf(d)
			}

		}
		if yyrt3882 {
			for ; yyj3882 < yyl3882; yyj3882++ {
				yyv3882 = append(yyv3882, ComponentCondition{})
				yyh3882.ElemContainerState(yyj3882)
				if r.TryDecodeAsNil() {
					yyv3882[yyj3882] = ComponentCondition{}
				} else {
					yyv3884 := &yyv3882[yyj3882]
					yyv3884.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3882 := 0
		for ; !r.CheckBreak(); yyj3882++ {

			if yyj3882 >= len(yyv3882) {
				yyv3882 = append(yyv3882, ComponentCondition{}) // var yyz3882 ComponentCondition
				yyc3882 = true
			}
			yyh3882.ElemContainerState(yyj3882)
			if yyj3882 < len(yyv3882) {
				if r.TryDecodeAsNil() {
					yyv3882[yyj3882] = ComponentCondition{}
				} else {
					yyv3885 := &yyv3882[yyj3882]
					yyv3885.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3882 < len(yyv3882) {
			yyv3882 = yyv3882[:yyj3882]
			yyc3882 = true
		} else if yyj3882 == 0 && yyv3882 == nil {
			yyv3882 = []ComponentCondition{}
			yyc3882 = true
		}
	}
	yyh3882.End()
	if yyc3882 {
		*v = yyv3882
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3886 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3887 := &yyv3886
		yy3887.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3888 := *v
	yyh3888, yyl3888 := z.DecSliceHelperStart()
	var yyc3888 bool
	if yyl3888 == 0 {
		if yyv3888 == nil {
			yyv3888 = []ComponentStatus{}
			yyc3888 = true
		} else if len(yyv3888) != 0 {
			yyv3888 = yyv3888[:0]
			yyc3888 = true
		}
	} else if yyl3888 > 0 {
		var yyrr3888, yyrl3888 int
		var yyrt3888 bool
		if yyl3888 > cap(yyv3888) {

			yyrg3888 := len(yyv3888) > 0
			yyv23888 := yyv3888
			yyrl3888, yyrt3888 = z.DecInferLen(yyl3888, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3888 {
				if yyrl3888 <= cap(yyv3888) {
					yyv3888 = yyv3888[:yyrl3888]
				} else {
					yyv3888 = make([]ComponentStatus, yyrl3888)
				}
			} else {
				yyv3888 = make([]ComponentStatus, yyrl3888)
			}
			yyc3888 = true
			yyrr3888 = len(yyv3888)
			if yyrg3888 {
				copy(yyv3888, yyv23888)
			}
		} else if yyl3888 != len(yyv3888) {
			yyv3888 = yyv3888[:yyl3888]
			yyc3888 = true
		}
		yyj3888 := 0
		for ; yyj3888 < yyrr3888; yyj3888++ {
			yyh3888.ElemContainerState(yyj3888)
			if r.TryDecodeAsNil() {
				yyv3888[yyj3888] = ComponentStatus{}
			} else {
				yyv3889 := &yyv3888[yyj3888]
				yyv3889.CodecDecodeSelf(d)
			}

		}
		if yyrt3888 {
			for ; yyj3888 < yyl3888; yyj3888++ {
				yyv3888 = append(yyv3888, ComponentStatus{})
				yyh3888.ElemContainerState(yyj3888)
				if r.TryDecodeAsNil() {
					yyv3888[yyj3888] = ComponentStatus{}
				} else {
					yyv3890 := &yyv3888[yyj3888]
					yyv3890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3888 := 0
		for ; !r.CheckBreak(); yyj3888++ {

			if yyj3888 >= len(yyv3888) {
				yyv3888 = append(yyv3888, ComponentStatus{}) // var yyz3888 ComponentStatus
				yyc3888 = true
			}
			yyh3888.ElemContainerState(yyj3888)
			if yyj3888 < len(yyv3888) {
				if r.TryDecodeAsNil() {
					yyv3888[yyj3888] = ComponentStatus{}
				} else {
					yyv3891 := &yyv3888[yyj3888]
					yyv3891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3888 < len(yyv3888) {
			yyv3888 = yyv3888[:yyj3888]
			yyc3888 = true
		} else if yyj3888 == 0 && yyv3888 == nil {
			yyv3888 = []ComponentStatus{}
			yyc3888 = true
		}
	}
	yyh3888.End()
	if yyc3888 {
		*v = yyv3888
	}
}
