/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [22]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(22)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym126 := z.DecBinary()
	_ = yym126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct127 := r.ContainerType()
		if yyct127 == codecSelferValueTypeMap1234 {
			yyl127 := r.ReadMapStart()
			if yyl127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl127, d)
			}
		} else if yyct127 == codecSelferValueTypeArray1234 {
			yyl127 := r.ReadArrayStart()
			if yyl127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys128Slc
	var yyhl128 bool = l >= 0
	for yyj128 := 0; ; yyj128++ {
		if yyhl128 {
			if yyj128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys128Slc = r.DecodeBytes(yys128Slc, true, true)
		yys128 := string(yys128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys128 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys128)
		} // end switch yys128
	} // end for yyj128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj151 int
	var yyb151 bool
	var yyhl151 bool = l >= 0
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj151++
	if yyhl151 {
		yyb151 = yyj151 > l
	} else {
		yyb151 = r.CheckBreak()
	}
	if yyb151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj151++
		if yyhl151 {
			yyb151 = yyj151 > l
		} else {
			yyb151 = r.CheckBreak()
		}
		if yyb151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym174 := z.EncBinary()
		_ = yym174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep175 := !z.EncBinary()
			yy2arr175 := z.EncBasicHandle().StructToArray
			var yyq175 [21]bool
			_, _, _ = yysep175, yyq175, yy2arr175
			const yyr175 bool = false
			yyq175[0] = x.HostPath != nil
			yyq175[1] = x.EmptyDir != nil
			yyq175[2] = x.GCEPersistentDisk != nil
			yyq175[3] = x.AWSElasticBlockStore != nil
			yyq175[4] = x.GitRepo != nil
			yyq175[5] = x.Secret != nil
			yyq175[6] = x.NFS != nil
			yyq175[7] = x.ISCSI != nil
			yyq175[8] = x.Glusterfs != nil
			yyq175[9] = x.PersistentVolumeClaim != nil
			yyq175[10] = x.RBD != nil
			yyq175[11] = x.Quobyte != nil
			yyq175[12] = x.FlexVolume != nil
			yyq175[13] = x.Cinder != nil
			yyq175[14] = x.CephFS != nil
			yyq175[15] = x.Flocker != nil
			yyq175[16] = x.DownwardAPI != nil
			yyq175[17] = x.FC != nil
			yyq175[18] = x.AzureFile != nil
			yyq175[19] = x.ConfigMap != nil
			yyq175[20] = x.VsphereVolume != nil
			var yynn175 int
			if yyr175 || yy2arr175 {
				r.EncodeArrayStart(21)
			} else {
				yynn175 = 0
				for _, b := range yyq175 {
					if b {
						yynn175++
					}
				}
				r.EncodeMapStart(yynn175)
				yynn175 = 0
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq175[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym197 := z.DecBinary()
	_ = yym197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct198 := r.ContainerType()
		if yyct198 == codecSelferValueTypeMap1234 {
			yyl198 := r.ReadMapStart()
			if yyl198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl198, d)
			}
		} else if yyct198 == codecSelferValueTypeArray1234 {
			yyl198 := r.ReadArrayStart()
			if yyl198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys199Slc
	var yyhl199 bool = l >= 0
	for yyj199 := 0; ; yyj199++ {
		if yyhl199 {
			if yyj199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys199Slc = r.DecodeBytes(yys199Slc, true, true)
		yys199 := string(yys199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys199 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys199)
		} // end switch yys199
	} // end for yyj199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym243 := z.EncBinary()
		_ = yym243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep244 := !z.EncBinary()
			yy2arr244 := z.EncBasicHandle().StructToArray
			var yyq244 [15]bool
			_, _, _ = yysep244, yyq244, yy2arr244
			const yyr244 bool = false
			yyq244[0] = x.GCEPersistentDisk != nil
			yyq244[1] = x.AWSElasticBlockStore != nil
			yyq244[2] = x.HostPath != nil
			yyq244[3] = x.Glusterfs != nil
			yyq244[4] = x.NFS != nil
			yyq244[5] = x.RBD != nil
			yyq244[6] = x.Quobyte != nil
			yyq244[7] = x.ISCSI != nil
			yyq244[8] = x.FlexVolume != nil
			yyq244[9] = x.Cinder != nil
			yyq244[10] = x.CephFS != nil
			yyq244[11] = x.FC != nil
			yyq244[12] = x.Flocker != nil
			yyq244[13] = x.AzureFile != nil
			yyq244[14] = x.VsphereVolume != nil
			var yynn244 int
			if yyr244 || yy2arr244 {
				r.EncodeArrayStart(15)
			} else {
				yynn244 = 0
				for _, b := range yyq244 {
					if b {
						yynn244++
					}
				}
				r.EncodeMapStart(yynn244)
				yynn244 = 0
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq244[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq244[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr244 || yy2arr244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym260 := z.DecBinary()
	_ = yym260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct261 := r.ContainerType()
		if yyct261 == codecSelferValueTypeMap1234 {
			yyl261 := r.ReadMapStart()
			if yyl261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl261, d)
			}
		} else if yyct261 == codecSelferValueTypeArray1234 {
			yyl261 := r.ReadArrayStart()
			if yyl261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys262Slc
	var yyhl262 bool = l >= 0
	for yyj262 := 0; ; yyj262++ {
		if yyhl262 {
			if yyj262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys262Slc = r.DecodeBytes(yys262Slc, true, true)
		yys262 := string(yys262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys262 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys262)
		} // end switch yys262
	} // end for yyj262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj278 int
	var yyb278 bool
	var yyhl278 bool = l >= 0
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj278++
	if yyhl278 {
		yyb278 = yyj278 > l
	} else {
		yyb278 = r.CheckBreak()
	}
	if yyb278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj278++
		if yyhl278 {
			yyb278 = yyj278 > l
		} else {
			yyb278 = r.CheckBreak()
		}
		if yyb278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym294 := z.EncBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep295 := !z.EncBinary()
			yy2arr295 := z.EncBasicHandle().StructToArray
			var yyq295 [2]bool
			_, _, _ = yysep295, yyq295, yy2arr295
			const yyr295 bool = false
			yyq295[1] = x.ReadOnly != false
			var yynn295 int
			if yyr295 || yy2arr295 {
				r.EncodeArrayStart(2)
			} else {
				yynn295 = 1
				for _, b := range yyq295 {
					if b {
						yynn295++
					}
				}
				r.EncodeMapStart(yynn295)
				yynn295 = 0
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym297 := z.EncBinary()
				_ = yym297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym298 := z.EncBinary()
				_ = yym298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[1] {
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym302 := z.DecBinary()
	_ = yym302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct303 := r.ContainerType()
		if yyct303 == codecSelferValueTypeMap1234 {
			yyl303 := r.ReadMapStart()
			if yyl303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl303, d)
			}
		} else if yyct303 == codecSelferValueTypeArray1234 {
			yyl303 := r.ReadArrayStart()
			if yyl303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys304Slc
	var yyhl304 bool = l >= 0
	for yyj304 := 0; ; yyj304++ {
		if yyhl304 {
			if yyj304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys304Slc = r.DecodeBytes(yys304Slc, true, true)
		yys304 := string(yys304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys304 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys304)
		} // end switch yys304
	} // end for yyj304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj307 int
	var yyb307 bool
	var yyhl307 bool = l >= 0
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj307++
		if yyhl307 {
			yyb307 = yyj307 > l
		} else {
			yyb307 = r.CheckBreak()
		}
		if yyb307 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj307-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym310 := z.EncBinary()
		_ = yym310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep311 := !z.EncBinary()
			yy2arr311 := z.EncBasicHandle().StructToArray
			var yyq311 [5]bool
			_, _, _ = yysep311, yyq311, yy2arr311
			const yyr311 bool = false
			yyq311[0] = x.Kind != ""
			yyq311[1] = x.APIVersion != ""
			yyq311[2] = true
			yyq311[3] = true
			yyq311[4] = true
			var yynn311 int
			if yyr311 || yy2arr311 {
				r.EncodeArrayStart(5)
			} else {
				yynn311 = 0
				for _, b := range yyq311 {
					if b {
						yynn311++
					}
				}
				r.EncodeMapStart(yynn311)
				yynn311 = 0
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[0] {
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym314 := z.EncBinary()
					_ = yym314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[1] {
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[2] {
					yy319 := &x.ObjectMeta
					yy319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy320 := &x.ObjectMeta
					yy320.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[3] {
					yy322 := &x.Spec
					yy322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy323 := &x.Spec
					yy323.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[4] {
					yy325 := &x.Status
					yy325.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy326 := &x.Status
					yy326.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym327 := z.DecBinary()
	_ = yym327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct328 := r.ContainerType()
		if yyct328 == codecSelferValueTypeMap1234 {
			yyl328 := r.ReadMapStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl328, d)
			}
		} else if yyct328 == codecSelferValueTypeArray1234 {
			yyl328 := r.ReadArrayStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys329Slc
	var yyhl329 bool = l >= 0
	for yyj329 := 0; ; yyj329++ {
		if yyhl329 {
			if yyj329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys329Slc = r.DecodeBytes(yys329Slc, true, true)
		yys329 := string(yys329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv332 := &x.ObjectMeta
				yyv332.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv333 := &x.Spec
				yyv333.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv334 := &x.Status
				yyv334.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys329)
		} // end switch yys329
	} // end for yyj329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj335 int
	var yyb335 bool
	var yyhl335 bool = l >= 0
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv338 := &x.ObjectMeta
		yyv338.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv339 := &x.Spec
		yyv339.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv340 := &x.Status
		yyv340.CodecDecodeSelf(d)
	}
	for {
		yyj335++
		if yyhl335 {
			yyb335 = yyj335 > l
		} else {
			yyb335 = r.CheckBreak()
		}
		if yyb335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [19]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq342[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq342[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq342[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq342[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq342[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq342[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq342[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq342[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq342[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq342[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq342[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq342[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq342[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq342[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq342[16] = len(x.AccessModes) != 0
			yyq342[17] = x.ClaimRef != nil
			yyq342[18] = x.PersistentVolumeReclaimPolicy != ""
			var yynn342 int
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(19)
			} else {
				yynn342 = 1
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
				yynn342 = 0
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr342 || yy2arr342 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr342 || yy2arr342 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr342 || yy2arr342 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr342 || yy2arr342 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr342 || yy2arr342 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr342 || yy2arr342 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr342 || yy2arr342 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr342 || yy2arr342 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr342 || yy2arr342 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr342 || yy2arr342 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr342 || yy2arr342 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr342 || yy2arr342 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr342 || yy2arr342 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr342 || yy2arr342 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr342 || yy2arr342 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[16] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym360 := z.EncBinary()
						_ = yym360
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym361 := z.EncBinary()
						_ = yym361
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[17] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[18] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym364 := z.DecBinary()
	_ = yym364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct365 := r.ContainerType()
		if yyct365 == codecSelferValueTypeMap1234 {
			yyl365 := r.ReadMapStart()
			if yyl365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl365, d)
			}
		} else if yyct365 == codecSelferValueTypeArray1234 {
			yyl365 := r.ReadArrayStart()
			if yyl365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys366Slc
	var yyhl366 bool = l >= 0
	for yyj366 := 0; ; yyj366++ {
		if yyhl366 {
			if yyj366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys366Slc = r.DecodeBytes(yys366Slc, true, true)
		yys366 := string(yys366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys366 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv367 := &x.Capacity
				yyv367.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv383 := &x.AccessModes
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv383), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys366)
		} // end switch yys366
	} // end for yyj366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj387 int
	var yyb387 bool
	var yyhl387 bool = l >= 0
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv388 := &x.Capacity
		yyv388.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv404 := &x.AccessModes
		yym405 := z.DecBinary()
		_ = yym405
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv404), d)
		}
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj387++
		if yyhl387 {
			yyb387 = yyj387 > l
		} else {
			yyb387 = r.CheckBreak()
		}
		if yyb387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym408 := z.EncBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym409 := z.DecBinary()
	_ = yym409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym410 := z.EncBinary()
		_ = yym410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep411 := !z.EncBinary()
			yy2arr411 := z.EncBasicHandle().StructToArray
			var yyq411 [3]bool
			_, _, _ = yysep411, yyq411, yy2arr411
			const yyr411 bool = false
			yyq411[0] = x.Phase != ""
			yyq411[1] = x.Message != ""
			yyq411[2] = x.Reason != ""
			var yynn411 int
			if yyr411 || yy2arr411 {
				r.EncodeArrayStart(3)
			} else {
				yynn411 = 0
				for _, b := range yyq411 {
					if b {
						yynn411++
					}
				}
				r.EncodeMapStart(yynn411)
				yynn411 = 0
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[1] {
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq411[2] {
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr411 || yy2arr411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym419 := z.DecBinary()
	_ = yym419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct420 := r.ContainerType()
		if yyct420 == codecSelferValueTypeMap1234 {
			yyl420 := r.ReadMapStart()
			if yyl420 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl420, d)
			}
		} else if yyct420 == codecSelferValueTypeArray1234 {
			yyl420 := r.ReadArrayStart()
			if yyl420 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys421Slc
	var yyhl421 bool = l >= 0
	for yyj421 := 0; ; yyj421++ {
		if yyhl421 {
			if yyj421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys421Slc = r.DecodeBytes(yys421Slc, true, true)
		yys421 := string(yys421Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys421 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys421)
		} // end switch yys421
	} // end for yyj421
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym429 := z.EncBinary()
		_ = yym429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep430 := !z.EncBinary()
			yy2arr430 := z.EncBasicHandle().StructToArray
			var yyq430 [4]bool
			_, _, _ = yysep430, yyq430, yy2arr430
			const yyr430 bool = false
			yyq430[0] = x.Kind != ""
			yyq430[1] = x.APIVersion != ""
			yyq430[2] = true
			var yynn430 int
			if yyr430 || yy2arr430 {
				r.EncodeArrayStart(4)
			} else {
				yynn430 = 1
				for _, b := range yyq430 {
					if b {
						yynn430++
					}
				}
				r.EncodeMapStart(yynn430)
				yynn430 = 0
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq430[0] {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq430[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq430[1] {
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq430[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq430[2] {
					yy438 := &x.ListMeta
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else if z.HasExtensions() && z.EncExt(yy438) {
					} else {
						z.EncFallback(yy438)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq430[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy440 := &x.ListMeta
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else {
						z.EncFallback(yy440)
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr430 || yy2arr430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct446 := r.ContainerType()
		if yyct446 == codecSelferValueTypeMap1234 {
			yyl446 := r.ReadMapStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl446, d)
			}
		} else if yyct446 == codecSelferValueTypeArray1234 {
			yyl446 := r.ReadArrayStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys447Slc
	var yyhl447 bool = l >= 0
	for yyj447 := 0; ; yyj447++ {
		if yyhl447 {
			if yyj447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys447Slc = r.DecodeBytes(yys447Slc, true, true)
		yys447 := string(yys447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys447 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv450 := &x.ListMeta
				yym451 := z.DecBinary()
				_ = yym451
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv450) {
				} else {
					z.DecFallback(yyv450, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv452 := &x.Items
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv452), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys447)
		} // end switch yys447
	} // end for yyj447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj454 int
	var yyb454 bool
	var yyhl454 bool = l >= 0
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv457 := &x.ListMeta
		yym458 := z.DecBinary()
		_ = yym458
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv457) {
		} else {
			z.DecFallback(yyv457, false)
		}
	}
	yyj454++
	if yyhl454 {
		yyb454 = yyj454 > l
	} else {
		yyb454 = r.CheckBreak()
	}
	if yyb454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv459 := &x.Items
		yym460 := z.DecBinary()
		_ = yym460
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv459), d)
		}
	}
	for {
		yyj454++
		if yyhl454 {
			yyb454 = yyj454 > l
		} else {
			yyb454 = r.CheckBreak()
		}
		if yyb454 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj454-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym461 := z.EncBinary()
		_ = yym461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep462 := !z.EncBinary()
			yy2arr462 := z.EncBasicHandle().StructToArray
			var yyq462 [5]bool
			_, _, _ = yysep462, yyq462, yy2arr462
			const yyr462 bool = false
			yyq462[0] = x.Kind != ""
			yyq462[1] = x.APIVersion != ""
			yyq462[2] = true
			yyq462[3] = true
			yyq462[4] = true
			var yynn462 int
			if yyr462 || yy2arr462 {
				r.EncodeArrayStart(5)
			} else {
				yynn462 = 0
				for _, b := range yyq462 {
					if b {
						yynn462++
					}
				}
				r.EncodeMapStart(yynn462)
				yynn462 = 0
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[0] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[1] {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[2] {
					yy470 := &x.ObjectMeta
					yy470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy471 := &x.ObjectMeta
					yy471.CodecEncodeSelf(e)
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[3] {
					yy473 := &x.Spec
					yy473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy474 := &x.Spec
					yy474.CodecEncodeSelf(e)
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[4] {
					yy476 := &x.Status
					yy476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy477 := &x.Status
					yy477.CodecEncodeSelf(e)
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym478 := z.DecBinary()
	_ = yym478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct479 := r.ContainerType()
		if yyct479 == codecSelferValueTypeMap1234 {
			yyl479 := r.ReadMapStart()
			if yyl479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl479, d)
			}
		} else if yyct479 == codecSelferValueTypeArray1234 {
			yyl479 := r.ReadArrayStart()
			if yyl479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys480Slc
	var yyhl480 bool = l >= 0
	for yyj480 := 0; ; yyj480++ {
		if yyhl480 {
			if yyj480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys480Slc = r.DecodeBytes(yys480Slc, true, true)
		yys480 := string(yys480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv483 := &x.ObjectMeta
				yyv483.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv484 := &x.Spec
				yyv484.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv485 := &x.Status
				yyv485.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys480)
		} // end switch yys480
	} // end for yyj480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj486 int
	var yyb486 bool
	var yyhl486 bool = l >= 0
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv489 := &x.ObjectMeta
		yyv489.CodecDecodeSelf(d)
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv490 := &x.Spec
		yyv490.CodecDecodeSelf(d)
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv491 := &x.Status
		yyv491.CodecDecodeSelf(d)
	}
	for {
		yyj486++
		if yyhl486 {
			yyb486 = yyj486 > l
		} else {
			yyb486 = r.CheckBreak()
		}
		if yyb486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym492 := z.EncBinary()
		_ = yym492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep493 := !z.EncBinary()
			yy2arr493 := z.EncBasicHandle().StructToArray
			var yyq493 [4]bool
			_, _, _ = yysep493, yyq493, yy2arr493
			const yyr493 bool = false
			yyq493[0] = x.Kind != ""
			yyq493[1] = x.APIVersion != ""
			yyq493[2] = true
			var yynn493 int
			if yyr493 || yy2arr493 {
				r.EncodeArrayStart(4)
			} else {
				yynn493 = 1
				for _, b := range yyq493 {
					if b {
						yynn493++
					}
				}
				r.EncodeMapStart(yynn493)
				yynn493 = 0
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[0] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[1] {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[2] {
					yy501 := &x.ListMeta
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy501) {
					} else {
						z.EncFallback(yy501)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy503 := &x.ListMeta
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy503) {
					} else {
						z.EncFallback(yy503)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct509 := r.ContainerType()
		if yyct509 == codecSelferValueTypeMap1234 {
			yyl509 := r.ReadMapStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl509, d)
			}
		} else if yyct509 == codecSelferValueTypeArray1234 {
			yyl509 := r.ReadArrayStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys510Slc
	var yyhl510 bool = l >= 0
	for yyj510 := 0; ; yyj510++ {
		if yyhl510 {
			if yyj510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys510Slc = r.DecodeBytes(yys510Slc, true, true)
		yys510 := string(yys510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv513 := &x.ListMeta
				yym514 := z.DecBinary()
				_ = yym514
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv513) {
				} else {
					z.DecFallback(yyv513, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv515 := &x.Items
				yym516 := z.DecBinary()
				_ = yym516
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv515), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys510)
		} // end switch yys510
	} // end for yyj510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv520 := &x.ListMeta
		yym521 := z.DecBinary()
		_ = yym521
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv520) {
		} else {
			z.DecFallback(yyv520, false)
		}
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv522 := &x.Items
		yym523 := z.DecBinary()
		_ = yym523
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv522), d)
		}
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym524 := z.EncBinary()
		_ = yym524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep525 := !z.EncBinary()
			yy2arr525 := z.EncBasicHandle().StructToArray
			var yyq525 [4]bool
			_, _, _ = yysep525, yyq525, yy2arr525
			const yyr525 bool = false
			yyq525[0] = len(x.AccessModes) != 0
			yyq525[1] = x.Selector != nil
			yyq525[2] = true
			yyq525[3] = x.VolumeName != ""
			var yynn525 int
			if yyr525 || yy2arr525 {
				r.EncodeArrayStart(4)
			} else {
				yynn525 = 0
				for _, b := range yyq525 {
					if b {
						yynn525++
					}
				}
				r.EncodeMapStart(yynn525)
				yynn525 = 0
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym527 := z.EncBinary()
						_ = yym527
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym528 := z.EncBinary()
						_ = yym528
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym530 := z.EncBinary()
						_ = yym530
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym531 := z.EncBinary()
						_ = yym531
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[2] {
					yy533 := &x.Resources
					yy533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy534 := &x.Resources
					yy534.CodecEncodeSelf(e)
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[3] {
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq525[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym537 := z.EncBinary()
					_ = yym537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym538 := z.DecBinary()
	_ = yym538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct539 := r.ContainerType()
		if yyct539 == codecSelferValueTypeMap1234 {
			yyl539 := r.ReadMapStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl539, d)
			}
		} else if yyct539 == codecSelferValueTypeArray1234 {
			yyl539 := r.ReadArrayStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys540Slc
	var yyhl540 bool = l >= 0
	for yyj540 := 0; ; yyj540++ {
		if yyhl540 {
			if yyj540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys540Slc = r.DecodeBytes(yys540Slc, true, true)
		yys540 := string(yys540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys540 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv541 := &x.AccessModes
				yym542 := z.DecBinary()
				_ = yym542
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv541), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym544 := z.DecBinary()
				_ = yym544
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv545 := &x.Resources
				yyv545.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys540)
		} // end switch yys540
	} // end for yyj540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj547 int
	var yyb547 bool
	var yyhl547 bool = l >= 0
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv548 := &x.AccessModes
		yym549 := z.DecBinary()
		_ = yym549
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym551 := z.DecBinary()
		_ = yym551
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv552 := &x.Resources
		yyv552.CodecDecodeSelf(d)
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj547++
		if yyhl547 {
			yyb547 = yyj547 > l
		} else {
			yyb547 = r.CheckBreak()
		}
		if yyb547 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj547-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym554 := z.EncBinary()
		_ = yym554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep555 := !z.EncBinary()
			yy2arr555 := z.EncBasicHandle().StructToArray
			var yyq555 [3]bool
			_, _, _ = yysep555, yyq555, yy2arr555
			const yyr555 bool = false
			yyq555[0] = x.Phase != ""
			yyq555[1] = len(x.AccessModes) != 0
			yyq555[2] = len(x.Capacity) != 0
			var yynn555 int
			if yyr555 || yy2arr555 {
				r.EncodeArrayStart(3)
			} else {
				yynn555 = 0
				for _, b := range yyq555 {
					if b {
						yynn555++
					}
				}
				r.EncodeMapStart(yynn555)
				yynn555 = 0
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym558 := z.EncBinary()
						_ = yym558
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym559 := z.EncBinary()
						_ = yym559
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct562 := r.ContainerType()
		if yyct562 == codecSelferValueTypeMap1234 {
			yyl562 := r.ReadMapStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl562, d)
			}
		} else if yyct562 == codecSelferValueTypeArray1234 {
			yyl562 := r.ReadArrayStart()
			if yyl562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys563Slc
	var yyhl563 bool = l >= 0
	for yyj563 := 0; ; yyj563++ {
		if yyhl563 {
			if yyj563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys563Slc = r.DecodeBytes(yys563Slc, true, true)
		yys563 := string(yys563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys563 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv567 := &x.Capacity
				yyv567.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys563)
		} // end switch yys563
	} // end for yyj563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj568 int
	var yyb568 bool
	var yyhl568 bool = l >= 0
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv570 := &x.AccessModes
		yym571 := z.DecBinary()
		_ = yym571
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv570), d)
		}
	}
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv572 := &x.Capacity
		yyv572.CodecDecodeSelf(d)
	}
	for {
		yyj568++
		if yyhl568 {
			yyb568 = yyj568 > l
		} else {
			yyb568 = r.CheckBreak()
		}
		if yyb568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym573 := z.EncBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym575 := z.EncBinary()
	_ = yym575
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym577 := z.EncBinary()
	_ = yym577
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym578 := z.DecBinary()
	_ = yym578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym579 := z.EncBinary()
		_ = yym579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep580 := !z.EncBinary()
			yy2arr580 := z.EncBasicHandle().StructToArray
			var yyq580 [1]bool
			_, _, _ = yysep580, yyq580, yy2arr580
			const yyr580 bool = false
			var yynn580 int
			if yyr580 || yy2arr580 {
				r.EncodeArrayStart(1)
			} else {
				yynn580 = 1
				for _, b := range yyq580 {
					if b {
						yynn580++
					}
				}
				r.EncodeMapStart(yynn580)
				yynn580 = 0
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym582 := z.EncBinary()
				_ = yym582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym583 := z.EncBinary()
				_ = yym583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym584 := z.DecBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct585 := r.ContainerType()
		if yyct585 == codecSelferValueTypeMap1234 {
			yyl585 := r.ReadMapStart()
			if yyl585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl585, d)
			}
		} else if yyct585 == codecSelferValueTypeArray1234 {
			yyl585 := r.ReadArrayStart()
			if yyl585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys586Slc
	var yyhl586 bool = l >= 0
	for yyj586 := 0; ; yyj586++ {
		if yyhl586 {
			if yyj586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys586Slc = r.DecodeBytes(yys586Slc, true, true)
		yys586 := string(yys586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys586 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys586)
		} // end switch yys586
	} // end for yyj586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj588 int
	var yyb588 bool
	var yyhl588 bool = l >= 0
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj588++
		if yyhl588 {
			yyb588 = yyj588 > l
		} else {
			yyb588 = r.CheckBreak()
		}
		if yyb588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [1]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Medium != ""
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(1)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym593 := z.DecBinary()
	_ = yym593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct594 := r.ContainerType()
		if yyct594 == codecSelferValueTypeMap1234 {
			yyl594 := r.ReadMapStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl594, d)
			}
		} else if yyct594 == codecSelferValueTypeArray1234 {
			yyl594 := r.ReadArrayStart()
			if yyl594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys595Slc
	var yyhl595 bool = l >= 0
	for yyj595 := 0; ; yyj595++ {
		if yyhl595 {
			if yyj595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys595Slc = r.DecodeBytes(yys595Slc, true, true)
		yys595 := string(yys595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys595 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys595)
		} // end switch yys595
	} // end for yyj595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj597 int
	var yyb597 bool
	var yyhl597 bool = l >= 0
	yyj597++
	if yyhl597 {
		yyb597 = yyj597 > l
	} else {
		yyb597 = r.CheckBreak()
	}
	if yyb597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj597++
		if yyhl597 {
			yyb597 = yyj597 > l
		} else {
			yyb597 = r.CheckBreak()
		}
		if yyb597 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj597-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [4]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			yyq604[1] = x.FSType != ""
			yyq604[2] = x.Partition != 0
			yyq604[3] = x.ReadOnly != false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(4)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[1] {
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq604[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[2] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq604[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq604[3] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq604[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [6]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[0] = x.TargetPortal != ""
			yyq630[1] = x.IQN != ""
			yyq630[2] = x.Lun != 0
			yyq630[3] = x.ISCSIInterface != ""
			yyq630[4] = x.FSType != ""
			yyq630[5] = x.ReadOnly != false
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(6)
			} else {
				yynn630 = 0
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[0] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[1] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[3] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[4] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[5] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym649 := z.DecBinary()
	_ = yym649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct650 := r.ContainerType()
		if yyct650 == codecSelferValueTypeMap1234 {
			yyl650 := r.ReadMapStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl650, d)
			}
		} else if yyct650 == codecSelferValueTypeArray1234 {
			yyl650 := r.ReadArrayStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys651Slc
	var yyhl651 bool = l >= 0
	for yyj651 := 0; ; yyj651++ {
		if yyhl651 {
			if yyj651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys651Slc = r.DecodeBytes(yys651Slc, true, true)
		yys651 := string(yys651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys651 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys651)
		} // end switch yys651
	} // end for yyj651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj658 int
	var yyb658 bool
	var yyhl658 bool = l >= 0
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj658++
		if yyhl658 {
			yyb658 = yyj658 > l
		} else {
			yyb658 = r.CheckBreak()
		}
		if yyb658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [4]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.FSType != ""
			yyq666[3] = x.ReadOnly != false
			var yynn666 int
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(4)
			} else {
				yynn666 = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
				yynn666 = 0
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy671 := *x.Lun
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeInt(int64(yy671))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy673 := *x.Lun
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeInt(int64(yy673))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[2] {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[3] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct682 := r.ContainerType()
		if yyct682 == codecSelferValueTypeMap1234 {
			yyl682 := r.ReadMapStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl682, d)
			}
		} else if yyct682 == codecSelferValueTypeArray1234 {
			yyl682 := r.ReadArrayStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys683Slc
	var yyhl683 bool = l >= 0
	for yyj683 := 0; ; yyj683++ {
		if yyhl683 {
			if yyj683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys683Slc = r.DecodeBytes(yys683Slc, true, true)
		yys683 := string(yys683Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys683 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv684 := &x.TargetWWNs
				yym685 := z.DecBinary()
				_ = yym685
				if false {
				} else {
					z.F.DecSliceStringX(yyv684, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym687 := z.DecBinary()
				_ = yym687
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys683)
		} // end switch yys683
	} // end for yyj683
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv691 := &x.TargetWWNs
		yym692 := z.DecBinary()
		_ = yym692
		if false {
		} else {
			z.F.DecSliceStringX(yyv691, false, d)
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym694 := z.DecBinary()
		_ = yym694
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym697 := z.EncBinary()
		_ = yym697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep698 := !z.EncBinary()
			yy2arr698 := z.EncBasicHandle().StructToArray
			var yyq698 [5]bool
			_, _, _ = yysep698, yyq698, yy2arr698
			const yyr698 bool = false
			yyq698[1] = x.FSType != ""
			yyq698[2] = x.SecretRef != nil
			yyq698[3] = x.ReadOnly != false
			yyq698[4] = len(x.Options) != 0
			var yynn698 int
			if yyr698 || yy2arr698 {
				r.EncodeArrayStart(5)
			} else {
				yynn698 = 1
				for _, b := range yyq698 {
					if b {
						yynn698++
					}
				}
				r.EncodeMapStart(yynn698)
				yynn698 = 0
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym701 := z.EncBinary()
				_ = yym701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[1] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq698[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[3] {
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq698[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym710 := z.EncBinary()
						_ = yym710
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym711 := z.EncBinary()
						_ = yym711
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv719 := &x.Options
				yym720 := z.DecBinary()
				_ = yym720
				if false {
				} else {
					z.F.DecMapStringStringX(yyv719, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj721 int
	var yyb721 bool
	var yyhl721 bool = l >= 0
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj721++
	if yyhl721 {
		yyb721 = yyj721 > l
	} else {
		yyb721 = r.CheckBreak()
	}
	if yyb721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv726 := &x.Options
		yym727 := z.DecBinary()
		_ = yym727
		if false {
		} else {
			z.F.DecMapStringStringX(yyv726, false, d)
		}
	}
	for {
		yyj721++
		if yyhl721 {
			yyb721 = yyj721 > l
		} else {
			yyb721 = r.CheckBreak()
		}
		if yyb721 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj721-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym728 := z.EncBinary()
		_ = yym728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep729 := !z.EncBinary()
			yy2arr729 := z.EncBasicHandle().StructToArray
			var yyq729 [4]bool
			_, _, _ = yysep729, yyq729, yy2arr729
			const yyr729 bool = false
			yyq729[1] = x.FSType != ""
			yyq729[2] = x.Partition != 0
			yyq729[3] = x.ReadOnly != false
			var yynn729 int
			if yyr729 || yy2arr729 {
				r.EncodeArrayStart(4)
			} else {
				yynn729 = 1
				for _, b := range yyq729 {
					if b {
						yynn729++
					}
				}
				r.EncodeMapStart(yynn729)
				yynn729 = 0
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym732 := z.EncBinary()
				_ = yym732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[1] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq729[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[2] {
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[3] {
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq729[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym742 := z.DecBinary()
	_ = yym742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct743 := r.ContainerType()
		if yyct743 == codecSelferValueTypeMap1234 {
			yyl743 := r.ReadMapStart()
			if yyl743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl743, d)
			}
		} else if yyct743 == codecSelferValueTypeArray1234 {
			yyl743 := r.ReadArrayStart()
			if yyl743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys744Slc
	var yyhl744 bool = l >= 0
	for yyj744 := 0; ; yyj744++ {
		if yyhl744 {
			if yyj744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys744Slc = r.DecodeBytes(yys744Slc, true, true)
		yys744 := string(yys744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys744 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys744)
		} // end switch yys744
	} // end for yyj744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym754 := z.EncBinary()
		_ = yym754
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep755 := !z.EncBinary()
			yy2arr755 := z.EncBasicHandle().StructToArray
			var yyq755 [3]bool
			_, _, _ = yysep755, yyq755, yy2arr755
			const yyr755 bool = false
			yyq755[1] = x.Revision != ""
			yyq755[2] = x.Directory != ""
			var yynn755 int
			if yyr755 || yy2arr755 {
				r.EncodeArrayStart(3)
			} else {
				yynn755 = 1
				for _, b := range yyq755 {
					if b {
						yynn755++
					}
				}
				r.EncodeMapStart(yynn755)
				yynn755 = 0
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym758 := z.EncBinary()
				_ = yym758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[1] {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq755[2] {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq755[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr755 || yy2arr755 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym765 := z.DecBinary()
	_ = yym765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct766 := r.ContainerType()
		if yyct766 == codecSelferValueTypeMap1234 {
			yyl766 := r.ReadMapStart()
			if yyl766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl766, d)
			}
		} else if yyct766 == codecSelferValueTypeArray1234 {
			yyl766 := r.ReadArrayStart()
			if yyl766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys767Slc
	var yyhl767 bool = l >= 0
	for yyj767 := 0; ; yyj767++ {
		if yyhl767 {
			if yyj767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys767Slc = r.DecodeBytes(yys767Slc, true, true)
		yys767 := string(yys767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys767 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys767)
		} // end switch yys767
	} // end for yyj767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj771 int
	var yyb771 bool
	var yyhl771 bool = l >= 0
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj771++
		if yyhl771 {
			yyb771 = yyj771 > l
		} else {
			yyb771 = r.CheckBreak()
		}
		if yyb771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym775 := z.EncBinary()
		_ = yym775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep776 := !z.EncBinary()
			yy2arr776 := z.EncBasicHandle().StructToArray
			var yyq776 [3]bool
			_, _, _ = yysep776, yyq776, yy2arr776
			const yyr776 bool = false
			yyq776[0] = x.SecretName != ""
			yyq776[1] = len(x.Items) != 0
			yyq776[2] = x.DefaultMode != nil
			var yynn776 int
			if yyr776 || yy2arr776 {
				r.EncodeArrayStart(3)
			} else {
				yynn776 = 0
				for _, b := range yyq776 {
					if b {
						yynn776++
					}
				}
				r.EncodeMapStart(yynn776)
				yynn776 = 0
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq776[0] {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq776[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq776[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym781 := z.EncBinary()
						_ = yym781
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq776[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym782 := z.EncBinary()
						_ = yym782
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq776[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy784 := *x.DefaultMode
						yym785 := z.EncBinary()
						_ = yym785
						if false {
						} else {
							r.EncodeInt(int64(yy784))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq776[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy786 := *x.DefaultMode
						yym787 := z.EncBinary()
						_ = yym787
						if false {
						} else {
							r.EncodeInt(int64(yy786))
						}
					}
				}
			}
			if yyr776 || yy2arr776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct789 := r.ContainerType()
		if yyct789 == codecSelferValueTypeMap1234 {
			yyl789 := r.ReadMapStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl789, d)
			}
		} else if yyct789 == codecSelferValueTypeArray1234 {
			yyl789 := r.ReadArrayStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys790Slc
	var yyhl790 bool = l >= 0
	for yyj790 := 0; ; yyj790++ {
		if yyhl790 {
			if yyj790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys790Slc = r.DecodeBytes(yys790Slc, true, true)
		yys790 := string(yys790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys790 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv792 := &x.Items
				yym793 := z.DecBinary()
				_ = yym793
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv792), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym795 := z.DecBinary()
				_ = yym795
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys790)
		} // end switch yys790
	} // end for yyj790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv798 := &x.Items
		yym799 := z.DecBinary()
		_ = yym799
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv798), d)
		}
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym801 := z.DecBinary()
		_ = yym801
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym802 := z.EncBinary()
		_ = yym802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep803 := !z.EncBinary()
			yy2arr803 := z.EncBasicHandle().StructToArray
			var yyq803 [3]bool
			_, _, _ = yysep803, yyq803, yy2arr803
			const yyr803 bool = false
			yyq803[2] = x.ReadOnly != false
			var yynn803 int
			if yyr803 || yy2arr803 {
				r.EncodeArrayStart(3)
			} else {
				yynn803 = 2
				for _, b := range yyq803 {
					if b {
						yynn803++
					}
				}
				r.EncodeMapStart(yynn803)
				yynn803 = 0
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[2] {
					yym811 := z.EncBinary()
					_ = yym811
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym813 := z.DecBinary()
	_ = yym813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct814 := r.ContainerType()
		if yyct814 == codecSelferValueTypeMap1234 {
			yyl814 := r.ReadMapStart()
			if yyl814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl814, d)
			}
		} else if yyct814 == codecSelferValueTypeArray1234 {
			yyl814 := r.ReadArrayStart()
			if yyl814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys815Slc
	var yyhl815 bool = l >= 0
	for yyj815 := 0; ; yyj815++ {
		if yyhl815 {
			if yyj815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys815Slc = r.DecodeBytes(yys815Slc, true, true)
		yys815 := string(yys815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys815 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys815)
		} // end switch yys815
	} // end for yyj815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym823 := z.EncBinary()
		_ = yym823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep824 := !z.EncBinary()
			yy2arr824 := z.EncBasicHandle().StructToArray
			var yyq824 [5]bool
			_, _, _ = yysep824, yyq824, yy2arr824
			const yyr824 bool = false
			yyq824[2] = x.ReadOnly != false
			yyq824[3] = x.User != ""
			yyq824[4] = x.Group != ""
			var yynn824 int
			if yyr824 || yy2arr824 {
				r.EncodeArrayStart(5)
			} else {
				yynn824 = 2
				for _, b := range yyq824 {
					if b {
						yynn824++
					}
				}
				r.EncodeMapStart(yynn824)
				yynn824 = 0
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq824[2] {
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq824[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq824[3] {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq824[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq824[4] {
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq824[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr824 || yy2arr824 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym840 := z.DecBinary()
	_ = yym840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct841 := r.ContainerType()
		if yyct841 == codecSelferValueTypeMap1234 {
			yyl841 := r.ReadMapStart()
			if yyl841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl841, d)
			}
		} else if yyct841 == codecSelferValueTypeArray1234 {
			yyl841 := r.ReadArrayStart()
			if yyl841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys842Slc
	var yyhl842 bool = l >= 0
	for yyj842 := 0; ; yyj842++ {
		if yyhl842 {
			if yyj842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys842Slc = r.DecodeBytes(yys842Slc, true, true)
		yys842 := string(yys842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys842 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys842)
		} // end switch yys842
	} // end for yyj842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj848 int
	var yyb848 bool
	var yyhl848 bool = l >= 0
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj848++
		if yyhl848 {
			yyb848 = yyj848 > l
		} else {
			yyb848 = r.CheckBreak()
		}
		if yyb848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym854 := z.EncBinary()
		_ = yym854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep855 := !z.EncBinary()
			yy2arr855 := z.EncBasicHandle().StructToArray
			var yyq855 [3]bool
			_, _, _ = yysep855, yyq855, yy2arr855
			const yyr855 bool = false
			yyq855[2] = x.ReadOnly != false
			var yynn855 int
			if yyr855 || yy2arr855 {
				r.EncodeArrayStart(3)
			} else {
				yynn855 = 2
				for _, b := range yyq855 {
					if b {
						yynn855++
					}
				}
				r.EncodeMapStart(yynn855)
				yynn855 = 0
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym857 := z.EncBinary()
				_ = yym857
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym860 := z.EncBinary()
				_ = yym860
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq855[2] {
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr855 || yy2arr855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym865 := z.DecBinary()
	_ = yym865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct866 := r.ContainerType()
		if yyct866 == codecSelferValueTypeMap1234 {
			yyl866 := r.ReadMapStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl866, d)
			}
		} else if yyct866 == codecSelferValueTypeArray1234 {
			yyl866 := r.ReadArrayStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys867Slc
	var yyhl867 bool = l >= 0
	for yyj867 := 0; ; yyj867++ {
		if yyhl867 {
			if yyj867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys867Slc = r.DecodeBytes(yys867Slc, true, true)
		yys867 := string(yys867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys867 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys867)
		} // end switch yys867
	} // end for yyj867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj871 int
	var yyb871 bool
	var yyhl871 bool = l >= 0
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj871++
		if yyhl871 {
			yyb871 = yyj871 > l
		} else {
			yyb871 = r.CheckBreak()
		}
		if yyb871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym875 := z.EncBinary()
		_ = yym875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep876 := !z.EncBinary()
			yy2arr876 := z.EncBasicHandle().StructToArray
			var yyq876 [8]bool
			_, _, _ = yysep876, yyq876, yy2arr876
			const yyr876 bool = false
			yyq876[2] = x.FSType != ""
			yyq876[3] = x.RBDPool != ""
			yyq876[4] = x.RadosUser != ""
			yyq876[5] = x.Keyring != ""
			yyq876[6] = x.SecretRef != nil
			yyq876[7] = x.ReadOnly != false
			var yynn876 int
			if yyr876 || yy2arr876 {
				r.EncodeArrayStart(8)
			} else {
				yynn876 = 2
				for _, b := range yyq876 {
					if b {
						yynn876++
					}
				}
				r.EncodeMapStart(yynn876)
				yynn876 = 0
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym881 := z.EncBinary()
				_ = yym881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[2] {
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[3] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[4] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[5] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq876[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq876[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq876[7] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq876[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr876 || yy2arr876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym899 := z.DecBinary()
	_ = yym899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct900 := r.ContainerType()
		if yyct900 == codecSelferValueTypeMap1234 {
			yyl900 := r.ReadMapStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl900, d)
			}
		} else if yyct900 == codecSelferValueTypeArray1234 {
			yyl900 := r.ReadArrayStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys901Slc
	var yyhl901 bool = l >= 0
	for yyj901 := 0; ; yyj901++ {
		if yyhl901 {
			if yyj901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys901Slc = r.DecodeBytes(yys901Slc, true, true)
		yys901 := string(yys901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys901 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv902 := &x.CephMonitors
				yym903 := z.DecBinary()
				_ = yym903
				if false {
				} else {
					z.F.DecSliceStringX(yyv902, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys901)
		} // end switch yys901
	} // end for yyj901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj911 int
	var yyb911 bool
	var yyhl911 bool = l >= 0
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv912 := &x.CephMonitors
		yym913 := z.DecBinary()
		_ = yym913
		if false {
		} else {
			z.F.DecSliceStringX(yyv912, false, d)
		}
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj911++
		if yyhl911 {
			yyb911 = yyj911 > l
		} else {
			yyb911 = r.CheckBreak()
		}
		if yyb911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym921 := z.EncBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep922 := !z.EncBinary()
			yy2arr922 := z.EncBasicHandle().StructToArray
			var yyq922 [3]bool
			_, _, _ = yysep922, yyq922, yy2arr922
			const yyr922 bool = false
			yyq922[1] = x.FSType != ""
			yyq922[2] = x.ReadOnly != false
			var yynn922 int
			if yyr922 || yy2arr922 {
				r.EncodeArrayStart(3)
			} else {
				yynn922 = 1
				for _, b := range yyq922 {
					if b {
						yynn922++
					}
				}
				r.EncodeMapStart(yynn922)
				yynn922 = 0
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym924 := z.EncBinary()
				_ = yym924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym925 := z.EncBinary()
				_ = yym925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq922[1] {
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq922[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq922[2] {
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq922[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym932 := z.DecBinary()
	_ = yym932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct933 := r.ContainerType()
		if yyct933 == codecSelferValueTypeMap1234 {
			yyl933 := r.ReadMapStart()
			if yyl933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl933, d)
			}
		} else if yyct933 == codecSelferValueTypeArray1234 {
			yyl933 := r.ReadArrayStart()
			if yyl933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys934Slc
	var yyhl934 bool = l >= 0
	for yyj934 := 0; ; yyj934++ {
		if yyhl934 {
			if yyj934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys934Slc = r.DecodeBytes(yys934Slc, true, true)
		yys934 := string(yys934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys934 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys934)
		} // end switch yys934
	} // end for yyj934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj938 int
	var yyb938 bool
	var yyhl938 bool = l >= 0
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj938++
		if yyhl938 {
			yyb938 = yyj938 > l
		} else {
			yyb938 = r.CheckBreak()
		}
		if yyb938 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj938-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym942 := z.EncBinary()
		_ = yym942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep943 := !z.EncBinary()
			yy2arr943 := z.EncBasicHandle().StructToArray
			var yyq943 [6]bool
			_, _, _ = yysep943, yyq943, yy2arr943
			const yyr943 bool = false
			yyq943[1] = x.Path != ""
			yyq943[2] = x.User != ""
			yyq943[3] = x.SecretFile != ""
			yyq943[4] = x.SecretRef != nil
			yyq943[5] = x.ReadOnly != false
			var yynn943 int
			if yyr943 || yy2arr943 {
				r.EncodeArrayStart(6)
			} else {
				yynn943 = 1
				for _, b := range yyq943 {
					if b {
						yynn943++
					}
				}
				r.EncodeMapStart(yynn943)
				yynn943 = 0
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym945 := z.EncBinary()
					_ = yym945
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[1] {
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq943[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[2] {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq943[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[3] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq943[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq943[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq943[5] {
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq943[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct961 := r.ContainerType()
		if yyct961 == codecSelferValueTypeMap1234 {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if yyct961 == codecSelferValueTypeArray1234 {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys962 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv963 := &x.Monitors
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj970 int
	var yyb970 bool
	var yyhl970 bool = l >= 0
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv971 := &x.Monitors
		yym972 := z.DecBinary()
		_ = yym972
		if false {
		} else {
			z.F.DecSliceStringX(yyv971, false, d)
		}
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj970++
	if yyhl970 {
		yyb970 = yyj970 > l
	} else {
		yyb970 = r.CheckBreak()
	}
	if yyb970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj970++
		if yyhl970 {
			yyb970 = yyj970 > l
		} else {
			yyb970 = r.CheckBreak()
		}
		if yyb970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [1]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(1)
			} else {
				yynn979 = 1
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym981 := z.EncBinary()
				_ = yym981
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym982 := z.EncBinary()
				_ = yym982
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct984 := r.ContainerType()
		if yyct984 == codecSelferValueTypeMap1234 {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if yyct984 == codecSelferValueTypeArray1234 {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys985 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym989 := z.EncBinary()
		_ = yym989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep990 := !z.EncBinary()
			yy2arr990 := z.EncBasicHandle().StructToArray
			var yyq990 [2]bool
			_, _, _ = yysep990, yyq990, yy2arr990
			const yyr990 bool = false
			yyq990[0] = len(x.Items) != 0
			yyq990[1] = x.DefaultMode != nil
			var yynn990 int
			if yyr990 || yy2arr990 {
				r.EncodeArrayStart(2)
			} else {
				yynn990 = 0
				for _, b := range yyq990 {
					if b {
						yynn990++
					}
				}
				r.EncodeMapStart(yynn990)
				yynn990 = 0
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq990[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym992 := z.EncBinary()
						_ = yym992
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq990[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym993 := z.EncBinary()
						_ = yym993
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq990[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy995 := *x.DefaultMode
						yym996 := z.EncBinary()
						_ = yym996
						if false {
						} else {
							r.EncodeInt(int64(yy995))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq990[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy997 := *x.DefaultMode
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							r.EncodeInt(int64(yy997))
						}
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1002 := &x.Items
				yym1003 := z.DecBinary()
				_ = yym1003
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1002), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1005 := z.DecBinary()
				_ = yym1005
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1007 := &x.Items
		yym1008 := z.DecBinary()
		_ = yym1008
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1007), d)
		}
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1010 := z.DecBinary()
		_ = yym1010
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1011 := z.EncBinary()
		_ = yym1011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1012 := !z.EncBinary()
			yy2arr1012 := z.EncBasicHandle().StructToArray
			var yyq1012 [4]bool
			_, _, _ = yysep1012, yyq1012, yy2arr1012
			const yyr1012 bool = false
			yyq1012[1] = x.FieldRef != nil
			yyq1012[2] = x.ResourceFieldRef != nil
			yyq1012[3] = x.Mode != nil
			var yynn1012 int
			if yyr1012 || yy2arr1012 {
				r.EncodeArrayStart(4)
			} else {
				yynn1012 = 1
				for _, b := range yyq1012 {
					if b {
						yynn1012++
					}
				}
				r.EncodeMapStart(yynn1012)
				yynn1012 = 0
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1014 := z.EncBinary()
				_ = yym1014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1015 := z.EncBinary()
				_ = yym1015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1012[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1012[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1012[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1012[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1019 := *x.Mode
						yym1020 := z.EncBinary()
						_ = yym1020
						if false {
						} else {
							r.EncodeInt(int64(yy1019))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1012[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1021 := *x.Mode
						yym1022 := z.EncBinary()
						_ = yym1022
						if false {
						} else {
							r.EncodeInt(int64(yy1021))
						}
					}
				}
			}
			if yyr1012 || yy2arr1012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1024 := r.ContainerType()
		if yyct1024 == codecSelferValueTypeMap1234 {
			yyl1024 := r.ReadMapStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1024, d)
			}
		} else if yyct1024 == codecSelferValueTypeArray1234 {
			yyl1024 := r.ReadArrayStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1025Slc
	var yyhl1025 bool = l >= 0
	for yyj1025 := 0; ; yyj1025++ {
		if yyhl1025 {
			if yyj1025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1025Slc = r.DecodeBytes(yys1025Slc, true, true)
		yys1025 := string(yys1025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1025 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1030 := z.DecBinary()
				_ = yym1030
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1025)
		} // end switch yys1025
	} // end for yyj1025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1031 int
	var yyb1031 bool
	var yyhl1031 bool = l >= 0
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1031++
	if yyhl1031 {
		yyb1031 = yyj1031 > l
	} else {
		yyb1031 = r.CheckBreak()
	}
	if yyb1031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1036 := z.DecBinary()
		_ = yym1036
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1031++
		if yyhl1031 {
			yyb1031 = yyj1031 > l
		} else {
			yyb1031 = r.CheckBreak()
		}
		if yyb1031 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1031-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1037 := z.EncBinary()
		_ = yym1037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1038 := !z.EncBinary()
			yy2arr1038 := z.EncBasicHandle().StructToArray
			var yyq1038 [3]bool
			_, _, _ = yysep1038, yyq1038, yy2arr1038
			const yyr1038 bool = false
			yyq1038[2] = x.ReadOnly != false
			var yynn1038 int
			if yyr1038 || yy2arr1038 {
				r.EncodeArrayStart(3)
			} else {
				yynn1038 = 2
				for _, b := range yyq1038 {
					if b {
						yynn1038++
					}
				}
				r.EncodeMapStart(yynn1038)
				yynn1038 = 0
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1040 := z.EncBinary()
				_ = yym1040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1041 := z.EncBinary()
				_ = yym1041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1038[2] {
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1038[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1047 := z.EncBinary()
					_ = yym1047
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1038 || yy2arr1038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1049 := r.ContainerType()
		if yyct1049 == codecSelferValueTypeMap1234 {
			yyl1049 := r.ReadMapStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1049, d)
			}
		} else if yyct1049 == codecSelferValueTypeArray1234 {
			yyl1049 := r.ReadArrayStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1050Slc
	var yyhl1050 bool = l >= 0
	for yyj1050 := 0; ; yyj1050++ {
		if yyhl1050 {
			if yyj1050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1050Slc = r.DecodeBytes(yys1050Slc, true, true)
		yys1050 := string(yys1050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1050 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1050)
		} // end switch yys1050
	} // end for yyj1050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1054 int
	var yyb1054 bool
	var yyhl1054 bool = l >= 0
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1054++
		if yyhl1054 {
			yyb1054 = yyj1054 > l
		} else {
			yyb1054 = r.CheckBreak()
		}
		if yyb1054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [2]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[1] = x.FSType != ""
			var yynn1059 int
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(2)
			} else {
				yynn1059 = 1
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
				yynn1059 = 0
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[1] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1066 := z.DecBinary()
	_ = yym1066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1067 := r.ContainerType()
		if yyct1067 == codecSelferValueTypeMap1234 {
			yyl1067 := r.ReadMapStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1067, d)
			}
		} else if yyct1067 == codecSelferValueTypeArray1234 {
			yyl1067 := r.ReadArrayStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1068Slc
	var yyhl1068 bool = l >= 0
	for yyj1068 := 0; ; yyj1068++ {
		if yyhl1068 {
			if yyj1068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1068Slc = r.DecodeBytes(yys1068Slc, true, true)
		yys1068 := string(yys1068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1068 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1068)
		} // end switch yys1068
	} // end for yyj1068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1071 int
	var yyb1071 bool
	var yyhl1071 bool = l >= 0
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1071++
		if yyhl1071 {
			yyb1071 = yyj1071 > l
		} else {
			yyb1071 = r.CheckBreak()
		}
		if yyb1071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1074 := z.EncBinary()
		_ = yym1074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1075 := !z.EncBinary()
			yy2arr1075 := z.EncBasicHandle().StructToArray
			var yyq1075 [3]bool
			_, _, _ = yysep1075, yyq1075, yy2arr1075
			const yyr1075 bool = false
			yyq1075[1] = len(x.Items) != 0
			yyq1075[2] = x.DefaultMode != nil
			var yynn1075 int
			if yyr1075 || yy2arr1075 {
				r.EncodeArrayStart(3)
			} else {
				yynn1075 = 1
				for _, b := range yyq1075 {
					if b {
						yynn1075++
					}
				}
				r.EncodeMapStart(yynn1075)
				yynn1075 = 0
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1077 := z.EncBinary()
				_ = yym1077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1078 := z.EncBinary()
				_ = yym1078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1083 := *x.DefaultMode
						yym1084 := z.EncBinary()
						_ = yym1084
						if false {
						} else {
							r.EncodeInt(int64(yy1083))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1085 := *x.DefaultMode
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							r.EncodeInt(int64(yy1085))
						}
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1087 := z.DecBinary()
	_ = yym1087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1088 := r.ContainerType()
		if yyct1088 == codecSelferValueTypeMap1234 {
			yyl1088 := r.ReadMapStart()
			if yyl1088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1088, d)
			}
		} else if yyct1088 == codecSelferValueTypeArray1234 {
			yyl1088 := r.ReadArrayStart()
			if yyl1088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1089Slc
	var yyhl1089 bool = l >= 0
	for yyj1089 := 0; ; yyj1089++ {
		if yyhl1089 {
			if yyj1089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1089Slc = r.DecodeBytes(yys1089Slc, true, true)
		yys1089 := string(yys1089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1089 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1091 := &x.Items
				yym1092 := z.DecBinary()
				_ = yym1092
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1091), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1094 := z.DecBinary()
				_ = yym1094
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1089)
		} // end switch yys1089
	} // end for yyj1089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1095 int
	var yyb1095 bool
	var yyhl1095 bool = l >= 0
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1097 := &x.Items
		yym1098 := z.DecBinary()
		_ = yym1098
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1097), d)
		}
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1100 := z.DecBinary()
		_ = yym1100
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1095++
		if yyhl1095 {
			yyb1095 = yyj1095 > l
		} else {
			yyb1095 = r.CheckBreak()
		}
		if yyb1095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [3]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[2] = x.Mode != nil
			var yynn1102 int
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(3)
			} else {
				yynn1102 = 2
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
				yynn1102 = 0
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1104 := z.EncBinary()
				_ = yym1104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1105 := z.EncBinary()
				_ = yym1105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1107 := z.EncBinary()
				_ = yym1107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1108 := z.EncBinary()
				_ = yym1108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1110 := *x.Mode
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							r.EncodeInt(int64(yy1110))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1112 := *x.Mode
						yym1113 := z.EncBinary()
						_ = yym1113
						if false {
						} else {
							r.EncodeInt(int64(yy1112))
						}
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1114 := z.DecBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1115 := r.ContainerType()
		if yyct1115 == codecSelferValueTypeMap1234 {
			yyl1115 := r.ReadMapStart()
			if yyl1115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1115, d)
			}
		} else if yyct1115 == codecSelferValueTypeArray1234 {
			yyl1115 := r.ReadArrayStart()
			if yyl1115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1116Slc
	var yyhl1116 bool = l >= 0
	for yyj1116 := 0; ; yyj1116++ {
		if yyhl1116 {
			if yyj1116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1116Slc = r.DecodeBytes(yys1116Slc, true, true)
		yys1116 := string(yys1116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1116 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1116)
		} // end switch yys1116
	} // end for yyj1116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1121 int
	var yyb1121 bool
	var yyhl1121 bool = l >= 0
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1125 := z.DecBinary()
		_ = yym1125
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1121++
		if yyhl1121 {
			yyb1121 = yyj1121 > l
		} else {
			yyb1121 = r.CheckBreak()
		}
		if yyb1121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1126 := z.EncBinary()
		_ = yym1126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1127 := !z.EncBinary()
			yy2arr1127 := z.EncBasicHandle().StructToArray
			var yyq1127 [5]bool
			_, _, _ = yysep1127, yyq1127, yy2arr1127
			const yyr1127 bool = false
			yyq1127[0] = x.Name != ""
			yyq1127[1] = x.HostPort != 0
			yyq1127[3] = x.Protocol != ""
			yyq1127[4] = x.HostIP != ""
			var yynn1127 int
			if yyr1127 || yy2arr1127 {
				r.EncodeArrayStart(5)
			} else {
				yynn1127 = 1
				for _, b := range yyq1127 {
					if b {
						yynn1127++
					}
				}
				r.EncodeMapStart(yynn1127)
				yynn1127 = 0
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[0] {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[1] {
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1133 := z.EncBinary()
					_ = yym1133
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[4] {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1141 := z.DecBinary()
	_ = yym1141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1142 := r.ContainerType()
		if yyct1142 == codecSelferValueTypeMap1234 {
			yyl1142 := r.ReadMapStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1142, d)
			}
		} else if yyct1142 == codecSelferValueTypeArray1234 {
			yyl1142 := r.ReadArrayStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1143Slc
	var yyhl1143 bool = l >= 0
	for yyj1143 := 0; ; yyj1143++ {
		if yyhl1143 {
			if yyj1143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1143Slc = r.DecodeBytes(yys1143Slc, true, true)
		yys1143 := string(yys1143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1143 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1143)
		} // end switch yys1143
	} // end for yyj1143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1155 := z.EncBinary()
		_ = yym1155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1156 := !z.EncBinary()
			yy2arr1156 := z.EncBasicHandle().StructToArray
			var yyq1156 [4]bool
			_, _, _ = yysep1156, yyq1156, yy2arr1156
			const yyr1156 bool = false
			yyq1156[1] = x.ReadOnly != false
			yyq1156[3] = x.SubPath != ""
			var yynn1156 int
			if yyr1156 || yy2arr1156 {
				r.EncodeArrayStart(4)
			} else {
				yynn1156 = 2
				for _, b := range yyq1156 {
					if b {
						yynn1156++
					}
				}
				r.EncodeMapStart(yynn1156)
				yynn1156 = 0
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1158 := z.EncBinary()
				_ = yym1158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1159 := z.EncBinary()
				_ = yym1159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[1] {
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1165 := z.EncBinary()
				_ = yym1165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[3] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1169 := z.DecBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1170 := r.ContainerType()
		if yyct1170 == codecSelferValueTypeMap1234 {
			yyl1170 := r.ReadMapStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1170, d)
			}
		} else if yyct1170 == codecSelferValueTypeArray1234 {
			yyl1170 := r.ReadArrayStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1171Slc
	var yyhl1171 bool = l >= 0
	for yyj1171 := 0; ; yyj1171++ {
		if yyhl1171 {
			if yyj1171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1171Slc = r.DecodeBytes(yys1171Slc, true, true)
		yys1171 := string(yys1171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1171 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1171)
		} // end switch yys1171
	} // end for yyj1171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1176 int
	var yyb1176 bool
	var yyhl1176 bool = l >= 0
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1176++
		if yyhl1176 {
			yyb1176 = yyj1176 > l
		} else {
			yyb1176 = r.CheckBreak()
		}
		if yyb1176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1181 := z.EncBinary()
		_ = yym1181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1182 := !z.EncBinary()
			yy2arr1182 := z.EncBasicHandle().StructToArray
			var yyq1182 [3]bool
			_, _, _ = yysep1182, yyq1182, yy2arr1182
			const yyr1182 bool = false
			yyq1182[1] = x.Value != ""
			yyq1182[2] = x.ValueFrom != nil
			var yynn1182 int
			if yyr1182 || yy2arr1182 {
				r.EncodeArrayStart(3)
			} else {
				yynn1182 = 1
				for _, b := range yyq1182 {
					if b {
						yynn1182++
					}
				}
				r.EncodeMapStart(yynn1182)
				yynn1182 = 0
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[1] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1200 := z.EncBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1201 := !z.EncBinary()
			yy2arr1201 := z.EncBasicHandle().StructToArray
			var yyq1201 [4]bool
			_, _, _ = yysep1201, yyq1201, yy2arr1201
			const yyr1201 bool = false
			yyq1201[0] = x.FieldRef != nil
			yyq1201[1] = x.ResourceFieldRef != nil
			yyq1201[2] = x.ConfigMapKeyRef != nil
			yyq1201[3] = x.SecretKeyRef != nil
			var yynn1201 int
			if yyr1201 || yy2arr1201 {
				r.EncodeArrayStart(4)
			} else {
				yynn1201 = 0
				for _, b := range yyq1201 {
					if b {
						yynn1201++
					}
				}
				r.EncodeMapStart(yynn1201)
				yynn1201 = 0
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1213 int
	var yyb1213 bool
	var yyhl1213 bool = l >= 0
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1213++
		if yyhl1213 {
			yyb1213 = yyj1213 > l
		} else {
			yyb1213 = r.CheckBreak()
		}
		if yyb1213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1218 := z.EncBinary()
		_ = yym1218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1219 := !z.EncBinary()
			yy2arr1219 := z.EncBasicHandle().StructToArray
			var yyq1219 [2]bool
			_, _, _ = yysep1219, yyq1219, yy2arr1219
			const yyr1219 bool = false
			var yynn1219 int
			if yyr1219 || yy2arr1219 {
				r.EncodeArrayStart(2)
			} else {
				yynn1219 = 2
				for _, b := range yyq1219 {
					if b {
						yynn1219++
					}
				}
				r.EncodeMapStart(yynn1219)
				yynn1219 = 0
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1221 := z.EncBinary()
				_ = yym1221
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1227 := r.ContainerType()
		if yyct1227 == codecSelferValueTypeMap1234 {
			yyl1227 := r.ReadMapStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1227, d)
			}
		} else if yyct1227 == codecSelferValueTypeArray1234 {
			yyl1227 := r.ReadArrayStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1228Slc
	var yyhl1228 bool = l >= 0
	for yyj1228 := 0; ; yyj1228++ {
		if yyhl1228 {
			if yyj1228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1228Slc = r.DecodeBytes(yys1228Slc, true, true)
		yys1228 := string(yys1228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1228 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1228)
		} // end switch yys1228
	} // end for yyj1228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1231 int
	var yyb1231 bool
	var yyhl1231 bool = l >= 0
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1231++
		if yyhl1231 {
			yyb1231 = yyj1231 > l
		} else {
			yyb1231 = r.CheckBreak()
		}
		if yyb1231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.ContainerName != ""
			yyq1235[2] = true
			var yynn1235 int
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				yynn1235 = 1
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
				yynn1235 = 0
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[0] {
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1235[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[2] {
					yy1243 := &x.Divisor
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1243) {
					} else if !yym1244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1243)
					} else {
						z.EncFallback(yy1243)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1245 := &x.Divisor
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1245) {
					} else if !yym1246 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1245)
					} else {
						z.EncFallback(yy1245)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1247 := z.DecBinary()
	_ = yym1247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1248 := r.ContainerType()
		if yyct1248 == codecSelferValueTypeMap1234 {
			yyl1248 := r.ReadMapStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1248, d)
			}
		} else if yyct1248 == codecSelferValueTypeArray1234 {
			yyl1248 := r.ReadArrayStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1249Slc
	var yyhl1249 bool = l >= 0
	for yyj1249 := 0; ; yyj1249++ {
		if yyhl1249 {
			if yyj1249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1249Slc = r.DecodeBytes(yys1249Slc, true, true)
		yys1249 := string(yys1249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1249 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1252 := &x.Divisor
				yym1253 := z.DecBinary()
				_ = yym1253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1252) {
				} else if !yym1253 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1252)
				} else {
					z.DecFallback(yyv1252, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1249)
		} // end switch yys1249
	} // end for yyj1249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1254 int
	var yyb1254 bool
	var yyhl1254 bool = l >= 0
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1257 := &x.Divisor
		yym1258 := z.DecBinary()
		_ = yym1258
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1257) {
		} else if !yym1258 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1257)
		} else {
			z.DecFallback(yyv1257, false)
		}
	}
	for {
		yyj1254++
		if yyhl1254 {
			yyb1254 = yyj1254 > l
		} else {
			yyb1254 = r.CheckBreak()
		}
		if yyb1254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [2]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			var yynn1260 int
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(2)
			} else {
				yynn1260 = 2
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
				yynn1260 = 0
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1263 := z.EncBinary()
				_ = yym1263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1266 := z.EncBinary()
				_ = yym1266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1267 := z.DecBinary()
	_ = yym1267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1268 := r.ContainerType()
		if yyct1268 == codecSelferValueTypeMap1234 {
			yyl1268 := r.ReadMapStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1268, d)
			}
		} else if yyct1268 == codecSelferValueTypeArray1234 {
			yyl1268 := r.ReadArrayStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1269Slc
	var yyhl1269 bool = l >= 0
	for yyj1269 := 0; ; yyj1269++ {
		if yyhl1269 {
			if yyj1269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1269Slc = r.DecodeBytes(yys1269Slc, true, true)
		yys1269 := string(yys1269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1269 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1269)
		} // end switch yys1269
	} // end for yyj1269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1272 int
	var yyb1272 bool
	var yyhl1272 bool = l >= 0
	yyj1272++
	if yyhl1272 {
		yyb1272 = yyj1272 > l
	} else {
		yyb1272 = r.CheckBreak()
	}
	if yyb1272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1272++
	if yyhl1272 {
		yyb1272 = yyj1272 > l
	} else {
		yyb1272 = r.CheckBreak()
	}
	if yyb1272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1272++
		if yyhl1272 {
			yyb1272 = yyj1272 > l
		} else {
			yyb1272 = r.CheckBreak()
		}
		if yyb1272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [2]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(2)
			} else {
				yynn1276 = 2
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1284 := r.ContainerType()
		if yyct1284 == codecSelferValueTypeMap1234 {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if yyct1284 == codecSelferValueTypeArray1234 {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1285 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1288 int
	var yyb1288 bool
	var yyhl1288 bool = l >= 0
	yyj1288++
	if yyhl1288 {
		yyb1288 = yyj1288 > l
	} else {
		yyb1288 = r.CheckBreak()
	}
	if yyb1288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1288++
	if yyhl1288 {
		yyb1288 = yyj1288 > l
	} else {
		yyb1288 = r.CheckBreak()
	}
	if yyb1288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1288++
		if yyhl1288 {
			yyb1288 = yyj1288 > l
		} else {
			yyb1288 = r.CheckBreak()
		}
		if yyb1288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [2]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(2)
			} else {
				yynn1292 = 2
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1299 := z.DecBinary()
	_ = yym1299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1300 := r.ContainerType()
		if yyct1300 == codecSelferValueTypeMap1234 {
			yyl1300 := r.ReadMapStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1300, d)
			}
		} else if yyct1300 == codecSelferValueTypeArray1234 {
			yyl1300 := r.ReadArrayStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1301Slc
	var yyhl1301 bool = l >= 0
	for yyj1301 := 0; ; yyj1301++ {
		if yyhl1301 {
			if yyj1301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1301Slc = r.DecodeBytes(yys1301Slc, true, true)
		yys1301 := string(yys1301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1301 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1301)
		} // end switch yys1301
	} // end for yyj1301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [5]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			yyq1308[0] = x.Path != ""
			yyq1308[1] = true
			yyq1308[2] = x.Host != ""
			yyq1308[3] = x.Scheme != ""
			yyq1308[4] = len(x.HTTPHeaders) != 0
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(5)
			} else {
				yynn1308 = 0
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[0] {
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[1] {
					yy1313 := &x.Port
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1313) {
					} else if !yym1314 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1313)
					} else {
						z.EncFallback(yy1313)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1315 := &x.Port
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1315) {
					} else if !yym1316 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1315)
					} else {
						z.EncFallback(yy1315)
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[2] {
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1322 := z.EncBinary()
						_ = yym1322
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1323 := z.EncBinary()
						_ = yym1323
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1324 := z.DecBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1325 := r.ContainerType()
		if yyct1325 == codecSelferValueTypeMap1234 {
			yyl1325 := r.ReadMapStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1325, d)
			}
		} else if yyct1325 == codecSelferValueTypeArray1234 {
			yyl1325 := r.ReadArrayStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1326Slc
	var yyhl1326 bool = l >= 0
	for yyj1326 := 0; ; yyj1326++ {
		if yyhl1326 {
			if yyj1326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1326Slc = r.DecodeBytes(yys1326Slc, true, true)
		yys1326 := string(yys1326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1326 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1328 := &x.Port
				yym1329 := z.DecBinary()
				_ = yym1329
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1328) {
				} else if !yym1329 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1328)
				} else {
					z.DecFallback(yyv1328, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1332 := &x.HTTPHeaders
				yym1333 := z.DecBinary()
				_ = yym1333
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1326)
		} // end switch yys1326
	} // end for yyj1326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1336 := &x.Port
		yym1337 := z.DecBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1336) {
		} else if !yym1337 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1336)
		} else {
			z.DecFallback(yyv1336, false)
		}
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1340 := &x.HTTPHeaders
		yym1341 := z.DecBinary()
		_ = yym1341
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1340), d)
		}
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1342 := z.EncBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1344 := z.EncBinary()
		_ = yym1344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1345 := !z.EncBinary()
			yy2arr1345 := z.EncBasicHandle().StructToArray
			var yyq1345 [1]bool
			_, _, _ = yysep1345, yyq1345, yy2arr1345
			const yyr1345 bool = false
			yyq1345[0] = true
			var yynn1345 int
			if yyr1345 || yy2arr1345 {
				r.EncodeArrayStart(1)
			} else {
				yynn1345 = 0
				for _, b := range yyq1345 {
					if b {
						yynn1345++
					}
				}
				r.EncodeMapStart(yynn1345)
				yynn1345 = 0
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1345[0] {
					yy1347 := &x.Port
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1347) {
					} else if !yym1348 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1347)
					} else {
						z.EncFallback(yy1347)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1345[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1349 := &x.Port
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1349) {
					} else if !yym1350 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1349)
					} else {
						z.EncFallback(yy1349)
					}
				}
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1351 := z.DecBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1352 := r.ContainerType()
		if yyct1352 == codecSelferValueTypeMap1234 {
			yyl1352 := r.ReadMapStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1352, d)
			}
		} else if yyct1352 == codecSelferValueTypeArray1234 {
			yyl1352 := r.ReadArrayStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1353Slc
	var yyhl1353 bool = l >= 0
	for yyj1353 := 0; ; yyj1353++ {
		if yyhl1353 {
			if yyj1353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1353Slc = r.DecodeBytes(yys1353Slc, true, true)
		yys1353 := string(yys1353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1353 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1354 := &x.Port
				yym1355 := z.DecBinary()
				_ = yym1355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1354) {
				} else if !yym1355 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1354)
				} else {
					z.DecFallback(yyv1354, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1353)
		} // end switch yys1353
	} // end for yyj1353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1356 int
	var yyb1356 bool
	var yyhl1356 bool = l >= 0
	yyj1356++
	if yyhl1356 {
		yyb1356 = yyj1356 > l
	} else {
		yyb1356 = r.CheckBreak()
	}
	if yyb1356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1357 := &x.Port
		yym1358 := z.DecBinary()
		_ = yym1358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1357) {
		} else if !yym1358 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1357)
		} else {
			z.DecFallback(yyv1357, false)
		}
	}
	for {
		yyj1356++
		if yyhl1356 {
			yyb1356 = yyj1356 > l
		} else {
			yyb1356 = r.CheckBreak()
		}
		if yyb1356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1359 := z.EncBinary()
		_ = yym1359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1360 := !z.EncBinary()
			yy2arr1360 := z.EncBasicHandle().StructToArray
			var yyq1360 [1]bool
			_, _, _ = yysep1360, yyq1360, yy2arr1360
			const yyr1360 bool = false
			yyq1360[0] = len(x.Command) != 0
			var yynn1360 int
			if yyr1360 || yy2arr1360 {
				r.EncodeArrayStart(1)
			} else {
				yynn1360 = 0
				for _, b := range yyq1360 {
					if b {
						yynn1360++
					}
				}
				r.EncodeMapStart(yynn1360)
				yynn1360 = 0
			}
			if yyr1360 || yy2arr1360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1360[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1362 := z.EncBinary()
						_ = yym1362
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1363 := z.EncBinary()
						_ = yym1363
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1360 || yy2arr1360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1365 := r.ContainerType()
		if yyct1365 == codecSelferValueTypeMap1234 {
			yyl1365 := r.ReadMapStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1365, d)
			}
		} else if yyct1365 == codecSelferValueTypeArray1234 {
			yyl1365 := r.ReadArrayStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1366Slc
	var yyhl1366 bool = l >= 0
	for yyj1366 := 0; ; yyj1366++ {
		if yyhl1366 {
			if yyj1366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1366Slc = r.DecodeBytes(yys1366Slc, true, true)
		yys1366 := string(yys1366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1366 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1367 := &x.Command
				yym1368 := z.DecBinary()
				_ = yym1368
				if false {
				} else {
					z.F.DecSliceStringX(yyv1367, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1366)
		} // end switch yys1366
	} // end for yyj1366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1369 int
	var yyb1369 bool
	var yyhl1369 bool = l >= 0
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1370 := &x.Command
		yym1371 := z.DecBinary()
		_ = yym1371
		if false {
		} else {
			z.F.DecSliceStringX(yyv1370, false, d)
		}
	}
	for {
		yyj1369++
		if yyhl1369 {
			yyb1369 = yyj1369 > l
		} else {
			yyb1369 = r.CheckBreak()
		}
		if yyb1369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1372 := z.EncBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1373 := !z.EncBinary()
			yy2arr1373 := z.EncBasicHandle().StructToArray
			var yyq1373 [8]bool
			_, _, _ = yysep1373, yyq1373, yy2arr1373
			const yyr1373 bool = false
			yyq1373[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1373[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1373[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1373[3] = x.InitialDelaySeconds != 0
			yyq1373[4] = x.TimeoutSeconds != 0
			yyq1373[5] = x.PeriodSeconds != 0
			yyq1373[6] = x.SuccessThreshold != 0
			yyq1373[7] = x.FailureThreshold != 0
			var yynn1373 int
			if yyr1373 || yy2arr1373 {
				r.EncodeArrayStart(8)
			} else {
				yynn1373 = 0
				for _, b := range yyq1373 {
					if b {
						yynn1373++
					}
				}
				r.EncodeMapStart(yynn1373)
				yynn1373 = 0
			}
			var yyn1374 bool
			if x.Handler.Exec == nil {
				yyn1374 = true
				goto LABEL1374
			}
		LABEL1374:
			if yyr1373 || yy2arr1373 {
				if yyn1374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1374 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1375 bool
			if x.Handler.HTTPGet == nil {
				yyn1375 = true
				goto LABEL1375
			}
		LABEL1375:
			if yyr1373 || yy2arr1373 {
				if yyn1375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1375 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1376 bool
			if x.Handler.TCPSocket == nil {
				yyn1376 = true
				goto LABEL1376
			}
		LABEL1376:
			if yyr1373 || yy2arr1373 {
				if yyn1376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1376 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[3] {
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[4] {
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[5] {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[6] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[7] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1392 := z.DecBinary()
	_ = yym1392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1393 := r.ContainerType()
		if yyct1393 == codecSelferValueTypeMap1234 {
			yyl1393 := r.ReadMapStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1393, d)
			}
		} else if yyct1393 == codecSelferValueTypeArray1234 {
			yyl1393 := r.ReadArrayStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1394Slc
	var yyhl1394 bool = l >= 0
	for yyj1394 := 0; ; yyj1394++ {
		if yyhl1394 {
			if yyj1394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1394Slc = r.DecodeBytes(yys1394Slc, true, true)
		yys1394 := string(yys1394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1394 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1394)
		} // end switch yys1394
	} // end for yyj1394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1403 int
	var yyb1403 bool
	var yyhl1403 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1403++
		if yyhl1403 {
			yyb1403 = yyj1403 > l
		} else {
			yyb1403 = r.CheckBreak()
		}
		if yyb1403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1412 := z.EncBinary()
	_ = yym1412
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1414 := z.EncBinary()
	_ = yym1414
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1415 := z.DecBinary()
	_ = yym1415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1416 := z.EncBinary()
		_ = yym1416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1417 := !z.EncBinary()
			yy2arr1417 := z.EncBasicHandle().StructToArray
			var yyq1417 [2]bool
			_, _, _ = yysep1417, yyq1417, yy2arr1417
			const yyr1417 bool = false
			yyq1417[0] = len(x.Add) != 0
			yyq1417[1] = len(x.Drop) != 0
			var yynn1417 int
			if yyr1417 || yy2arr1417 {
				r.EncodeArrayStart(2)
			} else {
				yynn1417 = 0
				for _, b := range yyq1417 {
					if b {
						yynn1417++
					}
				}
				r.EncodeMapStart(yynn1417)
				yynn1417 = 0
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1419 := z.EncBinary()
						_ = yym1419
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1423 := z.EncBinary()
						_ = yym1423
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1425 := r.ContainerType()
		if yyct1425 == codecSelferValueTypeMap1234 {
			yyl1425 := r.ReadMapStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1425, d)
			}
		} else if yyct1425 == codecSelferValueTypeArray1234 {
			yyl1425 := r.ReadArrayStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1426Slc
	var yyhl1426 bool = l >= 0
	for yyj1426 := 0; ; yyj1426++ {
		if yyhl1426 {
			if yyj1426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1426Slc = r.DecodeBytes(yys1426Slc, true, true)
		yys1426 := string(yys1426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1426 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1427 := &x.Add
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1427), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1429 := &x.Drop
				yym1430 := z.DecBinary()
				_ = yym1430
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1429), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1426)
		} // end switch yys1426
	} // end for yyj1426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1431 int
	var yyb1431 bool
	var yyhl1431 bool = l >= 0
	yyj1431++
	if yyhl1431 {
		yyb1431 = yyj1431 > l
	} else {
		yyb1431 = r.CheckBreak()
	}
	if yyb1431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1432 := &x.Add
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1432), d)
		}
	}
	yyj1431++
	if yyhl1431 {
		yyb1431 = yyj1431 > l
	} else {
		yyb1431 = r.CheckBreak()
	}
	if yyb1431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1434 := &x.Drop
		yym1435 := z.DecBinary()
		_ = yym1435
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1434), d)
		}
	}
	for {
		yyj1431++
		if yyhl1431 {
			yyb1431 = yyj1431 > l
		} else {
			yyb1431 = r.CheckBreak()
		}
		if yyb1431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1436 := z.EncBinary()
		_ = yym1436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1437 := !z.EncBinary()
			yy2arr1437 := z.EncBasicHandle().StructToArray
			var yyq1437 [2]bool
			_, _, _ = yysep1437, yyq1437, yy2arr1437
			const yyr1437 bool = false
			yyq1437[0] = len(x.Limits) != 0
			yyq1437[1] = len(x.Requests) != 0
			var yynn1437 int
			if yyr1437 || yy2arr1437 {
				r.EncodeArrayStart(2)
			} else {
				yynn1437 = 0
				for _, b := range yyq1437 {
					if b {
						yynn1437++
					}
				}
				r.EncodeMapStart(yynn1437)
				yynn1437 = 0
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1441 := r.ContainerType()
		if yyct1441 == codecSelferValueTypeMap1234 {
			yyl1441 := r.ReadMapStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1441, d)
			}
		} else if yyct1441 == codecSelferValueTypeArray1234 {
			yyl1441 := r.ReadArrayStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1442Slc
	var yyhl1442 bool = l >= 0
	for yyj1442 := 0; ; yyj1442++ {
		if yyhl1442 {
			if yyj1442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1442Slc = r.DecodeBytes(yys1442Slc, true, true)
		yys1442 := string(yys1442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1442 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1443 := &x.Limits
				yyv1443.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1444 := &x.Requests
				yyv1444.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1442)
		} // end switch yys1442
	} // end for yyj1442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1445 int
	var yyb1445 bool
	var yyhl1445 bool = l >= 0
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1446 := &x.Limits
		yyv1446.CodecDecodeSelf(d)
	}
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1447 := &x.Requests
		yyv1447.CodecDecodeSelf(d)
	}
	for {
		yyj1445++
		if yyhl1445 {
			yyb1445 = yyj1445 > l
		} else {
			yyb1445 = r.CheckBreak()
		}
		if yyb1445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1448 := z.EncBinary()
		_ = yym1448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1449 := !z.EncBinary()
			yy2arr1449 := z.EncBasicHandle().StructToArray
			var yyq1449 [18]bool
			_, _, _ = yysep1449, yyq1449, yy2arr1449
			const yyr1449 bool = false
			yyq1449[2] = len(x.Command) != 0
			yyq1449[3] = len(x.Args) != 0
			yyq1449[4] = x.WorkingDir != ""
			yyq1449[5] = len(x.Ports) != 0
			yyq1449[6] = len(x.Env) != 0
			yyq1449[7] = true
			yyq1449[8] = len(x.VolumeMounts) != 0
			yyq1449[9] = x.LivenessProbe != nil
			yyq1449[10] = x.ReadinessProbe != nil
			yyq1449[11] = x.Lifecycle != nil
			yyq1449[12] = x.TerminationMessagePath != ""
			yyq1449[14] = x.SecurityContext != nil
			yyq1449[15] = x.Stdin != false
			yyq1449[16] = x.StdinOnce != false
			yyq1449[17] = x.TTY != false
			var yynn1449 int
			if yyr1449 || yy2arr1449 {
				r.EncodeArrayStart(18)
			} else {
				yynn1449 = 3
				for _, b := range yyq1449 {
					if b {
						yynn1449++
					}
				}
				r.EncodeMapStart(yynn1449)
				yynn1449 = 0
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1451 := z.EncBinary()
				_ = yym1451
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1452 := z.EncBinary()
				_ = yym1452
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1454 := z.EncBinary()
				_ = yym1454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1455 := z.EncBinary()
				_ = yym1455
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[4] {
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[7] {
					yy1472 := &x.Resources
					yy1472.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1473 := &x.Resources
					yy1473.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1475 := z.EncBinary()
						_ = yym1475
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[12] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[15] {
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[16] {
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[17] {
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1494 := z.DecBinary()
	_ = yym1494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1495 := r.ContainerType()
		if yyct1495 == codecSelferValueTypeMap1234 {
			yyl1495 := r.ReadMapStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1495, d)
			}
		} else if yyct1495 == codecSelferValueTypeArray1234 {
			yyl1495 := r.ReadArrayStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1496Slc
	var yyhl1496 bool = l >= 0
	for yyj1496 := 0; ; yyj1496++ {
		if yyhl1496 {
			if yyj1496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1496Slc = r.DecodeBytes(yys1496Slc, true, true)
		yys1496 := string(yys1496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1496 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1499 := &x.Command
				yym1500 := z.DecBinary()
				_ = yym1500
				if false {
				} else {
					z.F.DecSliceStringX(yyv1499, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1501 := &x.Args
				yym1502 := z.DecBinary()
				_ = yym1502
				if false {
				} else {
					z.F.DecSliceStringX(yyv1501, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1504 := &x.Ports
				yym1505 := z.DecBinary()
				_ = yym1505
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1504), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1506 := &x.Env
				yym1507 := z.DecBinary()
				_ = yym1507
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1506), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1508 := &x.Resources
				yyv1508.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1509 := &x.VolumeMounts
				yym1510 := z.DecBinary()
				_ = yym1510
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1509), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1496)
		} // end switch yys1496
	} // end for yyj1496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1523 := &x.Command
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else {
			z.F.DecSliceStringX(yyv1523, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1525 := &x.Args
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			z.F.DecSliceStringX(yyv1525, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1528 := &x.Ports
		yym1529 := z.DecBinary()
		_ = yym1529
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1528), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1530 := &x.Env
		yym1531 := z.DecBinary()
		_ = yym1531
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1530), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1532 := &x.Resources
		yyv1532.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1533 := &x.VolumeMounts
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1533), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1544 := z.EncBinary()
		_ = yym1544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1545 := !z.EncBinary()
			yy2arr1545 := z.EncBasicHandle().StructToArray
			var yyq1545 [3]bool
			_, _, _ = yysep1545, yyq1545, yy2arr1545
			const yyr1545 bool = false
			yyq1545[0] = x.Exec != nil
			yyq1545[1] = x.HTTPGet != nil
			yyq1545[2] = x.TCPSocket != nil
			var yynn1545 int
			if yyr1545 || yy2arr1545 {
				r.EncodeArrayStart(3)
			} else {
				yynn1545 = 0
				for _, b := range yyq1545 {
					if b {
						yynn1545++
					}
				}
				r.EncodeMapStart(yynn1545)
				yynn1545 = 0
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1550 := r.ContainerType()
		if yyct1550 == codecSelferValueTypeMap1234 {
			yyl1550 := r.ReadMapStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1550, d)
			}
		} else if yyct1550 == codecSelferValueTypeArray1234 {
			yyl1550 := r.ReadArrayStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1551Slc
	var yyhl1551 bool = l >= 0
	for yyj1551 := 0; ; yyj1551++ {
		if yyhl1551 {
			if yyj1551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1551Slc = r.DecodeBytes(yys1551Slc, true, true)
		yys1551 := string(yys1551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1551 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1551)
		} // end switch yys1551
	} // end for yyj1551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1555 int
	var yyb1555 bool
	var yyhl1555 bool = l >= 0
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1555++
		if yyhl1555 {
			yyb1555 = yyj1555 > l
		} else {
			yyb1555 = r.CheckBreak()
		}
		if yyb1555 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1555-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [2]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[0] = x.PostStart != nil
			yyq1560[1] = x.PreStop != nil
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(2)
			} else {
				yynn1560 = 0
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1563 := z.DecBinary()
	_ = yym1563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1564 := r.ContainerType()
		if yyct1564 == codecSelferValueTypeMap1234 {
			yyl1564 := r.ReadMapStart()
			if yyl1564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1564, d)
			}
		} else if yyct1564 == codecSelferValueTypeArray1234 {
			yyl1564 := r.ReadArrayStart()
			if yyl1564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1565Slc
	var yyhl1565 bool = l >= 0
	for yyj1565 := 0; ; yyj1565++ {
		if yyhl1565 {
			if yyj1565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1565Slc = r.DecodeBytes(yys1565Slc, true, true)
		yys1565 := string(yys1565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1565 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1565)
		} // end switch yys1565
	} // end for yyj1565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1568 int
	var yyb1568 bool
	var yyhl1568 bool = l >= 0
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1568++
		if yyhl1568 {
			yyb1568 = yyj1568 > l
		} else {
			yyb1568 = r.CheckBreak()
		}
		if yyb1568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1571 := z.EncBinary()
	_ = yym1571
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1572 := z.DecBinary()
	_ = yym1572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1573 := z.EncBinary()
		_ = yym1573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1574 := !z.EncBinary()
			yy2arr1574 := z.EncBasicHandle().StructToArray
			var yyq1574 [2]bool
			_, _, _ = yysep1574, yyq1574, yy2arr1574
			const yyr1574 bool = false
			yyq1574[0] = x.Reason != ""
			yyq1574[1] = x.Message != ""
			var yynn1574 int
			if yyr1574 || yy2arr1574 {
				r.EncodeArrayStart(2)
			} else {
				yynn1574 = 0
				for _, b := range yyq1574 {
					if b {
						yynn1574++
					}
				}
				r.EncodeMapStart(yynn1574)
				yynn1574 = 0
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1574[0] {
					yym1576 := z.EncBinary()
					_ = yym1576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1574[1] {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1581 := z.DecBinary()
	_ = yym1581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1582 := r.ContainerType()
		if yyct1582 == codecSelferValueTypeMap1234 {
			yyl1582 := r.ReadMapStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1582, d)
			}
		} else if yyct1582 == codecSelferValueTypeArray1234 {
			yyl1582 := r.ReadArrayStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1583Slc
	var yyhl1583 bool = l >= 0
	for yyj1583 := 0; ; yyj1583++ {
		if yyhl1583 {
			if yyj1583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1583Slc = r.DecodeBytes(yys1583Slc, true, true)
		yys1583 := string(yys1583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1583 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1583)
		} // end switch yys1583
	} // end for yyj1583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1586 int
	var yyb1586 bool
	var yyhl1586 bool = l >= 0
	yyj1586++
	if yyhl1586 {
		yyb1586 = yyj1586 > l
	} else {
		yyb1586 = r.CheckBreak()
	}
	if yyb1586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1586++
	if yyhl1586 {
		yyb1586 = yyj1586 > l
	} else {
		yyb1586 = r.CheckBreak()
	}
	if yyb1586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1586++
		if yyhl1586 {
			yyb1586 = yyj1586 > l
		} else {
			yyb1586 = r.CheckBreak()
		}
		if yyb1586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1589 := z.EncBinary()
		_ = yym1589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1590 := !z.EncBinary()
			yy2arr1590 := z.EncBasicHandle().StructToArray
			var yyq1590 [1]bool
			_, _, _ = yysep1590, yyq1590, yy2arr1590
			const yyr1590 bool = false
			yyq1590[0] = true
			var yynn1590 int
			if yyr1590 || yy2arr1590 {
				r.EncodeArrayStart(1)
			} else {
				yynn1590 = 0
				for _, b := range yyq1590 {
					if b {
						yynn1590++
					}
				}
				r.EncodeMapStart(yynn1590)
				yynn1590 = 0
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[0] {
					yy1592 := &x.StartedAt
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1592) {
					} else if yym1593 {
						z.EncBinaryMarshal(yy1592)
					} else if !yym1593 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1592)
					} else {
						z.EncFallback(yy1592)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1594 := &x.StartedAt
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1594) {
					} else if yym1595 {
						z.EncBinaryMarshal(yy1594)
					} else if !yym1595 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1594)
					} else {
						z.EncFallback(yy1594)
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1596 := z.DecBinary()
	_ = yym1596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1597 := r.ContainerType()
		if yyct1597 == codecSelferValueTypeMap1234 {
			yyl1597 := r.ReadMapStart()
			if yyl1597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1597, d)
			}
		} else if yyct1597 == codecSelferValueTypeArray1234 {
			yyl1597 := r.ReadArrayStart()
			if yyl1597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1598Slc
	var yyhl1598 bool = l >= 0
	for yyj1598 := 0; ; yyj1598++ {
		if yyhl1598 {
			if yyj1598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1598Slc = r.DecodeBytes(yys1598Slc, true, true)
		yys1598 := string(yys1598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1598 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1599 := &x.StartedAt
				yym1600 := z.DecBinary()
				_ = yym1600
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1599) {
				} else if yym1600 {
					z.DecBinaryUnmarshal(yyv1599)
				} else if !yym1600 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1599)
				} else {
					z.DecFallback(yyv1599, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1598)
		} // end switch yys1598
	} // end for yyj1598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1601 int
	var yyb1601 bool
	var yyhl1601 bool = l >= 0
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1602 := &x.StartedAt
		yym1603 := z.DecBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1602) {
		} else if yym1603 {
			z.DecBinaryUnmarshal(yyv1602)
		} else if !yym1603 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1602)
		} else {
			z.DecFallback(yyv1602, false)
		}
	}
	for {
		yyj1601++
		if yyhl1601 {
			yyb1601 = yyj1601 > l
		} else {
			yyb1601 = r.CheckBreak()
		}
		if yyb1601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [7]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			yyq1605[1] = x.Signal != 0
			yyq1605[2] = x.Reason != ""
			yyq1605[3] = x.Message != ""
			yyq1605[4] = true
			yyq1605[5] = true
			yyq1605[6] = x.ContainerID != ""
			var yynn1605 int
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(7)
			} else {
				yynn1605 = 1
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
				yynn1605 = 0
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1607 := z.EncBinary()
				_ = yym1607
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1608 := z.EncBinary()
				_ = yym1608
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[1] {
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[2] {
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[3] {
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[4] {
					yy1619 := &x.StartedAt
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1619) {
					} else if yym1620 {
						z.EncBinaryMarshal(yy1619)
					} else if !yym1620 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1619)
					} else {
						z.EncFallback(yy1619)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.StartedAt
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1621) {
					} else if yym1622 {
						z.EncBinaryMarshal(yy1621)
					} else if !yym1622 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1621)
					} else {
						z.EncFallback(yy1621)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[5] {
					yy1624 := &x.FinishedAt
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1624) {
					} else if yym1625 {
						z.EncBinaryMarshal(yy1624)
					} else if !yym1625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1624)
					} else {
						z.EncFallback(yy1624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1626 := &x.FinishedAt
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1626) {
					} else if yym1627 {
						z.EncBinaryMarshal(yy1626)
					} else if !yym1627 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1626)
					} else {
						z.EncFallback(yy1626)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[6] {
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1631 := z.DecBinary()
	_ = yym1631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1632 := r.ContainerType()
		if yyct1632 == codecSelferValueTypeMap1234 {
			yyl1632 := r.ReadMapStart()
			if yyl1632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1632, d)
			}
		} else if yyct1632 == codecSelferValueTypeArray1234 {
			yyl1632 := r.ReadArrayStart()
			if yyl1632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1633Slc
	var yyhl1633 bool = l >= 0
	for yyj1633 := 0; ; yyj1633++ {
		if yyhl1633 {
			if yyj1633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1633Slc = r.DecodeBytes(yys1633Slc, true, true)
		yys1633 := string(yys1633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1633 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1638 := &x.StartedAt
				yym1639 := z.DecBinary()
				_ = yym1639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1638) {
				} else if yym1639 {
					z.DecBinaryUnmarshal(yyv1638)
				} else if !yym1639 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1638)
				} else {
					z.DecFallback(yyv1638, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1640 := &x.FinishedAt
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1640) {
				} else if yym1641 {
					z.DecBinaryUnmarshal(yyv1640)
				} else if !yym1641 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1640)
				} else {
					z.DecFallback(yyv1640, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1633)
		} // end switch yys1633
	} // end for yyj1633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1643 int
	var yyb1643 bool
	var yyhl1643 bool = l >= 0
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1648 := &x.StartedAt
		yym1649 := z.DecBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1648) {
		} else if yym1649 {
			z.DecBinaryUnmarshal(yyv1648)
		} else if !yym1649 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1648)
		} else {
			z.DecFallback(yyv1648, false)
		}
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1650 := &x.FinishedAt
		yym1651 := z.DecBinary()
		_ = yym1651
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1650) {
		} else if yym1651 {
			z.DecBinaryUnmarshal(yyv1650)
		} else if !yym1651 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1650)
		} else {
			z.DecFallback(yyv1650, false)
		}
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1643++
		if yyhl1643 {
			yyb1643 = yyj1643 > l
		} else {
			yyb1643 = r.CheckBreak()
		}
		if yyb1643 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1643-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1653 := z.EncBinary()
		_ = yym1653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1654 := !z.EncBinary()
			yy2arr1654 := z.EncBasicHandle().StructToArray
			var yyq1654 [3]bool
			_, _, _ = yysep1654, yyq1654, yy2arr1654
			const yyr1654 bool = false
			yyq1654[0] = x.Waiting != nil
			yyq1654[1] = x.Running != nil
			yyq1654[2] = x.Terminated != nil
			var yynn1654 int
			if yyr1654 || yy2arr1654 {
				r.EncodeArrayStart(3)
			} else {
				yynn1654 = 0
				for _, b := range yyq1654 {
					if b {
						yynn1654++
					}
				}
				r.EncodeMapStart(yynn1654)
				yynn1654 = 0
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1658 := z.DecBinary()
	_ = yym1658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1659 := r.ContainerType()
		if yyct1659 == codecSelferValueTypeMap1234 {
			yyl1659 := r.ReadMapStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1659, d)
			}
		} else if yyct1659 == codecSelferValueTypeArray1234 {
			yyl1659 := r.ReadArrayStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1660Slc
	var yyhl1660 bool = l >= 0
	for yyj1660 := 0; ; yyj1660++ {
		if yyhl1660 {
			if yyj1660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1660Slc = r.DecodeBytes(yys1660Slc, true, true)
		yys1660 := string(yys1660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1660 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1660)
		} // end switch yys1660
	} // end for yyj1660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1664 int
	var yyb1664 bool
	var yyhl1664 bool = l >= 0
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1664++
		if yyhl1664 {
			yyb1664 = yyj1664 > l
		} else {
			yyb1664 = r.CheckBreak()
		}
		if yyb1664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1668 := z.EncBinary()
		_ = yym1668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1669 := !z.EncBinary()
			yy2arr1669 := z.EncBasicHandle().StructToArray
			var yyq1669 [8]bool
			_, _, _ = yysep1669, yyq1669, yy2arr1669
			const yyr1669 bool = false
			yyq1669[1] = true
			yyq1669[2] = true
			yyq1669[7] = x.ContainerID != ""
			var yynn1669 int
			if yyr1669 || yy2arr1669 {
				r.EncodeArrayStart(8)
			} else {
				yynn1669 = 5
				for _, b := range yyq1669 {
					if b {
						yynn1669++
					}
				}
				r.EncodeMapStart(yynn1669)
				yynn1669 = 0
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1671 := z.EncBinary()
				_ = yym1671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1672 := z.EncBinary()
				_ = yym1672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[1] {
					yy1674 := &x.State
					yy1674.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1675 := &x.State
					yy1675.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[2] {
					yy1677 := &x.LastTerminationState
					yy1677.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1678 := &x.LastTerminationState
					yy1678.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1680 := z.EncBinary()
				_ = yym1680
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1683 := z.EncBinary()
				_ = yym1683
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1684 := z.EncBinary()
				_ = yym1684
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1686 := z.EncBinary()
				_ = yym1686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1687 := z.EncBinary()
				_ = yym1687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1689 := z.EncBinary()
				_ = yym1689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1690 := z.EncBinary()
				_ = yym1690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[7] {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1694 := z.DecBinary()
	_ = yym1694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1695 := r.ContainerType()
		if yyct1695 == codecSelferValueTypeMap1234 {
			yyl1695 := r.ReadMapStart()
			if yyl1695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1695, d)
			}
		} else if yyct1695 == codecSelferValueTypeArray1234 {
			yyl1695 := r.ReadArrayStart()
			if yyl1695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1696Slc
	var yyhl1696 bool = l >= 0
	for yyj1696 := 0; ; yyj1696++ {
		if yyhl1696 {
			if yyj1696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1696Slc = r.DecodeBytes(yys1696Slc, true, true)
		yys1696 := string(yys1696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1696 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1698 := &x.State
				yyv1698.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1699 := &x.LastTerminationState
				yyv1699.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1696)
		} // end switch yys1696
	} // end for yyj1696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1705 int
	var yyb1705 bool
	var yyhl1705 bool = l >= 0
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1707 := &x.State
		yyv1707.CodecDecodeSelf(d)
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1708 := &x.LastTerminationState
		yyv1708.CodecDecodeSelf(d)
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1705++
		if yyhl1705 {
			yyb1705 = yyj1705 > l
		} else {
			yyb1705 = r.CheckBreak()
		}
		if yyb1705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1714 := z.EncBinary()
	_ = yym1714
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1715 := z.DecBinary()
	_ = yym1715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1716 := z.EncBinary()
	_ = yym1716
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1717 := z.DecBinary()
	_ = yym1717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1718 := z.EncBinary()
		_ = yym1718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1719 := !z.EncBinary()
			yy2arr1719 := z.EncBasicHandle().StructToArray
			var yyq1719 [6]bool
			_, _, _ = yysep1719, yyq1719, yy2arr1719
			const yyr1719 bool = false
			yyq1719[2] = true
			yyq1719[3] = true
			yyq1719[4] = x.Reason != ""
			yyq1719[5] = x.Message != ""
			var yynn1719 int
			if yyr1719 || yy2arr1719 {
				r.EncodeArrayStart(6)
			} else {
				yynn1719 = 2
				for _, b := range yyq1719 {
					if b {
						yynn1719++
					}
				}
				r.EncodeMapStart(yynn1719)
				yynn1719 = 0
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[2] {
					yy1723 := &x.LastProbeTime
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1723) {
					} else if yym1724 {
						z.EncBinaryMarshal(yy1723)
					} else if !yym1724 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1723)
					} else {
						z.EncFallback(yy1723)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1725 := &x.LastProbeTime
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1725) {
					} else if yym1726 {
						z.EncBinaryMarshal(yy1725)
					} else if !yym1726 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1725)
					} else {
						z.EncFallback(yy1725)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[3] {
					yy1728 := &x.LastTransitionTime
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1728) {
					} else if yym1729 {
						z.EncBinaryMarshal(yy1728)
					} else if !yym1729 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1728)
					} else {
						z.EncFallback(yy1728)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1730 := &x.LastTransitionTime
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1730) {
					} else if yym1731 {
						z.EncBinaryMarshal(yy1730)
					} else if !yym1731 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1730)
					} else {
						z.EncFallback(yy1730)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[4] {
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[5] {
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1738 := z.DecBinary()
	_ = yym1738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1739 := r.ContainerType()
		if yyct1739 == codecSelferValueTypeMap1234 {
			yyl1739 := r.ReadMapStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1739, d)
			}
		} else if yyct1739 == codecSelferValueTypeArray1234 {
			yyl1739 := r.ReadArrayStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1740Slc
	var yyhl1740 bool = l >= 0
	for yyj1740 := 0; ; yyj1740++ {
		if yyhl1740 {
			if yyj1740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1740Slc = r.DecodeBytes(yys1740Slc, true, true)
		yys1740 := string(yys1740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1740 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1743 := &x.LastProbeTime
				yym1744 := z.DecBinary()
				_ = yym1744
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1743) {
				} else if yym1744 {
					z.DecBinaryUnmarshal(yyv1743)
				} else if !yym1744 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1743)
				} else {
					z.DecFallback(yyv1743, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1745 := &x.LastTransitionTime
				yym1746 := z.DecBinary()
				_ = yym1746
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1745) {
				} else if yym1746 {
					z.DecBinaryUnmarshal(yyv1745)
				} else if !yym1746 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1745)
				} else {
					z.DecFallback(yyv1745, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1740)
		} // end switch yys1740
	} // end for yyj1740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1749 int
	var yyb1749 bool
	var yyhl1749 bool = l >= 0
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1752 := &x.LastProbeTime
		yym1753 := z.DecBinary()
		_ = yym1753
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1752) {
		} else if yym1753 {
			z.DecBinaryUnmarshal(yyv1752)
		} else if !yym1753 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1752)
		} else {
			z.DecFallback(yyv1752, false)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1754 := &x.LastTransitionTime
		yym1755 := z.DecBinary()
		_ = yym1755
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1754) {
		} else if yym1755 {
			z.DecBinaryUnmarshal(yyv1754)
		} else if !yym1755 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1754)
		} else {
			z.DecFallback(yyv1754, false)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1749++
		if yyhl1749 {
			yyb1749 = yyj1749 > l
		} else {
			yyb1749 = r.CheckBreak()
		}
		if yyb1749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1758 := z.EncBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1759 := z.DecBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [4]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[0] = x.Kind != ""
			yyq1761[1] = x.APIVersion != ""
			yyq1761[2] = true
			var yynn1761 int
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(4)
			} else {
				yynn1761 = 1
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
				yynn1761 = 0
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[0] {
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[1] {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[2] {
					yy1769 := &x.ListMeta
					yym1770 := z.EncBinary()
					_ = yym1770
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1769) {
					} else {
						z.EncFallback(yy1769)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1771 := &x.ListMeta
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1771) {
					} else {
						z.EncFallback(yy1771)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1776 := z.DecBinary()
	_ = yym1776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1777 := r.ContainerType()
		if yyct1777 == codecSelferValueTypeMap1234 {
			yyl1777 := r.ReadMapStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1777, d)
			}
		} else if yyct1777 == codecSelferValueTypeArray1234 {
			yyl1777 := r.ReadArrayStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1778Slc
	var yyhl1778 bool = l >= 0
	for yyj1778 := 0; ; yyj1778++ {
		if yyhl1778 {
			if yyj1778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1778Slc = r.DecodeBytes(yys1778Slc, true, true)
		yys1778 := string(yys1778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1778 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1781 := &x.ListMeta
				yym1782 := z.DecBinary()
				_ = yym1782
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1781) {
				} else {
					z.DecFallback(yyv1781, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1783 := &x.Items
				yym1784 := z.DecBinary()
				_ = yym1784
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1783), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1778)
		} // end switch yys1778
	} // end for yyj1778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1785 int
	var yyb1785 bool
	var yyhl1785 bool = l >= 0
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1788 := &x.ListMeta
		yym1789 := z.DecBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1788) {
		} else {
			z.DecFallback(yyv1788, false)
		}
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1790 := &x.Items
		yym1791 := z.DecBinary()
		_ = yym1791
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1790), d)
		}
	}
	for {
		yyj1785++
		if yyhl1785 {
			yyb1785 = yyj1785 > l
		} else {
			yyb1785 = r.CheckBreak()
		}
		if yyb1785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1792 := z.EncBinary()
	_ = yym1792
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1794 := z.EncBinary()
		_ = yym1794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1795 := !z.EncBinary()
			yy2arr1795 := z.EncBasicHandle().StructToArray
			var yyq1795 [1]bool
			_, _, _ = yysep1795, yyq1795, yy2arr1795
			const yyr1795 bool = false
			var yynn1795 int
			if yyr1795 || yy2arr1795 {
				r.EncodeArrayStart(1)
			} else {
				yynn1795 = 1
				for _, b := range yyq1795 {
					if b {
						yynn1795++
					}
				}
				r.EncodeMapStart(yynn1795)
				yynn1795 = 0
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1798 := z.EncBinary()
					_ = yym1798
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1795 || yy2arr1795 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1799 := z.DecBinary()
	_ = yym1799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1800 := r.ContainerType()
		if yyct1800 == codecSelferValueTypeMap1234 {
			yyl1800 := r.ReadMapStart()
			if yyl1800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1800, d)
			}
		} else if yyct1800 == codecSelferValueTypeArray1234 {
			yyl1800 := r.ReadArrayStart()
			if yyl1800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1801Slc
	var yyhl1801 bool = l >= 0
	for yyj1801 := 0; ; yyj1801++ {
		if yyhl1801 {
			if yyj1801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1801Slc = r.DecodeBytes(yys1801Slc, true, true)
		yys1801 := string(yys1801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1801 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1802 := &x.NodeSelectorTerms
				yym1803 := z.DecBinary()
				_ = yym1803
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1802), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1801)
		} // end switch yys1801
	} // end for yyj1801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1804 int
	var yyb1804 bool
	var yyhl1804 bool = l >= 0
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1805 := &x.NodeSelectorTerms
		yym1806 := z.DecBinary()
		_ = yym1806
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1805), d)
		}
	}
	for {
		yyj1804++
		if yyhl1804 {
			yyb1804 = yyj1804 > l
		} else {
			yyb1804 = r.CheckBreak()
		}
		if yyb1804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1807 := z.EncBinary()
		_ = yym1807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1808 := !z.EncBinary()
			yy2arr1808 := z.EncBasicHandle().StructToArray
			var yyq1808 [1]bool
			_, _, _ = yysep1808, yyq1808, yy2arr1808
			const yyr1808 bool = false
			var yynn1808 int
			if yyr1808 || yy2arr1808 {
				r.EncodeArrayStart(1)
			} else {
				yynn1808 = 1
				for _, b := range yyq1808 {
					if b {
						yynn1808++
					}
				}
				r.EncodeMapStart(yynn1808)
				yynn1808 = 0
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1812 := z.DecBinary()
	_ = yym1812
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1813 := r.ContainerType()
		if yyct1813 == codecSelferValueTypeMap1234 {
			yyl1813 := r.ReadMapStart()
			if yyl1813 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1813, d)
			}
		} else if yyct1813 == codecSelferValueTypeArray1234 {
			yyl1813 := r.ReadArrayStart()
			if yyl1813 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1813, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1814Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1814Slc
	var yyhl1814 bool = l >= 0
	for yyj1814 := 0; ; yyj1814++ {
		if yyhl1814 {
			if yyj1814 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1814Slc = r.DecodeBytes(yys1814Slc, true, true)
		yys1814 := string(yys1814Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1814 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1815 := &x.MatchExpressions
				yym1816 := z.DecBinary()
				_ = yym1816
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1815), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1814)
		} // end switch yys1814
	} // end for yyj1814
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1817 int
	var yyb1817 bool
	var yyhl1817 bool = l >= 0
	yyj1817++
	if yyhl1817 {
		yyb1817 = yyj1817 > l
	} else {
		yyb1817 = r.CheckBreak()
	}
	if yyb1817 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1818 := &x.MatchExpressions
		yym1819 := z.DecBinary()
		_ = yym1819
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1818), d)
		}
	}
	for {
		yyj1817++
		if yyhl1817 {
			yyb1817 = yyj1817 > l
		} else {
			yyb1817 = r.CheckBreak()
		}
		if yyb1817 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1817-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1820 := z.EncBinary()
		_ = yym1820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1821 := !z.EncBinary()
			yy2arr1821 := z.EncBasicHandle().StructToArray
			var yyq1821 [3]bool
			_, _, _ = yysep1821, yyq1821, yy2arr1821
			const yyr1821 bool = false
			yyq1821[2] = len(x.Values) != 0
			var yynn1821 int
			if yyr1821 || yy2arr1821 {
				r.EncodeArrayStart(3)
			} else {
				yynn1821 = 2
				for _, b := range yyq1821 {
					if b {
						yynn1821++
					}
				}
				r.EncodeMapStart(yynn1821)
				yynn1821 = 0
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1823 := z.EncBinary()
				_ = yym1823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1824 := z.EncBinary()
				_ = yym1824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1821[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1827 := z.EncBinary()
						_ = yym1827
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1821[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1828 := z.EncBinary()
						_ = yym1828
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1821 || yy2arr1821 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1829 := z.DecBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1830 := r.ContainerType()
		if yyct1830 == codecSelferValueTypeMap1234 {
			yyl1830 := r.ReadMapStart()
			if yyl1830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1830, d)
			}
		} else if yyct1830 == codecSelferValueTypeArray1234 {
			yyl1830 := r.ReadArrayStart()
			if yyl1830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1831Slc
	var yyhl1831 bool = l >= 0
	for yyj1831 := 0; ; yyj1831++ {
		if yyhl1831 {
			if yyj1831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1831Slc = r.DecodeBytes(yys1831Slc, true, true)
		yys1831 := string(yys1831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1831 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1834 := &x.Values
				yym1835 := z.DecBinary()
				_ = yym1835
				if false {
				} else {
					z.F.DecSliceStringX(yyv1834, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1831)
		} // end switch yys1831
	} // end for yyj1831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1836 int
	var yyb1836 bool
	var yyhl1836 bool = l >= 0
	yyj1836++
	if yyhl1836 {
		yyb1836 = yyj1836 > l
	} else {
		yyb1836 = r.CheckBreak()
	}
	if yyb1836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1836++
	if yyhl1836 {
		yyb1836 = yyj1836 > l
	} else {
		yyb1836 = r.CheckBreak()
	}
	if yyb1836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1836++
	if yyhl1836 {
		yyb1836 = yyj1836 > l
	} else {
		yyb1836 = r.CheckBreak()
	}
	if yyb1836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1839 := &x.Values
		yym1840 := z.DecBinary()
		_ = yym1840
		if false {
		} else {
			z.F.DecSliceStringX(yyv1839, false, d)
		}
	}
	for {
		yyj1836++
		if yyhl1836 {
			yyb1836 = yyj1836 > l
		} else {
			yyb1836 = r.CheckBreak()
		}
		if yyb1836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1841 := z.EncBinary()
	_ = yym1841
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1842 := z.DecBinary()
	_ = yym1842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1843 := z.EncBinary()
		_ = yym1843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1844 := !z.EncBinary()
			yy2arr1844 := z.EncBasicHandle().StructToArray
			var yyq1844 [3]bool
			_, _, _ = yysep1844, yyq1844, yy2arr1844
			const yyr1844 bool = false
			yyq1844[0] = x.NodeAffinity != nil
			yyq1844[1] = x.PodAffinity != nil
			yyq1844[2] = x.PodAntiAffinity != nil
			var yynn1844 int
			if yyr1844 || yy2arr1844 {
				r.EncodeArrayStart(3)
			} else {
				yynn1844 = 0
				for _, b := range yyq1844 {
					if b {
						yynn1844++
					}
				}
				r.EncodeMapStart(yynn1844)
				yynn1844 = 0
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1844[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1844[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1844[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1844 || yy2arr1844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1848 := z.DecBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1849 := r.ContainerType()
		if yyct1849 == codecSelferValueTypeMap1234 {
			yyl1849 := r.ReadMapStart()
			if yyl1849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1849, d)
			}
		} else if yyct1849 == codecSelferValueTypeArray1234 {
			yyl1849 := r.ReadArrayStart()
			if yyl1849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1850Slc
	var yyhl1850 bool = l >= 0
	for yyj1850 := 0; ; yyj1850++ {
		if yyhl1850 {
			if yyj1850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1850Slc = r.DecodeBytes(yys1850Slc, true, true)
		yys1850 := string(yys1850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1850 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1850)
		} // end switch yys1850
	} // end for yyj1850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1854 int
	var yyb1854 bool
	var yyhl1854 bool = l >= 0
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1854++
		if yyhl1854 {
			yyb1854 = yyj1854 > l
		} else {
			yyb1854 = r.CheckBreak()
		}
		if yyb1854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1858 := z.EncBinary()
		_ = yym1858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1859 := !z.EncBinary()
			yy2arr1859 := z.EncBasicHandle().StructToArray
			var yyq1859 [2]bool
			_, _, _ = yysep1859, yyq1859, yy2arr1859
			const yyr1859 bool = false
			yyq1859[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1859[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1859 int
			if yyr1859 || yy2arr1859 {
				r.EncodeArrayStart(2)
			} else {
				yynn1859 = 0
				for _, b := range yyq1859 {
					if b {
						yynn1859++
					}
				}
				r.EncodeMapStart(yynn1859)
				yynn1859 = 0
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1861 := z.EncBinary()
						_ = yym1861
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1859[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1867 := r.ContainerType()
		if yyct1867 == codecSelferValueTypeMap1234 {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if yyct1867 == codecSelferValueTypeArray1234 {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1868 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1869 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1869), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1871 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1872 := z.DecBinary()
				_ = yym1872
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1873 int
	var yyb1873 bool
	var yyhl1873 bool = l >= 0
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1874 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1874), d)
		}
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1876 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1876), d)
		}
	}
	for {
		yyj1873++
		if yyhl1873 {
			yyb1873 = yyj1873 > l
		} else {
			yyb1873 = r.CheckBreak()
		}
		if yyb1873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1878 := z.EncBinary()
		_ = yym1878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1879 := !z.EncBinary()
			yy2arr1879 := z.EncBasicHandle().StructToArray
			var yyq1879 [2]bool
			_, _, _ = yysep1879, yyq1879, yy2arr1879
			const yyr1879 bool = false
			yyq1879[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1879[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1879 int
			if yyr1879 || yy2arr1879 {
				r.EncodeArrayStart(2)
			} else {
				yynn1879 = 0
				for _, b := range yyq1879 {
					if b {
						yynn1879++
					}
				}
				r.EncodeMapStart(yynn1879)
				yynn1879 = 0
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1881 := z.EncBinary()
						_ = yym1881
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1882 := z.EncBinary()
						_ = yym1882
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1884 := z.EncBinary()
						_ = yym1884
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1885 := z.EncBinary()
						_ = yym1885
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1886 := z.DecBinary()
	_ = yym1886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1887 := r.ContainerType()
		if yyct1887 == codecSelferValueTypeMap1234 {
			yyl1887 := r.ReadMapStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1887, d)
			}
		} else if yyct1887 == codecSelferValueTypeArray1234 {
			yyl1887 := r.ReadArrayStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1888Slc
	var yyhl1888 bool = l >= 0
	for yyj1888 := 0; ; yyj1888++ {
		if yyhl1888 {
			if yyj1888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1888Slc = r.DecodeBytes(yys1888Slc, true, true)
		yys1888 := string(yys1888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1888 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1889 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1890 := z.DecBinary()
				_ = yym1890
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1889), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1891 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1892 := z.DecBinary()
				_ = yym1892
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1891), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1888)
		} // end switch yys1888
	} // end for yyj1888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1893 int
	var yyb1893 bool
	var yyhl1893 bool = l >= 0
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1894 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1895 := z.DecBinary()
		_ = yym1895
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1894), d)
		}
	}
	yyj1893++
	if yyhl1893 {
		yyb1893 = yyj1893 > l
	} else {
		yyb1893 = r.CheckBreak()
	}
	if yyb1893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1896 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1896), d)
		}
	}
	for {
		yyj1893++
		if yyhl1893 {
			yyb1893 = yyj1893 > l
		} else {
			yyb1893 = r.CheckBreak()
		}
		if yyb1893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1898 := z.EncBinary()
		_ = yym1898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1899 := !z.EncBinary()
			yy2arr1899 := z.EncBasicHandle().StructToArray
			var yyq1899 [2]bool
			_, _, _ = yysep1899, yyq1899, yy2arr1899
			const yyr1899 bool = false
			var yynn1899 int
			if yyr1899 || yy2arr1899 {
				r.EncodeArrayStart(2)
			} else {
				yynn1899 = 2
				for _, b := range yyq1899 {
					if b {
						yynn1899++
					}
				}
				r.EncodeMapStart(yynn1899)
				yynn1899 = 0
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1901 := z.EncBinary()
				_ = yym1901
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1902 := z.EncBinary()
				_ = yym1902
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1904 := &x.PodAffinityTerm
				yy1904.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1905 := &x.PodAffinityTerm
				yy1905.CodecEncodeSelf(e)
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1906 := z.DecBinary()
	_ = yym1906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1907 := r.ContainerType()
		if yyct1907 == codecSelferValueTypeMap1234 {
			yyl1907 := r.ReadMapStart()
			if yyl1907 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1907, d)
			}
		} else if yyct1907 == codecSelferValueTypeArray1234 {
			yyl1907 := r.ReadArrayStart()
			if yyl1907 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1908Slc
	var yyhl1908 bool = l >= 0
	for yyj1908 := 0; ; yyj1908++ {
		if yyhl1908 {
			if yyj1908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1908Slc = r.DecodeBytes(yys1908Slc, true, true)
		yys1908 := string(yys1908Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1908 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1910 := &x.PodAffinityTerm
				yyv1910.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1908)
		} // end switch yys1908
	} // end for yyj1908
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1911 int
	var yyb1911 bool
	var yyhl1911 bool = l >= 0
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1913 := &x.PodAffinityTerm
		yyv1913.CodecDecodeSelf(d)
	}
	for {
		yyj1911++
		if yyhl1911 {
			yyb1911 = yyj1911 > l
		} else {
			yyb1911 = r.CheckBreak()
		}
		if yyb1911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1914 := z.EncBinary()
		_ = yym1914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1915 := !z.EncBinary()
			yy2arr1915 := z.EncBasicHandle().StructToArray
			var yyq1915 [3]bool
			_, _, _ = yysep1915, yyq1915, yy2arr1915
			const yyr1915 bool = false
			yyq1915[0] = x.LabelSelector != nil
			yyq1915[2] = x.TopologyKey != ""
			var yynn1915 int
			if yyr1915 || yy2arr1915 {
				r.EncodeArrayStart(3)
			} else {
				yynn1915 = 1
				for _, b := range yyq1915 {
					if b {
						yynn1915++
					}
				}
				r.EncodeMapStart(yynn1915)
				yynn1915 = 0
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1917 := z.EncBinary()
						_ = yym1917
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1918 := z.EncBinary()
						_ = yym1918
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[2] {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1925 := z.DecBinary()
	_ = yym1925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1926 := r.ContainerType()
		if yyct1926 == codecSelferValueTypeMap1234 {
			yyl1926 := r.ReadMapStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1926, d)
			}
		} else if yyct1926 == codecSelferValueTypeArray1234 {
			yyl1926 := r.ReadArrayStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1927Slc
	var yyhl1927 bool = l >= 0
	for yyj1927 := 0; ; yyj1927++ {
		if yyhl1927 {
			if yyj1927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1927Slc = r.DecodeBytes(yys1927Slc, true, true)
		yys1927 := string(yys1927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1927 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1929 := z.DecBinary()
				_ = yym1929
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1930 := &x.Namespaces
				yym1931 := z.DecBinary()
				_ = yym1931
				if false {
				} else {
					z.F.DecSliceStringX(yyv1930, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1927)
		} // end switch yys1927
	} // end for yyj1927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1933 int
	var yyb1933 bool
	var yyhl1933 bool = l >= 0
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1935 := z.DecBinary()
		_ = yym1935
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1936 := &x.Namespaces
		yym1937 := z.DecBinary()
		_ = yym1937
		if false {
		} else {
			z.F.DecSliceStringX(yyv1936, false, d)
		}
	}
	yyj1933++
	if yyhl1933 {
		yyb1933 = yyj1933 > l
	} else {
		yyb1933 = r.CheckBreak()
	}
	if yyb1933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1933++
		if yyhl1933 {
			yyb1933 = yyj1933 > l
		} else {
			yyb1933 = r.CheckBreak()
		}
		if yyb1933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1939 := z.EncBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1940 := !z.EncBinary()
			yy2arr1940 := z.EncBasicHandle().StructToArray
			var yyq1940 [2]bool
			_, _, _ = yysep1940, yyq1940, yy2arr1940
			const yyr1940 bool = false
			yyq1940[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1940[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1940 int
			if yyr1940 || yy2arr1940 {
				r.EncodeArrayStart(2)
			} else {
				yynn1940 = 0
				for _, b := range yyq1940 {
					if b {
						yynn1940++
					}
				}
				r.EncodeMapStart(yynn1940)
				yynn1940 = 0
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1940[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1940[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1943 := z.EncBinary()
						_ = yym1943
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1944 := z.EncBinary()
						_ = yym1944
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1945 := z.DecBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1946 := r.ContainerType()
		if yyct1946 == codecSelferValueTypeMap1234 {
			yyl1946 := r.ReadMapStart()
			if yyl1946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1946, d)
			}
		} else if yyct1946 == codecSelferValueTypeArray1234 {
			yyl1946 := r.ReadArrayStart()
			if yyl1946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1947Slc
	var yyhl1947 bool = l >= 0
	for yyj1947 := 0; ; yyj1947++ {
		if yyhl1947 {
			if yyj1947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1947Slc = r.DecodeBytes(yys1947Slc, true, true)
		yys1947 := string(yys1947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1947 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1949 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1950 := z.DecBinary()
				_ = yym1950
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1949), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1947)
		} // end switch yys1947
	} // end for yyj1947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1951 int
	var yyb1951 bool
	var yyhl1951 bool = l >= 0
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1953 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1954 := z.DecBinary()
		_ = yym1954
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1953), d)
		}
	}
	for {
		yyj1951++
		if yyhl1951 {
			yyb1951 = yyj1951 > l
		} else {
			yyb1951 = r.CheckBreak()
		}
		if yyb1951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1955 := z.EncBinary()
		_ = yym1955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1956 := !z.EncBinary()
			yy2arr1956 := z.EncBasicHandle().StructToArray
			var yyq1956 [2]bool
			_, _, _ = yysep1956, yyq1956, yy2arr1956
			const yyr1956 bool = false
			var yynn1956 int
			if yyr1956 || yy2arr1956 {
				r.EncodeArrayStart(2)
			} else {
				yynn1956 = 2
				for _, b := range yyq1956 {
					if b {
						yynn1956++
					}
				}
				r.EncodeMapStart(yynn1956)
				yynn1956 = 0
			}
			if yyr1956 || yy2arr1956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1958 := z.EncBinary()
				_ = yym1958
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1959 := z.EncBinary()
				_ = yym1959
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1956 || yy2arr1956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1961 := &x.Preference
				yy1961.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1962 := &x.Preference
				yy1962.CodecEncodeSelf(e)
			}
			if yyr1956 || yy2arr1956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1964 := r.ContainerType()
		if yyct1964 == codecSelferValueTypeMap1234 {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if yyct1964 == codecSelferValueTypeArray1234 {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1965 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1967 := &x.Preference
				yyv1967.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1968 int
	var yyb1968 bool
	var yyhl1968 bool = l >= 0
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1970 := &x.Preference
		yyv1970.CodecDecodeSelf(d)
	}
	for {
		yyj1968++
		if yyhl1968 {
			yyb1968 = yyj1968 > l
		} else {
			yyb1968 = r.CheckBreak()
		}
		if yyb1968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1971 := z.EncBinary()
		_ = yym1971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1972 := !z.EncBinary()
			yy2arr1972 := z.EncBasicHandle().StructToArray
			var yyq1972 [3]bool
			_, _, _ = yysep1972, yyq1972, yy2arr1972
			const yyr1972 bool = false
			yyq1972[1] = x.Value != ""
			var yynn1972 int
			if yyr1972 || yy2arr1972 {
				r.EncodeArrayStart(3)
			} else {
				yynn1972 = 2
				for _, b := range yyq1972 {
					if b {
						yynn1972++
					}
				}
				r.EncodeMapStart(yynn1972)
				yynn1972 = 0
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1974 := z.EncBinary()
				_ = yym1974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1975 := z.EncBinary()
				_ = yym1975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1972[1] {
					yym1977 := z.EncBinary()
					_ = yym1977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1972 || yy2arr1972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1980 := z.DecBinary()
	_ = yym1980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1981 := r.ContainerType()
		if yyct1981 == codecSelferValueTypeMap1234 {
			yyl1981 := r.ReadMapStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1981, d)
			}
		} else if yyct1981 == codecSelferValueTypeArray1234 {
			yyl1981 := r.ReadArrayStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1982Slc
	var yyhl1982 bool = l >= 0
	for yyj1982 := 0; ; yyj1982++ {
		if yyhl1982 {
			if yyj1982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1982Slc = r.DecodeBytes(yys1982Slc, true, true)
		yys1982 := string(yys1982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1982 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1982)
		} // end switch yys1982
	} // end for yyj1982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1986 int
	var yyb1986 bool
	var yyhl1986 bool = l >= 0
	yyj1986++
	if yyhl1986 {
		yyb1986 = yyj1986 > l
	} else {
		yyb1986 = r.CheckBreak()
	}
	if yyb1986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1986++
	if yyhl1986 {
		yyb1986 = yyj1986 > l
	} else {
		yyb1986 = r.CheckBreak()
	}
	if yyb1986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1986++
	if yyhl1986 {
		yyb1986 = yyj1986 > l
	} else {
		yyb1986 = r.CheckBreak()
	}
	if yyb1986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1986++
		if yyhl1986 {
			yyb1986 = yyj1986 > l
		} else {
			yyb1986 = r.CheckBreak()
		}
		if yyb1986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1990 := z.EncBinary()
	_ = yym1990
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1991 := z.DecBinary()
	_ = yym1991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1992 := z.EncBinary()
		_ = yym1992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1993 := !z.EncBinary()
			yy2arr1993 := z.EncBasicHandle().StructToArray
			var yyq1993 [4]bool
			_, _, _ = yysep1993, yyq1993, yy2arr1993
			const yyr1993 bool = false
			yyq1993[0] = x.Key != ""
			yyq1993[1] = x.Operator != ""
			yyq1993[2] = x.Value != ""
			yyq1993[3] = x.Effect != ""
			var yynn1993 int
			if yyr1993 || yy2arr1993 {
				r.EncodeArrayStart(4)
			} else {
				yynn1993 = 0
				for _, b := range yyq1993 {
					if b {
						yynn1993++
					}
				}
				r.EncodeMapStart(yynn1993)
				yynn1993 = 0
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[0] {
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[2] {
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1993[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2003 := r.ContainerType()
		if yyct2003 == codecSelferValueTypeMap1234 {
			yyl2003 := r.ReadMapStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2003, d)
			}
		} else if yyct2003 == codecSelferValueTypeArray1234 {
			yyl2003 := r.ReadArrayStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2004Slc
	var yyhl2004 bool = l >= 0
	for yyj2004 := 0; ; yyj2004++ {
		if yyhl2004 {
			if yyj2004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2004Slc = r.DecodeBytes(yys2004Slc, true, true)
		yys2004 := string(yys2004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2004 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2004)
		} // end switch yys2004
	} // end for yyj2004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2009 int
	var yyb2009 bool
	var yyhl2009 bool = l >= 0
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2009++
		if yyhl2009 {
			yyb2009 = yyj2009 > l
		} else {
			yyb2009 = r.CheckBreak()
		}
		if yyb2009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2014 := z.EncBinary()
	_ = yym2014
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2015 := z.DecBinary()
	_ = yym2015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2016 := z.EncBinary()
		_ = yym2016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2017 := !z.EncBinary()
			yy2arr2017 := z.EncBasicHandle().StructToArray
			var yyq2017 [13]bool
			_, _, _ = yysep2017, yyq2017, yy2arr2017
			const yyr2017 bool = false
			yyq2017[2] = x.RestartPolicy != ""
			yyq2017[3] = x.TerminationGracePeriodSeconds != nil
			yyq2017[4] = x.ActiveDeadlineSeconds != nil
			yyq2017[5] = x.DNSPolicy != ""
			yyq2017[6] = len(x.NodeSelector) != 0
			yyq2017[8] = x.NodeName != ""
			yyq2017[9] = x.SecurityContext != nil
			yyq2017[10] = len(x.ImagePullSecrets) != 0
			yyq2017[11] = x.Hostname != ""
			yyq2017[12] = x.Subdomain != ""
			var yynn2017 int
			if yyr2017 || yy2arr2017 {
				r.EncodeArrayStart(13)
			} else {
				yynn2017 = 3
				for _, b := range yyq2017 {
					if b {
						yynn2017++
					}
				}
				r.EncodeMapStart(yynn2017)
				yynn2017 = 0
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2026 := *x.TerminationGracePeriodSeconds
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							r.EncodeInt(int64(yy2026))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2028 := *x.TerminationGracePeriodSeconds
						yym2029 := z.EncBinary()
						_ = yym2029
						if false {
						} else {
							r.EncodeInt(int64(yy2028))
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2031 := *x.ActiveDeadlineSeconds
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							r.EncodeInt(int64(yy2031))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2033 := *x.ActiveDeadlineSeconds
						yym2034 := z.EncBinary()
						_ = yym2034
						if false {
						} else {
							r.EncodeInt(int64(yy2033))
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2040 := z.EncBinary()
				_ = yym2040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2041 := z.EncBinary()
				_ = yym2041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[8] {
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[11] {
					yym2050 := z.EncBinary()
					_ = yym2050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[12] {
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2055 := z.DecBinary()
	_ = yym2055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2056 := r.ContainerType()
		if yyct2056 == codecSelferValueTypeMap1234 {
			yyl2056 := r.ReadMapStart()
			if yyl2056 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2056, d)
			}
		} else if yyct2056 == codecSelferValueTypeArray1234 {
			yyl2056 := r.ReadArrayStart()
			if yyl2056 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2057Slc
	var yyhl2057 bool = l >= 0
	for yyj2057 := 0; ; yyj2057++ {
		if yyhl2057 {
			if yyj2057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2057Slc = r.DecodeBytes(yys2057Slc, true, true)
		yys2057 := string(yys2057Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2057 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2058 := &x.Volumes
				yym2059 := z.DecBinary()
				_ = yym2059
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2058), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2060 := &x.Containers
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2060), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2064 := z.DecBinary()
				_ = yym2064
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2068 := &x.NodeSelector
				yym2069 := z.DecBinary()
				_ = yym2069
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2068, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2073 := &x.ImagePullSecrets
				yym2074 := z.DecBinary()
				_ = yym2074
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2073), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2057)
		} // end switch yys2057
	} // end for yyj2057
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2077 int
	var yyb2077 bool
	var yyhl2077 bool = l >= 0
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2078 := &x.Volumes
		yym2079 := z.DecBinary()
		_ = yym2079
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2078), d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2080 := &x.Containers
		yym2081 := z.DecBinary()
		_ = yym2081
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2080), d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2088 := &x.NodeSelector
		yym2089 := z.DecBinary()
		_ = yym2089
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2088, false, d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2093 := &x.ImagePullSecrets
		yym2094 := z.DecBinary()
		_ = yym2094
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2093), d)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2077++
		if yyhl2077 {
			yyb2077 = yyj2077 > l
		} else {
			yyb2077 = r.CheckBreak()
		}
		if yyb2077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2097 := z.EncBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2098 := !z.EncBinary()
			yy2arr2098 := z.EncBasicHandle().StructToArray
			var yyq2098 [2]bool
			_, _, _ = yysep2098, yyq2098, yy2arr2098
			const yyr2098 bool = false
			var yynn2098 int
			if yyr2098 || yy2arr2098 {
				r.EncodeArrayStart(2)
			} else {
				yynn2098 = 2
				for _, b := range yyq2098 {
					if b {
						yynn2098++
					}
				}
				r.EncodeMapStart(yynn2098)
				yynn2098 = 0
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2100 := z.EncBinary()
				_ = yym2100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2101 := z.EncBinary()
				_ = yym2101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2103 := z.EncBinary()
				_ = yym2103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2104 := z.EncBinary()
				_ = yym2104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2098 || yy2arr2098 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2105 := z.DecBinary()
	_ = yym2105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2106 := r.ContainerType()
		if yyct2106 == codecSelferValueTypeMap1234 {
			yyl2106 := r.ReadMapStart()
			if yyl2106 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2106, d)
			}
		} else if yyct2106 == codecSelferValueTypeArray1234 {
			yyl2106 := r.ReadArrayStart()
			if yyl2106 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2106, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2107Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2107Slc
	var yyhl2107 bool = l >= 0
	for yyj2107 := 0; ; yyj2107++ {
		if yyhl2107 {
			if yyj2107 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2107Slc = r.DecodeBytes(yys2107Slc, true, true)
		yys2107 := string(yys2107Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2107 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2107)
		} // end switch yys2107
	} // end for yyj2107
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2110 int
	var yyb2110 bool
	var yyhl2110 bool = l >= 0
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2110++
		if yyhl2110 {
			yyb2110 = yyj2110 > l
		} else {
			yyb2110 = r.CheckBreak()
		}
		if yyb2110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2113 := z.EncBinary()
		_ = yym2113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2114 := !z.EncBinary()
			yy2arr2114 := z.EncBasicHandle().StructToArray
			var yyq2114 [8]bool
			_, _, _ = yysep2114, yyq2114, yy2arr2114
			const yyr2114 bool = false
			yyq2114[0] = x.HostNetwork != false
			yyq2114[1] = x.HostPID != false
			yyq2114[2] = x.HostIPC != false
			yyq2114[3] = x.SELinuxOptions != nil
			yyq2114[4] = x.RunAsUser != nil
			yyq2114[5] = x.RunAsNonRoot != nil
			yyq2114[6] = len(x.SupplementalGroups) != 0
			yyq2114[7] = x.FSGroup != nil
			var yynn2114 int
			if yyr2114 || yy2arr2114 {
				r.EncodeArrayStart(8)
			} else {
				yynn2114 = 0
				for _, b := range yyq2114 {
					if b {
						yynn2114++
					}
				}
				r.EncodeMapStart(yynn2114)
				yynn2114 = 0
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[0] {
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2114[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2117 := z.EncBinary()
					_ = yym2117
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[1] {
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2114[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[2] {
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2114[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2114[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2126 := *x.RunAsUser
						yym2127 := z.EncBinary()
						_ = yym2127
						if false {
						} else {
							r.EncodeInt(int64(yy2126))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2114[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2128 := *x.RunAsUser
						yym2129 := z.EncBinary()
						_ = yym2129
						if false {
						} else {
							r.EncodeInt(int64(yy2128))
						}
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2131 := *x.RunAsNonRoot
						yym2132 := z.EncBinary()
						_ = yym2132
						if false {
						} else {
							r.EncodeBool(bool(yy2131))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2114[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2133 := *x.RunAsNonRoot
						yym2134 := z.EncBinary()
						_ = yym2134
						if false {
						} else {
							r.EncodeBool(bool(yy2133))
						}
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2136 := z.EncBinary()
						_ = yym2136
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2114[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2137 := z.EncBinary()
						_ = yym2137
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2114[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2139 := *x.FSGroup
						yym2140 := z.EncBinary()
						_ = yym2140
						if false {
						} else {
							r.EncodeInt(int64(yy2139))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2114[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2141 := *x.FSGroup
						yym2142 := z.EncBinary()
						_ = yym2142
						if false {
						} else {
							r.EncodeInt(int64(yy2141))
						}
					}
				}
			}
			if yyr2114 || yy2arr2114 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2143 := z.DecBinary()
	_ = yym2143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2144 := r.ContainerType()
		if yyct2144 == codecSelferValueTypeMap1234 {
			yyl2144 := r.ReadMapStart()
			if yyl2144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2144, d)
			}
		} else if yyct2144 == codecSelferValueTypeArray1234 {
			yyl2144 := r.ReadArrayStart()
			if yyl2144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2145Slc
	var yyhl2145 bool = l >= 0
	for yyj2145 := 0; ; yyj2145++ {
		if yyhl2145 {
			if yyj2145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2145Slc = r.DecodeBytes(yys2145Slc, true, true)
		yys2145 := string(yys2145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2145 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2151 := z.DecBinary()
				_ = yym2151
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2153 := z.DecBinary()
				_ = yym2153
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2154 := &x.SupplementalGroups
				yym2155 := z.DecBinary()
				_ = yym2155
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2154, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2157 := z.DecBinary()
				_ = yym2157
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2145)
		} // end switch yys2145
	} // end for yyj2145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2158 int
	var yyb2158 bool
	var yyhl2158 bool = l >= 0
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2164 := z.DecBinary()
		_ = yym2164
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2166 := z.DecBinary()
		_ = yym2166
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2167 := &x.SupplementalGroups
		yym2168 := z.DecBinary()
		_ = yym2168
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2167, false, d)
		}
	}
	yyj2158++
	if yyhl2158 {
		yyb2158 = yyj2158 > l
	} else {
		yyb2158 = r.CheckBreak()
	}
	if yyb2158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2158++
		if yyhl2158 {
			yyb2158 = yyj2158 > l
		} else {
			yyb2158 = r.CheckBreak()
		}
		if yyb2158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2171 := z.EncBinary()
		_ = yym2171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2172 := !z.EncBinary()
			yy2arr2172 := z.EncBasicHandle().StructToArray
			var yyq2172 [8]bool
			_, _, _ = yysep2172, yyq2172, yy2arr2172
			const yyr2172 bool = false
			yyq2172[0] = x.Phase != ""
			yyq2172[1] = len(x.Conditions) != 0
			yyq2172[2] = x.Message != ""
			yyq2172[3] = x.Reason != ""
			yyq2172[4] = x.HostIP != ""
			yyq2172[5] = x.PodIP != ""
			yyq2172[6] = x.StartTime != nil
			yyq2172[7] = len(x.ContainerStatuses) != 0
			var yynn2172 int
			if yyr2172 || yy2arr2172 {
				r.EncodeArrayStart(8)
			} else {
				yynn2172 = 0
				for _, b := range yyq2172 {
					if b {
						yynn2172++
					}
				}
				r.EncodeMapStart(yynn2172)
				yynn2172 = 0
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2175 := z.EncBinary()
						_ = yym2175
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2176 := z.EncBinary()
						_ = yym2176
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[2] {
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[3] {
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[4] {
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[5] {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2190 := z.EncBinary()
						_ = yym2190
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2190 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2190 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2191 := z.EncBinary()
						_ = yym2191
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2191 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2191 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2193 := z.EncBinary()
						_ = yym2193
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2194 := z.EncBinary()
						_ = yym2194
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2195 := z.DecBinary()
	_ = yym2195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2196 := r.ContainerType()
		if yyct2196 == codecSelferValueTypeMap1234 {
			yyl2196 := r.ReadMapStart()
			if yyl2196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2196, d)
			}
		} else if yyct2196 == codecSelferValueTypeArray1234 {
			yyl2196 := r.ReadArrayStart()
			if yyl2196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2197Slc
	var yyhl2197 bool = l >= 0
	for yyj2197 := 0; ; yyj2197++ {
		if yyhl2197 {
			if yyj2197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2197Slc = r.DecodeBytes(yys2197Slc, true, true)
		yys2197 := string(yys2197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2197 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2199 := &x.Conditions
				yym2200 := z.DecBinary()
				_ = yym2200
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2199), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2206 := z.DecBinary()
				_ = yym2206
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2206 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2206 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2207 := &x.ContainerStatuses
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2207), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2197)
		} // end switch yys2197
	} // end for yyj2197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2209 int
	var yyb2209 bool
	var yyhl2209 bool = l >= 0
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2211 := &x.Conditions
		yym2212 := z.DecBinary()
		_ = yym2212
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2211), d)
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2218 := z.DecBinary()
		_ = yym2218
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2218 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2218 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2219 := &x.ContainerStatuses
		yym2220 := z.DecBinary()
		_ = yym2220
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2219), d)
		}
	}
	for {
		yyj2209++
		if yyhl2209 {
			yyb2209 = yyj2209 > l
		} else {
			yyb2209 = r.CheckBreak()
		}
		if yyb2209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2221 := z.EncBinary()
		_ = yym2221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2222 := !z.EncBinary()
			yy2arr2222 := z.EncBasicHandle().StructToArray
			var yyq2222 [4]bool
			_, _, _ = yysep2222, yyq2222, yy2arr2222
			const yyr2222 bool = false
			yyq2222[0] = x.Kind != ""
			yyq2222[1] = x.APIVersion != ""
			yyq2222[2] = true
			yyq2222[3] = true
			var yynn2222 int
			if yyr2222 || yy2arr2222 {
				r.EncodeArrayStart(4)
			} else {
				yynn2222 = 0
				for _, b := range yyq2222 {
					if b {
						yynn2222++
					}
				}
				r.EncodeMapStart(yynn2222)
				yynn2222 = 0
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[0] {
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[1] {
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[2] {
					yy2230 := &x.ObjectMeta
					yy2230.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2231 := &x.ObjectMeta
					yy2231.CodecEncodeSelf(e)
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[3] {
					yy2233 := &x.Status
					yy2233.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2234 := &x.Status
					yy2234.CodecEncodeSelf(e)
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2235 := z.DecBinary()
	_ = yym2235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2236 := r.ContainerType()
		if yyct2236 == codecSelferValueTypeMap1234 {
			yyl2236 := r.ReadMapStart()
			if yyl2236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2236, d)
			}
		} else if yyct2236 == codecSelferValueTypeArray1234 {
			yyl2236 := r.ReadArrayStart()
			if yyl2236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2237Slc
	var yyhl2237 bool = l >= 0
	for yyj2237 := 0; ; yyj2237++ {
		if yyhl2237 {
			if yyj2237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2237Slc = r.DecodeBytes(yys2237Slc, true, true)
		yys2237 := string(yys2237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2237 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2240 := &x.ObjectMeta
				yyv2240.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2241 := &x.Status
				yyv2241.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2237)
		} // end switch yys2237
	} // end for yyj2237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2242 int
	var yyb2242 bool
	var yyhl2242 bool = l >= 0
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2245 := &x.ObjectMeta
		yyv2245.CodecDecodeSelf(d)
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2246 := &x.Status
		yyv2246.CodecDecodeSelf(d)
	}
	for {
		yyj2242++
		if yyhl2242 {
			yyb2242 = yyj2242 > l
		} else {
			yyb2242 = r.CheckBreak()
		}
		if yyb2242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2247 := z.EncBinary()
		_ = yym2247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2248 := !z.EncBinary()
			yy2arr2248 := z.EncBasicHandle().StructToArray
			var yyq2248 [5]bool
			_, _, _ = yysep2248, yyq2248, yy2arr2248
			const yyr2248 bool = false
			yyq2248[0] = x.Kind != ""
			yyq2248[1] = x.APIVersion != ""
			yyq2248[2] = true
			yyq2248[3] = true
			yyq2248[4] = true
			var yynn2248 int
			if yyr2248 || yy2arr2248 {
				r.EncodeArrayStart(5)
			} else {
				yynn2248 = 0
				for _, b := range yyq2248 {
					if b {
						yynn2248++
					}
				}
				r.EncodeMapStart(yynn2248)
				yynn2248 = 0
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[0] {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[1] {
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2254 := z.EncBinary()
					_ = yym2254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[2] {
					yy2256 := &x.ObjectMeta
					yy2256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2257 := &x.ObjectMeta
					yy2257.CodecEncodeSelf(e)
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[3] {
					yy2259 := &x.Spec
					yy2259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2260 := &x.Spec
					yy2260.CodecEncodeSelf(e)
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[4] {
					yy2262 := &x.Status
					yy2262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2263 := &x.Status
					yy2263.CodecEncodeSelf(e)
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2264 := z.DecBinary()
	_ = yym2264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2265 := r.ContainerType()
		if yyct2265 == codecSelferValueTypeMap1234 {
			yyl2265 := r.ReadMapStart()
			if yyl2265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2265, d)
			}
		} else if yyct2265 == codecSelferValueTypeArray1234 {
			yyl2265 := r.ReadArrayStart()
			if yyl2265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2266Slc
	var yyhl2266 bool = l >= 0
	for yyj2266 := 0; ; yyj2266++ {
		if yyhl2266 {
			if yyj2266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2266Slc = r.DecodeBytes(yys2266Slc, true, true)
		yys2266 := string(yys2266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2266 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2269 := &x.ObjectMeta
				yyv2269.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2270 := &x.Spec
				yyv2270.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2271 := &x.Status
				yyv2271.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2266)
		} // end switch yys2266
	} // end for yyj2266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2272 int
	var yyb2272 bool
	var yyhl2272 bool = l >= 0
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2275 := &x.ObjectMeta
		yyv2275.CodecDecodeSelf(d)
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2276 := &x.Spec
		yyv2276.CodecDecodeSelf(d)
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2277 := &x.Status
		yyv2277.CodecDecodeSelf(d)
	}
	for {
		yyj2272++
		if yyhl2272 {
			yyb2272 = yyj2272 > l
		} else {
			yyb2272 = r.CheckBreak()
		}
		if yyb2272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2278 := z.EncBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2279 := !z.EncBinary()
			yy2arr2279 := z.EncBasicHandle().StructToArray
			var yyq2279 [2]bool
			_, _, _ = yysep2279, yyq2279, yy2arr2279
			const yyr2279 bool = false
			yyq2279[0] = true
			yyq2279[1] = true
			var yynn2279 int
			if yyr2279 || yy2arr2279 {
				r.EncodeArrayStart(2)
			} else {
				yynn2279 = 0
				for _, b := range yyq2279 {
					if b {
						yynn2279++
					}
				}
				r.EncodeMapStart(yynn2279)
				yynn2279 = 0
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[0] {
					yy2281 := &x.ObjectMeta
					yy2281.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2282 := &x.ObjectMeta
					yy2282.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[1] {
					yy2284 := &x.Spec
					yy2284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2285 := &x.Spec
					yy2285.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2286 := z.DecBinary()
	_ = yym2286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2287 := r.ContainerType()
		if yyct2287 == codecSelferValueTypeMap1234 {
			yyl2287 := r.ReadMapStart()
			if yyl2287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2287, d)
			}
		} else if yyct2287 == codecSelferValueTypeArray1234 {
			yyl2287 := r.ReadArrayStart()
			if yyl2287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2288Slc
	var yyhl2288 bool = l >= 0
	for yyj2288 := 0; ; yyj2288++ {
		if yyhl2288 {
			if yyj2288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2288Slc = r.DecodeBytes(yys2288Slc, true, true)
		yys2288 := string(yys2288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2288 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2289 := &x.ObjectMeta
				yyv2289.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2290 := &x.Spec
				yyv2290.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2288)
		} // end switch yys2288
	} // end for yyj2288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2291 int
	var yyb2291 bool
	var yyhl2291 bool = l >= 0
	yyj2291++
	if yyhl2291 {
		yyb2291 = yyj2291 > l
	} else {
		yyb2291 = r.CheckBreak()
	}
	if yyb2291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2292 := &x.ObjectMeta
		yyv2292.CodecDecodeSelf(d)
	}
	yyj2291++
	if yyhl2291 {
		yyb2291 = yyj2291 > l
	} else {
		yyb2291 = r.CheckBreak()
	}
	if yyb2291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2293 := &x.Spec
		yyv2293.CodecDecodeSelf(d)
	}
	for {
		yyj2291++
		if yyhl2291 {
			yyb2291 = yyj2291 > l
		} else {
			yyb2291 = r.CheckBreak()
		}
		if yyb2291 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2291-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2294 := z.EncBinary()
		_ = yym2294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2295 := !z.EncBinary()
			yy2arr2295 := z.EncBasicHandle().StructToArray
			var yyq2295 [4]bool
			_, _, _ = yysep2295, yyq2295, yy2arr2295
			const yyr2295 bool = false
			yyq2295[0] = x.Kind != ""
			yyq2295[1] = x.APIVersion != ""
			yyq2295[2] = true
			yyq2295[3] = true
			var yynn2295 int
			if yyr2295 || yy2arr2295 {
				r.EncodeArrayStart(4)
			} else {
				yynn2295 = 0
				for _, b := range yyq2295 {
					if b {
						yynn2295++
					}
				}
				r.EncodeMapStart(yynn2295)
				yynn2295 = 0
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2295[0] {
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2295[1] {
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2295[2] {
					yy2303 := &x.ObjectMeta
					yy2303.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2304 := &x.ObjectMeta
					yy2304.CodecEncodeSelf(e)
				}
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2295[3] {
					yy2306 := &x.Template
					yy2306.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2295[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2307 := &x.Template
					yy2307.CodecEncodeSelf(e)
				}
			}
			if yyr2295 || yy2arr2295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2308 := z.DecBinary()
	_ = yym2308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2309 := r.ContainerType()
		if yyct2309 == codecSelferValueTypeMap1234 {
			yyl2309 := r.ReadMapStart()
			if yyl2309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2309, d)
			}
		} else if yyct2309 == codecSelferValueTypeArray1234 {
			yyl2309 := r.ReadArrayStart()
			if yyl2309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2310Slc
	var yyhl2310 bool = l >= 0
	for yyj2310 := 0; ; yyj2310++ {
		if yyhl2310 {
			if yyj2310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2310Slc = r.DecodeBytes(yys2310Slc, true, true)
		yys2310 := string(yys2310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2310 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2313 := &x.ObjectMeta
				yyv2313.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2314 := &x.Template
				yyv2314.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2310)
		} // end switch yys2310
	} // end for yyj2310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2315 int
	var yyb2315 bool
	var yyhl2315 bool = l >= 0
	yyj2315++
	if yyhl2315 {
		yyb2315 = yyj2315 > l
	} else {
		yyb2315 = r.CheckBreak()
	}
	if yyb2315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2315++
	if yyhl2315 {
		yyb2315 = yyj2315 > l
	} else {
		yyb2315 = r.CheckBreak()
	}
	if yyb2315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2315++
	if yyhl2315 {
		yyb2315 = yyj2315 > l
	} else {
		yyb2315 = r.CheckBreak()
	}
	if yyb2315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2318 := &x.ObjectMeta
		yyv2318.CodecDecodeSelf(d)
	}
	yyj2315++
	if yyhl2315 {
		yyb2315 = yyj2315 > l
	} else {
		yyb2315 = r.CheckBreak()
	}
	if yyb2315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2319 := &x.Template
		yyv2319.CodecDecodeSelf(d)
	}
	for {
		yyj2315++
		if yyhl2315 {
			yyb2315 = yyj2315 > l
		} else {
			yyb2315 = r.CheckBreak()
		}
		if yyb2315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2320 := z.EncBinary()
		_ = yym2320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2321 := !z.EncBinary()
			yy2arr2321 := z.EncBasicHandle().StructToArray
			var yyq2321 [4]bool
			_, _, _ = yysep2321, yyq2321, yy2arr2321
			const yyr2321 bool = false
			yyq2321[0] = x.Kind != ""
			yyq2321[1] = x.APIVersion != ""
			yyq2321[2] = true
			var yynn2321 int
			if yyr2321 || yy2arr2321 {
				r.EncodeArrayStart(4)
			} else {
				yynn2321 = 1
				for _, b := range yyq2321 {
					if b {
						yynn2321++
					}
				}
				r.EncodeMapStart(yynn2321)
				yynn2321 = 0
			}
			if yyr2321 || yy2arr2321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2321[0] {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2321[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2321 || yy2arr2321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2321[1] {
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2321[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2327 := z.EncBinary()
					_ = yym2327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2321 || yy2arr2321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2321[2] {
					yy2329 := &x.ListMeta
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2329) {
					} else {
						z.EncFallback(yy2329)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2321[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2331 := &x.ListMeta
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2331) {
					} else {
						z.EncFallback(yy2331)
					}
				}
			}
			if yyr2321 || yy2arr2321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2335 := z.EncBinary()
					_ = yym2335
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2321 || yy2arr2321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2336 := z.DecBinary()
	_ = yym2336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2337 := r.ContainerType()
		if yyct2337 == codecSelferValueTypeMap1234 {
			yyl2337 := r.ReadMapStart()
			if yyl2337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2337, d)
			}
		} else if yyct2337 == codecSelferValueTypeArray1234 {
			yyl2337 := r.ReadArrayStart()
			if yyl2337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2338Slc
	var yyhl2338 bool = l >= 0
	for yyj2338 := 0; ; yyj2338++ {
		if yyhl2338 {
			if yyj2338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2338Slc = r.DecodeBytes(yys2338Slc, true, true)
		yys2338 := string(yys2338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2338 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2341 := &x.ListMeta
				yym2342 := z.DecBinary()
				_ = yym2342
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2341) {
				} else {
					z.DecFallback(yyv2341, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2343 := &x.Items
				yym2344 := z.DecBinary()
				_ = yym2344
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2343), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2338)
		} // end switch yys2338
	} // end for yyj2338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2345 int
	var yyb2345 bool
	var yyhl2345 bool = l >= 0
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2348 := &x.ListMeta
		yym2349 := z.DecBinary()
		_ = yym2349
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2348) {
		} else {
			z.DecFallback(yyv2348, false)
		}
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2350 := &x.Items
		yym2351 := z.DecBinary()
		_ = yym2351
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2350), d)
		}
	}
	for {
		yyj2345++
		if yyhl2345 {
			yyb2345 = yyj2345 > l
		} else {
			yyb2345 = r.CheckBreak()
		}
		if yyb2345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2352 := z.EncBinary()
		_ = yym2352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2353 := !z.EncBinary()
			yy2arr2353 := z.EncBasicHandle().StructToArray
			var yyq2353 [3]bool
			_, _, _ = yysep2353, yyq2353, yy2arr2353
			const yyr2353 bool = false
			yyq2353[2] = x.Template != nil
			var yynn2353 int
			if yyr2353 || yy2arr2353 {
				r.EncodeArrayStart(3)
			} else {
				yynn2353 = 2
				for _, b := range yyq2353 {
					if b {
						yynn2353++
					}
				}
				r.EncodeMapStart(yynn2353)
				yynn2353 = 0
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2355 := z.EncBinary()
				_ = yym2355
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2356 := z.EncBinary()
				_ = yym2356
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2361 := z.DecBinary()
	_ = yym2361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2362 := r.ContainerType()
		if yyct2362 == codecSelferValueTypeMap1234 {
			yyl2362 := r.ReadMapStart()
			if yyl2362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2362, d)
			}
		} else if yyct2362 == codecSelferValueTypeArray1234 {
			yyl2362 := r.ReadArrayStart()
			if yyl2362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2363Slc
	var yyhl2363 bool = l >= 0
	for yyj2363 := 0; ; yyj2363++ {
		if yyhl2363 {
			if yyj2363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2363Slc = r.DecodeBytes(yys2363Slc, true, true)
		yys2363 := string(yys2363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2363 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2365 := &x.Selector
				yym2366 := z.DecBinary()
				_ = yym2366
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2365, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2363)
		} // end switch yys2363
	} // end for yyj2363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2368 int
	var yyb2368 bool
	var yyhl2368 bool = l >= 0
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2370 := &x.Selector
		yym2371 := z.DecBinary()
		_ = yym2371
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2370, false, d)
		}
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2368++
		if yyhl2368 {
			yyb2368 = yyj2368 > l
		} else {
			yyb2368 = r.CheckBreak()
		}
		if yyb2368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2373 := z.EncBinary()
		_ = yym2373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2374 := !z.EncBinary()
			yy2arr2374 := z.EncBasicHandle().StructToArray
			var yyq2374 [4]bool
			_, _, _ = yysep2374, yyq2374, yy2arr2374
			const yyr2374 bool = false
			yyq2374[1] = x.FullyLabeledReplicas != 0
			yyq2374[2] = x.ReadyReplicas != 0
			yyq2374[3] = x.ObservedGeneration != 0
			var yynn2374 int
			if yyr2374 || yy2arr2374 {
				r.EncodeArrayStart(4)
			} else {
				yynn2374 = 1
				for _, b := range yyq2374 {
					if b {
						yynn2374++
					}
				}
				r.EncodeMapStart(yynn2374)
				yynn2374 = 0
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2376 := z.EncBinary()
				_ = yym2376
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2377 := z.EncBinary()
				_ = yym2377
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[1] {
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2380 := z.EncBinary()
					_ = yym2380
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[2] {
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[3] {
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2374[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2387 := z.DecBinary()
	_ = yym2387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2388 := r.ContainerType()
		if yyct2388 == codecSelferValueTypeMap1234 {
			yyl2388 := r.ReadMapStart()
			if yyl2388 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2388, d)
			}
		} else if yyct2388 == codecSelferValueTypeArray1234 {
			yyl2388 := r.ReadArrayStart()
			if yyl2388 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2388, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2389Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2389Slc
	var yyhl2389 bool = l >= 0
	for yyj2389 := 0; ; yyj2389++ {
		if yyhl2389 {
			if yyj2389 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2389Slc = r.DecodeBytes(yys2389Slc, true, true)
		yys2389 := string(yys2389Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2389 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2389)
		} // end switch yys2389
	} // end for yyj2389
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2394 int
	var yyb2394 bool
	var yyhl2394 bool = l >= 0
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2394++
		if yyhl2394 {
			yyb2394 = yyj2394 > l
		} else {
			yyb2394 = r.CheckBreak()
		}
		if yyb2394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2399 := z.EncBinary()
		_ = yym2399
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2400 := !z.EncBinary()
			yy2arr2400 := z.EncBasicHandle().StructToArray
			var yyq2400 [5]bool
			_, _, _ = yysep2400, yyq2400, yy2arr2400
			const yyr2400 bool = false
			yyq2400[0] = x.Kind != ""
			yyq2400[1] = x.APIVersion != ""
			yyq2400[2] = true
			yyq2400[3] = true
			yyq2400[4] = true
			var yynn2400 int
			if yyr2400 || yy2arr2400 {
				r.EncodeArrayStart(5)
			} else {
				yynn2400 = 0
				for _, b := range yyq2400 {
					if b {
						yynn2400++
					}
				}
				r.EncodeMapStart(yynn2400)
				yynn2400 = 0
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2400[0] {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2400[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2400[1] {
					yym2405 := z.EncBinary()
					_ = yym2405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2400[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2400[2] {
					yy2408 := &x.ObjectMeta
					yy2408.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2400[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2409 := &x.ObjectMeta
					yy2409.CodecEncodeSelf(e)
				}
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2400[3] {
					yy2411 := &x.Spec
					yy2411.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2400[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2412 := &x.Spec
					yy2412.CodecEncodeSelf(e)
				}
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2400[4] {
					yy2414 := &x.Status
					yy2414.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2400[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2415 := &x.Status
					yy2415.CodecEncodeSelf(e)
				}
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2416 := z.DecBinary()
	_ = yym2416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2417 := r.ContainerType()
		if yyct2417 == codecSelferValueTypeMap1234 {
			yyl2417 := r.ReadMapStart()
			if yyl2417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2417, d)
			}
		} else if yyct2417 == codecSelferValueTypeArray1234 {
			yyl2417 := r.ReadArrayStart()
			if yyl2417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2418Slc
	var yyhl2418 bool = l >= 0
	for yyj2418 := 0; ; yyj2418++ {
		if yyhl2418 {
			if yyj2418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2418Slc = r.DecodeBytes(yys2418Slc, true, true)
		yys2418 := string(yys2418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2418 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2421 := &x.ObjectMeta
				yyv2421.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2422 := &x.Spec
				yyv2422.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2423 := &x.Status
				yyv2423.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2418)
		} // end switch yys2418
	} // end for yyj2418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2424 int
	var yyb2424 bool
	var yyhl2424 bool = l >= 0
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2427 := &x.ObjectMeta
		yyv2427.CodecDecodeSelf(d)
	}
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2428 := &x.Spec
		yyv2428.CodecDecodeSelf(d)
	}
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2429 := &x.Status
		yyv2429.CodecDecodeSelf(d)
	}
	for {
		yyj2424++
		if yyhl2424 {
			yyb2424 = yyj2424 > l
		} else {
			yyb2424 = r.CheckBreak()
		}
		if yyb2424 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2424-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2430 := z.EncBinary()
		_ = yym2430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2431 := !z.EncBinary()
			yy2arr2431 := z.EncBasicHandle().StructToArray
			var yyq2431 [4]bool
			_, _, _ = yysep2431, yyq2431, yy2arr2431
			const yyr2431 bool = false
			yyq2431[0] = x.Kind != ""
			yyq2431[1] = x.APIVersion != ""
			yyq2431[2] = true
			var yynn2431 int
			if yyr2431 || yy2arr2431 {
				r.EncodeArrayStart(4)
			} else {
				yynn2431 = 1
				for _, b := range yyq2431 {
					if b {
						yynn2431++
					}
				}
				r.EncodeMapStart(yynn2431)
				yynn2431 = 0
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[0] {
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2431[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[1] {
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2431[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[2] {
					yy2439 := &x.ListMeta
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2439) {
					} else {
						z.EncFallback(yy2439)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2431[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2441 := &x.ListMeta
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2441) {
					} else {
						z.EncFallback(yy2441)
					}
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2446 := z.DecBinary()
	_ = yym2446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2447 := r.ContainerType()
		if yyct2447 == codecSelferValueTypeMap1234 {
			yyl2447 := r.ReadMapStart()
			if yyl2447 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2447, d)
			}
		} else if yyct2447 == codecSelferValueTypeArray1234 {
			yyl2447 := r.ReadArrayStart()
			if yyl2447 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2447, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2448Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2448Slc
	var yyhl2448 bool = l >= 0
	for yyj2448 := 0; ; yyj2448++ {
		if yyhl2448 {
			if yyj2448 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2448Slc = r.DecodeBytes(yys2448Slc, true, true)
		yys2448 := string(yys2448Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2448 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2451 := &x.ListMeta
				yym2452 := z.DecBinary()
				_ = yym2452
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2451) {
				} else {
					z.DecFallback(yyv2451, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2453 := &x.Items
				yym2454 := z.DecBinary()
				_ = yym2454
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2453), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2448)
		} // end switch yys2448
	} // end for yyj2448
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2455 int
	var yyb2455 bool
	var yyhl2455 bool = l >= 0
	yyj2455++
	if yyhl2455 {
		yyb2455 = yyj2455 > l
	} else {
		yyb2455 = r.CheckBreak()
	}
	if yyb2455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2455++
	if yyhl2455 {
		yyb2455 = yyj2455 > l
	} else {
		yyb2455 = r.CheckBreak()
	}
	if yyb2455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2455++
	if yyhl2455 {
		yyb2455 = yyj2455 > l
	} else {
		yyb2455 = r.CheckBreak()
	}
	if yyb2455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2458 := &x.ListMeta
		yym2459 := z.DecBinary()
		_ = yym2459
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2458) {
		} else {
			z.DecFallback(yyv2458, false)
		}
	}
	yyj2455++
	if yyhl2455 {
		yyb2455 = yyj2455 > l
	} else {
		yyb2455 = r.CheckBreak()
	}
	if yyb2455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2460 := &x.Items
		yym2461 := z.DecBinary()
		_ = yym2461
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2460), d)
		}
	}
	for {
		yyj2455++
		if yyhl2455 {
			yyb2455 = yyj2455 > l
		} else {
			yyb2455 = r.CheckBreak()
		}
		if yyb2455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2462 := z.EncBinary()
		_ = yym2462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2463 := !z.EncBinary()
			yy2arr2463 := z.EncBasicHandle().StructToArray
			var yyq2463 [4]bool
			_, _, _ = yysep2463, yyq2463, yy2arr2463
			const yyr2463 bool = false
			yyq2463[0] = x.Kind != ""
			yyq2463[1] = x.APIVersion != ""
			yyq2463[2] = true
			var yynn2463 int
			if yyr2463 || yy2arr2463 {
				r.EncodeArrayStart(4)
			} else {
				yynn2463 = 1
				for _, b := range yyq2463 {
					if b {
						yynn2463++
					}
				}
				r.EncodeMapStart(yynn2463)
				yynn2463 = 0
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[0] {
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[1] {
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[2] {
					yy2471 := &x.ListMeta
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2471) {
					} else {
						z.EncFallback(yy2471)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2463[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2473 := &x.ListMeta
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2473) {
					} else {
						z.EncFallback(yy2473)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2479 := r.ContainerType()
		if yyct2479 == codecSelferValueTypeMap1234 {
			yyl2479 := r.ReadMapStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2479, d)
			}
		} else if yyct2479 == codecSelferValueTypeArray1234 {
			yyl2479 := r.ReadArrayStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2480Slc
	var yyhl2480 bool = l >= 0
	for yyj2480 := 0; ; yyj2480++ {
		if yyhl2480 {
			if yyj2480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2480Slc = r.DecodeBytes(yys2480Slc, true, true)
		yys2480 := string(yys2480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2483 := &x.ListMeta
				yym2484 := z.DecBinary()
				_ = yym2484
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2483) {
				} else {
					z.DecFallback(yyv2483, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2485 := &x.Items
				yym2486 := z.DecBinary()
				_ = yym2486
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2485), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2480)
		} // end switch yys2480
	} // end for yyj2480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2487 int
	var yyb2487 bool
	var yyhl2487 bool = l >= 0
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2490 := &x.ListMeta
		yym2491 := z.DecBinary()
		_ = yym2491
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2490) {
		} else {
			z.DecFallback(yyv2490, false)
		}
	}
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2492 := &x.Items
		yym2493 := z.DecBinary()
		_ = yym2493
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2492), d)
		}
	}
	for {
		yyj2487++
		if yyhl2487 {
			yyb2487 = yyj2487 > l
		} else {
			yyb2487 = r.CheckBreak()
		}
		if yyb2487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2494 := z.EncBinary()
	_ = yym2494
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2495 := z.DecBinary()
	_ = yym2495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2496 := z.EncBinary()
	_ = yym2496
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2497 := z.DecBinary()
	_ = yym2497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2498 := z.EncBinary()
		_ = yym2498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2499 := !z.EncBinary()
			yy2arr2499 := z.EncBasicHandle().StructToArray
			var yyq2499 [1]bool
			_, _, _ = yysep2499, yyq2499, yy2arr2499
			const yyr2499 bool = false
			yyq2499[0] = true
			var yynn2499 int
			if yyr2499 || yy2arr2499 {
				r.EncodeArrayStart(1)
			} else {
				yynn2499 = 0
				for _, b := range yyq2499 {
					if b {
						yynn2499++
					}
				}
				r.EncodeMapStart(yynn2499)
				yynn2499 = 0
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2499[0] {
					yy2501 := &x.LoadBalancer
					yy2501.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2499[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2502 := &x.LoadBalancer
					yy2502.CodecEncodeSelf(e)
				}
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2503 := z.DecBinary()
	_ = yym2503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2504 := r.ContainerType()
		if yyct2504 == codecSelferValueTypeMap1234 {
			yyl2504 := r.ReadMapStart()
			if yyl2504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2504, d)
			}
		} else if yyct2504 == codecSelferValueTypeArray1234 {
			yyl2504 := r.ReadArrayStart()
			if yyl2504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2505Slc
	var yyhl2505 bool = l >= 0
	for yyj2505 := 0; ; yyj2505++ {
		if yyhl2505 {
			if yyj2505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2505Slc = r.DecodeBytes(yys2505Slc, true, true)
		yys2505 := string(yys2505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2505 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2506 := &x.LoadBalancer
				yyv2506.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2505)
		} // end switch yys2505
	} // end for yyj2505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2507 int
	var yyb2507 bool
	var yyhl2507 bool = l >= 0
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2508 := &x.LoadBalancer
		yyv2508.CodecDecodeSelf(d)
	}
	for {
		yyj2507++
		if yyhl2507 {
			yyb2507 = yyj2507 > l
		} else {
			yyb2507 = r.CheckBreak()
		}
		if yyb2507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2509 := z.EncBinary()
		_ = yym2509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2510 := !z.EncBinary()
			yy2arr2510 := z.EncBasicHandle().StructToArray
			var yyq2510 [1]bool
			_, _, _ = yysep2510, yyq2510, yy2arr2510
			const yyr2510 bool = false
			yyq2510[0] = len(x.Ingress) != 0
			var yynn2510 int
			if yyr2510 || yy2arr2510 {
				r.EncodeArrayStart(1)
			} else {
				yynn2510 = 0
				for _, b := range yyq2510 {
					if b {
						yynn2510++
					}
				}
				r.EncodeMapStart(yynn2510)
				yynn2510 = 0
			}
			if yyr2510 || yy2arr2510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2510[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2512 := z.EncBinary()
						_ = yym2512
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2510[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2513 := z.EncBinary()
						_ = yym2513
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2510 || yy2arr2510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2514 := z.DecBinary()
	_ = yym2514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2515 := r.ContainerType()
		if yyct2515 == codecSelferValueTypeMap1234 {
			yyl2515 := r.ReadMapStart()
			if yyl2515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2515, d)
			}
		} else if yyct2515 == codecSelferValueTypeArray1234 {
			yyl2515 := r.ReadArrayStart()
			if yyl2515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2516Slc
	var yyhl2516 bool = l >= 0
	for yyj2516 := 0; ; yyj2516++ {
		if yyhl2516 {
			if yyj2516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2516Slc = r.DecodeBytes(yys2516Slc, true, true)
		yys2516 := string(yys2516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2516 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2517 := &x.Ingress
				yym2518 := z.DecBinary()
				_ = yym2518
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2517), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2516)
		} // end switch yys2516
	} // end for yyj2516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2519 int
	var yyb2519 bool
	var yyhl2519 bool = l >= 0
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2520 := &x.Ingress
		yym2521 := z.DecBinary()
		_ = yym2521
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2520), d)
		}
	}
	for {
		yyj2519++
		if yyhl2519 {
			yyb2519 = yyj2519 > l
		} else {
			yyb2519 = r.CheckBreak()
		}
		if yyb2519 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2519-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2522 := z.EncBinary()
		_ = yym2522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2523 := !z.EncBinary()
			yy2arr2523 := z.EncBasicHandle().StructToArray
			var yyq2523 [2]bool
			_, _, _ = yysep2523, yyq2523, yy2arr2523
			const yyr2523 bool = false
			yyq2523[0] = x.IP != ""
			yyq2523[1] = x.Hostname != ""
			var yynn2523 int
			if yyr2523 || yy2arr2523 {
				r.EncodeArrayStart(2)
			} else {
				yynn2523 = 0
				for _, b := range yyq2523 {
					if b {
						yynn2523++
					}
				}
				r.EncodeMapStart(yynn2523)
				yynn2523 = 0
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[0] {
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2523[1] {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2523[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2530 := z.DecBinary()
	_ = yym2530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2531 := r.ContainerType()
		if yyct2531 == codecSelferValueTypeMap1234 {
			yyl2531 := r.ReadMapStart()
			if yyl2531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2531, d)
			}
		} else if yyct2531 == codecSelferValueTypeArray1234 {
			yyl2531 := r.ReadArrayStart()
			if yyl2531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2532Slc
	var yyhl2532 bool = l >= 0
	for yyj2532 := 0; ; yyj2532++ {
		if yyhl2532 {
			if yyj2532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2532Slc = r.DecodeBytes(yys2532Slc, true, true)
		yys2532 := string(yys2532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2532 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2532)
		} // end switch yys2532
	} // end for yyj2532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2535 int
	var yyb2535 bool
	var yyhl2535 bool = l >= 0
	yyj2535++
	if yyhl2535 {
		yyb2535 = yyj2535 > l
	} else {
		yyb2535 = r.CheckBreak()
	}
	if yyb2535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2535++
	if yyhl2535 {
		yyb2535 = yyj2535 > l
	} else {
		yyb2535 = r.CheckBreak()
	}
	if yyb2535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2535++
		if yyhl2535 {
			yyb2535 = yyj2535 > l
		} else {
			yyb2535 = r.CheckBreak()
		}
		if yyb2535 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2535-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2538 := z.EncBinary()
		_ = yym2538
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2539 := !z.EncBinary()
			yy2arr2539 := z.EncBasicHandle().StructToArray
			var yyq2539 [9]bool
			_, _, _ = yysep2539, yyq2539, yy2arr2539
			const yyr2539 bool = false
			yyq2539[0] = x.Type != ""
			yyq2539[3] = x.ClusterIP != ""
			yyq2539[5] = len(x.ExternalIPs) != 0
			yyq2539[6] = x.LoadBalancerIP != ""
			yyq2539[7] = x.SessionAffinity != ""
			yyq2539[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2539 int
			if yyr2539 || yy2arr2539 {
				r.EncodeArrayStart(9)
			} else {
				yynn2539 = 3
				for _, b := range yyq2539 {
					if b {
						yynn2539++
					}
				}
				r.EncodeMapStart(yynn2539)
				yynn2539 = 0
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[3] {
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2551 := z.EncBinary()
				_ = yym2551
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2552 := z.EncBinary()
				_ = yym2552
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2554 := z.EncBinary()
						_ = yym2554
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2555 := z.EncBinary()
						_ = yym2555
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[6] {
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2539[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2539[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2561 := z.EncBinary()
						_ = yym2561
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2539[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2562 := z.EncBinary()
						_ = yym2562
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2539 || yy2arr2539 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2563 := z.DecBinary()
	_ = yym2563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2564 := r.ContainerType()
		if yyct2564 == codecSelferValueTypeMap1234 {
			yyl2564 := r.ReadMapStart()
			if yyl2564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2564, d)
			}
		} else if yyct2564 == codecSelferValueTypeArray1234 {
			yyl2564 := r.ReadArrayStart()
			if yyl2564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2565Slc
	var yyhl2565 bool = l >= 0
	for yyj2565 := 0; ; yyj2565++ {
		if yyhl2565 {
			if yyj2565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2565Slc = r.DecodeBytes(yys2565Slc, true, true)
		yys2565 := string(yys2565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2565 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2567 := &x.Ports
				yym2568 := z.DecBinary()
				_ = yym2568
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2567), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2569 := &x.Selector
				yym2570 := z.DecBinary()
				_ = yym2570
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2569, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2573 := &x.ExternalIPs
				yym2574 := z.DecBinary()
				_ = yym2574
				if false {
				} else {
					z.F.DecSliceStringX(yyv2573, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2577 := &x.LoadBalancerSourceRanges
				yym2578 := z.DecBinary()
				_ = yym2578
				if false {
				} else {
					z.F.DecSliceStringX(yyv2577, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2565)
		} // end switch yys2565
	} // end for yyj2565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2579 int
	var yyb2579 bool
	var yyhl2579 bool = l >= 0
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2581 := &x.Ports
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2581), d)
		}
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2583 := &x.Selector
		yym2584 := z.DecBinary()
		_ = yym2584
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2583, false, d)
		}
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2587 := &x.ExternalIPs
		yym2588 := z.DecBinary()
		_ = yym2588
		if false {
		} else {
			z.F.DecSliceStringX(yyv2587, false, d)
		}
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2591 := &x.LoadBalancerSourceRanges
		yym2592 := z.DecBinary()
		_ = yym2592
		if false {
		} else {
			z.F.DecSliceStringX(yyv2591, false, d)
		}
	}
	for {
		yyj2579++
		if yyhl2579 {
			yyb2579 = yyj2579 > l
		} else {
			yyb2579 = r.CheckBreak()
		}
		if yyb2579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2593 := z.EncBinary()
		_ = yym2593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2594 := !z.EncBinary()
			yy2arr2594 := z.EncBasicHandle().StructToArray
			var yyq2594 [5]bool
			_, _, _ = yysep2594, yyq2594, yy2arr2594
			const yyr2594 bool = false
			var yynn2594 int
			if yyr2594 || yy2arr2594 {
				r.EncodeArrayStart(5)
			} else {
				yynn2594 = 5
				for _, b := range yyq2594 {
					if b {
						yynn2594++
					}
				}
				r.EncodeMapStart(yynn2594)
				yynn2594 = 0
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2596 := z.EncBinary()
				_ = yym2596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2597 := z.EncBinary()
				_ = yym2597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2600 := z.EncBinary()
				_ = yym2600
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2601 := z.EncBinary()
				_ = yym2601
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2603 := &x.TargetPort
				yym2604 := z.EncBinary()
				_ = yym2604
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2603) {
				} else if !yym2604 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2603)
				} else {
					z.EncFallback(yy2603)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2605 := &x.TargetPort
				yym2606 := z.EncBinary()
				_ = yym2606
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2605) {
				} else if !yym2606 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2605)
				} else {
					z.EncFallback(yy2605)
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2608 := z.EncBinary()
				_ = yym2608
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2609 := z.EncBinary()
				_ = yym2609
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2594 || yy2arr2594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2610 := z.DecBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2611 := r.ContainerType()
		if yyct2611 == codecSelferValueTypeMap1234 {
			yyl2611 := r.ReadMapStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2611, d)
			}
		} else if yyct2611 == codecSelferValueTypeArray1234 {
			yyl2611 := r.ReadArrayStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2612Slc
	var yyhl2612 bool = l >= 0
	for yyj2612 := 0; ; yyj2612++ {
		if yyhl2612 {
			if yyj2612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2612Slc = r.DecodeBytes(yys2612Slc, true, true)
		yys2612 := string(yys2612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2612 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2616 := &x.TargetPort
				yym2617 := z.DecBinary()
				_ = yym2617
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2616) {
				} else if !yym2617 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2616)
				} else {
					z.DecFallback(yyv2616, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2612)
		} // end switch yys2612
	} // end for yyj2612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2619 int
	var yyb2619 bool
	var yyhl2619 bool = l >= 0
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2623 := &x.TargetPort
		yym2624 := z.DecBinary()
		_ = yym2624
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2623) {
		} else if !yym2624 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2623)
		} else {
			z.DecFallback(yyv2623, false)
		}
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2619++
		if yyhl2619 {
			yyb2619 = yyj2619 > l
		} else {
			yyb2619 = r.CheckBreak()
		}
		if yyb2619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2626 := z.EncBinary()
		_ = yym2626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2627 := !z.EncBinary()
			yy2arr2627 := z.EncBasicHandle().StructToArray
			var yyq2627 [5]bool
			_, _, _ = yysep2627, yyq2627, yy2arr2627
			const yyr2627 bool = false
			yyq2627[0] = x.Kind != ""
			yyq2627[1] = x.APIVersion != ""
			yyq2627[2] = true
			yyq2627[3] = true
			yyq2627[4] = true
			var yynn2627 int
			if yyr2627 || yy2arr2627 {
				r.EncodeArrayStart(5)
			} else {
				yynn2627 = 0
				for _, b := range yyq2627 {
					if b {
						yynn2627++
					}
				}
				r.EncodeMapStart(yynn2627)
				yynn2627 = 0
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[0] {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[1] {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[2] {
					yy2635 := &x.ObjectMeta
					yy2635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2636 := &x.ObjectMeta
					yy2636.CodecEncodeSelf(e)
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[3] {
					yy2638 := &x.Spec
					yy2638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2627[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2639 := &x.Spec
					yy2639.CodecEncodeSelf(e)
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[4] {
					yy2641 := &x.Status
					yy2641.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2627[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2642 := &x.Status
					yy2642.CodecEncodeSelf(e)
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2643 := z.DecBinary()
	_ = yym2643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2644 := r.ContainerType()
		if yyct2644 == codecSelferValueTypeMap1234 {
			yyl2644 := r.ReadMapStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2644, d)
			}
		} else if yyct2644 == codecSelferValueTypeArray1234 {
			yyl2644 := r.ReadArrayStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2645Slc
	var yyhl2645 bool = l >= 0
	for yyj2645 := 0; ; yyj2645++ {
		if yyhl2645 {
			if yyj2645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2645Slc = r.DecodeBytes(yys2645Slc, true, true)
		yys2645 := string(yys2645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2645 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2648 := &x.ObjectMeta
				yyv2648.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2649 := &x.Spec
				yyv2649.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2650 := &x.Status
				yyv2650.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2645)
		} // end switch yys2645
	} // end for yyj2645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2651 int
	var yyb2651 bool
	var yyhl2651 bool = l >= 0
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2654 := &x.ObjectMeta
		yyv2654.CodecDecodeSelf(d)
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2655 := &x.Spec
		yyv2655.CodecDecodeSelf(d)
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2656 := &x.Status
		yyv2656.CodecDecodeSelf(d)
	}
	for {
		yyj2651++
		if yyhl2651 {
			yyb2651 = yyj2651 > l
		} else {
			yyb2651 = r.CheckBreak()
		}
		if yyb2651 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2651-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2657 := z.EncBinary()
		_ = yym2657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2658 := !z.EncBinary()
			yy2arr2658 := z.EncBasicHandle().StructToArray
			var yyq2658 [5]bool
			_, _, _ = yysep2658, yyq2658, yy2arr2658
			const yyr2658 bool = false
			yyq2658[0] = x.Kind != ""
			yyq2658[1] = x.APIVersion != ""
			yyq2658[2] = true
			yyq2658[4] = len(x.ImagePullSecrets) != 0
			var yynn2658 int
			if yyr2658 || yy2arr2658 {
				r.EncodeArrayStart(5)
			} else {
				yynn2658 = 1
				for _, b := range yyq2658 {
					if b {
						yynn2658++
					}
				}
				r.EncodeMapStart(yynn2658)
				yynn2658 = 0
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[0] {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[1] {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2658[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[2] {
					yy2666 := &x.ObjectMeta
					yy2666.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2658[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2667 := &x.ObjectMeta
					yy2667.CodecEncodeSelf(e)
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2669 := z.EncBinary()
					_ = yym2669
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2670 := z.EncBinary()
					_ = yym2670
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2672 := z.EncBinary()
						_ = yym2672
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2658[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2673 := z.EncBinary()
						_ = yym2673
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2674 := z.DecBinary()
	_ = yym2674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2675 := r.ContainerType()
		if yyct2675 == codecSelferValueTypeMap1234 {
			yyl2675 := r.ReadMapStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2675, d)
			}
		} else if yyct2675 == codecSelferValueTypeArray1234 {
			yyl2675 := r.ReadArrayStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2676Slc
	var yyhl2676 bool = l >= 0
	for yyj2676 := 0; ; yyj2676++ {
		if yyhl2676 {
			if yyj2676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2676Slc = r.DecodeBytes(yys2676Slc, true, true)
		yys2676 := string(yys2676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2676 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2679 := &x.ObjectMeta
				yyv2679.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2680 := &x.Secrets
				yym2681 := z.DecBinary()
				_ = yym2681
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2680), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2682 := &x.ImagePullSecrets
				yym2683 := z.DecBinary()
				_ = yym2683
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2682), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2676)
		} // end switch yys2676
	} // end for yyj2676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2684 int
	var yyb2684 bool
	var yyhl2684 bool = l >= 0
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2687 := &x.ObjectMeta
		yyv2687.CodecDecodeSelf(d)
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2688 := &x.Secrets
		yym2689 := z.DecBinary()
		_ = yym2689
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2688), d)
		}
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2690 := &x.ImagePullSecrets
		yym2691 := z.DecBinary()
		_ = yym2691
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2690), d)
		}
	}
	for {
		yyj2684++
		if yyhl2684 {
			yyb2684 = yyj2684 > l
		} else {
			yyb2684 = r.CheckBreak()
		}
		if yyb2684 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2684-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2692 := z.EncBinary()
		_ = yym2692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2693 := !z.EncBinary()
			yy2arr2693 := z.EncBasicHandle().StructToArray
			var yyq2693 [4]bool
			_, _, _ = yysep2693, yyq2693, yy2arr2693
			const yyr2693 bool = false
			yyq2693[0] = x.Kind != ""
			yyq2693[1] = x.APIVersion != ""
			yyq2693[2] = true
			var yynn2693 int
			if yyr2693 || yy2arr2693 {
				r.EncodeArrayStart(4)
			} else {
				yynn2693 = 1
				for _, b := range yyq2693 {
					if b {
						yynn2693++
					}
				}
				r.EncodeMapStart(yynn2693)
				yynn2693 = 0
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[0] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2693[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[1] {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2693[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[2] {
					yy2701 := &x.ListMeta
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2701) {
					} else {
						z.EncFallback(yy2701)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2693[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2703 := &x.ListMeta
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2703) {
					} else {
						z.EncFallback(yy2703)
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2708 := z.DecBinary()
	_ = yym2708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2709 := r.ContainerType()
		if yyct2709 == codecSelferValueTypeMap1234 {
			yyl2709 := r.ReadMapStart()
			if yyl2709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2709, d)
			}
		} else if yyct2709 == codecSelferValueTypeArray1234 {
			yyl2709 := r.ReadArrayStart()
			if yyl2709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2710Slc
	var yyhl2710 bool = l >= 0
	for yyj2710 := 0; ; yyj2710++ {
		if yyhl2710 {
			if yyj2710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2710Slc = r.DecodeBytes(yys2710Slc, true, true)
		yys2710 := string(yys2710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2710 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2713 := &x.ListMeta
				yym2714 := z.DecBinary()
				_ = yym2714
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2713) {
				} else {
					z.DecFallback(yyv2713, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2715 := &x.Items
				yym2716 := z.DecBinary()
				_ = yym2716
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2715), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2710)
		} // end switch yys2710
	} // end for yyj2710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2717 int
	var yyb2717 bool
	var yyhl2717 bool = l >= 0
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2720 := &x.ListMeta
		yym2721 := z.DecBinary()
		_ = yym2721
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2720) {
		} else {
			z.DecFallback(yyv2720, false)
		}
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2722 := &x.Items
		yym2723 := z.DecBinary()
		_ = yym2723
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2722), d)
		}
	}
	for {
		yyj2717++
		if yyhl2717 {
			yyb2717 = yyj2717 > l
		} else {
			yyb2717 = r.CheckBreak()
		}
		if yyb2717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2724 := z.EncBinary()
		_ = yym2724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2725 := !z.EncBinary()
			yy2arr2725 := z.EncBasicHandle().StructToArray
			var yyq2725 [4]bool
			_, _, _ = yysep2725, yyq2725, yy2arr2725
			const yyr2725 bool = false
			yyq2725[0] = x.Kind != ""
			yyq2725[1] = x.APIVersion != ""
			yyq2725[2] = true
			var yynn2725 int
			if yyr2725 || yy2arr2725 {
				r.EncodeArrayStart(4)
			} else {
				yynn2725 = 1
				for _, b := range yyq2725 {
					if b {
						yynn2725++
					}
				}
				r.EncodeMapStart(yynn2725)
				yynn2725 = 0
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[0] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[1] {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[2] {
					yy2733 := &x.ObjectMeta
					yy2733.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2734 := &x.ObjectMeta
					yy2734.CodecEncodeSelf(e)
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2738 := z.DecBinary()
	_ = yym2738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2739 := r.ContainerType()
		if yyct2739 == codecSelferValueTypeMap1234 {
			yyl2739 := r.ReadMapStart()
			if yyl2739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2739, d)
			}
		} else if yyct2739 == codecSelferValueTypeArray1234 {
			yyl2739 := r.ReadArrayStart()
			if yyl2739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2740Slc
	var yyhl2740 bool = l >= 0
	for yyj2740 := 0; ; yyj2740++ {
		if yyhl2740 {
			if yyj2740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2740Slc = r.DecodeBytes(yys2740Slc, true, true)
		yys2740 := string(yys2740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2740 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2743 := &x.ObjectMeta
				yyv2743.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2744 := &x.Subsets
				yym2745 := z.DecBinary()
				_ = yym2745
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2744), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2740)
		} // end switch yys2740
	} // end for yyj2740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2746 int
	var yyb2746 bool
	var yyhl2746 bool = l >= 0
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2749 := &x.ObjectMeta
		yyv2749.CodecDecodeSelf(d)
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2750 := &x.Subsets
		yym2751 := z.DecBinary()
		_ = yym2751
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2750), d)
		}
	}
	for {
		yyj2746++
		if yyhl2746 {
			yyb2746 = yyj2746 > l
		} else {
			yyb2746 = r.CheckBreak()
		}
		if yyb2746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2752 := z.EncBinary()
		_ = yym2752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2753 := !z.EncBinary()
			yy2arr2753 := z.EncBasicHandle().StructToArray
			var yyq2753 [3]bool
			_, _, _ = yysep2753, yyq2753, yy2arr2753
			const yyr2753 bool = false
			var yynn2753 int
			if yyr2753 || yy2arr2753 {
				r.EncodeArrayStart(3)
			} else {
				yynn2753 = 3
				for _, b := range yyq2753 {
					if b {
						yynn2753++
					}
				}
				r.EncodeMapStart(yynn2753)
				yynn2753 = 0
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2763 := z.DecBinary()
	_ = yym2763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2764 := r.ContainerType()
		if yyct2764 == codecSelferValueTypeMap1234 {
			yyl2764 := r.ReadMapStart()
			if yyl2764 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2764, d)
			}
		} else if yyct2764 == codecSelferValueTypeArray1234 {
			yyl2764 := r.ReadArrayStart()
			if yyl2764 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2764, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2765Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2765Slc
	var yyhl2765 bool = l >= 0
	for yyj2765 := 0; ; yyj2765++ {
		if yyhl2765 {
			if yyj2765 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2765Slc = r.DecodeBytes(yys2765Slc, true, true)
		yys2765 := string(yys2765Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2765 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2766 := &x.Addresses
				yym2767 := z.DecBinary()
				_ = yym2767
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2766), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2768 := &x.NotReadyAddresses
				yym2769 := z.DecBinary()
				_ = yym2769
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2768), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2770 := &x.Ports
				yym2771 := z.DecBinary()
				_ = yym2771
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2770), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2765)
		} // end switch yys2765
	} // end for yyj2765
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2772 int
	var yyb2772 bool
	var yyhl2772 bool = l >= 0
	yyj2772++
	if yyhl2772 {
		yyb2772 = yyj2772 > l
	} else {
		yyb2772 = r.CheckBreak()
	}
	if yyb2772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2773 := &x.Addresses
		yym2774 := z.DecBinary()
		_ = yym2774
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2773), d)
		}
	}
	yyj2772++
	if yyhl2772 {
		yyb2772 = yyj2772 > l
	} else {
		yyb2772 = r.CheckBreak()
	}
	if yyb2772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2775 := &x.NotReadyAddresses
		yym2776 := z.DecBinary()
		_ = yym2776
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2775), d)
		}
	}
	yyj2772++
	if yyhl2772 {
		yyb2772 = yyj2772 > l
	} else {
		yyb2772 = r.CheckBreak()
	}
	if yyb2772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2777 := &x.Ports
		yym2778 := z.DecBinary()
		_ = yym2778
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2777), d)
		}
	}
	for {
		yyj2772++
		if yyhl2772 {
			yyb2772 = yyj2772 > l
		} else {
			yyb2772 = r.CheckBreak()
		}
		if yyb2772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2779 := z.EncBinary()
		_ = yym2779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2780 := !z.EncBinary()
			yy2arr2780 := z.EncBasicHandle().StructToArray
			var yyq2780 [4]bool
			_, _, _ = yysep2780, yyq2780, yy2arr2780
			const yyr2780 bool = false
			yyq2780[1] = x.Hostname != ""
			yyq2780[2] = x.NodeName != nil
			var yynn2780 int
			if yyr2780 || yy2arr2780 {
				r.EncodeArrayStart(4)
			} else {
				yynn2780 = 2
				for _, b := range yyq2780 {
					if b {
						yynn2780++
					}
				}
				r.EncodeMapStart(yynn2780)
				yynn2780 = 0
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[1] {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2788 := *x.NodeName
						yym2789 := z.EncBinary()
						_ = yym2789
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2788))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2790 := *x.NodeName
						yym2791 := z.EncBinary()
						_ = yym2791
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2790))
						}
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2793 := z.DecBinary()
	_ = yym2793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2794 := r.ContainerType()
		if yyct2794 == codecSelferValueTypeMap1234 {
			yyl2794 := r.ReadMapStart()
			if yyl2794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2794, d)
			}
		} else if yyct2794 == codecSelferValueTypeArray1234 {
			yyl2794 := r.ReadArrayStart()
			if yyl2794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2795Slc
	var yyhl2795 bool = l >= 0
	for yyj2795 := 0; ; yyj2795++ {
		if yyhl2795 {
			if yyj2795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2795Slc = r.DecodeBytes(yys2795Slc, true, true)
		yys2795 := string(yys2795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2795 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2799 := z.DecBinary()
				_ = yym2799
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2795)
		} // end switch yys2795
	} // end for yyj2795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2801 int
	var yyb2801 bool
	var yyhl2801 bool = l >= 0
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2805 := z.DecBinary()
		_ = yym2805
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2801++
		if yyhl2801 {
			yyb2801 = yyj2801 > l
		} else {
			yyb2801 = r.CheckBreak()
		}
		if yyb2801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2807 := z.EncBinary()
		_ = yym2807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2808 := !z.EncBinary()
			yy2arr2808 := z.EncBasicHandle().StructToArray
			var yyq2808 [3]bool
			_, _, _ = yysep2808, yyq2808, yy2arr2808
			const yyr2808 bool = false
			var yynn2808 int
			if yyr2808 || yy2arr2808 {
				r.EncodeArrayStart(3)
			} else {
				yynn2808 = 3
				for _, b := range yyq2808 {
					if b {
						yynn2808++
					}
				}
				r.EncodeMapStart(yynn2808)
				yynn2808 = 0
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2810 := z.EncBinary()
				_ = yym2810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2811 := z.EncBinary()
				_ = yym2811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2813 := z.EncBinary()
				_ = yym2813
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2816 := z.DecBinary()
	_ = yym2816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2817 := r.ContainerType()
		if yyct2817 == codecSelferValueTypeMap1234 {
			yyl2817 := r.ReadMapStart()
			if yyl2817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2817, d)
			}
		} else if yyct2817 == codecSelferValueTypeArray1234 {
			yyl2817 := r.ReadArrayStart()
			if yyl2817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2818Slc
	var yyhl2818 bool = l >= 0
	for yyj2818 := 0; ; yyj2818++ {
		if yyhl2818 {
			if yyj2818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2818Slc = r.DecodeBytes(yys2818Slc, true, true)
		yys2818 := string(yys2818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2818 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2818)
		} // end switch yys2818
	} // end for yyj2818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2822 int
	var yyb2822 bool
	var yyhl2822 bool = l >= 0
	yyj2822++
	if yyhl2822 {
		yyb2822 = yyj2822 > l
	} else {
		yyb2822 = r.CheckBreak()
	}
	if yyb2822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2822++
	if yyhl2822 {
		yyb2822 = yyj2822 > l
	} else {
		yyb2822 = r.CheckBreak()
	}
	if yyb2822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2822++
	if yyhl2822 {
		yyb2822 = yyj2822 > l
	} else {
		yyb2822 = r.CheckBreak()
	}
	if yyb2822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2822++
		if yyhl2822 {
			yyb2822 = yyj2822 > l
		} else {
			yyb2822 = r.CheckBreak()
		}
		if yyb2822 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2822-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2826 := z.EncBinary()
		_ = yym2826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2827 := !z.EncBinary()
			yy2arr2827 := z.EncBasicHandle().StructToArray
			var yyq2827 [4]bool
			_, _, _ = yysep2827, yyq2827, yy2arr2827
			const yyr2827 bool = false
			yyq2827[0] = x.Kind != ""
			yyq2827[1] = x.APIVersion != ""
			yyq2827[2] = true
			var yynn2827 int
			if yyr2827 || yy2arr2827 {
				r.EncodeArrayStart(4)
			} else {
				yynn2827 = 1
				for _, b := range yyq2827 {
					if b {
						yynn2827++
					}
				}
				r.EncodeMapStart(yynn2827)
				yynn2827 = 0
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[0] {
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[1] {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[2] {
					yy2835 := &x.ListMeta
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2835) {
					} else {
						z.EncFallback(yy2835)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2837 := &x.ListMeta
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2837) {
					} else {
						z.EncFallback(yy2837)
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2842 := z.DecBinary()
	_ = yym2842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2843 := r.ContainerType()
		if yyct2843 == codecSelferValueTypeMap1234 {
			yyl2843 := r.ReadMapStart()
			if yyl2843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2843, d)
			}
		} else if yyct2843 == codecSelferValueTypeArray1234 {
			yyl2843 := r.ReadArrayStart()
			if yyl2843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2844Slc
	var yyhl2844 bool = l >= 0
	for yyj2844 := 0; ; yyj2844++ {
		if yyhl2844 {
			if yyj2844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2844Slc = r.DecodeBytes(yys2844Slc, true, true)
		yys2844 := string(yys2844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2844 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2847 := &x.ListMeta
				yym2848 := z.DecBinary()
				_ = yym2848
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2847) {
				} else {
					z.DecFallback(yyv2847, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2849 := &x.Items
				yym2850 := z.DecBinary()
				_ = yym2850
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2849), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2844)
		} // end switch yys2844
	} // end for yyj2844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2851 int
	var yyb2851 bool
	var yyhl2851 bool = l >= 0
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2854 := &x.ListMeta
		yym2855 := z.DecBinary()
		_ = yym2855
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2854) {
		} else {
			z.DecFallback(yyv2854, false)
		}
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2856 := &x.Items
		yym2857 := z.DecBinary()
		_ = yym2857
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2856), d)
		}
	}
	for {
		yyj2851++
		if yyhl2851 {
			yyb2851 = yyj2851 > l
		} else {
			yyb2851 = r.CheckBreak()
		}
		if yyb2851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2858 := z.EncBinary()
		_ = yym2858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2859 := !z.EncBinary()
			yy2arr2859 := z.EncBasicHandle().StructToArray
			var yyq2859 [4]bool
			_, _, _ = yysep2859, yyq2859, yy2arr2859
			const yyr2859 bool = false
			yyq2859[0] = x.PodCIDR != ""
			yyq2859[1] = x.ExternalID != ""
			yyq2859[2] = x.ProviderID != ""
			yyq2859[3] = x.Unschedulable != false
			var yynn2859 int
			if yyr2859 || yy2arr2859 {
				r.EncodeArrayStart(4)
			} else {
				yynn2859 = 0
				for _, b := range yyq2859 {
					if b {
						yynn2859++
					}
				}
				r.EncodeMapStart(yynn2859)
				yynn2859 = 0
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[0] {
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[1] {
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[2] {
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[3] {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2859[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2872 := z.DecBinary()
	_ = yym2872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2873 := r.ContainerType()
		if yyct2873 == codecSelferValueTypeMap1234 {
			yyl2873 := r.ReadMapStart()
			if yyl2873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2873, d)
			}
		} else if yyct2873 == codecSelferValueTypeArray1234 {
			yyl2873 := r.ReadArrayStart()
			if yyl2873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2874Slc
	var yyhl2874 bool = l >= 0
	for yyj2874 := 0; ; yyj2874++ {
		if yyhl2874 {
			if yyj2874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2874Slc = r.DecodeBytes(yys2874Slc, true, true)
		yys2874 := string(yys2874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2874 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2874)
		} // end switch yys2874
	} // end for yyj2874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2879 int
	var yyb2879 bool
	var yyhl2879 bool = l >= 0
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2879++
		if yyhl2879 {
			yyb2879 = yyj2879 > l
		} else {
			yyb2879 = r.CheckBreak()
		}
		if yyb2879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2884 := z.EncBinary()
		_ = yym2884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2885 := !z.EncBinary()
			yy2arr2885 := z.EncBasicHandle().StructToArray
			var yyq2885 [1]bool
			_, _, _ = yysep2885, yyq2885, yy2arr2885
			const yyr2885 bool = false
			var yynn2885 int
			if yyr2885 || yy2arr2885 {
				r.EncodeArrayStart(1)
			} else {
				yynn2885 = 1
				for _, b := range yyq2885 {
					if b {
						yynn2885++
					}
				}
				r.EncodeMapStart(yynn2885)
				yynn2885 = 0
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2887 := z.EncBinary()
				_ = yym2887
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2888 := z.EncBinary()
				_ = yym2888
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2889 := z.DecBinary()
	_ = yym2889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2890 := r.ContainerType()
		if yyct2890 == codecSelferValueTypeMap1234 {
			yyl2890 := r.ReadMapStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2890, d)
			}
		} else if yyct2890 == codecSelferValueTypeArray1234 {
			yyl2890 := r.ReadArrayStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2891Slc
	var yyhl2891 bool = l >= 0
	for yyj2891 := 0; ; yyj2891++ {
		if yyhl2891 {
			if yyj2891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2891Slc = r.DecodeBytes(yys2891Slc, true, true)
		yys2891 := string(yys2891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2891 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2891)
		} // end switch yys2891
	} // end for yyj2891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2893 int
	var yyb2893 bool
	var yyhl2893 bool = l >= 0
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2893++
		if yyhl2893 {
			yyb2893 = yyj2893 > l
		} else {
			yyb2893 = r.CheckBreak()
		}
		if yyb2893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2895 := z.EncBinary()
		_ = yym2895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2896 := !z.EncBinary()
			yy2arr2896 := z.EncBasicHandle().StructToArray
			var yyq2896 [1]bool
			_, _, _ = yysep2896, yyq2896, yy2arr2896
			const yyr2896 bool = false
			yyq2896[0] = true
			var yynn2896 int
			if yyr2896 || yy2arr2896 {
				r.EncodeArrayStart(1)
			} else {
				yynn2896 = 0
				for _, b := range yyq2896 {
					if b {
						yynn2896++
					}
				}
				r.EncodeMapStart(yynn2896)
				yynn2896 = 0
			}
			if yyr2896 || yy2arr2896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2896[0] {
					yy2898 := &x.KubeletEndpoint
					yy2898.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2896[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2899 := &x.KubeletEndpoint
					yy2899.CodecEncodeSelf(e)
				}
			}
			if yyr2896 || yy2arr2896 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2900 := z.DecBinary()
	_ = yym2900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2901 := r.ContainerType()
		if yyct2901 == codecSelferValueTypeMap1234 {
			yyl2901 := r.ReadMapStart()
			if yyl2901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2901, d)
			}
		} else if yyct2901 == codecSelferValueTypeArray1234 {
			yyl2901 := r.ReadArrayStart()
			if yyl2901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2902Slc
	var yyhl2902 bool = l >= 0
	for yyj2902 := 0; ; yyj2902++ {
		if yyhl2902 {
			if yyj2902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2902Slc = r.DecodeBytes(yys2902Slc, true, true)
		yys2902 := string(yys2902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2902 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2903 := &x.KubeletEndpoint
				yyv2903.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2902)
		} // end switch yys2902
	} // end for yyj2902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2904 int
	var yyb2904 bool
	var yyhl2904 bool = l >= 0
	yyj2904++
	if yyhl2904 {
		yyb2904 = yyj2904 > l
	} else {
		yyb2904 = r.CheckBreak()
	}
	if yyb2904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2905 := &x.KubeletEndpoint
		yyv2905.CodecDecodeSelf(d)
	}
	for {
		yyj2904++
		if yyhl2904 {
			yyb2904 = yyj2904 > l
		} else {
			yyb2904 = r.CheckBreak()
		}
		if yyb2904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2906 := z.EncBinary()
		_ = yym2906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2907 := !z.EncBinary()
			yy2arr2907 := z.EncBasicHandle().StructToArray
			var yyq2907 [10]bool
			_, _, _ = yysep2907, yyq2907, yy2arr2907
			const yyr2907 bool = false
			var yynn2907 int
			if yyr2907 || yy2arr2907 {
				r.EncodeArrayStart(10)
			} else {
				yynn2907 = 10
				for _, b := range yyq2907 {
					if b {
						yynn2907++
					}
				}
				r.EncodeMapStart(yynn2907)
				yynn2907 = 0
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2910 := z.EncBinary()
				_ = yym2910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2912 := z.EncBinary()
				_ = yym2912
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2913 := z.EncBinary()
				_ = yym2913
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2915 := z.EncBinary()
				_ = yym2915
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2916 := z.EncBinary()
				_ = yym2916
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2918 := z.EncBinary()
				_ = yym2918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2919 := z.EncBinary()
				_ = yym2919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2921 := z.EncBinary()
				_ = yym2921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2922 := z.EncBinary()
				_ = yym2922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2924 := z.EncBinary()
				_ = yym2924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2925 := z.EncBinary()
				_ = yym2925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2927 := z.EncBinary()
				_ = yym2927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2928 := z.EncBinary()
				_ = yym2928
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2931 := z.EncBinary()
				_ = yym2931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2934 := z.EncBinary()
				_ = yym2934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2936 := z.EncBinary()
				_ = yym2936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2937 := z.EncBinary()
				_ = yym2937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2938 := z.DecBinary()
	_ = yym2938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2939 := r.ContainerType()
		if yyct2939 == codecSelferValueTypeMap1234 {
			yyl2939 := r.ReadMapStart()
			if yyl2939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2939, d)
			}
		} else if yyct2939 == codecSelferValueTypeArray1234 {
			yyl2939 := r.ReadArrayStart()
			if yyl2939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2940Slc
	var yyhl2940 bool = l >= 0
	for yyj2940 := 0; ; yyj2940++ {
		if yyhl2940 {
			if yyj2940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2940Slc = r.DecodeBytes(yys2940Slc, true, true)
		yys2940 := string(yys2940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2940 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2940)
		} // end switch yys2940
	} // end for yyj2940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2951 int
	var yyb2951 bool
	var yyhl2951 bool = l >= 0
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2951++
		if yyhl2951 {
			yyb2951 = yyj2951 > l
		} else {
			yyb2951 = r.CheckBreak()
		}
		if yyb2951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2962 := z.EncBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2963 := !z.EncBinary()
			yy2arr2963 := z.EncBasicHandle().StructToArray
			var yyq2963 [10]bool
			_, _, _ = yysep2963, yyq2963, yy2arr2963
			const yyr2963 bool = false
			yyq2963[0] = len(x.Capacity) != 0
			yyq2963[1] = len(x.Allocatable) != 0
			yyq2963[2] = x.Phase != ""
			yyq2963[3] = len(x.Conditions) != 0
			yyq2963[4] = len(x.Addresses) != 0
			yyq2963[5] = true
			yyq2963[6] = true
			yyq2963[7] = len(x.Images) != 0
			yyq2963[8] = len(x.VolumesInUse) != 0
			yyq2963[9] = len(x.VolumesAttached) != 0
			var yynn2963 int
			if yyr2963 || yy2arr2963 {
				r.EncodeArrayStart(10)
			} else {
				yynn2963 = 0
				for _, b := range yyq2963 {
					if b {
						yynn2963++
					}
				}
				r.EncodeMapStart(yynn2963)
				yynn2963 = 0
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2968 := z.EncBinary()
						_ = yym2968
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2969 := z.EncBinary()
						_ = yym2969
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2971 := z.EncBinary()
						_ = yym2971
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2972 := z.EncBinary()
						_ = yym2972
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[5] {
					yy2974 := &x.DaemonEndpoints
					yy2974.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2975 := &x.DaemonEndpoints
					yy2975.CodecEncodeSelf(e)
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[6] {
					yy2977 := &x.NodeInfo
					yy2977.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2978 := &x.NodeInfo
					yy2978.CodecEncodeSelf(e)
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2980 := z.EncBinary()
						_ = yym2980
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2981 := z.EncBinary()
						_ = yym2981
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2983 := z.EncBinary()
						_ = yym2983
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2984 := z.EncBinary()
						_ = yym2984
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2986 := z.EncBinary()
						_ = yym2986
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2987 := z.EncBinary()
						_ = yym2987
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2988 := z.DecBinary()
	_ = yym2988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2989 := r.ContainerType()
		if yyct2989 == codecSelferValueTypeMap1234 {
			yyl2989 := r.ReadMapStart()
			if yyl2989 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2989, d)
			}
		} else if yyct2989 == codecSelferValueTypeArray1234 {
			yyl2989 := r.ReadArrayStart()
			if yyl2989 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2990Slc
	var yyhl2990 bool = l >= 0
	for yyj2990 := 0; ; yyj2990++ {
		if yyhl2990 {
			if yyj2990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2990Slc = r.DecodeBytes(yys2990Slc, true, true)
		yys2990 := string(yys2990Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2990 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2991 := &x.Capacity
				yyv2991.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2992 := &x.Allocatable
				yyv2992.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2994 := &x.Conditions
				yym2995 := z.DecBinary()
				_ = yym2995
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2994), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2996 := &x.Addresses
				yym2997 := z.DecBinary()
				_ = yym2997
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2996), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2998 := &x.DaemonEndpoints
				yyv2998.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2999 := &x.NodeInfo
				yyv2999.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3000 := &x.Images
				yym3001 := z.DecBinary()
				_ = yym3001
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3000), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3002 := &x.VolumesInUse
				yym3003 := z.DecBinary()
				_ = yym3003
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3002), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3004 := &x.VolumesAttached
				yym3005 := z.DecBinary()
				_ = yym3005
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3004), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2990)
		} // end switch yys2990
	} // end for yyj2990
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3006 int
	var yyb3006 bool
	var yyhl3006 bool = l >= 0
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3007 := &x.Capacity
		yyv3007.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3008 := &x.Allocatable
		yyv3008.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3010 := &x.Conditions
		yym3011 := z.DecBinary()
		_ = yym3011
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3010), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3012 := &x.Addresses
		yym3013 := z.DecBinary()
		_ = yym3013
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3012), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3014 := &x.DaemonEndpoints
		yyv3014.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3015 := &x.NodeInfo
		yyv3015.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3016 := &x.Images
		yym3017 := z.DecBinary()
		_ = yym3017
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3016), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3018 := &x.VolumesInUse
		yym3019 := z.DecBinary()
		_ = yym3019
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3018), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3020 := &x.VolumesAttached
		yym3021 := z.DecBinary()
		_ = yym3021
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3020), d)
		}
	}
	for {
		yyj3006++
		if yyhl3006 {
			yyb3006 = yyj3006 > l
		} else {
			yyb3006 = r.CheckBreak()
		}
		if yyb3006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3022 := z.EncBinary()
	_ = yym3022
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3023 := z.DecBinary()
	_ = yym3023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3024 := z.EncBinary()
		_ = yym3024
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3025 := !z.EncBinary()
			yy2arr3025 := z.EncBasicHandle().StructToArray
			var yyq3025 [2]bool
			_, _, _ = yysep3025, yyq3025, yy2arr3025
			const yyr3025 bool = false
			var yynn3025 int
			if yyr3025 || yy2arr3025 {
				r.EncodeArrayStart(2)
			} else {
				yynn3025 = 2
				for _, b := range yyq3025 {
					if b {
						yynn3025++
					}
				}
				r.EncodeMapStart(yynn3025)
				yynn3025 = 0
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3029 := z.EncBinary()
				_ = yym3029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3030 := z.DecBinary()
	_ = yym3030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3031 := r.ContainerType()
		if yyct3031 == codecSelferValueTypeMap1234 {
			yyl3031 := r.ReadMapStart()
			if yyl3031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3031, d)
			}
		} else if yyct3031 == codecSelferValueTypeArray1234 {
			yyl3031 := r.ReadArrayStart()
			if yyl3031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3032Slc
	var yyhl3032 bool = l >= 0
	for yyj3032 := 0; ; yyj3032++ {
		if yyhl3032 {
			if yyj3032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3032Slc = r.DecodeBytes(yys3032Slc, true, true)
		yys3032 := string(yys3032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3032 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3032)
		} // end switch yys3032
	} // end for yyj3032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3035 int
	var yyb3035 bool
	var yyhl3035 bool = l >= 0
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3035++
		if yyhl3035 {
			yyb3035 = yyj3035 > l
		} else {
			yyb3035 = r.CheckBreak()
		}
		if yyb3035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3038 := z.EncBinary()
		_ = yym3038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3039 := !z.EncBinary()
			yy2arr3039 := z.EncBasicHandle().StructToArray
			var yyq3039 [1]bool
			_, _, _ = yysep3039, yyq3039, yy2arr3039
			const yyr3039 bool = false
			yyq3039[0] = len(x.PreferAvoidPods) != 0
			var yynn3039 int
			if yyr3039 || yy2arr3039 {
				r.EncodeArrayStart(1)
			} else {
				yynn3039 = 0
				for _, b := range yyq3039 {
					if b {
						yynn3039++
					}
				}
				r.EncodeMapStart(yynn3039)
				yynn3039 = 0
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3039[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3041 := z.EncBinary()
						_ = yym3041
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3039[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3042 := z.EncBinary()
						_ = yym3042
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3043 := z.DecBinary()
	_ = yym3043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3044 := r.ContainerType()
		if yyct3044 == codecSelferValueTypeMap1234 {
			yyl3044 := r.ReadMapStart()
			if yyl3044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3044, d)
			}
		} else if yyct3044 == codecSelferValueTypeArray1234 {
			yyl3044 := r.ReadArrayStart()
			if yyl3044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3045Slc
	var yyhl3045 bool = l >= 0
	for yyj3045 := 0; ; yyj3045++ {
		if yyhl3045 {
			if yyj3045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3045Slc = r.DecodeBytes(yys3045Slc, true, true)
		yys3045 := string(yys3045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3045 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3046 := &x.PreferAvoidPods
				yym3047 := z.DecBinary()
				_ = yym3047
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3046), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3045)
		} // end switch yys3045
	} // end for yyj3045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3048 int
	var yyb3048 bool
	var yyhl3048 bool = l >= 0
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3049 := &x.PreferAvoidPods
		yym3050 := z.DecBinary()
		_ = yym3050
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3049), d)
		}
	}
	for {
		yyj3048++
		if yyhl3048 {
			yyb3048 = yyj3048 > l
		} else {
			yyb3048 = r.CheckBreak()
		}
		if yyb3048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3051 := z.EncBinary()
		_ = yym3051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3052 := !z.EncBinary()
			yy2arr3052 := z.EncBasicHandle().StructToArray
			var yyq3052 [4]bool
			_, _, _ = yysep3052, yyq3052, yy2arr3052
			const yyr3052 bool = false
			yyq3052[1] = true
			yyq3052[2] = x.Reason != ""
			yyq3052[3] = x.Message != ""
			var yynn3052 int
			if yyr3052 || yy2arr3052 {
				r.EncodeArrayStart(4)
			} else {
				yynn3052 = 1
				for _, b := range yyq3052 {
					if b {
						yynn3052++
					}
				}
				r.EncodeMapStart(yynn3052)
				yynn3052 = 0
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3054 := &x.PodSignature
				yy3054.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3055 := &x.PodSignature
				yy3055.CodecEncodeSelf(e)
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[1] {
					yy3057 := &x.EvictionTime
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3057) {
					} else if yym3058 {
						z.EncBinaryMarshal(yy3057)
					} else if !yym3058 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3057)
					} else {
						z.EncFallback(yy3057)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3059 := &x.EvictionTime
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3059) {
					} else if yym3060 {
						z.EncBinaryMarshal(yy3059)
					} else if !yym3060 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3059)
					} else {
						z.EncFallback(yy3059)
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[2] {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[3] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3067 := z.DecBinary()
	_ = yym3067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3068 := r.ContainerType()
		if yyct3068 == codecSelferValueTypeMap1234 {
			yyl3068 := r.ReadMapStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3068, d)
			}
		} else if yyct3068 == codecSelferValueTypeArray1234 {
			yyl3068 := r.ReadArrayStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3069Slc
	var yyhl3069 bool = l >= 0
	for yyj3069 := 0; ; yyj3069++ {
		if yyhl3069 {
			if yyj3069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3069Slc = r.DecodeBytes(yys3069Slc, true, true)
		yys3069 := string(yys3069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3069 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3070 := &x.PodSignature
				yyv3070.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3071 := &x.EvictionTime
				yym3072 := z.DecBinary()
				_ = yym3072
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3071) {
				} else if yym3072 {
					z.DecBinaryUnmarshal(yyv3071)
				} else if !yym3072 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3071)
				} else {
					z.DecFallback(yyv3071, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3069)
		} // end switch yys3069
	} // end for yyj3069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3075 int
	var yyb3075 bool
	var yyhl3075 bool = l >= 0
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3076 := &x.PodSignature
		yyv3076.CodecDecodeSelf(d)
	}
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3077 := &x.EvictionTime
		yym3078 := z.DecBinary()
		_ = yym3078
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3077) {
		} else if yym3078 {
			z.DecBinaryUnmarshal(yyv3077)
		} else if !yym3078 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3077)
		} else {
			z.DecFallback(yyv3077, false)
		}
	}
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3075++
		if yyhl3075 {
			yyb3075 = yyj3075 > l
		} else {
			yyb3075 = r.CheckBreak()
		}
		if yyb3075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [1]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[0] = x.PodController != nil
			var yynn3082 int
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(1)
			} else {
				yynn3082 = 0
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
				yynn3082 = 0
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3084 := z.DecBinary()
	_ = yym3084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3085 := r.ContainerType()
		if yyct3085 == codecSelferValueTypeMap1234 {
			yyl3085 := r.ReadMapStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3085, d)
			}
		} else if yyct3085 == codecSelferValueTypeArray1234 {
			yyl3085 := r.ReadArrayStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3086Slc
	var yyhl3086 bool = l >= 0
	for yyj3086 := 0; ; yyj3086++ {
		if yyhl3086 {
			if yyj3086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3086Slc = r.DecodeBytes(yys3086Slc, true, true)
		yys3086 := string(yys3086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3086 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3086)
		} // end switch yys3086
	} // end for yyj3086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3090 := z.EncBinary()
		_ = yym3090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3091 := !z.EncBinary()
			yy2arr3091 := z.EncBasicHandle().StructToArray
			var yyq3091 [2]bool
			_, _, _ = yysep3091, yyq3091, yy2arr3091
			const yyr3091 bool = false
			yyq3091[1] = x.SizeBytes != 0
			var yynn3091 int
			if yyr3091 || yy2arr3091 {
				r.EncodeArrayStart(2)
			} else {
				yynn3091 = 1
				for _, b := range yyq3091 {
					if b {
						yynn3091++
					}
				}
				r.EncodeMapStart(yynn3091)
				yynn3091 = 0
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3091[1] {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3091[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3098 := z.DecBinary()
	_ = yym3098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3099 := r.ContainerType()
		if yyct3099 == codecSelferValueTypeMap1234 {
			yyl3099 := r.ReadMapStart()
			if yyl3099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3099, d)
			}
		} else if yyct3099 == codecSelferValueTypeArray1234 {
			yyl3099 := r.ReadArrayStart()
			if yyl3099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3100Slc
	var yyhl3100 bool = l >= 0
	for yyj3100 := 0; ; yyj3100++ {
		if yyhl3100 {
			if yyj3100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3100Slc = r.DecodeBytes(yys3100Slc, true, true)
		yys3100 := string(yys3100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3100 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3101 := &x.Names
				yym3102 := z.DecBinary()
				_ = yym3102
				if false {
				} else {
					z.F.DecSliceStringX(yyv3101, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3100)
		} // end switch yys3100
	} // end for yyj3100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3104 int
	var yyb3104 bool
	var yyhl3104 bool = l >= 0
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3105 := &x.Names
		yym3106 := z.DecBinary()
		_ = yym3106
		if false {
		} else {
			z.F.DecSliceStringX(yyv3105, false, d)
		}
	}
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3104++
		if yyhl3104 {
			yyb3104 = yyj3104 > l
		} else {
			yyb3104 = r.CheckBreak()
		}
		if yyb3104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3108 := z.EncBinary()
	_ = yym3108
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3109 := z.DecBinary()
	_ = yym3109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3110 := z.EncBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3111 := z.DecBinary()
	_ = yym3111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3112 := z.EncBinary()
		_ = yym3112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3113 := !z.EncBinary()
			yy2arr3113 := z.EncBasicHandle().StructToArray
			var yyq3113 [6]bool
			_, _, _ = yysep3113, yyq3113, yy2arr3113
			const yyr3113 bool = false
			yyq3113[2] = true
			yyq3113[3] = true
			yyq3113[4] = x.Reason != ""
			yyq3113[5] = x.Message != ""
			var yynn3113 int
			if yyr3113 || yy2arr3113 {
				r.EncodeArrayStart(6)
			} else {
				yynn3113 = 2
				for _, b := range yyq3113 {
					if b {
						yynn3113++
					}
				}
				r.EncodeMapStart(yynn3113)
				yynn3113 = 0
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[2] {
					yy3117 := &x.LastHeartbeatTime
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else if yym3118 {
						z.EncBinaryMarshal(yy3117)
					} else if !yym3118 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3117)
					} else {
						z.EncFallback(yy3117)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3119 := &x.LastHeartbeatTime
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3119) {
					} else if yym3120 {
						z.EncBinaryMarshal(yy3119)
					} else if !yym3120 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3119)
					} else {
						z.EncFallback(yy3119)
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[3] {
					yy3122 := &x.LastTransitionTime
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3122) {
					} else if yym3123 {
						z.EncBinaryMarshal(yy3122)
					} else if !yym3123 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3122)
					} else {
						z.EncFallback(yy3122)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3124 := &x.LastTransitionTime
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3124) {
					} else if yym3125 {
						z.EncBinaryMarshal(yy3124)
					} else if !yym3125 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3124)
					} else {
						z.EncFallback(yy3124)
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[4] {
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[5] {
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3132 := z.DecBinary()
	_ = yym3132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3133 := r.ContainerType()
		if yyct3133 == codecSelferValueTypeMap1234 {
			yyl3133 := r.ReadMapStart()
			if yyl3133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3133, d)
			}
		} else if yyct3133 == codecSelferValueTypeArray1234 {
			yyl3133 := r.ReadArrayStart()
			if yyl3133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3134Slc
	var yyhl3134 bool = l >= 0
	for yyj3134 := 0; ; yyj3134++ {
		if yyhl3134 {
			if yyj3134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3134Slc = r.DecodeBytes(yys3134Slc, true, true)
		yys3134 := string(yys3134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3134 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3137 := &x.LastHeartbeatTime
				yym3138 := z.DecBinary()
				_ = yym3138
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3137) {
				} else if yym3138 {
					z.DecBinaryUnmarshal(yyv3137)
				} else if !yym3138 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3137)
				} else {
					z.DecFallback(yyv3137, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3139 := &x.LastTransitionTime
				yym3140 := z.DecBinary()
				_ = yym3140
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3139) {
				} else if yym3140 {
					z.DecBinaryUnmarshal(yyv3139)
				} else if !yym3140 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3139)
				} else {
					z.DecFallback(yyv3139, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3134)
		} // end switch yys3134
	} // end for yyj3134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3143 int
	var yyb3143 bool
	var yyhl3143 bool = l >= 0
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3146 := &x.LastHeartbeatTime
		yym3147 := z.DecBinary()
		_ = yym3147
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3146) {
		} else if yym3147 {
			z.DecBinaryUnmarshal(yyv3146)
		} else if !yym3147 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3146)
		} else {
			z.DecFallback(yyv3146, false)
		}
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3148 := &x.LastTransitionTime
		yym3149 := z.DecBinary()
		_ = yym3149
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3148) {
		} else if yym3149 {
			z.DecBinaryUnmarshal(yyv3148)
		} else if !yym3149 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3148)
		} else {
			z.DecFallback(yyv3148, false)
		}
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3143++
		if yyhl3143 {
			yyb3143 = yyj3143 > l
		} else {
			yyb3143 = r.CheckBreak()
		}
		if yyb3143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3152 := z.EncBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3153 := z.DecBinary()
	_ = yym3153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3154 := z.EncBinary()
		_ = yym3154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3155 := !z.EncBinary()
			yy2arr3155 := z.EncBasicHandle().StructToArray
			var yyq3155 [2]bool
			_, _, _ = yysep3155, yyq3155, yy2arr3155
			const yyr3155 bool = false
			var yynn3155 int
			if yyr3155 || yy2arr3155 {
				r.EncodeArrayStart(2)
			} else {
				yynn3155 = 2
				for _, b := range yyq3155 {
					if b {
						yynn3155++
					}
				}
				r.EncodeMapStart(yynn3155)
				yynn3155 = 0
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3158 := z.EncBinary()
				_ = yym3158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3159 := z.EncBinary()
				_ = yym3159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3160 := z.DecBinary()
	_ = yym3160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3161 := r.ContainerType()
		if yyct3161 == codecSelferValueTypeMap1234 {
			yyl3161 := r.ReadMapStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3161, d)
			}
		} else if yyct3161 == codecSelferValueTypeArray1234 {
			yyl3161 := r.ReadArrayStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3162Slc
	var yyhl3162 bool = l >= 0
	for yyj3162 := 0; ; yyj3162++ {
		if yyhl3162 {
			if yyj3162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3162Slc = r.DecodeBytes(yys3162Slc, true, true)
		yys3162 := string(yys3162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3162 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3162)
		} // end switch yys3162
	} // end for yyj3162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3165 int
	var yyb3165 bool
	var yyhl3165 bool = l >= 0
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3165++
		if yyhl3165 {
			yyb3165 = yyj3165 > l
		} else {
			yyb3165 = r.CheckBreak()
		}
		if yyb3165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3168 := z.EncBinary()
		_ = yym3168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3169 := !z.EncBinary()
			yy2arr3169 := z.EncBasicHandle().StructToArray
			var yyq3169 [1]bool
			_, _, _ = yysep3169, yyq3169, yy2arr3169
			const yyr3169 bool = false
			yyq3169[0] = len(x.Capacity) != 0
			var yynn3169 int
			if yyr3169 || yy2arr3169 {
				r.EncodeArrayStart(1)
			} else {
				yynn3169 = 0
				for _, b := range yyq3169 {
					if b {
						yynn3169++
					}
				}
				r.EncodeMapStart(yynn3169)
				yynn3169 = 0
			}
			if yyr3169 || yy2arr3169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3169[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3169[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3169 || yy2arr3169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3171 := z.DecBinary()
	_ = yym3171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3172 := r.ContainerType()
		if yyct3172 == codecSelferValueTypeMap1234 {
			yyl3172 := r.ReadMapStart()
			if yyl3172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3172, d)
			}
		} else if yyct3172 == codecSelferValueTypeArray1234 {
			yyl3172 := r.ReadArrayStart()
			if yyl3172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3173Slc
	var yyhl3173 bool = l >= 0
	for yyj3173 := 0; ; yyj3173++ {
		if yyhl3173 {
			if yyj3173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3173Slc = r.DecodeBytes(yys3173Slc, true, true)
		yys3173 := string(yys3173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3173 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3174 := &x.Capacity
				yyv3174.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3173)
		} // end switch yys3173
	} // end for yyj3173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3175 int
	var yyb3175 bool
	var yyhl3175 bool = l >= 0
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3176 := &x.Capacity
		yyv3176.CodecDecodeSelf(d)
	}
	for {
		yyj3175++
		if yyhl3175 {
			yyb3175 = yyj3175 > l
		} else {
			yyb3175 = r.CheckBreak()
		}
		if yyb3175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3177 := z.EncBinary()
	_ = yym3177
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3178 := z.DecBinary()
	_ = yym3178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3179 := z.EncBinary()
		_ = yym3179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3180 := z.DecBinary()
	_ = yym3180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [5]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[0] = x.Kind != ""
			yyq3182[1] = x.APIVersion != ""
			yyq3182[2] = true
			yyq3182[3] = true
			yyq3182[4] = true
			var yynn3182 int
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(5)
			} else {
				yynn3182 = 0
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
				yynn3182 = 0
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[0] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[1] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[2] {
					yy3190 := &x.ObjectMeta
					yy3190.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3191 := &x.ObjectMeta
					yy3191.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[3] {
					yy3193 := &x.Spec
					yy3193.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3194 := &x.Spec
					yy3194.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[4] {
					yy3196 := &x.Status
					yy3196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3197 := &x.Status
					yy3197.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3198 := z.DecBinary()
	_ = yym3198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3199 := r.ContainerType()
		if yyct3199 == codecSelferValueTypeMap1234 {
			yyl3199 := r.ReadMapStart()
			if yyl3199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3199, d)
			}
		} else if yyct3199 == codecSelferValueTypeArray1234 {
			yyl3199 := r.ReadArrayStart()
			if yyl3199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3200Slc
	var yyhl3200 bool = l >= 0
	for yyj3200 := 0; ; yyj3200++ {
		if yyhl3200 {
			if yyj3200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3200Slc = r.DecodeBytes(yys3200Slc, true, true)
		yys3200 := string(yys3200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3203 := &x.ObjectMeta
				yyv3203.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3204 := &x.Spec
				yyv3204.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3205 := &x.Status
				yyv3205.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3200)
		} // end switch yys3200
	} // end for yyj3200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3206 int
	var yyb3206 bool
	var yyhl3206 bool = l >= 0
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3209 := &x.ObjectMeta
		yyv3209.CodecDecodeSelf(d)
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3210 := &x.Spec
		yyv3210.CodecDecodeSelf(d)
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3211 := &x.Status
		yyv3211.CodecDecodeSelf(d)
	}
	for {
		yyj3206++
		if yyhl3206 {
			yyb3206 = yyj3206 > l
		} else {
			yyb3206 = r.CheckBreak()
		}
		if yyb3206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3212 := z.EncBinary()
		_ = yym3212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3213 := !z.EncBinary()
			yy2arr3213 := z.EncBasicHandle().StructToArray
			var yyq3213 [4]bool
			_, _, _ = yysep3213, yyq3213, yy2arr3213
			const yyr3213 bool = false
			yyq3213[0] = x.Kind != ""
			yyq3213[1] = x.APIVersion != ""
			yyq3213[2] = true
			var yynn3213 int
			if yyr3213 || yy2arr3213 {
				r.EncodeArrayStart(4)
			} else {
				yynn3213 = 1
				for _, b := range yyq3213 {
					if b {
						yynn3213++
					}
				}
				r.EncodeMapStart(yynn3213)
				yynn3213 = 0
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3213[0] {
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3213[1] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3213[2] {
					yy3221 := &x.ListMeta
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3221) {
					} else {
						z.EncFallback(yy3221)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3213[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3223 := &x.ListMeta
					yym3224 := z.EncBinary()
					_ = yym3224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3223) {
					} else {
						z.EncFallback(yy3223)
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3228 := z.DecBinary()
	_ = yym3228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3229 := r.ContainerType()
		if yyct3229 == codecSelferValueTypeMap1234 {
			yyl3229 := r.ReadMapStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3229, d)
			}
		} else if yyct3229 == codecSelferValueTypeArray1234 {
			yyl3229 := r.ReadArrayStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3230Slc
	var yyhl3230 bool = l >= 0
	for yyj3230 := 0; ; yyj3230++ {
		if yyhl3230 {
			if yyj3230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3230Slc = r.DecodeBytes(yys3230Slc, true, true)
		yys3230 := string(yys3230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3230 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3233 := &x.ListMeta
				yym3234 := z.DecBinary()
				_ = yym3234
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3233) {
				} else {
					z.DecFallback(yyv3233, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3235 := &x.Items
				yym3236 := z.DecBinary()
				_ = yym3236
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3235), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3230)
		} // end switch yys3230
	} // end for yyj3230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3237 int
	var yyb3237 bool
	var yyhl3237 bool = l >= 0
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3240 := &x.ListMeta
		yym3241 := z.DecBinary()
		_ = yym3241
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3240) {
		} else {
			z.DecFallback(yyv3240, false)
		}
	}
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3242 := &x.Items
		yym3243 := z.DecBinary()
		_ = yym3243
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3242), d)
		}
	}
	for {
		yyj3237++
		if yyhl3237 {
			yyb3237 = yyj3237 > l
		} else {
			yyb3237 = r.CheckBreak()
		}
		if yyb3237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3244 := z.EncBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3245 := !z.EncBinary()
			yy2arr3245 := z.EncBasicHandle().StructToArray
			var yyq3245 [1]bool
			_, _, _ = yysep3245, yyq3245, yy2arr3245
			const yyr3245 bool = false
			var yynn3245 int
			if yyr3245 || yy2arr3245 {
				r.EncodeArrayStart(1)
			} else {
				yynn3245 = 1
				for _, b := range yyq3245 {
					if b {
						yynn3245++
					}
				}
				r.EncodeMapStart(yynn3245)
				yynn3245 = 0
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3249 := z.DecBinary()
	_ = yym3249
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3250 := r.ContainerType()
		if yyct3250 == codecSelferValueTypeMap1234 {
			yyl3250 := r.ReadMapStart()
			if yyl3250 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3250, d)
			}
		} else if yyct3250 == codecSelferValueTypeArray1234 {
			yyl3250 := r.ReadArrayStart()
			if yyl3250 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3250, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3251Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3251Slc
	var yyhl3251 bool = l >= 0
	for yyj3251 := 0; ; yyj3251++ {
		if yyhl3251 {
			if yyj3251 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3251Slc = r.DecodeBytes(yys3251Slc, true, true)
		yys3251 := string(yys3251Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3251 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3252 := &x.Finalizers
				yym3253 := z.DecBinary()
				_ = yym3253
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3252), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3251)
		} // end switch yys3251
	} // end for yyj3251
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3254 int
	var yyb3254 bool
	var yyhl3254 bool = l >= 0
	yyj3254++
	if yyhl3254 {
		yyb3254 = yyj3254 > l
	} else {
		yyb3254 = r.CheckBreak()
	}
	if yyb3254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3255 := &x.Finalizers
		yym3256 := z.DecBinary()
		_ = yym3256
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3255), d)
		}
	}
	for {
		yyj3254++
		if yyhl3254 {
			yyb3254 = yyj3254 > l
		} else {
			yyb3254 = r.CheckBreak()
		}
		if yyb3254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3257 := z.EncBinary()
	_ = yym3257
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3258 := z.DecBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3259 := z.EncBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3260 := !z.EncBinary()
			yy2arr3260 := z.EncBasicHandle().StructToArray
			var yyq3260 [1]bool
			_, _, _ = yysep3260, yyq3260, yy2arr3260
			const yyr3260 bool = false
			yyq3260[0] = x.Phase != ""
			var yynn3260 int
			if yyr3260 || yy2arr3260 {
				r.EncodeArrayStart(1)
			} else {
				yynn3260 = 0
				for _, b := range yyq3260 {
					if b {
						yynn3260++
					}
				}
				r.EncodeMapStart(yynn3260)
				yynn3260 = 0
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3260[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3263 := r.ContainerType()
		if yyct3263 == codecSelferValueTypeMap1234 {
			yyl3263 := r.ReadMapStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3263, d)
			}
		} else if yyct3263 == codecSelferValueTypeArray1234 {
			yyl3263 := r.ReadArrayStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3264Slc
	var yyhl3264 bool = l >= 0
	for yyj3264 := 0; ; yyj3264++ {
		if yyhl3264 {
			if yyj3264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3264Slc = r.DecodeBytes(yys3264Slc, true, true)
		yys3264 := string(yys3264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3264 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3264)
		} // end switch yys3264
	} // end for yyj3264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3266 int
	var yyb3266 bool
	var yyhl3266 bool = l >= 0
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3266++
		if yyhl3266 {
			yyb3266 = yyj3266 > l
		} else {
			yyb3266 = r.CheckBreak()
		}
		if yyb3266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3268 := z.EncBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3269 := z.DecBinary()
	_ = yym3269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3270 := z.EncBinary()
		_ = yym3270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3271 := !z.EncBinary()
			yy2arr3271 := z.EncBasicHandle().StructToArray
			var yyq3271 [5]bool
			_, _, _ = yysep3271, yyq3271, yy2arr3271
			const yyr3271 bool = false
			yyq3271[0] = x.Kind != ""
			yyq3271[1] = x.APIVersion != ""
			yyq3271[2] = true
			yyq3271[3] = true
			yyq3271[4] = true
			var yynn3271 int
			if yyr3271 || yy2arr3271 {
				r.EncodeArrayStart(5)
			} else {
				yynn3271 = 0
				for _, b := range yyq3271 {
					if b {
						yynn3271++
					}
				}
				r.EncodeMapStart(yynn3271)
				yynn3271 = 0
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[0] {
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3271[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[1] {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3271[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[2] {
					yy3279 := &x.ObjectMeta
					yy3279.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3271[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3280 := &x.ObjectMeta
					yy3280.CodecEncodeSelf(e)
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[3] {
					yy3282 := &x.Spec
					yy3282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3271[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3283 := &x.Spec
					yy3283.CodecEncodeSelf(e)
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[4] {
					yy3285 := &x.Status
					yy3285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3271[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3286 := &x.Status
					yy3286.CodecEncodeSelf(e)
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3287 := z.DecBinary()
	_ = yym3287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3288 := r.ContainerType()
		if yyct3288 == codecSelferValueTypeMap1234 {
			yyl3288 := r.ReadMapStart()
			if yyl3288 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3288, d)
			}
		} else if yyct3288 == codecSelferValueTypeArray1234 {
			yyl3288 := r.ReadArrayStart()
			if yyl3288 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3289Slc
	var yyhl3289 bool = l >= 0
	for yyj3289 := 0; ; yyj3289++ {
		if yyhl3289 {
			if yyj3289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3289Slc = r.DecodeBytes(yys3289Slc, true, true)
		yys3289 := string(yys3289Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3289 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3292 := &x.ObjectMeta
				yyv3292.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3293 := &x.Spec
				yyv3293.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3294 := &x.Status
				yyv3294.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3289)
		} // end switch yys3289
	} // end for yyj3289
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3295 int
	var yyb3295 bool
	var yyhl3295 bool = l >= 0
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3298 := &x.ObjectMeta
		yyv3298.CodecDecodeSelf(d)
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3299 := &x.Spec
		yyv3299.CodecDecodeSelf(d)
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3300 := &x.Status
		yyv3300.CodecDecodeSelf(d)
	}
	for {
		yyj3295++
		if yyhl3295 {
			yyb3295 = yyj3295 > l
		} else {
			yyb3295 = r.CheckBreak()
		}
		if yyb3295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3301 := z.EncBinary()
		_ = yym3301
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3302 := !z.EncBinary()
			yy2arr3302 := z.EncBasicHandle().StructToArray
			var yyq3302 [4]bool
			_, _, _ = yysep3302, yyq3302, yy2arr3302
			const yyr3302 bool = false
			yyq3302[0] = x.Kind != ""
			yyq3302[1] = x.APIVersion != ""
			yyq3302[2] = true
			var yynn3302 int
			if yyr3302 || yy2arr3302 {
				r.EncodeArrayStart(4)
			} else {
				yynn3302 = 1
				for _, b := range yyq3302 {
					if b {
						yynn3302++
					}
				}
				r.EncodeMapStart(yynn3302)
				yynn3302 = 0
			}
			if yyr3302 || yy2arr3302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3302[0] {
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3302[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3302 || yy2arr3302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3302[1] {
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3302[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3302 || yy2arr3302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3302[2] {
					yy3310 := &x.ListMeta
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3310) {
					} else {
						z.EncFallback(yy3310)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3302[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3312 := &x.ListMeta
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3312) {
					} else {
						z.EncFallback(yy3312)
					}
				}
			}
			if yyr3302 || yy2arr3302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3302 || yy2arr3302 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3317 := z.DecBinary()
	_ = yym3317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3318 := r.ContainerType()
		if yyct3318 == codecSelferValueTypeMap1234 {
			yyl3318 := r.ReadMapStart()
			if yyl3318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3318, d)
			}
		} else if yyct3318 == codecSelferValueTypeArray1234 {
			yyl3318 := r.ReadArrayStart()
			if yyl3318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3319Slc
	var yyhl3319 bool = l >= 0
	for yyj3319 := 0; ; yyj3319++ {
		if yyhl3319 {
			if yyj3319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3319Slc = r.DecodeBytes(yys3319Slc, true, true)
		yys3319 := string(yys3319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3319 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3322 := &x.ListMeta
				yym3323 := z.DecBinary()
				_ = yym3323
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3322) {
				} else {
					z.DecFallback(yyv3322, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3324 := &x.Items
				yym3325 := z.DecBinary()
				_ = yym3325
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3324), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3319)
		} // end switch yys3319
	} // end for yyj3319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3326 int
	var yyb3326 bool
	var yyhl3326 bool = l >= 0
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3329 := &x.ListMeta
		yym3330 := z.DecBinary()
		_ = yym3330
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3329) {
		} else {
			z.DecFallback(yyv3329, false)
		}
	}
	yyj3326++
	if yyhl3326 {
		yyb3326 = yyj3326 > l
	} else {
		yyb3326 = r.CheckBreak()
	}
	if yyb3326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3331 := &x.Items
		yym3332 := z.DecBinary()
		_ = yym3332
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3331), d)
		}
	}
	for {
		yyj3326++
		if yyhl3326 {
			yyb3326 = yyj3326 > l
		} else {
			yyb3326 = r.CheckBreak()
		}
		if yyb3326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3333 := z.EncBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3334 := !z.EncBinary()
			yy2arr3334 := z.EncBasicHandle().StructToArray
			var yyq3334 [4]bool
			_, _, _ = yysep3334, yyq3334, yy2arr3334
			const yyr3334 bool = false
			yyq3334[0] = x.Kind != ""
			yyq3334[1] = x.APIVersion != ""
			yyq3334[2] = true
			var yynn3334 int
			if yyr3334 || yy2arr3334 {
				r.EncodeArrayStart(4)
			} else {
				yynn3334 = 1
				for _, b := range yyq3334 {
					if b {
						yynn3334++
					}
				}
				r.EncodeMapStart(yynn3334)
				yynn3334 = 0
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[0] {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[1] {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[2] {
					yy3342 := &x.ObjectMeta
					yy3342.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3343 := &x.ObjectMeta
					yy3343.CodecEncodeSelf(e)
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3345 := &x.Target
				yy3345.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3346 := &x.Target
				yy3346.CodecEncodeSelf(e)
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3347 := z.DecBinary()
	_ = yym3347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3348 := r.ContainerType()
		if yyct3348 == codecSelferValueTypeMap1234 {
			yyl3348 := r.ReadMapStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3348, d)
			}
		} else if yyct3348 == codecSelferValueTypeArray1234 {
			yyl3348 := r.ReadArrayStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3349Slc
	var yyhl3349 bool = l >= 0
	for yyj3349 := 0; ; yyj3349++ {
		if yyhl3349 {
			if yyj3349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3349Slc = r.DecodeBytes(yys3349Slc, true, true)
		yys3349 := string(yys3349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3349 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3352 := &x.ObjectMeta
				yyv3352.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3353 := &x.Target
				yyv3353.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3349)
		} // end switch yys3349
	} // end for yyj3349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3354 int
	var yyb3354 bool
	var yyhl3354 bool = l >= 0
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3357 := &x.ObjectMeta
		yyv3357.CodecDecodeSelf(d)
	}
	yyj3354++
	if yyhl3354 {
		yyb3354 = yyj3354 > l
	} else {
		yyb3354 = r.CheckBreak()
	}
	if yyb3354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3358 := &x.Target
		yyv3358.CodecDecodeSelf(d)
	}
	for {
		yyj3354++
		if yyhl3354 {
			yyb3354 = yyj3354 > l
		} else {
			yyb3354 = r.CheckBreak()
		}
		if yyb3354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3359 := z.EncBinary()
		_ = yym3359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3360 := !z.EncBinary()
			yy2arr3360 := z.EncBasicHandle().StructToArray
			var yyq3360 [1]bool
			_, _, _ = yysep3360, yyq3360, yy2arr3360
			const yyr3360 bool = false
			yyq3360[0] = x.UID != nil
			var yynn3360 int
			if yyr3360 || yy2arr3360 {
				r.EncodeArrayStart(1)
			} else {
				yynn3360 = 0
				for _, b := range yyq3360 {
					if b {
						yynn3360++
					}
				}
				r.EncodeMapStart(yynn3360)
				yynn3360 = 0
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3360[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3362 := *x.UID
						yym3363 := z.EncBinary()
						_ = yym3363
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3362) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3362))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3364 := *x.UID
						yym3365 := z.EncBinary()
						_ = yym3365
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3364) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3364))
						}
					}
				}
			}
			if yyr3360 || yy2arr3360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3366 := z.DecBinary()
	_ = yym3366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3367 := r.ContainerType()
		if yyct3367 == codecSelferValueTypeMap1234 {
			yyl3367 := r.ReadMapStart()
			if yyl3367 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3367, d)
			}
		} else if yyct3367 == codecSelferValueTypeArray1234 {
			yyl3367 := r.ReadArrayStart()
			if yyl3367 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3368Slc
	var yyhl3368 bool = l >= 0
	for yyj3368 := 0; ; yyj3368++ {
		if yyhl3368 {
			if yyj3368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3368Slc = r.DecodeBytes(yys3368Slc, true, true)
		yys3368 := string(yys3368Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3368 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3370 := z.DecBinary()
				_ = yym3370
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3368)
		} // end switch yys3368
	} // end for yyj3368
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3371 int
	var yyb3371 bool
	var yyhl3371 bool = l >= 0
	yyj3371++
	if yyhl3371 {
		yyb3371 = yyj3371 > l
	} else {
		yyb3371 = r.CheckBreak()
	}
	if yyb3371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3373 := z.DecBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3371++
		if yyhl3371 {
			yyb3371 = yyj3371 > l
		} else {
			yyb3371 = r.CheckBreak()
		}
		if yyb3371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3374 := z.EncBinary()
		_ = yym3374
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3375 := !z.EncBinary()
			yy2arr3375 := z.EncBasicHandle().StructToArray
			var yyq3375 [5]bool
			_, _, _ = yysep3375, yyq3375, yy2arr3375
			const yyr3375 bool = false
			yyq3375[0] = x.Kind != ""
			yyq3375[1] = x.APIVersion != ""
			yyq3375[2] = x.GracePeriodSeconds != nil
			yyq3375[3] = x.Preconditions != nil
			yyq3375[4] = x.OrphanDependents != nil
			var yynn3375 int
			if yyr3375 || yy2arr3375 {
				r.EncodeArrayStart(5)
			} else {
				yynn3375 = 0
				for _, b := range yyq3375 {
					if b {
						yynn3375++
					}
				}
				r.EncodeMapStart(yynn3375)
				yynn3375 = 0
			}
			if yyr3375 || yy2arr3375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3375[0] {
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3375[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3378 := z.EncBinary()
					_ = yym3378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3375 || yy2arr3375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3375[1] {
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3375[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3381 := z.EncBinary()
					_ = yym3381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3375 || yy2arr3375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3375[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3383 := *x.GracePeriodSeconds
						yym3384 := z.EncBinary()
						_ = yym3384
						if false {
						} else {
							r.EncodeInt(int64(yy3383))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3375[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3385 := *x.GracePeriodSeconds
						yym3386 := z.EncBinary()
						_ = yym3386
						if false {
						} else {
							r.EncodeInt(int64(yy3385))
						}
					}
				}
			}
			if yyr3375 || yy2arr3375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3375[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3375[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3375 || yy2arr3375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3375[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3389 := *x.OrphanDependents
						yym3390 := z.EncBinary()
						_ = yym3390
						if false {
						} else {
							r.EncodeBool(bool(yy3389))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3375[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3391 := *x.OrphanDependents
						yym3392 := z.EncBinary()
						_ = yym3392
						if false {
						} else {
							r.EncodeBool(bool(yy3391))
						}
					}
				}
			}
			if yyr3375 || yy2arr3375 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3393 := z.DecBinary()
	_ = yym3393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3394 := r.ContainerType()
		if yyct3394 == codecSelferValueTypeMap1234 {
			yyl3394 := r.ReadMapStart()
			if yyl3394 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3394, d)
			}
		} else if yyct3394 == codecSelferValueTypeArray1234 {
			yyl3394 := r.ReadArrayStart()
			if yyl3394 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3395Slc
	var yyhl3395 bool = l >= 0
	for yyj3395 := 0; ; yyj3395++ {
		if yyhl3395 {
			if yyj3395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3395Slc = r.DecodeBytes(yys3395Slc, true, true)
		yys3395 := string(yys3395Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3395 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3399 := z.DecBinary()
				_ = yym3399
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3402 := z.DecBinary()
				_ = yym3402
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3395)
		} // end switch yys3395
	} // end for yyj3395
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3403 int
	var yyb3403 bool
	var yyhl3403 bool = l >= 0
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3407 := z.DecBinary()
		_ = yym3407
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3410 := z.DecBinary()
		_ = yym3410
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3403++
		if yyhl3403 {
			yyb3403 = yyj3403 > l
		} else {
			yyb3403 = r.CheckBreak()
		}
		if yyb3403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3411 := z.EncBinary()
		_ = yym3411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3412 := !z.EncBinary()
			yy2arr3412 := z.EncBasicHandle().StructToArray
			var yyq3412 [4]bool
			_, _, _ = yysep3412, yyq3412, yy2arr3412
			const yyr3412 bool = false
			yyq3412[0] = x.Kind != ""
			yyq3412[1] = x.APIVersion != ""
			var yynn3412 int
			if yyr3412 || yy2arr3412 {
				r.EncodeArrayStart(4)
			} else {
				yynn3412 = 2
				for _, b := range yyq3412 {
					if b {
						yynn3412++
					}
				}
				r.EncodeMapStart(yynn3412)
				yynn3412 = 0
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[0] {
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3412[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3412[1] {
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3412[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3420 := z.EncBinary()
				_ = yym3420
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3421 := z.EncBinary()
				_ = yym3421
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3423 := z.EncBinary()
				_ = yym3423
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3424 := z.EncBinary()
				_ = yym3424
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3412 || yy2arr3412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3425 := z.DecBinary()
	_ = yym3425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3426 := r.ContainerType()
		if yyct3426 == codecSelferValueTypeMap1234 {
			yyl3426 := r.ReadMapStart()
			if yyl3426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3426, d)
			}
		} else if yyct3426 == codecSelferValueTypeArray1234 {
			yyl3426 := r.ReadArrayStart()
			if yyl3426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3427Slc
	var yyhl3427 bool = l >= 0
	for yyj3427 := 0; ; yyj3427++ {
		if yyhl3427 {
			if yyj3427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3427Slc = r.DecodeBytes(yys3427Slc, true, true)
		yys3427 := string(yys3427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3427 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3427)
		} // end switch yys3427
	} // end for yyj3427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3432 int
	var yyb3432 bool
	var yyhl3432 bool = l >= 0
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3432++
	if yyhl3432 {
		yyb3432 = yyj3432 > l
	} else {
		yyb3432 = r.CheckBreak()
	}
	if yyb3432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3432++
		if yyhl3432 {
			yyb3432 = yyj3432 > l
		} else {
			yyb3432 = r.CheckBreak()
		}
		if yyb3432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3437 := z.EncBinary()
		_ = yym3437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3438 := !z.EncBinary()
			yy2arr3438 := z.EncBasicHandle().StructToArray
			var yyq3438 [7]bool
			_, _, _ = yysep3438, yyq3438, yy2arr3438
			const yyr3438 bool = false
			yyq3438[0] = x.Kind != ""
			yyq3438[1] = x.APIVersion != ""
			var yynn3438 int
			if yyr3438 || yy2arr3438 {
				r.EncodeArrayStart(7)
			} else {
				yynn3438 = 5
				for _, b := range yyq3438 {
					if b {
						yynn3438++
					}
				}
				r.EncodeMapStart(yynn3438)
				yynn3438 = 0
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[0] {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3438[1] {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3452 := z.EncBinary()
				_ = yym3452
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3453 := z.EncBinary()
				_ = yym3453
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3455 := z.EncBinary()
				_ = yym3455
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3456 := z.EncBinary()
				_ = yym3456
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3458 := *x.TimeoutSeconds
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeInt(int64(yy3458))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3460 := *x.TimeoutSeconds
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeInt(int64(yy3460))
					}
				}
			}
			if yyr3438 || yy2arr3438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3462 := z.DecBinary()
	_ = yym3462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3463 := r.ContainerType()
		if yyct3463 == codecSelferValueTypeMap1234 {
			yyl3463 := r.ReadMapStart()
			if yyl3463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3463, d)
			}
		} else if yyct3463 == codecSelferValueTypeArray1234 {
			yyl3463 := r.ReadArrayStart()
			if yyl3463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3464Slc
	var yyhl3464 bool = l >= 0
	for yyj3464 := 0; ; yyj3464++ {
		if yyhl3464 {
			if yyj3464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3464Slc = r.DecodeBytes(yys3464Slc, true, true)
		yys3464 := string(yys3464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3464 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3467 := &x.LabelSelector
				yym3468 := z.DecBinary()
				_ = yym3468
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3467) {
				} else {
					z.DecFallback(yyv3467, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3469 := &x.FieldSelector
				yym3470 := z.DecBinary()
				_ = yym3470
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3469) {
				} else {
					z.DecFallback(yyv3469, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3474 := z.DecBinary()
				_ = yym3474
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3464)
		} // end switch yys3464
	} // end for yyj3464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3475 int
	var yyb3475 bool
	var yyhl3475 bool = l >= 0
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3478 := &x.LabelSelector
		yym3479 := z.DecBinary()
		_ = yym3479
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3478) {
		} else {
			z.DecFallback(yyv3478, true)
		}
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3480 := &x.FieldSelector
		yym3481 := z.DecBinary()
		_ = yym3481
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3480) {
		} else {
			z.DecFallback(yyv3480, true)
		}
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3485 := z.DecBinary()
		_ = yym3485
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3475++
		if yyhl3475 {
			yyb3475 = yyj3475 > l
		} else {
			yyb3475 = r.CheckBreak()
		}
		if yyb3475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3486 := z.EncBinary()
		_ = yym3486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3487 := !z.EncBinary()
			yy2arr3487 := z.EncBasicHandle().StructToArray
			var yyq3487 [10]bool
			_, _, _ = yysep3487, yyq3487, yy2arr3487
			const yyr3487 bool = false
			yyq3487[0] = x.Kind != ""
			yyq3487[1] = x.APIVersion != ""
			var yynn3487 int
			if yyr3487 || yy2arr3487 {
				r.EncodeArrayStart(10)
			} else {
				yynn3487 = 8
				for _, b := range yyq3487 {
					if b {
						yynn3487++
					}
				}
				r.EncodeMapStart(yynn3487)
				yynn3487 = 0
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3487[0] {
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3487[1] {
					yym3492 := z.EncBinary()
					_ = yym3492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3495 := z.EncBinary()
				_ = yym3495
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3496 := z.EncBinary()
				_ = yym3496
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3498 := z.EncBinary()
				_ = yym3498
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3499 := z.EncBinary()
				_ = yym3499
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3501 := z.EncBinary()
				_ = yym3501
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3502 := z.EncBinary()
				_ = yym3502
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3504 := *x.SinceSeconds
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeInt(int64(yy3504))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3506 := *x.SinceSeconds
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						r.EncodeInt(int64(yy3506))
					}
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3509 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3509 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3510 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3510 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3512 := z.EncBinary()
				_ = yym3512
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3513 := z.EncBinary()
				_ = yym3513
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3515 := *x.TailLines
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeInt(int64(yy3515))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3517 := *x.TailLines
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else {
						r.EncodeInt(int64(yy3517))
					}
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3520 := *x.LimitBytes
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeInt(int64(yy3520))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3522 := *x.LimitBytes
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeInt(int64(yy3522))
					}
				}
			}
			if yyr3487 || yy2arr3487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3524 := z.DecBinary()
	_ = yym3524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3525 := r.ContainerType()
		if yyct3525 == codecSelferValueTypeMap1234 {
			yyl3525 := r.ReadMapStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3525, d)
			}
		} else if yyct3525 == codecSelferValueTypeArray1234 {
			yyl3525 := r.ReadArrayStart()
			if yyl3525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3526Slc
	var yyhl3526 bool = l >= 0
	for yyj3526 := 0; ; yyj3526++ {
		if yyhl3526 {
			if yyj3526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3526Slc = r.DecodeBytes(yys3526Slc, true, true)
		yys3526 := string(yys3526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3526 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3533 := z.DecBinary()
				_ = yym3533
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3535 := z.DecBinary()
				_ = yym3535
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3535 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3535 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3538 := z.DecBinary()
				_ = yym3538
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3540 := z.DecBinary()
				_ = yym3540
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3526)
		} // end switch yys3526
	} // end for yyj3526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3541 int
	var yyb3541 bool
	var yyhl3541 bool = l >= 0
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3548 := z.DecBinary()
		_ = yym3548
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3550 := z.DecBinary()
		_ = yym3550
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3550 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3550 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3553 := z.DecBinary()
		_ = yym3553
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3541++
	if yyhl3541 {
		yyb3541 = yyj3541 > l
	} else {
		yyb3541 = r.CheckBreak()
	}
	if yyb3541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3555 := z.DecBinary()
		_ = yym3555
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3541++
		if yyhl3541 {
			yyb3541 = yyj3541 > l
		} else {
			yyb3541 = r.CheckBreak()
		}
		if yyb3541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3556 := z.EncBinary()
		_ = yym3556
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3557 := !z.EncBinary()
			yy2arr3557 := z.EncBasicHandle().StructToArray
			var yyq3557 [7]bool
			_, _, _ = yysep3557, yyq3557, yy2arr3557
			const yyr3557 bool = false
			yyq3557[0] = x.Kind != ""
			yyq3557[1] = x.APIVersion != ""
			yyq3557[2] = x.Stdin != false
			yyq3557[3] = x.Stdout != false
			yyq3557[4] = x.Stderr != false
			yyq3557[5] = x.TTY != false
			yyq3557[6] = x.Container != ""
			var yynn3557 int
			if yyr3557 || yy2arr3557 {
				r.EncodeArrayStart(7)
			} else {
				yynn3557 = 0
				for _, b := range yyq3557 {
					if b {
						yynn3557++
					}
				}
				r.EncodeMapStart(yynn3557)
				yynn3557 = 0
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[0] {
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3557[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3560 := z.EncBinary()
					_ = yym3560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[1] {
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3557[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3563 := z.EncBinary()
					_ = yym3563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[2] {
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3557[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3566 := z.EncBinary()
					_ = yym3566
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[3] {
					yym3568 := z.EncBinary()
					_ = yym3568
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3557[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[4] {
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3557[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[5] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3557[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3557[6] {
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3557[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3557 || yy2arr3557 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3579 := z.DecBinary()
	_ = yym3579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3580 := r.ContainerType()
		if yyct3580 == codecSelferValueTypeMap1234 {
			yyl3580 := r.ReadMapStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3580, d)
			}
		} else if yyct3580 == codecSelferValueTypeArray1234 {
			yyl3580 := r.ReadArrayStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3581Slc
	var yyhl3581 bool = l >= 0
	for yyj3581 := 0; ; yyj3581++ {
		if yyhl3581 {
			if yyj3581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3581Slc = r.DecodeBytes(yys3581Slc, true, true)
		yys3581 := string(yys3581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3581)
		} // end switch yys3581
	} // end for yyj3581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3589 int
	var yyb3589 bool
	var yyhl3589 bool = l >= 0
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3589++
		if yyhl3589 {
			yyb3589 = yyj3589 > l
		} else {
			yyb3589 = r.CheckBreak()
		}
		if yyb3589 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3589-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3597 := z.EncBinary()
		_ = yym3597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3598 := !z.EncBinary()
			yy2arr3598 := z.EncBasicHandle().StructToArray
			var yyq3598 [8]bool
			_, _, _ = yysep3598, yyq3598, yy2arr3598
			const yyr3598 bool = false
			yyq3598[0] = x.Kind != ""
			yyq3598[1] = x.APIVersion != ""
			var yynn3598 int
			if yyr3598 || yy2arr3598 {
				r.EncodeArrayStart(8)
			} else {
				yynn3598 = 6
				for _, b := range yyq3598 {
					if b {
						yynn3598++
					}
				}
				r.EncodeMapStart(yynn3598)
				yynn3598 = 0
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[0] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[1] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3606 := z.EncBinary()
				_ = yym3606
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3607 := z.EncBinary()
				_ = yym3607
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3609 := z.EncBinary()
				_ = yym3609
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3610 := z.EncBinary()
				_ = yym3610
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3612 := z.EncBinary()
				_ = yym3612
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3613 := z.EncBinary()
				_ = yym3613
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3615 := z.EncBinary()
				_ = yym3615
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3616 := z.EncBinary()
				_ = yym3616
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3618 := z.EncBinary()
				_ = yym3618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3619 := z.EncBinary()
				_ = yym3619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3622 := z.EncBinary()
					_ = yym3622
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3623 := z.DecBinary()
	_ = yym3623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3624 := r.ContainerType()
		if yyct3624 == codecSelferValueTypeMap1234 {
			yyl3624 := r.ReadMapStart()
			if yyl3624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3624, d)
			}
		} else if yyct3624 == codecSelferValueTypeArray1234 {
			yyl3624 := r.ReadArrayStart()
			if yyl3624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3625Slc
	var yyhl3625 bool = l >= 0
	for yyj3625 := 0; ; yyj3625++ {
		if yyhl3625 {
			if yyj3625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3625Slc = r.DecodeBytes(yys3625Slc, true, true)
		yys3625 := string(yys3625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3625 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3633 := &x.Command
				yym3634 := z.DecBinary()
				_ = yym3634
				if false {
				} else {
					z.F.DecSliceStringX(yyv3633, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3625)
		} // end switch yys3625
	} // end for yyj3625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3635 int
	var yyb3635 bool
	var yyhl3635 bool = l >= 0
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3635++
	if yyhl3635 {
		yyb3635 = yyj3635 > l
	} else {
		yyb3635 = r.CheckBreak()
	}
	if yyb3635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3643 := &x.Command
		yym3644 := z.DecBinary()
		_ = yym3644
		if false {
		} else {
			z.F.DecSliceStringX(yyv3643, false, d)
		}
	}
	for {
		yyj3635++
		if yyhl3635 {
			yyb3635 = yyj3635 > l
		} else {
			yyb3635 = r.CheckBreak()
		}
		if yyb3635 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3635-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3645 := z.EncBinary()
		_ = yym3645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3646 := !z.EncBinary()
			yy2arr3646 := z.EncBasicHandle().StructToArray
			var yyq3646 [3]bool
			_, _, _ = yysep3646, yyq3646, yy2arr3646
			const yyr3646 bool = false
			yyq3646[0] = x.Kind != ""
			yyq3646[1] = x.APIVersion != ""
			var yynn3646 int
			if yyr3646 || yy2arr3646 {
				r.EncodeArrayStart(3)
			} else {
				yynn3646 = 1
				for _, b := range yyq3646 {
					if b {
						yynn3646++
					}
				}
				r.EncodeMapStart(yynn3646)
				yynn3646 = 0
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[0] {
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[1] {
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3654 := z.EncBinary()
				_ = yym3654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3655 := z.EncBinary()
				_ = yym3655
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3656 := z.DecBinary()
	_ = yym3656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3657 := r.ContainerType()
		if yyct3657 == codecSelferValueTypeMap1234 {
			yyl3657 := r.ReadMapStart()
			if yyl3657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3657, d)
			}
		} else if yyct3657 == codecSelferValueTypeArray1234 {
			yyl3657 := r.ReadArrayStart()
			if yyl3657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3658Slc
	var yyhl3658 bool = l >= 0
	for yyj3658 := 0; ; yyj3658++ {
		if yyhl3658 {
			if yyj3658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3658Slc = r.DecodeBytes(yys3658Slc, true, true)
		yys3658 := string(yys3658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3658 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3658)
		} // end switch yys3658
	} // end for yyj3658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3662 int
	var yyb3662 bool
	var yyhl3662 bool = l >= 0
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3662++
		if yyhl3662 {
			yyb3662 = yyj3662 > l
		} else {
			yyb3662 = r.CheckBreak()
		}
		if yyb3662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3666 := z.EncBinary()
		_ = yym3666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3667 := !z.EncBinary()
			yy2arr3667 := z.EncBasicHandle().StructToArray
			var yyq3667 [3]bool
			_, _, _ = yysep3667, yyq3667, yy2arr3667
			const yyr3667 bool = false
			yyq3667[0] = x.Kind != ""
			yyq3667[1] = x.APIVersion != ""
			var yynn3667 int
			if yyr3667 || yy2arr3667 {
				r.EncodeArrayStart(3)
			} else {
				yynn3667 = 1
				for _, b := range yyq3667 {
					if b {
						yynn3667++
					}
				}
				r.EncodeMapStart(yynn3667)
				yynn3667 = 0
			}
			if yyr3667 || yy2arr3667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3667[0] {
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3667[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3667 || yy2arr3667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3667[1] {
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3667[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3673 := z.EncBinary()
					_ = yym3673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3667 || yy2arr3667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3675 := z.EncBinary()
				_ = yym3675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3676 := z.EncBinary()
				_ = yym3676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3667 || yy2arr3667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3677 := z.DecBinary()
	_ = yym3677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3678 := r.ContainerType()
		if yyct3678 == codecSelferValueTypeMap1234 {
			yyl3678 := r.ReadMapStart()
			if yyl3678 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3678, d)
			}
		} else if yyct3678 == codecSelferValueTypeArray1234 {
			yyl3678 := r.ReadArrayStart()
			if yyl3678 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3679Slc
	var yyhl3679 bool = l >= 0
	for yyj3679 := 0; ; yyj3679++ {
		if yyhl3679 {
			if yyj3679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3679Slc = r.DecodeBytes(yys3679Slc, true, true)
		yys3679 := string(yys3679Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3679 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3679)
		} // end switch yys3679
	} // end for yyj3679
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3683 int
	var yyb3683 bool
	var yyhl3683 bool = l >= 0
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3683++
		if yyhl3683 {
			yyb3683 = yyj3683 > l
		} else {
			yyb3683 = r.CheckBreak()
		}
		if yyb3683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3687 := z.EncBinary()
		_ = yym3687
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3688 := !z.EncBinary()
			yy2arr3688 := z.EncBasicHandle().StructToArray
			var yyq3688 [3]bool
			_, _, _ = yysep3688, yyq3688, yy2arr3688
			const yyr3688 bool = false
			yyq3688[0] = x.Kind != ""
			yyq3688[1] = x.APIVersion != ""
			var yynn3688 int
			if yyr3688 || yy2arr3688 {
				r.EncodeArrayStart(3)
			} else {
				yynn3688 = 1
				for _, b := range yyq3688 {
					if b {
						yynn3688++
					}
				}
				r.EncodeMapStart(yynn3688)
				yynn3688 = 0
			}
			if yyr3688 || yy2arr3688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3688[0] {
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3688[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3688 || yy2arr3688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3688[1] {
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3688[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3688 || yy2arr3688 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3696 := z.EncBinary()
				_ = yym3696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3697 := z.EncBinary()
				_ = yym3697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3688 || yy2arr3688 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3698 := z.DecBinary()
	_ = yym3698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3699 := r.ContainerType()
		if yyct3699 == codecSelferValueTypeMap1234 {
			yyl3699 := r.ReadMapStart()
			if yyl3699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3699, d)
			}
		} else if yyct3699 == codecSelferValueTypeArray1234 {
			yyl3699 := r.ReadArrayStart()
			if yyl3699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3700Slc
	var yyhl3700 bool = l >= 0
	for yyj3700 := 0; ; yyj3700++ {
		if yyhl3700 {
			if yyj3700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3700Slc = r.DecodeBytes(yys3700Slc, true, true)
		yys3700 := string(yys3700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3700 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3700)
		} // end switch yys3700
	} // end for yyj3700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3704 int
	var yyb3704 bool
	var yyhl3704 bool = l >= 0
	yyj3704++
	if yyhl3704 {
		yyb3704 = yyj3704 > l
	} else {
		yyb3704 = r.CheckBreak()
	}
	if yyb3704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3704++
	if yyhl3704 {
		yyb3704 = yyj3704 > l
	} else {
		yyb3704 = r.CheckBreak()
	}
	if yyb3704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3704++
	if yyhl3704 {
		yyb3704 = yyj3704 > l
	} else {
		yyb3704 = r.CheckBreak()
	}
	if yyb3704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3704++
		if yyhl3704 {
			yyb3704 = yyj3704 > l
		} else {
			yyb3704 = r.CheckBreak()
		}
		if yyb3704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3708 := z.EncBinary()
		_ = yym3708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3709 := !z.EncBinary()
			yy2arr3709 := z.EncBasicHandle().StructToArray
			var yyq3709 [5]bool
			_, _, _ = yysep3709, yyq3709, yy2arr3709
			const yyr3709 bool = false
			yyq3709[4] = x.Controller != nil
			var yynn3709 int
			if yyr3709 || yy2arr3709 {
				r.EncodeArrayStart(5)
			} else {
				yynn3709 = 4
				for _, b := range yyq3709 {
					if b {
						yynn3709++
					}
				}
				r.EncodeMapStart(yynn3709)
				yynn3709 = 0
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3711 := z.EncBinary()
				_ = yym3711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3712 := z.EncBinary()
				_ = yym3712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3714 := z.EncBinary()
				_ = yym3714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3715 := z.EncBinary()
				_ = yym3715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3717 := z.EncBinary()
				_ = yym3717
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3718 := z.EncBinary()
				_ = yym3718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3720 := z.EncBinary()
				_ = yym3720
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3721 := z.EncBinary()
				_ = yym3721
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3709[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3723 := *x.Controller
						yym3724 := z.EncBinary()
						_ = yym3724
						if false {
						} else {
							r.EncodeBool(bool(yy3723))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3709[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3725 := *x.Controller
						yym3726 := z.EncBinary()
						_ = yym3726
						if false {
						} else {
							r.EncodeBool(bool(yy3725))
						}
					}
				}
			}
			if yyr3709 || yy2arr3709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3727 := z.DecBinary()
	_ = yym3727
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3728 := r.ContainerType()
		if yyct3728 == codecSelferValueTypeMap1234 {
			yyl3728 := r.ReadMapStart()
			if yyl3728 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3728, d)
			}
		} else if yyct3728 == codecSelferValueTypeArray1234 {
			yyl3728 := r.ReadArrayStart()
			if yyl3728 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3728, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3729Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3729Slc
	var yyhl3729 bool = l >= 0
	for yyj3729 := 0; ; yyj3729++ {
		if yyhl3729 {
			if yyj3729 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3729Slc = r.DecodeBytes(yys3729Slc, true, true)
		yys3729 := string(yys3729Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3729 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3735 := z.DecBinary()
				_ = yym3735
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3729)
		} // end switch yys3729
	} // end for yyj3729
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3736 int
	var yyb3736 bool
	var yyhl3736 bool = l >= 0
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3742 := z.DecBinary()
		_ = yym3742
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3736++
		if yyhl3736 {
			yyb3736 = yyj3736 > l
		} else {
			yyb3736 = r.CheckBreak()
		}
		if yyb3736 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3736-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3743 := z.EncBinary()
		_ = yym3743
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3744 := !z.EncBinary()
			yy2arr3744 := z.EncBasicHandle().StructToArray
			var yyq3744 [7]bool
			_, _, _ = yysep3744, yyq3744, yy2arr3744
			const yyr3744 bool = false
			yyq3744[0] = x.Kind != ""
			yyq3744[1] = x.Namespace != ""
			yyq3744[2] = x.Name != ""
			yyq3744[3] = x.UID != ""
			yyq3744[4] = x.APIVersion != ""
			yyq3744[5] = x.ResourceVersion != ""
			yyq3744[6] = x.FieldPath != ""
			var yynn3744 int
			if yyr3744 || yy2arr3744 {
				r.EncodeArrayStart(7)
			} else {
				yynn3744 = 0
				for _, b := range yyq3744 {
					if b {
						yynn3744++
					}
				}
				r.EncodeMapStart(yynn3744)
				yynn3744 = 0
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[0] {
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3747 := z.EncBinary()
					_ = yym3747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[1] {
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[2] {
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[3] {
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[4] {
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[5] {
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3744[6] {
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3744[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3744 || yy2arr3744 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3766 := z.DecBinary()
	_ = yym3766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3767 := r.ContainerType()
		if yyct3767 == codecSelferValueTypeMap1234 {
			yyl3767 := r.ReadMapStart()
			if yyl3767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3767, d)
			}
		} else if yyct3767 == codecSelferValueTypeArray1234 {
			yyl3767 := r.ReadArrayStart()
			if yyl3767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3768Slc
	var yyhl3768 bool = l >= 0
	for yyj3768 := 0; ; yyj3768++ {
		if yyhl3768 {
			if yyj3768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3768Slc = r.DecodeBytes(yys3768Slc, true, true)
		yys3768 := string(yys3768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3768 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3768)
		} // end switch yys3768
	} // end for yyj3768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3776 int
	var yyb3776 bool
	var yyhl3776 bool = l >= 0
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3776++
	if yyhl3776 {
		yyb3776 = yyj3776 > l
	} else {
		yyb3776 = r.CheckBreak()
	}
	if yyb3776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3776++
		if yyhl3776 {
			yyb3776 = yyj3776 > l
		} else {
			yyb3776 = r.CheckBreak()
		}
		if yyb3776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3784 := z.EncBinary()
		_ = yym3784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3785 := !z.EncBinary()
			yy2arr3785 := z.EncBasicHandle().StructToArray
			var yyq3785 [1]bool
			_, _, _ = yysep3785, yyq3785, yy2arr3785
			const yyr3785 bool = false
			var yynn3785 int
			if yyr3785 || yy2arr3785 {
				r.EncodeArrayStart(1)
			} else {
				yynn3785 = 1
				for _, b := range yyq3785 {
					if b {
						yynn3785++
					}
				}
				r.EncodeMapStart(yynn3785)
				yynn3785 = 0
			}
			if yyr3785 || yy2arr3785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3787 := z.EncBinary()
				_ = yym3787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3788 := z.EncBinary()
				_ = yym3788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3785 || yy2arr3785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3789 := z.DecBinary()
	_ = yym3789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3790 := r.ContainerType()
		if yyct3790 == codecSelferValueTypeMap1234 {
			yyl3790 := r.ReadMapStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3790, d)
			}
		} else if yyct3790 == codecSelferValueTypeArray1234 {
			yyl3790 := r.ReadArrayStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3791Slc
	var yyhl3791 bool = l >= 0
	for yyj3791 := 0; ; yyj3791++ {
		if yyhl3791 {
			if yyj3791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3791Slc = r.DecodeBytes(yys3791Slc, true, true)
		yys3791 := string(yys3791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3791 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3791)
		} // end switch yys3791
	} // end for yyj3791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3793 int
	var yyb3793 bool
	var yyhl3793 bool = l >= 0
	yyj3793++
	if yyhl3793 {
		yyb3793 = yyj3793 > l
	} else {
		yyb3793 = r.CheckBreak()
	}
	if yyb3793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3793++
		if yyhl3793 {
			yyb3793 = yyj3793 > l
		} else {
			yyb3793 = r.CheckBreak()
		}
		if yyb3793 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3793-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3795 := z.EncBinary()
		_ = yym3795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3796 := !z.EncBinary()
			yy2arr3796 := z.EncBasicHandle().StructToArray
			var yyq3796 [3]bool
			_, _, _ = yysep3796, yyq3796, yy2arr3796
			const yyr3796 bool = false
			yyq3796[0] = x.Kind != ""
			yyq3796[1] = x.APIVersion != ""
			yyq3796[2] = true
			var yynn3796 int
			if yyr3796 || yy2arr3796 {
				r.EncodeArrayStart(3)
			} else {
				yynn3796 = 0
				for _, b := range yyq3796 {
					if b {
						yynn3796++
					}
				}
				r.EncodeMapStart(yynn3796)
				yynn3796 = 0
			}
			if yyr3796 || yy2arr3796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3796[0] {
					yym3798 := z.EncBinary()
					_ = yym3798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3799 := z.EncBinary()
					_ = yym3799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3796 || yy2arr3796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3796[1] {
					yym3801 := z.EncBinary()
					_ = yym3801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3802 := z.EncBinary()
					_ = yym3802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3796 || yy2arr3796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3796[2] {
					yy3804 := &x.Reference
					yy3804.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3805 := &x.Reference
					yy3805.CodecEncodeSelf(e)
				}
			}
			if yyr3796 || yy2arr3796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3806 := z.DecBinary()
	_ = yym3806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3807 := r.ContainerType()
		if yyct3807 == codecSelferValueTypeMap1234 {
			yyl3807 := r.ReadMapStart()
			if yyl3807 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3807, d)
			}
		} else if yyct3807 == codecSelferValueTypeArray1234 {
			yyl3807 := r.ReadArrayStart()
			if yyl3807 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3807, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3808Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3808Slc
	var yyhl3808 bool = l >= 0
	for yyj3808 := 0; ; yyj3808++ {
		if yyhl3808 {
			if yyj3808 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3808Slc = r.DecodeBytes(yys3808Slc, true, true)
		yys3808 := string(yys3808Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3808 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3811 := &x.Reference
				yyv3811.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3808)
		} // end switch yys3808
	} // end for yyj3808
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3812 int
	var yyb3812 bool
	var yyhl3812 bool = l >= 0
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3815 := &x.Reference
		yyv3815.CodecDecodeSelf(d)
	}
	for {
		yyj3812++
		if yyhl3812 {
			yyb3812 = yyj3812 > l
		} else {
			yyb3812 = r.CheckBreak()
		}
		if yyb3812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3816 := z.EncBinary()
		_ = yym3816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3817 := !z.EncBinary()
			yy2arr3817 := z.EncBasicHandle().StructToArray
			var yyq3817 [2]bool
			_, _, _ = yysep3817, yyq3817, yy2arr3817
			const yyr3817 bool = false
			yyq3817[0] = x.Component != ""
			yyq3817[1] = x.Host != ""
			var yynn3817 int
			if yyr3817 || yy2arr3817 {
				r.EncodeArrayStart(2)
			} else {
				yynn3817 = 0
				for _, b := range yyq3817 {
					if b {
						yynn3817++
					}
				}
				r.EncodeMapStart(yynn3817)
				yynn3817 = 0
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[0] {
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3817[1] {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3817[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3824 := z.DecBinary()
	_ = yym3824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3825 := r.ContainerType()
		if yyct3825 == codecSelferValueTypeMap1234 {
			yyl3825 := r.ReadMapStart()
			if yyl3825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3825, d)
			}
		} else if yyct3825 == codecSelferValueTypeArray1234 {
			yyl3825 := r.ReadArrayStart()
			if yyl3825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3826Slc
	var yyhl3826 bool = l >= 0
	for yyj3826 := 0; ; yyj3826++ {
		if yyhl3826 {
			if yyj3826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3826Slc = r.DecodeBytes(yys3826Slc, true, true)
		yys3826 := string(yys3826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3826 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3826)
		} // end switch yys3826
	} // end for yyj3826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3829 int
	var yyb3829 bool
	var yyhl3829 bool = l >= 0
	yyj3829++
	if yyhl3829 {
		yyb3829 = yyj3829 > l
	} else {
		yyb3829 = r.CheckBreak()
	}
	if yyb3829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3829++
	if yyhl3829 {
		yyb3829 = yyj3829 > l
	} else {
		yyb3829 = r.CheckBreak()
	}
	if yyb3829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3829++
		if yyhl3829 {
			yyb3829 = yyj3829 > l
		} else {
			yyb3829 = r.CheckBreak()
		}
		if yyb3829 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3829-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3832 := z.EncBinary()
		_ = yym3832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3833 := !z.EncBinary()
			yy2arr3833 := z.EncBasicHandle().StructToArray
			var yyq3833 [11]bool
			_, _, _ = yysep3833, yyq3833, yy2arr3833
			const yyr3833 bool = false
			yyq3833[0] = x.Kind != ""
			yyq3833[1] = x.APIVersion != ""
			yyq3833[2] = true
			yyq3833[3] = true
			yyq3833[4] = x.Reason != ""
			yyq3833[5] = x.Message != ""
			yyq3833[6] = true
			yyq3833[7] = true
			yyq3833[8] = true
			yyq3833[9] = x.Count != 0
			yyq3833[10] = x.Type != ""
			var yynn3833 int
			if yyr3833 || yy2arr3833 {
				r.EncodeArrayStart(11)
			} else {
				yynn3833 = 0
				for _, b := range yyq3833 {
					if b {
						yynn3833++
					}
				}
				r.EncodeMapStart(yynn3833)
				yynn3833 = 0
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[0] {
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3836 := z.EncBinary()
					_ = yym3836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[1] {
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[2] {
					yy3841 := &x.ObjectMeta
					yy3841.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3833[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3842 := &x.ObjectMeta
					yy3842.CodecEncodeSelf(e)
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[3] {
					yy3844 := &x.InvolvedObject
					yy3844.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3833[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3845 := &x.InvolvedObject
					yy3845.CodecEncodeSelf(e)
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[4] {
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3848 := z.EncBinary()
					_ = yym3848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[5] {
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3851 := z.EncBinary()
					_ = yym3851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[6] {
					yy3853 := &x.Source
					yy3853.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3833[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3854 := &x.Source
					yy3854.CodecEncodeSelf(e)
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[7] {
					yy3856 := &x.FirstTimestamp
					yym3857 := z.EncBinary()
					_ = yym3857
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3856) {
					} else if yym3857 {
						z.EncBinaryMarshal(yy3856)
					} else if !yym3857 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3856)
					} else {
						z.EncFallback(yy3856)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3833[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3858 := &x.FirstTimestamp
					yym3859 := z.EncBinary()
					_ = yym3859
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3858) {
					} else if yym3859 {
						z.EncBinaryMarshal(yy3858)
					} else if !yym3859 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3858)
					} else {
						z.EncFallback(yy3858)
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[8] {
					yy3861 := &x.LastTimestamp
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3861) {
					} else if yym3862 {
						z.EncBinaryMarshal(yy3861)
					} else if !yym3862 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3861)
					} else {
						z.EncFallback(yy3861)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3833[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3863 := &x.LastTimestamp
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3863) {
					} else if yym3864 {
						z.EncBinaryMarshal(yy3863)
					} else if !yym3864 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3863)
					} else {
						z.EncFallback(yy3863)
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[9] {
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3833[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3833[10] {
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3833[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3870 := z.EncBinary()
					_ = yym3870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3833 || yy2arr3833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3871 := z.DecBinary()
	_ = yym3871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3872 := r.ContainerType()
		if yyct3872 == codecSelferValueTypeMap1234 {
			yyl3872 := r.ReadMapStart()
			if yyl3872 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3872, d)
			}
		} else if yyct3872 == codecSelferValueTypeArray1234 {
			yyl3872 := r.ReadArrayStart()
			if yyl3872 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3873Slc
	var yyhl3873 bool = l >= 0
	for yyj3873 := 0; ; yyj3873++ {
		if yyhl3873 {
			if yyj3873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3873Slc = r.DecodeBytes(yys3873Slc, true, true)
		yys3873 := string(yys3873Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3873 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3876 := &x.ObjectMeta
				yyv3876.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3877 := &x.InvolvedObject
				yyv3877.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3880 := &x.Source
				yyv3880.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3881 := &x.FirstTimestamp
				yym3882 := z.DecBinary()
				_ = yym3882
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3881) {
				} else if yym3882 {
					z.DecBinaryUnmarshal(yyv3881)
				} else if !yym3882 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3881)
				} else {
					z.DecFallback(yyv3881, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3883 := &x.LastTimestamp
				yym3884 := z.DecBinary()
				_ = yym3884
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3883) {
				} else if yym3884 {
					z.DecBinaryUnmarshal(yyv3883)
				} else if !yym3884 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3883)
				} else {
					z.DecFallback(yyv3883, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3873)
		} // end switch yys3873
	} // end for yyj3873
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3887 int
	var yyb3887 bool
	var yyhl3887 bool = l >= 0
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3890 := &x.ObjectMeta
		yyv3890.CodecDecodeSelf(d)
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3891 := &x.InvolvedObject
		yyv3891.CodecDecodeSelf(d)
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3894 := &x.Source
		yyv3894.CodecDecodeSelf(d)
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3895 := &x.FirstTimestamp
		yym3896 := z.DecBinary()
		_ = yym3896
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3895) {
		} else if yym3896 {
			z.DecBinaryUnmarshal(yyv3895)
		} else if !yym3896 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3895)
		} else {
			z.DecFallback(yyv3895, false)
		}
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3897 := &x.LastTimestamp
		yym3898 := z.DecBinary()
		_ = yym3898
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3897) {
		} else if yym3898 {
			z.DecBinaryUnmarshal(yyv3897)
		} else if !yym3898 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3897)
		} else {
			z.DecFallback(yyv3897, false)
		}
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3887++
		if yyhl3887 {
			yyb3887 = yyj3887 > l
		} else {
			yyb3887 = r.CheckBreak()
		}
		if yyb3887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3901 := z.EncBinary()
		_ = yym3901
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3902 := !z.EncBinary()
			yy2arr3902 := z.EncBasicHandle().StructToArray
			var yyq3902 [4]bool
			_, _, _ = yysep3902, yyq3902, yy2arr3902
			const yyr3902 bool = false
			yyq3902[0] = x.Kind != ""
			yyq3902[1] = x.APIVersion != ""
			yyq3902[2] = true
			var yynn3902 int
			if yyr3902 || yy2arr3902 {
				r.EncodeArrayStart(4)
			} else {
				yynn3902 = 1
				for _, b := range yyq3902 {
					if b {
						yynn3902++
					}
				}
				r.EncodeMapStart(yynn3902)
				yynn3902 = 0
			}
			if yyr3902 || yy2arr3902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3902[0] {
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3902[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3905 := z.EncBinary()
					_ = yym3905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3902 || yy2arr3902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3902[1] {
					yym3907 := z.EncBinary()
					_ = yym3907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3902[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3908 := z.EncBinary()
					_ = yym3908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3902 || yy2arr3902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3902[2] {
					yy3910 := &x.ListMeta
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3910) {
					} else {
						z.EncFallback(yy3910)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3902[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3912 := &x.ListMeta
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3912) {
					} else {
						z.EncFallback(yy3912)
					}
				}
			}
			if yyr3902 || yy2arr3902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3902 || yy2arr3902 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3917 := z.DecBinary()
	_ = yym3917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3918 := r.ContainerType()
		if yyct3918 == codecSelferValueTypeMap1234 {
			yyl3918 := r.ReadMapStart()
			if yyl3918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3918, d)
			}
		} else if yyct3918 == codecSelferValueTypeArray1234 {
			yyl3918 := r.ReadArrayStart()
			if yyl3918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3919Slc
	var yyhl3919 bool = l >= 0
	for yyj3919 := 0; ; yyj3919++ {
		if yyhl3919 {
			if yyj3919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3919Slc = r.DecodeBytes(yys3919Slc, true, true)
		yys3919 := string(yys3919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3919 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3922 := &x.ListMeta
				yym3923 := z.DecBinary()
				_ = yym3923
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3922) {
				} else {
					z.DecFallback(yyv3922, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3924 := &x.Items
				yym3925 := z.DecBinary()
				_ = yym3925
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3924), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3919)
		} // end switch yys3919
	} // end for yyj3919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3926 int
	var yyb3926 bool
	var yyhl3926 bool = l >= 0
	yyj3926++
	if yyhl3926 {
		yyb3926 = yyj3926 > l
	} else {
		yyb3926 = r.CheckBreak()
	}
	if yyb3926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3926++
	if yyhl3926 {
		yyb3926 = yyj3926 > l
	} else {
		yyb3926 = r.CheckBreak()
	}
	if yyb3926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3926++
	if yyhl3926 {
		yyb3926 = yyj3926 > l
	} else {
		yyb3926 = r.CheckBreak()
	}
	if yyb3926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3929 := &x.ListMeta
		yym3930 := z.DecBinary()
		_ = yym3930
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3929) {
		} else {
			z.DecFallback(yyv3929, false)
		}
	}
	yyj3926++
	if yyhl3926 {
		yyb3926 = yyj3926 > l
	} else {
		yyb3926 = r.CheckBreak()
	}
	if yyb3926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3931 := &x.Items
		yym3932 := z.DecBinary()
		_ = yym3932
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3931), d)
		}
	}
	for {
		yyj3926++
		if yyhl3926 {
			yyb3926 = yyj3926 > l
		} else {
			yyb3926 = r.CheckBreak()
		}
		if yyb3926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3933 := z.EncBinary()
		_ = yym3933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3934 := !z.EncBinary()
			yy2arr3934 := z.EncBasicHandle().StructToArray
			var yyq3934 [4]bool
			_, _, _ = yysep3934, yyq3934, yy2arr3934
			const yyr3934 bool = false
			yyq3934[0] = x.Kind != ""
			yyq3934[1] = x.APIVersion != ""
			yyq3934[2] = true
			var yynn3934 int
			if yyr3934 || yy2arr3934 {
				r.EncodeArrayStart(4)
			} else {
				yynn3934 = 1
				for _, b := range yyq3934 {
					if b {
						yynn3934++
					}
				}
				r.EncodeMapStart(yynn3934)
				yynn3934 = 0
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3934[0] {
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3934[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3934[1] {
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3934[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3934[2] {
					yy3942 := &x.ListMeta
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3942) {
					} else {
						z.EncFallback(yy3942)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3944 := &x.ListMeta
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3944) {
					} else {
						z.EncFallback(yy3944)
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3949 := z.DecBinary()
	_ = yym3949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3950 := r.ContainerType()
		if yyct3950 == codecSelferValueTypeMap1234 {
			yyl3950 := r.ReadMapStart()
			if yyl3950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3950, d)
			}
		} else if yyct3950 == codecSelferValueTypeArray1234 {
			yyl3950 := r.ReadArrayStart()
			if yyl3950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3951Slc
	var yyhl3951 bool = l >= 0
	for yyj3951 := 0; ; yyj3951++ {
		if yyhl3951 {
			if yyj3951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3951Slc = r.DecodeBytes(yys3951Slc, true, true)
		yys3951 := string(yys3951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3951 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3954 := &x.ListMeta
				yym3955 := z.DecBinary()
				_ = yym3955
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3954) {
				} else {
					z.DecFallback(yyv3954, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3956 := &x.Items
				yym3957 := z.DecBinary()
				_ = yym3957
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3956), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3951)
		} // end switch yys3951
	} // end for yyj3951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3958 int
	var yyb3958 bool
	var yyhl3958 bool = l >= 0
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3961 := &x.ListMeta
		yym3962 := z.DecBinary()
		_ = yym3962
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3961) {
		} else {
			z.DecFallback(yyv3961, false)
		}
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3963 := &x.Items
		yym3964 := z.DecBinary()
		_ = yym3964
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3963), d)
		}
	}
	for {
		yyj3958++
		if yyhl3958 {
			yyb3958 = yyj3958 > l
		} else {
			yyb3958 = r.CheckBreak()
		}
		if yyb3958 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3958-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3965 := z.EncBinary()
	_ = yym3965
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3966 := z.DecBinary()
	_ = yym3966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3967 := z.EncBinary()
		_ = yym3967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3968 := !z.EncBinary()
			yy2arr3968 := z.EncBasicHandle().StructToArray
			var yyq3968 [6]bool
			_, _, _ = yysep3968, yyq3968, yy2arr3968
			const yyr3968 bool = false
			yyq3968[0] = x.Type != ""
			yyq3968[1] = len(x.Max) != 0
			yyq3968[2] = len(x.Min) != 0
			yyq3968[3] = len(x.Default) != 0
			yyq3968[4] = len(x.DefaultRequest) != 0
			yyq3968[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3968 int
			if yyr3968 || yy2arr3968 {
				r.EncodeArrayStart(6)
			} else {
				yynn3968 = 0
				for _, b := range yyq3968 {
					if b {
						yynn3968++
					}
				}
				r.EncodeMapStart(yynn3968)
				yynn3968 = 0
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3968[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3968[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3968[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3968[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3968[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3968[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3968[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3968 || yy2arr3968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3975 := z.DecBinary()
	_ = yym3975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3976 := r.ContainerType()
		if yyct3976 == codecSelferValueTypeMap1234 {
			yyl3976 := r.ReadMapStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3976, d)
			}
		} else if yyct3976 == codecSelferValueTypeArray1234 {
			yyl3976 := r.ReadArrayStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3977Slc
	var yyhl3977 bool = l >= 0
	for yyj3977 := 0; ; yyj3977++ {
		if yyhl3977 {
			if yyj3977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3977Slc = r.DecodeBytes(yys3977Slc, true, true)
		yys3977 := string(yys3977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3977 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3979 := &x.Max
				yyv3979.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3980 := &x.Min
				yyv3980.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3981 := &x.Default
				yyv3981.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3982 := &x.DefaultRequest
				yyv3982.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3983 := &x.MaxLimitRequestRatio
				yyv3983.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3977)
		} // end switch yys3977
	} // end for yyj3977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3984 int
	var yyb3984 bool
	var yyhl3984 bool = l >= 0
	yyj3984++
	if yyhl3984 {
		yyb3984 = yyj3984 > l
	} else {
		yyb3984 = r.CheckBreak()
	}
	if yyb3984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3984++
	if yyhl3984 {
		yyb3984 = yyj3984 > l
	} else {
		yyb3984 = r.CheckBreak()
	}
	if yyb3984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3986 := &x.Max
		yyv3986.CodecDecodeSelf(d)
	}
	yyj3984++
	if yyhl3984 {
		yyb3984 = yyj3984 > l
	} else {
		yyb3984 = r.CheckBreak()
	}
	if yyb3984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3987 := &x.Min
		yyv3987.CodecDecodeSelf(d)
	}
	yyj3984++
	if yyhl3984 {
		yyb3984 = yyj3984 > l
	} else {
		yyb3984 = r.CheckBreak()
	}
	if yyb3984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3988 := &x.Default
		yyv3988.CodecDecodeSelf(d)
	}
	yyj3984++
	if yyhl3984 {
		yyb3984 = yyj3984 > l
	} else {
		yyb3984 = r.CheckBreak()
	}
	if yyb3984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3989 := &x.DefaultRequest
		yyv3989.CodecDecodeSelf(d)
	}
	yyj3984++
	if yyhl3984 {
		yyb3984 = yyj3984 > l
	} else {
		yyb3984 = r.CheckBreak()
	}
	if yyb3984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3990 := &x.MaxLimitRequestRatio
		yyv3990.CodecDecodeSelf(d)
	}
	for {
		yyj3984++
		if yyhl3984 {
			yyb3984 = yyj3984 > l
		} else {
			yyb3984 = r.CheckBreak()
		}
		if yyb3984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3991 := z.EncBinary()
		_ = yym3991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3992 := !z.EncBinary()
			yy2arr3992 := z.EncBasicHandle().StructToArray
			var yyq3992 [1]bool
			_, _, _ = yysep3992, yyq3992, yy2arr3992
			const yyr3992 bool = false
			var yynn3992 int
			if yyr3992 || yy2arr3992 {
				r.EncodeArrayStart(1)
			} else {
				yynn3992 = 1
				for _, b := range yyq3992 {
					if b {
						yynn3992++
					}
				}
				r.EncodeMapStart(yynn3992)
				yynn3992 = 0
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3996 := z.DecBinary()
	_ = yym3996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3997 := r.ContainerType()
		if yyct3997 == codecSelferValueTypeMap1234 {
			yyl3997 := r.ReadMapStart()
			if yyl3997 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3997, d)
			}
		} else if yyct3997 == codecSelferValueTypeArray1234 {
			yyl3997 := r.ReadArrayStart()
			if yyl3997 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3997, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3998Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3998Slc
	var yyhl3998 bool = l >= 0
	for yyj3998 := 0; ; yyj3998++ {
		if yyhl3998 {
			if yyj3998 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3998Slc = r.DecodeBytes(yys3998Slc, true, true)
		yys3998 := string(yys3998Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3998 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3999 := &x.Limits
				yym4000 := z.DecBinary()
				_ = yym4000
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3999), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3998)
		} // end switch yys3998
	} // end for yyj3998
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4001 int
	var yyb4001 bool
	var yyhl4001 bool = l >= 0
	yyj4001++
	if yyhl4001 {
		yyb4001 = yyj4001 > l
	} else {
		yyb4001 = r.CheckBreak()
	}
	if yyb4001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4002 := &x.Limits
		yym4003 := z.DecBinary()
		_ = yym4003
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4002), d)
		}
	}
	for {
		yyj4001++
		if yyhl4001 {
			yyb4001 = yyj4001 > l
		} else {
			yyb4001 = r.CheckBreak()
		}
		if yyb4001 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4001-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4004 := z.EncBinary()
		_ = yym4004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4005 := !z.EncBinary()
			yy2arr4005 := z.EncBasicHandle().StructToArray
			var yyq4005 [4]bool
			_, _, _ = yysep4005, yyq4005, yy2arr4005
			const yyr4005 bool = false
			yyq4005[0] = x.Kind != ""
			yyq4005[1] = x.APIVersion != ""
			yyq4005[2] = true
			yyq4005[3] = true
			var yynn4005 int
			if yyr4005 || yy2arr4005 {
				r.EncodeArrayStart(4)
			} else {
				yynn4005 = 0
				for _, b := range yyq4005 {
					if b {
						yynn4005++
					}
				}
				r.EncodeMapStart(yynn4005)
				yynn4005 = 0
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[0] {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4005[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[1] {
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4005[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[2] {
					yy4013 := &x.ObjectMeta
					yy4013.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4005[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4014 := &x.ObjectMeta
					yy4014.CodecEncodeSelf(e)
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[3] {
					yy4016 := &x.Spec
					yy4016.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4005[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4017 := &x.Spec
					yy4017.CodecEncodeSelf(e)
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4018 := z.DecBinary()
	_ = yym4018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4019 := r.ContainerType()
		if yyct4019 == codecSelferValueTypeMap1234 {
			yyl4019 := r.ReadMapStart()
			if yyl4019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4019, d)
			}
		} else if yyct4019 == codecSelferValueTypeArray1234 {
			yyl4019 := r.ReadArrayStart()
			if yyl4019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4020Slc
	var yyhl4020 bool = l >= 0
	for yyj4020 := 0; ; yyj4020++ {
		if yyhl4020 {
			if yyj4020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4020Slc = r.DecodeBytes(yys4020Slc, true, true)
		yys4020 := string(yys4020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4020 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4023 := &x.ObjectMeta
				yyv4023.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4024 := &x.Spec
				yyv4024.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4020)
		} // end switch yys4020
	} // end for yyj4020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4025 int
	var yyb4025 bool
	var yyhl4025 bool = l >= 0
	yyj4025++
	if yyhl4025 {
		yyb4025 = yyj4025 > l
	} else {
		yyb4025 = r.CheckBreak()
	}
	if yyb4025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4025++
	if yyhl4025 {
		yyb4025 = yyj4025 > l
	} else {
		yyb4025 = r.CheckBreak()
	}
	if yyb4025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4025++
	if yyhl4025 {
		yyb4025 = yyj4025 > l
	} else {
		yyb4025 = r.CheckBreak()
	}
	if yyb4025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4028 := &x.ObjectMeta
		yyv4028.CodecDecodeSelf(d)
	}
	yyj4025++
	if yyhl4025 {
		yyb4025 = yyj4025 > l
	} else {
		yyb4025 = r.CheckBreak()
	}
	if yyb4025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4029 := &x.Spec
		yyv4029.CodecDecodeSelf(d)
	}
	for {
		yyj4025++
		if yyhl4025 {
			yyb4025 = yyj4025 > l
		} else {
			yyb4025 = r.CheckBreak()
		}
		if yyb4025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4030 := z.EncBinary()
		_ = yym4030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4031 := !z.EncBinary()
			yy2arr4031 := z.EncBasicHandle().StructToArray
			var yyq4031 [4]bool
			_, _, _ = yysep4031, yyq4031, yy2arr4031
			const yyr4031 bool = false
			yyq4031[0] = x.Kind != ""
			yyq4031[1] = x.APIVersion != ""
			yyq4031[2] = true
			var yynn4031 int
			if yyr4031 || yy2arr4031 {
				r.EncodeArrayStart(4)
			} else {
				yynn4031 = 1
				for _, b := range yyq4031 {
					if b {
						yynn4031++
					}
				}
				r.EncodeMapStart(yynn4031)
				yynn4031 = 0
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4031[0] {
					yym4033 := z.EncBinary()
					_ = yym4033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4034 := z.EncBinary()
					_ = yym4034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4031[1] {
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4031[2] {
					yy4039 := &x.ListMeta
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4039) {
					} else {
						z.EncFallback(yy4039)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4031[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4041 := &x.ListMeta
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4041) {
					} else {
						z.EncFallback(yy4041)
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4045 := z.EncBinary()
					_ = yym4045
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4046 := z.DecBinary()
	_ = yym4046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4047 := r.ContainerType()
		if yyct4047 == codecSelferValueTypeMap1234 {
			yyl4047 := r.ReadMapStart()
			if yyl4047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4047, d)
			}
		} else if yyct4047 == codecSelferValueTypeArray1234 {
			yyl4047 := r.ReadArrayStart()
			if yyl4047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4048Slc
	var yyhl4048 bool = l >= 0
	for yyj4048 := 0; ; yyj4048++ {
		if yyhl4048 {
			if yyj4048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4048Slc = r.DecodeBytes(yys4048Slc, true, true)
		yys4048 := string(yys4048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4048 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4051 := &x.ListMeta
				yym4052 := z.DecBinary()
				_ = yym4052
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4051) {
				} else {
					z.DecFallback(yyv4051, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4053 := &x.Items
				yym4054 := z.DecBinary()
				_ = yym4054
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4053), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4048)
		} // end switch yys4048
	} // end for yyj4048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4055 int
	var yyb4055 bool
	var yyhl4055 bool = l >= 0
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4058 := &x.ListMeta
		yym4059 := z.DecBinary()
		_ = yym4059
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4058) {
		} else {
			z.DecFallback(yyv4058, false)
		}
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4060 := &x.Items
		yym4061 := z.DecBinary()
		_ = yym4061
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4060), d)
		}
	}
	for {
		yyj4055++
		if yyhl4055 {
			yyb4055 = yyj4055 > l
		} else {
			yyb4055 = r.CheckBreak()
		}
		if yyb4055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4062 := z.EncBinary()
	_ = yym4062
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4063 := z.DecBinary()
	_ = yym4063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4064 := z.EncBinary()
		_ = yym4064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4065 := !z.EncBinary()
			yy2arr4065 := z.EncBasicHandle().StructToArray
			var yyq4065 [2]bool
			_, _, _ = yysep4065, yyq4065, yy2arr4065
			const yyr4065 bool = false
			yyq4065[0] = len(x.Hard) != 0
			yyq4065[1] = len(x.Scopes) != 0
			var yynn4065 int
			if yyr4065 || yy2arr4065 {
				r.EncodeArrayStart(2)
			} else {
				yynn4065 = 0
				for _, b := range yyq4065 {
					if b {
						yynn4065++
					}
				}
				r.EncodeMapStart(yynn4065)
				yynn4065 = 0
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4065[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4065[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4068 := z.EncBinary()
						_ = yym4068
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4065[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4069 := z.EncBinary()
						_ = yym4069
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4065 || yy2arr4065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4070 := z.DecBinary()
	_ = yym4070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4071 := r.ContainerType()
		if yyct4071 == codecSelferValueTypeMap1234 {
			yyl4071 := r.ReadMapStart()
			if yyl4071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4071, d)
			}
		} else if yyct4071 == codecSelferValueTypeArray1234 {
			yyl4071 := r.ReadArrayStart()
			if yyl4071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4072Slc
	var yyhl4072 bool = l >= 0
	for yyj4072 := 0; ; yyj4072++ {
		if yyhl4072 {
			if yyj4072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4072Slc = r.DecodeBytes(yys4072Slc, true, true)
		yys4072 := string(yys4072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4072 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4073 := &x.Hard
				yyv4073.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4074 := &x.Scopes
				yym4075 := z.DecBinary()
				_ = yym4075
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4074), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4072)
		} // end switch yys4072
	} // end for yyj4072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4076 int
	var yyb4076 bool
	var yyhl4076 bool = l >= 0
	yyj4076++
	if yyhl4076 {
		yyb4076 = yyj4076 > l
	} else {
		yyb4076 = r.CheckBreak()
	}
	if yyb4076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4077 := &x.Hard
		yyv4077.CodecDecodeSelf(d)
	}
	yyj4076++
	if yyhl4076 {
		yyb4076 = yyj4076 > l
	} else {
		yyb4076 = r.CheckBreak()
	}
	if yyb4076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4078 := &x.Scopes
		yym4079 := z.DecBinary()
		_ = yym4079
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4078), d)
		}
	}
	for {
		yyj4076++
		if yyhl4076 {
			yyb4076 = yyj4076 > l
		} else {
			yyb4076 = r.CheckBreak()
		}
		if yyb4076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4080 := z.EncBinary()
		_ = yym4080
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4081 := !z.EncBinary()
			yy2arr4081 := z.EncBasicHandle().StructToArray
			var yyq4081 [2]bool
			_, _, _ = yysep4081, yyq4081, yy2arr4081
			const yyr4081 bool = false
			yyq4081[0] = len(x.Hard) != 0
			yyq4081[1] = len(x.Used) != 0
			var yynn4081 int
			if yyr4081 || yy2arr4081 {
				r.EncodeArrayStart(2)
			} else {
				yynn4081 = 0
				for _, b := range yyq4081 {
					if b {
						yynn4081++
					}
				}
				r.EncodeMapStart(yynn4081)
				yynn4081 = 0
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4081[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4081[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4081[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4081 || yy2arr4081 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4084 := z.DecBinary()
	_ = yym4084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4085 := r.ContainerType()
		if yyct4085 == codecSelferValueTypeMap1234 {
			yyl4085 := r.ReadMapStart()
			if yyl4085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4085, d)
			}
		} else if yyct4085 == codecSelferValueTypeArray1234 {
			yyl4085 := r.ReadArrayStart()
			if yyl4085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4086Slc
	var yyhl4086 bool = l >= 0
	for yyj4086 := 0; ; yyj4086++ {
		if yyhl4086 {
			if yyj4086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4086Slc = r.DecodeBytes(yys4086Slc, true, true)
		yys4086 := string(yys4086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4086 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4087 := &x.Hard
				yyv4087.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4088 := &x.Used
				yyv4088.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4086)
		} // end switch yys4086
	} // end for yyj4086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4089 int
	var yyb4089 bool
	var yyhl4089 bool = l >= 0
	yyj4089++
	if yyhl4089 {
		yyb4089 = yyj4089 > l
	} else {
		yyb4089 = r.CheckBreak()
	}
	if yyb4089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4090 := &x.Hard
		yyv4090.CodecDecodeSelf(d)
	}
	yyj4089++
	if yyhl4089 {
		yyb4089 = yyj4089 > l
	} else {
		yyb4089 = r.CheckBreak()
	}
	if yyb4089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4091 := &x.Used
		yyv4091.CodecDecodeSelf(d)
	}
	for {
		yyj4089++
		if yyhl4089 {
			yyb4089 = yyj4089 > l
		} else {
			yyb4089 = r.CheckBreak()
		}
		if yyb4089 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4089-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4092 := z.EncBinary()
		_ = yym4092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4093 := !z.EncBinary()
			yy2arr4093 := z.EncBasicHandle().StructToArray
			var yyq4093 [5]bool
			_, _, _ = yysep4093, yyq4093, yy2arr4093
			const yyr4093 bool = false
			yyq4093[0] = x.Kind != ""
			yyq4093[1] = x.APIVersion != ""
			yyq4093[2] = true
			yyq4093[3] = true
			yyq4093[4] = true
			var yynn4093 int
			if yyr4093 || yy2arr4093 {
				r.EncodeArrayStart(5)
			} else {
				yynn4093 = 0
				for _, b := range yyq4093 {
					if b {
						yynn4093++
					}
				}
				r.EncodeMapStart(yynn4093)
				yynn4093 = 0
			}
			if yyr4093 || yy2arr4093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4093[0] {
					yym4095 := z.EncBinary()
					_ = yym4095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4093[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4096 := z.EncBinary()
					_ = yym4096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4093 || yy2arr4093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4093[1] {
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4093[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4093 || yy2arr4093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4093[2] {
					yy4101 := &x.ObjectMeta
					yy4101.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4093[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4102 := &x.ObjectMeta
					yy4102.CodecEncodeSelf(e)
				}
			}
			if yyr4093 || yy2arr4093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4093[3] {
					yy4104 := &x.Spec
					yy4104.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4093[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4105 := &x.Spec
					yy4105.CodecEncodeSelf(e)
				}
			}
			if yyr4093 || yy2arr4093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4093[4] {
					yy4107 := &x.Status
					yy4107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4093[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4108 := &x.Status
					yy4108.CodecEncodeSelf(e)
				}
			}
			if yyr4093 || yy2arr4093 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4109 := z.DecBinary()
	_ = yym4109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4110 := r.ContainerType()
		if yyct4110 == codecSelferValueTypeMap1234 {
			yyl4110 := r.ReadMapStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4110, d)
			}
		} else if yyct4110 == codecSelferValueTypeArray1234 {
			yyl4110 := r.ReadArrayStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4111Slc
	var yyhl4111 bool = l >= 0
	for yyj4111 := 0; ; yyj4111++ {
		if yyhl4111 {
			if yyj4111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4111Slc = r.DecodeBytes(yys4111Slc, true, true)
		yys4111 := string(yys4111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4114 := &x.ObjectMeta
				yyv4114.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4115 := &x.Spec
				yyv4115.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4116 := &x.Status
				yyv4116.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4111)
		} // end switch yys4111
	} // end for yyj4111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4117 int
	var yyb4117 bool
	var yyhl4117 bool = l >= 0
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4120 := &x.ObjectMeta
		yyv4120.CodecDecodeSelf(d)
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4121 := &x.Spec
		yyv4121.CodecDecodeSelf(d)
	}
	yyj4117++
	if yyhl4117 {
		yyb4117 = yyj4117 > l
	} else {
		yyb4117 = r.CheckBreak()
	}
	if yyb4117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4122 := &x.Status
		yyv4122.CodecDecodeSelf(d)
	}
	for {
		yyj4117++
		if yyhl4117 {
			yyb4117 = yyj4117 > l
		} else {
			yyb4117 = r.CheckBreak()
		}
		if yyb4117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4123 := z.EncBinary()
		_ = yym4123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4124 := !z.EncBinary()
			yy2arr4124 := z.EncBasicHandle().StructToArray
			var yyq4124 [4]bool
			_, _, _ = yysep4124, yyq4124, yy2arr4124
			const yyr4124 bool = false
			yyq4124[0] = x.Kind != ""
			yyq4124[1] = x.APIVersion != ""
			yyq4124[2] = true
			var yynn4124 int
			if yyr4124 || yy2arr4124 {
				r.EncodeArrayStart(4)
			} else {
				yynn4124 = 1
				for _, b := range yyq4124 {
					if b {
						yynn4124++
					}
				}
				r.EncodeMapStart(yynn4124)
				yynn4124 = 0
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[0] {
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[1] {
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4124[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4130 := z.EncBinary()
					_ = yym4130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[2] {
					yy4132 := &x.ListMeta
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4132) {
					} else {
						z.EncFallback(yy4132)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4124[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4134 := &x.ListMeta
					yym4135 := z.EncBinary()
					_ = yym4135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4134) {
					} else {
						z.EncFallback(yy4134)
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4138 := z.EncBinary()
					_ = yym4138
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4139 := z.DecBinary()
	_ = yym4139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4140 := r.ContainerType()
		if yyct4140 == codecSelferValueTypeMap1234 {
			yyl4140 := r.ReadMapStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4140, d)
			}
		} else if yyct4140 == codecSelferValueTypeArray1234 {
			yyl4140 := r.ReadArrayStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4141Slc
	var yyhl4141 bool = l >= 0
	for yyj4141 := 0; ; yyj4141++ {
		if yyhl4141 {
			if yyj4141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4141Slc = r.DecodeBytes(yys4141Slc, true, true)
		yys4141 := string(yys4141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4141 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4144 := &x.ListMeta
				yym4145 := z.DecBinary()
				_ = yym4145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4144) {
				} else {
					z.DecFallback(yyv4144, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4146 := &x.Items
				yym4147 := z.DecBinary()
				_ = yym4147
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4146), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4141)
		} // end switch yys4141
	} // end for yyj4141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4148 int
	var yyb4148 bool
	var yyhl4148 bool = l >= 0
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4151 := &x.ListMeta
		yym4152 := z.DecBinary()
		_ = yym4152
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4151) {
		} else {
			z.DecFallback(yyv4151, false)
		}
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4153 := &x.Items
		yym4154 := z.DecBinary()
		_ = yym4154
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4153), d)
		}
	}
	for {
		yyj4148++
		if yyhl4148 {
			yyb4148 = yyj4148 > l
		} else {
			yyb4148 = r.CheckBreak()
		}
		if yyb4148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4155 := z.EncBinary()
		_ = yym4155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4156 := !z.EncBinary()
			yy2arr4156 := z.EncBasicHandle().StructToArray
			var yyq4156 [5]bool
			_, _, _ = yysep4156, yyq4156, yy2arr4156
			const yyr4156 bool = false
			yyq4156[0] = x.Kind != ""
			yyq4156[1] = x.APIVersion != ""
			yyq4156[2] = true
			yyq4156[3] = len(x.Data) != 0
			yyq4156[4] = x.Type != ""
			var yynn4156 int
			if yyr4156 || yy2arr4156 {
				r.EncodeArrayStart(5)
			} else {
				yynn4156 = 0
				for _, b := range yyq4156 {
					if b {
						yynn4156++
					}
				}
				r.EncodeMapStart(yynn4156)
				yynn4156 = 0
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[0] {
					yym4158 := z.EncBinary()
					_ = yym4158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4159 := z.EncBinary()
					_ = yym4159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[1] {
					yym4161 := z.EncBinary()
					_ = yym4161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4162 := z.EncBinary()
					_ = yym4162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[2] {
					yy4164 := &x.ObjectMeta
					yy4164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4165 := &x.ObjectMeta
					yy4165.CodecEncodeSelf(e)
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4167 := z.EncBinary()
						_ = yym4167
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4168 := z.EncBinary()
						_ = yym4168
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4170 := z.DecBinary()
	_ = yym4170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4171 := r.ContainerType()
		if yyct4171 == codecSelferValueTypeMap1234 {
			yyl4171 := r.ReadMapStart()
			if yyl4171 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4171, d)
			}
		} else if yyct4171 == codecSelferValueTypeArray1234 {
			yyl4171 := r.ReadArrayStart()
			if yyl4171 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4171, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4172Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4172Slc
	var yyhl4172 bool = l >= 0
	for yyj4172 := 0; ; yyj4172++ {
		if yyhl4172 {
			if yyj4172 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4172Slc = r.DecodeBytes(yys4172Slc, true, true)
		yys4172 := string(yys4172Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4172 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4175 := &x.ObjectMeta
				yyv4175.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4176 := &x.Data
				yym4177 := z.DecBinary()
				_ = yym4177
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4176), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4172)
		} // end switch yys4172
	} // end for yyj4172
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4179 int
	var yyb4179 bool
	var yyhl4179 bool = l >= 0
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4182 := &x.ObjectMeta
		yyv4182.CodecDecodeSelf(d)
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4183 := &x.Data
		yym4184 := z.DecBinary()
		_ = yym4184
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4183), d)
		}
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4179++
		if yyhl4179 {
			yyb4179 = yyj4179 > l
		} else {
			yyb4179 = r.CheckBreak()
		}
		if yyb4179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4186 := z.EncBinary()
	_ = yym4186
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4187 := z.DecBinary()
	_ = yym4187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4188 := z.EncBinary()
		_ = yym4188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4189 := !z.EncBinary()
			yy2arr4189 := z.EncBasicHandle().StructToArray
			var yyq4189 [4]bool
			_, _, _ = yysep4189, yyq4189, yy2arr4189
			const yyr4189 bool = false
			yyq4189[0] = x.Kind != ""
			yyq4189[1] = x.APIVersion != ""
			yyq4189[2] = true
			var yynn4189 int
			if yyr4189 || yy2arr4189 {
				r.EncodeArrayStart(4)
			} else {
				yynn4189 = 1
				for _, b := range yyq4189 {
					if b {
						yynn4189++
					}
				}
				r.EncodeMapStart(yynn4189)
				yynn4189 = 0
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[0] {
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4189[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[1] {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4189[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[2] {
					yy4197 := &x.ListMeta
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4197) {
					} else {
						z.EncFallback(yy4197)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4189[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4199 := &x.ListMeta
					yym4200 := z.EncBinary()
					_ = yym4200
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4199) {
					} else {
						z.EncFallback(yy4199)
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4202 := z.EncBinary()
					_ = yym4202
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4203 := z.EncBinary()
					_ = yym4203
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4204 := z.DecBinary()
	_ = yym4204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4205 := r.ContainerType()
		if yyct4205 == codecSelferValueTypeMap1234 {
			yyl4205 := r.ReadMapStart()
			if yyl4205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4205, d)
			}
		} else if yyct4205 == codecSelferValueTypeArray1234 {
			yyl4205 := r.ReadArrayStart()
			if yyl4205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4206Slc
	var yyhl4206 bool = l >= 0
	for yyj4206 := 0; ; yyj4206++ {
		if yyhl4206 {
			if yyj4206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4206Slc = r.DecodeBytes(yys4206Slc, true, true)
		yys4206 := string(yys4206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4209 := &x.ListMeta
				yym4210 := z.DecBinary()
				_ = yym4210
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4209) {
				} else {
					z.DecFallback(yyv4209, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4211 := &x.Items
				yym4212 := z.DecBinary()
				_ = yym4212
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4211), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4206)
		} // end switch yys4206
	} // end for yyj4206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4213 int
	var yyb4213 bool
	var yyhl4213 bool = l >= 0
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4216 := &x.ListMeta
		yym4217 := z.DecBinary()
		_ = yym4217
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4216) {
		} else {
			z.DecFallback(yyv4216, false)
		}
	}
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4218 := &x.Items
		yym4219 := z.DecBinary()
		_ = yym4219
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4218), d)
		}
	}
	for {
		yyj4213++
		if yyhl4213 {
			yyb4213 = yyj4213 > l
		} else {
			yyb4213 = r.CheckBreak()
		}
		if yyb4213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4220 := z.EncBinary()
		_ = yym4220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4221 := !z.EncBinary()
			yy2arr4221 := z.EncBasicHandle().StructToArray
			var yyq4221 [4]bool
			_, _, _ = yysep4221, yyq4221, yy2arr4221
			const yyr4221 bool = false
			yyq4221[0] = x.Kind != ""
			yyq4221[1] = x.APIVersion != ""
			yyq4221[2] = true
			yyq4221[3] = len(x.Data) != 0
			var yynn4221 int
			if yyr4221 || yy2arr4221 {
				r.EncodeArrayStart(4)
			} else {
				yynn4221 = 0
				for _, b := range yyq4221 {
					if b {
						yynn4221++
					}
				}
				r.EncodeMapStart(yynn4221)
				yynn4221 = 0
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[0] {
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[1] {
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4227 := z.EncBinary()
					_ = yym4227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[2] {
					yy4229 := &x.ObjectMeta
					yy4229.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4230 := &x.ObjectMeta
					yy4230.CodecEncodeSelf(e)
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4232 := z.EncBinary()
						_ = yym4232
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4221[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4233 := z.EncBinary()
						_ = yym4233
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4234 := z.DecBinary()
	_ = yym4234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4235 := r.ContainerType()
		if yyct4235 == codecSelferValueTypeMap1234 {
			yyl4235 := r.ReadMapStart()
			if yyl4235 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4235, d)
			}
		} else if yyct4235 == codecSelferValueTypeArray1234 {
			yyl4235 := r.ReadArrayStart()
			if yyl4235 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4236Slc
	var yyhl4236 bool = l >= 0
	for yyj4236 := 0; ; yyj4236++ {
		if yyhl4236 {
			if yyj4236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4236Slc = r.DecodeBytes(yys4236Slc, true, true)
		yys4236 := string(yys4236Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4236 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4239 := &x.ObjectMeta
				yyv4239.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4240 := &x.Data
				yym4241 := z.DecBinary()
				_ = yym4241
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4240, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4236)
		} // end switch yys4236
	} // end for yyj4236
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4242 int
	var yyb4242 bool
	var yyhl4242 bool = l >= 0
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4245 := &x.ObjectMeta
		yyv4245.CodecDecodeSelf(d)
	}
	yyj4242++
	if yyhl4242 {
		yyb4242 = yyj4242 > l
	} else {
		yyb4242 = r.CheckBreak()
	}
	if yyb4242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4246 := &x.Data
		yym4247 := z.DecBinary()
		_ = yym4247
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4246, false, d)
		}
	}
	for {
		yyj4242++
		if yyhl4242 {
			yyb4242 = yyj4242 > l
		} else {
			yyb4242 = r.CheckBreak()
		}
		if yyb4242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4248 := z.EncBinary()
		_ = yym4248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4249 := !z.EncBinary()
			yy2arr4249 := z.EncBasicHandle().StructToArray
			var yyq4249 [4]bool
			_, _, _ = yysep4249, yyq4249, yy2arr4249
			const yyr4249 bool = false
			yyq4249[0] = x.Kind != ""
			yyq4249[1] = x.APIVersion != ""
			yyq4249[2] = true
			var yynn4249 int
			if yyr4249 || yy2arr4249 {
				r.EncodeArrayStart(4)
			} else {
				yynn4249 = 1
				for _, b := range yyq4249 {
					if b {
						yynn4249++
					}
				}
				r.EncodeMapStart(yynn4249)
				yynn4249 = 0
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[0] {
					yym4251 := z.EncBinary()
					_ = yym4251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4252 := z.EncBinary()
					_ = yym4252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[1] {
					yym4254 := z.EncBinary()
					_ = yym4254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4255 := z.EncBinary()
					_ = yym4255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[2] {
					yy4257 := &x.ListMeta
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4257) {
					} else {
						z.EncFallback(yy4257)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4259 := &x.ListMeta
					yym4260 := z.EncBinary()
					_ = yym4260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4259) {
					} else {
						z.EncFallback(yy4259)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4262 := z.EncBinary()
					_ = yym4262
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4263 := z.EncBinary()
					_ = yym4263
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4264 := z.DecBinary()
	_ = yym4264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4265 := r.ContainerType()
		if yyct4265 == codecSelferValueTypeMap1234 {
			yyl4265 := r.ReadMapStart()
			if yyl4265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4265, d)
			}
		} else if yyct4265 == codecSelferValueTypeArray1234 {
			yyl4265 := r.ReadArrayStart()
			if yyl4265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4266Slc
	var yyhl4266 bool = l >= 0
	for yyj4266 := 0; ; yyj4266++ {
		if yyhl4266 {
			if yyj4266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4266Slc = r.DecodeBytes(yys4266Slc, true, true)
		yys4266 := string(yys4266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4266 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4269 := &x.ListMeta
				yym4270 := z.DecBinary()
				_ = yym4270
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4269) {
				} else {
					z.DecFallback(yyv4269, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4271 := &x.Items
				yym4272 := z.DecBinary()
				_ = yym4272
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4271), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4266)
		} // end switch yys4266
	} // end for yyj4266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4273 int
	var yyb4273 bool
	var yyhl4273 bool = l >= 0
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4276 := &x.ListMeta
		yym4277 := z.DecBinary()
		_ = yym4277
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4276) {
		} else {
			z.DecFallback(yyv4276, false)
		}
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4278 := &x.Items
		yym4279 := z.DecBinary()
		_ = yym4279
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4278), d)
		}
	}
	for {
		yyj4273++
		if yyhl4273 {
			yyb4273 = yyj4273 > l
		} else {
			yyb4273 = r.CheckBreak()
		}
		if yyb4273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4280 := z.EncBinary()
	_ = yym4280
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4281 := z.DecBinary()
	_ = yym4281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4282 := z.EncBinary()
	_ = yym4282
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4283 := z.DecBinary()
	_ = yym4283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4284 := z.EncBinary()
		_ = yym4284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4285 := !z.EncBinary()
			yy2arr4285 := z.EncBasicHandle().StructToArray
			var yyq4285 [4]bool
			_, _, _ = yysep4285, yyq4285, yy2arr4285
			const yyr4285 bool = false
			yyq4285[2] = x.Message != ""
			yyq4285[3] = x.Error != ""
			var yynn4285 int
			if yyr4285 || yy2arr4285 {
				r.EncodeArrayStart(4)
			} else {
				yynn4285 = 2
				for _, b := range yyq4285 {
					if b {
						yynn4285++
					}
				}
				r.EncodeMapStart(yynn4285)
				yynn4285 = 0
			}
			if yyr4285 || yy2arr4285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4285 || yy2arr4285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4285 || yy2arr4285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4285[2] {
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4285[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4290 := z.EncBinary()
					_ = yym4290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4285 || yy2arr4285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4285[3] {
					yym4292 := z.EncBinary()
					_ = yym4292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4285[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4293 := z.EncBinary()
					_ = yym4293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4285 || yy2arr4285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4294 := z.DecBinary()
	_ = yym4294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4295 := r.ContainerType()
		if yyct4295 == codecSelferValueTypeMap1234 {
			yyl4295 := r.ReadMapStart()
			if yyl4295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4295, d)
			}
		} else if yyct4295 == codecSelferValueTypeArray1234 {
			yyl4295 := r.ReadArrayStart()
			if yyl4295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4296Slc
	var yyhl4296 bool = l >= 0
	for yyj4296 := 0; ; yyj4296++ {
		if yyhl4296 {
			if yyj4296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4296Slc = r.DecodeBytes(yys4296Slc, true, true)
		yys4296 := string(yys4296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4296 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4296)
		} // end switch yys4296
	} // end for yyj4296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4301 int
	var yyb4301 bool
	var yyhl4301 bool = l >= 0
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4301++
		if yyhl4301 {
			yyb4301 = yyj4301 > l
		} else {
			yyb4301 = r.CheckBreak()
		}
		if yyb4301 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4301-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4306 := z.EncBinary()
		_ = yym4306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4307 := !z.EncBinary()
			yy2arr4307 := z.EncBasicHandle().StructToArray
			var yyq4307 [4]bool
			_, _, _ = yysep4307, yyq4307, yy2arr4307
			const yyr4307 bool = false
			yyq4307[0] = x.Kind != ""
			yyq4307[1] = x.APIVersion != ""
			yyq4307[2] = true
			yyq4307[3] = len(x.Conditions) != 0
			var yynn4307 int
			if yyr4307 || yy2arr4307 {
				r.EncodeArrayStart(4)
			} else {
				yynn4307 = 0
				for _, b := range yyq4307 {
					if b {
						yynn4307++
					}
				}
				r.EncodeMapStart(yynn4307)
				yynn4307 = 0
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[0] {
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4307[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[1] {
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4307[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[2] {
					yy4315 := &x.ObjectMeta
					yy4315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4307[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4316 := &x.ObjectMeta
					yy4316.CodecEncodeSelf(e)
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4307[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4318 := z.EncBinary()
						_ = yym4318
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4307[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4319 := z.EncBinary()
						_ = yym4319
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4307 || yy2arr4307 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4320 := z.DecBinary()
	_ = yym4320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4321 := r.ContainerType()
		if yyct4321 == codecSelferValueTypeMap1234 {
			yyl4321 := r.ReadMapStart()
			if yyl4321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4321, d)
			}
		} else if yyct4321 == codecSelferValueTypeArray1234 {
			yyl4321 := r.ReadArrayStart()
			if yyl4321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4322Slc
	var yyhl4322 bool = l >= 0
	for yyj4322 := 0; ; yyj4322++ {
		if yyhl4322 {
			if yyj4322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4322Slc = r.DecodeBytes(yys4322Slc, true, true)
		yys4322 := string(yys4322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4322 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4325 := &x.ObjectMeta
				yyv4325.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4326 := &x.Conditions
				yym4327 := z.DecBinary()
				_ = yym4327
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4326), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4322)
		} // end switch yys4322
	} // end for yyj4322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4328 int
	var yyb4328 bool
	var yyhl4328 bool = l >= 0
	yyj4328++
	if yyhl4328 {
		yyb4328 = yyj4328 > l
	} else {
		yyb4328 = r.CheckBreak()
	}
	if yyb4328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4328++
	if yyhl4328 {
		yyb4328 = yyj4328 > l
	} else {
		yyb4328 = r.CheckBreak()
	}
	if yyb4328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4328++
	if yyhl4328 {
		yyb4328 = yyj4328 > l
	} else {
		yyb4328 = r.CheckBreak()
	}
	if yyb4328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4331 := &x.ObjectMeta
		yyv4331.CodecDecodeSelf(d)
	}
	yyj4328++
	if yyhl4328 {
		yyb4328 = yyj4328 > l
	} else {
		yyb4328 = r.CheckBreak()
	}
	if yyb4328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4332 := &x.Conditions
		yym4333 := z.DecBinary()
		_ = yym4333
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4332), d)
		}
	}
	for {
		yyj4328++
		if yyhl4328 {
			yyb4328 = yyj4328 > l
		} else {
			yyb4328 = r.CheckBreak()
		}
		if yyb4328 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4328-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4334 := z.EncBinary()
		_ = yym4334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4335 := !z.EncBinary()
			yy2arr4335 := z.EncBasicHandle().StructToArray
			var yyq4335 [4]bool
			_, _, _ = yysep4335, yyq4335, yy2arr4335
			const yyr4335 bool = false
			yyq4335[0] = x.Kind != ""
			yyq4335[1] = x.APIVersion != ""
			yyq4335[2] = true
			var yynn4335 int
			if yyr4335 || yy2arr4335 {
				r.EncodeArrayStart(4)
			} else {
				yynn4335 = 1
				for _, b := range yyq4335 {
					if b {
						yynn4335++
					}
				}
				r.EncodeMapStart(yynn4335)
				yynn4335 = 0
			}
			if yyr4335 || yy2arr4335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4335[0] {
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4335[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4338 := z.EncBinary()
					_ = yym4338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4335 || yy2arr4335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4335[1] {
					yym4340 := z.EncBinary()
					_ = yym4340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4335[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4335 || yy2arr4335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4335[2] {
					yy4343 := &x.ListMeta
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4343) {
					} else {
						z.EncFallback(yy4343)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4335[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4345 := &x.ListMeta
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4345) {
					} else {
						z.EncFallback(yy4345)
					}
				}
			}
			if yyr4335 || yy2arr4335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4335 || yy2arr4335 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4350 := z.DecBinary()
	_ = yym4350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4351 := r.ContainerType()
		if yyct4351 == codecSelferValueTypeMap1234 {
			yyl4351 := r.ReadMapStart()
			if yyl4351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4351, d)
			}
		} else if yyct4351 == codecSelferValueTypeArray1234 {
			yyl4351 := r.ReadArrayStart()
			if yyl4351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4352Slc
	var yyhl4352 bool = l >= 0
	for yyj4352 := 0; ; yyj4352++ {
		if yyhl4352 {
			if yyj4352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4352Slc = r.DecodeBytes(yys4352Slc, true, true)
		yys4352 := string(yys4352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4352 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4355 := &x.ListMeta
				yym4356 := z.DecBinary()
				_ = yym4356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4355) {
				} else {
					z.DecFallback(yyv4355, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4357 := &x.Items
				yym4358 := z.DecBinary()
				_ = yym4358
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4357), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4352)
		} // end switch yys4352
	} // end for yyj4352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4359 int
	var yyb4359 bool
	var yyhl4359 bool = l >= 0
	yyj4359++
	if yyhl4359 {
		yyb4359 = yyj4359 > l
	} else {
		yyb4359 = r.CheckBreak()
	}
	if yyb4359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4359++
	if yyhl4359 {
		yyb4359 = yyj4359 > l
	} else {
		yyb4359 = r.CheckBreak()
	}
	if yyb4359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4359++
	if yyhl4359 {
		yyb4359 = yyj4359 > l
	} else {
		yyb4359 = r.CheckBreak()
	}
	if yyb4359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4362 := &x.ListMeta
		yym4363 := z.DecBinary()
		_ = yym4363
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4362) {
		} else {
			z.DecFallback(yyv4362, false)
		}
	}
	yyj4359++
	if yyhl4359 {
		yyb4359 = yyj4359 > l
	} else {
		yyb4359 = r.CheckBreak()
	}
	if yyb4359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4364 := &x.Items
		yym4365 := z.DecBinary()
		_ = yym4365
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4364), d)
		}
	}
	for {
		yyj4359++
		if yyhl4359 {
			yyb4359 = yyj4359 > l
		} else {
			yyb4359 = r.CheckBreak()
		}
		if yyb4359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4366 := z.EncBinary()
		_ = yym4366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4367 := !z.EncBinary()
			yy2arr4367 := z.EncBasicHandle().StructToArray
			var yyq4367 [6]bool
			_, _, _ = yysep4367, yyq4367, yy2arr4367
			const yyr4367 bool = false
			yyq4367[0] = x.Capabilities != nil
			yyq4367[1] = x.Privileged != nil
			yyq4367[2] = x.SELinuxOptions != nil
			yyq4367[3] = x.RunAsUser != nil
			yyq4367[4] = x.RunAsNonRoot != nil
			yyq4367[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4367 int
			if yyr4367 || yy2arr4367 {
				r.EncodeArrayStart(6)
			} else {
				yynn4367 = 0
				for _, b := range yyq4367 {
					if b {
						yynn4367++
					}
				}
				r.EncodeMapStart(yynn4367)
				yynn4367 = 0
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4370 := *x.Privileged
						yym4371 := z.EncBinary()
						_ = yym4371
						if false {
						} else {
							r.EncodeBool(bool(yy4370))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4372 := *x.Privileged
						yym4373 := z.EncBinary()
						_ = yym4373
						if false {
						} else {
							r.EncodeBool(bool(yy4372))
						}
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4376 := *x.RunAsUser
						yym4377 := z.EncBinary()
						_ = yym4377
						if false {
						} else {
							r.EncodeInt(int64(yy4376))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4378 := *x.RunAsUser
						yym4379 := z.EncBinary()
						_ = yym4379
						if false {
						} else {
							r.EncodeInt(int64(yy4378))
						}
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4381 := *x.RunAsNonRoot
						yym4382 := z.EncBinary()
						_ = yym4382
						if false {
						} else {
							r.EncodeBool(bool(yy4381))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4383 := *x.RunAsNonRoot
						yym4384 := z.EncBinary()
						_ = yym4384
						if false {
						} else {
							r.EncodeBool(bool(yy4383))
						}
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4386 := *x.ReadOnlyRootFilesystem
						yym4387 := z.EncBinary()
						_ = yym4387
						if false {
						} else {
							r.EncodeBool(bool(yy4386))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4388 := *x.ReadOnlyRootFilesystem
						yym4389 := z.EncBinary()
						_ = yym4389
						if false {
						} else {
							r.EncodeBool(bool(yy4388))
						}
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4390 := z.DecBinary()
	_ = yym4390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4391 := r.ContainerType()
		if yyct4391 == codecSelferValueTypeMap1234 {
			yyl4391 := r.ReadMapStart()
			if yyl4391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4391, d)
			}
		} else if yyct4391 == codecSelferValueTypeArray1234 {
			yyl4391 := r.ReadArrayStart()
			if yyl4391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4392Slc
	var yyhl4392 bool = l >= 0
	for yyj4392 := 0; ; yyj4392++ {
		if yyhl4392 {
			if yyj4392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4392Slc = r.DecodeBytes(yys4392Slc, true, true)
		yys4392 := string(yys4392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4392 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4395 := z.DecBinary()
				_ = yym4395
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4398 := z.DecBinary()
				_ = yym4398
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4400 := z.DecBinary()
				_ = yym4400
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4402 := z.DecBinary()
				_ = yym4402
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4392)
		} // end switch yys4392
	} // end for yyj4392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4403 int
	var yyb4403 bool
	var yyhl4403 bool = l >= 0
	yyj4403++
	if yyhl4403 {
		yyb4403 = yyj4403 > l
	} else {
		yyb4403 = r.CheckBreak()
	}
	if yyb4403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4403++
	if yyhl4403 {
		yyb4403 = yyj4403 > l
	} else {
		yyb4403 = r.CheckBreak()
	}
	if yyb4403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4406 := z.DecBinary()
		_ = yym4406
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4403++
	if yyhl4403 {
		yyb4403 = yyj4403 > l
	} else {
		yyb4403 = r.CheckBreak()
	}
	if yyb4403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4403++
	if yyhl4403 {
		yyb4403 = yyj4403 > l
	} else {
		yyb4403 = r.CheckBreak()
	}
	if yyb4403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4409 := z.DecBinary()
		_ = yym4409
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4403++
	if yyhl4403 {
		yyb4403 = yyj4403 > l
	} else {
		yyb4403 = r.CheckBreak()
	}
	if yyb4403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4411 := z.DecBinary()
		_ = yym4411
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4403++
	if yyhl4403 {
		yyb4403 = yyj4403 > l
	} else {
		yyb4403 = r.CheckBreak()
	}
	if yyb4403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4413 := z.DecBinary()
		_ = yym4413
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4403++
		if yyhl4403 {
			yyb4403 = yyj4403 > l
		} else {
			yyb4403 = r.CheckBreak()
		}
		if yyb4403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4414 := z.EncBinary()
		_ = yym4414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4415 := !z.EncBinary()
			yy2arr4415 := z.EncBasicHandle().StructToArray
			var yyq4415 [4]bool
			_, _, _ = yysep4415, yyq4415, yy2arr4415
			const yyr4415 bool = false
			yyq4415[0] = x.User != ""
			yyq4415[1] = x.Role != ""
			yyq4415[2] = x.Type != ""
			yyq4415[3] = x.Level != ""
			var yynn4415 int
			if yyr4415 || yy2arr4415 {
				r.EncodeArrayStart(4)
			} else {
				yynn4415 = 0
				for _, b := range yyq4415 {
					if b {
						yynn4415++
					}
				}
				r.EncodeMapStart(yynn4415)
				yynn4415 = 0
			}
			if yyr4415 || yy2arr4415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4415[0] {
					yym4417 := z.EncBinary()
					_ = yym4417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4418 := z.EncBinary()
					_ = yym4418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4415 || yy2arr4415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4415[1] {
					yym4420 := z.EncBinary()
					_ = yym4420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4415[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4421 := z.EncBinary()
					_ = yym4421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4415 || yy2arr4415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4415[2] {
					yym4423 := z.EncBinary()
					_ = yym4423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4415[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4424 := z.EncBinary()
					_ = yym4424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4415 || yy2arr4415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4415[3] {
					yym4426 := z.EncBinary()
					_ = yym4426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4415[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4415 || yy2arr4415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4428 := z.DecBinary()
	_ = yym4428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4429 := r.ContainerType()
		if yyct4429 == codecSelferValueTypeMap1234 {
			yyl4429 := r.ReadMapStart()
			if yyl4429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4429, d)
			}
		} else if yyct4429 == codecSelferValueTypeArray1234 {
			yyl4429 := r.ReadArrayStart()
			if yyl4429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4430Slc
	var yyhl4430 bool = l >= 0
	for yyj4430 := 0; ; yyj4430++ {
		if yyhl4430 {
			if yyj4430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4430Slc = r.DecodeBytes(yys4430Slc, true, true)
		yys4430 := string(yys4430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4430 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4430)
		} // end switch yys4430
	} // end for yyj4430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4435 int
	var yyb4435 bool
	var yyhl4435 bool = l >= 0
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4435++
		if yyhl4435 {
			yyb4435 = yyj4435 > l
		} else {
			yyb4435 = r.CheckBreak()
		}
		if yyb4435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4440 := z.EncBinary()
		_ = yym4440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4441 := !z.EncBinary()
			yy2arr4441 := z.EncBasicHandle().StructToArray
			var yyq4441 [5]bool
			_, _, _ = yysep4441, yyq4441, yy2arr4441
			const yyr4441 bool = false
			yyq4441[0] = x.Kind != ""
			yyq4441[1] = x.APIVersion != ""
			yyq4441[2] = true
			var yynn4441 int
			if yyr4441 || yy2arr4441 {
				r.EncodeArrayStart(5)
			} else {
				yynn4441 = 2
				for _, b := range yyq4441 {
					if b {
						yynn4441++
					}
				}
				r.EncodeMapStart(yynn4441)
				yynn4441 = 0
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4441[0] {
					yym4443 := z.EncBinary()
					_ = yym4443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4444 := z.EncBinary()
					_ = yym4444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4441[1] {
					yym4446 := z.EncBinary()
					_ = yym4446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4447 := z.EncBinary()
					_ = yym4447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4441[2] {
					yy4449 := &x.ObjectMeta
					yy4449.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4450 := &x.ObjectMeta
					yy4450.CodecEncodeSelf(e)
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4452 := z.EncBinary()
				_ = yym4452
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4453 := z.EncBinary()
				_ = yym4453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4455 := z.EncBinary()
					_ = yym4455
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4456 := z.EncBinary()
					_ = yym4456
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4441 || yy2arr4441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4457 := z.DecBinary()
	_ = yym4457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4458 := r.ContainerType()
		if yyct4458 == codecSelferValueTypeMap1234 {
			yyl4458 := r.ReadMapStart()
			if yyl4458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4458, d)
			}
		} else if yyct4458 == codecSelferValueTypeArray1234 {
			yyl4458 := r.ReadArrayStart()
			if yyl4458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4459Slc
	var yyhl4459 bool = l >= 0
	for yyj4459 := 0; ; yyj4459++ {
		if yyhl4459 {
			if yyj4459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4459Slc = r.DecodeBytes(yys4459Slc, true, true)
		yys4459 := string(yys4459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4462 := &x.ObjectMeta
				yyv4462.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4464 := &x.Data
				yym4465 := z.DecBinary()
				_ = yym4465
				if false {
				} else {
					*yyv4464 = r.DecodeBytes(*(*[]byte)(yyv4464), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4459)
		} // end switch yys4459
	} // end for yyj4459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4466 int
	var yyb4466 bool
	var yyhl4466 bool = l >= 0
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4469 := &x.ObjectMeta
		yyv4469.CodecDecodeSelf(d)
	}
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4466++
	if yyhl4466 {
		yyb4466 = yyj4466 > l
	} else {
		yyb4466 = r.CheckBreak()
	}
	if yyb4466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4471 := &x.Data
		yym4472 := z.DecBinary()
		_ = yym4472
		if false {
		} else {
			*yyv4471 = r.DecodeBytes(*(*[]byte)(yyv4471), false, false)
		}
	}
	for {
		yyj4466++
		if yyhl4466 {
			yyb4466 = yyj4466 > l
		} else {
			yyb4466 = r.CheckBreak()
		}
		if yyb4466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4473 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4474 := &yyv4473
		yy4474.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4475 := *v
	yyh4475, yyl4475 := z.DecSliceHelperStart()
	var yyc4475 bool
	if yyl4475 == 0 {
		if yyv4475 == nil {
			yyv4475 = []OwnerReference{}
			yyc4475 = true
		} else if len(yyv4475) != 0 {
			yyv4475 = yyv4475[:0]
			yyc4475 = true
		}
	} else if yyl4475 > 0 {
		var yyrr4475, yyrl4475 int
		var yyrt4475 bool
		if yyl4475 > cap(yyv4475) {

			yyrg4475 := len(yyv4475) > 0
			yyv24475 := yyv4475
			yyrl4475, yyrt4475 = z.DecInferLen(yyl4475, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4475 {
				if yyrl4475 <= cap(yyv4475) {
					yyv4475 = yyv4475[:yyrl4475]
				} else {
					yyv4475 = make([]OwnerReference, yyrl4475)
				}
			} else {
				yyv4475 = make([]OwnerReference, yyrl4475)
			}
			yyc4475 = true
			yyrr4475 = len(yyv4475)
			if yyrg4475 {
				copy(yyv4475, yyv24475)
			}
		} else if yyl4475 != len(yyv4475) {
			yyv4475 = yyv4475[:yyl4475]
			yyc4475 = true
		}
		yyj4475 := 0
		for ; yyj4475 < yyrr4475; yyj4475++ {
			yyh4475.ElemContainerState(yyj4475)
			if r.TryDecodeAsNil() {
				yyv4475[yyj4475] = OwnerReference{}
			} else {
				yyv4476 := &yyv4475[yyj4475]
				yyv4476.CodecDecodeSelf(d)
			}

		}
		if yyrt4475 {
			for ; yyj4475 < yyl4475; yyj4475++ {
				yyv4475 = append(yyv4475, OwnerReference{})
				yyh4475.ElemContainerState(yyj4475)
				if r.TryDecodeAsNil() {
					yyv4475[yyj4475] = OwnerReference{}
				} else {
					yyv4477 := &yyv4475[yyj4475]
					yyv4477.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4475 := 0
		for ; !r.CheckBreak(); yyj4475++ {

			if yyj4475 >= len(yyv4475) {
				yyv4475 = append(yyv4475, OwnerReference{}) // var yyz4475 OwnerReference
				yyc4475 = true
			}
			yyh4475.ElemContainerState(yyj4475)
			if yyj4475 < len(yyv4475) {
				if r.TryDecodeAsNil() {
					yyv4475[yyj4475] = OwnerReference{}
				} else {
					yyv4478 := &yyv4475[yyj4475]
					yyv4478.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4475 < len(yyv4475) {
			yyv4475 = yyv4475[:yyj4475]
			yyc4475 = true
		} else if yyj4475 == 0 && yyv4475 == nil {
			yyv4475 = []OwnerReference{}
			yyc4475 = true
		}
	}
	yyh4475.End()
	if yyc4475 {
		*v = yyv4475
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4479 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4479.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4480 := *v
	yyh4480, yyl4480 := z.DecSliceHelperStart()
	var yyc4480 bool
	if yyl4480 == 0 {
		if yyv4480 == nil {
			yyv4480 = []PersistentVolumeAccessMode{}
			yyc4480 = true
		} else if len(yyv4480) != 0 {
			yyv4480 = yyv4480[:0]
			yyc4480 = true
		}
	} else if yyl4480 > 0 {
		var yyrr4480, yyrl4480 int
		var yyrt4480 bool
		if yyl4480 > cap(yyv4480) {

			yyrl4480, yyrt4480 = z.DecInferLen(yyl4480, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4480 {
				if yyrl4480 <= cap(yyv4480) {
					yyv4480 = yyv4480[:yyrl4480]
				} else {
					yyv4480 = make([]PersistentVolumeAccessMode, yyrl4480)
				}
			} else {
				yyv4480 = make([]PersistentVolumeAccessMode, yyrl4480)
			}
			yyc4480 = true
			yyrr4480 = len(yyv4480)
		} else if yyl4480 != len(yyv4480) {
			yyv4480 = yyv4480[:yyl4480]
			yyc4480 = true
		}
		yyj4480 := 0
		for ; yyj4480 < yyrr4480; yyj4480++ {
			yyh4480.ElemContainerState(yyj4480)
			if r.TryDecodeAsNil() {
				yyv4480[yyj4480] = ""
			} else {
				yyv4480[yyj4480] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4480 {
			for ; yyj4480 < yyl4480; yyj4480++ {
				yyv4480 = append(yyv4480, "")
				yyh4480.ElemContainerState(yyj4480)
				if r.TryDecodeAsNil() {
					yyv4480[yyj4480] = ""
				} else {
					yyv4480[yyj4480] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4480 := 0
		for ; !r.CheckBreak(); yyj4480++ {

			if yyj4480 >= len(yyv4480) {
				yyv4480 = append(yyv4480, "") // var yyz4480 PersistentVolumeAccessMode
				yyc4480 = true
			}
			yyh4480.ElemContainerState(yyj4480)
			if yyj4480 < len(yyv4480) {
				if r.TryDecodeAsNil() {
					yyv4480[yyj4480] = ""
				} else {
					yyv4480[yyj4480] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4480 < len(yyv4480) {
			yyv4480 = yyv4480[:yyj4480]
			yyc4480 = true
		} else if yyj4480 == 0 && yyv4480 == nil {
			yyv4480 = []PersistentVolumeAccessMode{}
			yyc4480 = true
		}
	}
	yyh4480.End()
	if yyc4480 {
		*v = yyv4480
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4484 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4485 := &yyv4484
		yy4485.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4486 := *v
	yyh4486, yyl4486 := z.DecSliceHelperStart()
	var yyc4486 bool
	if yyl4486 == 0 {
		if yyv4486 == nil {
			yyv4486 = []PersistentVolume{}
			yyc4486 = true
		} else if len(yyv4486) != 0 {
			yyv4486 = yyv4486[:0]
			yyc4486 = true
		}
	} else if yyl4486 > 0 {
		var yyrr4486, yyrl4486 int
		var yyrt4486 bool
		if yyl4486 > cap(yyv4486) {

			yyrg4486 := len(yyv4486) > 0
			yyv24486 := yyv4486
			yyrl4486, yyrt4486 = z.DecInferLen(yyl4486, z.DecBasicHandle().MaxInitLen, 480)
			if yyrt4486 {
				if yyrl4486 <= cap(yyv4486) {
					yyv4486 = yyv4486[:yyrl4486]
				} else {
					yyv4486 = make([]PersistentVolume, yyrl4486)
				}
			} else {
				yyv4486 = make([]PersistentVolume, yyrl4486)
			}
			yyc4486 = true
			yyrr4486 = len(yyv4486)
			if yyrg4486 {
				copy(yyv4486, yyv24486)
			}
		} else if yyl4486 != len(yyv4486) {
			yyv4486 = yyv4486[:yyl4486]
			yyc4486 = true
		}
		yyj4486 := 0
		for ; yyj4486 < yyrr4486; yyj4486++ {
			yyh4486.ElemContainerState(yyj4486)
			if r.TryDecodeAsNil() {
				yyv4486[yyj4486] = PersistentVolume{}
			} else {
				yyv4487 := &yyv4486[yyj4486]
				yyv4487.CodecDecodeSelf(d)
			}

		}
		if yyrt4486 {
			for ; yyj4486 < yyl4486; yyj4486++ {
				yyv4486 = append(yyv4486, PersistentVolume{})
				yyh4486.ElemContainerState(yyj4486)
				if r.TryDecodeAsNil() {
					yyv4486[yyj4486] = PersistentVolume{}
				} else {
					yyv4488 := &yyv4486[yyj4486]
					yyv4488.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4486 := 0
		for ; !r.CheckBreak(); yyj4486++ {

			if yyj4486 >= len(yyv4486) {
				yyv4486 = append(yyv4486, PersistentVolume{}) // var yyz4486 PersistentVolume
				yyc4486 = true
			}
			yyh4486.ElemContainerState(yyj4486)
			if yyj4486 < len(yyv4486) {
				if r.TryDecodeAsNil() {
					yyv4486[yyj4486] = PersistentVolume{}
				} else {
					yyv4489 := &yyv4486[yyj4486]
					yyv4489.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4486 < len(yyv4486) {
			yyv4486 = yyv4486[:yyj4486]
			yyc4486 = true
		} else if yyj4486 == 0 && yyv4486 == nil {
			yyv4486 = []PersistentVolume{}
			yyc4486 = true
		}
	}
	yyh4486.End()
	if yyc4486 {
		*v = yyv4486
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4490 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4491 := &yyv4490
		yy4491.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4492 := *v
	yyh4492, yyl4492 := z.DecSliceHelperStart()
	var yyc4492 bool
	if yyl4492 == 0 {
		if yyv4492 == nil {
			yyv4492 = []PersistentVolumeClaim{}
			yyc4492 = true
		} else if len(yyv4492) != 0 {
			yyv4492 = yyv4492[:0]
			yyc4492 = true
		}
	} else if yyl4492 > 0 {
		var yyrr4492, yyrl4492 int
		var yyrt4492 bool
		if yyl4492 > cap(yyv4492) {

			yyrg4492 := len(yyv4492) > 0
			yyv24492 := yyv4492
			yyrl4492, yyrt4492 = z.DecInferLen(yyl4492, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4492 {
				if yyrl4492 <= cap(yyv4492) {
					yyv4492 = yyv4492[:yyrl4492]
				} else {
					yyv4492 = make([]PersistentVolumeClaim, yyrl4492)
				}
			} else {
				yyv4492 = make([]PersistentVolumeClaim, yyrl4492)
			}
			yyc4492 = true
			yyrr4492 = len(yyv4492)
			if yyrg4492 {
				copy(yyv4492, yyv24492)
			}
		} else if yyl4492 != len(yyv4492) {
			yyv4492 = yyv4492[:yyl4492]
			yyc4492 = true
		}
		yyj4492 := 0
		for ; yyj4492 < yyrr4492; yyj4492++ {
			yyh4492.ElemContainerState(yyj4492)
			if r.TryDecodeAsNil() {
				yyv4492[yyj4492] = PersistentVolumeClaim{}
			} else {
				yyv4493 := &yyv4492[yyj4492]
				yyv4493.CodecDecodeSelf(d)
			}

		}
		if yyrt4492 {
			for ; yyj4492 < yyl4492; yyj4492++ {
				yyv4492 = append(yyv4492, PersistentVolumeClaim{})
				yyh4492.ElemContainerState(yyj4492)
				if r.TryDecodeAsNil() {
					yyv4492[yyj4492] = PersistentVolumeClaim{}
				} else {
					yyv4494 := &yyv4492[yyj4492]
					yyv4494.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4492 := 0
		for ; !r.CheckBreak(); yyj4492++ {

			if yyj4492 >= len(yyv4492) {
				yyv4492 = append(yyv4492, PersistentVolumeClaim{}) // var yyz4492 PersistentVolumeClaim
				yyc4492 = true
			}
			yyh4492.ElemContainerState(yyj4492)
			if yyj4492 < len(yyv4492) {
				if r.TryDecodeAsNil() {
					yyv4492[yyj4492] = PersistentVolumeClaim{}
				} else {
					yyv4495 := &yyv4492[yyj4492]
					yyv4495.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4492 < len(yyv4492) {
			yyv4492 = yyv4492[:yyj4492]
			yyc4492 = true
		} else if yyj4492 == 0 && yyv4492 == nil {
			yyv4492 = []PersistentVolumeClaim{}
			yyc4492 = true
		}
	}
	yyh4492.End()
	if yyc4492 {
		*v = yyv4492
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4496 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4497 := &yyv4496
		yy4497.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4498 := *v
	yyh4498, yyl4498 := z.DecSliceHelperStart()
	var yyc4498 bool
	if yyl4498 == 0 {
		if yyv4498 == nil {
			yyv4498 = []KeyToPath{}
			yyc4498 = true
		} else if len(yyv4498) != 0 {
			yyv4498 = yyv4498[:0]
			yyc4498 = true
		}
	} else if yyl4498 > 0 {
		var yyrr4498, yyrl4498 int
		var yyrt4498 bool
		if yyl4498 > cap(yyv4498) {

			yyrg4498 := len(yyv4498) > 0
			yyv24498 := yyv4498
			yyrl4498, yyrt4498 = z.DecInferLen(yyl4498, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4498 {
				if yyrl4498 <= cap(yyv4498) {
					yyv4498 = yyv4498[:yyrl4498]
				} else {
					yyv4498 = make([]KeyToPath, yyrl4498)
				}
			} else {
				yyv4498 = make([]KeyToPath, yyrl4498)
			}
			yyc4498 = true
			yyrr4498 = len(yyv4498)
			if yyrg4498 {
				copy(yyv4498, yyv24498)
			}
		} else if yyl4498 != len(yyv4498) {
			yyv4498 = yyv4498[:yyl4498]
			yyc4498 = true
		}
		yyj4498 := 0
		for ; yyj4498 < yyrr4498; yyj4498++ {
			yyh4498.ElemContainerState(yyj4498)
			if r.TryDecodeAsNil() {
				yyv4498[yyj4498] = KeyToPath{}
			} else {
				yyv4499 := &yyv4498[yyj4498]
				yyv4499.CodecDecodeSelf(d)
			}

		}
		if yyrt4498 {
			for ; yyj4498 < yyl4498; yyj4498++ {
				yyv4498 = append(yyv4498, KeyToPath{})
				yyh4498.ElemContainerState(yyj4498)
				if r.TryDecodeAsNil() {
					yyv4498[yyj4498] = KeyToPath{}
				} else {
					yyv4500 := &yyv4498[yyj4498]
					yyv4500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4498 := 0
		for ; !r.CheckBreak(); yyj4498++ {

			if yyj4498 >= len(yyv4498) {
				yyv4498 = append(yyv4498, KeyToPath{}) // var yyz4498 KeyToPath
				yyc4498 = true
			}
			yyh4498.ElemContainerState(yyj4498)
			if yyj4498 < len(yyv4498) {
				if r.TryDecodeAsNil() {
					yyv4498[yyj4498] = KeyToPath{}
				} else {
					yyv4501 := &yyv4498[yyj4498]
					yyv4501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4498 < len(yyv4498) {
			yyv4498 = yyv4498[:yyj4498]
			yyc4498 = true
		} else if yyj4498 == 0 && yyv4498 == nil {
			yyv4498 = []KeyToPath{}
			yyc4498 = true
		}
	}
	yyh4498.End()
	if yyc4498 {
		*v = yyv4498
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4502 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4503 := &yyv4502
		yy4503.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4504 := *v
	yyh4504, yyl4504 := z.DecSliceHelperStart()
	var yyc4504 bool
	if yyl4504 == 0 {
		if yyv4504 == nil {
			yyv4504 = []DownwardAPIVolumeFile{}
			yyc4504 = true
		} else if len(yyv4504) != 0 {
			yyv4504 = yyv4504[:0]
			yyc4504 = true
		}
	} else if yyl4504 > 0 {
		var yyrr4504, yyrl4504 int
		var yyrt4504 bool
		if yyl4504 > cap(yyv4504) {

			yyrg4504 := len(yyv4504) > 0
			yyv24504 := yyv4504
			yyrl4504, yyrt4504 = z.DecInferLen(yyl4504, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4504 {
				if yyrl4504 <= cap(yyv4504) {
					yyv4504 = yyv4504[:yyrl4504]
				} else {
					yyv4504 = make([]DownwardAPIVolumeFile, yyrl4504)
				}
			} else {
				yyv4504 = make([]DownwardAPIVolumeFile, yyrl4504)
			}
			yyc4504 = true
			yyrr4504 = len(yyv4504)
			if yyrg4504 {
				copy(yyv4504, yyv24504)
			}
		} else if yyl4504 != len(yyv4504) {
			yyv4504 = yyv4504[:yyl4504]
			yyc4504 = true
		}
		yyj4504 := 0
		for ; yyj4504 < yyrr4504; yyj4504++ {
			yyh4504.ElemContainerState(yyj4504)
			if r.TryDecodeAsNil() {
				yyv4504[yyj4504] = DownwardAPIVolumeFile{}
			} else {
				yyv4505 := &yyv4504[yyj4504]
				yyv4505.CodecDecodeSelf(d)
			}

		}
		if yyrt4504 {
			for ; yyj4504 < yyl4504; yyj4504++ {
				yyv4504 = append(yyv4504, DownwardAPIVolumeFile{})
				yyh4504.ElemContainerState(yyj4504)
				if r.TryDecodeAsNil() {
					yyv4504[yyj4504] = DownwardAPIVolumeFile{}
				} else {
					yyv4506 := &yyv4504[yyj4504]
					yyv4506.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4504 := 0
		for ; !r.CheckBreak(); yyj4504++ {

			if yyj4504 >= len(yyv4504) {
				yyv4504 = append(yyv4504, DownwardAPIVolumeFile{}) // var yyz4504 DownwardAPIVolumeFile
				yyc4504 = true
			}
			yyh4504.ElemContainerState(yyj4504)
			if yyj4504 < len(yyv4504) {
				if r.TryDecodeAsNil() {
					yyv4504[yyj4504] = DownwardAPIVolumeFile{}
				} else {
					yyv4507 := &yyv4504[yyj4504]
					yyv4507.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4504 < len(yyv4504) {
			yyv4504 = yyv4504[:yyj4504]
			yyc4504 = true
		} else if yyj4504 == 0 && yyv4504 == nil {
			yyv4504 = []DownwardAPIVolumeFile{}
			yyc4504 = true
		}
	}
	yyh4504.End()
	if yyc4504 {
		*v = yyv4504
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4508 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4509 := &yyv4508
		yy4509.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4510 := *v
	yyh4510, yyl4510 := z.DecSliceHelperStart()
	var yyc4510 bool
	if yyl4510 == 0 {
		if yyv4510 == nil {
			yyv4510 = []HTTPHeader{}
			yyc4510 = true
		} else if len(yyv4510) != 0 {
			yyv4510 = yyv4510[:0]
			yyc4510 = true
		}
	} else if yyl4510 > 0 {
		var yyrr4510, yyrl4510 int
		var yyrt4510 bool
		if yyl4510 > cap(yyv4510) {

			yyrg4510 := len(yyv4510) > 0
			yyv24510 := yyv4510
			yyrl4510, yyrt4510 = z.DecInferLen(yyl4510, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4510 {
				if yyrl4510 <= cap(yyv4510) {
					yyv4510 = yyv4510[:yyrl4510]
				} else {
					yyv4510 = make([]HTTPHeader, yyrl4510)
				}
			} else {
				yyv4510 = make([]HTTPHeader, yyrl4510)
			}
			yyc4510 = true
			yyrr4510 = len(yyv4510)
			if yyrg4510 {
				copy(yyv4510, yyv24510)
			}
		} else if yyl4510 != len(yyv4510) {
			yyv4510 = yyv4510[:yyl4510]
			yyc4510 = true
		}
		yyj4510 := 0
		for ; yyj4510 < yyrr4510; yyj4510++ {
			yyh4510.ElemContainerState(yyj4510)
			if r.TryDecodeAsNil() {
				yyv4510[yyj4510] = HTTPHeader{}
			} else {
				yyv4511 := &yyv4510[yyj4510]
				yyv4511.CodecDecodeSelf(d)
			}

		}
		if yyrt4510 {
			for ; yyj4510 < yyl4510; yyj4510++ {
				yyv4510 = append(yyv4510, HTTPHeader{})
				yyh4510.ElemContainerState(yyj4510)
				if r.TryDecodeAsNil() {
					yyv4510[yyj4510] = HTTPHeader{}
				} else {
					yyv4512 := &yyv4510[yyj4510]
					yyv4512.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4510 := 0
		for ; !r.CheckBreak(); yyj4510++ {

			if yyj4510 >= len(yyv4510) {
				yyv4510 = append(yyv4510, HTTPHeader{}) // var yyz4510 HTTPHeader
				yyc4510 = true
			}
			yyh4510.ElemContainerState(yyj4510)
			if yyj4510 < len(yyv4510) {
				if r.TryDecodeAsNil() {
					yyv4510[yyj4510] = HTTPHeader{}
				} else {
					yyv4513 := &yyv4510[yyj4510]
					yyv4513.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4510 < len(yyv4510) {
			yyv4510 = yyv4510[:yyj4510]
			yyc4510 = true
		} else if yyj4510 == 0 && yyv4510 == nil {
			yyv4510 = []HTTPHeader{}
			yyc4510 = true
		}
	}
	yyh4510.End()
	if yyc4510 {
		*v = yyv4510
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4514 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4514.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4515 := *v
	yyh4515, yyl4515 := z.DecSliceHelperStart()
	var yyc4515 bool
	if yyl4515 == 0 {
		if yyv4515 == nil {
			yyv4515 = []Capability{}
			yyc4515 = true
		} else if len(yyv4515) != 0 {
			yyv4515 = yyv4515[:0]
			yyc4515 = true
		}
	} else if yyl4515 > 0 {
		var yyrr4515, yyrl4515 int
		var yyrt4515 bool
		if yyl4515 > cap(yyv4515) {

			yyrl4515, yyrt4515 = z.DecInferLen(yyl4515, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4515 {
				if yyrl4515 <= cap(yyv4515) {
					yyv4515 = yyv4515[:yyrl4515]
				} else {
					yyv4515 = make([]Capability, yyrl4515)
				}
			} else {
				yyv4515 = make([]Capability, yyrl4515)
			}
			yyc4515 = true
			yyrr4515 = len(yyv4515)
		} else if yyl4515 != len(yyv4515) {
			yyv4515 = yyv4515[:yyl4515]
			yyc4515 = true
		}
		yyj4515 := 0
		for ; yyj4515 < yyrr4515; yyj4515++ {
			yyh4515.ElemContainerState(yyj4515)
			if r.TryDecodeAsNil() {
				yyv4515[yyj4515] = ""
			} else {
				yyv4515[yyj4515] = Capability(r.DecodeString())
			}

		}
		if yyrt4515 {
			for ; yyj4515 < yyl4515; yyj4515++ {
				yyv4515 = append(yyv4515, "")
				yyh4515.ElemContainerState(yyj4515)
				if r.TryDecodeAsNil() {
					yyv4515[yyj4515] = ""
				} else {
					yyv4515[yyj4515] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4515 := 0
		for ; !r.CheckBreak(); yyj4515++ {

			if yyj4515 >= len(yyv4515) {
				yyv4515 = append(yyv4515, "") // var yyz4515 Capability
				yyc4515 = true
			}
			yyh4515.ElemContainerState(yyj4515)
			if yyj4515 < len(yyv4515) {
				if r.TryDecodeAsNil() {
					yyv4515[yyj4515] = ""
				} else {
					yyv4515[yyj4515] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4515 < len(yyv4515) {
			yyv4515 = yyv4515[:yyj4515]
			yyc4515 = true
		} else if yyj4515 == 0 && yyv4515 == nil {
			yyv4515 = []Capability{}
			yyc4515 = true
		}
	}
	yyh4515.End()
	if yyc4515 {
		*v = yyv4515
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4519 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4520 := &yyv4519
		yy4520.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4521 := *v
	yyh4521, yyl4521 := z.DecSliceHelperStart()
	var yyc4521 bool
	if yyl4521 == 0 {
		if yyv4521 == nil {
			yyv4521 = []ContainerPort{}
			yyc4521 = true
		} else if len(yyv4521) != 0 {
			yyv4521 = yyv4521[:0]
			yyc4521 = true
		}
	} else if yyl4521 > 0 {
		var yyrr4521, yyrl4521 int
		var yyrt4521 bool
		if yyl4521 > cap(yyv4521) {

			yyrg4521 := len(yyv4521) > 0
			yyv24521 := yyv4521
			yyrl4521, yyrt4521 = z.DecInferLen(yyl4521, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4521 {
				if yyrl4521 <= cap(yyv4521) {
					yyv4521 = yyv4521[:yyrl4521]
				} else {
					yyv4521 = make([]ContainerPort, yyrl4521)
				}
			} else {
				yyv4521 = make([]ContainerPort, yyrl4521)
			}
			yyc4521 = true
			yyrr4521 = len(yyv4521)
			if yyrg4521 {
				copy(yyv4521, yyv24521)
			}
		} else if yyl4521 != len(yyv4521) {
			yyv4521 = yyv4521[:yyl4521]
			yyc4521 = true
		}
		yyj4521 := 0
		for ; yyj4521 < yyrr4521; yyj4521++ {
			yyh4521.ElemContainerState(yyj4521)
			if r.TryDecodeAsNil() {
				yyv4521[yyj4521] = ContainerPort{}
			} else {
				yyv4522 := &yyv4521[yyj4521]
				yyv4522.CodecDecodeSelf(d)
			}

		}
		if yyrt4521 {
			for ; yyj4521 < yyl4521; yyj4521++ {
				yyv4521 = append(yyv4521, ContainerPort{})
				yyh4521.ElemContainerState(yyj4521)
				if r.TryDecodeAsNil() {
					yyv4521[yyj4521] = ContainerPort{}
				} else {
					yyv4523 := &yyv4521[yyj4521]
					yyv4523.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4521 := 0
		for ; !r.CheckBreak(); yyj4521++ {

			if yyj4521 >= len(yyv4521) {
				yyv4521 = append(yyv4521, ContainerPort{}) // var yyz4521 ContainerPort
				yyc4521 = true
			}
			yyh4521.ElemContainerState(yyj4521)
			if yyj4521 < len(yyv4521) {
				if r.TryDecodeAsNil() {
					yyv4521[yyj4521] = ContainerPort{}
				} else {
					yyv4524 := &yyv4521[yyj4521]
					yyv4524.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4521 < len(yyv4521) {
			yyv4521 = yyv4521[:yyj4521]
			yyc4521 = true
		} else if yyj4521 == 0 && yyv4521 == nil {
			yyv4521 = []ContainerPort{}
			yyc4521 = true
		}
	}
	yyh4521.End()
	if yyc4521 {
		*v = yyv4521
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4525 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4526 := &yyv4525
		yy4526.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4527 := *v
	yyh4527, yyl4527 := z.DecSliceHelperStart()
	var yyc4527 bool
	if yyl4527 == 0 {
		if yyv4527 == nil {
			yyv4527 = []EnvVar{}
			yyc4527 = true
		} else if len(yyv4527) != 0 {
			yyv4527 = yyv4527[:0]
			yyc4527 = true
		}
	} else if yyl4527 > 0 {
		var yyrr4527, yyrl4527 int
		var yyrt4527 bool
		if yyl4527 > cap(yyv4527) {

			yyrg4527 := len(yyv4527) > 0
			yyv24527 := yyv4527
			yyrl4527, yyrt4527 = z.DecInferLen(yyl4527, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4527 {
				if yyrl4527 <= cap(yyv4527) {
					yyv4527 = yyv4527[:yyrl4527]
				} else {
					yyv4527 = make([]EnvVar, yyrl4527)
				}
			} else {
				yyv4527 = make([]EnvVar, yyrl4527)
			}
			yyc4527 = true
			yyrr4527 = len(yyv4527)
			if yyrg4527 {
				copy(yyv4527, yyv24527)
			}
		} else if yyl4527 != len(yyv4527) {
			yyv4527 = yyv4527[:yyl4527]
			yyc4527 = true
		}
		yyj4527 := 0
		for ; yyj4527 < yyrr4527; yyj4527++ {
			yyh4527.ElemContainerState(yyj4527)
			if r.TryDecodeAsNil() {
				yyv4527[yyj4527] = EnvVar{}
			} else {
				yyv4528 := &yyv4527[yyj4527]
				yyv4528.CodecDecodeSelf(d)
			}

		}
		if yyrt4527 {
			for ; yyj4527 < yyl4527; yyj4527++ {
				yyv4527 = append(yyv4527, EnvVar{})
				yyh4527.ElemContainerState(yyj4527)
				if r.TryDecodeAsNil() {
					yyv4527[yyj4527] = EnvVar{}
				} else {
					yyv4529 := &yyv4527[yyj4527]
					yyv4529.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4527 := 0
		for ; !r.CheckBreak(); yyj4527++ {

			if yyj4527 >= len(yyv4527) {
				yyv4527 = append(yyv4527, EnvVar{}) // var yyz4527 EnvVar
				yyc4527 = true
			}
			yyh4527.ElemContainerState(yyj4527)
			if yyj4527 < len(yyv4527) {
				if r.TryDecodeAsNil() {
					yyv4527[yyj4527] = EnvVar{}
				} else {
					yyv4530 := &yyv4527[yyj4527]
					yyv4530.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4527 < len(yyv4527) {
			yyv4527 = yyv4527[:yyj4527]
			yyc4527 = true
		} else if yyj4527 == 0 && yyv4527 == nil {
			yyv4527 = []EnvVar{}
			yyc4527 = true
		}
	}
	yyh4527.End()
	if yyc4527 {
		*v = yyv4527
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4531 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4532 := &yyv4531
		yy4532.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4533 := *v
	yyh4533, yyl4533 := z.DecSliceHelperStart()
	var yyc4533 bool
	if yyl4533 == 0 {
		if yyv4533 == nil {
			yyv4533 = []VolumeMount{}
			yyc4533 = true
		} else if len(yyv4533) != 0 {
			yyv4533 = yyv4533[:0]
			yyc4533 = true
		}
	} else if yyl4533 > 0 {
		var yyrr4533, yyrl4533 int
		var yyrt4533 bool
		if yyl4533 > cap(yyv4533) {

			yyrg4533 := len(yyv4533) > 0
			yyv24533 := yyv4533
			yyrl4533, yyrt4533 = z.DecInferLen(yyl4533, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4533 {
				if yyrl4533 <= cap(yyv4533) {
					yyv4533 = yyv4533[:yyrl4533]
				} else {
					yyv4533 = make([]VolumeMount, yyrl4533)
				}
			} else {
				yyv4533 = make([]VolumeMount, yyrl4533)
			}
			yyc4533 = true
			yyrr4533 = len(yyv4533)
			if yyrg4533 {
				copy(yyv4533, yyv24533)
			}
		} else if yyl4533 != len(yyv4533) {
			yyv4533 = yyv4533[:yyl4533]
			yyc4533 = true
		}
		yyj4533 := 0
		for ; yyj4533 < yyrr4533; yyj4533++ {
			yyh4533.ElemContainerState(yyj4533)
			if r.TryDecodeAsNil() {
				yyv4533[yyj4533] = VolumeMount{}
			} else {
				yyv4534 := &yyv4533[yyj4533]
				yyv4534.CodecDecodeSelf(d)
			}

		}
		if yyrt4533 {
			for ; yyj4533 < yyl4533; yyj4533++ {
				yyv4533 = append(yyv4533, VolumeMount{})
				yyh4533.ElemContainerState(yyj4533)
				if r.TryDecodeAsNil() {
					yyv4533[yyj4533] = VolumeMount{}
				} else {
					yyv4535 := &yyv4533[yyj4533]
					yyv4535.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4533 := 0
		for ; !r.CheckBreak(); yyj4533++ {

			if yyj4533 >= len(yyv4533) {
				yyv4533 = append(yyv4533, VolumeMount{}) // var yyz4533 VolumeMount
				yyc4533 = true
			}
			yyh4533.ElemContainerState(yyj4533)
			if yyj4533 < len(yyv4533) {
				if r.TryDecodeAsNil() {
					yyv4533[yyj4533] = VolumeMount{}
				} else {
					yyv4536 := &yyv4533[yyj4533]
					yyv4536.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4533 < len(yyv4533) {
			yyv4533 = yyv4533[:yyj4533]
			yyc4533 = true
		} else if yyj4533 == 0 && yyv4533 == nil {
			yyv4533 = []VolumeMount{}
			yyc4533 = true
		}
	}
	yyh4533.End()
	if yyc4533 {
		*v = yyv4533
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4537 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4538 := &yyv4537
		yy4538.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4539 := *v
	yyh4539, yyl4539 := z.DecSliceHelperStart()
	var yyc4539 bool
	if yyl4539 == 0 {
		if yyv4539 == nil {
			yyv4539 = []Pod{}
			yyc4539 = true
		} else if len(yyv4539) != 0 {
			yyv4539 = yyv4539[:0]
			yyc4539 = true
		}
	} else if yyl4539 > 0 {
		var yyrr4539, yyrl4539 int
		var yyrt4539 bool
		if yyl4539 > cap(yyv4539) {

			yyrg4539 := len(yyv4539) > 0
			yyv24539 := yyv4539
			yyrl4539, yyrt4539 = z.DecInferLen(yyl4539, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4539 {
				if yyrl4539 <= cap(yyv4539) {
					yyv4539 = yyv4539[:yyrl4539]
				} else {
					yyv4539 = make([]Pod, yyrl4539)
				}
			} else {
				yyv4539 = make([]Pod, yyrl4539)
			}
			yyc4539 = true
			yyrr4539 = len(yyv4539)
			if yyrg4539 {
				copy(yyv4539, yyv24539)
			}
		} else if yyl4539 != len(yyv4539) {
			yyv4539 = yyv4539[:yyl4539]
			yyc4539 = true
		}
		yyj4539 := 0
		for ; yyj4539 < yyrr4539; yyj4539++ {
			yyh4539.ElemContainerState(yyj4539)
			if r.TryDecodeAsNil() {
				yyv4539[yyj4539] = Pod{}
			} else {
				yyv4540 := &yyv4539[yyj4539]
				yyv4540.CodecDecodeSelf(d)
			}

		}
		if yyrt4539 {
			for ; yyj4539 < yyl4539; yyj4539++ {
				yyv4539 = append(yyv4539, Pod{})
				yyh4539.ElemContainerState(yyj4539)
				if r.TryDecodeAsNil() {
					yyv4539[yyj4539] = Pod{}
				} else {
					yyv4541 := &yyv4539[yyj4539]
					yyv4541.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4539 := 0
		for ; !r.CheckBreak(); yyj4539++ {

			if yyj4539 >= len(yyv4539) {
				yyv4539 = append(yyv4539, Pod{}) // var yyz4539 Pod
				yyc4539 = true
			}
			yyh4539.ElemContainerState(yyj4539)
			if yyj4539 < len(yyv4539) {
				if r.TryDecodeAsNil() {
					yyv4539[yyj4539] = Pod{}
				} else {
					yyv4542 := &yyv4539[yyj4539]
					yyv4542.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4539 < len(yyv4539) {
			yyv4539 = yyv4539[:yyj4539]
			yyc4539 = true
		} else if yyj4539 == 0 && yyv4539 == nil {
			yyv4539 = []Pod{}
			yyc4539 = true
		}
	}
	yyh4539.End()
	if yyc4539 {
		*v = yyv4539
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4543 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4544 := &yyv4543
		yy4544.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4545 := *v
	yyh4545, yyl4545 := z.DecSliceHelperStart()
	var yyc4545 bool
	if yyl4545 == 0 {
		if yyv4545 == nil {
			yyv4545 = []NodeSelectorTerm{}
			yyc4545 = true
		} else if len(yyv4545) != 0 {
			yyv4545 = yyv4545[:0]
			yyc4545 = true
		}
	} else if yyl4545 > 0 {
		var yyrr4545, yyrl4545 int
		var yyrt4545 bool
		if yyl4545 > cap(yyv4545) {

			yyrg4545 := len(yyv4545) > 0
			yyv24545 := yyv4545
			yyrl4545, yyrt4545 = z.DecInferLen(yyl4545, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4545 {
				if yyrl4545 <= cap(yyv4545) {
					yyv4545 = yyv4545[:yyrl4545]
				} else {
					yyv4545 = make([]NodeSelectorTerm, yyrl4545)
				}
			} else {
				yyv4545 = make([]NodeSelectorTerm, yyrl4545)
			}
			yyc4545 = true
			yyrr4545 = len(yyv4545)
			if yyrg4545 {
				copy(yyv4545, yyv24545)
			}
		} else if yyl4545 != len(yyv4545) {
			yyv4545 = yyv4545[:yyl4545]
			yyc4545 = true
		}
		yyj4545 := 0
		for ; yyj4545 < yyrr4545; yyj4545++ {
			yyh4545.ElemContainerState(yyj4545)
			if r.TryDecodeAsNil() {
				yyv4545[yyj4545] = NodeSelectorTerm{}
			} else {
				yyv4546 := &yyv4545[yyj4545]
				yyv4546.CodecDecodeSelf(d)
			}

		}
		if yyrt4545 {
			for ; yyj4545 < yyl4545; yyj4545++ {
				yyv4545 = append(yyv4545, NodeSelectorTerm{})
				yyh4545.ElemContainerState(yyj4545)
				if r.TryDecodeAsNil() {
					yyv4545[yyj4545] = NodeSelectorTerm{}
				} else {
					yyv4547 := &yyv4545[yyj4545]
					yyv4547.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4545 := 0
		for ; !r.CheckBreak(); yyj4545++ {

			if yyj4545 >= len(yyv4545) {
				yyv4545 = append(yyv4545, NodeSelectorTerm{}) // var yyz4545 NodeSelectorTerm
				yyc4545 = true
			}
			yyh4545.ElemContainerState(yyj4545)
			if yyj4545 < len(yyv4545) {
				if r.TryDecodeAsNil() {
					yyv4545[yyj4545] = NodeSelectorTerm{}
				} else {
					yyv4548 := &yyv4545[yyj4545]
					yyv4548.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4545 < len(yyv4545) {
			yyv4545 = yyv4545[:yyj4545]
			yyc4545 = true
		} else if yyj4545 == 0 && yyv4545 == nil {
			yyv4545 = []NodeSelectorTerm{}
			yyc4545 = true
		}
	}
	yyh4545.End()
	if yyc4545 {
		*v = yyv4545
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4549 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4550 := &yyv4549
		yy4550.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4551 := *v
	yyh4551, yyl4551 := z.DecSliceHelperStart()
	var yyc4551 bool
	if yyl4551 == 0 {
		if yyv4551 == nil {
			yyv4551 = []NodeSelectorRequirement{}
			yyc4551 = true
		} else if len(yyv4551) != 0 {
			yyv4551 = yyv4551[:0]
			yyc4551 = true
		}
	} else if yyl4551 > 0 {
		var yyrr4551, yyrl4551 int
		var yyrt4551 bool
		if yyl4551 > cap(yyv4551) {

			yyrg4551 := len(yyv4551) > 0
			yyv24551 := yyv4551
			yyrl4551, yyrt4551 = z.DecInferLen(yyl4551, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4551 {
				if yyrl4551 <= cap(yyv4551) {
					yyv4551 = yyv4551[:yyrl4551]
				} else {
					yyv4551 = make([]NodeSelectorRequirement, yyrl4551)
				}
			} else {
				yyv4551 = make([]NodeSelectorRequirement, yyrl4551)
			}
			yyc4551 = true
			yyrr4551 = len(yyv4551)
			if yyrg4551 {
				copy(yyv4551, yyv24551)
			}
		} else if yyl4551 != len(yyv4551) {
			yyv4551 = yyv4551[:yyl4551]
			yyc4551 = true
		}
		yyj4551 := 0
		for ; yyj4551 < yyrr4551; yyj4551++ {
			yyh4551.ElemContainerState(yyj4551)
			if r.TryDecodeAsNil() {
				yyv4551[yyj4551] = NodeSelectorRequirement{}
			} else {
				yyv4552 := &yyv4551[yyj4551]
				yyv4552.CodecDecodeSelf(d)
			}

		}
		if yyrt4551 {
			for ; yyj4551 < yyl4551; yyj4551++ {
				yyv4551 = append(yyv4551, NodeSelectorRequirement{})
				yyh4551.ElemContainerState(yyj4551)
				if r.TryDecodeAsNil() {
					yyv4551[yyj4551] = NodeSelectorRequirement{}
				} else {
					yyv4553 := &yyv4551[yyj4551]
					yyv4553.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4551 := 0
		for ; !r.CheckBreak(); yyj4551++ {

			if yyj4551 >= len(yyv4551) {
				yyv4551 = append(yyv4551, NodeSelectorRequirement{}) // var yyz4551 NodeSelectorRequirement
				yyc4551 = true
			}
			yyh4551.ElemContainerState(yyj4551)
			if yyj4551 < len(yyv4551) {
				if r.TryDecodeAsNil() {
					yyv4551[yyj4551] = NodeSelectorRequirement{}
				} else {
					yyv4554 := &yyv4551[yyj4551]
					yyv4554.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4551 < len(yyv4551) {
			yyv4551 = yyv4551[:yyj4551]
			yyc4551 = true
		} else if yyj4551 == 0 && yyv4551 == nil {
			yyv4551 = []NodeSelectorRequirement{}
			yyc4551 = true
		}
	}
	yyh4551.End()
	if yyc4551 {
		*v = yyv4551
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4555 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4556 := &yyv4555
		yy4556.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4557 := *v
	yyh4557, yyl4557 := z.DecSliceHelperStart()
	var yyc4557 bool
	if yyl4557 == 0 {
		if yyv4557 == nil {
			yyv4557 = []PodAffinityTerm{}
			yyc4557 = true
		} else if len(yyv4557) != 0 {
			yyv4557 = yyv4557[:0]
			yyc4557 = true
		}
	} else if yyl4557 > 0 {
		var yyrr4557, yyrl4557 int
		var yyrt4557 bool
		if yyl4557 > cap(yyv4557) {

			yyrg4557 := len(yyv4557) > 0
			yyv24557 := yyv4557
			yyrl4557, yyrt4557 = z.DecInferLen(yyl4557, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4557 {
				if yyrl4557 <= cap(yyv4557) {
					yyv4557 = yyv4557[:yyrl4557]
				} else {
					yyv4557 = make([]PodAffinityTerm, yyrl4557)
				}
			} else {
				yyv4557 = make([]PodAffinityTerm, yyrl4557)
			}
			yyc4557 = true
			yyrr4557 = len(yyv4557)
			if yyrg4557 {
				copy(yyv4557, yyv24557)
			}
		} else if yyl4557 != len(yyv4557) {
			yyv4557 = yyv4557[:yyl4557]
			yyc4557 = true
		}
		yyj4557 := 0
		for ; yyj4557 < yyrr4557; yyj4557++ {
			yyh4557.ElemContainerState(yyj4557)
			if r.TryDecodeAsNil() {
				yyv4557[yyj4557] = PodAffinityTerm{}
			} else {
				yyv4558 := &yyv4557[yyj4557]
				yyv4558.CodecDecodeSelf(d)
			}

		}
		if yyrt4557 {
			for ; yyj4557 < yyl4557; yyj4557++ {
				yyv4557 = append(yyv4557, PodAffinityTerm{})
				yyh4557.ElemContainerState(yyj4557)
				if r.TryDecodeAsNil() {
					yyv4557[yyj4557] = PodAffinityTerm{}
				} else {
					yyv4559 := &yyv4557[yyj4557]
					yyv4559.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4557 := 0
		for ; !r.CheckBreak(); yyj4557++ {

			if yyj4557 >= len(yyv4557) {
				yyv4557 = append(yyv4557, PodAffinityTerm{}) // var yyz4557 PodAffinityTerm
				yyc4557 = true
			}
			yyh4557.ElemContainerState(yyj4557)
			if yyj4557 < len(yyv4557) {
				if r.TryDecodeAsNil() {
					yyv4557[yyj4557] = PodAffinityTerm{}
				} else {
					yyv4560 := &yyv4557[yyj4557]
					yyv4560.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4557 < len(yyv4557) {
			yyv4557 = yyv4557[:yyj4557]
			yyc4557 = true
		} else if yyj4557 == 0 && yyv4557 == nil {
			yyv4557 = []PodAffinityTerm{}
			yyc4557 = true
		}
	}
	yyh4557.End()
	if yyc4557 {
		*v = yyv4557
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4561 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4562 := &yyv4561
		yy4562.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4563 := *v
	yyh4563, yyl4563 := z.DecSliceHelperStart()
	var yyc4563 bool
	if yyl4563 == 0 {
		if yyv4563 == nil {
			yyv4563 = []WeightedPodAffinityTerm{}
			yyc4563 = true
		} else if len(yyv4563) != 0 {
			yyv4563 = yyv4563[:0]
			yyc4563 = true
		}
	} else if yyl4563 > 0 {
		var yyrr4563, yyrl4563 int
		var yyrt4563 bool
		if yyl4563 > cap(yyv4563) {

			yyrg4563 := len(yyv4563) > 0
			yyv24563 := yyv4563
			yyrl4563, yyrt4563 = z.DecInferLen(yyl4563, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4563 {
				if yyrl4563 <= cap(yyv4563) {
					yyv4563 = yyv4563[:yyrl4563]
				} else {
					yyv4563 = make([]WeightedPodAffinityTerm, yyrl4563)
				}
			} else {
				yyv4563 = make([]WeightedPodAffinityTerm, yyrl4563)
			}
			yyc4563 = true
			yyrr4563 = len(yyv4563)
			if yyrg4563 {
				copy(yyv4563, yyv24563)
			}
		} else if yyl4563 != len(yyv4563) {
			yyv4563 = yyv4563[:yyl4563]
			yyc4563 = true
		}
		yyj4563 := 0
		for ; yyj4563 < yyrr4563; yyj4563++ {
			yyh4563.ElemContainerState(yyj4563)
			if r.TryDecodeAsNil() {
				yyv4563[yyj4563] = WeightedPodAffinityTerm{}
			} else {
				yyv4564 := &yyv4563[yyj4563]
				yyv4564.CodecDecodeSelf(d)
			}

		}
		if yyrt4563 {
			for ; yyj4563 < yyl4563; yyj4563++ {
				yyv4563 = append(yyv4563, WeightedPodAffinityTerm{})
				yyh4563.ElemContainerState(yyj4563)
				if r.TryDecodeAsNil() {
					yyv4563[yyj4563] = WeightedPodAffinityTerm{}
				} else {
					yyv4565 := &yyv4563[yyj4563]
					yyv4565.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4563 := 0
		for ; !r.CheckBreak(); yyj4563++ {

			if yyj4563 >= len(yyv4563) {
				yyv4563 = append(yyv4563, WeightedPodAffinityTerm{}) // var yyz4563 WeightedPodAffinityTerm
				yyc4563 = true
			}
			yyh4563.ElemContainerState(yyj4563)
			if yyj4563 < len(yyv4563) {
				if r.TryDecodeAsNil() {
					yyv4563[yyj4563] = WeightedPodAffinityTerm{}
				} else {
					yyv4566 := &yyv4563[yyj4563]
					yyv4566.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4563 < len(yyv4563) {
			yyv4563 = yyv4563[:yyj4563]
			yyc4563 = true
		} else if yyj4563 == 0 && yyv4563 == nil {
			yyv4563 = []WeightedPodAffinityTerm{}
			yyc4563 = true
		}
	}
	yyh4563.End()
	if yyc4563 {
		*v = yyv4563
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4567 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4568 := &yyv4567
		yy4568.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4569 := *v
	yyh4569, yyl4569 := z.DecSliceHelperStart()
	var yyc4569 bool
	if yyl4569 == 0 {
		if yyv4569 == nil {
			yyv4569 = []PreferredSchedulingTerm{}
			yyc4569 = true
		} else if len(yyv4569) != 0 {
			yyv4569 = yyv4569[:0]
			yyc4569 = true
		}
	} else if yyl4569 > 0 {
		var yyrr4569, yyrl4569 int
		var yyrt4569 bool
		if yyl4569 > cap(yyv4569) {

			yyrg4569 := len(yyv4569) > 0
			yyv24569 := yyv4569
			yyrl4569, yyrt4569 = z.DecInferLen(yyl4569, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4569 {
				if yyrl4569 <= cap(yyv4569) {
					yyv4569 = yyv4569[:yyrl4569]
				} else {
					yyv4569 = make([]PreferredSchedulingTerm, yyrl4569)
				}
			} else {
				yyv4569 = make([]PreferredSchedulingTerm, yyrl4569)
			}
			yyc4569 = true
			yyrr4569 = len(yyv4569)
			if yyrg4569 {
				copy(yyv4569, yyv24569)
			}
		} else if yyl4569 != len(yyv4569) {
			yyv4569 = yyv4569[:yyl4569]
			yyc4569 = true
		}
		yyj4569 := 0
		for ; yyj4569 < yyrr4569; yyj4569++ {
			yyh4569.ElemContainerState(yyj4569)
			if r.TryDecodeAsNil() {
				yyv4569[yyj4569] = PreferredSchedulingTerm{}
			} else {
				yyv4570 := &yyv4569[yyj4569]
				yyv4570.CodecDecodeSelf(d)
			}

		}
		if yyrt4569 {
			for ; yyj4569 < yyl4569; yyj4569++ {
				yyv4569 = append(yyv4569, PreferredSchedulingTerm{})
				yyh4569.ElemContainerState(yyj4569)
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = PreferredSchedulingTerm{}
				} else {
					yyv4571 := &yyv4569[yyj4569]
					yyv4571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4569 := 0
		for ; !r.CheckBreak(); yyj4569++ {

			if yyj4569 >= len(yyv4569) {
				yyv4569 = append(yyv4569, PreferredSchedulingTerm{}) // var yyz4569 PreferredSchedulingTerm
				yyc4569 = true
			}
			yyh4569.ElemContainerState(yyj4569)
			if yyj4569 < len(yyv4569) {
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = PreferredSchedulingTerm{}
				} else {
					yyv4572 := &yyv4569[yyj4569]
					yyv4572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4569 < len(yyv4569) {
			yyv4569 = yyv4569[:yyj4569]
			yyc4569 = true
		} else if yyj4569 == 0 && yyv4569 == nil {
			yyv4569 = []PreferredSchedulingTerm{}
			yyc4569 = true
		}
	}
	yyh4569.End()
	if yyc4569 {
		*v = yyv4569
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4573 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4574 := &yyv4573
		yy4574.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4575 := *v
	yyh4575, yyl4575 := z.DecSliceHelperStart()
	var yyc4575 bool
	if yyl4575 == 0 {
		if yyv4575 == nil {
			yyv4575 = []Volume{}
			yyc4575 = true
		} else if len(yyv4575) != 0 {
			yyv4575 = yyv4575[:0]
			yyc4575 = true
		}
	} else if yyl4575 > 0 {
		var yyrr4575, yyrl4575 int
		var yyrt4575 bool
		if yyl4575 > cap(yyv4575) {

			yyrg4575 := len(yyv4575) > 0
			yyv24575 := yyv4575
			yyrl4575, yyrt4575 = z.DecInferLen(yyl4575, z.DecBasicHandle().MaxInitLen, 184)
			if yyrt4575 {
				if yyrl4575 <= cap(yyv4575) {
					yyv4575 = yyv4575[:yyrl4575]
				} else {
					yyv4575 = make([]Volume, yyrl4575)
				}
			} else {
				yyv4575 = make([]Volume, yyrl4575)
			}
			yyc4575 = true
			yyrr4575 = len(yyv4575)
			if yyrg4575 {
				copy(yyv4575, yyv24575)
			}
		} else if yyl4575 != len(yyv4575) {
			yyv4575 = yyv4575[:yyl4575]
			yyc4575 = true
		}
		yyj4575 := 0
		for ; yyj4575 < yyrr4575; yyj4575++ {
			yyh4575.ElemContainerState(yyj4575)
			if r.TryDecodeAsNil() {
				yyv4575[yyj4575] = Volume{}
			} else {
				yyv4576 := &yyv4575[yyj4575]
				yyv4576.CodecDecodeSelf(d)
			}

		}
		if yyrt4575 {
			for ; yyj4575 < yyl4575; yyj4575++ {
				yyv4575 = append(yyv4575, Volume{})
				yyh4575.ElemContainerState(yyj4575)
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = Volume{}
				} else {
					yyv4577 := &yyv4575[yyj4575]
					yyv4577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4575 := 0
		for ; !r.CheckBreak(); yyj4575++ {

			if yyj4575 >= len(yyv4575) {
				yyv4575 = append(yyv4575, Volume{}) // var yyz4575 Volume
				yyc4575 = true
			}
			yyh4575.ElemContainerState(yyj4575)
			if yyj4575 < len(yyv4575) {
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = Volume{}
				} else {
					yyv4578 := &yyv4575[yyj4575]
					yyv4578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4575 < len(yyv4575) {
			yyv4575 = yyv4575[:yyj4575]
			yyc4575 = true
		} else if yyj4575 == 0 && yyv4575 == nil {
			yyv4575 = []Volume{}
			yyc4575 = true
		}
	}
	yyh4575.End()
	if yyc4575 {
		*v = yyv4575
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4579 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4580 := &yyv4579
		yy4580.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4581 := *v
	yyh4581, yyl4581 := z.DecSliceHelperStart()
	var yyc4581 bool
	if yyl4581 == 0 {
		if yyv4581 == nil {
			yyv4581 = []Container{}
			yyc4581 = true
		} else if len(yyv4581) != 0 {
			yyv4581 = yyv4581[:0]
			yyc4581 = true
		}
	} else if yyl4581 > 0 {
		var yyrr4581, yyrl4581 int
		var yyrt4581 bool
		if yyl4581 > cap(yyv4581) {

			yyrg4581 := len(yyv4581) > 0
			yyv24581 := yyv4581
			yyrl4581, yyrt4581 = z.DecInferLen(yyl4581, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4581 {
				if yyrl4581 <= cap(yyv4581) {
					yyv4581 = yyv4581[:yyrl4581]
				} else {
					yyv4581 = make([]Container, yyrl4581)
				}
			} else {
				yyv4581 = make([]Container, yyrl4581)
			}
			yyc4581 = true
			yyrr4581 = len(yyv4581)
			if yyrg4581 {
				copy(yyv4581, yyv24581)
			}
		} else if yyl4581 != len(yyv4581) {
			yyv4581 = yyv4581[:yyl4581]
			yyc4581 = true
		}
		yyj4581 := 0
		for ; yyj4581 < yyrr4581; yyj4581++ {
			yyh4581.ElemContainerState(yyj4581)
			if r.TryDecodeAsNil() {
				yyv4581[yyj4581] = Container{}
			} else {
				yyv4582 := &yyv4581[yyj4581]
				yyv4582.CodecDecodeSelf(d)
			}

		}
		if yyrt4581 {
			for ; yyj4581 < yyl4581; yyj4581++ {
				yyv4581 = append(yyv4581, Container{})
				yyh4581.ElemContainerState(yyj4581)
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = Container{}
				} else {
					yyv4583 := &yyv4581[yyj4581]
					yyv4583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4581 := 0
		for ; !r.CheckBreak(); yyj4581++ {

			if yyj4581 >= len(yyv4581) {
				yyv4581 = append(yyv4581, Container{}) // var yyz4581 Container
				yyc4581 = true
			}
			yyh4581.ElemContainerState(yyj4581)
			if yyj4581 < len(yyv4581) {
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = Container{}
				} else {
					yyv4584 := &yyv4581[yyj4581]
					yyv4584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4581 < len(yyv4581) {
			yyv4581 = yyv4581[:yyj4581]
			yyc4581 = true
		} else if yyj4581 == 0 && yyv4581 == nil {
			yyv4581 = []Container{}
			yyc4581 = true
		}
	}
	yyh4581.End()
	if yyc4581 {
		*v = yyv4581
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4585 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4586 := &yyv4585
		yy4586.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4587 := *v
	yyh4587, yyl4587 := z.DecSliceHelperStart()
	var yyc4587 bool
	if yyl4587 == 0 {
		if yyv4587 == nil {
			yyv4587 = []LocalObjectReference{}
			yyc4587 = true
		} else if len(yyv4587) != 0 {
			yyv4587 = yyv4587[:0]
			yyc4587 = true
		}
	} else if yyl4587 > 0 {
		var yyrr4587, yyrl4587 int
		var yyrt4587 bool
		if yyl4587 > cap(yyv4587) {

			yyrg4587 := len(yyv4587) > 0
			yyv24587 := yyv4587
			yyrl4587, yyrt4587 = z.DecInferLen(yyl4587, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4587 {
				if yyrl4587 <= cap(yyv4587) {
					yyv4587 = yyv4587[:yyrl4587]
				} else {
					yyv4587 = make([]LocalObjectReference, yyrl4587)
				}
			} else {
				yyv4587 = make([]LocalObjectReference, yyrl4587)
			}
			yyc4587 = true
			yyrr4587 = len(yyv4587)
			if yyrg4587 {
				copy(yyv4587, yyv24587)
			}
		} else if yyl4587 != len(yyv4587) {
			yyv4587 = yyv4587[:yyl4587]
			yyc4587 = true
		}
		yyj4587 := 0
		for ; yyj4587 < yyrr4587; yyj4587++ {
			yyh4587.ElemContainerState(yyj4587)
			if r.TryDecodeAsNil() {
				yyv4587[yyj4587] = LocalObjectReference{}
			} else {
				yyv4588 := &yyv4587[yyj4587]
				yyv4588.CodecDecodeSelf(d)
			}

		}
		if yyrt4587 {
			for ; yyj4587 < yyl4587; yyj4587++ {
				yyv4587 = append(yyv4587, LocalObjectReference{})
				yyh4587.ElemContainerState(yyj4587)
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = LocalObjectReference{}
				} else {
					yyv4589 := &yyv4587[yyj4587]
					yyv4589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4587 := 0
		for ; !r.CheckBreak(); yyj4587++ {

			if yyj4587 >= len(yyv4587) {
				yyv4587 = append(yyv4587, LocalObjectReference{}) // var yyz4587 LocalObjectReference
				yyc4587 = true
			}
			yyh4587.ElemContainerState(yyj4587)
			if yyj4587 < len(yyv4587) {
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = LocalObjectReference{}
				} else {
					yyv4590 := &yyv4587[yyj4587]
					yyv4590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4587 < len(yyv4587) {
			yyv4587 = yyv4587[:yyj4587]
			yyc4587 = true
		} else if yyj4587 == 0 && yyv4587 == nil {
			yyv4587 = []LocalObjectReference{}
			yyc4587 = true
		}
	}
	yyh4587.End()
	if yyc4587 {
		*v = yyv4587
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4591 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4592 := &yyv4591
		yy4592.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4593 := *v
	yyh4593, yyl4593 := z.DecSliceHelperStart()
	var yyc4593 bool
	if yyl4593 == 0 {
		if yyv4593 == nil {
			yyv4593 = []PodCondition{}
			yyc4593 = true
		} else if len(yyv4593) != 0 {
			yyv4593 = yyv4593[:0]
			yyc4593 = true
		}
	} else if yyl4593 > 0 {
		var yyrr4593, yyrl4593 int
		var yyrt4593 bool
		if yyl4593 > cap(yyv4593) {

			yyrg4593 := len(yyv4593) > 0
			yyv24593 := yyv4593
			yyrl4593, yyrt4593 = z.DecInferLen(yyl4593, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4593 {
				if yyrl4593 <= cap(yyv4593) {
					yyv4593 = yyv4593[:yyrl4593]
				} else {
					yyv4593 = make([]PodCondition, yyrl4593)
				}
			} else {
				yyv4593 = make([]PodCondition, yyrl4593)
			}
			yyc4593 = true
			yyrr4593 = len(yyv4593)
			if yyrg4593 {
				copy(yyv4593, yyv24593)
			}
		} else if yyl4593 != len(yyv4593) {
			yyv4593 = yyv4593[:yyl4593]
			yyc4593 = true
		}
		yyj4593 := 0
		for ; yyj4593 < yyrr4593; yyj4593++ {
			yyh4593.ElemContainerState(yyj4593)
			if r.TryDecodeAsNil() {
				yyv4593[yyj4593] = PodCondition{}
			} else {
				yyv4594 := &yyv4593[yyj4593]
				yyv4594.CodecDecodeSelf(d)
			}

		}
		if yyrt4593 {
			for ; yyj4593 < yyl4593; yyj4593++ {
				yyv4593 = append(yyv4593, PodCondition{})
				yyh4593.ElemContainerState(yyj4593)
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = PodCondition{}
				} else {
					yyv4595 := &yyv4593[yyj4593]
					yyv4595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4593 := 0
		for ; !r.CheckBreak(); yyj4593++ {

			if yyj4593 >= len(yyv4593) {
				yyv4593 = append(yyv4593, PodCondition{}) // var yyz4593 PodCondition
				yyc4593 = true
			}
			yyh4593.ElemContainerState(yyj4593)
			if yyj4593 < len(yyv4593) {
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = PodCondition{}
				} else {
					yyv4596 := &yyv4593[yyj4593]
					yyv4596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4593 < len(yyv4593) {
			yyv4593 = yyv4593[:yyj4593]
			yyc4593 = true
		} else if yyj4593 == 0 && yyv4593 == nil {
			yyv4593 = []PodCondition{}
			yyc4593 = true
		}
	}
	yyh4593.End()
	if yyc4593 {
		*v = yyv4593
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4598 := &yyv4597
		yy4598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4599 := *v
	yyh4599, yyl4599 := z.DecSliceHelperStart()
	var yyc4599 bool
	if yyl4599 == 0 {
		if yyv4599 == nil {
			yyv4599 = []ContainerStatus{}
			yyc4599 = true
		} else if len(yyv4599) != 0 {
			yyv4599 = yyv4599[:0]
			yyc4599 = true
		}
	} else if yyl4599 > 0 {
		var yyrr4599, yyrl4599 int
		var yyrt4599 bool
		if yyl4599 > cap(yyv4599) {

			yyrg4599 := len(yyv4599) > 0
			yyv24599 := yyv4599
			yyrl4599, yyrt4599 = z.DecInferLen(yyl4599, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4599 {
				if yyrl4599 <= cap(yyv4599) {
					yyv4599 = yyv4599[:yyrl4599]
				} else {
					yyv4599 = make([]ContainerStatus, yyrl4599)
				}
			} else {
				yyv4599 = make([]ContainerStatus, yyrl4599)
			}
			yyc4599 = true
			yyrr4599 = len(yyv4599)
			if yyrg4599 {
				copy(yyv4599, yyv24599)
			}
		} else if yyl4599 != len(yyv4599) {
			yyv4599 = yyv4599[:yyl4599]
			yyc4599 = true
		}
		yyj4599 := 0
		for ; yyj4599 < yyrr4599; yyj4599++ {
			yyh4599.ElemContainerState(yyj4599)
			if r.TryDecodeAsNil() {
				yyv4599[yyj4599] = ContainerStatus{}
			} else {
				yyv4600 := &yyv4599[yyj4599]
				yyv4600.CodecDecodeSelf(d)
			}

		}
		if yyrt4599 {
			for ; yyj4599 < yyl4599; yyj4599++ {
				yyv4599 = append(yyv4599, ContainerStatus{})
				yyh4599.ElemContainerState(yyj4599)
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = ContainerStatus{}
				} else {
					yyv4601 := &yyv4599[yyj4599]
					yyv4601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4599 := 0
		for ; !r.CheckBreak(); yyj4599++ {

			if yyj4599 >= len(yyv4599) {
				yyv4599 = append(yyv4599, ContainerStatus{}) // var yyz4599 ContainerStatus
				yyc4599 = true
			}
			yyh4599.ElemContainerState(yyj4599)
			if yyj4599 < len(yyv4599) {
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = ContainerStatus{}
				} else {
					yyv4602 := &yyv4599[yyj4599]
					yyv4602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4599 < len(yyv4599) {
			yyv4599 = yyv4599[:yyj4599]
			yyc4599 = true
		} else if yyj4599 == 0 && yyv4599 == nil {
			yyv4599 = []ContainerStatus{}
			yyc4599 = true
		}
	}
	yyh4599.End()
	if yyc4599 {
		*v = yyv4599
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4604 := &yyv4603
		yy4604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4605 := *v
	yyh4605, yyl4605 := z.DecSliceHelperStart()
	var yyc4605 bool
	if yyl4605 == 0 {
		if yyv4605 == nil {
			yyv4605 = []PodTemplate{}
			yyc4605 = true
		} else if len(yyv4605) != 0 {
			yyv4605 = yyv4605[:0]
			yyc4605 = true
		}
	} else if yyl4605 > 0 {
		var yyrr4605, yyrl4605 int
		var yyrt4605 bool
		if yyl4605 > cap(yyv4605) {

			yyrg4605 := len(yyv4605) > 0
			yyv24605 := yyv4605
			yyrl4605, yyrt4605 = z.DecInferLen(yyl4605, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4605 {
				if yyrl4605 <= cap(yyv4605) {
					yyv4605 = yyv4605[:yyrl4605]
				} else {
					yyv4605 = make([]PodTemplate, yyrl4605)
				}
			} else {
				yyv4605 = make([]PodTemplate, yyrl4605)
			}
			yyc4605 = true
			yyrr4605 = len(yyv4605)
			if yyrg4605 {
				copy(yyv4605, yyv24605)
			}
		} else if yyl4605 != len(yyv4605) {
			yyv4605 = yyv4605[:yyl4605]
			yyc4605 = true
		}
		yyj4605 := 0
		for ; yyj4605 < yyrr4605; yyj4605++ {
			yyh4605.ElemContainerState(yyj4605)
			if r.TryDecodeAsNil() {
				yyv4605[yyj4605] = PodTemplate{}
			} else {
				yyv4606 := &yyv4605[yyj4605]
				yyv4606.CodecDecodeSelf(d)
			}

		}
		if yyrt4605 {
			for ; yyj4605 < yyl4605; yyj4605++ {
				yyv4605 = append(yyv4605, PodTemplate{})
				yyh4605.ElemContainerState(yyj4605)
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PodTemplate{}
				} else {
					yyv4607 := &yyv4605[yyj4605]
					yyv4607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4605 := 0
		for ; !r.CheckBreak(); yyj4605++ {

			if yyj4605 >= len(yyv4605) {
				yyv4605 = append(yyv4605, PodTemplate{}) // var yyz4605 PodTemplate
				yyc4605 = true
			}
			yyh4605.ElemContainerState(yyj4605)
			if yyj4605 < len(yyv4605) {
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PodTemplate{}
				} else {
					yyv4608 := &yyv4605[yyj4605]
					yyv4608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4605 < len(yyv4605) {
			yyv4605 = yyv4605[:yyj4605]
			yyc4605 = true
		} else if yyj4605 == 0 && yyv4605 == nil {
			yyv4605 = []PodTemplate{}
			yyc4605 = true
		}
	}
	yyh4605.End()
	if yyc4605 {
		*v = yyv4605
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4609 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4610 := &yyv4609
		yy4610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4611 := *v
	yyh4611, yyl4611 := z.DecSliceHelperStart()
	var yyc4611 bool
	if yyl4611 == 0 {
		if yyv4611 == nil {
			yyv4611 = []ReplicationController{}
			yyc4611 = true
		} else if len(yyv4611) != 0 {
			yyv4611 = yyv4611[:0]
			yyc4611 = true
		}
	} else if yyl4611 > 0 {
		var yyrr4611, yyrl4611 int
		var yyrt4611 bool
		if yyl4611 > cap(yyv4611) {

			yyrg4611 := len(yyv4611) > 0
			yyv24611 := yyv4611
			yyrl4611, yyrt4611 = z.DecInferLen(yyl4611, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4611 {
				if yyrl4611 <= cap(yyv4611) {
					yyv4611 = yyv4611[:yyrl4611]
				} else {
					yyv4611 = make([]ReplicationController, yyrl4611)
				}
			} else {
				yyv4611 = make([]ReplicationController, yyrl4611)
			}
			yyc4611 = true
			yyrr4611 = len(yyv4611)
			if yyrg4611 {
				copy(yyv4611, yyv24611)
			}
		} else if yyl4611 != len(yyv4611) {
			yyv4611 = yyv4611[:yyl4611]
			yyc4611 = true
		}
		yyj4611 := 0
		for ; yyj4611 < yyrr4611; yyj4611++ {
			yyh4611.ElemContainerState(yyj4611)
			if r.TryDecodeAsNil() {
				yyv4611[yyj4611] = ReplicationController{}
			} else {
				yyv4612 := &yyv4611[yyj4611]
				yyv4612.CodecDecodeSelf(d)
			}

		}
		if yyrt4611 {
			for ; yyj4611 < yyl4611; yyj4611++ {
				yyv4611 = append(yyv4611, ReplicationController{})
				yyh4611.ElemContainerState(yyj4611)
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = ReplicationController{}
				} else {
					yyv4613 := &yyv4611[yyj4611]
					yyv4613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4611 := 0
		for ; !r.CheckBreak(); yyj4611++ {

			if yyj4611 >= len(yyv4611) {
				yyv4611 = append(yyv4611, ReplicationController{}) // var yyz4611 ReplicationController
				yyc4611 = true
			}
			yyh4611.ElemContainerState(yyj4611)
			if yyj4611 < len(yyv4611) {
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = ReplicationController{}
				} else {
					yyv4614 := &yyv4611[yyj4611]
					yyv4614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4611 < len(yyv4611) {
			yyv4611 = yyv4611[:yyj4611]
			yyc4611 = true
		} else if yyj4611 == 0 && yyv4611 == nil {
			yyv4611 = []ReplicationController{}
			yyc4611 = true
		}
	}
	yyh4611.End()
	if yyc4611 {
		*v = yyv4611
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4616 := &yyv4615
		yy4616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4617 := *v
	yyh4617, yyl4617 := z.DecSliceHelperStart()
	var yyc4617 bool
	if yyl4617 == 0 {
		if yyv4617 == nil {
			yyv4617 = []Service{}
			yyc4617 = true
		} else if len(yyv4617) != 0 {
			yyv4617 = yyv4617[:0]
			yyc4617 = true
		}
	} else if yyl4617 > 0 {
		var yyrr4617, yyrl4617 int
		var yyrt4617 bool
		if yyl4617 > cap(yyv4617) {

			yyrg4617 := len(yyv4617) > 0
			yyv24617 := yyv4617
			yyrl4617, yyrt4617 = z.DecInferLen(yyl4617, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4617 {
				if yyrl4617 <= cap(yyv4617) {
					yyv4617 = yyv4617[:yyrl4617]
				} else {
					yyv4617 = make([]Service, yyrl4617)
				}
			} else {
				yyv4617 = make([]Service, yyrl4617)
			}
			yyc4617 = true
			yyrr4617 = len(yyv4617)
			if yyrg4617 {
				copy(yyv4617, yyv24617)
			}
		} else if yyl4617 != len(yyv4617) {
			yyv4617 = yyv4617[:yyl4617]
			yyc4617 = true
		}
		yyj4617 := 0
		for ; yyj4617 < yyrr4617; yyj4617++ {
			yyh4617.ElemContainerState(yyj4617)
			if r.TryDecodeAsNil() {
				yyv4617[yyj4617] = Service{}
			} else {
				yyv4618 := &yyv4617[yyj4617]
				yyv4618.CodecDecodeSelf(d)
			}

		}
		if yyrt4617 {
			for ; yyj4617 < yyl4617; yyj4617++ {
				yyv4617 = append(yyv4617, Service{})
				yyh4617.ElemContainerState(yyj4617)
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = Service{}
				} else {
					yyv4619 := &yyv4617[yyj4617]
					yyv4619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4617 := 0
		for ; !r.CheckBreak(); yyj4617++ {

			if yyj4617 >= len(yyv4617) {
				yyv4617 = append(yyv4617, Service{}) // var yyz4617 Service
				yyc4617 = true
			}
			yyh4617.ElemContainerState(yyj4617)
			if yyj4617 < len(yyv4617) {
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = Service{}
				} else {
					yyv4620 := &yyv4617[yyj4617]
					yyv4620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4617 < len(yyv4617) {
			yyv4617 = yyv4617[:yyj4617]
			yyc4617 = true
		} else if yyj4617 == 0 && yyv4617 == nil {
			yyv4617 = []Service{}
			yyc4617 = true
		}
	}
	yyh4617.End()
	if yyc4617 {
		*v = yyv4617
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4622 := &yyv4621
		yy4622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4623 := *v
	yyh4623, yyl4623 := z.DecSliceHelperStart()
	var yyc4623 bool
	if yyl4623 == 0 {
		if yyv4623 == nil {
			yyv4623 = []LoadBalancerIngress{}
			yyc4623 = true
		} else if len(yyv4623) != 0 {
			yyv4623 = yyv4623[:0]
			yyc4623 = true
		}
	} else if yyl4623 > 0 {
		var yyrr4623, yyrl4623 int
		var yyrt4623 bool
		if yyl4623 > cap(yyv4623) {

			yyrg4623 := len(yyv4623) > 0
			yyv24623 := yyv4623
			yyrl4623, yyrt4623 = z.DecInferLen(yyl4623, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4623 {
				if yyrl4623 <= cap(yyv4623) {
					yyv4623 = yyv4623[:yyrl4623]
				} else {
					yyv4623 = make([]LoadBalancerIngress, yyrl4623)
				}
			} else {
				yyv4623 = make([]LoadBalancerIngress, yyrl4623)
			}
			yyc4623 = true
			yyrr4623 = len(yyv4623)
			if yyrg4623 {
				copy(yyv4623, yyv24623)
			}
		} else if yyl4623 != len(yyv4623) {
			yyv4623 = yyv4623[:yyl4623]
			yyc4623 = true
		}
		yyj4623 := 0
		for ; yyj4623 < yyrr4623; yyj4623++ {
			yyh4623.ElemContainerState(yyj4623)
			if r.TryDecodeAsNil() {
				yyv4623[yyj4623] = LoadBalancerIngress{}
			} else {
				yyv4624 := &yyv4623[yyj4623]
				yyv4624.CodecDecodeSelf(d)
			}

		}
		if yyrt4623 {
			for ; yyj4623 < yyl4623; yyj4623++ {
				yyv4623 = append(yyv4623, LoadBalancerIngress{})
				yyh4623.ElemContainerState(yyj4623)
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = LoadBalancerIngress{}
				} else {
					yyv4625 := &yyv4623[yyj4623]
					yyv4625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4623 := 0
		for ; !r.CheckBreak(); yyj4623++ {

			if yyj4623 >= len(yyv4623) {
				yyv4623 = append(yyv4623, LoadBalancerIngress{}) // var yyz4623 LoadBalancerIngress
				yyc4623 = true
			}
			yyh4623.ElemContainerState(yyj4623)
			if yyj4623 < len(yyv4623) {
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = LoadBalancerIngress{}
				} else {
					yyv4626 := &yyv4623[yyj4623]
					yyv4626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4623 < len(yyv4623) {
			yyv4623 = yyv4623[:yyj4623]
			yyc4623 = true
		} else if yyj4623 == 0 && yyv4623 == nil {
			yyv4623 = []LoadBalancerIngress{}
			yyc4623 = true
		}
	}
	yyh4623.End()
	if yyc4623 {
		*v = yyv4623
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4628 := &yyv4627
		yy4628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4629 := *v
	yyh4629, yyl4629 := z.DecSliceHelperStart()
	var yyc4629 bool
	if yyl4629 == 0 {
		if yyv4629 == nil {
			yyv4629 = []ServicePort{}
			yyc4629 = true
		} else if len(yyv4629) != 0 {
			yyv4629 = yyv4629[:0]
			yyc4629 = true
		}
	} else if yyl4629 > 0 {
		var yyrr4629, yyrl4629 int
		var yyrt4629 bool
		if yyl4629 > cap(yyv4629) {

			yyrg4629 := len(yyv4629) > 0
			yyv24629 := yyv4629
			yyrl4629, yyrt4629 = z.DecInferLen(yyl4629, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4629 {
				if yyrl4629 <= cap(yyv4629) {
					yyv4629 = yyv4629[:yyrl4629]
				} else {
					yyv4629 = make([]ServicePort, yyrl4629)
				}
			} else {
				yyv4629 = make([]ServicePort, yyrl4629)
			}
			yyc4629 = true
			yyrr4629 = len(yyv4629)
			if yyrg4629 {
				copy(yyv4629, yyv24629)
			}
		} else if yyl4629 != len(yyv4629) {
			yyv4629 = yyv4629[:yyl4629]
			yyc4629 = true
		}
		yyj4629 := 0
		for ; yyj4629 < yyrr4629; yyj4629++ {
			yyh4629.ElemContainerState(yyj4629)
			if r.TryDecodeAsNil() {
				yyv4629[yyj4629] = ServicePort{}
			} else {
				yyv4630 := &yyv4629[yyj4629]
				yyv4630.CodecDecodeSelf(d)
			}

		}
		if yyrt4629 {
			for ; yyj4629 < yyl4629; yyj4629++ {
				yyv4629 = append(yyv4629, ServicePort{})
				yyh4629.ElemContainerState(yyj4629)
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = ServicePort{}
				} else {
					yyv4631 := &yyv4629[yyj4629]
					yyv4631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4629 := 0
		for ; !r.CheckBreak(); yyj4629++ {

			if yyj4629 >= len(yyv4629) {
				yyv4629 = append(yyv4629, ServicePort{}) // var yyz4629 ServicePort
				yyc4629 = true
			}
			yyh4629.ElemContainerState(yyj4629)
			if yyj4629 < len(yyv4629) {
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = ServicePort{}
				} else {
					yyv4632 := &yyv4629[yyj4629]
					yyv4632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4629 < len(yyv4629) {
			yyv4629 = yyv4629[:yyj4629]
			yyc4629 = true
		} else if yyj4629 == 0 && yyv4629 == nil {
			yyv4629 = []ServicePort{}
			yyc4629 = true
		}
	}
	yyh4629.End()
	if yyc4629 {
		*v = yyv4629
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4634 := &yyv4633
		yy4634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4635 := *v
	yyh4635, yyl4635 := z.DecSliceHelperStart()
	var yyc4635 bool
	if yyl4635 == 0 {
		if yyv4635 == nil {
			yyv4635 = []ObjectReference{}
			yyc4635 = true
		} else if len(yyv4635) != 0 {
			yyv4635 = yyv4635[:0]
			yyc4635 = true
		}
	} else if yyl4635 > 0 {
		var yyrr4635, yyrl4635 int
		var yyrt4635 bool
		if yyl4635 > cap(yyv4635) {

			yyrg4635 := len(yyv4635) > 0
			yyv24635 := yyv4635
			yyrl4635, yyrt4635 = z.DecInferLen(yyl4635, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4635 {
				if yyrl4635 <= cap(yyv4635) {
					yyv4635 = yyv4635[:yyrl4635]
				} else {
					yyv4635 = make([]ObjectReference, yyrl4635)
				}
			} else {
				yyv4635 = make([]ObjectReference, yyrl4635)
			}
			yyc4635 = true
			yyrr4635 = len(yyv4635)
			if yyrg4635 {
				copy(yyv4635, yyv24635)
			}
		} else if yyl4635 != len(yyv4635) {
			yyv4635 = yyv4635[:yyl4635]
			yyc4635 = true
		}
		yyj4635 := 0
		for ; yyj4635 < yyrr4635; yyj4635++ {
			yyh4635.ElemContainerState(yyj4635)
			if r.TryDecodeAsNil() {
				yyv4635[yyj4635] = ObjectReference{}
			} else {
				yyv4636 := &yyv4635[yyj4635]
				yyv4636.CodecDecodeSelf(d)
			}

		}
		if yyrt4635 {
			for ; yyj4635 < yyl4635; yyj4635++ {
				yyv4635 = append(yyv4635, ObjectReference{})
				yyh4635.ElemContainerState(yyj4635)
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = ObjectReference{}
				} else {
					yyv4637 := &yyv4635[yyj4635]
					yyv4637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4635 := 0
		for ; !r.CheckBreak(); yyj4635++ {

			if yyj4635 >= len(yyv4635) {
				yyv4635 = append(yyv4635, ObjectReference{}) // var yyz4635 ObjectReference
				yyc4635 = true
			}
			yyh4635.ElemContainerState(yyj4635)
			if yyj4635 < len(yyv4635) {
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = ObjectReference{}
				} else {
					yyv4638 := &yyv4635[yyj4635]
					yyv4638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4635 < len(yyv4635) {
			yyv4635 = yyv4635[:yyj4635]
			yyc4635 = true
		} else if yyj4635 == 0 && yyv4635 == nil {
			yyv4635 = []ObjectReference{}
			yyc4635 = true
		}
	}
	yyh4635.End()
	if yyc4635 {
		*v = yyv4635
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4640 := &yyv4639
		yy4640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4641 := *v
	yyh4641, yyl4641 := z.DecSliceHelperStart()
	var yyc4641 bool
	if yyl4641 == 0 {
		if yyv4641 == nil {
			yyv4641 = []ServiceAccount{}
			yyc4641 = true
		} else if len(yyv4641) != 0 {
			yyv4641 = yyv4641[:0]
			yyc4641 = true
		}
	} else if yyl4641 > 0 {
		var yyrr4641, yyrl4641 int
		var yyrt4641 bool
		if yyl4641 > cap(yyv4641) {

			yyrg4641 := len(yyv4641) > 0
			yyv24641 := yyv4641
			yyrl4641, yyrt4641 = z.DecInferLen(yyl4641, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4641 {
				if yyrl4641 <= cap(yyv4641) {
					yyv4641 = yyv4641[:yyrl4641]
				} else {
					yyv4641 = make([]ServiceAccount, yyrl4641)
				}
			} else {
				yyv4641 = make([]ServiceAccount, yyrl4641)
			}
			yyc4641 = true
			yyrr4641 = len(yyv4641)
			if yyrg4641 {
				copy(yyv4641, yyv24641)
			}
		} else if yyl4641 != len(yyv4641) {
			yyv4641 = yyv4641[:yyl4641]
			yyc4641 = true
		}
		yyj4641 := 0
		for ; yyj4641 < yyrr4641; yyj4641++ {
			yyh4641.ElemContainerState(yyj4641)
			if r.TryDecodeAsNil() {
				yyv4641[yyj4641] = ServiceAccount{}
			} else {
				yyv4642 := &yyv4641[yyj4641]
				yyv4642.CodecDecodeSelf(d)
			}

		}
		if yyrt4641 {
			for ; yyj4641 < yyl4641; yyj4641++ {
				yyv4641 = append(yyv4641, ServiceAccount{})
				yyh4641.ElemContainerState(yyj4641)
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = ServiceAccount{}
				} else {
					yyv4643 := &yyv4641[yyj4641]
					yyv4643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4641 := 0
		for ; !r.CheckBreak(); yyj4641++ {

			if yyj4641 >= len(yyv4641) {
				yyv4641 = append(yyv4641, ServiceAccount{}) // var yyz4641 ServiceAccount
				yyc4641 = true
			}
			yyh4641.ElemContainerState(yyj4641)
			if yyj4641 < len(yyv4641) {
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = ServiceAccount{}
				} else {
					yyv4644 := &yyv4641[yyj4641]
					yyv4644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4641 < len(yyv4641) {
			yyv4641 = yyv4641[:yyj4641]
			yyc4641 = true
		} else if yyj4641 == 0 && yyv4641 == nil {
			yyv4641 = []ServiceAccount{}
			yyc4641 = true
		}
	}
	yyh4641.End()
	if yyc4641 {
		*v = yyv4641
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4645 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4646 := &yyv4645
		yy4646.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4647 := *v
	yyh4647, yyl4647 := z.DecSliceHelperStart()
	var yyc4647 bool
	if yyl4647 == 0 {
		if yyv4647 == nil {
			yyv4647 = []EndpointSubset{}
			yyc4647 = true
		} else if len(yyv4647) != 0 {
			yyv4647 = yyv4647[:0]
			yyc4647 = true
		}
	} else if yyl4647 > 0 {
		var yyrr4647, yyrl4647 int
		var yyrt4647 bool
		if yyl4647 > cap(yyv4647) {

			yyrg4647 := len(yyv4647) > 0
			yyv24647 := yyv4647
			yyrl4647, yyrt4647 = z.DecInferLen(yyl4647, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4647 {
				if yyrl4647 <= cap(yyv4647) {
					yyv4647 = yyv4647[:yyrl4647]
				} else {
					yyv4647 = make([]EndpointSubset, yyrl4647)
				}
			} else {
				yyv4647 = make([]EndpointSubset, yyrl4647)
			}
			yyc4647 = true
			yyrr4647 = len(yyv4647)
			if yyrg4647 {
				copy(yyv4647, yyv24647)
			}
		} else if yyl4647 != len(yyv4647) {
			yyv4647 = yyv4647[:yyl4647]
			yyc4647 = true
		}
		yyj4647 := 0
		for ; yyj4647 < yyrr4647; yyj4647++ {
			yyh4647.ElemContainerState(yyj4647)
			if r.TryDecodeAsNil() {
				yyv4647[yyj4647] = EndpointSubset{}
			} else {
				yyv4648 := &yyv4647[yyj4647]
				yyv4648.CodecDecodeSelf(d)
			}

		}
		if yyrt4647 {
			for ; yyj4647 < yyl4647; yyj4647++ {
				yyv4647 = append(yyv4647, EndpointSubset{})
				yyh4647.ElemContainerState(yyj4647)
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = EndpointSubset{}
				} else {
					yyv4649 := &yyv4647[yyj4647]
					yyv4649.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4647 := 0
		for ; !r.CheckBreak(); yyj4647++ {

			if yyj4647 >= len(yyv4647) {
				yyv4647 = append(yyv4647, EndpointSubset{}) // var yyz4647 EndpointSubset
				yyc4647 = true
			}
			yyh4647.ElemContainerState(yyj4647)
			if yyj4647 < len(yyv4647) {
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = EndpointSubset{}
				} else {
					yyv4650 := &yyv4647[yyj4647]
					yyv4650.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4647 < len(yyv4647) {
			yyv4647 = yyv4647[:yyj4647]
			yyc4647 = true
		} else if yyj4647 == 0 && yyv4647 == nil {
			yyv4647 = []EndpointSubset{}
			yyc4647 = true
		}
	}
	yyh4647.End()
	if yyc4647 {
		*v = yyv4647
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4651 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4652 := &yyv4651
		yy4652.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4653 := *v
	yyh4653, yyl4653 := z.DecSliceHelperStart()
	var yyc4653 bool
	if yyl4653 == 0 {
		if yyv4653 == nil {
			yyv4653 = []EndpointAddress{}
			yyc4653 = true
		} else if len(yyv4653) != 0 {
			yyv4653 = yyv4653[:0]
			yyc4653 = true
		}
	} else if yyl4653 > 0 {
		var yyrr4653, yyrl4653 int
		var yyrt4653 bool
		if yyl4653 > cap(yyv4653) {

			yyrg4653 := len(yyv4653) > 0
			yyv24653 := yyv4653
			yyrl4653, yyrt4653 = z.DecInferLen(yyl4653, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4653 {
				if yyrl4653 <= cap(yyv4653) {
					yyv4653 = yyv4653[:yyrl4653]
				} else {
					yyv4653 = make([]EndpointAddress, yyrl4653)
				}
			} else {
				yyv4653 = make([]EndpointAddress, yyrl4653)
			}
			yyc4653 = true
			yyrr4653 = len(yyv4653)
			if yyrg4653 {
				copy(yyv4653, yyv24653)
			}
		} else if yyl4653 != len(yyv4653) {
			yyv4653 = yyv4653[:yyl4653]
			yyc4653 = true
		}
		yyj4653 := 0
		for ; yyj4653 < yyrr4653; yyj4653++ {
			yyh4653.ElemContainerState(yyj4653)
			if r.TryDecodeAsNil() {
				yyv4653[yyj4653] = EndpointAddress{}
			} else {
				yyv4654 := &yyv4653[yyj4653]
				yyv4654.CodecDecodeSelf(d)
			}

		}
		if yyrt4653 {
			for ; yyj4653 < yyl4653; yyj4653++ {
				yyv4653 = append(yyv4653, EndpointAddress{})
				yyh4653.ElemContainerState(yyj4653)
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = EndpointAddress{}
				} else {
					yyv4655 := &yyv4653[yyj4653]
					yyv4655.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4653 := 0
		for ; !r.CheckBreak(); yyj4653++ {

			if yyj4653 >= len(yyv4653) {
				yyv4653 = append(yyv4653, EndpointAddress{}) // var yyz4653 EndpointAddress
				yyc4653 = true
			}
			yyh4653.ElemContainerState(yyj4653)
			if yyj4653 < len(yyv4653) {
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = EndpointAddress{}
				} else {
					yyv4656 := &yyv4653[yyj4653]
					yyv4656.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4653 < len(yyv4653) {
			yyv4653 = yyv4653[:yyj4653]
			yyc4653 = true
		} else if yyj4653 == 0 && yyv4653 == nil {
			yyv4653 = []EndpointAddress{}
			yyc4653 = true
		}
	}
	yyh4653.End()
	if yyc4653 {
		*v = yyv4653
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4657 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4658 := &yyv4657
		yy4658.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4659 := *v
	yyh4659, yyl4659 := z.DecSliceHelperStart()
	var yyc4659 bool
	if yyl4659 == 0 {
		if yyv4659 == nil {
			yyv4659 = []EndpointPort{}
			yyc4659 = true
		} else if len(yyv4659) != 0 {
			yyv4659 = yyv4659[:0]
			yyc4659 = true
		}
	} else if yyl4659 > 0 {
		var yyrr4659, yyrl4659 int
		var yyrt4659 bool
		if yyl4659 > cap(yyv4659) {

			yyrg4659 := len(yyv4659) > 0
			yyv24659 := yyv4659
			yyrl4659, yyrt4659 = z.DecInferLen(yyl4659, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4659 {
				if yyrl4659 <= cap(yyv4659) {
					yyv4659 = yyv4659[:yyrl4659]
				} else {
					yyv4659 = make([]EndpointPort, yyrl4659)
				}
			} else {
				yyv4659 = make([]EndpointPort, yyrl4659)
			}
			yyc4659 = true
			yyrr4659 = len(yyv4659)
			if yyrg4659 {
				copy(yyv4659, yyv24659)
			}
		} else if yyl4659 != len(yyv4659) {
			yyv4659 = yyv4659[:yyl4659]
			yyc4659 = true
		}
		yyj4659 := 0
		for ; yyj4659 < yyrr4659; yyj4659++ {
			yyh4659.ElemContainerState(yyj4659)
			if r.TryDecodeAsNil() {
				yyv4659[yyj4659] = EndpointPort{}
			} else {
				yyv4660 := &yyv4659[yyj4659]
				yyv4660.CodecDecodeSelf(d)
			}

		}
		if yyrt4659 {
			for ; yyj4659 < yyl4659; yyj4659++ {
				yyv4659 = append(yyv4659, EndpointPort{})
				yyh4659.ElemContainerState(yyj4659)
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = EndpointPort{}
				} else {
					yyv4661 := &yyv4659[yyj4659]
					yyv4661.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4659 := 0
		for ; !r.CheckBreak(); yyj4659++ {

			if yyj4659 >= len(yyv4659) {
				yyv4659 = append(yyv4659, EndpointPort{}) // var yyz4659 EndpointPort
				yyc4659 = true
			}
			yyh4659.ElemContainerState(yyj4659)
			if yyj4659 < len(yyv4659) {
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = EndpointPort{}
				} else {
					yyv4662 := &yyv4659[yyj4659]
					yyv4662.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4659 < len(yyv4659) {
			yyv4659 = yyv4659[:yyj4659]
			yyc4659 = true
		} else if yyj4659 == 0 && yyv4659 == nil {
			yyv4659 = []EndpointPort{}
			yyc4659 = true
		}
	}
	yyh4659.End()
	if yyc4659 {
		*v = yyv4659
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4663 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4664 := &yyv4663
		yy4664.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4665 := *v
	yyh4665, yyl4665 := z.DecSliceHelperStart()
	var yyc4665 bool
	if yyl4665 == 0 {
		if yyv4665 == nil {
			yyv4665 = []Endpoints{}
			yyc4665 = true
		} else if len(yyv4665) != 0 {
			yyv4665 = yyv4665[:0]
			yyc4665 = true
		}
	} else if yyl4665 > 0 {
		var yyrr4665, yyrl4665 int
		var yyrt4665 bool
		if yyl4665 > cap(yyv4665) {

			yyrg4665 := len(yyv4665) > 0
			yyv24665 := yyv4665
			yyrl4665, yyrt4665 = z.DecInferLen(yyl4665, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4665 {
				if yyrl4665 <= cap(yyv4665) {
					yyv4665 = yyv4665[:yyrl4665]
				} else {
					yyv4665 = make([]Endpoints, yyrl4665)
				}
			} else {
				yyv4665 = make([]Endpoints, yyrl4665)
			}
			yyc4665 = true
			yyrr4665 = len(yyv4665)
			if yyrg4665 {
				copy(yyv4665, yyv24665)
			}
		} else if yyl4665 != len(yyv4665) {
			yyv4665 = yyv4665[:yyl4665]
			yyc4665 = true
		}
		yyj4665 := 0
		for ; yyj4665 < yyrr4665; yyj4665++ {
			yyh4665.ElemContainerState(yyj4665)
			if r.TryDecodeAsNil() {
				yyv4665[yyj4665] = Endpoints{}
			} else {
				yyv4666 := &yyv4665[yyj4665]
				yyv4666.CodecDecodeSelf(d)
			}

		}
		if yyrt4665 {
			for ; yyj4665 < yyl4665; yyj4665++ {
				yyv4665 = append(yyv4665, Endpoints{})
				yyh4665.ElemContainerState(yyj4665)
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = Endpoints{}
				} else {
					yyv4667 := &yyv4665[yyj4665]
					yyv4667.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4665 := 0
		for ; !r.CheckBreak(); yyj4665++ {

			if yyj4665 >= len(yyv4665) {
				yyv4665 = append(yyv4665, Endpoints{}) // var yyz4665 Endpoints
				yyc4665 = true
			}
			yyh4665.ElemContainerState(yyj4665)
			if yyj4665 < len(yyv4665) {
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = Endpoints{}
				} else {
					yyv4668 := &yyv4665[yyj4665]
					yyv4668.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4665 < len(yyv4665) {
			yyv4665 = yyv4665[:yyj4665]
			yyc4665 = true
		} else if yyj4665 == 0 && yyv4665 == nil {
			yyv4665 = []Endpoints{}
			yyc4665 = true
		}
	}
	yyh4665.End()
	if yyc4665 {
		*v = yyv4665
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4669 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4670 := &yyv4669
		yy4670.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4671 := *v
	yyh4671, yyl4671 := z.DecSliceHelperStart()
	var yyc4671 bool
	if yyl4671 == 0 {
		if yyv4671 == nil {
			yyv4671 = []NodeCondition{}
			yyc4671 = true
		} else if len(yyv4671) != 0 {
			yyv4671 = yyv4671[:0]
			yyc4671 = true
		}
	} else if yyl4671 > 0 {
		var yyrr4671, yyrl4671 int
		var yyrt4671 bool
		if yyl4671 > cap(yyv4671) {

			yyrg4671 := len(yyv4671) > 0
			yyv24671 := yyv4671
			yyrl4671, yyrt4671 = z.DecInferLen(yyl4671, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4671 {
				if yyrl4671 <= cap(yyv4671) {
					yyv4671 = yyv4671[:yyrl4671]
				} else {
					yyv4671 = make([]NodeCondition, yyrl4671)
				}
			} else {
				yyv4671 = make([]NodeCondition, yyrl4671)
			}
			yyc4671 = true
			yyrr4671 = len(yyv4671)
			if yyrg4671 {
				copy(yyv4671, yyv24671)
			}
		} else if yyl4671 != len(yyv4671) {
			yyv4671 = yyv4671[:yyl4671]
			yyc4671 = true
		}
		yyj4671 := 0
		for ; yyj4671 < yyrr4671; yyj4671++ {
			yyh4671.ElemContainerState(yyj4671)
			if r.TryDecodeAsNil() {
				yyv4671[yyj4671] = NodeCondition{}
			} else {
				yyv4672 := &yyv4671[yyj4671]
				yyv4672.CodecDecodeSelf(d)
			}

		}
		if yyrt4671 {
			for ; yyj4671 < yyl4671; yyj4671++ {
				yyv4671 = append(yyv4671, NodeCondition{})
				yyh4671.ElemContainerState(yyj4671)
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = NodeCondition{}
				} else {
					yyv4673 := &yyv4671[yyj4671]
					yyv4673.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4671 := 0
		for ; !r.CheckBreak(); yyj4671++ {

			if yyj4671 >= len(yyv4671) {
				yyv4671 = append(yyv4671, NodeCondition{}) // var yyz4671 NodeCondition
				yyc4671 = true
			}
			yyh4671.ElemContainerState(yyj4671)
			if yyj4671 < len(yyv4671) {
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = NodeCondition{}
				} else {
					yyv4674 := &yyv4671[yyj4671]
					yyv4674.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4671 < len(yyv4671) {
			yyv4671 = yyv4671[:yyj4671]
			yyc4671 = true
		} else if yyj4671 == 0 && yyv4671 == nil {
			yyv4671 = []NodeCondition{}
			yyc4671 = true
		}
	}
	yyh4671.End()
	if yyc4671 {
		*v = yyv4671
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4675 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4676 := &yyv4675
		yy4676.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4677 := *v
	yyh4677, yyl4677 := z.DecSliceHelperStart()
	var yyc4677 bool
	if yyl4677 == 0 {
		if yyv4677 == nil {
			yyv4677 = []NodeAddress{}
			yyc4677 = true
		} else if len(yyv4677) != 0 {
			yyv4677 = yyv4677[:0]
			yyc4677 = true
		}
	} else if yyl4677 > 0 {
		var yyrr4677, yyrl4677 int
		var yyrt4677 bool
		if yyl4677 > cap(yyv4677) {

			yyrg4677 := len(yyv4677) > 0
			yyv24677 := yyv4677
			yyrl4677, yyrt4677 = z.DecInferLen(yyl4677, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4677 {
				if yyrl4677 <= cap(yyv4677) {
					yyv4677 = yyv4677[:yyrl4677]
				} else {
					yyv4677 = make([]NodeAddress, yyrl4677)
				}
			} else {
				yyv4677 = make([]NodeAddress, yyrl4677)
			}
			yyc4677 = true
			yyrr4677 = len(yyv4677)
			if yyrg4677 {
				copy(yyv4677, yyv24677)
			}
		} else if yyl4677 != len(yyv4677) {
			yyv4677 = yyv4677[:yyl4677]
			yyc4677 = true
		}
		yyj4677 := 0
		for ; yyj4677 < yyrr4677; yyj4677++ {
			yyh4677.ElemContainerState(yyj4677)
			if r.TryDecodeAsNil() {
				yyv4677[yyj4677] = NodeAddress{}
			} else {
				yyv4678 := &yyv4677[yyj4677]
				yyv4678.CodecDecodeSelf(d)
			}

		}
		if yyrt4677 {
			for ; yyj4677 < yyl4677; yyj4677++ {
				yyv4677 = append(yyv4677, NodeAddress{})
				yyh4677.ElemContainerState(yyj4677)
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = NodeAddress{}
				} else {
					yyv4679 := &yyv4677[yyj4677]
					yyv4679.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4677 := 0
		for ; !r.CheckBreak(); yyj4677++ {

			if yyj4677 >= len(yyv4677) {
				yyv4677 = append(yyv4677, NodeAddress{}) // var yyz4677 NodeAddress
				yyc4677 = true
			}
			yyh4677.ElemContainerState(yyj4677)
			if yyj4677 < len(yyv4677) {
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = NodeAddress{}
				} else {
					yyv4680 := &yyv4677[yyj4677]
					yyv4680.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4677 < len(yyv4677) {
			yyv4677 = yyv4677[:yyj4677]
			yyc4677 = true
		} else if yyj4677 == 0 && yyv4677 == nil {
			yyv4677 = []NodeAddress{}
			yyc4677 = true
		}
	}
	yyh4677.End()
	if yyc4677 {
		*v = yyv4677
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4681 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4682 := &yyv4681
		yy4682.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4683 := *v
	yyh4683, yyl4683 := z.DecSliceHelperStart()
	var yyc4683 bool
	if yyl4683 == 0 {
		if yyv4683 == nil {
			yyv4683 = []ContainerImage{}
			yyc4683 = true
		} else if len(yyv4683) != 0 {
			yyv4683 = yyv4683[:0]
			yyc4683 = true
		}
	} else if yyl4683 > 0 {
		var yyrr4683, yyrl4683 int
		var yyrt4683 bool
		if yyl4683 > cap(yyv4683) {

			yyrg4683 := len(yyv4683) > 0
			yyv24683 := yyv4683
			yyrl4683, yyrt4683 = z.DecInferLen(yyl4683, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4683 {
				if yyrl4683 <= cap(yyv4683) {
					yyv4683 = yyv4683[:yyrl4683]
				} else {
					yyv4683 = make([]ContainerImage, yyrl4683)
				}
			} else {
				yyv4683 = make([]ContainerImage, yyrl4683)
			}
			yyc4683 = true
			yyrr4683 = len(yyv4683)
			if yyrg4683 {
				copy(yyv4683, yyv24683)
			}
		} else if yyl4683 != len(yyv4683) {
			yyv4683 = yyv4683[:yyl4683]
			yyc4683 = true
		}
		yyj4683 := 0
		for ; yyj4683 < yyrr4683; yyj4683++ {
			yyh4683.ElemContainerState(yyj4683)
			if r.TryDecodeAsNil() {
				yyv4683[yyj4683] = ContainerImage{}
			} else {
				yyv4684 := &yyv4683[yyj4683]
				yyv4684.CodecDecodeSelf(d)
			}

		}
		if yyrt4683 {
			for ; yyj4683 < yyl4683; yyj4683++ {
				yyv4683 = append(yyv4683, ContainerImage{})
				yyh4683.ElemContainerState(yyj4683)
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = ContainerImage{}
				} else {
					yyv4685 := &yyv4683[yyj4683]
					yyv4685.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4683 := 0
		for ; !r.CheckBreak(); yyj4683++ {

			if yyj4683 >= len(yyv4683) {
				yyv4683 = append(yyv4683, ContainerImage{}) // var yyz4683 ContainerImage
				yyc4683 = true
			}
			yyh4683.ElemContainerState(yyj4683)
			if yyj4683 < len(yyv4683) {
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = ContainerImage{}
				} else {
					yyv4686 := &yyv4683[yyj4683]
					yyv4686.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4683 < len(yyv4683) {
			yyv4683 = yyv4683[:yyj4683]
			yyc4683 = true
		} else if yyj4683 == 0 && yyv4683 == nil {
			yyv4683 = []ContainerImage{}
			yyc4683 = true
		}
	}
	yyh4683.End()
	if yyc4683 {
		*v = yyv4683
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4688 := *v
	yyh4688, yyl4688 := z.DecSliceHelperStart()
	var yyc4688 bool
	if yyl4688 == 0 {
		if yyv4688 == nil {
			yyv4688 = []UniqueVolumeName{}
			yyc4688 = true
		} else if len(yyv4688) != 0 {
			yyv4688 = yyv4688[:0]
			yyc4688 = true
		}
	} else if yyl4688 > 0 {
		var yyrr4688, yyrl4688 int
		var yyrt4688 bool
		if yyl4688 > cap(yyv4688) {

			yyrl4688, yyrt4688 = z.DecInferLen(yyl4688, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4688 {
				if yyrl4688 <= cap(yyv4688) {
					yyv4688 = yyv4688[:yyrl4688]
				} else {
					yyv4688 = make([]UniqueVolumeName, yyrl4688)
				}
			} else {
				yyv4688 = make([]UniqueVolumeName, yyrl4688)
			}
			yyc4688 = true
			yyrr4688 = len(yyv4688)
		} else if yyl4688 != len(yyv4688) {
			yyv4688 = yyv4688[:yyl4688]
			yyc4688 = true
		}
		yyj4688 := 0
		for ; yyj4688 < yyrr4688; yyj4688++ {
			yyh4688.ElemContainerState(yyj4688)
			if r.TryDecodeAsNil() {
				yyv4688[yyj4688] = ""
			} else {
				yyv4688[yyj4688] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4688 {
			for ; yyj4688 < yyl4688; yyj4688++ {
				yyv4688 = append(yyv4688, "")
				yyh4688.ElemContainerState(yyj4688)
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = ""
				} else {
					yyv4688[yyj4688] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4688 := 0
		for ; !r.CheckBreak(); yyj4688++ {

			if yyj4688 >= len(yyv4688) {
				yyv4688 = append(yyv4688, "") // var yyz4688 UniqueVolumeName
				yyc4688 = true
			}
			yyh4688.ElemContainerState(yyj4688)
			if yyj4688 < len(yyv4688) {
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = ""
				} else {
					yyv4688[yyj4688] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4688 < len(yyv4688) {
			yyv4688 = yyv4688[:yyj4688]
			yyc4688 = true
		} else if yyj4688 == 0 && yyv4688 == nil {
			yyv4688 = []UniqueVolumeName{}
			yyc4688 = true
		}
	}
	yyh4688.End()
	if yyc4688 {
		*v = yyv4688
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4693 := &yyv4692
		yy4693.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4694 := *v
	yyh4694, yyl4694 := z.DecSliceHelperStart()
	var yyc4694 bool
	if yyl4694 == 0 {
		if yyv4694 == nil {
			yyv4694 = []AttachedVolume{}
			yyc4694 = true
		} else if len(yyv4694) != 0 {
			yyv4694 = yyv4694[:0]
			yyc4694 = true
		}
	} else if yyl4694 > 0 {
		var yyrr4694, yyrl4694 int
		var yyrt4694 bool
		if yyl4694 > cap(yyv4694) {

			yyrg4694 := len(yyv4694) > 0
			yyv24694 := yyv4694
			yyrl4694, yyrt4694 = z.DecInferLen(yyl4694, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4694 {
				if yyrl4694 <= cap(yyv4694) {
					yyv4694 = yyv4694[:yyrl4694]
				} else {
					yyv4694 = make([]AttachedVolume, yyrl4694)
				}
			} else {
				yyv4694 = make([]AttachedVolume, yyrl4694)
			}
			yyc4694 = true
			yyrr4694 = len(yyv4694)
			if yyrg4694 {
				copy(yyv4694, yyv24694)
			}
		} else if yyl4694 != len(yyv4694) {
			yyv4694 = yyv4694[:yyl4694]
			yyc4694 = true
		}
		yyj4694 := 0
		for ; yyj4694 < yyrr4694; yyj4694++ {
			yyh4694.ElemContainerState(yyj4694)
			if r.TryDecodeAsNil() {
				yyv4694[yyj4694] = AttachedVolume{}
			} else {
				yyv4695 := &yyv4694[yyj4694]
				yyv4695.CodecDecodeSelf(d)
			}

		}
		if yyrt4694 {
			for ; yyj4694 < yyl4694; yyj4694++ {
				yyv4694 = append(yyv4694, AttachedVolume{})
				yyh4694.ElemContainerState(yyj4694)
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = AttachedVolume{}
				} else {
					yyv4696 := &yyv4694[yyj4694]
					yyv4696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4694 := 0
		for ; !r.CheckBreak(); yyj4694++ {

			if yyj4694 >= len(yyv4694) {
				yyv4694 = append(yyv4694, AttachedVolume{}) // var yyz4694 AttachedVolume
				yyc4694 = true
			}
			yyh4694.ElemContainerState(yyj4694)
			if yyj4694 < len(yyv4694) {
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = AttachedVolume{}
				} else {
					yyv4697 := &yyv4694[yyj4694]
					yyv4697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4694 < len(yyv4694) {
			yyv4694 = yyv4694[:yyj4694]
			yyc4694 = true
		} else if yyj4694 == 0 && yyv4694 == nil {
			yyv4694 = []AttachedVolume{}
			yyc4694 = true
		}
	}
	yyh4694.End()
	if yyc4694 {
		*v = yyv4694
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4699 := &yyv4698
		yy4699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4700 := *v
	yyh4700, yyl4700 := z.DecSliceHelperStart()
	var yyc4700 bool
	if yyl4700 == 0 {
		if yyv4700 == nil {
			yyv4700 = []PreferAvoidPodsEntry{}
			yyc4700 = true
		} else if len(yyv4700) != 0 {
			yyv4700 = yyv4700[:0]
			yyc4700 = true
		}
	} else if yyl4700 > 0 {
		var yyrr4700, yyrl4700 int
		var yyrt4700 bool
		if yyl4700 > cap(yyv4700) {

			yyrg4700 := len(yyv4700) > 0
			yyv24700 := yyv4700
			yyrl4700, yyrt4700 = z.DecInferLen(yyl4700, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4700 {
				if yyrl4700 <= cap(yyv4700) {
					yyv4700 = yyv4700[:yyrl4700]
				} else {
					yyv4700 = make([]PreferAvoidPodsEntry, yyrl4700)
				}
			} else {
				yyv4700 = make([]PreferAvoidPodsEntry, yyrl4700)
			}
			yyc4700 = true
			yyrr4700 = len(yyv4700)
			if yyrg4700 {
				copy(yyv4700, yyv24700)
			}
		} else if yyl4700 != len(yyv4700) {
			yyv4700 = yyv4700[:yyl4700]
			yyc4700 = true
		}
		yyj4700 := 0
		for ; yyj4700 < yyrr4700; yyj4700++ {
			yyh4700.ElemContainerState(yyj4700)
			if r.TryDecodeAsNil() {
				yyv4700[yyj4700] = PreferAvoidPodsEntry{}
			} else {
				yyv4701 := &yyv4700[yyj4700]
				yyv4701.CodecDecodeSelf(d)
			}

		}
		if yyrt4700 {
			for ; yyj4700 < yyl4700; yyj4700++ {
				yyv4700 = append(yyv4700, PreferAvoidPodsEntry{})
				yyh4700.ElemContainerState(yyj4700)
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = PreferAvoidPodsEntry{}
				} else {
					yyv4702 := &yyv4700[yyj4700]
					yyv4702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4700 := 0
		for ; !r.CheckBreak(); yyj4700++ {

			if yyj4700 >= len(yyv4700) {
				yyv4700 = append(yyv4700, PreferAvoidPodsEntry{}) // var yyz4700 PreferAvoidPodsEntry
				yyc4700 = true
			}
			yyh4700.ElemContainerState(yyj4700)
			if yyj4700 < len(yyv4700) {
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = PreferAvoidPodsEntry{}
				} else {
					yyv4703 := &yyv4700[yyj4700]
					yyv4703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4700 < len(yyv4700) {
			yyv4700 = yyv4700[:yyj4700]
			yyc4700 = true
		} else if yyj4700 == 0 && yyv4700 == nil {
			yyv4700 = []PreferAvoidPodsEntry{}
			yyc4700 = true
		}
	}
	yyh4700.End()
	if yyc4700 {
		*v = yyv4700
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4704, yyv4704 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4704.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4705 := &yyv4704
		yym4706 := z.EncBinary()
		_ = yym4706
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4705) {
		} else if !yym4706 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4705)
		} else {
			z.EncFallback(yy4705)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyl4707 := r.ReadMapStart()
	yybh4707 := z.DecBasicHandle()
	if yyv4707 == nil {
		yyrl4707, _ := z.DecInferLen(yyl4707, yybh4707.MaxInitLen, 72)
		yyv4707 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4707)
		*v = yyv4707
	}
	var yymk4707 ResourceName
	var yymv4707 pkg3_resource.Quantity
	var yymg4707 bool
	if yybh4707.MapValueReset {
		yymg4707 = true
	}
	if yyl4707 > 0 {
		for yyj4707 := 0; yyj4707 < yyl4707; yyj4707++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4707 = ""
			} else {
				yymk4707 = ResourceName(r.DecodeString())
			}

			if yymg4707 {
				yymv4707 = yyv4707[yymk4707]
			} else {
				yymv4707 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4707 = pkg3_resource.Quantity{}
			} else {
				yyv4709 := &yymv4707
				yym4710 := z.DecBinary()
				_ = yym4710
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4709) {
				} else if !yym4710 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4709)
				} else {
					z.DecFallback(yyv4709, false)
				}
			}

			if yyv4707 != nil {
				yyv4707[yymk4707] = yymv4707
			}
		}
	} else if yyl4707 < 0 {
		for yyj4707 := 0; !r.CheckBreak(); yyj4707++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4707 = ""
			} else {
				yymk4707 = ResourceName(r.DecodeString())
			}

			if yymg4707 {
				yymv4707 = yyv4707[yymk4707]
			} else {
				yymv4707 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4707 = pkg3_resource.Quantity{}
			} else {
				yyv4712 := &yymv4707
				yym4713 := z.DecBinary()
				_ = yym4713
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4712) {
				} else if !yym4713 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4712)
				} else {
					z.DecFallback(yyv4712, false)
				}
			}

			if yyv4707 != nil {
				yyv4707[yymk4707] = yymv4707
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4714 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4715 := &yyv4714
		yy4715.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4716 := *v
	yyh4716, yyl4716 := z.DecSliceHelperStart()
	var yyc4716 bool
	if yyl4716 == 0 {
		if yyv4716 == nil {
			yyv4716 = []Node{}
			yyc4716 = true
		} else if len(yyv4716) != 0 {
			yyv4716 = yyv4716[:0]
			yyc4716 = true
		}
	} else if yyl4716 > 0 {
		var yyrr4716, yyrl4716 int
		var yyrt4716 bool
		if yyl4716 > cap(yyv4716) {

			yyrg4716 := len(yyv4716) > 0
			yyv24716 := yyv4716
			yyrl4716, yyrt4716 = z.DecInferLen(yyl4716, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4716 {
				if yyrl4716 <= cap(yyv4716) {
					yyv4716 = yyv4716[:yyrl4716]
				} else {
					yyv4716 = make([]Node, yyrl4716)
				}
			} else {
				yyv4716 = make([]Node, yyrl4716)
			}
			yyc4716 = true
			yyrr4716 = len(yyv4716)
			if yyrg4716 {
				copy(yyv4716, yyv24716)
			}
		} else if yyl4716 != len(yyv4716) {
			yyv4716 = yyv4716[:yyl4716]
			yyc4716 = true
		}
		yyj4716 := 0
		for ; yyj4716 < yyrr4716; yyj4716++ {
			yyh4716.ElemContainerState(yyj4716)
			if r.TryDecodeAsNil() {
				yyv4716[yyj4716] = Node{}
			} else {
				yyv4717 := &yyv4716[yyj4716]
				yyv4717.CodecDecodeSelf(d)
			}

		}
		if yyrt4716 {
			for ; yyj4716 < yyl4716; yyj4716++ {
				yyv4716 = append(yyv4716, Node{})
				yyh4716.ElemContainerState(yyj4716)
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = Node{}
				} else {
					yyv4718 := &yyv4716[yyj4716]
					yyv4718.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4716 := 0
		for ; !r.CheckBreak(); yyj4716++ {

			if yyj4716 >= len(yyv4716) {
				yyv4716 = append(yyv4716, Node{}) // var yyz4716 Node
				yyc4716 = true
			}
			yyh4716.ElemContainerState(yyj4716)
			if yyj4716 < len(yyv4716) {
				if r.TryDecodeAsNil() {
					yyv4716[yyj4716] = Node{}
				} else {
					yyv4719 := &yyv4716[yyj4716]
					yyv4719.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4716 < len(yyv4716) {
			yyv4716 = yyv4716[:yyj4716]
			yyc4716 = true
		} else if yyj4716 == 0 && yyv4716 == nil {
			yyv4716 = []Node{}
			yyc4716 = true
		}
	}
	yyh4716.End()
	if yyc4716 {
		*v = yyv4716
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4720 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4720.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4721 := *v
	yyh4721, yyl4721 := z.DecSliceHelperStart()
	var yyc4721 bool
	if yyl4721 == 0 {
		if yyv4721 == nil {
			yyv4721 = []FinalizerName{}
			yyc4721 = true
		} else if len(yyv4721) != 0 {
			yyv4721 = yyv4721[:0]
			yyc4721 = true
		}
	} else if yyl4721 > 0 {
		var yyrr4721, yyrl4721 int
		var yyrt4721 bool
		if yyl4721 > cap(yyv4721) {

			yyrl4721, yyrt4721 = z.DecInferLen(yyl4721, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4721 {
				if yyrl4721 <= cap(yyv4721) {
					yyv4721 = yyv4721[:yyrl4721]
				} else {
					yyv4721 = make([]FinalizerName, yyrl4721)
				}
			} else {
				yyv4721 = make([]FinalizerName, yyrl4721)
			}
			yyc4721 = true
			yyrr4721 = len(yyv4721)
		} else if yyl4721 != len(yyv4721) {
			yyv4721 = yyv4721[:yyl4721]
			yyc4721 = true
		}
		yyj4721 := 0
		for ; yyj4721 < yyrr4721; yyj4721++ {
			yyh4721.ElemContainerState(yyj4721)
			if r.TryDecodeAsNil() {
				yyv4721[yyj4721] = ""
			} else {
				yyv4721[yyj4721] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4721 {
			for ; yyj4721 < yyl4721; yyj4721++ {
				yyv4721 = append(yyv4721, "")
				yyh4721.ElemContainerState(yyj4721)
				if r.TryDecodeAsNil() {
					yyv4721[yyj4721] = ""
				} else {
					yyv4721[yyj4721] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4721 := 0
		for ; !r.CheckBreak(); yyj4721++ {

			if yyj4721 >= len(yyv4721) {
				yyv4721 = append(yyv4721, "") // var yyz4721 FinalizerName
				yyc4721 = true
			}
			yyh4721.ElemContainerState(yyj4721)
			if yyj4721 < len(yyv4721) {
				if r.TryDecodeAsNil() {
					yyv4721[yyj4721] = ""
				} else {
					yyv4721[yyj4721] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4721 < len(yyv4721) {
			yyv4721 = yyv4721[:yyj4721]
			yyc4721 = true
		} else if yyj4721 == 0 && yyv4721 == nil {
			yyv4721 = []FinalizerName{}
			yyc4721 = true
		}
	}
	yyh4721.End()
	if yyc4721 {
		*v = yyv4721
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4725 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4726 := &yyv4725
		yy4726.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4727 := *v
	yyh4727, yyl4727 := z.DecSliceHelperStart()
	var yyc4727 bool
	if yyl4727 == 0 {
		if yyv4727 == nil {
			yyv4727 = []Namespace{}
			yyc4727 = true
		} else if len(yyv4727) != 0 {
			yyv4727 = yyv4727[:0]
			yyc4727 = true
		}
	} else if yyl4727 > 0 {
		var yyrr4727, yyrl4727 int
		var yyrt4727 bool
		if yyl4727 > cap(yyv4727) {

			yyrg4727 := len(yyv4727) > 0
			yyv24727 := yyv4727
			yyrl4727, yyrt4727 = z.DecInferLen(yyl4727, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4727 {
				if yyrl4727 <= cap(yyv4727) {
					yyv4727 = yyv4727[:yyrl4727]
				} else {
					yyv4727 = make([]Namespace, yyrl4727)
				}
			} else {
				yyv4727 = make([]Namespace, yyrl4727)
			}
			yyc4727 = true
			yyrr4727 = len(yyv4727)
			if yyrg4727 {
				copy(yyv4727, yyv24727)
			}
		} else if yyl4727 != len(yyv4727) {
			yyv4727 = yyv4727[:yyl4727]
			yyc4727 = true
		}
		yyj4727 := 0
		for ; yyj4727 < yyrr4727; yyj4727++ {
			yyh4727.ElemContainerState(yyj4727)
			if r.TryDecodeAsNil() {
				yyv4727[yyj4727] = Namespace{}
			} else {
				yyv4728 := &yyv4727[yyj4727]
				yyv4728.CodecDecodeSelf(d)
			}

		}
		if yyrt4727 {
			for ; yyj4727 < yyl4727; yyj4727++ {
				yyv4727 = append(yyv4727, Namespace{})
				yyh4727.ElemContainerState(yyj4727)
				if r.TryDecodeAsNil() {
					yyv4727[yyj4727] = Namespace{}
				} else {
					yyv4729 := &yyv4727[yyj4727]
					yyv4729.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4727 := 0
		for ; !r.CheckBreak(); yyj4727++ {

			if yyj4727 >= len(yyv4727) {
				yyv4727 = append(yyv4727, Namespace{}) // var yyz4727 Namespace
				yyc4727 = true
			}
			yyh4727.ElemContainerState(yyj4727)
			if yyj4727 < len(yyv4727) {
				if r.TryDecodeAsNil() {
					yyv4727[yyj4727] = Namespace{}
				} else {
					yyv4730 := &yyv4727[yyj4727]
					yyv4730.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4727 < len(yyv4727) {
			yyv4727 = yyv4727[:yyj4727]
			yyc4727 = true
		} else if yyj4727 == 0 && yyv4727 == nil {
			yyv4727 = []Namespace{}
			yyc4727 = true
		}
	}
	yyh4727.End()
	if yyc4727 {
		*v = yyv4727
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4731 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4732 := &yyv4731
		yy4732.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4733 := *v
	yyh4733, yyl4733 := z.DecSliceHelperStart()
	var yyc4733 bool
	if yyl4733 == 0 {
		if yyv4733 == nil {
			yyv4733 = []Event{}
			yyc4733 = true
		} else if len(yyv4733) != 0 {
			yyv4733 = yyv4733[:0]
			yyc4733 = true
		}
	} else if yyl4733 > 0 {
		var yyrr4733, yyrl4733 int
		var yyrt4733 bool
		if yyl4733 > cap(yyv4733) {

			yyrg4733 := len(yyv4733) > 0
			yyv24733 := yyv4733
			yyrl4733, yyrt4733 = z.DecInferLen(yyl4733, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4733 {
				if yyrl4733 <= cap(yyv4733) {
					yyv4733 = yyv4733[:yyrl4733]
				} else {
					yyv4733 = make([]Event, yyrl4733)
				}
			} else {
				yyv4733 = make([]Event, yyrl4733)
			}
			yyc4733 = true
			yyrr4733 = len(yyv4733)
			if yyrg4733 {
				copy(yyv4733, yyv24733)
			}
		} else if yyl4733 != len(yyv4733) {
			yyv4733 = yyv4733[:yyl4733]
			yyc4733 = true
		}
		yyj4733 := 0
		for ; yyj4733 < yyrr4733; yyj4733++ {
			yyh4733.ElemContainerState(yyj4733)
			if r.TryDecodeAsNil() {
				yyv4733[yyj4733] = Event{}
			} else {
				yyv4734 := &yyv4733[yyj4733]
				yyv4734.CodecDecodeSelf(d)
			}

		}
		if yyrt4733 {
			for ; yyj4733 < yyl4733; yyj4733++ {
				yyv4733 = append(yyv4733, Event{})
				yyh4733.ElemContainerState(yyj4733)
				if r.TryDecodeAsNil() {
					yyv4733[yyj4733] = Event{}
				} else {
					yyv4735 := &yyv4733[yyj4733]
					yyv4735.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4733 := 0
		for ; !r.CheckBreak(); yyj4733++ {

			if yyj4733 >= len(yyv4733) {
				yyv4733 = append(yyv4733, Event{}) // var yyz4733 Event
				yyc4733 = true
			}
			yyh4733.ElemContainerState(yyj4733)
			if yyj4733 < len(yyv4733) {
				if r.TryDecodeAsNil() {
					yyv4733[yyj4733] = Event{}
				} else {
					yyv4736 := &yyv4733[yyj4733]
					yyv4736.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4733 < len(yyv4733) {
			yyv4733 = yyv4733[:yyj4733]
			yyc4733 = true
		} else if yyj4733 == 0 && yyv4733 == nil {
			yyv4733 = []Event{}
			yyc4733 = true
		}
	}
	yyh4733.End()
	if yyc4733 {
		*v = yyv4733
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4737 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4737 == nil {
			r.EncodeNil()
		} else {
			yym4738 := z.EncBinary()
			_ = yym4738
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4737) {
			} else {
				z.EncFallback(yyv4737)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4739 := *v
	yyh4739, yyl4739 := z.DecSliceHelperStart()
	var yyc4739 bool
	if yyl4739 == 0 {
		if yyv4739 == nil {
			yyv4739 = []pkg7_runtime.Object{}
			yyc4739 = true
		} else if len(yyv4739) != 0 {
			yyv4739 = yyv4739[:0]
			yyc4739 = true
		}
	} else if yyl4739 > 0 {
		var yyrr4739, yyrl4739 int
		var yyrt4739 bool
		if yyl4739 > cap(yyv4739) {

			yyrg4739 := len(yyv4739) > 0
			yyv24739 := yyv4739
			yyrl4739, yyrt4739 = z.DecInferLen(yyl4739, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4739 {
				if yyrl4739 <= cap(yyv4739) {
					yyv4739 = yyv4739[:yyrl4739]
				} else {
					yyv4739 = make([]pkg7_runtime.Object, yyrl4739)
				}
			} else {
				yyv4739 = make([]pkg7_runtime.Object, yyrl4739)
			}
			yyc4739 = true
			yyrr4739 = len(yyv4739)
			if yyrg4739 {
				copy(yyv4739, yyv24739)
			}
		} else if yyl4739 != len(yyv4739) {
			yyv4739 = yyv4739[:yyl4739]
			yyc4739 = true
		}
		yyj4739 := 0
		for ; yyj4739 < yyrr4739; yyj4739++ {
			yyh4739.ElemContainerState(yyj4739)
			if r.TryDecodeAsNil() {
				yyv4739[yyj4739] = nil
			} else {
				yyv4740 := &yyv4739[yyj4739]
				yym4741 := z.DecBinary()
				_ = yym4741
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4740) {
				} else {
					z.DecFallback(yyv4740, true)
				}
			}

		}
		if yyrt4739 {
			for ; yyj4739 < yyl4739; yyj4739++ {
				yyv4739 = append(yyv4739, nil)
				yyh4739.ElemContainerState(yyj4739)
				if r.TryDecodeAsNil() {
					yyv4739[yyj4739] = nil
				} else {
					yyv4742 := &yyv4739[yyj4739]
					yym4743 := z.DecBinary()
					_ = yym4743
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4742) {
					} else {
						z.DecFallback(yyv4742, true)
					}
				}

			}
		}

	} else {
		yyj4739 := 0
		for ; !r.CheckBreak(); yyj4739++ {

			if yyj4739 >= len(yyv4739) {
				yyv4739 = append(yyv4739, nil) // var yyz4739 pkg7_runtime.Object
				yyc4739 = true
			}
			yyh4739.ElemContainerState(yyj4739)
			if yyj4739 < len(yyv4739) {
				if r.TryDecodeAsNil() {
					yyv4739[yyj4739] = nil
				} else {
					yyv4744 := &yyv4739[yyj4739]
					yym4745 := z.DecBinary()
					_ = yym4745
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4744) {
					} else {
						z.DecFallback(yyv4744, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4739 < len(yyv4739) {
			yyv4739 = yyv4739[:yyj4739]
			yyc4739 = true
		} else if yyj4739 == 0 && yyv4739 == nil {
			yyv4739 = []pkg7_runtime.Object{}
			yyc4739 = true
		}
	}
	yyh4739.End()
	if yyc4739 {
		*v = yyv4739
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4746 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4747 := &yyv4746
		yy4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []LimitRangeItem{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrg4748 := len(yyv4748) > 0
			yyv24748 := yyv4748
			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]LimitRangeItem, yyrl4748)
				}
			} else {
				yyv4748 = make([]LimitRangeItem, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
			if yyrg4748 {
				copy(yyv4748, yyv24748)
			}
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = LimitRangeItem{}
			} else {
				yyv4749 := &yyv4748[yyj4748]
				yyv4749.CodecDecodeSelf(d)
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, LimitRangeItem{})
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = LimitRangeItem{}
				} else {
					yyv4750 := &yyv4748[yyj4748]
					yyv4750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, LimitRangeItem{}) // var yyz4748 LimitRangeItem
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = LimitRangeItem{}
				} else {
					yyv4751 := &yyv4748[yyj4748]
					yyv4751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []LimitRangeItem{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4753 := &yyv4752
		yy4753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4754 := *v
	yyh4754, yyl4754 := z.DecSliceHelperStart()
	var yyc4754 bool
	if yyl4754 == 0 {
		if yyv4754 == nil {
			yyv4754 = []LimitRange{}
			yyc4754 = true
		} else if len(yyv4754) != 0 {
			yyv4754 = yyv4754[:0]
			yyc4754 = true
		}
	} else if yyl4754 > 0 {
		var yyrr4754, yyrl4754 int
		var yyrt4754 bool
		if yyl4754 > cap(yyv4754) {

			yyrg4754 := len(yyv4754) > 0
			yyv24754 := yyv4754
			yyrl4754, yyrt4754 = z.DecInferLen(yyl4754, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4754 {
				if yyrl4754 <= cap(yyv4754) {
					yyv4754 = yyv4754[:yyrl4754]
				} else {
					yyv4754 = make([]LimitRange, yyrl4754)
				}
			} else {
				yyv4754 = make([]LimitRange, yyrl4754)
			}
			yyc4754 = true
			yyrr4754 = len(yyv4754)
			if yyrg4754 {
				copy(yyv4754, yyv24754)
			}
		} else if yyl4754 != len(yyv4754) {
			yyv4754 = yyv4754[:yyl4754]
			yyc4754 = true
		}
		yyj4754 := 0
		for ; yyj4754 < yyrr4754; yyj4754++ {
			yyh4754.ElemContainerState(yyj4754)
			if r.TryDecodeAsNil() {
				yyv4754[yyj4754] = LimitRange{}
			} else {
				yyv4755 := &yyv4754[yyj4754]
				yyv4755.CodecDecodeSelf(d)
			}

		}
		if yyrt4754 {
			for ; yyj4754 < yyl4754; yyj4754++ {
				yyv4754 = append(yyv4754, LimitRange{})
				yyh4754.ElemContainerState(yyj4754)
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = LimitRange{}
				} else {
					yyv4756 := &yyv4754[yyj4754]
					yyv4756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4754 := 0
		for ; !r.CheckBreak(); yyj4754++ {

			if yyj4754 >= len(yyv4754) {
				yyv4754 = append(yyv4754, LimitRange{}) // var yyz4754 LimitRange
				yyc4754 = true
			}
			yyh4754.ElemContainerState(yyj4754)
			if yyj4754 < len(yyv4754) {
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = LimitRange{}
				} else {
					yyv4757 := &yyv4754[yyj4754]
					yyv4757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4754 < len(yyv4754) {
			yyv4754 = yyv4754[:yyj4754]
			yyc4754 = true
		} else if yyj4754 == 0 && yyv4754 == nil {
			yyv4754 = []LimitRange{}
			yyc4754 = true
		}
	}
	yyh4754.End()
	if yyc4754 {
		*v = yyv4754
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4758 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4758.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4759 := *v
	yyh4759, yyl4759 := z.DecSliceHelperStart()
	var yyc4759 bool
	if yyl4759 == 0 {
		if yyv4759 == nil {
			yyv4759 = []ResourceQuotaScope{}
			yyc4759 = true
		} else if len(yyv4759) != 0 {
			yyv4759 = yyv4759[:0]
			yyc4759 = true
		}
	} else if yyl4759 > 0 {
		var yyrr4759, yyrl4759 int
		var yyrt4759 bool
		if yyl4759 > cap(yyv4759) {

			yyrl4759, yyrt4759 = z.DecInferLen(yyl4759, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4759 {
				if yyrl4759 <= cap(yyv4759) {
					yyv4759 = yyv4759[:yyrl4759]
				} else {
					yyv4759 = make([]ResourceQuotaScope, yyrl4759)
				}
			} else {
				yyv4759 = make([]ResourceQuotaScope, yyrl4759)
			}
			yyc4759 = true
			yyrr4759 = len(yyv4759)
		} else if yyl4759 != len(yyv4759) {
			yyv4759 = yyv4759[:yyl4759]
			yyc4759 = true
		}
		yyj4759 := 0
		for ; yyj4759 < yyrr4759; yyj4759++ {
			yyh4759.ElemContainerState(yyj4759)
			if r.TryDecodeAsNil() {
				yyv4759[yyj4759] = ""
			} else {
				yyv4759[yyj4759] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4759 {
			for ; yyj4759 < yyl4759; yyj4759++ {
				yyv4759 = append(yyv4759, "")
				yyh4759.ElemContainerState(yyj4759)
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = ""
				} else {
					yyv4759[yyj4759] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4759 := 0
		for ; !r.CheckBreak(); yyj4759++ {

			if yyj4759 >= len(yyv4759) {
				yyv4759 = append(yyv4759, "") // var yyz4759 ResourceQuotaScope
				yyc4759 = true
			}
			yyh4759.ElemContainerState(yyj4759)
			if yyj4759 < len(yyv4759) {
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = ""
				} else {
					yyv4759[yyj4759] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4759 < len(yyv4759) {
			yyv4759 = yyv4759[:yyj4759]
			yyc4759 = true
		} else if yyj4759 == 0 && yyv4759 == nil {
			yyv4759 = []ResourceQuotaScope{}
			yyc4759 = true
		}
	}
	yyh4759.End()
	if yyc4759 {
		*v = yyv4759
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4763 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4764 := &yyv4763
		yy4764.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4765 := *v
	yyh4765, yyl4765 := z.DecSliceHelperStart()
	var yyc4765 bool
	if yyl4765 == 0 {
		if yyv4765 == nil {
			yyv4765 = []ResourceQuota{}
			yyc4765 = true
		} else if len(yyv4765) != 0 {
			yyv4765 = yyv4765[:0]
			yyc4765 = true
		}
	} else if yyl4765 > 0 {
		var yyrr4765, yyrl4765 int
		var yyrt4765 bool
		if yyl4765 > cap(yyv4765) {

			yyrg4765 := len(yyv4765) > 0
			yyv24765 := yyv4765
			yyrl4765, yyrt4765 = z.DecInferLen(yyl4765, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4765 {
				if yyrl4765 <= cap(yyv4765) {
					yyv4765 = yyv4765[:yyrl4765]
				} else {
					yyv4765 = make([]ResourceQuota, yyrl4765)
				}
			} else {
				yyv4765 = make([]ResourceQuota, yyrl4765)
			}
			yyc4765 = true
			yyrr4765 = len(yyv4765)
			if yyrg4765 {
				copy(yyv4765, yyv24765)
			}
		} else if yyl4765 != len(yyv4765) {
			yyv4765 = yyv4765[:yyl4765]
			yyc4765 = true
		}
		yyj4765 := 0
		for ; yyj4765 < yyrr4765; yyj4765++ {
			yyh4765.ElemContainerState(yyj4765)
			if r.TryDecodeAsNil() {
				yyv4765[yyj4765] = ResourceQuota{}
			} else {
				yyv4766 := &yyv4765[yyj4765]
				yyv4766.CodecDecodeSelf(d)
			}

		}
		if yyrt4765 {
			for ; yyj4765 < yyl4765; yyj4765++ {
				yyv4765 = append(yyv4765, ResourceQuota{})
				yyh4765.ElemContainerState(yyj4765)
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = ResourceQuota{}
				} else {
					yyv4767 := &yyv4765[yyj4765]
					yyv4767.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4765 := 0
		for ; !r.CheckBreak(); yyj4765++ {

			if yyj4765 >= len(yyv4765) {
				yyv4765 = append(yyv4765, ResourceQuota{}) // var yyz4765 ResourceQuota
				yyc4765 = true
			}
			yyh4765.ElemContainerState(yyj4765)
			if yyj4765 < len(yyv4765) {
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = ResourceQuota{}
				} else {
					yyv4768 := &yyv4765[yyj4765]
					yyv4768.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4765 < len(yyv4765) {
			yyv4765 = yyv4765[:yyj4765]
			yyc4765 = true
		} else if yyj4765 == 0 && yyv4765 == nil {
			yyv4765 = []ResourceQuota{}
			yyc4765 = true
		}
	}
	yyh4765.End()
	if yyc4765 {
		*v = yyv4765
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4769, yyv4769 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4770 := z.EncBinary()
		_ = yym4770
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4769))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4769 == nil {
			r.EncodeNil()
		} else {
			yym4771 := z.EncBinary()
			_ = yym4771
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4769))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4772 := *v
	yyl4772 := r.ReadMapStart()
	yybh4772 := z.DecBasicHandle()
	if yyv4772 == nil {
		yyrl4772, _ := z.DecInferLen(yyl4772, yybh4772.MaxInitLen, 40)
		yyv4772 = make(map[string][]uint8, yyrl4772)
		*v = yyv4772
	}
	var yymk4772 string
	var yymv4772 []uint8
	var yymg4772 bool
	if yybh4772.MapValueReset {
		yymg4772 = true
	}
	if yyl4772 > 0 {
		for yyj4772 := 0; yyj4772 < yyl4772; yyj4772++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4772 = ""
			} else {
				yymk4772 = string(r.DecodeString())
			}

			if yymg4772 {
				yymv4772 = yyv4772[yymk4772]
			} else {
				yymv4772 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4772 = nil
			} else {
				yyv4774 := &yymv4772
				yym4775 := z.DecBinary()
				_ = yym4775
				if false {
				} else {
					*yyv4774 = r.DecodeBytes(*(*[]byte)(yyv4774), false, false)
				}
			}

			if yyv4772 != nil {
				yyv4772[yymk4772] = yymv4772
			}
		}
	} else if yyl4772 < 0 {
		for yyj4772 := 0; !r.CheckBreak(); yyj4772++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4772 = ""
			} else {
				yymk4772 = string(r.DecodeString())
			}

			if yymg4772 {
				yymv4772 = yyv4772[yymk4772]
			} else {
				yymv4772 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4772 = nil
			} else {
				yyv4777 := &yymv4772
				yym4778 := z.DecBinary()
				_ = yym4778
				if false {
				} else {
					*yyv4777 = r.DecodeBytes(*(*[]byte)(yyv4777), false, false)
				}
			}

			if yyv4772 != nil {
				yyv4772[yymk4772] = yymv4772
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4779 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4780 := &yyv4779
		yy4780.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4781 := *v
	yyh4781, yyl4781 := z.DecSliceHelperStart()
	var yyc4781 bool
	if yyl4781 == 0 {
		if yyv4781 == nil {
			yyv4781 = []Secret{}
			yyc4781 = true
		} else if len(yyv4781) != 0 {
			yyv4781 = yyv4781[:0]
			yyc4781 = true
		}
	} else if yyl4781 > 0 {
		var yyrr4781, yyrl4781 int
		var yyrt4781 bool
		if yyl4781 > cap(yyv4781) {

			yyrg4781 := len(yyv4781) > 0
			yyv24781 := yyv4781
			yyrl4781, yyrt4781 = z.DecInferLen(yyl4781, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4781 {
				if yyrl4781 <= cap(yyv4781) {
					yyv4781 = yyv4781[:yyrl4781]
				} else {
					yyv4781 = make([]Secret, yyrl4781)
				}
			} else {
				yyv4781 = make([]Secret, yyrl4781)
			}
			yyc4781 = true
			yyrr4781 = len(yyv4781)
			if yyrg4781 {
				copy(yyv4781, yyv24781)
			}
		} else if yyl4781 != len(yyv4781) {
			yyv4781 = yyv4781[:yyl4781]
			yyc4781 = true
		}
		yyj4781 := 0
		for ; yyj4781 < yyrr4781; yyj4781++ {
			yyh4781.ElemContainerState(yyj4781)
			if r.TryDecodeAsNil() {
				yyv4781[yyj4781] = Secret{}
			} else {
				yyv4782 := &yyv4781[yyj4781]
				yyv4782.CodecDecodeSelf(d)
			}

		}
		if yyrt4781 {
			for ; yyj4781 < yyl4781; yyj4781++ {
				yyv4781 = append(yyv4781, Secret{})
				yyh4781.ElemContainerState(yyj4781)
				if r.TryDecodeAsNil() {
					yyv4781[yyj4781] = Secret{}
				} else {
					yyv4783 := &yyv4781[yyj4781]
					yyv4783.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4781 := 0
		for ; !r.CheckBreak(); yyj4781++ {

			if yyj4781 >= len(yyv4781) {
				yyv4781 = append(yyv4781, Secret{}) // var yyz4781 Secret
				yyc4781 = true
			}
			yyh4781.ElemContainerState(yyj4781)
			if yyj4781 < len(yyv4781) {
				if r.TryDecodeAsNil() {
					yyv4781[yyj4781] = Secret{}
				} else {
					yyv4784 := &yyv4781[yyj4781]
					yyv4784.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4781 < len(yyv4781) {
			yyv4781 = yyv4781[:yyj4781]
			yyc4781 = true
		} else if yyj4781 == 0 && yyv4781 == nil {
			yyv4781 = []Secret{}
			yyc4781 = true
		}
	}
	yyh4781.End()
	if yyc4781 {
		*v = yyv4781
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4785 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4786 := &yyv4785
		yy4786.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4787 := *v
	yyh4787, yyl4787 := z.DecSliceHelperStart()
	var yyc4787 bool
	if yyl4787 == 0 {
		if yyv4787 == nil {
			yyv4787 = []ConfigMap{}
			yyc4787 = true
		} else if len(yyv4787) != 0 {
			yyv4787 = yyv4787[:0]
			yyc4787 = true
		}
	} else if yyl4787 > 0 {
		var yyrr4787, yyrl4787 int
		var yyrt4787 bool
		if yyl4787 > cap(yyv4787) {

			yyrg4787 := len(yyv4787) > 0
			yyv24787 := yyv4787
			yyrl4787, yyrt4787 = z.DecInferLen(yyl4787, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4787 {
				if yyrl4787 <= cap(yyv4787) {
					yyv4787 = yyv4787[:yyrl4787]
				} else {
					yyv4787 = make([]ConfigMap, yyrl4787)
				}
			} else {
				yyv4787 = make([]ConfigMap, yyrl4787)
			}
			yyc4787 = true
			yyrr4787 = len(yyv4787)
			if yyrg4787 {
				copy(yyv4787, yyv24787)
			}
		} else if yyl4787 != len(yyv4787) {
			yyv4787 = yyv4787[:yyl4787]
			yyc4787 = true
		}
		yyj4787 := 0
		for ; yyj4787 < yyrr4787; yyj4787++ {
			yyh4787.ElemContainerState(yyj4787)
			if r.TryDecodeAsNil() {
				yyv4787[yyj4787] = ConfigMap{}
			} else {
				yyv4788 := &yyv4787[yyj4787]
				yyv4788.CodecDecodeSelf(d)
			}

		}
		if yyrt4787 {
			for ; yyj4787 < yyl4787; yyj4787++ {
				yyv4787 = append(yyv4787, ConfigMap{})
				yyh4787.ElemContainerState(yyj4787)
				if r.TryDecodeAsNil() {
					yyv4787[yyj4787] = ConfigMap{}
				} else {
					yyv4789 := &yyv4787[yyj4787]
					yyv4789.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4787 := 0
		for ; !r.CheckBreak(); yyj4787++ {

			if yyj4787 >= len(yyv4787) {
				yyv4787 = append(yyv4787, ConfigMap{}) // var yyz4787 ConfigMap
				yyc4787 = true
			}
			yyh4787.ElemContainerState(yyj4787)
			if yyj4787 < len(yyv4787) {
				if r.TryDecodeAsNil() {
					yyv4787[yyj4787] = ConfigMap{}
				} else {
					yyv4790 := &yyv4787[yyj4787]
					yyv4790.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4787 < len(yyv4787) {
			yyv4787 = yyv4787[:yyj4787]
			yyc4787 = true
		} else if yyj4787 == 0 && yyv4787 == nil {
			yyv4787 = []ConfigMap{}
			yyc4787 = true
		}
	}
	yyh4787.End()
	if yyc4787 {
		*v = yyv4787
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4791 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4792 := &yyv4791
		yy4792.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4793 := *v
	yyh4793, yyl4793 := z.DecSliceHelperStart()
	var yyc4793 bool
	if yyl4793 == 0 {
		if yyv4793 == nil {
			yyv4793 = []ComponentCondition{}
			yyc4793 = true
		} else if len(yyv4793) != 0 {
			yyv4793 = yyv4793[:0]
			yyc4793 = true
		}
	} else if yyl4793 > 0 {
		var yyrr4793, yyrl4793 int
		var yyrt4793 bool
		if yyl4793 > cap(yyv4793) {

			yyrg4793 := len(yyv4793) > 0
			yyv24793 := yyv4793
			yyrl4793, yyrt4793 = z.DecInferLen(yyl4793, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4793 {
				if yyrl4793 <= cap(yyv4793) {
					yyv4793 = yyv4793[:yyrl4793]
				} else {
					yyv4793 = make([]ComponentCondition, yyrl4793)
				}
			} else {
				yyv4793 = make([]ComponentCondition, yyrl4793)
			}
			yyc4793 = true
			yyrr4793 = len(yyv4793)
			if yyrg4793 {
				copy(yyv4793, yyv24793)
			}
		} else if yyl4793 != len(yyv4793) {
			yyv4793 = yyv4793[:yyl4793]
			yyc4793 = true
		}
		yyj4793 := 0
		for ; yyj4793 < yyrr4793; yyj4793++ {
			yyh4793.ElemContainerState(yyj4793)
			if r.TryDecodeAsNil() {
				yyv4793[yyj4793] = ComponentCondition{}
			} else {
				yyv4794 := &yyv4793[yyj4793]
				yyv4794.CodecDecodeSelf(d)
			}

		}
		if yyrt4793 {
			for ; yyj4793 < yyl4793; yyj4793++ {
				yyv4793 = append(yyv4793, ComponentCondition{})
				yyh4793.ElemContainerState(yyj4793)
				if r.TryDecodeAsNil() {
					yyv4793[yyj4793] = ComponentCondition{}
				} else {
					yyv4795 := &yyv4793[yyj4793]
					yyv4795.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4793 := 0
		for ; !r.CheckBreak(); yyj4793++ {

			if yyj4793 >= len(yyv4793) {
				yyv4793 = append(yyv4793, ComponentCondition{}) // var yyz4793 ComponentCondition
				yyc4793 = true
			}
			yyh4793.ElemContainerState(yyj4793)
			if yyj4793 < len(yyv4793) {
				if r.TryDecodeAsNil() {
					yyv4793[yyj4793] = ComponentCondition{}
				} else {
					yyv4796 := &yyv4793[yyj4793]
					yyv4796.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4793 < len(yyv4793) {
			yyv4793 = yyv4793[:yyj4793]
			yyc4793 = true
		} else if yyj4793 == 0 && yyv4793 == nil {
			yyv4793 = []ComponentCondition{}
			yyc4793 = true
		}
	}
	yyh4793.End()
	if yyc4793 {
		*v = yyv4793
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4797 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4798 := &yyv4797
		yy4798.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4799 := *v
	yyh4799, yyl4799 := z.DecSliceHelperStart()
	var yyc4799 bool
	if yyl4799 == 0 {
		if yyv4799 == nil {
			yyv4799 = []ComponentStatus{}
			yyc4799 = true
		} else if len(yyv4799) != 0 {
			yyv4799 = yyv4799[:0]
			yyc4799 = true
		}
	} else if yyl4799 > 0 {
		var yyrr4799, yyrl4799 int
		var yyrt4799 bool
		if yyl4799 > cap(yyv4799) {

			yyrg4799 := len(yyv4799) > 0
			yyv24799 := yyv4799
			yyrl4799, yyrt4799 = z.DecInferLen(yyl4799, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4799 {
				if yyrl4799 <= cap(yyv4799) {
					yyv4799 = yyv4799[:yyrl4799]
				} else {
					yyv4799 = make([]ComponentStatus, yyrl4799)
				}
			} else {
				yyv4799 = make([]ComponentStatus, yyrl4799)
			}
			yyc4799 = true
			yyrr4799 = len(yyv4799)
			if yyrg4799 {
				copy(yyv4799, yyv24799)
			}
		} else if yyl4799 != len(yyv4799) {
			yyv4799 = yyv4799[:yyl4799]
			yyc4799 = true
		}
		yyj4799 := 0
		for ; yyj4799 < yyrr4799; yyj4799++ {
			yyh4799.ElemContainerState(yyj4799)
			if r.TryDecodeAsNil() {
				yyv4799[yyj4799] = ComponentStatus{}
			} else {
				yyv4800 := &yyv4799[yyj4799]
				yyv4800.CodecDecodeSelf(d)
			}

		}
		if yyrt4799 {
			for ; yyj4799 < yyl4799; yyj4799++ {
				yyv4799 = append(yyv4799, ComponentStatus{})
				yyh4799.ElemContainerState(yyj4799)
				if r.TryDecodeAsNil() {
					yyv4799[yyj4799] = ComponentStatus{}
				} else {
					yyv4801 := &yyv4799[yyj4799]
					yyv4801.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4799 := 0
		for ; !r.CheckBreak(); yyj4799++ {

			if yyj4799 >= len(yyv4799) {
				yyv4799 = append(yyv4799, ComponentStatus{}) // var yyz4799 ComponentStatus
				yyc4799 = true
			}
			yyh4799.ElemContainerState(yyj4799)
			if yyj4799 < len(yyv4799) {
				if r.TryDecodeAsNil() {
					yyv4799[yyj4799] = ComponentStatus{}
				} else {
					yyv4802 := &yyv4799[yyj4799]
					yyv4802.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4799 < len(yyv4799) {
			yyv4799 = yyv4799[:yyj4799]
			yyc4799 = true
		} else if yyj4799 == 0 && yyv4799 == nil {
			yyv4799 = []ComponentStatus{}
			yyc4799 = true
		}
	}
	yyh4799.End()
	if yyc4799 {
		*v = yyv4799
	}
}
