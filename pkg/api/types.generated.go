/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [21]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(21)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyq167 [20]bool
			_, _, _ = yysep167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[0] = x.HostPath != nil
			yyq167[1] = x.EmptyDir != nil
			yyq167[2] = x.GCEPersistentDisk != nil
			yyq167[3] = x.AWSElasticBlockStore != nil
			yyq167[4] = x.GitRepo != nil
			yyq167[5] = x.Secret != nil
			yyq167[6] = x.NFS != nil
			yyq167[7] = x.ISCSI != nil
			yyq167[8] = x.Glusterfs != nil
			yyq167[9] = x.PersistentVolumeClaim != nil
			yyq167[10] = x.RBD != nil
			yyq167[11] = x.FlexVolume != nil
			yyq167[12] = x.Cinder != nil
			yyq167[13] = x.CephFS != nil
			yyq167[14] = x.Flocker != nil
			yyq167[15] = x.DownwardAPI != nil
			yyq167[16] = x.FC != nil
			yyq167[17] = x.AzureFile != nil
			yyq167[18] = x.ConfigMap != nil
			yyq167[19] = x.VsphereVolume != nil
			var yynn167 int
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(20)
			} else {
				yynn167 = 0
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
				yynn167 = 0
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym188 := z.DecBinary()
	_ = yym188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct189 := r.ContainerType()
		if yyct189 == codecSelferValueTypeMap1234 {
			yyl189 := r.ReadMapStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl189, d)
			}
		} else if yyct189 == codecSelferValueTypeArray1234 {
			yyl189 := r.ReadArrayStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys190Slc
	var yyhl190 bool = l >= 0
	for yyj190 := 0; ; yyj190++ {
		if yyhl190 {
			if yyj190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys190Slc = r.DecodeBytes(yys190Slc, true, true)
		yys190 := string(yys190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys190 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys190)
		} // end switch yys190
	} // end for yyj190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym232 := z.EncBinary()
		_ = yym232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep233 := !z.EncBinary()
			yy2arr233 := z.EncBasicHandle().StructToArray
			var yyq233 [14]bool
			_, _, _ = yysep233, yyq233, yy2arr233
			const yyr233 bool = false
			yyq233[0] = x.GCEPersistentDisk != nil
			yyq233[1] = x.AWSElasticBlockStore != nil
			yyq233[2] = x.HostPath != nil
			yyq233[3] = x.Glusterfs != nil
			yyq233[4] = x.NFS != nil
			yyq233[5] = x.RBD != nil
			yyq233[6] = x.ISCSI != nil
			yyq233[7] = x.FlexVolume != nil
			yyq233[8] = x.Cinder != nil
			yyq233[9] = x.CephFS != nil
			yyq233[10] = x.FC != nil
			yyq233[11] = x.Flocker != nil
			yyq233[12] = x.AzureFile != nil
			yyq233[13] = x.VsphereVolume != nil
			var yynn233 int
			if yyr233 || yy2arr233 {
				r.EncodeArrayStart(14)
			} else {
				yynn233 = 0
				for _, b := range yyq233 {
					if b {
						yynn233++
					}
				}
				r.EncodeMapStart(yynn233)
				yynn233 = 0
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym248 := z.DecBinary()
	_ = yym248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct249 := r.ContainerType()
		if yyct249 == codecSelferValueTypeMap1234 {
			yyl249 := r.ReadMapStart()
			if yyl249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl249, d)
			}
		} else if yyct249 == codecSelferValueTypeArray1234 {
			yyl249 := r.ReadArrayStart()
			if yyl249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys250Slc
	var yyhl250 bool = l >= 0
	for yyj250 := 0; ; yyj250++ {
		if yyhl250 {
			if yyj250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys250Slc = r.DecodeBytes(yys250Slc, true, true)
		yys250 := string(yys250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys250 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys250)
		} // end switch yys250
	} // end for yyj250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj265 int
	var yyb265 bool
	var yyhl265 bool = l >= 0
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj265++
		if yyhl265 {
			yyb265 = yyj265 > l
		} else {
			yyb265 = r.CheckBreak()
		}
		if yyb265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [2]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.ReadOnly != false
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(2)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym283 := z.EncBinary()
				_ = yym283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym284 := z.EncBinary()
				_ = yym284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[1] {
					yym286 := z.EncBinary()
					_ = yym286
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym288 := z.DecBinary()
	_ = yym288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct289 := r.ContainerType()
		if yyct289 == codecSelferValueTypeMap1234 {
			yyl289 := r.ReadMapStart()
			if yyl289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl289, d)
			}
		} else if yyct289 == codecSelferValueTypeArray1234 {
			yyl289 := r.ReadArrayStart()
			if yyl289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys290Slc
	var yyhl290 bool = l >= 0
	for yyj290 := 0; ; yyj290++ {
		if yyhl290 {
			if yyj290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys290Slc = r.DecodeBytes(yys290Slc, true, true)
		yys290 := string(yys290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys290 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys290)
		} // end switch yys290
	} // end for yyj290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj293 int
	var yyb293 bool
	var yyhl293 bool = l >= 0
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj293++
		if yyhl293 {
			yyb293 = yyj293 > l
		} else {
			yyb293 = r.CheckBreak()
		}
		if yyb293 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj293-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [5]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			yyq297[3] = true
			yyq297[4] = true
			var yynn297 int
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(5)
			} else {
				yynn297 = 0
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
				yynn297 = 0
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[2] {
					yy305 := &x.ObjectMeta
					yy305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy306 := &x.ObjectMeta
					yy306.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[3] {
					yy308 := &x.Spec
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Spec
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[4] {
					yy311 := &x.Status
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.Status
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv318 := &x.ObjectMeta
				yyv318.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv319 := &x.Spec
				yyv319.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv320 := &x.Status
				yyv320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv324 := &x.ObjectMeta
		yyv324.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv325 := &x.Spec
		yyv325.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv326 := &x.Status
		yyv326.CodecDecodeSelf(d)
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [18]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq328[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq328[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq328[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq328[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq328[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq328[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq328[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq328[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq328[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq328[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq328[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq328[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq328[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq328[15] = len(x.AccessModes) != 0
			yyq328[16] = x.ClaimRef != nil
			yyq328[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(18)
			} else {
				yynn328 = 1
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn330 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn330 = true
				goto LABEL330
			}
		LABEL330:
			if yyr328 || yy2arr328 {
				if yyn330 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn330 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn331 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn331 = true
				goto LABEL331
			}
		LABEL331:
			if yyr328 || yy2arr328 {
				if yyn331 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn331 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn332 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn332 = true
				goto LABEL332
			}
		LABEL332:
			if yyr328 || yy2arr328 {
				if yyn332 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn332 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn333 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn333 = true
				goto LABEL333
			}
		LABEL333:
			if yyr328 || yy2arr328 {
				if yyn333 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn333 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn334 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn334 = true
				goto LABEL334
			}
		LABEL334:
			if yyr328 || yy2arr328 {
				if yyn334 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn334 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn335 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn335 = true
				goto LABEL335
			}
		LABEL335:
			if yyr328 || yy2arr328 {
				if yyn335 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn335 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn336 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn336 = true
				goto LABEL336
			}
		LABEL336:
			if yyr328 || yy2arr328 {
				if yyn336 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn336 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn337 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn337 = true
				goto LABEL337
			}
		LABEL337:
			if yyr328 || yy2arr328 {
				if yyn337 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn337 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn338 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn338 = true
				goto LABEL338
			}
		LABEL338:
			if yyr328 || yy2arr328 {
				if yyn338 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn338 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr328 || yy2arr328 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr328 || yy2arr328 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr328 || yy2arr328 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr328 || yy2arr328 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr328 || yy2arr328 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym345 := z.EncBinary()
						_ = yym345
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym346 := z.EncBinary()
						_ = yym346
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym349 := z.DecBinary()
	_ = yym349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct350 := r.ContainerType()
		if yyct350 == codecSelferValueTypeMap1234 {
			yyl350 := r.ReadMapStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl350, d)
			}
		} else if yyct350 == codecSelferValueTypeArray1234 {
			yyl350 := r.ReadArrayStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys351Slc
	var yyhl351 bool = l >= 0
	for yyj351 := 0; ; yyj351++ {
		if yyhl351 {
			if yyj351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys351Slc = r.DecodeBytes(yys351Slc, true, true)
		yys351 := string(yys351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys351 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv352 := &x.Capacity
				yyv352.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv367 := &x.AccessModes
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv367), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys351)
		} // end switch yys351
	} // end for yyj351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj371 int
	var yyb371 bool
	var yyhl371 bool = l >= 0
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv372 := &x.Capacity
		yyv372.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv387 := &x.AccessModes
		yym388 := z.DecBinary()
		_ = yym388
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv387), d)
		}
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj371++
		if yyhl371 {
			yyb371 = yyj371 > l
		} else {
			yyb371 = r.CheckBreak()
		}
		if yyb371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym391 := z.EncBinary()
	_ = yym391
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym392 := z.DecBinary()
	_ = yym392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [3]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Phase != ""
			yyq394[1] = x.Message != ""
			yyq394[2] = x.Reason != ""
			var yynn394 int
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(3)
			} else {
				yynn394 = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
				yynn394 = 0
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[1] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[2] {
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym401 := z.EncBinary()
					_ = yym401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym402 := z.DecBinary()
	_ = yym402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct403 := r.ContainerType()
		if yyct403 == codecSelferValueTypeMap1234 {
			yyl403 := r.ReadMapStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl403, d)
			}
		} else if yyct403 == codecSelferValueTypeArray1234 {
			yyl403 := r.ReadArrayStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys404Slc
	var yyhl404 bool = l >= 0
	for yyj404 := 0; ; yyj404++ {
		if yyhl404 {
			if yyj404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys404Slc = r.DecodeBytes(yys404Slc, true, true)
		yys404 := string(yys404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys404 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys404)
		} // end switch yys404
	} // end for yyj404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj408 int
	var yyb408 bool
	var yyhl408 bool = l >= 0
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj408++
		if yyhl408 {
			yyb408 = yyj408 > l
		} else {
			yyb408 = r.CheckBreak()
		}
		if yyb408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym412 := z.EncBinary()
		_ = yym412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep413 := !z.EncBinary()
			yy2arr413 := z.EncBasicHandle().StructToArray
			var yyq413 [4]bool
			_, _, _ = yysep413, yyq413, yy2arr413
			const yyr413 bool = false
			yyq413[0] = x.Kind != ""
			yyq413[1] = x.APIVersion != ""
			yyq413[2] = true
			var yynn413 int
			if yyr413 || yy2arr413 {
				r.EncodeArrayStart(4)
			} else {
				yynn413 = 1
				for _, b := range yyq413 {
					if b {
						yynn413++
					}
				}
				r.EncodeMapStart(yynn413)
				yynn413 = 0
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[0] {
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym416 := z.EncBinary()
					_ = yym416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[1] {
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym419 := z.EncBinary()
					_ = yym419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[2] {
					yy421 := &x.ListMeta
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else if z.HasExtensions() && z.EncExt(yy421) {
					} else {
						z.EncFallback(yy421)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.ListMeta
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy423) {
					} else {
						z.EncFallback(yy423)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym428 := z.DecBinary()
	_ = yym428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct429 := r.ContainerType()
		if yyct429 == codecSelferValueTypeMap1234 {
			yyl429 := r.ReadMapStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl429, d)
			}
		} else if yyct429 == codecSelferValueTypeArray1234 {
			yyl429 := r.ReadArrayStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys430Slc
	var yyhl430 bool = l >= 0
	for yyj430 := 0; ; yyj430++ {
		if yyhl430 {
			if yyj430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys430Slc = r.DecodeBytes(yys430Slc, true, true)
		yys430 := string(yys430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv433 := &x.ListMeta
				yym434 := z.DecBinary()
				_ = yym434
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv433) {
				} else {
					z.DecFallback(yyv433, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv435 := &x.Items
				yym436 := z.DecBinary()
				_ = yym436
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys430)
		} // end switch yys430
	} // end for yyj430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv440 := &x.ListMeta
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv440) {
		} else {
			z.DecFallback(yyv440, false)
		}
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv442 := &x.Items
		yym443 := z.DecBinary()
		_ = yym443
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv442), d)
		}
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym444 := z.EncBinary()
		_ = yym444
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep445 := !z.EncBinary()
			yy2arr445 := z.EncBasicHandle().StructToArray
			var yyq445 [5]bool
			_, _, _ = yysep445, yyq445, yy2arr445
			const yyr445 bool = false
			yyq445[0] = x.Kind != ""
			yyq445[1] = x.APIVersion != ""
			yyq445[2] = true
			yyq445[3] = true
			yyq445[4] = true
			var yynn445 int
			if yyr445 || yy2arr445 {
				r.EncodeArrayStart(5)
			} else {
				yynn445 = 0
				for _, b := range yyq445 {
					if b {
						yynn445++
					}
				}
				r.EncodeMapStart(yynn445)
				yynn445 = 0
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[0] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[2] {
					yy453 := &x.ObjectMeta
					yy453.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy454 := &x.ObjectMeta
					yy454.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[3] {
					yy456 := &x.Spec
					yy456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy457 := &x.Spec
					yy457.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[4] {
					yy459 := &x.Status
					yy459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy460 := &x.Status
					yy460.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym461 := z.DecBinary()
	_ = yym461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct462 := r.ContainerType()
		if yyct462 == codecSelferValueTypeMap1234 {
			yyl462 := r.ReadMapStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl462, d)
			}
		} else if yyct462 == codecSelferValueTypeArray1234 {
			yyl462 := r.ReadArrayStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys463Slc
	var yyhl463 bool = l >= 0
	for yyj463 := 0; ; yyj463++ {
		if yyhl463 {
			if yyj463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys463Slc = r.DecodeBytes(yys463Slc, true, true)
		yys463 := string(yys463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys463 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv466 := &x.ObjectMeta
				yyv466.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv467 := &x.Spec
				yyv467.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv468 := &x.Status
				yyv468.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys463)
		} // end switch yys463
	} // end for yyj463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv472 := &x.ObjectMeta
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv473 := &x.Spec
		yyv473.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv474 := &x.Status
		yyv474.CodecDecodeSelf(d)
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [4]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = x.Kind != ""
			yyq476[1] = x.APIVersion != ""
			yyq476[2] = true
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(4)
			} else {
				yynn476 = 1
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym482 := z.EncBinary()
					_ = yym482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[2] {
					yy484 := &x.ListMeta
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else if z.HasExtensions() && z.EncExt(yy484) {
					} else {
						z.EncFallback(yy484)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym491 := z.DecBinary()
	_ = yym491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct492 := r.ContainerType()
		if yyct492 == codecSelferValueTypeMap1234 {
			yyl492 := r.ReadMapStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl492, d)
			}
		} else if yyct492 == codecSelferValueTypeArray1234 {
			yyl492 := r.ReadArrayStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys493Slc
	var yyhl493 bool = l >= 0
	for yyj493 := 0; ; yyj493++ {
		if yyhl493 {
			if yyj493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys493Slc = r.DecodeBytes(yys493Slc, true, true)
		yys493 := string(yys493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv496 := &x.ListMeta
				yym497 := z.DecBinary()
				_ = yym497
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv496) {
				} else {
					z.DecFallback(yyv496, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv498 := &x.Items
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv498), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys493)
		} // end switch yys493
	} // end for yyj493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv503 := &x.ListMeta
		yym504 := z.DecBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv503) {
		} else {
			z.DecFallback(yyv503, false)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv505 := &x.Items
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv505), d)
		}
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym507 := z.EncBinary()
		_ = yym507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep508 := !z.EncBinary()
			yy2arr508 := z.EncBasicHandle().StructToArray
			var yyq508 [4]bool
			_, _, _ = yysep508, yyq508, yy2arr508
			const yyr508 bool = false
			yyq508[0] = len(x.AccessModes) != 0
			yyq508[1] = x.Selector != nil
			yyq508[2] = true
			yyq508[3] = x.VolumeName != ""
			var yynn508 int
			if yyr508 || yy2arr508 {
				r.EncodeArrayStart(4)
			} else {
				yynn508 = 0
				for _, b := range yyq508 {
					if b {
						yynn508++
					}
				}
				r.EncodeMapStart(yynn508)
				yynn508 = 0
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym510 := z.EncBinary()
						_ = yym510
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym511 := z.EncBinary()
						_ = yym511
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym514 := z.EncBinary()
						_ = yym514
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[2] {
					yy516 := &x.Resources
					yy516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy517 := &x.Resources
					yy517.CodecEncodeSelf(e)
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[3] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym521 := z.DecBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct522 := r.ContainerType()
		if yyct522 == codecSelferValueTypeMap1234 {
			yyl522 := r.ReadMapStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl522, d)
			}
		} else if yyct522 == codecSelferValueTypeArray1234 {
			yyl522 := r.ReadArrayStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys523Slc
	var yyhl523 bool = l >= 0
	for yyj523 := 0; ; yyj523++ {
		if yyhl523 {
			if yyj523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys523Slc = r.DecodeBytes(yys523Slc, true, true)
		yys523 := string(yys523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys523 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv524 := &x.AccessModes
				yym525 := z.DecBinary()
				_ = yym525
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv524), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym527 := z.DecBinary()
				_ = yym527
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv528 := &x.Resources
				yyv528.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys523)
		} // end switch yys523
	} // end for yyj523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj530 int
	var yyb530 bool
	var yyhl530 bool = l >= 0
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv531 := &x.AccessModes
		yym532 := z.DecBinary()
		_ = yym532
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv531), d)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv535 := &x.Resources
		yyv535.CodecDecodeSelf(d)
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj530++
		if yyhl530 {
			yyb530 = yyj530 > l
		} else {
			yyb530 = r.CheckBreak()
		}
		if yyb530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [3]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = x.Phase != ""
			yyq538[1] = len(x.AccessModes) != 0
			yyq538[2] = len(x.Capacity) != 0
			var yynn538 int
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(3)
			} else {
				yynn538 = 0
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
				yynn538 = 0
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym541 := z.EncBinary()
						_ = yym541
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv548 := &x.AccessModes
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv550 := &x.Capacity
				yyv550.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj551 int
	var yyb551 bool
	var yyhl551 bool = l >= 0
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv553 := &x.AccessModes
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
		}
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv555 := &x.Capacity
		yyv555.CodecDecodeSelf(d)
	}
	for {
		yyj551++
		if yyhl551 {
			yyb551 = yyj551 > l
		} else {
			yyb551 = r.CheckBreak()
		}
		if yyb551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym556 := z.EncBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym557 := z.DecBinary()
	_ = yym557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym558 := z.EncBinary()
	_ = yym558
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym559 := z.DecBinary()
	_ = yym559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym560 := z.EncBinary()
	_ = yym560
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym562 := z.EncBinary()
		_ = yym562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep563 := !z.EncBinary()
			yy2arr563 := z.EncBasicHandle().StructToArray
			var yyq563 [1]bool
			_, _, _ = yysep563, yyq563, yy2arr563
			const yyr563 bool = false
			var yynn563 int
			if yyr563 || yy2arr563 {
				r.EncodeArrayStart(1)
			} else {
				yynn563 = 1
				for _, b := range yyq563 {
					if b {
						yynn563++
					}
				}
				r.EncodeMapStart(yynn563)
				yynn563 = 0
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym567 := z.DecBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct568 := r.ContainerType()
		if yyct568 == codecSelferValueTypeMap1234 {
			yyl568 := r.ReadMapStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl568, d)
			}
		} else if yyct568 == codecSelferValueTypeArray1234 {
			yyl568 := r.ReadArrayStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys569Slc
	var yyhl569 bool = l >= 0
	for yyj569 := 0; ; yyj569++ {
		if yyhl569 {
			if yyj569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys569Slc = r.DecodeBytes(yys569Slc, true, true)
		yys569 := string(yys569Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys569 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys569)
		} // end switch yys569
	} // end for yyj569
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym573 := z.EncBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep574 := !z.EncBinary()
			yy2arr574 := z.EncBasicHandle().StructToArray
			var yyq574 [1]bool
			_, _, _ = yysep574, yyq574, yy2arr574
			const yyr574 bool = false
			yyq574[0] = x.Medium != ""
			var yynn574 int
			if yyr574 || yy2arr574 {
				r.EncodeArrayStart(1)
			} else {
				yynn574 = 0
				for _, b := range yyq574 {
					if b {
						yynn574++
					}
				}
				r.EncodeMapStart(yynn574)
				yynn574 = 0
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct577 := r.ContainerType()
		if yyct577 == codecSelferValueTypeMap1234 {
			yyl577 := r.ReadMapStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl577, d)
			}
		} else if yyct577 == codecSelferValueTypeArray1234 {
			yyl577 := r.ReadArrayStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys578Slc
	var yyhl578 bool = l >= 0
	for yyj578 := 0; ; yyj578++ {
		if yyhl578 {
			if yyj578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys578Slc = r.DecodeBytes(yys578Slc, true, true)
		yys578 := string(yys578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys578 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys578)
		} // end switch yys578
	} // end for yyj578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym584 := z.EncBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym586 := z.EncBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep587 := !z.EncBinary()
			yy2arr587 := z.EncBasicHandle().StructToArray
			var yyq587 [4]bool
			_, _, _ = yysep587, yyq587, yy2arr587
			const yyr587 bool = false
			yyq587[1] = x.FSType != ""
			yyq587[2] = x.Partition != 0
			yyq587[3] = x.ReadOnly != false
			var yynn587 int
			if yyr587 || yy2arr587 {
				r.EncodeArrayStart(4)
			} else {
				yynn587 = 1
				for _, b := range yyq587 {
					if b {
						yynn587++
					}
				}
				r.EncodeMapStart(yynn587)
				yynn587 = 0
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym589 := z.EncBinary()
				_ = yym589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym590 := z.EncBinary()
				_ = yym590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[1] {
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq587[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[2] {
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq587[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[3] {
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq587[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct601 := r.ContainerType()
		if yyct601 == codecSelferValueTypeMap1234 {
			yyl601 := r.ReadMapStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl601, d)
			}
		} else if yyct601 == codecSelferValueTypeArray1234 {
			yyl601 := r.ReadArrayStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys602Slc
	var yyhl602 bool = l >= 0
	for yyj602 := 0; ; yyj602++ {
		if yyhl602 {
			if yyj602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys602Slc = r.DecodeBytes(yys602Slc, true, true)
		yys602 := string(yys602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys602 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys602)
		} // end switch yys602
	} // end for yyj602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj607 int
	var yyb607 bool
	var yyhl607 bool = l >= 0
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj607++
		if yyhl607 {
			yyb607 = yyj607 > l
		} else {
			yyb607 = r.CheckBreak()
		}
		if yyb607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [6]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[0] = x.TargetPortal != ""
			yyq613[1] = x.IQN != ""
			yyq613[2] = x.Lun != 0
			yyq613[3] = x.ISCSIInterface != ""
			yyq613[4] = x.FSType != ""
			yyq613[5] = x.ReadOnly != false
			var yynn613 int
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(6)
			} else {
				yynn613 = 0
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
				yynn613 = 0
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[0] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[4] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[5] {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym632 := z.DecBinary()
	_ = yym632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct633 := r.ContainerType()
		if yyct633 == codecSelferValueTypeMap1234 {
			yyl633 := r.ReadMapStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl633, d)
			}
		} else if yyct633 == codecSelferValueTypeArray1234 {
			yyl633 := r.ReadArrayStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys634Slc
	var yyhl634 bool = l >= 0
	for yyj634 := 0; ; yyj634++ {
		if yyhl634 {
			if yyj634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys634Slc = r.DecodeBytes(yys634Slc, true, true)
		yys634 := string(yys634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys634 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys634)
		} // end switch yys634
	} // end for yyj634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj641 int
	var yyb641 bool
	var yyhl641 bool = l >= 0
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj641++
		if yyhl641 {
			yyb641 = yyj641 > l
		} else {
			yyb641 = r.CheckBreak()
		}
		if yyb641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym648 := z.EncBinary()
		_ = yym648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep649 := !z.EncBinary()
			yy2arr649 := z.EncBasicHandle().StructToArray
			var yyq649 [4]bool
			_, _, _ = yysep649, yyq649, yy2arr649
			const yyr649 bool = false
			yyq649[2] = x.FSType != ""
			yyq649[3] = x.ReadOnly != false
			var yynn649 int
			if yyr649 || yy2arr649 {
				r.EncodeArrayStart(4)
			} else {
				yynn649 = 2
				for _, b := range yyq649 {
					if b {
						yynn649++
					}
				}
				r.EncodeMapStart(yynn649)
				yynn649 = 0
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy654 := *x.Lun
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeInt(int64(yy654))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy656 := *x.Lun
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeInt(int64(yy656))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[2] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[3] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq649[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct665 := r.ContainerType()
		if yyct665 == codecSelferValueTypeMap1234 {
			yyl665 := r.ReadMapStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl665, d)
			}
		} else if yyct665 == codecSelferValueTypeArray1234 {
			yyl665 := r.ReadArrayStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys666Slc
	var yyhl666 bool = l >= 0
	for yyj666 := 0; ; yyj666++ {
		if yyhl666 {
			if yyj666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys666Slc = r.DecodeBytes(yys666Slc, true, true)
		yys666 := string(yys666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys666 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv667 := &x.TargetWWNs
				yym668 := z.DecBinary()
				_ = yym668
				if false {
				} else {
					z.F.DecSliceStringX(yyv667, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym670 := z.DecBinary()
				_ = yym670
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys666)
		} // end switch yys666
	} // end for yyj666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj673 int
	var yyb673 bool
	var yyhl673 bool = l >= 0
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv674 := &x.TargetWWNs
		yym675 := z.DecBinary()
		_ = yym675
		if false {
		} else {
			z.F.DecSliceStringX(yyv674, false, d)
		}
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym677 := z.DecBinary()
		_ = yym677
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj673++
		if yyhl673 {
			yyb673 = yyj673 > l
		} else {
			yyb673 = r.CheckBreak()
		}
		if yyb673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym680 := z.EncBinary()
		_ = yym680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep681 := !z.EncBinary()
			yy2arr681 := z.EncBasicHandle().StructToArray
			var yyq681 [5]bool
			_, _, _ = yysep681, yyq681, yy2arr681
			const yyr681 bool = false
			yyq681[1] = x.FSType != ""
			yyq681[2] = x.SecretRef != nil
			yyq681[3] = x.ReadOnly != false
			yyq681[4] = len(x.Options) != 0
			var yynn681 int
			if yyr681 || yy2arr681 {
				r.EncodeArrayStart(5)
			} else {
				yynn681 = 1
				for _, b := range yyq681 {
					if b {
						yynn681++
					}
				}
				r.EncodeMapStart(yynn681)
				yynn681 = 0
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym684 := z.EncBinary()
				_ = yym684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[1] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[3] {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq681[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym693 := z.EncBinary()
						_ = yym693
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym694 := z.EncBinary()
						_ = yym694
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym695 := z.DecBinary()
	_ = yym695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct696 := r.ContainerType()
		if yyct696 == codecSelferValueTypeMap1234 {
			yyl696 := r.ReadMapStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl696, d)
			}
		} else if yyct696 == codecSelferValueTypeArray1234 {
			yyl696 := r.ReadArrayStart()
			if yyl696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys697Slc
	var yyhl697 bool = l >= 0
	for yyj697 := 0; ; yyj697++ {
		if yyhl697 {
			if yyj697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys697Slc = r.DecodeBytes(yys697Slc, true, true)
		yys697 := string(yys697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys697 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv702 := &x.Options
				yym703 := z.DecBinary()
				_ = yym703
				if false {
				} else {
					z.F.DecMapStringStringX(yyv702, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys697)
		} // end switch yys697
	} // end for yyj697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj704 int
	var yyb704 bool
	var yyhl704 bool = l >= 0
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj704++
	if yyhl704 {
		yyb704 = yyj704 > l
	} else {
		yyb704 = r.CheckBreak()
	}
	if yyb704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv709 := &x.Options
		yym710 := z.DecBinary()
		_ = yym710
		if false {
		} else {
			z.F.DecMapStringStringX(yyv709, false, d)
		}
	}
	for {
		yyj704++
		if yyhl704 {
			yyb704 = yyj704 > l
		} else {
			yyb704 = r.CheckBreak()
		}
		if yyb704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [4]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[1] = x.FSType != ""
			yyq712[2] = x.Partition != 0
			yyq712[3] = x.ReadOnly != false
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(4)
			} else {
				yynn712 = 1
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym715 := z.EncBinary()
				_ = yym715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[3] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym725 := z.DecBinary()
	_ = yym725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct726 := r.ContainerType()
		if yyct726 == codecSelferValueTypeMap1234 {
			yyl726 := r.ReadMapStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl726, d)
			}
		} else if yyct726 == codecSelferValueTypeArray1234 {
			yyl726 := r.ReadArrayStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys727Slc
	var yyhl727 bool = l >= 0
	for yyj727 := 0; ; yyj727++ {
		if yyhl727 {
			if yyj727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys727Slc = r.DecodeBytes(yys727Slc, true, true)
		yys727 := string(yys727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys727 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys727)
		} // end switch yys727
	} // end for yyj727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj732 int
	var yyb732 bool
	var yyhl732 bool = l >= 0
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj732++
		if yyhl732 {
			yyb732 = yyj732 > l
		} else {
			yyb732 = r.CheckBreak()
		}
		if yyb732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [3]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			yyq738[1] = x.Revision != ""
			yyq738[2] = x.Directory != ""
			var yynn738 int
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(3)
			} else {
				yynn738 = 1
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
				yynn738 = 0
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym740 := z.EncBinary()
				_ = yym740
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym741 := z.EncBinary()
				_ = yym741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[1] {
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[2] {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym748 := z.DecBinary()
	_ = yym748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct749 := r.ContainerType()
		if yyct749 == codecSelferValueTypeMap1234 {
			yyl749 := r.ReadMapStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl749, d)
			}
		} else if yyct749 == codecSelferValueTypeArray1234 {
			yyl749 := r.ReadArrayStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys750Slc
	var yyhl750 bool = l >= 0
	for yyj750 := 0; ; yyj750++ {
		if yyhl750 {
			if yyj750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys750Slc = r.DecodeBytes(yys750Slc, true, true)
		yys750 := string(yys750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys750 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys750)
		} // end switch yys750
	} // end for yyj750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj754 int
	var yyb754 bool
	var yyhl754 bool = l >= 0
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj754++
		if yyhl754 {
			yyb754 = yyj754 > l
		} else {
			yyb754 = r.CheckBreak()
		}
		if yyb754 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj754-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [2]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[0] = x.SecretName != ""
			yyq759[1] = len(x.Items) != 0
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(2)
			} else {
				yynn759 = 0
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[0] {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym764 := z.EncBinary()
						_ = yym764
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym765 := z.EncBinary()
						_ = yym765
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct767 := r.ContainerType()
		if yyct767 == codecSelferValueTypeMap1234 {
			yyl767 := r.ReadMapStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl767, d)
			}
		} else if yyct767 == codecSelferValueTypeArray1234 {
			yyl767 := r.ReadArrayStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys768Slc
	var yyhl768 bool = l >= 0
	for yyj768 := 0; ; yyj768++ {
		if yyhl768 {
			if yyj768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys768Slc = r.DecodeBytes(yys768Slc, true, true)
		yys768 := string(yys768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys768 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv770 := &x.Items
				yym771 := z.DecBinary()
				_ = yym771
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv770), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys768)
		} // end switch yys768
	} // end for yyj768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj772 int
	var yyb772 bool
	var yyhl772 bool = l >= 0
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv774 := &x.Items
		yym775 := z.DecBinary()
		_ = yym775
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv774), d)
		}
	}
	for {
		yyj772++
		if yyhl772 {
			yyb772 = yyj772 > l
		} else {
			yyb772 = r.CheckBreak()
		}
		if yyb772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym776 := z.EncBinary()
		_ = yym776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep777 := !z.EncBinary()
			yy2arr777 := z.EncBasicHandle().StructToArray
			var yyq777 [3]bool
			_, _, _ = yysep777, yyq777, yy2arr777
			const yyr777 bool = false
			yyq777[2] = x.ReadOnly != false
			var yynn777 int
			if yyr777 || yy2arr777 {
				r.EncodeArrayStart(3)
			} else {
				yynn777 = 2
				for _, b := range yyq777 {
					if b {
						yynn777++
					}
				}
				r.EncodeMapStart(yynn777)
				yynn777 = 0
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym779 := z.EncBinary()
				_ = yym779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym780 := z.EncBinary()
				_ = yym780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq777[2] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq777[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr777 || yy2arr777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym787 := z.DecBinary()
	_ = yym787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct788 := r.ContainerType()
		if yyct788 == codecSelferValueTypeMap1234 {
			yyl788 := r.ReadMapStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl788, d)
			}
		} else if yyct788 == codecSelferValueTypeArray1234 {
			yyl788 := r.ReadArrayStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys789Slc
	var yyhl789 bool = l >= 0
	for yyj789 := 0; ; yyj789++ {
		if yyhl789 {
			if yyj789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys789Slc = r.DecodeBytes(yys789Slc, true, true)
		yys789 := string(yys789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys789 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys789)
		} // end switch yys789
	} // end for yyj789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj793 int
	var yyb793 bool
	var yyhl793 bool = l >= 0
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj793++
		if yyhl793 {
			yyb793 = yyj793 > l
		} else {
			yyb793 = r.CheckBreak()
		}
		if yyb793 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj793-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym797 := z.EncBinary()
		_ = yym797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep798 := !z.EncBinary()
			yy2arr798 := z.EncBasicHandle().StructToArray
			var yyq798 [3]bool
			_, _, _ = yysep798, yyq798, yy2arr798
			const yyr798 bool = false
			yyq798[2] = x.ReadOnly != false
			var yynn798 int
			if yyr798 || yy2arr798 {
				r.EncodeArrayStart(3)
			} else {
				yynn798 = 2
				for _, b := range yyq798 {
					if b {
						yynn798++
					}
				}
				r.EncodeMapStart(yynn798)
				yynn798 = 0
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym801 := z.EncBinary()
				_ = yym801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq798[2] {
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq798[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym808 := z.DecBinary()
	_ = yym808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct809 := r.ContainerType()
		if yyct809 == codecSelferValueTypeMap1234 {
			yyl809 := r.ReadMapStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl809, d)
			}
		} else if yyct809 == codecSelferValueTypeArray1234 {
			yyl809 := r.ReadArrayStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys810Slc
	var yyhl810 bool = l >= 0
	for yyj810 := 0; ; yyj810++ {
		if yyhl810 {
			if yyj810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys810Slc = r.DecodeBytes(yys810Slc, true, true)
		yys810 := string(yys810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys810 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys810)
		} // end switch yys810
	} // end for yyj810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [8]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[2] = x.FSType != ""
			yyq819[3] = x.RBDPool != ""
			yyq819[4] = x.RadosUser != ""
			yyq819[5] = x.Keyring != ""
			yyq819[6] = x.SecretRef != nil
			yyq819[7] = x.ReadOnly != false
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(8)
			} else {
				yynn819 = 2
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[2] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[3] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[4] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[5] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq819[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[7] {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq819[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv845 := &x.CephMonitors
				yym846 := z.DecBinary()
				_ = yym846
				if false {
				} else {
					z.F.DecSliceStringX(yyv845, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj854 int
	var yyb854 bool
	var yyhl854 bool = l >= 0
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv855 := &x.CephMonitors
		yym856 := z.DecBinary()
		_ = yym856
		if false {
		} else {
			z.F.DecSliceStringX(yyv855, false, d)
		}
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj854++
		if yyhl854 {
			yyb854 = yyj854 > l
		} else {
			yyb854 = r.CheckBreak()
		}
		if yyb854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym864 := z.EncBinary()
		_ = yym864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep865 := !z.EncBinary()
			yy2arr865 := z.EncBasicHandle().StructToArray
			var yyq865 [3]bool
			_, _, _ = yysep865, yyq865, yy2arr865
			const yyr865 bool = false
			yyq865[1] = x.FSType != ""
			yyq865[2] = x.ReadOnly != false
			var yynn865 int
			if yyr865 || yy2arr865 {
				r.EncodeArrayStart(3)
			} else {
				yynn865 = 1
				for _, b := range yyq865 {
					if b {
						yynn865++
					}
				}
				r.EncodeMapStart(yynn865)
				yynn865 = 0
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym867 := z.EncBinary()
				_ = yym867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym868 := z.EncBinary()
				_ = yym868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[1] {
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq865[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq865[2] {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq865[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr865 || yy2arr865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct876 := r.ContainerType()
		if yyct876 == codecSelferValueTypeMap1234 {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if yyct876 == codecSelferValueTypeArray1234 {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys877 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [6]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			yyq886[1] = x.Path != ""
			yyq886[2] = x.User != ""
			yyq886[3] = x.SecretFile != ""
			yyq886[4] = x.SecretRef != nil
			yyq886[5] = x.ReadOnly != false
			var yynn886 int
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(6)
			} else {
				yynn886 = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
				yynn886 = 0
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[1] {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[2] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[3] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq886[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[5] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq886[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym903 := z.DecBinary()
	_ = yym903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct904 := r.ContainerType()
		if yyct904 == codecSelferValueTypeMap1234 {
			yyl904 := r.ReadMapStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl904, d)
			}
		} else if yyct904 == codecSelferValueTypeArray1234 {
			yyl904 := r.ReadArrayStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys905Slc
	var yyhl905 bool = l >= 0
	for yyj905 := 0; ; yyj905++ {
		if yyhl905 {
			if yyj905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys905Slc = r.DecodeBytes(yys905Slc, true, true)
		yys905 := string(yys905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys905 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv906 := &x.Monitors
				yym907 := z.DecBinary()
				_ = yym907
				if false {
				} else {
					z.F.DecSliceStringX(yyv906, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys905)
		} // end switch yys905
	} // end for yyj905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj913 int
	var yyb913 bool
	var yyhl913 bool = l >= 0
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv914 := &x.Monitors
		yym915 := z.DecBinary()
		_ = yym915
		if false {
		} else {
			z.F.DecSliceStringX(yyv914, false, d)
		}
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj913++
	if yyhl913 {
		yyb913 = yyj913 > l
	} else {
		yyb913 = r.CheckBreak()
	}
	if yyb913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj913++
		if yyhl913 {
			yyb913 = yyj913 > l
		} else {
			yyb913 = r.CheckBreak()
		}
		if yyb913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym921 := z.EncBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep922 := !z.EncBinary()
			yy2arr922 := z.EncBasicHandle().StructToArray
			var yyq922 [1]bool
			_, _, _ = yysep922, yyq922, yy2arr922
			const yyr922 bool = false
			var yynn922 int
			if yyr922 || yy2arr922 {
				r.EncodeArrayStart(1)
			} else {
				yynn922 = 1
				for _, b := range yyq922 {
					if b {
						yynn922++
					}
				}
				r.EncodeMapStart(yynn922)
				yynn922 = 0
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym924 := z.EncBinary()
				_ = yym924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym925 := z.EncBinary()
				_ = yym925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym926 := z.DecBinary()
	_ = yym926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct927 := r.ContainerType()
		if yyct927 == codecSelferValueTypeMap1234 {
			yyl927 := r.ReadMapStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl927, d)
			}
		} else if yyct927 == codecSelferValueTypeArray1234 {
			yyl927 := r.ReadArrayStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys928Slc
	var yyhl928 bool = l >= 0
	for yyj928 := 0; ; yyj928++ {
		if yyhl928 {
			if yyj928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys928Slc = r.DecodeBytes(yys928Slc, true, true)
		yys928 := string(yys928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys928 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys928)
		} // end switch yys928
	} // end for yyj928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym932 := z.EncBinary()
		_ = yym932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep933 := !z.EncBinary()
			yy2arr933 := z.EncBasicHandle().StructToArray
			var yyq933 [1]bool
			_, _, _ = yysep933, yyq933, yy2arr933
			const yyr933 bool = false
			yyq933[0] = len(x.Items) != 0
			var yynn933 int
			if yyr933 || yy2arr933 {
				r.EncodeArrayStart(1)
			} else {
				yynn933 = 0
				for _, b := range yyq933 {
					if b {
						yynn933++
					}
				}
				r.EncodeMapStart(yynn933)
				yynn933 = 0
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq933[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym935 := z.EncBinary()
						_ = yym935
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym936 := z.EncBinary()
						_ = yym936
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym937 := z.DecBinary()
	_ = yym937
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct938 := r.ContainerType()
		if yyct938 == codecSelferValueTypeMap1234 {
			yyl938 := r.ReadMapStart()
			if yyl938 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl938, d)
			}
		} else if yyct938 == codecSelferValueTypeArray1234 {
			yyl938 := r.ReadArrayStart()
			if yyl938 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl938, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys939Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys939Slc
	var yyhl939 bool = l >= 0
	for yyj939 := 0; ; yyj939++ {
		if yyhl939 {
			if yyj939 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys939Slc = r.DecodeBytes(yys939Slc, true, true)
		yys939 := string(yys939Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys939 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv940 := &x.Items
				yym941 := z.DecBinary()
				_ = yym941
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys939)
		} // end switch yys939
	} // end for yyj939
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj942 int
	var yyb942 bool
	var yyhl942 bool = l >= 0
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv943 := &x.Items
		yym944 := z.DecBinary()
		_ = yym944
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv943), d)
		}
	}
	for {
		yyj942++
		if yyhl942 {
			yyb942 = yyj942 > l
		} else {
			yyb942 = r.CheckBreak()
		}
		if yyb942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym945 := z.EncBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep946 := !z.EncBinary()
			yy2arr946 := z.EncBasicHandle().StructToArray
			var yyq946 [5]bool
			_, _, _ = yysep946, yyq946, yy2arr946
			const yyr946 bool = false
			yyq946[1] = x.FieldRef != nil
			yyq946[2] = x.ResourceFieldRef != nil
			yyq946[3] = x.ConfigMapRef != ""
			yyq946[4] = x.Template != ""
			var yynn946 int
			if yyr946 || yy2arr946 {
				r.EncodeArrayStart(5)
			} else {
				yynn946 = 1
				for _, b := range yyq946 {
					if b {
						yynn946++
					}
				}
				r.EncodeMapStart(yynn946)
				yynn946 = 0
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym949 := z.EncBinary()
				_ = yym949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[3] {
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapRef))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq946[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapRef))
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[4] {
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Template))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq946[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym957 := z.EncBinary()
					_ = yym957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Template))
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapRef":
			if r.TryDecodeAsNil() {
				x.ConfigMapRef = ""
			} else {
				x.ConfigMapRef = string(r.DecodeString())
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = ""
			} else {
				x.Template = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj966 int
	var yyb966 bool
	var yyhl966 bool = l >= 0
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ConfigMapRef = ""
	} else {
		x.ConfigMapRef = string(r.DecodeString())
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = ""
	} else {
		x.Template = string(r.DecodeString())
	}
	for {
		yyj966++
		if yyhl966 {
			yyb966 = yyj966 > l
		} else {
			yyb966 = r.CheckBreak()
		}
		if yyb966 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj966-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym972 := z.EncBinary()
		_ = yym972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep973 := !z.EncBinary()
			yy2arr973 := z.EncBasicHandle().StructToArray
			var yyq973 [3]bool
			_, _, _ = yysep973, yyq973, yy2arr973
			const yyr973 bool = false
			yyq973[2] = x.ReadOnly != false
			var yynn973 int
			if yyr973 || yy2arr973 {
				r.EncodeArrayStart(3)
			} else {
				yynn973 = 2
				for _, b := range yyq973 {
					if b {
						yynn973++
					}
				}
				r.EncodeMapStart(yynn973)
				yynn973 = 0
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym975 := z.EncBinary()
				_ = yym975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym976 := z.EncBinary()
				_ = yym976
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym978 := z.EncBinary()
				_ = yym978
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym979 := z.EncBinary()
				_ = yym979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[2] {
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq973[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct984 := r.ContainerType()
		if yyct984 == codecSelferValueTypeMap1234 {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if yyct984 == codecSelferValueTypeArray1234 {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys985 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj989 int
	var yyb989 bool
	var yyhl989 bool = l >= 0
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj989++
		if yyhl989 {
			yyb989 = yyj989 > l
		} else {
			yyb989 = r.CheckBreak()
		}
		if yyb989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym993 := z.EncBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep994 := !z.EncBinary()
			yy2arr994 := z.EncBasicHandle().StructToArray
			var yyq994 [2]bool
			_, _, _ = yysep994, yyq994, yy2arr994
			const yyr994 bool = false
			yyq994[1] = x.FSType != ""
			var yynn994 int
			if yyr994 || yy2arr994 {
				r.EncodeArrayStart(2)
			} else {
				yynn994 = 1
				for _, b := range yyq994 {
					if b {
						yynn994++
					}
				}
				r.EncodeMapStart(yynn994)
				yynn994 = 0
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym996 := z.EncBinary()
				_ = yym996
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym997 := z.EncBinary()
				_ = yym997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq994[1] {
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq994[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr994 || yy2arr994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1001 := z.DecBinary()
	_ = yym1001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1002 := r.ContainerType()
		if yyct1002 == codecSelferValueTypeMap1234 {
			yyl1002 := r.ReadMapStart()
			if yyl1002 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1002, d)
			}
		} else if yyct1002 == codecSelferValueTypeArray1234 {
			yyl1002 := r.ReadArrayStart()
			if yyl1002 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1003Slc
	var yyhl1003 bool = l >= 0
	for yyj1003 := 0; ; yyj1003++ {
		if yyhl1003 {
			if yyj1003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1003Slc = r.DecodeBytes(yys1003Slc, true, true)
		yys1003 := string(yys1003Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1003 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1003)
		} // end switch yys1003
	} // end for yyj1003
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1009 := z.EncBinary()
		_ = yym1009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1010 := !z.EncBinary()
			yy2arr1010 := z.EncBasicHandle().StructToArray
			var yyq1010 [2]bool
			_, _, _ = yysep1010, yyq1010, yy2arr1010
			const yyr1010 bool = false
			yyq1010[1] = len(x.Items) != 0
			var yynn1010 int
			if yyr1010 || yy2arr1010 {
				r.EncodeArrayStart(2)
			} else {
				yynn1010 = 1
				for _, b := range yyq1010 {
					if b {
						yynn1010++
					}
				}
				r.EncodeMapStart(yynn1010)
				yynn1010 = 0
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1015 := z.EncBinary()
						_ = yym1015
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1016 := z.EncBinary()
						_ = yym1016
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1017 := z.DecBinary()
	_ = yym1017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1018 := r.ContainerType()
		if yyct1018 == codecSelferValueTypeMap1234 {
			yyl1018 := r.ReadMapStart()
			if yyl1018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1018, d)
			}
		} else if yyct1018 == codecSelferValueTypeArray1234 {
			yyl1018 := r.ReadArrayStart()
			if yyl1018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1019Slc
	var yyhl1019 bool = l >= 0
	for yyj1019 := 0; ; yyj1019++ {
		if yyhl1019 {
			if yyj1019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1019Slc = r.DecodeBytes(yys1019Slc, true, true)
		yys1019 := string(yys1019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1019 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1021 := &x.Items
				yym1022 := z.DecBinary()
				_ = yym1022
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1021), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1019)
		} // end switch yys1019
	} // end for yyj1019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1023 int
	var yyb1023 bool
	var yyhl1023 bool = l >= 0
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1025 := &x.Items
		yym1026 := z.DecBinary()
		_ = yym1026
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1025), d)
		}
	}
	for {
		yyj1023++
		if yyhl1023 {
			yyb1023 = yyj1023 > l
		} else {
			yyb1023 = r.CheckBreak()
		}
		if yyb1023 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1023-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1027 := z.EncBinary()
		_ = yym1027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1028 := !z.EncBinary()
			yy2arr1028 := z.EncBasicHandle().StructToArray
			var yyq1028 [2]bool
			_, _, _ = yysep1028, yyq1028, yy2arr1028
			const yyr1028 bool = false
			var yynn1028 int
			if yyr1028 || yy2arr1028 {
				r.EncodeArrayStart(2)
			} else {
				yynn1028 = 2
				for _, b := range yyq1028 {
					if b {
						yynn1028++
					}
				}
				r.EncodeMapStart(yynn1028)
				yynn1028 = 0
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1030 := z.EncBinary()
				_ = yym1030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1031 := z.EncBinary()
				_ = yym1031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1034 := z.EncBinary()
				_ = yym1034
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1035 := z.DecBinary()
	_ = yym1035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1036 := r.ContainerType()
		if yyct1036 == codecSelferValueTypeMap1234 {
			yyl1036 := r.ReadMapStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1036, d)
			}
		} else if yyct1036 == codecSelferValueTypeArray1234 {
			yyl1036 := r.ReadArrayStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1037Slc
	var yyhl1037 bool = l >= 0
	for yyj1037 := 0; ; yyj1037++ {
		if yyhl1037 {
			if yyj1037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1037Slc = r.DecodeBytes(yys1037Slc, true, true)
		yys1037 := string(yys1037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1037 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1037)
		} // end switch yys1037
	} // end for yyj1037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1040 int
	var yyb1040 bool
	var yyhl1040 bool = l >= 0
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1040++
		if yyhl1040 {
			yyb1040 = yyj1040 > l
		} else {
			yyb1040 = r.CheckBreak()
		}
		if yyb1040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1043 := z.EncBinary()
		_ = yym1043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1044 := !z.EncBinary()
			yy2arr1044 := z.EncBasicHandle().StructToArray
			var yyq1044 [5]bool
			_, _, _ = yysep1044, yyq1044, yy2arr1044
			const yyr1044 bool = false
			yyq1044[0] = x.Name != ""
			yyq1044[1] = x.HostPort != 0
			yyq1044[3] = x.Protocol != ""
			yyq1044[4] = x.HostIP != ""
			var yynn1044 int
			if yyr1044 || yy2arr1044 {
				r.EncodeArrayStart(5)
			} else {
				yynn1044 = 1
				for _, b := range yyq1044 {
					if b {
						yynn1044++
					}
				}
				r.EncodeMapStart(yynn1044)
				yynn1044 = 0
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[0] {
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1044[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1047 := z.EncBinary()
					_ = yym1047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[1] {
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1044[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1050 := z.EncBinary()
					_ = yym1050
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1052 := z.EncBinary()
				_ = yym1052
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1053 := z.EncBinary()
				_ = yym1053
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1044[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[4] {
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1044[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1058 := z.DecBinary()
	_ = yym1058
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1059 := r.ContainerType()
		if yyct1059 == codecSelferValueTypeMap1234 {
			yyl1059 := r.ReadMapStart()
			if yyl1059 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1059, d)
			}
		} else if yyct1059 == codecSelferValueTypeArray1234 {
			yyl1059 := r.ReadArrayStart()
			if yyl1059 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1059, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1060Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1060Slc
	var yyhl1060 bool = l >= 0
	for yyj1060 := 0; ; yyj1060++ {
		if yyhl1060 {
			if yyj1060 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1060Slc = r.DecodeBytes(yys1060Slc, true, true)
		yys1060 := string(yys1060Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1060 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1060)
		} // end switch yys1060
	} // end for yyj1060
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1072 := z.EncBinary()
		_ = yym1072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1073 := !z.EncBinary()
			yy2arr1073 := z.EncBasicHandle().StructToArray
			var yyq1073 [4]bool
			_, _, _ = yysep1073, yyq1073, yy2arr1073
			const yyr1073 bool = false
			yyq1073[1] = x.ReadOnly != false
			yyq1073[3] = x.SubPath != ""
			var yynn1073 int
			if yyr1073 || yy2arr1073 {
				r.EncodeArrayStart(4)
			} else {
				yynn1073 = 2
				for _, b := range yyq1073 {
					if b {
						yynn1073++
					}
				}
				r.EncodeMapStart(yynn1073)
				yynn1073 = 0
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1075 := z.EncBinary()
				_ = yym1075
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1073[1] {
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1082 := z.EncBinary()
				_ = yym1082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1073[3] {
					yym1084 := z.EncBinary()
					_ = yym1084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1073[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1086 := z.DecBinary()
	_ = yym1086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1087 := r.ContainerType()
		if yyct1087 == codecSelferValueTypeMap1234 {
			yyl1087 := r.ReadMapStart()
			if yyl1087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1087, d)
			}
		} else if yyct1087 == codecSelferValueTypeArray1234 {
			yyl1087 := r.ReadArrayStart()
			if yyl1087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1088Slc
	var yyhl1088 bool = l >= 0
	for yyj1088 := 0; ; yyj1088++ {
		if yyhl1088 {
			if yyj1088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1088Slc = r.DecodeBytes(yys1088Slc, true, true)
		yys1088 := string(yys1088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1088 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1088)
		} // end switch yys1088
	} // end for yyj1088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1093 int
	var yyb1093 bool
	var yyhl1093 bool = l >= 0
	yyj1093++
	if yyhl1093 {
		yyb1093 = yyj1093 > l
	} else {
		yyb1093 = r.CheckBreak()
	}
	if yyb1093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1093++
	if yyhl1093 {
		yyb1093 = yyj1093 > l
	} else {
		yyb1093 = r.CheckBreak()
	}
	if yyb1093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1093++
	if yyhl1093 {
		yyb1093 = yyj1093 > l
	} else {
		yyb1093 = r.CheckBreak()
	}
	if yyb1093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1093++
	if yyhl1093 {
		yyb1093 = yyj1093 > l
	} else {
		yyb1093 = r.CheckBreak()
	}
	if yyb1093 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1093++
		if yyhl1093 {
			yyb1093 = yyj1093 > l
		} else {
			yyb1093 = r.CheckBreak()
		}
		if yyb1093 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1093-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1098 := z.EncBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1099 := !z.EncBinary()
			yy2arr1099 := z.EncBasicHandle().StructToArray
			var yyq1099 [3]bool
			_, _, _ = yysep1099, yyq1099, yy2arr1099
			const yyr1099 bool = false
			yyq1099[1] = x.Value != ""
			yyq1099[2] = x.ValueFrom != nil
			var yynn1099 int
			if yyr1099 || yy2arr1099 {
				r.EncodeArrayStart(3)
			} else {
				yynn1099 = 1
				for _, b := range yyq1099 {
					if b {
						yynn1099++
					}
				}
				r.EncodeMapStart(yynn1099)
				yynn1099 = 0
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1099[1] {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1099[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1099[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1099[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1107 := z.DecBinary()
	_ = yym1107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1108 := r.ContainerType()
		if yyct1108 == codecSelferValueTypeMap1234 {
			yyl1108 := r.ReadMapStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1108, d)
			}
		} else if yyct1108 == codecSelferValueTypeArray1234 {
			yyl1108 := r.ReadArrayStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1109Slc
	var yyhl1109 bool = l >= 0
	for yyj1109 := 0; ; yyj1109++ {
		if yyhl1109 {
			if yyj1109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1109Slc = r.DecodeBytes(yys1109Slc, true, true)
		yys1109 := string(yys1109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1109 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1109)
		} // end switch yys1109
	} // end for yyj1109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1113 int
	var yyb1113 bool
	var yyhl1113 bool = l >= 0
	yyj1113++
	if yyhl1113 {
		yyb1113 = yyj1113 > l
	} else {
		yyb1113 = r.CheckBreak()
	}
	if yyb1113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1113++
	if yyhl1113 {
		yyb1113 = yyj1113 > l
	} else {
		yyb1113 = r.CheckBreak()
	}
	if yyb1113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1113++
	if yyhl1113 {
		yyb1113 = yyj1113 > l
	} else {
		yyb1113 = r.CheckBreak()
	}
	if yyb1113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1113++
		if yyhl1113 {
			yyb1113 = yyj1113 > l
		} else {
			yyb1113 = r.CheckBreak()
		}
		if yyb1113 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1113-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1117 := z.EncBinary()
		_ = yym1117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1118 := !z.EncBinary()
			yy2arr1118 := z.EncBasicHandle().StructToArray
			var yyq1118 [4]bool
			_, _, _ = yysep1118, yyq1118, yy2arr1118
			const yyr1118 bool = false
			yyq1118[0] = x.FieldRef != nil
			yyq1118[1] = x.ResourceFieldRef != nil
			yyq1118[2] = x.ConfigMapKeyRef != nil
			yyq1118[3] = x.SecretKeyRef != nil
			var yynn1118 int
			if yyr1118 || yy2arr1118 {
				r.EncodeArrayStart(4)
			} else {
				yynn1118 = 0
				for _, b := range yyq1118 {
					if b {
						yynn1118++
					}
				}
				r.EncodeMapStart(yynn1118)
				yynn1118 = 0
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1124 := r.ContainerType()
		if yyct1124 == codecSelferValueTypeMap1234 {
			yyl1124 := r.ReadMapStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1124, d)
			}
		} else if yyct1124 == codecSelferValueTypeArray1234 {
			yyl1124 := r.ReadArrayStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1125Slc
	var yyhl1125 bool = l >= 0
	for yyj1125 := 0; ; yyj1125++ {
		if yyhl1125 {
			if yyj1125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1125Slc = r.DecodeBytes(yys1125Slc, true, true)
		yys1125 := string(yys1125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1125 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1125)
		} // end switch yys1125
	} // end for yyj1125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1135 := z.EncBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1136 := !z.EncBinary()
			yy2arr1136 := z.EncBasicHandle().StructToArray
			var yyq1136 [2]bool
			_, _, _ = yysep1136, yyq1136, yy2arr1136
			const yyr1136 bool = false
			var yynn1136 int
			if yyr1136 || yy2arr1136 {
				r.EncodeArrayStart(2)
			} else {
				yynn1136 = 2
				for _, b := range yyq1136 {
					if b {
						yynn1136++
					}
				}
				r.EncodeMapStart(yynn1136)
				yynn1136 = 0
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1139 := z.EncBinary()
				_ = yym1139
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1141 := z.EncBinary()
				_ = yym1141
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1143 := z.DecBinary()
	_ = yym1143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1144 := r.ContainerType()
		if yyct1144 == codecSelferValueTypeMap1234 {
			yyl1144 := r.ReadMapStart()
			if yyl1144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1144, d)
			}
		} else if yyct1144 == codecSelferValueTypeArray1234 {
			yyl1144 := r.ReadArrayStart()
			if yyl1144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1145Slc
	var yyhl1145 bool = l >= 0
	for yyj1145 := 0; ; yyj1145++ {
		if yyhl1145 {
			if yyj1145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1145Slc = r.DecodeBytes(yys1145Slc, true, true)
		yys1145 := string(yys1145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1145 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1145)
		} // end switch yys1145
	} // end for yyj1145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1148 int
	var yyb1148 bool
	var yyhl1148 bool = l >= 0
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1148++
		if yyhl1148 {
			yyb1148 = yyj1148 > l
		} else {
			yyb1148 = r.CheckBreak()
		}
		if yyb1148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1151 := z.EncBinary()
		_ = yym1151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1152 := !z.EncBinary()
			yy2arr1152 := z.EncBasicHandle().StructToArray
			var yyq1152 [3]bool
			_, _, _ = yysep1152, yyq1152, yy2arr1152
			const yyr1152 bool = false
			yyq1152[0] = x.ContainerName != ""
			yyq1152[2] = true
			var yynn1152 int
			if yyr1152 || yy2arr1152 {
				r.EncodeArrayStart(3)
			} else {
				yynn1152 = 1
				for _, b := range yyq1152 {
					if b {
						yynn1152++
					}
				}
				r.EncodeMapStart(yynn1152)
				yynn1152 = 0
			}
			if yyr1152 || yy2arr1152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1152[0] {
					yym1154 := z.EncBinary()
					_ = yym1154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1152[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1152 || yy2arr1152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1157 := z.EncBinary()
				_ = yym1157
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1158 := z.EncBinary()
				_ = yym1158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1152 || yy2arr1152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1152[2] {
					yy1160 := &x.Divisor
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1160) {
					} else if !yym1161 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1160)
					} else {
						z.EncFallback(yy1160)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1152[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1162 := &x.Divisor
					yym1163 := z.EncBinary()
					_ = yym1163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1162) {
					} else if !yym1163 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1162)
					} else {
						z.EncFallback(yy1162)
					}
				}
			}
			if yyr1152 || yy2arr1152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1164 := z.DecBinary()
	_ = yym1164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1165 := r.ContainerType()
		if yyct1165 == codecSelferValueTypeMap1234 {
			yyl1165 := r.ReadMapStart()
			if yyl1165 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1165, d)
			}
		} else if yyct1165 == codecSelferValueTypeArray1234 {
			yyl1165 := r.ReadArrayStart()
			if yyl1165 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1166Slc
	var yyhl1166 bool = l >= 0
	for yyj1166 := 0; ; yyj1166++ {
		if yyhl1166 {
			if yyj1166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1166Slc = r.DecodeBytes(yys1166Slc, true, true)
		yys1166 := string(yys1166Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1166 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1169 := &x.Divisor
				yym1170 := z.DecBinary()
				_ = yym1170
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1169) {
				} else if !yym1170 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1169)
				} else {
					z.DecFallback(yyv1169, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1166)
		} // end switch yys1166
	} // end for yyj1166
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1171 int
	var yyb1171 bool
	var yyhl1171 bool = l >= 0
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1174 := &x.Divisor
		yym1175 := z.DecBinary()
		_ = yym1175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1174) {
		} else if !yym1175 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1174)
		} else {
			z.DecFallback(yyv1174, false)
		}
	}
	for {
		yyj1171++
		if yyhl1171 {
			yyb1171 = yyj1171 > l
		} else {
			yyb1171 = r.CheckBreak()
		}
		if yyb1171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1176 := z.EncBinary()
		_ = yym1176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1177 := !z.EncBinary()
			yy2arr1177 := z.EncBasicHandle().StructToArray
			var yyq1177 [2]bool
			_, _, _ = yysep1177, yyq1177, yy2arr1177
			const yyr1177 bool = false
			var yynn1177 int
			if yyr1177 || yy2arr1177 {
				r.EncodeArrayStart(2)
			} else {
				yynn1177 = 2
				for _, b := range yyq1177 {
					if b {
						yynn1177++
					}
				}
				r.EncodeMapStart(yynn1177)
				yynn1177 = 0
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1179 := z.EncBinary()
				_ = yym1179
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1180 := z.EncBinary()
				_ = yym1180
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1182 := z.EncBinary()
				_ = yym1182
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1183 := z.EncBinary()
				_ = yym1183
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1189 int
	var yyb1189 bool
	var yyhl1189 bool = l >= 0
	yyj1189++
	if yyhl1189 {
		yyb1189 = yyj1189 > l
	} else {
		yyb1189 = r.CheckBreak()
	}
	if yyb1189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1189++
	if yyhl1189 {
		yyb1189 = yyj1189 > l
	} else {
		yyb1189 = r.CheckBreak()
	}
	if yyb1189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1189++
		if yyhl1189 {
			yyb1189 = yyj1189 > l
		} else {
			yyb1189 = r.CheckBreak()
		}
		if yyb1189 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1189-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1192 := z.EncBinary()
		_ = yym1192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1193 := !z.EncBinary()
			yy2arr1193 := z.EncBasicHandle().StructToArray
			var yyq1193 [2]bool
			_, _, _ = yysep1193, yyq1193, yy2arr1193
			const yyr1193 bool = false
			var yynn1193 int
			if yyr1193 || yy2arr1193 {
				r.EncodeArrayStart(2)
			} else {
				yynn1193 = 2
				for _, b := range yyq1193 {
					if b {
						yynn1193++
					}
				}
				r.EncodeMapStart(yynn1193)
				yynn1193 = 0
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1198 := z.EncBinary()
				_ = yym1198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1199 := z.EncBinary()
				_ = yym1199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1200 := z.DecBinary()
	_ = yym1200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1201 := r.ContainerType()
		if yyct1201 == codecSelferValueTypeMap1234 {
			yyl1201 := r.ReadMapStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1201, d)
			}
		} else if yyct1201 == codecSelferValueTypeArray1234 {
			yyl1201 := r.ReadArrayStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1202Slc
	var yyhl1202 bool = l >= 0
	for yyj1202 := 0; ; yyj1202++ {
		if yyhl1202 {
			if yyj1202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1202Slc = r.DecodeBytes(yys1202Slc, true, true)
		yys1202 := string(yys1202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1202 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1202)
		} // end switch yys1202
	} // end for yyj1202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1205 int
	var yyb1205 bool
	var yyhl1205 bool = l >= 0
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1205++
		if yyhl1205 {
			yyb1205 = yyj1205 > l
		} else {
			yyb1205 = r.CheckBreak()
		}
		if yyb1205 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1205-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [2]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			var yynn1209 int
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(2)
			} else {
				yynn1209 = 2
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
				yynn1209 = 0
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1211 := z.EncBinary()
				_ = yym1211
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1212 := z.EncBinary()
				_ = yym1212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1215 := z.EncBinary()
				_ = yym1215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1217 := r.ContainerType()
		if yyct1217 == codecSelferValueTypeMap1234 {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if yyct1217 == codecSelferValueTypeArray1234 {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1218 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1221 int
	var yyb1221 bool
	var yyhl1221 bool = l >= 0
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1221++
		if yyhl1221 {
			yyb1221 = yyj1221 > l
		} else {
			yyb1221 = r.CheckBreak()
		}
		if yyb1221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1224 := z.EncBinary()
		_ = yym1224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1225 := !z.EncBinary()
			yy2arr1225 := z.EncBasicHandle().StructToArray
			var yyq1225 [5]bool
			_, _, _ = yysep1225, yyq1225, yy2arr1225
			const yyr1225 bool = false
			yyq1225[0] = x.Path != ""
			yyq1225[1] = true
			yyq1225[2] = x.Host != ""
			yyq1225[3] = x.Scheme != ""
			yyq1225[4] = len(x.HTTPHeaders) != 0
			var yynn1225 int
			if yyr1225 || yy2arr1225 {
				r.EncodeArrayStart(5)
			} else {
				yynn1225 = 0
				for _, b := range yyq1225 {
					if b {
						yynn1225++
					}
				}
				r.EncodeMapStart(yynn1225)
				yynn1225 = 0
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[0] {
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[1] {
					yy1230 := &x.Port
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1230) {
					} else if !yym1231 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1230)
					} else {
						z.EncFallback(yy1230)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1225[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1232 := &x.Port
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1232) {
					} else if !yym1233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1232)
					} else {
						z.EncFallback(yy1232)
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[2] {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1225[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1225[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1239 := z.EncBinary()
						_ = yym1239
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1225[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1240 := z.EncBinary()
						_ = yym1240
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1241 := z.DecBinary()
	_ = yym1241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1242 := r.ContainerType()
		if yyct1242 == codecSelferValueTypeMap1234 {
			yyl1242 := r.ReadMapStart()
			if yyl1242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1242, d)
			}
		} else if yyct1242 == codecSelferValueTypeArray1234 {
			yyl1242 := r.ReadArrayStart()
			if yyl1242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1243Slc
	var yyhl1243 bool = l >= 0
	for yyj1243 := 0; ; yyj1243++ {
		if yyhl1243 {
			if yyj1243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1243Slc = r.DecodeBytes(yys1243Slc, true, true)
		yys1243 := string(yys1243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1243 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1245 := &x.Port
				yym1246 := z.DecBinary()
				_ = yym1246
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1245) {
				} else if !yym1246 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1245)
				} else {
					z.DecFallback(yyv1245, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1249 := &x.HTTPHeaders
				yym1250 := z.DecBinary()
				_ = yym1250
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1249), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1243)
		} // end switch yys1243
	} // end for yyj1243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1251 int
	var yyb1251 bool
	var yyhl1251 bool = l >= 0
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1253 := &x.Port
		yym1254 := z.DecBinary()
		_ = yym1254
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1253) {
		} else if !yym1254 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1253)
		} else {
			z.DecFallback(yyv1253, false)
		}
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1257 := &x.HTTPHeaders
		yym1258 := z.DecBinary()
		_ = yym1258
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1257), d)
		}
	}
	for {
		yyj1251++
		if yyhl1251 {
			yyb1251 = yyj1251 > l
		} else {
			yyb1251 = r.CheckBreak()
		}
		if yyb1251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1259 := z.EncBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1260 := z.DecBinary()
	_ = yym1260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1261 := z.EncBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1262 := !z.EncBinary()
			yy2arr1262 := z.EncBasicHandle().StructToArray
			var yyq1262 [1]bool
			_, _, _ = yysep1262, yyq1262, yy2arr1262
			const yyr1262 bool = false
			yyq1262[0] = true
			var yynn1262 int
			if yyr1262 || yy2arr1262 {
				r.EncodeArrayStart(1)
			} else {
				yynn1262 = 0
				for _, b := range yyq1262 {
					if b {
						yynn1262++
					}
				}
				r.EncodeMapStart(yynn1262)
				yynn1262 = 0
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[0] {
					yy1264 := &x.Port
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1264) {
					} else if !yym1265 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1264)
					} else {
						z.EncFallback(yy1264)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1266 := &x.Port
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1266) {
					} else if !yym1267 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1266)
					} else {
						z.EncFallback(yy1266)
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1268 := z.DecBinary()
	_ = yym1268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1269 := r.ContainerType()
		if yyct1269 == codecSelferValueTypeMap1234 {
			yyl1269 := r.ReadMapStart()
			if yyl1269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1269, d)
			}
		} else if yyct1269 == codecSelferValueTypeArray1234 {
			yyl1269 := r.ReadArrayStart()
			if yyl1269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1270Slc
	var yyhl1270 bool = l >= 0
	for yyj1270 := 0; ; yyj1270++ {
		if yyhl1270 {
			if yyj1270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1270Slc = r.DecodeBytes(yys1270Slc, true, true)
		yys1270 := string(yys1270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1270 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1271 := &x.Port
				yym1272 := z.DecBinary()
				_ = yym1272
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1271) {
				} else if !yym1272 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1271)
				} else {
					z.DecFallback(yyv1271, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1270)
		} // end switch yys1270
	} // end for yyj1270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1273 int
	var yyb1273 bool
	var yyhl1273 bool = l >= 0
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1274 := &x.Port
		yym1275 := z.DecBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1274) {
		} else if !yym1275 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1274)
		} else {
			z.DecFallback(yyv1274, false)
		}
	}
	for {
		yyj1273++
		if yyhl1273 {
			yyb1273 = yyj1273 > l
		} else {
			yyb1273 = r.CheckBreak()
		}
		if yyb1273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1276 := z.EncBinary()
		_ = yym1276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1277 := !z.EncBinary()
			yy2arr1277 := z.EncBasicHandle().StructToArray
			var yyq1277 [1]bool
			_, _, _ = yysep1277, yyq1277, yy2arr1277
			const yyr1277 bool = false
			yyq1277[0] = len(x.Command) != 0
			var yynn1277 int
			if yyr1277 || yy2arr1277 {
				r.EncodeArrayStart(1)
			} else {
				yynn1277 = 0
				for _, b := range yyq1277 {
					if b {
						yynn1277++
					}
				}
				r.EncodeMapStart(yynn1277)
				yynn1277 = 0
			}
			if yyr1277 || yy2arr1277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1277[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1279 := z.EncBinary()
						_ = yym1279
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1277[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1280 := z.EncBinary()
						_ = yym1280
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1277 || yy2arr1277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1281 := z.DecBinary()
	_ = yym1281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1282 := r.ContainerType()
		if yyct1282 == codecSelferValueTypeMap1234 {
			yyl1282 := r.ReadMapStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1282, d)
			}
		} else if yyct1282 == codecSelferValueTypeArray1234 {
			yyl1282 := r.ReadArrayStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1283Slc
	var yyhl1283 bool = l >= 0
	for yyj1283 := 0; ; yyj1283++ {
		if yyhl1283 {
			if yyj1283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1283Slc = r.DecodeBytes(yys1283Slc, true, true)
		yys1283 := string(yys1283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1283 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1284 := &x.Command
				yym1285 := z.DecBinary()
				_ = yym1285
				if false {
				} else {
					z.F.DecSliceStringX(yyv1284, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1283)
		} // end switch yys1283
	} // end for yyj1283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1287 := &x.Command
		yym1288 := z.DecBinary()
		_ = yym1288
		if false {
		} else {
			z.F.DecSliceStringX(yyv1287, false, d)
		}
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1289 := z.EncBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1290 := !z.EncBinary()
			yy2arr1290 := z.EncBasicHandle().StructToArray
			var yyq1290 [8]bool
			_, _, _ = yysep1290, yyq1290, yy2arr1290
			const yyr1290 bool = false
			yyq1290[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1290[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1290[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1290[3] = x.InitialDelaySeconds != 0
			yyq1290[4] = x.TimeoutSeconds != 0
			yyq1290[5] = x.PeriodSeconds != 0
			yyq1290[6] = x.SuccessThreshold != 0
			yyq1290[7] = x.FailureThreshold != 0
			var yynn1290 int
			if yyr1290 || yy2arr1290 {
				r.EncodeArrayStart(8)
			} else {
				yynn1290 = 0
				for _, b := range yyq1290 {
					if b {
						yynn1290++
					}
				}
				r.EncodeMapStart(yynn1290)
				yynn1290 = 0
			}
			var yyn1291 bool
			if x.Handler.Exec == nil {
				yyn1291 = true
				goto LABEL1291
			}
		LABEL1291:
			if yyr1290 || yy2arr1290 {
				if yyn1291 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1290[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1291 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1292 bool
			if x.Handler.HTTPGet == nil {
				yyn1292 = true
				goto LABEL1292
			}
		LABEL1292:
			if yyr1290 || yy2arr1290 {
				if yyn1292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1290[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1292 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1293 bool
			if x.Handler.TCPSocket == nil {
				yyn1293 = true
				goto LABEL1293
			}
		LABEL1293:
			if yyr1290 || yy2arr1290 {
				if yyn1293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1290[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1293 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[3] {
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1296 := z.EncBinary()
					_ = yym1296
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[4] {
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[5] {
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[6] {
					yym1304 := z.EncBinary()
					_ = yym1304
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[7] {
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1310 := r.ContainerType()
		if yyct1310 == codecSelferValueTypeMap1234 {
			yyl1310 := r.ReadMapStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1310, d)
			}
		} else if yyct1310 == codecSelferValueTypeArray1234 {
			yyl1310 := r.ReadArrayStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1311Slc
	var yyhl1311 bool = l >= 0
	for yyj1311 := 0; ; yyj1311++ {
		if yyhl1311 {
			if yyj1311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1311Slc = r.DecodeBytes(yys1311Slc, true, true)
		yys1311 := string(yys1311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1311 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1311)
		} // end switch yys1311
	} // end for yyj1311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1320 int
	var yyb1320 bool
	var yyhl1320 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1320++
		if yyhl1320 {
			yyb1320 = yyj1320 > l
		} else {
			yyb1320 = r.CheckBreak()
		}
		if yyb1320 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1320-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1329 := z.EncBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1330 := z.DecBinary()
	_ = yym1330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1331 := z.EncBinary()
	_ = yym1331
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1332 := z.DecBinary()
	_ = yym1332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1333 := z.EncBinary()
		_ = yym1333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1334 := !z.EncBinary()
			yy2arr1334 := z.EncBasicHandle().StructToArray
			var yyq1334 [2]bool
			_, _, _ = yysep1334, yyq1334, yy2arr1334
			const yyr1334 bool = false
			yyq1334[0] = len(x.Add) != 0
			yyq1334[1] = len(x.Drop) != 0
			var yynn1334 int
			if yyr1334 || yy2arr1334 {
				r.EncodeArrayStart(2)
			} else {
				yynn1334 = 0
				for _, b := range yyq1334 {
					if b {
						yynn1334++
					}
				}
				r.EncodeMapStart(yynn1334)
				yynn1334 = 0
			}
			if yyr1334 || yy2arr1334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1334[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1336 := z.EncBinary()
						_ = yym1336
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1337 := z.EncBinary()
						_ = yym1337
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1334 || yy2arr1334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1334[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1339 := z.EncBinary()
						_ = yym1339
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1340 := z.EncBinary()
						_ = yym1340
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1334 || yy2arr1334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1341 := z.DecBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1342 := r.ContainerType()
		if yyct1342 == codecSelferValueTypeMap1234 {
			yyl1342 := r.ReadMapStart()
			if yyl1342 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1342, d)
			}
		} else if yyct1342 == codecSelferValueTypeArray1234 {
			yyl1342 := r.ReadArrayStart()
			if yyl1342 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1343Slc
	var yyhl1343 bool = l >= 0
	for yyj1343 := 0; ; yyj1343++ {
		if yyhl1343 {
			if yyj1343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1343Slc = r.DecodeBytes(yys1343Slc, true, true)
		yys1343 := string(yys1343Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1343 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1344 := &x.Add
				yym1345 := z.DecBinary()
				_ = yym1345
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1344), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1346 := &x.Drop
				yym1347 := z.DecBinary()
				_ = yym1347
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1346), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1343)
		} // end switch yys1343
	} // end for yyj1343
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1348 int
	var yyb1348 bool
	var yyhl1348 bool = l >= 0
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1349 := &x.Add
		yym1350 := z.DecBinary()
		_ = yym1350
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1349), d)
		}
	}
	yyj1348++
	if yyhl1348 {
		yyb1348 = yyj1348 > l
	} else {
		yyb1348 = r.CheckBreak()
	}
	if yyb1348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1351 := &x.Drop
		yym1352 := z.DecBinary()
		_ = yym1352
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1351), d)
		}
	}
	for {
		yyj1348++
		if yyhl1348 {
			yyb1348 = yyj1348 > l
		} else {
			yyb1348 = r.CheckBreak()
		}
		if yyb1348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1353 := z.EncBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1354 := !z.EncBinary()
			yy2arr1354 := z.EncBasicHandle().StructToArray
			var yyq1354 [2]bool
			_, _, _ = yysep1354, yyq1354, yy2arr1354
			const yyr1354 bool = false
			yyq1354[0] = len(x.Limits) != 0
			yyq1354[1] = len(x.Requests) != 0
			var yynn1354 int
			if yyr1354 || yy2arr1354 {
				r.EncodeArrayStart(2)
			} else {
				yynn1354 = 0
				for _, b := range yyq1354 {
					if b {
						yynn1354++
					}
				}
				r.EncodeMapStart(yynn1354)
				yynn1354 = 0
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1357 := z.DecBinary()
	_ = yym1357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1358 := r.ContainerType()
		if yyct1358 == codecSelferValueTypeMap1234 {
			yyl1358 := r.ReadMapStart()
			if yyl1358 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1358, d)
			}
		} else if yyct1358 == codecSelferValueTypeArray1234 {
			yyl1358 := r.ReadArrayStart()
			if yyl1358 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1359Slc
	var yyhl1359 bool = l >= 0
	for yyj1359 := 0; ; yyj1359++ {
		if yyhl1359 {
			if yyj1359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1359Slc = r.DecodeBytes(yys1359Slc, true, true)
		yys1359 := string(yys1359Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1359 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1360 := &x.Limits
				yyv1360.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1361 := &x.Requests
				yyv1361.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1359)
		} // end switch yys1359
	} // end for yyj1359
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1362 int
	var yyb1362 bool
	var yyhl1362 bool = l >= 0
	yyj1362++
	if yyhl1362 {
		yyb1362 = yyj1362 > l
	} else {
		yyb1362 = r.CheckBreak()
	}
	if yyb1362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1363 := &x.Limits
		yyv1363.CodecDecodeSelf(d)
	}
	yyj1362++
	if yyhl1362 {
		yyb1362 = yyj1362 > l
	} else {
		yyb1362 = r.CheckBreak()
	}
	if yyb1362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1364 := &x.Requests
		yyv1364.CodecDecodeSelf(d)
	}
	for {
		yyj1362++
		if yyhl1362 {
			yyb1362 = yyj1362 > l
		} else {
			yyb1362 = r.CheckBreak()
		}
		if yyb1362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1365 := z.EncBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1366 := !z.EncBinary()
			yy2arr1366 := z.EncBasicHandle().StructToArray
			var yyq1366 [18]bool
			_, _, _ = yysep1366, yyq1366, yy2arr1366
			const yyr1366 bool = false
			yyq1366[2] = len(x.Command) != 0
			yyq1366[3] = len(x.Args) != 0
			yyq1366[4] = x.WorkingDir != ""
			yyq1366[5] = len(x.Ports) != 0
			yyq1366[6] = len(x.Env) != 0
			yyq1366[7] = true
			yyq1366[8] = len(x.VolumeMounts) != 0
			yyq1366[9] = x.LivenessProbe != nil
			yyq1366[10] = x.ReadinessProbe != nil
			yyq1366[11] = x.Lifecycle != nil
			yyq1366[12] = x.TerminationMessagePath != ""
			yyq1366[14] = x.SecurityContext != nil
			yyq1366[15] = x.Stdin != false
			yyq1366[16] = x.StdinOnce != false
			yyq1366[17] = x.TTY != false
			var yynn1366 int
			if yyr1366 || yy2arr1366 {
				r.EncodeArrayStart(18)
			} else {
				yynn1366 = 3
				for _, b := range yyq1366 {
					if b {
						yynn1366++
					}
				}
				r.EncodeMapStart(yynn1366)
				yynn1366 = 0
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1368 := z.EncBinary()
				_ = yym1368
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1371 := z.EncBinary()
				_ = yym1371
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1372 := z.EncBinary()
				_ = yym1372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1374 := z.EncBinary()
						_ = yym1374
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1375 := z.EncBinary()
						_ = yym1375
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1377 := z.EncBinary()
						_ = yym1377
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1378 := z.EncBinary()
						_ = yym1378
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[4] {
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1366[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1383 := z.EncBinary()
						_ = yym1383
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1384 := z.EncBinary()
						_ = yym1384
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[7] {
					yy1389 := &x.Resources
					yy1389.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1390 := &x.Resources
					yy1390.CodecEncodeSelf(e)
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1392 := z.EncBinary()
						_ = yym1392
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1393 := z.EncBinary()
						_ = yym1393
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[12] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1366[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1366[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[15] {
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1366[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[16] {
					yym1406 := z.EncBinary()
					_ = yym1406
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1366[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1366[17] {
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1366[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1366 || yy2arr1366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1411 := z.DecBinary()
	_ = yym1411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1412 := r.ContainerType()
		if yyct1412 == codecSelferValueTypeMap1234 {
			yyl1412 := r.ReadMapStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1412, d)
			}
		} else if yyct1412 == codecSelferValueTypeArray1234 {
			yyl1412 := r.ReadArrayStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1413Slc
	var yyhl1413 bool = l >= 0
	for yyj1413 := 0; ; yyj1413++ {
		if yyhl1413 {
			if yyj1413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1413Slc = r.DecodeBytes(yys1413Slc, true, true)
		yys1413 := string(yys1413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1413 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1416 := &x.Command
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					z.F.DecSliceStringX(yyv1416, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1418 := &x.Args
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					z.F.DecSliceStringX(yyv1418, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1421 := &x.Ports
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1421), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1423 := &x.Env
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1423), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1425 := &x.Resources
				yyv1425.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1426 := &x.VolumeMounts
				yym1427 := z.DecBinary()
				_ = yym1427
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1426), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1413)
		} // end switch yys1413
	} // end for yyj1413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1437 int
	var yyb1437 bool
	var yyhl1437 bool = l >= 0
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1440 := &x.Command
		yym1441 := z.DecBinary()
		_ = yym1441
		if false {
		} else {
			z.F.DecSliceStringX(yyv1440, false, d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1442 := &x.Args
		yym1443 := z.DecBinary()
		_ = yym1443
		if false {
		} else {
			z.F.DecSliceStringX(yyv1442, false, d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1445 := &x.Ports
		yym1446 := z.DecBinary()
		_ = yym1446
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1445), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1447 := &x.Env
		yym1448 := z.DecBinary()
		_ = yym1448
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1447), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1449 := &x.Resources
		yyv1449.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1450 := &x.VolumeMounts
		yym1451 := z.DecBinary()
		_ = yym1451
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1450), d)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1437++
		if yyhl1437 {
			yyb1437 = yyj1437 > l
		} else {
			yyb1437 = r.CheckBreak()
		}
		if yyb1437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1461 := z.EncBinary()
		_ = yym1461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1462 := !z.EncBinary()
			yy2arr1462 := z.EncBasicHandle().StructToArray
			var yyq1462 [3]bool
			_, _, _ = yysep1462, yyq1462, yy2arr1462
			const yyr1462 bool = false
			yyq1462[0] = x.Exec != nil
			yyq1462[1] = x.HTTPGet != nil
			yyq1462[2] = x.TCPSocket != nil
			var yynn1462 int
			if yyr1462 || yy2arr1462 {
				r.EncodeArrayStart(3)
			} else {
				yynn1462 = 0
				for _, b := range yyq1462 {
					if b {
						yynn1462++
					}
				}
				r.EncodeMapStart(yynn1462)
				yynn1462 = 0
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1466 := z.DecBinary()
	_ = yym1466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1467 := r.ContainerType()
		if yyct1467 == codecSelferValueTypeMap1234 {
			yyl1467 := r.ReadMapStart()
			if yyl1467 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1467, d)
			}
		} else if yyct1467 == codecSelferValueTypeArray1234 {
			yyl1467 := r.ReadArrayStart()
			if yyl1467 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1467, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1468Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1468Slc
	var yyhl1468 bool = l >= 0
	for yyj1468 := 0; ; yyj1468++ {
		if yyhl1468 {
			if yyj1468 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1468Slc = r.DecodeBytes(yys1468Slc, true, true)
		yys1468 := string(yys1468Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1468 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1468)
		} // end switch yys1468
	} // end for yyj1468
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1472 int
	var yyb1472 bool
	var yyhl1472 bool = l >= 0
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1472++
		if yyhl1472 {
			yyb1472 = yyj1472 > l
		} else {
			yyb1472 = r.CheckBreak()
		}
		if yyb1472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1476 := z.EncBinary()
		_ = yym1476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1477 := !z.EncBinary()
			yy2arr1477 := z.EncBasicHandle().StructToArray
			var yyq1477 [2]bool
			_, _, _ = yysep1477, yyq1477, yy2arr1477
			const yyr1477 bool = false
			yyq1477[0] = x.PostStart != nil
			yyq1477[1] = x.PreStop != nil
			var yynn1477 int
			if yyr1477 || yy2arr1477 {
				r.EncodeArrayStart(2)
			} else {
				yynn1477 = 0
				for _, b := range yyq1477 {
					if b {
						yynn1477++
					}
				}
				r.EncodeMapStart(yynn1477)
				yynn1477 = 0
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1480 := z.DecBinary()
	_ = yym1480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1481 := r.ContainerType()
		if yyct1481 == codecSelferValueTypeMap1234 {
			yyl1481 := r.ReadMapStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1481, d)
			}
		} else if yyct1481 == codecSelferValueTypeArray1234 {
			yyl1481 := r.ReadArrayStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1482Slc
	var yyhl1482 bool = l >= 0
	for yyj1482 := 0; ; yyj1482++ {
		if yyhl1482 {
			if yyj1482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1482Slc = r.DecodeBytes(yys1482Slc, true, true)
		yys1482 := string(yys1482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1482 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1482)
		} // end switch yys1482
	} // end for yyj1482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1485 int
	var yyb1485 bool
	var yyhl1485 bool = l >= 0
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1485++
		if yyhl1485 {
			yyb1485 = yyj1485 > l
		} else {
			yyb1485 = r.CheckBreak()
		}
		if yyb1485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1488 := z.EncBinary()
	_ = yym1488
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1489 := z.DecBinary()
	_ = yym1489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1490 := z.EncBinary()
		_ = yym1490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1491 := !z.EncBinary()
			yy2arr1491 := z.EncBasicHandle().StructToArray
			var yyq1491 [2]bool
			_, _, _ = yysep1491, yyq1491, yy2arr1491
			const yyr1491 bool = false
			yyq1491[0] = x.Reason != ""
			yyq1491[1] = x.Message != ""
			var yynn1491 int
			if yyr1491 || yy2arr1491 {
				r.EncodeArrayStart(2)
			} else {
				yynn1491 = 0
				for _, b := range yyq1491 {
					if b {
						yynn1491++
					}
				}
				r.EncodeMapStart(yynn1491)
				yynn1491 = 0
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1491[0] {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1491[1] {
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1498 := z.DecBinary()
	_ = yym1498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1499 := r.ContainerType()
		if yyct1499 == codecSelferValueTypeMap1234 {
			yyl1499 := r.ReadMapStart()
			if yyl1499 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1499, d)
			}
		} else if yyct1499 == codecSelferValueTypeArray1234 {
			yyl1499 := r.ReadArrayStart()
			if yyl1499 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1500Slc
	var yyhl1500 bool = l >= 0
	for yyj1500 := 0; ; yyj1500++ {
		if yyhl1500 {
			if yyj1500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1500Slc = r.DecodeBytes(yys1500Slc, true, true)
		yys1500 := string(yys1500Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1500 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1500)
		} // end switch yys1500
	} // end for yyj1500
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1503 int
	var yyb1503 bool
	var yyhl1503 bool = l >= 0
	yyj1503++
	if yyhl1503 {
		yyb1503 = yyj1503 > l
	} else {
		yyb1503 = r.CheckBreak()
	}
	if yyb1503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1503++
	if yyhl1503 {
		yyb1503 = yyj1503 > l
	} else {
		yyb1503 = r.CheckBreak()
	}
	if yyb1503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1503++
		if yyhl1503 {
			yyb1503 = yyj1503 > l
		} else {
			yyb1503 = r.CheckBreak()
		}
		if yyb1503 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1503-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1506 := z.EncBinary()
		_ = yym1506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1507 := !z.EncBinary()
			yy2arr1507 := z.EncBasicHandle().StructToArray
			var yyq1507 [1]bool
			_, _, _ = yysep1507, yyq1507, yy2arr1507
			const yyr1507 bool = false
			yyq1507[0] = true
			var yynn1507 int
			if yyr1507 || yy2arr1507 {
				r.EncodeArrayStart(1)
			} else {
				yynn1507 = 0
				for _, b := range yyq1507 {
					if b {
						yynn1507++
					}
				}
				r.EncodeMapStart(yynn1507)
				yynn1507 = 0
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1507[0] {
					yy1509 := &x.StartedAt
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1509) {
					} else if yym1510 {
						z.EncBinaryMarshal(yy1509)
					} else if !yym1510 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1509)
					} else {
						z.EncFallback(yy1509)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1511 := &x.StartedAt
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1511) {
					} else if yym1512 {
						z.EncBinaryMarshal(yy1511)
					} else if !yym1512 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1511)
					} else {
						z.EncFallback(yy1511)
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1513 := z.DecBinary()
	_ = yym1513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1514 := r.ContainerType()
		if yyct1514 == codecSelferValueTypeMap1234 {
			yyl1514 := r.ReadMapStart()
			if yyl1514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1514, d)
			}
		} else if yyct1514 == codecSelferValueTypeArray1234 {
			yyl1514 := r.ReadArrayStart()
			if yyl1514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1515Slc
	var yyhl1515 bool = l >= 0
	for yyj1515 := 0; ; yyj1515++ {
		if yyhl1515 {
			if yyj1515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1515Slc = r.DecodeBytes(yys1515Slc, true, true)
		yys1515 := string(yys1515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1515 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1516 := &x.StartedAt
				yym1517 := z.DecBinary()
				_ = yym1517
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1516) {
				} else if yym1517 {
					z.DecBinaryUnmarshal(yyv1516)
				} else if !yym1517 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1516)
				} else {
					z.DecFallback(yyv1516, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1515)
		} // end switch yys1515
	} // end for yyj1515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1518 int
	var yyb1518 bool
	var yyhl1518 bool = l >= 0
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1519 := &x.StartedAt
		yym1520 := z.DecBinary()
		_ = yym1520
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1519) {
		} else if yym1520 {
			z.DecBinaryUnmarshal(yyv1519)
		} else if !yym1520 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1519)
		} else {
			z.DecFallback(yyv1519, false)
		}
	}
	for {
		yyj1518++
		if yyhl1518 {
			yyb1518 = yyj1518 > l
		} else {
			yyb1518 = r.CheckBreak()
		}
		if yyb1518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1521 := z.EncBinary()
		_ = yym1521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1522 := !z.EncBinary()
			yy2arr1522 := z.EncBasicHandle().StructToArray
			var yyq1522 [7]bool
			_, _, _ = yysep1522, yyq1522, yy2arr1522
			const yyr1522 bool = false
			yyq1522[1] = x.Signal != 0
			yyq1522[2] = x.Reason != ""
			yyq1522[3] = x.Message != ""
			yyq1522[4] = true
			yyq1522[5] = true
			yyq1522[6] = x.ContainerID != ""
			var yynn1522 int
			if yyr1522 || yy2arr1522 {
				r.EncodeArrayStart(7)
			} else {
				yynn1522 = 1
				for _, b := range yyq1522 {
					if b {
						yynn1522++
					}
				}
				r.EncodeMapStart(yynn1522)
				yynn1522 = 0
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1524 := z.EncBinary()
				_ = yym1524
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1525 := z.EncBinary()
				_ = yym1525
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[1] {
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[2] {
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1522[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[3] {
					yym1533 := z.EncBinary()
					_ = yym1533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1522[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[4] {
					yy1536 := &x.StartedAt
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1536) {
					} else if yym1537 {
						z.EncBinaryMarshal(yy1536)
					} else if !yym1537 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1536)
					} else {
						z.EncFallback(yy1536)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1522[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1538 := &x.StartedAt
					yym1539 := z.EncBinary()
					_ = yym1539
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1538) {
					} else if yym1539 {
						z.EncBinaryMarshal(yy1538)
					} else if !yym1539 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1538)
					} else {
						z.EncFallback(yy1538)
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[5] {
					yy1541 := &x.FinishedAt
					yym1542 := z.EncBinary()
					_ = yym1542
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1541) {
					} else if yym1542 {
						z.EncBinaryMarshal(yy1541)
					} else if !yym1542 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1541)
					} else {
						z.EncFallback(yy1541)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1522[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1543 := &x.FinishedAt
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1543) {
					} else if yym1544 {
						z.EncBinaryMarshal(yy1543)
					} else if !yym1544 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1543)
					} else {
						z.EncFallback(yy1543)
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[6] {
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1522[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1548 := z.DecBinary()
	_ = yym1548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1549 := r.ContainerType()
		if yyct1549 == codecSelferValueTypeMap1234 {
			yyl1549 := r.ReadMapStart()
			if yyl1549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1549, d)
			}
		} else if yyct1549 == codecSelferValueTypeArray1234 {
			yyl1549 := r.ReadArrayStart()
			if yyl1549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1550Slc
	var yyhl1550 bool = l >= 0
	for yyj1550 := 0; ; yyj1550++ {
		if yyhl1550 {
			if yyj1550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1550Slc = r.DecodeBytes(yys1550Slc, true, true)
		yys1550 := string(yys1550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1550 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1555 := &x.StartedAt
				yym1556 := z.DecBinary()
				_ = yym1556
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1555) {
				} else if yym1556 {
					z.DecBinaryUnmarshal(yyv1555)
				} else if !yym1556 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1555)
				} else {
					z.DecFallback(yyv1555, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1557 := &x.FinishedAt
				yym1558 := z.DecBinary()
				_ = yym1558
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1557) {
				} else if yym1558 {
					z.DecBinaryUnmarshal(yyv1557)
				} else if !yym1558 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1557)
				} else {
					z.DecFallback(yyv1557, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1550)
		} // end switch yys1550
	} // end for yyj1550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1560 int
	var yyb1560 bool
	var yyhl1560 bool = l >= 0
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1565 := &x.StartedAt
		yym1566 := z.DecBinary()
		_ = yym1566
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1565) {
		} else if yym1566 {
			z.DecBinaryUnmarshal(yyv1565)
		} else if !yym1566 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1565)
		} else {
			z.DecFallback(yyv1565, false)
		}
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1567 := &x.FinishedAt
		yym1568 := z.DecBinary()
		_ = yym1568
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1567) {
		} else if yym1568 {
			z.DecBinaryUnmarshal(yyv1567)
		} else if !yym1568 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1567)
		} else {
			z.DecFallback(yyv1567, false)
		}
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1560++
		if yyhl1560 {
			yyb1560 = yyj1560 > l
		} else {
			yyb1560 = r.CheckBreak()
		}
		if yyb1560 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1560-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1570 := z.EncBinary()
		_ = yym1570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1571 := !z.EncBinary()
			yy2arr1571 := z.EncBasicHandle().StructToArray
			var yyq1571 [3]bool
			_, _, _ = yysep1571, yyq1571, yy2arr1571
			const yyr1571 bool = false
			yyq1571[0] = x.Waiting != nil
			yyq1571[1] = x.Running != nil
			yyq1571[2] = x.Terminated != nil
			var yynn1571 int
			if yyr1571 || yy2arr1571 {
				r.EncodeArrayStart(3)
			} else {
				yynn1571 = 0
				for _, b := range yyq1571 {
					if b {
						yynn1571++
					}
				}
				r.EncodeMapStart(yynn1571)
				yynn1571 = 0
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1571[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1571[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1571[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1571[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1571[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1571[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1575 := z.DecBinary()
	_ = yym1575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1576 := r.ContainerType()
		if yyct1576 == codecSelferValueTypeMap1234 {
			yyl1576 := r.ReadMapStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1576, d)
			}
		} else if yyct1576 == codecSelferValueTypeArray1234 {
			yyl1576 := r.ReadArrayStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1577Slc
	var yyhl1577 bool = l >= 0
	for yyj1577 := 0; ; yyj1577++ {
		if yyhl1577 {
			if yyj1577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1577Slc = r.DecodeBytes(yys1577Slc, true, true)
		yys1577 := string(yys1577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1577 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1577)
		} // end switch yys1577
	} // end for yyj1577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1581 int
	var yyb1581 bool
	var yyhl1581 bool = l >= 0
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1581++
		if yyhl1581 {
			yyb1581 = yyj1581 > l
		} else {
			yyb1581 = r.CheckBreak()
		}
		if yyb1581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1585 := z.EncBinary()
		_ = yym1585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1586 := !z.EncBinary()
			yy2arr1586 := z.EncBasicHandle().StructToArray
			var yyq1586 [8]bool
			_, _, _ = yysep1586, yyq1586, yy2arr1586
			const yyr1586 bool = false
			yyq1586[1] = true
			yyq1586[2] = true
			yyq1586[7] = x.ContainerID != ""
			var yynn1586 int
			if yyr1586 || yy2arr1586 {
				r.EncodeArrayStart(8)
			} else {
				yynn1586 = 5
				for _, b := range yyq1586 {
					if b {
						yynn1586++
					}
				}
				r.EncodeMapStart(yynn1586)
				yynn1586 = 0
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1588 := z.EncBinary()
				_ = yym1588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1589 := z.EncBinary()
				_ = yym1589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[1] {
					yy1591 := &x.State
					yy1591.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1592 := &x.State
					yy1592.CodecEncodeSelf(e)
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[2] {
					yy1594 := &x.LastTerminationState
					yy1594.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1586[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1595 := &x.LastTerminationState
					yy1595.CodecEncodeSelf(e)
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1597 := z.EncBinary()
				_ = yym1597
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1598 := z.EncBinary()
				_ = yym1598
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1600 := z.EncBinary()
				_ = yym1600
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1601 := z.EncBinary()
				_ = yym1601
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1603 := z.EncBinary()
				_ = yym1603
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1604 := z.EncBinary()
				_ = yym1604
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1606 := z.EncBinary()
				_ = yym1606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1607 := z.EncBinary()
				_ = yym1607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[7] {
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1586[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1611 := z.DecBinary()
	_ = yym1611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1612 := r.ContainerType()
		if yyct1612 == codecSelferValueTypeMap1234 {
			yyl1612 := r.ReadMapStart()
			if yyl1612 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1612, d)
			}
		} else if yyct1612 == codecSelferValueTypeArray1234 {
			yyl1612 := r.ReadArrayStart()
			if yyl1612 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1612, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1613Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1613Slc
	var yyhl1613 bool = l >= 0
	for yyj1613 := 0; ; yyj1613++ {
		if yyhl1613 {
			if yyj1613 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1613Slc = r.DecodeBytes(yys1613Slc, true, true)
		yys1613 := string(yys1613Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1613 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1615 := &x.State
				yyv1615.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1616 := &x.LastTerminationState
				yyv1616.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1613)
		} // end switch yys1613
	} // end for yyj1613
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1622 int
	var yyb1622 bool
	var yyhl1622 bool = l >= 0
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1624 := &x.State
		yyv1624.CodecDecodeSelf(d)
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1625 := &x.LastTerminationState
		yyv1625.CodecDecodeSelf(d)
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1622++
	if yyhl1622 {
		yyb1622 = yyj1622 > l
	} else {
		yyb1622 = r.CheckBreak()
	}
	if yyb1622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1622++
		if yyhl1622 {
			yyb1622 = yyj1622 > l
		} else {
			yyb1622 = r.CheckBreak()
		}
		if yyb1622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1631 := z.EncBinary()
	_ = yym1631
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1632 := z.DecBinary()
	_ = yym1632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1633 := z.EncBinary()
	_ = yym1633
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1634 := z.DecBinary()
	_ = yym1634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1635 := z.EncBinary()
		_ = yym1635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1636 := !z.EncBinary()
			yy2arr1636 := z.EncBasicHandle().StructToArray
			var yyq1636 [6]bool
			_, _, _ = yysep1636, yyq1636, yy2arr1636
			const yyr1636 bool = false
			yyq1636[2] = true
			yyq1636[3] = true
			yyq1636[4] = x.Reason != ""
			yyq1636[5] = x.Message != ""
			var yynn1636 int
			if yyr1636 || yy2arr1636 {
				r.EncodeArrayStart(6)
			} else {
				yynn1636 = 2
				for _, b := range yyq1636 {
					if b {
						yynn1636++
					}
				}
				r.EncodeMapStart(yynn1636)
				yynn1636 = 0
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[2] {
					yy1640 := &x.LastProbeTime
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1640) {
					} else if yym1641 {
						z.EncBinaryMarshal(yy1640)
					} else if !yym1641 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1640)
					} else {
						z.EncFallback(yy1640)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1642 := &x.LastProbeTime
					yym1643 := z.EncBinary()
					_ = yym1643
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1642) {
					} else if yym1643 {
						z.EncBinaryMarshal(yy1642)
					} else if !yym1643 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1642)
					} else {
						z.EncFallback(yy1642)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[3] {
					yy1645 := &x.LastTransitionTime
					yym1646 := z.EncBinary()
					_ = yym1646
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1645) {
					} else if yym1646 {
						z.EncBinaryMarshal(yy1645)
					} else if !yym1646 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1645)
					} else {
						z.EncFallback(yy1645)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1647 := &x.LastTransitionTime
					yym1648 := z.EncBinary()
					_ = yym1648
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1647) {
					} else if yym1648 {
						z.EncBinaryMarshal(yy1647)
					} else if !yym1648 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1647)
					} else {
						z.EncFallback(yy1647)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[4] {
					yym1650 := z.EncBinary()
					_ = yym1650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1636[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1651 := z.EncBinary()
					_ = yym1651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[5] {
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1636[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1655 := z.DecBinary()
	_ = yym1655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1656 := r.ContainerType()
		if yyct1656 == codecSelferValueTypeMap1234 {
			yyl1656 := r.ReadMapStart()
			if yyl1656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1656, d)
			}
		} else if yyct1656 == codecSelferValueTypeArray1234 {
			yyl1656 := r.ReadArrayStart()
			if yyl1656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1657Slc
	var yyhl1657 bool = l >= 0
	for yyj1657 := 0; ; yyj1657++ {
		if yyhl1657 {
			if yyj1657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1657Slc = r.DecodeBytes(yys1657Slc, true, true)
		yys1657 := string(yys1657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1657 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1660 := &x.LastProbeTime
				yym1661 := z.DecBinary()
				_ = yym1661
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1660) {
				} else if yym1661 {
					z.DecBinaryUnmarshal(yyv1660)
				} else if !yym1661 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1660)
				} else {
					z.DecFallback(yyv1660, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1662 := &x.LastTransitionTime
				yym1663 := z.DecBinary()
				_ = yym1663
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1662) {
				} else if yym1663 {
					z.DecBinaryUnmarshal(yyv1662)
				} else if !yym1663 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1662)
				} else {
					z.DecFallback(yyv1662, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1657)
		} // end switch yys1657
	} // end for yyj1657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1666 int
	var yyb1666 bool
	var yyhl1666 bool = l >= 0
	yyj1666++
	if yyhl1666 {
		yyb1666 = yyj1666 > l
	} else {
		yyb1666 = r.CheckBreak()
	}
	if yyb1666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1666++
	if yyhl1666 {
		yyb1666 = yyj1666 > l
	} else {
		yyb1666 = r.CheckBreak()
	}
	if yyb1666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1666++
	if yyhl1666 {
		yyb1666 = yyj1666 > l
	} else {
		yyb1666 = r.CheckBreak()
	}
	if yyb1666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1669 := &x.LastProbeTime
		yym1670 := z.DecBinary()
		_ = yym1670
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1669) {
		} else if yym1670 {
			z.DecBinaryUnmarshal(yyv1669)
		} else if !yym1670 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1669)
		} else {
			z.DecFallback(yyv1669, false)
		}
	}
	yyj1666++
	if yyhl1666 {
		yyb1666 = yyj1666 > l
	} else {
		yyb1666 = r.CheckBreak()
	}
	if yyb1666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1671 := &x.LastTransitionTime
		yym1672 := z.DecBinary()
		_ = yym1672
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1671) {
		} else if yym1672 {
			z.DecBinaryUnmarshal(yyv1671)
		} else if !yym1672 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1671)
		} else {
			z.DecFallback(yyv1671, false)
		}
	}
	yyj1666++
	if yyhl1666 {
		yyb1666 = yyj1666 > l
	} else {
		yyb1666 = r.CheckBreak()
	}
	if yyb1666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1666++
	if yyhl1666 {
		yyb1666 = yyj1666 > l
	} else {
		yyb1666 = r.CheckBreak()
	}
	if yyb1666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1666++
		if yyhl1666 {
			yyb1666 = yyj1666 > l
		} else {
			yyb1666 = r.CheckBreak()
		}
		if yyb1666 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1666-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1675 := z.EncBinary()
	_ = yym1675
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1676 := z.DecBinary()
	_ = yym1676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1677 := z.EncBinary()
		_ = yym1677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1678 := !z.EncBinary()
			yy2arr1678 := z.EncBasicHandle().StructToArray
			var yyq1678 [4]bool
			_, _, _ = yysep1678, yyq1678, yy2arr1678
			const yyr1678 bool = false
			yyq1678[0] = x.Kind != ""
			yyq1678[1] = x.APIVersion != ""
			yyq1678[2] = true
			var yynn1678 int
			if yyr1678 || yy2arr1678 {
				r.EncodeArrayStart(4)
			} else {
				yynn1678 = 1
				for _, b := range yyq1678 {
					if b {
						yynn1678++
					}
				}
				r.EncodeMapStart(yynn1678)
				yynn1678 = 0
			}
			if yyr1678 || yy2arr1678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1678[0] {
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1678[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1678 || yy2arr1678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1678[1] {
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1678[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1678 || yy2arr1678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1678[2] {
					yy1686 := &x.ListMeta
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1686) {
					} else {
						z.EncFallback(yy1686)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1678[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1688 := &x.ListMeta
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1688) {
					} else {
						z.EncFallback(yy1688)
					}
				}
			}
			if yyr1678 || yy2arr1678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1678 || yy2arr1678 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1693 := z.DecBinary()
	_ = yym1693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1694 := r.ContainerType()
		if yyct1694 == codecSelferValueTypeMap1234 {
			yyl1694 := r.ReadMapStart()
			if yyl1694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1694, d)
			}
		} else if yyct1694 == codecSelferValueTypeArray1234 {
			yyl1694 := r.ReadArrayStart()
			if yyl1694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1695Slc
	var yyhl1695 bool = l >= 0
	for yyj1695 := 0; ; yyj1695++ {
		if yyhl1695 {
			if yyj1695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1695Slc = r.DecodeBytes(yys1695Slc, true, true)
		yys1695 := string(yys1695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1695 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1698 := &x.ListMeta
				yym1699 := z.DecBinary()
				_ = yym1699
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1698) {
				} else {
					z.DecFallback(yyv1698, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1700 := &x.Items
				yym1701 := z.DecBinary()
				_ = yym1701
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1700), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1695)
		} // end switch yys1695
	} // end for yyj1695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1705 := &x.ListMeta
		yym1706 := z.DecBinary()
		_ = yym1706
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1705) {
		} else {
			z.DecFallback(yyv1705, false)
		}
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1707 := &x.Items
		yym1708 := z.DecBinary()
		_ = yym1708
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1707), d)
		}
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1709 := z.EncBinary()
	_ = yym1709
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1710 := z.DecBinary()
	_ = yym1710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1711 := z.EncBinary()
		_ = yym1711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1712 := !z.EncBinary()
			yy2arr1712 := z.EncBasicHandle().StructToArray
			var yyq1712 [1]bool
			_, _, _ = yysep1712, yyq1712, yy2arr1712
			const yyr1712 bool = false
			var yynn1712 int
			if yyr1712 || yy2arr1712 {
				r.EncodeArrayStart(1)
			} else {
				yynn1712 = 1
				for _, b := range yyq1712 {
					if b {
						yynn1712++
					}
				}
				r.EncodeMapStart(yynn1712)
				yynn1712 = 0
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1715 := z.EncBinary()
					_ = yym1715
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1716 := z.DecBinary()
	_ = yym1716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1717 := r.ContainerType()
		if yyct1717 == codecSelferValueTypeMap1234 {
			yyl1717 := r.ReadMapStart()
			if yyl1717 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1717, d)
			}
		} else if yyct1717 == codecSelferValueTypeArray1234 {
			yyl1717 := r.ReadArrayStart()
			if yyl1717 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1718Slc
	var yyhl1718 bool = l >= 0
	for yyj1718 := 0; ; yyj1718++ {
		if yyhl1718 {
			if yyj1718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1718Slc = r.DecodeBytes(yys1718Slc, true, true)
		yys1718 := string(yys1718Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1718 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1719 := &x.NodeSelectorTerms
				yym1720 := z.DecBinary()
				_ = yym1720
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1719), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1718)
		} // end switch yys1718
	} // end for yyj1718
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1721 int
	var yyb1721 bool
	var yyhl1721 bool = l >= 0
	yyj1721++
	if yyhl1721 {
		yyb1721 = yyj1721 > l
	} else {
		yyb1721 = r.CheckBreak()
	}
	if yyb1721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1722 := &x.NodeSelectorTerms
		yym1723 := z.DecBinary()
		_ = yym1723
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1722), d)
		}
	}
	for {
		yyj1721++
		if yyhl1721 {
			yyb1721 = yyj1721 > l
		} else {
			yyb1721 = r.CheckBreak()
		}
		if yyb1721 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1721-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1724 := z.EncBinary()
		_ = yym1724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1725 := !z.EncBinary()
			yy2arr1725 := z.EncBasicHandle().StructToArray
			var yyq1725 [1]bool
			_, _, _ = yysep1725, yyq1725, yy2arr1725
			const yyr1725 bool = false
			var yynn1725 int
			if yyr1725 || yy2arr1725 {
				r.EncodeArrayStart(1)
			} else {
				yynn1725 = 1
				for _, b := range yyq1725 {
					if b {
						yynn1725++
					}
				}
				r.EncodeMapStart(yynn1725)
				yynn1725 = 0
			}
			if yyr1725 || yy2arr1725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1725 || yy2arr1725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1729 := z.DecBinary()
	_ = yym1729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1730 := r.ContainerType()
		if yyct1730 == codecSelferValueTypeMap1234 {
			yyl1730 := r.ReadMapStart()
			if yyl1730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1730, d)
			}
		} else if yyct1730 == codecSelferValueTypeArray1234 {
			yyl1730 := r.ReadArrayStart()
			if yyl1730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1731Slc
	var yyhl1731 bool = l >= 0
	for yyj1731 := 0; ; yyj1731++ {
		if yyhl1731 {
			if yyj1731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1731Slc = r.DecodeBytes(yys1731Slc, true, true)
		yys1731 := string(yys1731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1731 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1732 := &x.MatchExpressions
				yym1733 := z.DecBinary()
				_ = yym1733
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1732), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1731)
		} // end switch yys1731
	} // end for yyj1731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1734 int
	var yyb1734 bool
	var yyhl1734 bool = l >= 0
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1735 := &x.MatchExpressions
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1735), d)
		}
	}
	for {
		yyj1734++
		if yyhl1734 {
			yyb1734 = yyj1734 > l
		} else {
			yyb1734 = r.CheckBreak()
		}
		if yyb1734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1737 := z.EncBinary()
		_ = yym1737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1738 := !z.EncBinary()
			yy2arr1738 := z.EncBasicHandle().StructToArray
			var yyq1738 [3]bool
			_, _, _ = yysep1738, yyq1738, yy2arr1738
			const yyr1738 bool = false
			yyq1738[2] = len(x.Values) != 0
			var yynn1738 int
			if yyr1738 || yy2arr1738 {
				r.EncodeArrayStart(3)
			} else {
				yynn1738 = 2
				for _, b := range yyq1738 {
					if b {
						yynn1738++
					}
				}
				r.EncodeMapStart(yynn1738)
				yynn1738 = 0
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1740 := z.EncBinary()
				_ = yym1740
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1741 := z.EncBinary()
				_ = yym1741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1738[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1744 := z.EncBinary()
						_ = yym1744
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1745 := z.EncBinary()
						_ = yym1745
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1738 || yy2arr1738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1746 := z.DecBinary()
	_ = yym1746
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1747 := r.ContainerType()
		if yyct1747 == codecSelferValueTypeMap1234 {
			yyl1747 := r.ReadMapStart()
			if yyl1747 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1747, d)
			}
		} else if yyct1747 == codecSelferValueTypeArray1234 {
			yyl1747 := r.ReadArrayStart()
			if yyl1747 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1747, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1748Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1748Slc
	var yyhl1748 bool = l >= 0
	for yyj1748 := 0; ; yyj1748++ {
		if yyhl1748 {
			if yyj1748 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1748Slc = r.DecodeBytes(yys1748Slc, true, true)
		yys1748 := string(yys1748Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1748 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1751 := &x.Values
				yym1752 := z.DecBinary()
				_ = yym1752
				if false {
				} else {
					z.F.DecSliceStringX(yyv1751, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1748)
		} // end switch yys1748
	} // end for yyj1748
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1753 int
	var yyb1753 bool
	var yyhl1753 bool = l >= 0
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1756 := &x.Values
		yym1757 := z.DecBinary()
		_ = yym1757
		if false {
		} else {
			z.F.DecSliceStringX(yyv1756, false, d)
		}
	}
	for {
		yyj1753++
		if yyhl1753 {
			yyb1753 = yyj1753 > l
		} else {
			yyb1753 = r.CheckBreak()
		}
		if yyb1753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1758 := z.EncBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1759 := z.DecBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [3]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[0] = x.NodeAffinity != nil
			yyq1761[1] = x.PodAffinity != nil
			yyq1761[2] = x.PodAntiAffinity != nil
			var yynn1761 int
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(3)
			} else {
				yynn1761 = 0
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
				yynn1761 = 0
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1765 := z.DecBinary()
	_ = yym1765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1766 := r.ContainerType()
		if yyct1766 == codecSelferValueTypeMap1234 {
			yyl1766 := r.ReadMapStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1766, d)
			}
		} else if yyct1766 == codecSelferValueTypeArray1234 {
			yyl1766 := r.ReadArrayStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1767Slc
	var yyhl1767 bool = l >= 0
	for yyj1767 := 0; ; yyj1767++ {
		if yyhl1767 {
			if yyj1767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1767Slc = r.DecodeBytes(yys1767Slc, true, true)
		yys1767 := string(yys1767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1767 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1767)
		} // end switch yys1767
	} // end for yyj1767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1771 int
	var yyb1771 bool
	var yyhl1771 bool = l >= 0
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1771++
		if yyhl1771 {
			yyb1771 = yyj1771 > l
		} else {
			yyb1771 = r.CheckBreak()
		}
		if yyb1771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1775 := z.EncBinary()
		_ = yym1775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1776 := !z.EncBinary()
			yy2arr1776 := z.EncBasicHandle().StructToArray
			var yyq1776 [2]bool
			_, _, _ = yysep1776, yyq1776, yy2arr1776
			const yyr1776 bool = false
			yyq1776[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1776[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1776 int
			if yyr1776 || yy2arr1776 {
				r.EncodeArrayStart(2)
			} else {
				yynn1776 = 0
				for _, b := range yyq1776 {
					if b {
						yynn1776++
					}
				}
				r.EncodeMapStart(yynn1776)
				yynn1776 = 0
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1776[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1778 := z.EncBinary()
						_ = yym1778
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1776[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1779 := z.EncBinary()
						_ = yym1779
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1776[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1781 := z.EncBinary()
						_ = yym1781
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1776[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1782 := z.EncBinary()
						_ = yym1782
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1783 := z.DecBinary()
	_ = yym1783
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1784 := r.ContainerType()
		if yyct1784 == codecSelferValueTypeMap1234 {
			yyl1784 := r.ReadMapStart()
			if yyl1784 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1784, d)
			}
		} else if yyct1784 == codecSelferValueTypeArray1234 {
			yyl1784 := r.ReadArrayStart()
			if yyl1784 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1784, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1785Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1785Slc
	var yyhl1785 bool = l >= 0
	for yyj1785 := 0; ; yyj1785++ {
		if yyhl1785 {
			if yyj1785 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1785Slc = r.DecodeBytes(yys1785Slc, true, true)
		yys1785 := string(yys1785Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1785 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1786 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1787 := z.DecBinary()
				_ = yym1787
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1786), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1788 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1789 := z.DecBinary()
				_ = yym1789
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1788), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1785)
		} // end switch yys1785
	} // end for yyj1785
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1790 int
	var yyb1790 bool
	var yyhl1790 bool = l >= 0
	yyj1790++
	if yyhl1790 {
		yyb1790 = yyj1790 > l
	} else {
		yyb1790 = r.CheckBreak()
	}
	if yyb1790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1791 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1792 := z.DecBinary()
		_ = yym1792
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1791), d)
		}
	}
	yyj1790++
	if yyhl1790 {
		yyb1790 = yyj1790 > l
	} else {
		yyb1790 = r.CheckBreak()
	}
	if yyb1790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1793 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1794 := z.DecBinary()
		_ = yym1794
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1793), d)
		}
	}
	for {
		yyj1790++
		if yyhl1790 {
			yyb1790 = yyj1790 > l
		} else {
			yyb1790 = r.CheckBreak()
		}
		if yyb1790 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1790-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1795 := z.EncBinary()
		_ = yym1795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1796 := !z.EncBinary()
			yy2arr1796 := z.EncBasicHandle().StructToArray
			var yyq1796 [2]bool
			_, _, _ = yysep1796, yyq1796, yy2arr1796
			const yyr1796 bool = false
			yyq1796[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1796[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1796 int
			if yyr1796 || yy2arr1796 {
				r.EncodeArrayStart(2)
			} else {
				yynn1796 = 0
				for _, b := range yyq1796 {
					if b {
						yynn1796++
					}
				}
				r.EncodeMapStart(yynn1796)
				yynn1796 = 0
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1796[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1798 := z.EncBinary()
						_ = yym1798
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1799 := z.EncBinary()
						_ = yym1799
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1796[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1801 := z.EncBinary()
						_ = yym1801
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1802 := z.EncBinary()
						_ = yym1802
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1796 || yy2arr1796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1803 := z.DecBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1804 := r.ContainerType()
		if yyct1804 == codecSelferValueTypeMap1234 {
			yyl1804 := r.ReadMapStart()
			if yyl1804 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1804, d)
			}
		} else if yyct1804 == codecSelferValueTypeArray1234 {
			yyl1804 := r.ReadArrayStart()
			if yyl1804 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1805Slc
	var yyhl1805 bool = l >= 0
	for yyj1805 := 0; ; yyj1805++ {
		if yyhl1805 {
			if yyj1805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1805Slc = r.DecodeBytes(yys1805Slc, true, true)
		yys1805 := string(yys1805Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1805 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1806 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1807 := z.DecBinary()
				_ = yym1807
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1806), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1808 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1808), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1805)
		} // end switch yys1805
	} // end for yyj1805
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1810 int
	var yyb1810 bool
	var yyhl1810 bool = l >= 0
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1811 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1812 := z.DecBinary()
		_ = yym1812
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1811), d)
		}
	}
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1813 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1814 := z.DecBinary()
		_ = yym1814
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1813), d)
		}
	}
	for {
		yyj1810++
		if yyhl1810 {
			yyb1810 = yyj1810 > l
		} else {
			yyb1810 = r.CheckBreak()
		}
		if yyb1810 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1810-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1815 := z.EncBinary()
		_ = yym1815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1816 := !z.EncBinary()
			yy2arr1816 := z.EncBasicHandle().StructToArray
			var yyq1816 [2]bool
			_, _, _ = yysep1816, yyq1816, yy2arr1816
			const yyr1816 bool = false
			var yynn1816 int
			if yyr1816 || yy2arr1816 {
				r.EncodeArrayStart(2)
			} else {
				yynn1816 = 2
				for _, b := range yyq1816 {
					if b {
						yynn1816++
					}
				}
				r.EncodeMapStart(yynn1816)
				yynn1816 = 0
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1818 := z.EncBinary()
				_ = yym1818
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1819 := z.EncBinary()
				_ = yym1819
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1821 := &x.PodAffinityTerm
				yy1821.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1822 := &x.PodAffinityTerm
				yy1822.CodecEncodeSelf(e)
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1824 := r.ContainerType()
		if yyct1824 == codecSelferValueTypeMap1234 {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if yyct1824 == codecSelferValueTypeArray1234 {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1825 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1827 := &x.PodAffinityTerm
				yyv1827.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1828 int
	var yyb1828 bool
	var yyhl1828 bool = l >= 0
	yyj1828++
	if yyhl1828 {
		yyb1828 = yyj1828 > l
	} else {
		yyb1828 = r.CheckBreak()
	}
	if yyb1828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1828++
	if yyhl1828 {
		yyb1828 = yyj1828 > l
	} else {
		yyb1828 = r.CheckBreak()
	}
	if yyb1828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1830 := &x.PodAffinityTerm
		yyv1830.CodecDecodeSelf(d)
	}
	for {
		yyj1828++
		if yyhl1828 {
			yyb1828 = yyj1828 > l
		} else {
			yyb1828 = r.CheckBreak()
		}
		if yyb1828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1831 := z.EncBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1832 := !z.EncBinary()
			yy2arr1832 := z.EncBasicHandle().StructToArray
			var yyq1832 [3]bool
			_, _, _ = yysep1832, yyq1832, yy2arr1832
			const yyr1832 bool = false
			yyq1832[0] = x.LabelSelector != nil
			yyq1832[2] = x.TopologyKey != ""
			var yynn1832 int
			if yyr1832 || yy2arr1832 {
				r.EncodeArrayStart(3)
			} else {
				yynn1832 = 1
				for _, b := range yyq1832 {
					if b {
						yynn1832++
					}
				}
				r.EncodeMapStart(yynn1832)
				yynn1832 = 0
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1832[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1834 := z.EncBinary()
						_ = yym1834
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1832[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1835 := z.EncBinary()
						_ = yym1835
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1837 := z.EncBinary()
					_ = yym1837
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1838 := z.EncBinary()
					_ = yym1838
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1832[2] {
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1832[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1841 := z.EncBinary()
					_ = yym1841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1842 := z.DecBinary()
	_ = yym1842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1843 := r.ContainerType()
		if yyct1843 == codecSelferValueTypeMap1234 {
			yyl1843 := r.ReadMapStart()
			if yyl1843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1843, d)
			}
		} else if yyct1843 == codecSelferValueTypeArray1234 {
			yyl1843 := r.ReadArrayStart()
			if yyl1843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1844Slc
	var yyhl1844 bool = l >= 0
	for yyj1844 := 0; ; yyj1844++ {
		if yyhl1844 {
			if yyj1844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1844Slc = r.DecodeBytes(yys1844Slc, true, true)
		yys1844 := string(yys1844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1844 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1846 := z.DecBinary()
				_ = yym1846
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1847 := &x.Namespaces
				yym1848 := z.DecBinary()
				_ = yym1848
				if false {
				} else {
					z.F.DecSliceStringX(yyv1847, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1844)
		} // end switch yys1844
	} // end for yyj1844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1850 int
	var yyb1850 bool
	var yyhl1850 bool = l >= 0
	yyj1850++
	if yyhl1850 {
		yyb1850 = yyj1850 > l
	} else {
		yyb1850 = r.CheckBreak()
	}
	if yyb1850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1852 := z.DecBinary()
		_ = yym1852
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1850++
	if yyhl1850 {
		yyb1850 = yyj1850 > l
	} else {
		yyb1850 = r.CheckBreak()
	}
	if yyb1850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1853 := &x.Namespaces
		yym1854 := z.DecBinary()
		_ = yym1854
		if false {
		} else {
			z.F.DecSliceStringX(yyv1853, false, d)
		}
	}
	yyj1850++
	if yyhl1850 {
		yyb1850 = yyj1850 > l
	} else {
		yyb1850 = r.CheckBreak()
	}
	if yyb1850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1850++
		if yyhl1850 {
			yyb1850 = yyj1850 > l
		} else {
			yyb1850 = r.CheckBreak()
		}
		if yyb1850 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1850-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1856 := z.EncBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1857 := !z.EncBinary()
			yy2arr1857 := z.EncBasicHandle().StructToArray
			var yyq1857 [2]bool
			_, _, _ = yysep1857, yyq1857, yy2arr1857
			const yyr1857 bool = false
			yyq1857[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1857[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1857 int
			if yyr1857 || yy2arr1857 {
				r.EncodeArrayStart(2)
			} else {
				yynn1857 = 0
				for _, b := range yyq1857 {
					if b {
						yynn1857++
					}
				}
				r.EncodeMapStart(yynn1857)
				yynn1857 = 0
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1860 := z.EncBinary()
						_ = yym1860
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1861 := z.EncBinary()
						_ = yym1861
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1862 := z.DecBinary()
	_ = yym1862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1863 := r.ContainerType()
		if yyct1863 == codecSelferValueTypeMap1234 {
			yyl1863 := r.ReadMapStart()
			if yyl1863 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1863, d)
			}
		} else if yyct1863 == codecSelferValueTypeArray1234 {
			yyl1863 := r.ReadArrayStart()
			if yyl1863 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1864Slc
	var yyhl1864 bool = l >= 0
	for yyj1864 := 0; ; yyj1864++ {
		if yyhl1864 {
			if yyj1864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1864Slc = r.DecodeBytes(yys1864Slc, true, true)
		yys1864 := string(yys1864Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1864 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1866 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1867 := z.DecBinary()
				_ = yym1867
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1866), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1864)
		} // end switch yys1864
	} // end for yyj1864
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1868 int
	var yyb1868 bool
	var yyhl1868 bool = l >= 0
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1870 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1871 := z.DecBinary()
		_ = yym1871
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1870), d)
		}
	}
	for {
		yyj1868++
		if yyhl1868 {
			yyb1868 = yyj1868 > l
		} else {
			yyb1868 = r.CheckBreak()
		}
		if yyb1868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1872 := z.EncBinary()
		_ = yym1872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1873 := !z.EncBinary()
			yy2arr1873 := z.EncBasicHandle().StructToArray
			var yyq1873 [2]bool
			_, _, _ = yysep1873, yyq1873, yy2arr1873
			const yyr1873 bool = false
			var yynn1873 int
			if yyr1873 || yy2arr1873 {
				r.EncodeArrayStart(2)
			} else {
				yynn1873 = 2
				for _, b := range yyq1873 {
					if b {
						yynn1873++
					}
				}
				r.EncodeMapStart(yynn1873)
				yynn1873 = 0
			}
			if yyr1873 || yy2arr1873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1875 := z.EncBinary()
				_ = yym1875
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1876 := z.EncBinary()
				_ = yym1876
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1873 || yy2arr1873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1878 := &x.Preference
				yy1878.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1879 := &x.Preference
				yy1879.CodecEncodeSelf(e)
			}
			if yyr1873 || yy2arr1873 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1880 := z.DecBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1881 := r.ContainerType()
		if yyct1881 == codecSelferValueTypeMap1234 {
			yyl1881 := r.ReadMapStart()
			if yyl1881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1881, d)
			}
		} else if yyct1881 == codecSelferValueTypeArray1234 {
			yyl1881 := r.ReadArrayStart()
			if yyl1881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1882Slc
	var yyhl1882 bool = l >= 0
	for yyj1882 := 0; ; yyj1882++ {
		if yyhl1882 {
			if yyj1882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1882Slc = r.DecodeBytes(yys1882Slc, true, true)
		yys1882 := string(yys1882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1882 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1884 := &x.Preference
				yyv1884.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1882)
		} // end switch yys1882
	} // end for yyj1882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1885 int
	var yyb1885 bool
	var yyhl1885 bool = l >= 0
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1887 := &x.Preference
		yyv1887.CodecDecodeSelf(d)
	}
	for {
		yyj1885++
		if yyhl1885 {
			yyb1885 = yyj1885 > l
		} else {
			yyb1885 = r.CheckBreak()
		}
		if yyb1885 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1885-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1888 := z.EncBinary()
		_ = yym1888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1889 := !z.EncBinary()
			yy2arr1889 := z.EncBasicHandle().StructToArray
			var yyq1889 [3]bool
			_, _, _ = yysep1889, yyq1889, yy2arr1889
			const yyr1889 bool = false
			yyq1889[1] = x.Value != ""
			var yynn1889 int
			if yyr1889 || yy2arr1889 {
				r.EncodeArrayStart(3)
			} else {
				yynn1889 = 2
				for _, b := range yyq1889 {
					if b {
						yynn1889++
					}
				}
				r.EncodeMapStart(yynn1889)
				yynn1889 = 0
			}
			if yyr1889 || yy2arr1889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1891 := z.EncBinary()
				_ = yym1891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1892 := z.EncBinary()
				_ = yym1892
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1889 || yy2arr1889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1889[1] {
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1889 || yy2arr1889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1889 || yy2arr1889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1897 := z.DecBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1898 := r.ContainerType()
		if yyct1898 == codecSelferValueTypeMap1234 {
			yyl1898 := r.ReadMapStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1898, d)
			}
		} else if yyct1898 == codecSelferValueTypeArray1234 {
			yyl1898 := r.ReadArrayStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1899Slc
	var yyhl1899 bool = l >= 0
	for yyj1899 := 0; ; yyj1899++ {
		if yyhl1899 {
			if yyj1899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1899Slc = r.DecodeBytes(yys1899Slc, true, true)
		yys1899 := string(yys1899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1899 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1899)
		} // end switch yys1899
	} // end for yyj1899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1903 int
	var yyb1903 bool
	var yyhl1903 bool = l >= 0
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1903++
		if yyhl1903 {
			yyb1903 = yyj1903 > l
		} else {
			yyb1903 = r.CheckBreak()
		}
		if yyb1903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1907 := z.EncBinary()
	_ = yym1907
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1908 := z.DecBinary()
	_ = yym1908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1909 := z.EncBinary()
		_ = yym1909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1910 := !z.EncBinary()
			yy2arr1910 := z.EncBasicHandle().StructToArray
			var yyq1910 [4]bool
			_, _, _ = yysep1910, yyq1910, yy2arr1910
			const yyr1910 bool = false
			yyq1910[0] = x.Key != ""
			yyq1910[1] = x.Operator != ""
			yyq1910[2] = x.Value != ""
			yyq1910[3] = x.Effect != ""
			var yynn1910 int
			if yyr1910 || yy2arr1910 {
				r.EncodeArrayStart(4)
			} else {
				yynn1910 = 0
				for _, b := range yyq1910 {
					if b {
						yynn1910++
					}
				}
				r.EncodeMapStart(yynn1910)
				yynn1910 = 0
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[0] {
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1913 := z.EncBinary()
					_ = yym1913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[2] {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1919 := z.DecBinary()
	_ = yym1919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1920 := r.ContainerType()
		if yyct1920 == codecSelferValueTypeMap1234 {
			yyl1920 := r.ReadMapStart()
			if yyl1920 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1920, d)
			}
		} else if yyct1920 == codecSelferValueTypeArray1234 {
			yyl1920 := r.ReadArrayStart()
			if yyl1920 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1921Slc
	var yyhl1921 bool = l >= 0
	for yyj1921 := 0; ; yyj1921++ {
		if yyhl1921 {
			if yyj1921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1921Slc = r.DecodeBytes(yys1921Slc, true, true)
		yys1921 := string(yys1921Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1921 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1921)
		} // end switch yys1921
	} // end for yyj1921
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1926 int
	var yyb1926 bool
	var yyhl1926 bool = l >= 0
	yyj1926++
	if yyhl1926 {
		yyb1926 = yyj1926 > l
	} else {
		yyb1926 = r.CheckBreak()
	}
	if yyb1926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1926++
	if yyhl1926 {
		yyb1926 = yyj1926 > l
	} else {
		yyb1926 = r.CheckBreak()
	}
	if yyb1926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1926++
	if yyhl1926 {
		yyb1926 = yyj1926 > l
	} else {
		yyb1926 = r.CheckBreak()
	}
	if yyb1926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1926++
	if yyhl1926 {
		yyb1926 = yyj1926 > l
	} else {
		yyb1926 = r.CheckBreak()
	}
	if yyb1926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1926++
		if yyhl1926 {
			yyb1926 = yyj1926 > l
		} else {
			yyb1926 = r.CheckBreak()
		}
		if yyb1926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1931 := z.EncBinary()
	_ = yym1931
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1932 := z.DecBinary()
	_ = yym1932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1933 := z.EncBinary()
		_ = yym1933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1934 := !z.EncBinary()
			yy2arr1934 := z.EncBasicHandle().StructToArray
			var yyq1934 [13]bool
			_, _, _ = yysep1934, yyq1934, yy2arr1934
			const yyr1934 bool = false
			yyq1934[2] = x.RestartPolicy != ""
			yyq1934[3] = x.TerminationGracePeriodSeconds != nil
			yyq1934[4] = x.ActiveDeadlineSeconds != nil
			yyq1934[5] = x.DNSPolicy != ""
			yyq1934[6] = len(x.NodeSelector) != 0
			yyq1934[8] = x.NodeName != ""
			yyq1934[9] = x.SecurityContext != nil
			yyq1934[10] = len(x.ImagePullSecrets) != 0
			yyq1934[11] = x.Hostname != ""
			yyq1934[12] = x.Subdomain != ""
			var yynn1934 int
			if yyr1934 || yy2arr1934 {
				r.EncodeArrayStart(13)
			} else {
				yynn1934 = 3
				for _, b := range yyq1934 {
					if b {
						yynn1934++
					}
				}
				r.EncodeMapStart(yynn1934)
				yynn1934 = 0
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1936 := z.EncBinary()
					_ = yym1936
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1937 := z.EncBinary()
					_ = yym1937
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1943 := *x.TerminationGracePeriodSeconds
						yym1944 := z.EncBinary()
						_ = yym1944
						if false {
						} else {
							r.EncodeInt(int64(yy1943))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1934[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1945 := *x.TerminationGracePeriodSeconds
						yym1946 := z.EncBinary()
						_ = yym1946
						if false {
						} else {
							r.EncodeInt(int64(yy1945))
						}
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1948 := *x.ActiveDeadlineSeconds
						yym1949 := z.EncBinary()
						_ = yym1949
						if false {
						} else {
							r.EncodeInt(int64(yy1948))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1934[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1950 := *x.ActiveDeadlineSeconds
						yym1951 := z.EncBinary()
						_ = yym1951
						if false {
						} else {
							r.EncodeInt(int64(yy1950))
						}
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1934[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1954 := z.EncBinary()
						_ = yym1954
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1934[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1957 := z.EncBinary()
				_ = yym1957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1958 := z.EncBinary()
				_ = yym1958
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[8] {
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1934[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1961 := z.EncBinary()
					_ = yym1961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1934[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1964 := z.EncBinary()
						_ = yym1964
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1934[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1965 := z.EncBinary()
						_ = yym1965
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[11] {
					yym1967 := z.EncBinary()
					_ = yym1967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1934[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1968 := z.EncBinary()
					_ = yym1968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1934[12] {
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1934[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1972 := z.DecBinary()
	_ = yym1972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1973 := r.ContainerType()
		if yyct1973 == codecSelferValueTypeMap1234 {
			yyl1973 := r.ReadMapStart()
			if yyl1973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1973, d)
			}
		} else if yyct1973 == codecSelferValueTypeArray1234 {
			yyl1973 := r.ReadArrayStart()
			if yyl1973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1974Slc
	var yyhl1974 bool = l >= 0
	for yyj1974 := 0; ; yyj1974++ {
		if yyhl1974 {
			if yyj1974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1974Slc = r.DecodeBytes(yys1974Slc, true, true)
		yys1974 := string(yys1974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1974 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1975 := &x.Volumes
				yym1976 := z.DecBinary()
				_ = yym1976
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1975), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1977 := &x.Containers
				yym1978 := z.DecBinary()
				_ = yym1978
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1977), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1981 := z.DecBinary()
				_ = yym1981
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1983 := z.DecBinary()
				_ = yym1983
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1985 := &x.NodeSelector
				yym1986 := z.DecBinary()
				_ = yym1986
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1985, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1990 := &x.ImagePullSecrets
				yym1991 := z.DecBinary()
				_ = yym1991
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1990), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1974)
		} // end switch yys1974
	} // end for yyj1974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1994 int
	var yyb1994 bool
	var yyhl1994 bool = l >= 0
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1995 := &x.Volumes
		yym1996 := z.DecBinary()
		_ = yym1996
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1995), d)
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1997 := &x.Containers
		yym1998 := z.DecBinary()
		_ = yym1998
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1997), d)
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2001 := z.DecBinary()
		_ = yym2001
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2003 := z.DecBinary()
		_ = yym2003
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2005 := &x.NodeSelector
		yym2006 := z.DecBinary()
		_ = yym2006
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2005, false, d)
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2010 := &x.ImagePullSecrets
		yym2011 := z.DecBinary()
		_ = yym2011
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2010), d)
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1994++
		if yyhl1994 {
			yyb1994 = yyj1994 > l
		} else {
			yyb1994 = r.CheckBreak()
		}
		if yyb1994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2014 := z.EncBinary()
		_ = yym2014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2015 := !z.EncBinary()
			yy2arr2015 := z.EncBasicHandle().StructToArray
			var yyq2015 [8]bool
			_, _, _ = yysep2015, yyq2015, yy2arr2015
			const yyr2015 bool = false
			yyq2015[0] = x.HostNetwork != false
			yyq2015[1] = x.HostPID != false
			yyq2015[2] = x.HostIPC != false
			yyq2015[3] = x.SELinuxOptions != nil
			yyq2015[4] = x.RunAsUser != nil
			yyq2015[5] = x.RunAsNonRoot != nil
			yyq2015[6] = len(x.SupplementalGroups) != 0
			yyq2015[7] = x.FSGroup != nil
			var yynn2015 int
			if yyr2015 || yy2arr2015 {
				r.EncodeArrayStart(8)
			} else {
				yynn2015 = 0
				for _, b := range yyq2015 {
					if b {
						yynn2015++
					}
				}
				r.EncodeMapStart(yynn2015)
				yynn2015 = 0
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[0] {
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2015[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[1] {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2015[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[2] {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2015[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2027 := *x.RunAsUser
						yym2028 := z.EncBinary()
						_ = yym2028
						if false {
						} else {
							r.EncodeInt(int64(yy2027))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2029 := *x.RunAsUser
						yym2030 := z.EncBinary()
						_ = yym2030
						if false {
						} else {
							r.EncodeInt(int64(yy2029))
						}
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2032 := *x.RunAsNonRoot
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							r.EncodeBool(bool(yy2032))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2034 := *x.RunAsNonRoot
						yym2035 := z.EncBinary()
						_ = yym2035
						if false {
						} else {
							r.EncodeBool(bool(yy2034))
						}
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2040 := *x.FSGroup
						yym2041 := z.EncBinary()
						_ = yym2041
						if false {
						} else {
							r.EncodeInt(int64(yy2040))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2042 := *x.FSGroup
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							r.EncodeInt(int64(yy2042))
						}
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2044 := z.DecBinary()
	_ = yym2044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2045 := r.ContainerType()
		if yyct2045 == codecSelferValueTypeMap1234 {
			yyl2045 := r.ReadMapStart()
			if yyl2045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2045, d)
			}
		} else if yyct2045 == codecSelferValueTypeArray1234 {
			yyl2045 := r.ReadArrayStart()
			if yyl2045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2046Slc
	var yyhl2046 bool = l >= 0
	for yyj2046 := 0; ; yyj2046++ {
		if yyhl2046 {
			if yyj2046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2046Slc = r.DecodeBytes(yys2046Slc, true, true)
		yys2046 := string(yys2046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2046 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2052 := z.DecBinary()
				_ = yym2052
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2054 := z.DecBinary()
				_ = yym2054
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2055 := &x.SupplementalGroups
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2055, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2058 := z.DecBinary()
				_ = yym2058
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2046)
		} // end switch yys2046
	} // end for yyj2046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2059 int
	var yyb2059 bool
	var yyhl2059 bool = l >= 0
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2065 := z.DecBinary()
		_ = yym2065
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2067 := z.DecBinary()
		_ = yym2067
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2068 := &x.SupplementalGroups
		yym2069 := z.DecBinary()
		_ = yym2069
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2068, false, d)
		}
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2071 := z.DecBinary()
		_ = yym2071
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2059++
		if yyhl2059 {
			yyb2059 = yyj2059 > l
		} else {
			yyb2059 = r.CheckBreak()
		}
		if yyb2059 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2059-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2072 := z.EncBinary()
		_ = yym2072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2073 := !z.EncBinary()
			yy2arr2073 := z.EncBasicHandle().StructToArray
			var yyq2073 [8]bool
			_, _, _ = yysep2073, yyq2073, yy2arr2073
			const yyr2073 bool = false
			yyq2073[0] = x.Phase != ""
			yyq2073[1] = len(x.Conditions) != 0
			yyq2073[2] = x.Message != ""
			yyq2073[3] = x.Reason != ""
			yyq2073[4] = x.HostIP != ""
			yyq2073[5] = x.PodIP != ""
			yyq2073[6] = x.StartTime != nil
			yyq2073[7] = len(x.ContainerStatuses) != 0
			var yynn2073 int
			if yyr2073 || yy2arr2073 {
				r.EncodeArrayStart(8)
			} else {
				yynn2073 = 0
				for _, b := range yyq2073 {
					if b {
						yynn2073++
					}
				}
				r.EncodeMapStart(yynn2073)
				yynn2073 = 0
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2076 := z.EncBinary()
						_ = yym2076
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2077 := z.EncBinary()
						_ = yym2077
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[2] {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[3] {
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[4] {
					yym2085 := z.EncBinary()
					_ = yym2085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[5] {
					yym2088 := z.EncBinary()
					_ = yym2088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2073[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2091 := z.EncBinary()
						_ = yym2091
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2091 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2091 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2092 := z.EncBinary()
						_ = yym2092
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2092 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2092 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2073[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2094 := z.EncBinary()
						_ = yym2094
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2073[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2095 := z.EncBinary()
						_ = yym2095
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2073 || yy2arr2073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2096 := z.DecBinary()
	_ = yym2096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2097 := r.ContainerType()
		if yyct2097 == codecSelferValueTypeMap1234 {
			yyl2097 := r.ReadMapStart()
			if yyl2097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2097, d)
			}
		} else if yyct2097 == codecSelferValueTypeArray1234 {
			yyl2097 := r.ReadArrayStart()
			if yyl2097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2098Slc
	var yyhl2098 bool = l >= 0
	for yyj2098 := 0; ; yyj2098++ {
		if yyhl2098 {
			if yyj2098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2098Slc = r.DecodeBytes(yys2098Slc, true, true)
		yys2098 := string(yys2098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2098 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2100 := &x.Conditions
				yym2101 := z.DecBinary()
				_ = yym2101
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2100), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2107 := z.DecBinary()
				_ = yym2107
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2107 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2107 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2108 := &x.ContainerStatuses
				yym2109 := z.DecBinary()
				_ = yym2109
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2108), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2098)
		} // end switch yys2098
	} // end for yyj2098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2110 int
	var yyb2110 bool
	var yyhl2110 bool = l >= 0
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2112 := &x.Conditions
		yym2113 := z.DecBinary()
		_ = yym2113
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2112), d)
		}
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2119 := z.DecBinary()
		_ = yym2119
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2119 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2119 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2110++
	if yyhl2110 {
		yyb2110 = yyj2110 > l
	} else {
		yyb2110 = r.CheckBreak()
	}
	if yyb2110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2120 := &x.ContainerStatuses
		yym2121 := z.DecBinary()
		_ = yym2121
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2120), d)
		}
	}
	for {
		yyj2110++
		if yyhl2110 {
			yyb2110 = yyj2110 > l
		} else {
			yyb2110 = r.CheckBreak()
		}
		if yyb2110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2122 := z.EncBinary()
		_ = yym2122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2123 := !z.EncBinary()
			yy2arr2123 := z.EncBasicHandle().StructToArray
			var yyq2123 [4]bool
			_, _, _ = yysep2123, yyq2123, yy2arr2123
			const yyr2123 bool = false
			yyq2123[0] = x.Kind != ""
			yyq2123[1] = x.APIVersion != ""
			yyq2123[2] = true
			yyq2123[3] = true
			var yynn2123 int
			if yyr2123 || yy2arr2123 {
				r.EncodeArrayStart(4)
			} else {
				yynn2123 = 0
				for _, b := range yyq2123 {
					if b {
						yynn2123++
					}
				}
				r.EncodeMapStart(yynn2123)
				yynn2123 = 0
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2123[0] {
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2123[1] {
					yym2128 := z.EncBinary()
					_ = yym2128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2123[2] {
					yy2131 := &x.ObjectMeta
					yy2131.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2132 := &x.ObjectMeta
					yy2132.CodecEncodeSelf(e)
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2123[3] {
					yy2134 := &x.Status
					yy2134.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2123[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2135 := &x.Status
					yy2135.CodecEncodeSelf(e)
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2136 := z.DecBinary()
	_ = yym2136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2137 := r.ContainerType()
		if yyct2137 == codecSelferValueTypeMap1234 {
			yyl2137 := r.ReadMapStart()
			if yyl2137 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2137, d)
			}
		} else if yyct2137 == codecSelferValueTypeArray1234 {
			yyl2137 := r.ReadArrayStart()
			if yyl2137 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2138Slc
	var yyhl2138 bool = l >= 0
	for yyj2138 := 0; ; yyj2138++ {
		if yyhl2138 {
			if yyj2138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2138Slc = r.DecodeBytes(yys2138Slc, true, true)
		yys2138 := string(yys2138Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2138 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2141 := &x.ObjectMeta
				yyv2141.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2142 := &x.Status
				yyv2142.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2138)
		} // end switch yys2138
	} // end for yyj2138
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2143 int
	var yyb2143 bool
	var yyhl2143 bool = l >= 0
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2146 := &x.ObjectMeta
		yyv2146.CodecDecodeSelf(d)
	}
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2147 := &x.Status
		yyv2147.CodecDecodeSelf(d)
	}
	for {
		yyj2143++
		if yyhl2143 {
			yyb2143 = yyj2143 > l
		} else {
			yyb2143 = r.CheckBreak()
		}
		if yyb2143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2148 := z.EncBinary()
		_ = yym2148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2149 := !z.EncBinary()
			yy2arr2149 := z.EncBasicHandle().StructToArray
			var yyq2149 [5]bool
			_, _, _ = yysep2149, yyq2149, yy2arr2149
			const yyr2149 bool = false
			yyq2149[0] = x.Kind != ""
			yyq2149[1] = x.APIVersion != ""
			yyq2149[2] = true
			yyq2149[3] = true
			yyq2149[4] = true
			var yynn2149 int
			if yyr2149 || yy2arr2149 {
				r.EncodeArrayStart(5)
			} else {
				yynn2149 = 0
				for _, b := range yyq2149 {
					if b {
						yynn2149++
					}
				}
				r.EncodeMapStart(yynn2149)
				yynn2149 = 0
			}
			if yyr2149 || yy2arr2149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2149[0] {
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2149[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2152 := z.EncBinary()
					_ = yym2152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2149 || yy2arr2149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2149[1] {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2149[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2149 || yy2arr2149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2149[2] {
					yy2157 := &x.ObjectMeta
					yy2157.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2149[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2158 := &x.ObjectMeta
					yy2158.CodecEncodeSelf(e)
				}
			}
			if yyr2149 || yy2arr2149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2149[3] {
					yy2160 := &x.Spec
					yy2160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2149[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2161 := &x.Spec
					yy2161.CodecEncodeSelf(e)
				}
			}
			if yyr2149 || yy2arr2149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2149[4] {
					yy2163 := &x.Status
					yy2163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2149[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2164 := &x.Status
					yy2164.CodecEncodeSelf(e)
				}
			}
			if yyr2149 || yy2arr2149 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2165 := z.DecBinary()
	_ = yym2165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2166 := r.ContainerType()
		if yyct2166 == codecSelferValueTypeMap1234 {
			yyl2166 := r.ReadMapStart()
			if yyl2166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2166, d)
			}
		} else if yyct2166 == codecSelferValueTypeArray1234 {
			yyl2166 := r.ReadArrayStart()
			if yyl2166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2167Slc
	var yyhl2167 bool = l >= 0
	for yyj2167 := 0; ; yyj2167++ {
		if yyhl2167 {
			if yyj2167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2167Slc = r.DecodeBytes(yys2167Slc, true, true)
		yys2167 := string(yys2167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2167 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2170 := &x.ObjectMeta
				yyv2170.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2171 := &x.Spec
				yyv2171.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2172 := &x.Status
				yyv2172.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2167)
		} // end switch yys2167
	} // end for yyj2167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2173 int
	var yyb2173 bool
	var yyhl2173 bool = l >= 0
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2176 := &x.ObjectMeta
		yyv2176.CodecDecodeSelf(d)
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2177 := &x.Spec
		yyv2177.CodecDecodeSelf(d)
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2178 := &x.Status
		yyv2178.CodecDecodeSelf(d)
	}
	for {
		yyj2173++
		if yyhl2173 {
			yyb2173 = yyj2173 > l
		} else {
			yyb2173 = r.CheckBreak()
		}
		if yyb2173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2179 := z.EncBinary()
		_ = yym2179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2180 := !z.EncBinary()
			yy2arr2180 := z.EncBasicHandle().StructToArray
			var yyq2180 [2]bool
			_, _, _ = yysep2180, yyq2180, yy2arr2180
			const yyr2180 bool = false
			yyq2180[0] = true
			yyq2180[1] = true
			var yynn2180 int
			if yyr2180 || yy2arr2180 {
				r.EncodeArrayStart(2)
			} else {
				yynn2180 = 0
				for _, b := range yyq2180 {
					if b {
						yynn2180++
					}
				}
				r.EncodeMapStart(yynn2180)
				yynn2180 = 0
			}
			if yyr2180 || yy2arr2180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2180[0] {
					yy2182 := &x.ObjectMeta
					yy2182.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2183 := &x.ObjectMeta
					yy2183.CodecEncodeSelf(e)
				}
			}
			if yyr2180 || yy2arr2180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2180[1] {
					yy2185 := &x.Spec
					yy2185.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2186 := &x.Spec
					yy2186.CodecEncodeSelf(e)
				}
			}
			if yyr2180 || yy2arr2180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2187 := z.DecBinary()
	_ = yym2187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2188 := r.ContainerType()
		if yyct2188 == codecSelferValueTypeMap1234 {
			yyl2188 := r.ReadMapStart()
			if yyl2188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2188, d)
			}
		} else if yyct2188 == codecSelferValueTypeArray1234 {
			yyl2188 := r.ReadArrayStart()
			if yyl2188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2189Slc
	var yyhl2189 bool = l >= 0
	for yyj2189 := 0; ; yyj2189++ {
		if yyhl2189 {
			if yyj2189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2189Slc = r.DecodeBytes(yys2189Slc, true, true)
		yys2189 := string(yys2189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2189 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2190 := &x.ObjectMeta
				yyv2190.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2191 := &x.Spec
				yyv2191.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2189)
		} // end switch yys2189
	} // end for yyj2189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2192 int
	var yyb2192 bool
	var yyhl2192 bool = l >= 0
	yyj2192++
	if yyhl2192 {
		yyb2192 = yyj2192 > l
	} else {
		yyb2192 = r.CheckBreak()
	}
	if yyb2192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2193 := &x.ObjectMeta
		yyv2193.CodecDecodeSelf(d)
	}
	yyj2192++
	if yyhl2192 {
		yyb2192 = yyj2192 > l
	} else {
		yyb2192 = r.CheckBreak()
	}
	if yyb2192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2194 := &x.Spec
		yyv2194.CodecDecodeSelf(d)
	}
	for {
		yyj2192++
		if yyhl2192 {
			yyb2192 = yyj2192 > l
		} else {
			yyb2192 = r.CheckBreak()
		}
		if yyb2192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2195 := z.EncBinary()
		_ = yym2195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2196 := !z.EncBinary()
			yy2arr2196 := z.EncBasicHandle().StructToArray
			var yyq2196 [4]bool
			_, _, _ = yysep2196, yyq2196, yy2arr2196
			const yyr2196 bool = false
			yyq2196[0] = x.Kind != ""
			yyq2196[1] = x.APIVersion != ""
			yyq2196[2] = true
			yyq2196[3] = true
			var yynn2196 int
			if yyr2196 || yy2arr2196 {
				r.EncodeArrayStart(4)
			} else {
				yynn2196 = 0
				for _, b := range yyq2196 {
					if b {
						yynn2196++
					}
				}
				r.EncodeMapStart(yynn2196)
				yynn2196 = 0
			}
			if yyr2196 || yy2arr2196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2196[0] {
					yym2198 := z.EncBinary()
					_ = yym2198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2196[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2196 || yy2arr2196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2196[1] {
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2196[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2196 || yy2arr2196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2196[2] {
					yy2204 := &x.ObjectMeta
					yy2204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2196[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2205 := &x.ObjectMeta
					yy2205.CodecEncodeSelf(e)
				}
			}
			if yyr2196 || yy2arr2196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2196[3] {
					yy2207 := &x.Template
					yy2207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2196[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2208 := &x.Template
					yy2208.CodecEncodeSelf(e)
				}
			}
			if yyr2196 || yy2arr2196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2209 := z.DecBinary()
	_ = yym2209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2210 := r.ContainerType()
		if yyct2210 == codecSelferValueTypeMap1234 {
			yyl2210 := r.ReadMapStart()
			if yyl2210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2210, d)
			}
		} else if yyct2210 == codecSelferValueTypeArray1234 {
			yyl2210 := r.ReadArrayStart()
			if yyl2210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2211Slc
	var yyhl2211 bool = l >= 0
	for yyj2211 := 0; ; yyj2211++ {
		if yyhl2211 {
			if yyj2211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2211Slc = r.DecodeBytes(yys2211Slc, true, true)
		yys2211 := string(yys2211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2211 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2214 := &x.ObjectMeta
				yyv2214.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2215 := &x.Template
				yyv2215.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2211)
		} // end switch yys2211
	} // end for yyj2211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2216 int
	var yyb2216 bool
	var yyhl2216 bool = l >= 0
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2219 := &x.ObjectMeta
		yyv2219.CodecDecodeSelf(d)
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2220 := &x.Template
		yyv2220.CodecDecodeSelf(d)
	}
	for {
		yyj2216++
		if yyhl2216 {
			yyb2216 = yyj2216 > l
		} else {
			yyb2216 = r.CheckBreak()
		}
		if yyb2216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2221 := z.EncBinary()
		_ = yym2221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2222 := !z.EncBinary()
			yy2arr2222 := z.EncBasicHandle().StructToArray
			var yyq2222 [4]bool
			_, _, _ = yysep2222, yyq2222, yy2arr2222
			const yyr2222 bool = false
			yyq2222[0] = x.Kind != ""
			yyq2222[1] = x.APIVersion != ""
			yyq2222[2] = true
			var yynn2222 int
			if yyr2222 || yy2arr2222 {
				r.EncodeArrayStart(4)
			} else {
				yynn2222 = 1
				for _, b := range yyq2222 {
					if b {
						yynn2222++
					}
				}
				r.EncodeMapStart(yynn2222)
				yynn2222 = 0
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[0] {
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[1] {
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[2] {
					yy2230 := &x.ListMeta
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2230) {
					} else {
						z.EncFallback(yy2230)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2232 := &x.ListMeta
					yym2233 := z.EncBinary()
					_ = yym2233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2232) {
					} else {
						z.EncFallback(yy2232)
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2236 := z.EncBinary()
					_ = yym2236
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2237 := z.DecBinary()
	_ = yym2237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2238 := r.ContainerType()
		if yyct2238 == codecSelferValueTypeMap1234 {
			yyl2238 := r.ReadMapStart()
			if yyl2238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2238, d)
			}
		} else if yyct2238 == codecSelferValueTypeArray1234 {
			yyl2238 := r.ReadArrayStart()
			if yyl2238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2239Slc
	var yyhl2239 bool = l >= 0
	for yyj2239 := 0; ; yyj2239++ {
		if yyhl2239 {
			if yyj2239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2239Slc = r.DecodeBytes(yys2239Slc, true, true)
		yys2239 := string(yys2239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2239 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2242 := &x.ListMeta
				yym2243 := z.DecBinary()
				_ = yym2243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2242) {
				} else {
					z.DecFallback(yyv2242, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2244 := &x.Items
				yym2245 := z.DecBinary()
				_ = yym2245
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2244), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2239)
		} // end switch yys2239
	} // end for yyj2239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2246 int
	var yyb2246 bool
	var yyhl2246 bool = l >= 0
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2249 := &x.ListMeta
		yym2250 := z.DecBinary()
		_ = yym2250
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2249) {
		} else {
			z.DecFallback(yyv2249, false)
		}
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2251 := &x.Items
		yym2252 := z.DecBinary()
		_ = yym2252
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2251), d)
		}
	}
	for {
		yyj2246++
		if yyhl2246 {
			yyb2246 = yyj2246 > l
		} else {
			yyb2246 = r.CheckBreak()
		}
		if yyb2246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2253 := z.EncBinary()
		_ = yym2253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2254 := !z.EncBinary()
			yy2arr2254 := z.EncBasicHandle().StructToArray
			var yyq2254 [3]bool
			_, _, _ = yysep2254, yyq2254, yy2arr2254
			const yyr2254 bool = false
			yyq2254[2] = x.Template != nil
			var yynn2254 int
			if yyr2254 || yy2arr2254 {
				r.EncodeArrayStart(3)
			} else {
				yynn2254 = 2
				for _, b := range yyq2254 {
					if b {
						yynn2254++
					}
				}
				r.EncodeMapStart(yynn2254)
				yynn2254 = 0
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2256 := z.EncBinary()
				_ = yym2256
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2257 := z.EncBinary()
				_ = yym2257
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2254[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2254[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2262 := z.DecBinary()
	_ = yym2262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2263 := r.ContainerType()
		if yyct2263 == codecSelferValueTypeMap1234 {
			yyl2263 := r.ReadMapStart()
			if yyl2263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2263, d)
			}
		} else if yyct2263 == codecSelferValueTypeArray1234 {
			yyl2263 := r.ReadArrayStart()
			if yyl2263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2264Slc
	var yyhl2264 bool = l >= 0
	for yyj2264 := 0; ; yyj2264++ {
		if yyhl2264 {
			if yyj2264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2264Slc = r.DecodeBytes(yys2264Slc, true, true)
		yys2264 := string(yys2264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2264 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2266 := &x.Selector
				yym2267 := z.DecBinary()
				_ = yym2267
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2266, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2264)
		} // end switch yys2264
	} // end for yyj2264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2269 int
	var yyb2269 bool
	var yyhl2269 bool = l >= 0
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2271 := &x.Selector
		yym2272 := z.DecBinary()
		_ = yym2272
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2271, false, d)
		}
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2269++
		if yyhl2269 {
			yyb2269 = yyj2269 > l
		} else {
			yyb2269 = r.CheckBreak()
		}
		if yyb2269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2274 := z.EncBinary()
		_ = yym2274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2275 := !z.EncBinary()
			yy2arr2275 := z.EncBasicHandle().StructToArray
			var yyq2275 [3]bool
			_, _, _ = yysep2275, yyq2275, yy2arr2275
			const yyr2275 bool = false
			yyq2275[1] = x.FullyLabeledReplicas != 0
			yyq2275[2] = x.ObservedGeneration != 0
			var yynn2275 int
			if yyr2275 || yy2arr2275 {
				r.EncodeArrayStart(3)
			} else {
				yynn2275 = 1
				for _, b := range yyq2275 {
					if b {
						yynn2275++
					}
				}
				r.EncodeMapStart(yynn2275)
				yynn2275 = 0
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2277 := z.EncBinary()
				_ = yym2277
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2278 := z.EncBinary()
				_ = yym2278
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[1] {
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[2] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2275[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2285 := z.DecBinary()
	_ = yym2285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2286 := r.ContainerType()
		if yyct2286 == codecSelferValueTypeMap1234 {
			yyl2286 := r.ReadMapStart()
			if yyl2286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2286, d)
			}
		} else if yyct2286 == codecSelferValueTypeArray1234 {
			yyl2286 := r.ReadArrayStart()
			if yyl2286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2287Slc
	var yyhl2287 bool = l >= 0
	for yyj2287 := 0; ; yyj2287++ {
		if yyhl2287 {
			if yyj2287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2287Slc = r.DecodeBytes(yys2287Slc, true, true)
		yys2287 := string(yys2287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2287 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2287)
		} // end switch yys2287
	} // end for yyj2287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2291 int
	var yyb2291 bool
	var yyhl2291 bool = l >= 0
	yyj2291++
	if yyhl2291 {
		yyb2291 = yyj2291 > l
	} else {
		yyb2291 = r.CheckBreak()
	}
	if yyb2291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2291++
	if yyhl2291 {
		yyb2291 = yyj2291 > l
	} else {
		yyb2291 = r.CheckBreak()
	}
	if yyb2291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2291++
	if yyhl2291 {
		yyb2291 = yyj2291 > l
	} else {
		yyb2291 = r.CheckBreak()
	}
	if yyb2291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2291++
		if yyhl2291 {
			yyb2291 = yyj2291 > l
		} else {
			yyb2291 = r.CheckBreak()
		}
		if yyb2291 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2291-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2295 := z.EncBinary()
		_ = yym2295
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2296 := !z.EncBinary()
			yy2arr2296 := z.EncBasicHandle().StructToArray
			var yyq2296 [5]bool
			_, _, _ = yysep2296, yyq2296, yy2arr2296
			const yyr2296 bool = false
			yyq2296[0] = x.Kind != ""
			yyq2296[1] = x.APIVersion != ""
			yyq2296[2] = true
			yyq2296[3] = true
			yyq2296[4] = true
			var yynn2296 int
			if yyr2296 || yy2arr2296 {
				r.EncodeArrayStart(5)
			} else {
				yynn2296 = 0
				for _, b := range yyq2296 {
					if b {
						yynn2296++
					}
				}
				r.EncodeMapStart(yynn2296)
				yynn2296 = 0
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[0] {
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2296[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[1] {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2296[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[2] {
					yy2304 := &x.ObjectMeta
					yy2304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2296[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2305 := &x.ObjectMeta
					yy2305.CodecEncodeSelf(e)
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[3] {
					yy2307 := &x.Spec
					yy2307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2296[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2308 := &x.Spec
					yy2308.CodecEncodeSelf(e)
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2296[4] {
					yy2310 := &x.Status
					yy2310.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2296[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2311 := &x.Status
					yy2311.CodecEncodeSelf(e)
				}
			}
			if yyr2296 || yy2arr2296 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2312 := z.DecBinary()
	_ = yym2312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2313 := r.ContainerType()
		if yyct2313 == codecSelferValueTypeMap1234 {
			yyl2313 := r.ReadMapStart()
			if yyl2313 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2313, d)
			}
		} else if yyct2313 == codecSelferValueTypeArray1234 {
			yyl2313 := r.ReadArrayStart()
			if yyl2313 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2314Slc
	var yyhl2314 bool = l >= 0
	for yyj2314 := 0; ; yyj2314++ {
		if yyhl2314 {
			if yyj2314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2314Slc = r.DecodeBytes(yys2314Slc, true, true)
		yys2314 := string(yys2314Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2314 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2317 := &x.ObjectMeta
				yyv2317.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2318 := &x.Spec
				yyv2318.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2319 := &x.Status
				yyv2319.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2314)
		} // end switch yys2314
	} // end for yyj2314
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2320 int
	var yyb2320 bool
	var yyhl2320 bool = l >= 0
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2323 := &x.ObjectMeta
		yyv2323.CodecDecodeSelf(d)
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2324 := &x.Spec
		yyv2324.CodecDecodeSelf(d)
	}
	yyj2320++
	if yyhl2320 {
		yyb2320 = yyj2320 > l
	} else {
		yyb2320 = r.CheckBreak()
	}
	if yyb2320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2325 := &x.Status
		yyv2325.CodecDecodeSelf(d)
	}
	for {
		yyj2320++
		if yyhl2320 {
			yyb2320 = yyj2320 > l
		} else {
			yyb2320 = r.CheckBreak()
		}
		if yyb2320 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2320-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2326 := z.EncBinary()
		_ = yym2326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2327 := !z.EncBinary()
			yy2arr2327 := z.EncBasicHandle().StructToArray
			var yyq2327 [4]bool
			_, _, _ = yysep2327, yyq2327, yy2arr2327
			const yyr2327 bool = false
			yyq2327[0] = x.Kind != ""
			yyq2327[1] = x.APIVersion != ""
			yyq2327[2] = true
			var yynn2327 int
			if yyr2327 || yy2arr2327 {
				r.EncodeArrayStart(4)
			} else {
				yynn2327 = 1
				for _, b := range yyq2327 {
					if b {
						yynn2327++
					}
				}
				r.EncodeMapStart(yynn2327)
				yynn2327 = 0
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[0] {
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[1] {
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[2] {
					yy2335 := &x.ListMeta
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2335) {
					} else {
						z.EncFallback(yy2335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2337 := &x.ListMeta
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2337) {
					} else {
						z.EncFallback(yy2337)
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2342 := z.DecBinary()
	_ = yym2342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2343 := r.ContainerType()
		if yyct2343 == codecSelferValueTypeMap1234 {
			yyl2343 := r.ReadMapStart()
			if yyl2343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2343, d)
			}
		} else if yyct2343 == codecSelferValueTypeArray1234 {
			yyl2343 := r.ReadArrayStart()
			if yyl2343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2344Slc
	var yyhl2344 bool = l >= 0
	for yyj2344 := 0; ; yyj2344++ {
		if yyhl2344 {
			if yyj2344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2344Slc = r.DecodeBytes(yys2344Slc, true, true)
		yys2344 := string(yys2344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2344 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2347 := &x.ListMeta
				yym2348 := z.DecBinary()
				_ = yym2348
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2347) {
				} else {
					z.DecFallback(yyv2347, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2349 := &x.Items
				yym2350 := z.DecBinary()
				_ = yym2350
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2349), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2344)
		} // end switch yys2344
	} // end for yyj2344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2351 int
	var yyb2351 bool
	var yyhl2351 bool = l >= 0
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2354 := &x.ListMeta
		yym2355 := z.DecBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2354) {
		} else {
			z.DecFallback(yyv2354, false)
		}
	}
	yyj2351++
	if yyhl2351 {
		yyb2351 = yyj2351 > l
	} else {
		yyb2351 = r.CheckBreak()
	}
	if yyb2351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2356 := &x.Items
		yym2357 := z.DecBinary()
		_ = yym2357
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2356), d)
		}
	}
	for {
		yyj2351++
		if yyhl2351 {
			yyb2351 = yyj2351 > l
		} else {
			yyb2351 = r.CheckBreak()
		}
		if yyb2351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2358 := z.EncBinary()
		_ = yym2358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2359 := !z.EncBinary()
			yy2arr2359 := z.EncBasicHandle().StructToArray
			var yyq2359 [4]bool
			_, _, _ = yysep2359, yyq2359, yy2arr2359
			const yyr2359 bool = false
			yyq2359[0] = x.Kind != ""
			yyq2359[1] = x.APIVersion != ""
			yyq2359[2] = true
			var yynn2359 int
			if yyr2359 || yy2arr2359 {
				r.EncodeArrayStart(4)
			} else {
				yynn2359 = 1
				for _, b := range yyq2359 {
					if b {
						yynn2359++
					}
				}
				r.EncodeMapStart(yynn2359)
				yynn2359 = 0
			}
			if yyr2359 || yy2arr2359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2359[0] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2359[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2359 || yy2arr2359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2359[1] {
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2359[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2359 || yy2arr2359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2359[2] {
					yy2367 := &x.ListMeta
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2367) {
					} else {
						z.EncFallback(yy2367)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2359[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2369 := &x.ListMeta
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2369) {
					} else {
						z.EncFallback(yy2369)
					}
				}
			}
			if yyr2359 || yy2arr2359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2373 := z.EncBinary()
					_ = yym2373
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2359 || yy2arr2359 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2374 := z.DecBinary()
	_ = yym2374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2375 := r.ContainerType()
		if yyct2375 == codecSelferValueTypeMap1234 {
			yyl2375 := r.ReadMapStart()
			if yyl2375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2375, d)
			}
		} else if yyct2375 == codecSelferValueTypeArray1234 {
			yyl2375 := r.ReadArrayStart()
			if yyl2375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2376Slc
	var yyhl2376 bool = l >= 0
	for yyj2376 := 0; ; yyj2376++ {
		if yyhl2376 {
			if yyj2376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2376Slc = r.DecodeBytes(yys2376Slc, true, true)
		yys2376 := string(yys2376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2376 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2379 := &x.ListMeta
				yym2380 := z.DecBinary()
				_ = yym2380
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2379) {
				} else {
					z.DecFallback(yyv2379, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2381 := &x.Items
				yym2382 := z.DecBinary()
				_ = yym2382
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2381), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2376)
		} // end switch yys2376
	} // end for yyj2376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2383 int
	var yyb2383 bool
	var yyhl2383 bool = l >= 0
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2386 := &x.ListMeta
		yym2387 := z.DecBinary()
		_ = yym2387
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2386) {
		} else {
			z.DecFallback(yyv2386, false)
		}
	}
	yyj2383++
	if yyhl2383 {
		yyb2383 = yyj2383 > l
	} else {
		yyb2383 = r.CheckBreak()
	}
	if yyb2383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2388 := &x.Items
		yym2389 := z.DecBinary()
		_ = yym2389
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2388), d)
		}
	}
	for {
		yyj2383++
		if yyhl2383 {
			yyb2383 = yyj2383 > l
		} else {
			yyb2383 = r.CheckBreak()
		}
		if yyb2383 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2383-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2390 := z.EncBinary()
	_ = yym2390
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2391 := z.DecBinary()
	_ = yym2391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2392 := z.EncBinary()
	_ = yym2392
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2393 := z.DecBinary()
	_ = yym2393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2394 := z.EncBinary()
		_ = yym2394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2395 := !z.EncBinary()
			yy2arr2395 := z.EncBasicHandle().StructToArray
			var yyq2395 [1]bool
			_, _, _ = yysep2395, yyq2395, yy2arr2395
			const yyr2395 bool = false
			yyq2395[0] = true
			var yynn2395 int
			if yyr2395 || yy2arr2395 {
				r.EncodeArrayStart(1)
			} else {
				yynn2395 = 0
				for _, b := range yyq2395 {
					if b {
						yynn2395++
					}
				}
				r.EncodeMapStart(yynn2395)
				yynn2395 = 0
			}
			if yyr2395 || yy2arr2395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2395[0] {
					yy2397 := &x.LoadBalancer
					yy2397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2398 := &x.LoadBalancer
					yy2398.CodecEncodeSelf(e)
				}
			}
			if yyr2395 || yy2arr2395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2399 := z.DecBinary()
	_ = yym2399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2400 := r.ContainerType()
		if yyct2400 == codecSelferValueTypeMap1234 {
			yyl2400 := r.ReadMapStart()
			if yyl2400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2400, d)
			}
		} else if yyct2400 == codecSelferValueTypeArray1234 {
			yyl2400 := r.ReadArrayStart()
			if yyl2400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2401Slc
	var yyhl2401 bool = l >= 0
	for yyj2401 := 0; ; yyj2401++ {
		if yyhl2401 {
			if yyj2401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2401Slc = r.DecodeBytes(yys2401Slc, true, true)
		yys2401 := string(yys2401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2401 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2402 := &x.LoadBalancer
				yyv2402.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2401)
		} // end switch yys2401
	} // end for yyj2401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2403 int
	var yyb2403 bool
	var yyhl2403 bool = l >= 0
	yyj2403++
	if yyhl2403 {
		yyb2403 = yyj2403 > l
	} else {
		yyb2403 = r.CheckBreak()
	}
	if yyb2403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2404 := &x.LoadBalancer
		yyv2404.CodecDecodeSelf(d)
	}
	for {
		yyj2403++
		if yyhl2403 {
			yyb2403 = yyj2403 > l
		} else {
			yyb2403 = r.CheckBreak()
		}
		if yyb2403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2405 := z.EncBinary()
		_ = yym2405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2406 := !z.EncBinary()
			yy2arr2406 := z.EncBasicHandle().StructToArray
			var yyq2406 [1]bool
			_, _, _ = yysep2406, yyq2406, yy2arr2406
			const yyr2406 bool = false
			yyq2406[0] = len(x.Ingress) != 0
			var yynn2406 int
			if yyr2406 || yy2arr2406 {
				r.EncodeArrayStart(1)
			} else {
				yynn2406 = 0
				for _, b := range yyq2406 {
					if b {
						yynn2406++
					}
				}
				r.EncodeMapStart(yynn2406)
				yynn2406 = 0
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2408 := z.EncBinary()
						_ = yym2408
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2409 := z.EncBinary()
						_ = yym2409
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2410 := z.DecBinary()
	_ = yym2410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2411 := r.ContainerType()
		if yyct2411 == codecSelferValueTypeMap1234 {
			yyl2411 := r.ReadMapStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2411, d)
			}
		} else if yyct2411 == codecSelferValueTypeArray1234 {
			yyl2411 := r.ReadArrayStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2412Slc
	var yyhl2412 bool = l >= 0
	for yyj2412 := 0; ; yyj2412++ {
		if yyhl2412 {
			if yyj2412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2412Slc = r.DecodeBytes(yys2412Slc, true, true)
		yys2412 := string(yys2412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2412 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2413 := &x.Ingress
				yym2414 := z.DecBinary()
				_ = yym2414
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2413), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2412)
		} // end switch yys2412
	} // end for yyj2412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2415 int
	var yyb2415 bool
	var yyhl2415 bool = l >= 0
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2416 := &x.Ingress
		yym2417 := z.DecBinary()
		_ = yym2417
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2416), d)
		}
	}
	for {
		yyj2415++
		if yyhl2415 {
			yyb2415 = yyj2415 > l
		} else {
			yyb2415 = r.CheckBreak()
		}
		if yyb2415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2418 := z.EncBinary()
		_ = yym2418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2419 := !z.EncBinary()
			yy2arr2419 := z.EncBasicHandle().StructToArray
			var yyq2419 [2]bool
			_, _, _ = yysep2419, yyq2419, yy2arr2419
			const yyr2419 bool = false
			yyq2419[0] = x.IP != ""
			yyq2419[1] = x.Hostname != ""
			var yynn2419 int
			if yyr2419 || yy2arr2419 {
				r.EncodeArrayStart(2)
			} else {
				yynn2419 = 0
				for _, b := range yyq2419 {
					if b {
						yynn2419++
					}
				}
				r.EncodeMapStart(yynn2419)
				yynn2419 = 0
			}
			if yyr2419 || yy2arr2419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2419[0] {
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2419[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2419 || yy2arr2419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2419[1] {
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2419[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2419 || yy2arr2419 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2426 := z.DecBinary()
	_ = yym2426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2427 := r.ContainerType()
		if yyct2427 == codecSelferValueTypeMap1234 {
			yyl2427 := r.ReadMapStart()
			if yyl2427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2427, d)
			}
		} else if yyct2427 == codecSelferValueTypeArray1234 {
			yyl2427 := r.ReadArrayStart()
			if yyl2427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2428Slc
	var yyhl2428 bool = l >= 0
	for yyj2428 := 0; ; yyj2428++ {
		if yyhl2428 {
			if yyj2428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2428Slc = r.DecodeBytes(yys2428Slc, true, true)
		yys2428 := string(yys2428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2428 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2428)
		} // end switch yys2428
	} // end for yyj2428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2431 int
	var yyb2431 bool
	var yyhl2431 bool = l >= 0
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2431++
		if yyhl2431 {
			yyb2431 = yyj2431 > l
		} else {
			yyb2431 = r.CheckBreak()
		}
		if yyb2431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2434 := z.EncBinary()
		_ = yym2434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2435 := !z.EncBinary()
			yy2arr2435 := z.EncBasicHandle().StructToArray
			var yyq2435 [8]bool
			_, _, _ = yysep2435, yyq2435, yy2arr2435
			const yyr2435 bool = false
			yyq2435[0] = x.Type != ""
			yyq2435[3] = x.ClusterIP != ""
			yyq2435[4] = len(x.ExternalIPs) != 0
			yyq2435[5] = x.LoadBalancerIP != ""
			yyq2435[6] = x.SessionAffinity != ""
			yyq2435[7] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2435 int
			if yyr2435 || yy2arr2435 {
				r.EncodeArrayStart(8)
			} else {
				yynn2435 = 2
				for _, b := range yyq2435 {
					if b {
						yynn2435++
					}
				}
				r.EncodeMapStart(yynn2435)
				yynn2435 = 0
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[3] {
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2447 := z.EncBinary()
						_ = yym2447
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2435[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2448 := z.EncBinary()
						_ = yym2448
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[5] {
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2435[7] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2454 := z.EncBinary()
						_ = yym2454
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2435[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2455 := z.EncBinary()
						_ = yym2455
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2435 || yy2arr2435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2456 := z.DecBinary()
	_ = yym2456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2457 := r.ContainerType()
		if yyct2457 == codecSelferValueTypeMap1234 {
			yyl2457 := r.ReadMapStart()
			if yyl2457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2457, d)
			}
		} else if yyct2457 == codecSelferValueTypeArray1234 {
			yyl2457 := r.ReadArrayStart()
			if yyl2457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2458Slc
	var yyhl2458 bool = l >= 0
	for yyj2458 := 0; ; yyj2458++ {
		if yyhl2458 {
			if yyj2458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2458Slc = r.DecodeBytes(yys2458Slc, true, true)
		yys2458 := string(yys2458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2458 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2460 := &x.Ports
				yym2461 := z.DecBinary()
				_ = yym2461
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2460), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2462 := &x.Selector
				yym2463 := z.DecBinary()
				_ = yym2463
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2462, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2465 := &x.ExternalIPs
				yym2466 := z.DecBinary()
				_ = yym2466
				if false {
				} else {
					z.F.DecSliceStringX(yyv2465, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2469 := &x.LoadBalancerSourceRanges
				yym2470 := z.DecBinary()
				_ = yym2470
				if false {
				} else {
					z.F.DecSliceStringX(yyv2469, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2458)
		} // end switch yys2458
	} // end for yyj2458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2471 int
	var yyb2471 bool
	var yyhl2471 bool = l >= 0
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2473 := &x.Ports
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2473), d)
		}
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2475 := &x.Selector
		yym2476 := z.DecBinary()
		_ = yym2476
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2475, false, d)
		}
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2478 := &x.ExternalIPs
		yym2479 := z.DecBinary()
		_ = yym2479
		if false {
		} else {
			z.F.DecSliceStringX(yyv2478, false, d)
		}
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2482 := &x.LoadBalancerSourceRanges
		yym2483 := z.DecBinary()
		_ = yym2483
		if false {
		} else {
			z.F.DecSliceStringX(yyv2482, false, d)
		}
	}
	for {
		yyj2471++
		if yyhl2471 {
			yyb2471 = yyj2471 > l
		} else {
			yyb2471 = r.CheckBreak()
		}
		if yyb2471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2484 := z.EncBinary()
		_ = yym2484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2485 := !z.EncBinary()
			yy2arr2485 := z.EncBasicHandle().StructToArray
			var yyq2485 [5]bool
			_, _, _ = yysep2485, yyq2485, yy2arr2485
			const yyr2485 bool = false
			var yynn2485 int
			if yyr2485 || yy2arr2485 {
				r.EncodeArrayStart(5)
			} else {
				yynn2485 = 5
				for _, b := range yyq2485 {
					if b {
						yynn2485++
					}
				}
				r.EncodeMapStart(yynn2485)
				yynn2485 = 0
			}
			if yyr2485 || yy2arr2485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2487 := z.EncBinary()
				_ = yym2487
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2488 := z.EncBinary()
				_ = yym2488
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2485 || yy2arr2485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2485 || yy2arr2485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2491 := z.EncBinary()
				_ = yym2491
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2492 := z.EncBinary()
				_ = yym2492
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2485 || yy2arr2485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2494 := &x.TargetPort
				yym2495 := z.EncBinary()
				_ = yym2495
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2494) {
				} else if !yym2495 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2494)
				} else {
					z.EncFallback(yy2494)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2496 := &x.TargetPort
				yym2497 := z.EncBinary()
				_ = yym2497
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2496) {
				} else if !yym2497 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2496)
				} else {
					z.EncFallback(yy2496)
				}
			}
			if yyr2485 || yy2arr2485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2499 := z.EncBinary()
				_ = yym2499
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2500 := z.EncBinary()
				_ = yym2500
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2485 || yy2arr2485 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2501 := z.DecBinary()
	_ = yym2501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2502 := r.ContainerType()
		if yyct2502 == codecSelferValueTypeMap1234 {
			yyl2502 := r.ReadMapStart()
			if yyl2502 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2502, d)
			}
		} else if yyct2502 == codecSelferValueTypeArray1234 {
			yyl2502 := r.ReadArrayStart()
			if yyl2502 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2503Slc
	var yyhl2503 bool = l >= 0
	for yyj2503 := 0; ; yyj2503++ {
		if yyhl2503 {
			if yyj2503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2503Slc = r.DecodeBytes(yys2503Slc, true, true)
		yys2503 := string(yys2503Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2503 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2507 := &x.TargetPort
				yym2508 := z.DecBinary()
				_ = yym2508
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2507) {
				} else if !yym2508 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2507)
				} else {
					z.DecFallback(yyv2507, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2503)
		} // end switch yys2503
	} // end for yyj2503
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2510 int
	var yyb2510 bool
	var yyhl2510 bool = l >= 0
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2514 := &x.TargetPort
		yym2515 := z.DecBinary()
		_ = yym2515
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2514) {
		} else if !yym2515 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2514)
		} else {
			z.DecFallback(yyv2514, false)
		}
	}
	yyj2510++
	if yyhl2510 {
		yyb2510 = yyj2510 > l
	} else {
		yyb2510 = r.CheckBreak()
	}
	if yyb2510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2510++
		if yyhl2510 {
			yyb2510 = yyj2510 > l
		} else {
			yyb2510 = r.CheckBreak()
		}
		if yyb2510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2517 := z.EncBinary()
		_ = yym2517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2518 := !z.EncBinary()
			yy2arr2518 := z.EncBasicHandle().StructToArray
			var yyq2518 [5]bool
			_, _, _ = yysep2518, yyq2518, yy2arr2518
			const yyr2518 bool = false
			yyq2518[0] = x.Kind != ""
			yyq2518[1] = x.APIVersion != ""
			yyq2518[2] = true
			yyq2518[3] = true
			yyq2518[4] = true
			var yynn2518 int
			if yyr2518 || yy2arr2518 {
				r.EncodeArrayStart(5)
			} else {
				yynn2518 = 0
				for _, b := range yyq2518 {
					if b {
						yynn2518++
					}
				}
				r.EncodeMapStart(yynn2518)
				yynn2518 = 0
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2518[0] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2518[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2518[1] {
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2518[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2518[2] {
					yy2526 := &x.ObjectMeta
					yy2526.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2518[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2527 := &x.ObjectMeta
					yy2527.CodecEncodeSelf(e)
				}
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2518[3] {
					yy2529 := &x.Spec
					yy2529.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2518[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2530 := &x.Spec
					yy2530.CodecEncodeSelf(e)
				}
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2518[4] {
					yy2532 := &x.Status
					yy2532.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2518[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2533 := &x.Status
					yy2533.CodecEncodeSelf(e)
				}
			}
			if yyr2518 || yy2arr2518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2534 := z.DecBinary()
	_ = yym2534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2535 := r.ContainerType()
		if yyct2535 == codecSelferValueTypeMap1234 {
			yyl2535 := r.ReadMapStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2535, d)
			}
		} else if yyct2535 == codecSelferValueTypeArray1234 {
			yyl2535 := r.ReadArrayStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2536Slc
	var yyhl2536 bool = l >= 0
	for yyj2536 := 0; ; yyj2536++ {
		if yyhl2536 {
			if yyj2536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2536Slc = r.DecodeBytes(yys2536Slc, true, true)
		yys2536 := string(yys2536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2539 := &x.ObjectMeta
				yyv2539.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2540 := &x.Spec
				yyv2540.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2541 := &x.Status
				yyv2541.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2536)
		} // end switch yys2536
	} // end for yyj2536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2542 int
	var yyb2542 bool
	var yyhl2542 bool = l >= 0
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2545 := &x.ObjectMeta
		yyv2545.CodecDecodeSelf(d)
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2546 := &x.Spec
		yyv2546.CodecDecodeSelf(d)
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2547 := &x.Status
		yyv2547.CodecDecodeSelf(d)
	}
	for {
		yyj2542++
		if yyhl2542 {
			yyb2542 = yyj2542 > l
		} else {
			yyb2542 = r.CheckBreak()
		}
		if yyb2542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2548 := z.EncBinary()
		_ = yym2548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2549 := !z.EncBinary()
			yy2arr2549 := z.EncBasicHandle().StructToArray
			var yyq2549 [5]bool
			_, _, _ = yysep2549, yyq2549, yy2arr2549
			const yyr2549 bool = false
			yyq2549[0] = x.Kind != ""
			yyq2549[1] = x.APIVersion != ""
			yyq2549[2] = true
			yyq2549[4] = len(x.ImagePullSecrets) != 0
			var yynn2549 int
			if yyr2549 || yy2arr2549 {
				r.EncodeArrayStart(5)
			} else {
				yynn2549 = 1
				for _, b := range yyq2549 {
					if b {
						yynn2549++
					}
				}
				r.EncodeMapStart(yynn2549)
				yynn2549 = 0
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[0] {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[1] {
					yym2554 := z.EncBinary()
					_ = yym2554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[2] {
					yy2557 := &x.ObjectMeta
					yy2557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2558 := &x.ObjectMeta
					yy2558.CodecEncodeSelf(e)
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2549[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2563 := z.EncBinary()
						_ = yym2563
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2549[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2564 := z.EncBinary()
						_ = yym2564
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2549 || yy2arr2549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2565 := z.DecBinary()
	_ = yym2565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2566 := r.ContainerType()
		if yyct2566 == codecSelferValueTypeMap1234 {
			yyl2566 := r.ReadMapStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2566, d)
			}
		} else if yyct2566 == codecSelferValueTypeArray1234 {
			yyl2566 := r.ReadArrayStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2567Slc
	var yyhl2567 bool = l >= 0
	for yyj2567 := 0; ; yyj2567++ {
		if yyhl2567 {
			if yyj2567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2567Slc = r.DecodeBytes(yys2567Slc, true, true)
		yys2567 := string(yys2567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2567 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2570 := &x.ObjectMeta
				yyv2570.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2571 := &x.Secrets
				yym2572 := z.DecBinary()
				_ = yym2572
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2571), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2573 := &x.ImagePullSecrets
				yym2574 := z.DecBinary()
				_ = yym2574
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2573), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2567)
		} // end switch yys2567
	} // end for yyj2567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2575 int
	var yyb2575 bool
	var yyhl2575 bool = l >= 0
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2578 := &x.ObjectMeta
		yyv2578.CodecDecodeSelf(d)
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2579 := &x.Secrets
		yym2580 := z.DecBinary()
		_ = yym2580
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2579), d)
		}
	}
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2581 := &x.ImagePullSecrets
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2581), d)
		}
	}
	for {
		yyj2575++
		if yyhl2575 {
			yyb2575 = yyj2575 > l
		} else {
			yyb2575 = r.CheckBreak()
		}
		if yyb2575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2583 := z.EncBinary()
		_ = yym2583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2584 := !z.EncBinary()
			yy2arr2584 := z.EncBasicHandle().StructToArray
			var yyq2584 [4]bool
			_, _, _ = yysep2584, yyq2584, yy2arr2584
			const yyr2584 bool = false
			yyq2584[0] = x.Kind != ""
			yyq2584[1] = x.APIVersion != ""
			yyq2584[2] = true
			var yynn2584 int
			if yyr2584 || yy2arr2584 {
				r.EncodeArrayStart(4)
			} else {
				yynn2584 = 1
				for _, b := range yyq2584 {
					if b {
						yynn2584++
					}
				}
				r.EncodeMapStart(yynn2584)
				yynn2584 = 0
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[0] {
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[1] {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[2] {
					yy2592 := &x.ListMeta
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2592) {
					} else {
						z.EncFallback(yy2592)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2584[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2594 := &x.ListMeta
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2594) {
					} else {
						z.EncFallback(yy2594)
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2599 := z.DecBinary()
	_ = yym2599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2600 := r.ContainerType()
		if yyct2600 == codecSelferValueTypeMap1234 {
			yyl2600 := r.ReadMapStart()
			if yyl2600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2600, d)
			}
		} else if yyct2600 == codecSelferValueTypeArray1234 {
			yyl2600 := r.ReadArrayStart()
			if yyl2600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2601Slc
	var yyhl2601 bool = l >= 0
	for yyj2601 := 0; ; yyj2601++ {
		if yyhl2601 {
			if yyj2601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2601Slc = r.DecodeBytes(yys2601Slc, true, true)
		yys2601 := string(yys2601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2601 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2604 := &x.ListMeta
				yym2605 := z.DecBinary()
				_ = yym2605
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2604) {
				} else {
					z.DecFallback(yyv2604, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2606 := &x.Items
				yym2607 := z.DecBinary()
				_ = yym2607
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2606), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2601)
		} // end switch yys2601
	} // end for yyj2601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2608 int
	var yyb2608 bool
	var yyhl2608 bool = l >= 0
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2611 := &x.ListMeta
		yym2612 := z.DecBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2611) {
		} else {
			z.DecFallback(yyv2611, false)
		}
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2613 := &x.Items
		yym2614 := z.DecBinary()
		_ = yym2614
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2613), d)
		}
	}
	for {
		yyj2608++
		if yyhl2608 {
			yyb2608 = yyj2608 > l
		} else {
			yyb2608 = r.CheckBreak()
		}
		if yyb2608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2615 := z.EncBinary()
		_ = yym2615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2616 := !z.EncBinary()
			yy2arr2616 := z.EncBasicHandle().StructToArray
			var yyq2616 [4]bool
			_, _, _ = yysep2616, yyq2616, yy2arr2616
			const yyr2616 bool = false
			yyq2616[0] = x.Kind != ""
			yyq2616[1] = x.APIVersion != ""
			yyq2616[2] = true
			var yynn2616 int
			if yyr2616 || yy2arr2616 {
				r.EncodeArrayStart(4)
			} else {
				yynn2616 = 1
				for _, b := range yyq2616 {
					if b {
						yynn2616++
					}
				}
				r.EncodeMapStart(yynn2616)
				yynn2616 = 0
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[0] {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2616[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[1] {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[2] {
					yy2624 := &x.ObjectMeta
					yy2624.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2625 := &x.ObjectMeta
					yy2625.CodecEncodeSelf(e)
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2629 := z.DecBinary()
	_ = yym2629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2630 := r.ContainerType()
		if yyct2630 == codecSelferValueTypeMap1234 {
			yyl2630 := r.ReadMapStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2630, d)
			}
		} else if yyct2630 == codecSelferValueTypeArray1234 {
			yyl2630 := r.ReadArrayStart()
			if yyl2630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2631Slc
	var yyhl2631 bool = l >= 0
	for yyj2631 := 0; ; yyj2631++ {
		if yyhl2631 {
			if yyj2631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2631Slc = r.DecodeBytes(yys2631Slc, true, true)
		yys2631 := string(yys2631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2631 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2634 := &x.ObjectMeta
				yyv2634.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2635 := &x.Subsets
				yym2636 := z.DecBinary()
				_ = yym2636
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2635), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2631)
		} // end switch yys2631
	} // end for yyj2631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2637 int
	var yyb2637 bool
	var yyhl2637 bool = l >= 0
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2640 := &x.ObjectMeta
		yyv2640.CodecDecodeSelf(d)
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2641 := &x.Subsets
		yym2642 := z.DecBinary()
		_ = yym2642
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2641), d)
		}
	}
	for {
		yyj2637++
		if yyhl2637 {
			yyb2637 = yyj2637 > l
		} else {
			yyb2637 = r.CheckBreak()
		}
		if yyb2637 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2637-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2643 := z.EncBinary()
		_ = yym2643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2644 := !z.EncBinary()
			yy2arr2644 := z.EncBasicHandle().StructToArray
			var yyq2644 [3]bool
			_, _, _ = yysep2644, yyq2644, yy2arr2644
			const yyr2644 bool = false
			var yynn2644 int
			if yyr2644 || yy2arr2644 {
				r.EncodeArrayStart(3)
			} else {
				yynn2644 = 3
				for _, b := range yyq2644 {
					if b {
						yynn2644++
					}
				}
				r.EncodeMapStart(yynn2644)
				yynn2644 = 0
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2644 || yy2arr2644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2654 := z.DecBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2655 := r.ContainerType()
		if yyct2655 == codecSelferValueTypeMap1234 {
			yyl2655 := r.ReadMapStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2655, d)
			}
		} else if yyct2655 == codecSelferValueTypeArray1234 {
			yyl2655 := r.ReadArrayStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2656Slc
	var yyhl2656 bool = l >= 0
	for yyj2656 := 0; ; yyj2656++ {
		if yyhl2656 {
			if yyj2656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2656Slc = r.DecodeBytes(yys2656Slc, true, true)
		yys2656 := string(yys2656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2656 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2657 := &x.Addresses
				yym2658 := z.DecBinary()
				_ = yym2658
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2657), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2659 := &x.NotReadyAddresses
				yym2660 := z.DecBinary()
				_ = yym2660
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2659), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2661 := &x.Ports
				yym2662 := z.DecBinary()
				_ = yym2662
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2661), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2656)
		} // end switch yys2656
	} // end for yyj2656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2663 int
	var yyb2663 bool
	var yyhl2663 bool = l >= 0
	yyj2663++
	if yyhl2663 {
		yyb2663 = yyj2663 > l
	} else {
		yyb2663 = r.CheckBreak()
	}
	if yyb2663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2664 := &x.Addresses
		yym2665 := z.DecBinary()
		_ = yym2665
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2664), d)
		}
	}
	yyj2663++
	if yyhl2663 {
		yyb2663 = yyj2663 > l
	} else {
		yyb2663 = r.CheckBreak()
	}
	if yyb2663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2666 := &x.NotReadyAddresses
		yym2667 := z.DecBinary()
		_ = yym2667
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2666), d)
		}
	}
	yyj2663++
	if yyhl2663 {
		yyb2663 = yyj2663 > l
	} else {
		yyb2663 = r.CheckBreak()
	}
	if yyb2663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2668 := &x.Ports
		yym2669 := z.DecBinary()
		_ = yym2669
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2668), d)
		}
	}
	for {
		yyj2663++
		if yyhl2663 {
			yyb2663 = yyj2663 > l
		} else {
			yyb2663 = r.CheckBreak()
		}
		if yyb2663 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2663-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2670 := z.EncBinary()
		_ = yym2670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2671 := !z.EncBinary()
			yy2arr2671 := z.EncBasicHandle().StructToArray
			var yyq2671 [3]bool
			_, _, _ = yysep2671, yyq2671, yy2arr2671
			const yyr2671 bool = false
			yyq2671[1] = x.Hostname != ""
			var yynn2671 int
			if yyr2671 || yy2arr2671 {
				r.EncodeArrayStart(3)
			} else {
				yynn2671 = 2
				for _, b := range yyq2671 {
					if b {
						yynn2671++
					}
				}
				r.EncodeMapStart(yynn2671)
				yynn2671 = 0
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2673 := z.EncBinary()
				_ = yym2673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2674 := z.EncBinary()
				_ = yym2674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2671[1] {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2671 || yy2arr2671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2679 := z.DecBinary()
	_ = yym2679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2680 := r.ContainerType()
		if yyct2680 == codecSelferValueTypeMap1234 {
			yyl2680 := r.ReadMapStart()
			if yyl2680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2680, d)
			}
		} else if yyct2680 == codecSelferValueTypeArray1234 {
			yyl2680 := r.ReadArrayStart()
			if yyl2680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2681Slc
	var yyhl2681 bool = l >= 0
	for yyj2681 := 0; ; yyj2681++ {
		if yyhl2681 {
			if yyj2681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2681Slc = r.DecodeBytes(yys2681Slc, true, true)
		yys2681 := string(yys2681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2681 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2681)
		} // end switch yys2681
	} // end for yyj2681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2685 int
	var yyb2685 bool
	var yyhl2685 bool = l >= 0
	yyj2685++
	if yyhl2685 {
		yyb2685 = yyj2685 > l
	} else {
		yyb2685 = r.CheckBreak()
	}
	if yyb2685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2685++
	if yyhl2685 {
		yyb2685 = yyj2685 > l
	} else {
		yyb2685 = r.CheckBreak()
	}
	if yyb2685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2685++
	if yyhl2685 {
		yyb2685 = yyj2685 > l
	} else {
		yyb2685 = r.CheckBreak()
	}
	if yyb2685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2685++
		if yyhl2685 {
			yyb2685 = yyj2685 > l
		} else {
			yyb2685 = r.CheckBreak()
		}
		if yyb2685 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2685-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2689 := z.EncBinary()
		_ = yym2689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2690 := !z.EncBinary()
			yy2arr2690 := z.EncBasicHandle().StructToArray
			var yyq2690 [3]bool
			_, _, _ = yysep2690, yyq2690, yy2arr2690
			const yyr2690 bool = false
			var yynn2690 int
			if yyr2690 || yy2arr2690 {
				r.EncodeArrayStart(3)
			} else {
				yynn2690 = 3
				for _, b := range yyq2690 {
					if b {
						yynn2690++
					}
				}
				r.EncodeMapStart(yynn2690)
				yynn2690 = 0
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2692 := z.EncBinary()
				_ = yym2692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2693 := z.EncBinary()
				_ = yym2693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2695 := z.EncBinary()
				_ = yym2695
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2696 := z.EncBinary()
				_ = yym2696
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2698 := z.DecBinary()
	_ = yym2698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2699 := r.ContainerType()
		if yyct2699 == codecSelferValueTypeMap1234 {
			yyl2699 := r.ReadMapStart()
			if yyl2699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2699, d)
			}
		} else if yyct2699 == codecSelferValueTypeArray1234 {
			yyl2699 := r.ReadArrayStart()
			if yyl2699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2700Slc
	var yyhl2700 bool = l >= 0
	for yyj2700 := 0; ; yyj2700++ {
		if yyhl2700 {
			if yyj2700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2700Slc = r.DecodeBytes(yys2700Slc, true, true)
		yys2700 := string(yys2700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2700 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2700)
		} // end switch yys2700
	} // end for yyj2700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2704 int
	var yyb2704 bool
	var yyhl2704 bool = l >= 0
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2704++
		if yyhl2704 {
			yyb2704 = yyj2704 > l
		} else {
			yyb2704 = r.CheckBreak()
		}
		if yyb2704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2708 := z.EncBinary()
		_ = yym2708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2709 := !z.EncBinary()
			yy2arr2709 := z.EncBasicHandle().StructToArray
			var yyq2709 [4]bool
			_, _, _ = yysep2709, yyq2709, yy2arr2709
			const yyr2709 bool = false
			yyq2709[0] = x.Kind != ""
			yyq2709[1] = x.APIVersion != ""
			yyq2709[2] = true
			var yynn2709 int
			if yyr2709 || yy2arr2709 {
				r.EncodeArrayStart(4)
			} else {
				yynn2709 = 1
				for _, b := range yyq2709 {
					if b {
						yynn2709++
					}
				}
				r.EncodeMapStart(yynn2709)
				yynn2709 = 0
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[0] {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[1] {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[2] {
					yy2717 := &x.ListMeta
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2717) {
					} else {
						z.EncFallback(yy2717)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2709[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2719 := &x.ListMeta
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2719) {
					} else {
						z.EncFallback(yy2719)
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2724 := z.DecBinary()
	_ = yym2724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2725 := r.ContainerType()
		if yyct2725 == codecSelferValueTypeMap1234 {
			yyl2725 := r.ReadMapStart()
			if yyl2725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2725, d)
			}
		} else if yyct2725 == codecSelferValueTypeArray1234 {
			yyl2725 := r.ReadArrayStart()
			if yyl2725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2726Slc
	var yyhl2726 bool = l >= 0
	for yyj2726 := 0; ; yyj2726++ {
		if yyhl2726 {
			if yyj2726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2726Slc = r.DecodeBytes(yys2726Slc, true, true)
		yys2726 := string(yys2726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2726 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2729 := &x.ListMeta
				yym2730 := z.DecBinary()
				_ = yym2730
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2729) {
				} else {
					z.DecFallback(yyv2729, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2731 := &x.Items
				yym2732 := z.DecBinary()
				_ = yym2732
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2731), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2726)
		} // end switch yys2726
	} // end for yyj2726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2733 int
	var yyb2733 bool
	var yyhl2733 bool = l >= 0
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2736 := &x.ListMeta
		yym2737 := z.DecBinary()
		_ = yym2737
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2736) {
		} else {
			z.DecFallback(yyv2736, false)
		}
	}
	yyj2733++
	if yyhl2733 {
		yyb2733 = yyj2733 > l
	} else {
		yyb2733 = r.CheckBreak()
	}
	if yyb2733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2738 := &x.Items
		yym2739 := z.DecBinary()
		_ = yym2739
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2738), d)
		}
	}
	for {
		yyj2733++
		if yyhl2733 {
			yyb2733 = yyj2733 > l
		} else {
			yyb2733 = r.CheckBreak()
		}
		if yyb2733 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2733-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2740 := z.EncBinary()
		_ = yym2740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2741 := !z.EncBinary()
			yy2arr2741 := z.EncBasicHandle().StructToArray
			var yyq2741 [4]bool
			_, _, _ = yysep2741, yyq2741, yy2arr2741
			const yyr2741 bool = false
			yyq2741[0] = x.PodCIDR != ""
			yyq2741[1] = x.ExternalID != ""
			yyq2741[2] = x.ProviderID != ""
			yyq2741[3] = x.Unschedulable != false
			var yynn2741 int
			if yyr2741 || yy2arr2741 {
				r.EncodeArrayStart(4)
			} else {
				yynn2741 = 0
				for _, b := range yyq2741 {
					if b {
						yynn2741++
					}
				}
				r.EncodeMapStart(yynn2741)
				yynn2741 = 0
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[0] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[1] {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[2] {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2741[3] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2741 || yy2arr2741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2754 := z.DecBinary()
	_ = yym2754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2755 := r.ContainerType()
		if yyct2755 == codecSelferValueTypeMap1234 {
			yyl2755 := r.ReadMapStart()
			if yyl2755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2755, d)
			}
		} else if yyct2755 == codecSelferValueTypeArray1234 {
			yyl2755 := r.ReadArrayStart()
			if yyl2755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2756Slc
	var yyhl2756 bool = l >= 0
	for yyj2756 := 0; ; yyj2756++ {
		if yyhl2756 {
			if yyj2756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2756Slc = r.DecodeBytes(yys2756Slc, true, true)
		yys2756 := string(yys2756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2756 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2756)
		} // end switch yys2756
	} // end for yyj2756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2761 int
	var yyb2761 bool
	var yyhl2761 bool = l >= 0
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2761++
		if yyhl2761 {
			yyb2761 = yyj2761 > l
		} else {
			yyb2761 = r.CheckBreak()
		}
		if yyb2761 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2761-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2766 := z.EncBinary()
		_ = yym2766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2767 := !z.EncBinary()
			yy2arr2767 := z.EncBasicHandle().StructToArray
			var yyq2767 [1]bool
			_, _, _ = yysep2767, yyq2767, yy2arr2767
			const yyr2767 bool = false
			var yynn2767 int
			if yyr2767 || yy2arr2767 {
				r.EncodeArrayStart(1)
			} else {
				yynn2767 = 1
				for _, b := range yyq2767 {
					if b {
						yynn2767++
					}
				}
				r.EncodeMapStart(yynn2767)
				yynn2767 = 0
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2769 := z.EncBinary()
				_ = yym2769
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2770 := z.EncBinary()
				_ = yym2770
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2767 || yy2arr2767 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2771 := z.DecBinary()
	_ = yym2771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2772 := r.ContainerType()
		if yyct2772 == codecSelferValueTypeMap1234 {
			yyl2772 := r.ReadMapStart()
			if yyl2772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2772, d)
			}
		} else if yyct2772 == codecSelferValueTypeArray1234 {
			yyl2772 := r.ReadArrayStart()
			if yyl2772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2773Slc
	var yyhl2773 bool = l >= 0
	for yyj2773 := 0; ; yyj2773++ {
		if yyhl2773 {
			if yyj2773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2773Slc = r.DecodeBytes(yys2773Slc, true, true)
		yys2773 := string(yys2773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2773 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2773)
		} // end switch yys2773
	} // end for yyj2773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2775 int
	var yyb2775 bool
	var yyhl2775 bool = l >= 0
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2775++
		if yyhl2775 {
			yyb2775 = yyj2775 > l
		} else {
			yyb2775 = r.CheckBreak()
		}
		if yyb2775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2777 := z.EncBinary()
		_ = yym2777
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2778 := !z.EncBinary()
			yy2arr2778 := z.EncBasicHandle().StructToArray
			var yyq2778 [1]bool
			_, _, _ = yysep2778, yyq2778, yy2arr2778
			const yyr2778 bool = false
			yyq2778[0] = true
			var yynn2778 int
			if yyr2778 || yy2arr2778 {
				r.EncodeArrayStart(1)
			} else {
				yynn2778 = 0
				for _, b := range yyq2778 {
					if b {
						yynn2778++
					}
				}
				r.EncodeMapStart(yynn2778)
				yynn2778 = 0
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2778[0] {
					yy2780 := &x.KubeletEndpoint
					yy2780.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2778[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2781 := &x.KubeletEndpoint
					yy2781.CodecEncodeSelf(e)
				}
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2782 := z.DecBinary()
	_ = yym2782
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2783 := r.ContainerType()
		if yyct2783 == codecSelferValueTypeMap1234 {
			yyl2783 := r.ReadMapStart()
			if yyl2783 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2783, d)
			}
		} else if yyct2783 == codecSelferValueTypeArray1234 {
			yyl2783 := r.ReadArrayStart()
			if yyl2783 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2783, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2784Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2784Slc
	var yyhl2784 bool = l >= 0
	for yyj2784 := 0; ; yyj2784++ {
		if yyhl2784 {
			if yyj2784 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2784Slc = r.DecodeBytes(yys2784Slc, true, true)
		yys2784 := string(yys2784Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2784 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2785 := &x.KubeletEndpoint
				yyv2785.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2784)
		} // end switch yys2784
	} // end for yyj2784
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2786 int
	var yyb2786 bool
	var yyhl2786 bool = l >= 0
	yyj2786++
	if yyhl2786 {
		yyb2786 = yyj2786 > l
	} else {
		yyb2786 = r.CheckBreak()
	}
	if yyb2786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2787 := &x.KubeletEndpoint
		yyv2787.CodecDecodeSelf(d)
	}
	for {
		yyj2786++
		if yyhl2786 {
			yyb2786 = yyj2786 > l
		} else {
			yyb2786 = r.CheckBreak()
		}
		if yyb2786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2788 := z.EncBinary()
		_ = yym2788
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2789 := !z.EncBinary()
			yy2arr2789 := z.EncBasicHandle().StructToArray
			var yyq2789 [10]bool
			_, _, _ = yysep2789, yyq2789, yy2arr2789
			const yyr2789 bool = false
			var yynn2789 int
			if yyr2789 || yy2arr2789 {
				r.EncodeArrayStart(10)
			} else {
				yynn2789 = 10
				for _, b := range yyq2789 {
					if b {
						yynn2789++
					}
				}
				r.EncodeMapStart(yynn2789)
				yynn2789 = 0
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2792 := z.EncBinary()
				_ = yym2792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2797 := z.EncBinary()
				_ = yym2797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2798 := z.EncBinary()
				_ = yym2798
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2800 := z.EncBinary()
				_ = yym2800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2801 := z.EncBinary()
				_ = yym2801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2803 := z.EncBinary()
				_ = yym2803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2804 := z.EncBinary()
				_ = yym2804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2806 := z.EncBinary()
				_ = yym2806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2807 := z.EncBinary()
				_ = yym2807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2809 := z.EncBinary()
				_ = yym2809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2810 := z.EncBinary()
				_ = yym2810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2813 := z.EncBinary()
				_ = yym2813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2816 := z.EncBinary()
				_ = yym2816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2819 := z.EncBinary()
				_ = yym2819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2789 || yy2arr2789 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2820 := z.DecBinary()
	_ = yym2820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2821 := r.ContainerType()
		if yyct2821 == codecSelferValueTypeMap1234 {
			yyl2821 := r.ReadMapStart()
			if yyl2821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2821, d)
			}
		} else if yyct2821 == codecSelferValueTypeArray1234 {
			yyl2821 := r.ReadArrayStart()
			if yyl2821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2822Slc
	var yyhl2822 bool = l >= 0
	for yyj2822 := 0; ; yyj2822++ {
		if yyhl2822 {
			if yyj2822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2822Slc = r.DecodeBytes(yys2822Slc, true, true)
		yys2822 := string(yys2822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2822 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2822)
		} // end switch yys2822
	} // end for yyj2822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2833 int
	var yyb2833 bool
	var yyhl2833 bool = l >= 0
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2833++
		if yyhl2833 {
			yyb2833 = yyj2833 > l
		} else {
			yyb2833 = r.CheckBreak()
		}
		if yyb2833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2844 := z.EncBinary()
		_ = yym2844
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2845 := !z.EncBinary()
			yy2arr2845 := z.EncBasicHandle().StructToArray
			var yyq2845 [10]bool
			_, _, _ = yysep2845, yyq2845, yy2arr2845
			const yyr2845 bool = false
			yyq2845[0] = len(x.Capacity) != 0
			yyq2845[1] = len(x.Allocatable) != 0
			yyq2845[2] = x.Phase != ""
			yyq2845[3] = len(x.Conditions) != 0
			yyq2845[4] = len(x.Addresses) != 0
			yyq2845[5] = true
			yyq2845[6] = true
			yyq2845[7] = len(x.Images) != 0
			yyq2845[8] = len(x.VolumesInUse) != 0
			yyq2845[9] = len(x.VolumesAttached) != 0
			var yynn2845 int
			if yyr2845 || yy2arr2845 {
				r.EncodeArrayStart(10)
			} else {
				yynn2845 = 0
				for _, b := range yyq2845 {
					if b {
						yynn2845++
					}
				}
				r.EncodeMapStart(yynn2845)
				yynn2845 = 0
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2845[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2850 := z.EncBinary()
						_ = yym2850
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2851 := z.EncBinary()
						_ = yym2851
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2853 := z.EncBinary()
						_ = yym2853
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2854 := z.EncBinary()
						_ = yym2854
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[5] {
					yy2856 := &x.DaemonEndpoints
					yy2856.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2857 := &x.DaemonEndpoints
					yy2857.CodecEncodeSelf(e)
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[6] {
					yy2859 := &x.NodeInfo
					yy2859.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2860 := &x.NodeInfo
					yy2860.CodecEncodeSelf(e)
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2862 := z.EncBinary()
						_ = yym2862
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2863 := z.EncBinary()
						_ = yym2863
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2865 := z.EncBinary()
						_ = yym2865
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2866 := z.EncBinary()
						_ = yym2866
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2845[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2868 := z.EncBinary()
						_ = yym2868
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2845[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2869 := z.EncBinary()
						_ = yym2869
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2845 || yy2arr2845 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2870 := z.DecBinary()
	_ = yym2870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2871 := r.ContainerType()
		if yyct2871 == codecSelferValueTypeMap1234 {
			yyl2871 := r.ReadMapStart()
			if yyl2871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2871, d)
			}
		} else if yyct2871 == codecSelferValueTypeArray1234 {
			yyl2871 := r.ReadArrayStart()
			if yyl2871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2872Slc
	var yyhl2872 bool = l >= 0
	for yyj2872 := 0; ; yyj2872++ {
		if yyhl2872 {
			if yyj2872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2872Slc = r.DecodeBytes(yys2872Slc, true, true)
		yys2872 := string(yys2872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2872 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2873 := &x.Capacity
				yyv2873.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2874 := &x.Allocatable
				yyv2874.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2876 := &x.Conditions
				yym2877 := z.DecBinary()
				_ = yym2877
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2876), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2878 := &x.Addresses
				yym2879 := z.DecBinary()
				_ = yym2879
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2878), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2880 := &x.DaemonEndpoints
				yyv2880.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2881 := &x.NodeInfo
				yyv2881.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2882 := &x.Images
				yym2883 := z.DecBinary()
				_ = yym2883
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2882), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2884 := &x.VolumesInUse
				yym2885 := z.DecBinary()
				_ = yym2885
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2884), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2886 := &x.VolumesAttached
				yym2887 := z.DecBinary()
				_ = yym2887
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2886), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2872)
		} // end switch yys2872
	} // end for yyj2872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2888 int
	var yyb2888 bool
	var yyhl2888 bool = l >= 0
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2889 := &x.Capacity
		yyv2889.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2890 := &x.Allocatable
		yyv2890.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2892 := &x.Conditions
		yym2893 := z.DecBinary()
		_ = yym2893
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2892), d)
		}
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2894 := &x.Addresses
		yym2895 := z.DecBinary()
		_ = yym2895
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2894), d)
		}
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2896 := &x.DaemonEndpoints
		yyv2896.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2897 := &x.NodeInfo
		yyv2897.CodecDecodeSelf(d)
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2898 := &x.Images
		yym2899 := z.DecBinary()
		_ = yym2899
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2898), d)
		}
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2900 := &x.VolumesInUse
		yym2901 := z.DecBinary()
		_ = yym2901
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2900), d)
		}
	}
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2902 := &x.VolumesAttached
		yym2903 := z.DecBinary()
		_ = yym2903
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2902), d)
		}
	}
	for {
		yyj2888++
		if yyhl2888 {
			yyb2888 = yyj2888 > l
		} else {
			yyb2888 = r.CheckBreak()
		}
		if yyb2888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2904 := z.EncBinary()
	_ = yym2904
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2905 := z.DecBinary()
	_ = yym2905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2906 := z.EncBinary()
		_ = yym2906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2907 := !z.EncBinary()
			yy2arr2907 := z.EncBasicHandle().StructToArray
			var yyq2907 [2]bool
			_, _, _ = yysep2907, yyq2907, yy2arr2907
			const yyr2907 bool = false
			var yynn2907 int
			if yyr2907 || yy2arr2907 {
				r.EncodeArrayStart(2)
			} else {
				yynn2907 = 2
				for _, b := range yyq2907 {
					if b {
						yynn2907++
					}
				}
				r.EncodeMapStart(yynn2907)
				yynn2907 = 0
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2910 := z.EncBinary()
				_ = yym2910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2911 := z.EncBinary()
				_ = yym2911
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2912 := z.DecBinary()
	_ = yym2912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2913 := r.ContainerType()
		if yyct2913 == codecSelferValueTypeMap1234 {
			yyl2913 := r.ReadMapStart()
			if yyl2913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2913, d)
			}
		} else if yyct2913 == codecSelferValueTypeArray1234 {
			yyl2913 := r.ReadArrayStart()
			if yyl2913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2914Slc
	var yyhl2914 bool = l >= 0
	for yyj2914 := 0; ; yyj2914++ {
		if yyhl2914 {
			if yyj2914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2914Slc = r.DecodeBytes(yys2914Slc, true, true)
		yys2914 := string(yys2914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2914 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2914)
		} // end switch yys2914
	} // end for yyj2914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2917 int
	var yyb2917 bool
	var yyhl2917 bool = l >= 0
	yyj2917++
	if yyhl2917 {
		yyb2917 = yyj2917 > l
	} else {
		yyb2917 = r.CheckBreak()
	}
	if yyb2917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2917++
	if yyhl2917 {
		yyb2917 = yyj2917 > l
	} else {
		yyb2917 = r.CheckBreak()
	}
	if yyb2917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2917++
		if yyhl2917 {
			yyb2917 = yyj2917 > l
		} else {
			yyb2917 = r.CheckBreak()
		}
		if yyb2917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2920 := z.EncBinary()
		_ = yym2920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2921 := !z.EncBinary()
			yy2arr2921 := z.EncBasicHandle().StructToArray
			var yyq2921 [1]bool
			_, _, _ = yysep2921, yyq2921, yy2arr2921
			const yyr2921 bool = false
			yyq2921[0] = len(x.PreferAvoidPods) != 0
			var yynn2921 int
			if yyr2921 || yy2arr2921 {
				r.EncodeArrayStart(1)
			} else {
				yynn2921 = 0
				for _, b := range yyq2921 {
					if b {
						yynn2921++
					}
				}
				r.EncodeMapStart(yynn2921)
				yynn2921 = 0
			}
			if yyr2921 || yy2arr2921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2921[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2923 := z.EncBinary()
						_ = yym2923
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2924 := z.EncBinary()
						_ = yym2924
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2921 || yy2arr2921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2925 := z.DecBinary()
	_ = yym2925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2926 := r.ContainerType()
		if yyct2926 == codecSelferValueTypeMap1234 {
			yyl2926 := r.ReadMapStart()
			if yyl2926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2926, d)
			}
		} else if yyct2926 == codecSelferValueTypeArray1234 {
			yyl2926 := r.ReadArrayStart()
			if yyl2926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2927Slc
	var yyhl2927 bool = l >= 0
	for yyj2927 := 0; ; yyj2927++ {
		if yyhl2927 {
			if yyj2927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2927Slc = r.DecodeBytes(yys2927Slc, true, true)
		yys2927 := string(yys2927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2927 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2928 := &x.PreferAvoidPods
				yym2929 := z.DecBinary()
				_ = yym2929
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2928), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2927)
		} // end switch yys2927
	} // end for yyj2927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2930 int
	var yyb2930 bool
	var yyhl2930 bool = l >= 0
	yyj2930++
	if yyhl2930 {
		yyb2930 = yyj2930 > l
	} else {
		yyb2930 = r.CheckBreak()
	}
	if yyb2930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2931 := &x.PreferAvoidPods
		yym2932 := z.DecBinary()
		_ = yym2932
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2931), d)
		}
	}
	for {
		yyj2930++
		if yyhl2930 {
			yyb2930 = yyj2930 > l
		} else {
			yyb2930 = r.CheckBreak()
		}
		if yyb2930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2933 := z.EncBinary()
		_ = yym2933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2934 := !z.EncBinary()
			yy2arr2934 := z.EncBasicHandle().StructToArray
			var yyq2934 [4]bool
			_, _, _ = yysep2934, yyq2934, yy2arr2934
			const yyr2934 bool = false
			yyq2934[1] = true
			yyq2934[2] = x.Reason != ""
			yyq2934[3] = x.Message != ""
			var yynn2934 int
			if yyr2934 || yy2arr2934 {
				r.EncodeArrayStart(4)
			} else {
				yynn2934 = 1
				for _, b := range yyq2934 {
					if b {
						yynn2934++
					}
				}
				r.EncodeMapStart(yynn2934)
				yynn2934 = 0
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2936 := &x.PodSignature
				yy2936.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2937 := &x.PodSignature
				yy2937.CodecEncodeSelf(e)
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[1] {
					yy2939 := &x.EvictionTime
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2939) {
					} else if yym2940 {
						z.EncBinaryMarshal(yy2939)
					} else if !yym2940 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2939)
					} else {
						z.EncFallback(yy2939)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2934[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2941 := &x.EvictionTime
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2941) {
					} else if yym2942 {
						z.EncBinaryMarshal(yy2941)
					} else if !yym2942 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2941)
					} else {
						z.EncFallback(yy2941)
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[2] {
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2934[3] {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2934[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2934 || yy2arr2934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2949 := z.DecBinary()
	_ = yym2949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2950 := r.ContainerType()
		if yyct2950 == codecSelferValueTypeMap1234 {
			yyl2950 := r.ReadMapStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2950, d)
			}
		} else if yyct2950 == codecSelferValueTypeArray1234 {
			yyl2950 := r.ReadArrayStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2951Slc
	var yyhl2951 bool = l >= 0
	for yyj2951 := 0; ; yyj2951++ {
		if yyhl2951 {
			if yyj2951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2951Slc = r.DecodeBytes(yys2951Slc, true, true)
		yys2951 := string(yys2951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2951 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2952 := &x.PodSignature
				yyv2952.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2953 := &x.EvictionTime
				yym2954 := z.DecBinary()
				_ = yym2954
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2953) {
				} else if yym2954 {
					z.DecBinaryUnmarshal(yyv2953)
				} else if !yym2954 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2953)
				} else {
					z.DecFallback(yyv2953, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2951)
		} // end switch yys2951
	} // end for yyj2951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2957 int
	var yyb2957 bool
	var yyhl2957 bool = l >= 0
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2958 := &x.PodSignature
		yyv2958.CodecDecodeSelf(d)
	}
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2959 := &x.EvictionTime
		yym2960 := z.DecBinary()
		_ = yym2960
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2959) {
		} else if yym2960 {
			z.DecBinaryUnmarshal(yyv2959)
		} else if !yym2960 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2959)
		} else {
			z.DecFallback(yyv2959, false)
		}
	}
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2957++
	if yyhl2957 {
		yyb2957 = yyj2957 > l
	} else {
		yyb2957 = r.CheckBreak()
	}
	if yyb2957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2957++
		if yyhl2957 {
			yyb2957 = yyj2957 > l
		} else {
			yyb2957 = r.CheckBreak()
		}
		if yyb2957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2963 := z.EncBinary()
		_ = yym2963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2964 := !z.EncBinary()
			yy2arr2964 := z.EncBasicHandle().StructToArray
			var yyq2964 [1]bool
			_, _, _ = yysep2964, yyq2964, yy2arr2964
			const yyr2964 bool = false
			yyq2964[0] = x.PodController != nil
			var yynn2964 int
			if yyr2964 || yy2arr2964 {
				r.EncodeArrayStart(1)
			} else {
				yynn2964 = 0
				for _, b := range yyq2964 {
					if b {
						yynn2964++
					}
				}
				r.EncodeMapStart(yynn2964)
				yynn2964 = 0
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2964[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2966 := z.DecBinary()
	_ = yym2966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2967 := r.ContainerType()
		if yyct2967 == codecSelferValueTypeMap1234 {
			yyl2967 := r.ReadMapStart()
			if yyl2967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2967, d)
			}
		} else if yyct2967 == codecSelferValueTypeArray1234 {
			yyl2967 := r.ReadArrayStart()
			if yyl2967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2968Slc
	var yyhl2968 bool = l >= 0
	for yyj2968 := 0; ; yyj2968++ {
		if yyhl2968 {
			if yyj2968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2968Slc = r.DecodeBytes(yys2968Slc, true, true)
		yys2968 := string(yys2968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2968 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2968)
		} // end switch yys2968
	} // end for yyj2968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2970 int
	var yyb2970 bool
	var yyhl2970 bool = l >= 0
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2970++
		if yyhl2970 {
			yyb2970 = yyj2970 > l
		} else {
			yyb2970 = r.CheckBreak()
		}
		if yyb2970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2972 := z.EncBinary()
		_ = yym2972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2973 := !z.EncBinary()
			yy2arr2973 := z.EncBasicHandle().StructToArray
			var yyq2973 [2]bool
			_, _, _ = yysep2973, yyq2973, yy2arr2973
			const yyr2973 bool = false
			yyq2973[1] = x.SizeBytes != 0
			var yynn2973 int
			if yyr2973 || yy2arr2973 {
				r.EncodeArrayStart(2)
			} else {
				yynn2973 = 1
				for _, b := range yyq2973 {
					if b {
						yynn2973++
					}
				}
				r.EncodeMapStart(yynn2973)
				yynn2973 = 0
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2973[1] {
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2973 || yy2arr2973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2980 := z.DecBinary()
	_ = yym2980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2981 := r.ContainerType()
		if yyct2981 == codecSelferValueTypeMap1234 {
			yyl2981 := r.ReadMapStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2981, d)
			}
		} else if yyct2981 == codecSelferValueTypeArray1234 {
			yyl2981 := r.ReadArrayStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2982Slc
	var yyhl2982 bool = l >= 0
	for yyj2982 := 0; ; yyj2982++ {
		if yyhl2982 {
			if yyj2982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2982Slc = r.DecodeBytes(yys2982Slc, true, true)
		yys2982 := string(yys2982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2982 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv2983 := &x.Names
				yym2984 := z.DecBinary()
				_ = yym2984
				if false {
				} else {
					z.F.DecSliceStringX(yyv2983, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2982)
		} // end switch yys2982
	} // end for yyj2982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2986 int
	var yyb2986 bool
	var yyhl2986 bool = l >= 0
	yyj2986++
	if yyhl2986 {
		yyb2986 = yyj2986 > l
	} else {
		yyb2986 = r.CheckBreak()
	}
	if yyb2986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv2987 := &x.Names
		yym2988 := z.DecBinary()
		_ = yym2988
		if false {
		} else {
			z.F.DecSliceStringX(yyv2987, false, d)
		}
	}
	yyj2986++
	if yyhl2986 {
		yyb2986 = yyj2986 > l
	} else {
		yyb2986 = r.CheckBreak()
	}
	if yyb2986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj2986++
		if yyhl2986 {
			yyb2986 = yyj2986 > l
		} else {
			yyb2986 = r.CheckBreak()
		}
		if yyb2986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2990 := z.EncBinary()
	_ = yym2990
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2991 := z.DecBinary()
	_ = yym2991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2992 := z.EncBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2993 := z.DecBinary()
	_ = yym2993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2994 := z.EncBinary()
		_ = yym2994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2995 := !z.EncBinary()
			yy2arr2995 := z.EncBasicHandle().StructToArray
			var yyq2995 [6]bool
			_, _, _ = yysep2995, yyq2995, yy2arr2995
			const yyr2995 bool = false
			yyq2995[2] = true
			yyq2995[3] = true
			yyq2995[4] = x.Reason != ""
			yyq2995[5] = x.Message != ""
			var yynn2995 int
			if yyr2995 || yy2arr2995 {
				r.EncodeArrayStart(6)
			} else {
				yynn2995 = 2
				for _, b := range yyq2995 {
					if b {
						yynn2995++
					}
				}
				r.EncodeMapStart(yynn2995)
				yynn2995 = 0
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[2] {
					yy2999 := &x.LastHeartbeatTime
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2999) {
					} else if yym3000 {
						z.EncBinaryMarshal(yy2999)
					} else if !yym3000 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2999)
					} else {
						z.EncFallback(yy2999)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3001 := &x.LastHeartbeatTime
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3001) {
					} else if yym3002 {
						z.EncBinaryMarshal(yy3001)
					} else if !yym3002 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3001)
					} else {
						z.EncFallback(yy3001)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[3] {
					yy3004 := &x.LastTransitionTime
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3004) {
					} else if yym3005 {
						z.EncBinaryMarshal(yy3004)
					} else if !yym3005 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3004)
					} else {
						z.EncFallback(yy3004)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3006 := &x.LastTransitionTime
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3006) {
					} else if yym3007 {
						z.EncBinaryMarshal(yy3006)
					} else if !yym3007 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3006)
					} else {
						z.EncFallback(yy3006)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[4] {
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2995[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[5] {
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2995[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3014 := z.DecBinary()
	_ = yym3014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3015 := r.ContainerType()
		if yyct3015 == codecSelferValueTypeMap1234 {
			yyl3015 := r.ReadMapStart()
			if yyl3015 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3015, d)
			}
		} else if yyct3015 == codecSelferValueTypeArray1234 {
			yyl3015 := r.ReadArrayStart()
			if yyl3015 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3016Slc
	var yyhl3016 bool = l >= 0
	for yyj3016 := 0; ; yyj3016++ {
		if yyhl3016 {
			if yyj3016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3016Slc = r.DecodeBytes(yys3016Slc, true, true)
		yys3016 := string(yys3016Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3016 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3019 := &x.LastHeartbeatTime
				yym3020 := z.DecBinary()
				_ = yym3020
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3019) {
				} else if yym3020 {
					z.DecBinaryUnmarshal(yyv3019)
				} else if !yym3020 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3019)
				} else {
					z.DecFallback(yyv3019, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3021 := &x.LastTransitionTime
				yym3022 := z.DecBinary()
				_ = yym3022
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3021) {
				} else if yym3022 {
					z.DecBinaryUnmarshal(yyv3021)
				} else if !yym3022 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3021)
				} else {
					z.DecFallback(yyv3021, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3016)
		} // end switch yys3016
	} // end for yyj3016
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3025 int
	var yyb3025 bool
	var yyhl3025 bool = l >= 0
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3028 := &x.LastHeartbeatTime
		yym3029 := z.DecBinary()
		_ = yym3029
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3028) {
		} else if yym3029 {
			z.DecBinaryUnmarshal(yyv3028)
		} else if !yym3029 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3028)
		} else {
			z.DecFallback(yyv3028, false)
		}
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3030 := &x.LastTransitionTime
		yym3031 := z.DecBinary()
		_ = yym3031
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3030) {
		} else if yym3031 {
			z.DecBinaryUnmarshal(yyv3030)
		} else if !yym3031 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3030)
		} else {
			z.DecFallback(yyv3030, false)
		}
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3025++
	if yyhl3025 {
		yyb3025 = yyj3025 > l
	} else {
		yyb3025 = r.CheckBreak()
	}
	if yyb3025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3025++
		if yyhl3025 {
			yyb3025 = yyj3025 > l
		} else {
			yyb3025 = r.CheckBreak()
		}
		if yyb3025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3034 := z.EncBinary()
	_ = yym3034
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3035 := z.DecBinary()
	_ = yym3035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3036 := z.EncBinary()
		_ = yym3036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3037 := !z.EncBinary()
			yy2arr3037 := z.EncBasicHandle().StructToArray
			var yyq3037 [2]bool
			_, _, _ = yysep3037, yyq3037, yy2arr3037
			const yyr3037 bool = false
			var yynn3037 int
			if yyr3037 || yy2arr3037 {
				r.EncodeArrayStart(2)
			} else {
				yynn3037 = 2
				for _, b := range yyq3037 {
					if b {
						yynn3037++
					}
				}
				r.EncodeMapStart(yynn3037)
				yynn3037 = 0
			}
			if yyr3037 || yy2arr3037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3037 || yy2arr3037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3040 := z.EncBinary()
				_ = yym3040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3041 := z.EncBinary()
				_ = yym3041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3037 || yy2arr3037 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3042 := z.DecBinary()
	_ = yym3042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3043 := r.ContainerType()
		if yyct3043 == codecSelferValueTypeMap1234 {
			yyl3043 := r.ReadMapStart()
			if yyl3043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3043, d)
			}
		} else if yyct3043 == codecSelferValueTypeArray1234 {
			yyl3043 := r.ReadArrayStart()
			if yyl3043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3044Slc
	var yyhl3044 bool = l >= 0
	for yyj3044 := 0; ; yyj3044++ {
		if yyhl3044 {
			if yyj3044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3044Slc = r.DecodeBytes(yys3044Slc, true, true)
		yys3044 := string(yys3044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3044 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3044)
		} // end switch yys3044
	} // end for yyj3044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3047 int
	var yyb3047 bool
	var yyhl3047 bool = l >= 0
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3047++
		if yyhl3047 {
			yyb3047 = yyj3047 > l
		} else {
			yyb3047 = r.CheckBreak()
		}
		if yyb3047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3050 := z.EncBinary()
		_ = yym3050
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3051 := !z.EncBinary()
			yy2arr3051 := z.EncBasicHandle().StructToArray
			var yyq3051 [1]bool
			_, _, _ = yysep3051, yyq3051, yy2arr3051
			const yyr3051 bool = false
			yyq3051[0] = len(x.Capacity) != 0
			var yynn3051 int
			if yyr3051 || yy2arr3051 {
				r.EncodeArrayStart(1)
			} else {
				yynn3051 = 0
				for _, b := range yyq3051 {
					if b {
						yynn3051++
					}
				}
				r.EncodeMapStart(yynn3051)
				yynn3051 = 0
			}
			if yyr3051 || yy2arr3051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3051[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3051[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3051 || yy2arr3051 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3053 := z.DecBinary()
	_ = yym3053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3054 := r.ContainerType()
		if yyct3054 == codecSelferValueTypeMap1234 {
			yyl3054 := r.ReadMapStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3054, d)
			}
		} else if yyct3054 == codecSelferValueTypeArray1234 {
			yyl3054 := r.ReadArrayStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3055Slc
	var yyhl3055 bool = l >= 0
	for yyj3055 := 0; ; yyj3055++ {
		if yyhl3055 {
			if yyj3055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3055Slc = r.DecodeBytes(yys3055Slc, true, true)
		yys3055 := string(yys3055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3055 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3056 := &x.Capacity
				yyv3056.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3055)
		} // end switch yys3055
	} // end for yyj3055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3057 int
	var yyb3057 bool
	var yyhl3057 bool = l >= 0
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3058 := &x.Capacity
		yyv3058.CodecDecodeSelf(d)
	}
	for {
		yyj3057++
		if yyhl3057 {
			yyb3057 = yyj3057 > l
		} else {
			yyb3057 = r.CheckBreak()
		}
		if yyb3057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3059 := z.EncBinary()
	_ = yym3059
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3060 := z.DecBinary()
	_ = yym3060
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3061 := z.EncBinary()
		_ = yym3061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3062 := z.DecBinary()
	_ = yym3062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3063 := z.EncBinary()
		_ = yym3063
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3064 := !z.EncBinary()
			yy2arr3064 := z.EncBasicHandle().StructToArray
			var yyq3064 [5]bool
			_, _, _ = yysep3064, yyq3064, yy2arr3064
			const yyr3064 bool = false
			yyq3064[0] = x.Kind != ""
			yyq3064[1] = x.APIVersion != ""
			yyq3064[2] = true
			yyq3064[3] = true
			yyq3064[4] = true
			var yynn3064 int
			if yyr3064 || yy2arr3064 {
				r.EncodeArrayStart(5)
			} else {
				yynn3064 = 0
				for _, b := range yyq3064 {
					if b {
						yynn3064++
					}
				}
				r.EncodeMapStart(yynn3064)
				yynn3064 = 0
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[0] {
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[1] {
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[2] {
					yy3072 := &x.ObjectMeta
					yy3072.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3073 := &x.ObjectMeta
					yy3073.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[3] {
					yy3075 := &x.Spec
					yy3075.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3076 := &x.Spec
					yy3076.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[4] {
					yy3078 := &x.Status
					yy3078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3079 := &x.Status
					yy3079.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3080 := z.DecBinary()
	_ = yym3080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3081 := r.ContainerType()
		if yyct3081 == codecSelferValueTypeMap1234 {
			yyl3081 := r.ReadMapStart()
			if yyl3081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3081, d)
			}
		} else if yyct3081 == codecSelferValueTypeArray1234 {
			yyl3081 := r.ReadArrayStart()
			if yyl3081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3082Slc
	var yyhl3082 bool = l >= 0
	for yyj3082 := 0; ; yyj3082++ {
		if yyhl3082 {
			if yyj3082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3082Slc = r.DecodeBytes(yys3082Slc, true, true)
		yys3082 := string(yys3082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3082 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3085 := &x.ObjectMeta
				yyv3085.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3086 := &x.Spec
				yyv3086.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3087 := &x.Status
				yyv3087.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3082)
		} // end switch yys3082
	} // end for yyj3082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3091 := &x.ObjectMeta
		yyv3091.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3092 := &x.Spec
		yyv3092.CodecDecodeSelf(d)
	}
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3093 := &x.Status
		yyv3093.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3094 := z.EncBinary()
		_ = yym3094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3095 := !z.EncBinary()
			yy2arr3095 := z.EncBasicHandle().StructToArray
			var yyq3095 [4]bool
			_, _, _ = yysep3095, yyq3095, yy2arr3095
			const yyr3095 bool = false
			yyq3095[0] = x.Kind != ""
			yyq3095[1] = x.APIVersion != ""
			yyq3095[2] = true
			var yynn3095 int
			if yyr3095 || yy2arr3095 {
				r.EncodeArrayStart(4)
			} else {
				yynn3095 = 1
				for _, b := range yyq3095 {
					if b {
						yynn3095++
					}
				}
				r.EncodeMapStart(yynn3095)
				yynn3095 = 0
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[0] {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[1] {
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[2] {
					yy3103 := &x.ListMeta
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3103) {
					} else {
						z.EncFallback(yy3103)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3095[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3105 := &x.ListMeta
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3105) {
					} else {
						z.EncFallback(yy3105)
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3110 := z.DecBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3111 := r.ContainerType()
		if yyct3111 == codecSelferValueTypeMap1234 {
			yyl3111 := r.ReadMapStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3111, d)
			}
		} else if yyct3111 == codecSelferValueTypeArray1234 {
			yyl3111 := r.ReadArrayStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3112Slc
	var yyhl3112 bool = l >= 0
	for yyj3112 := 0; ; yyj3112++ {
		if yyhl3112 {
			if yyj3112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3112Slc = r.DecodeBytes(yys3112Slc, true, true)
		yys3112 := string(yys3112Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3112 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3115 := &x.ListMeta
				yym3116 := z.DecBinary()
				_ = yym3116
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3115) {
				} else {
					z.DecFallback(yyv3115, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3117 := &x.Items
				yym3118 := z.DecBinary()
				_ = yym3118
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3117), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3112)
		} // end switch yys3112
	} // end for yyj3112
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3119 int
	var yyb3119 bool
	var yyhl3119 bool = l >= 0
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3122 := &x.ListMeta
		yym3123 := z.DecBinary()
		_ = yym3123
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3122) {
		} else {
			z.DecFallback(yyv3122, false)
		}
	}
	yyj3119++
	if yyhl3119 {
		yyb3119 = yyj3119 > l
	} else {
		yyb3119 = r.CheckBreak()
	}
	if yyb3119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3124 := &x.Items
		yym3125 := z.DecBinary()
		_ = yym3125
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3124), d)
		}
	}
	for {
		yyj3119++
		if yyhl3119 {
			yyb3119 = yyj3119 > l
		} else {
			yyb3119 = r.CheckBreak()
		}
		if yyb3119 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3119-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3126 := z.EncBinary()
		_ = yym3126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3127 := !z.EncBinary()
			yy2arr3127 := z.EncBasicHandle().StructToArray
			var yyq3127 [1]bool
			_, _, _ = yysep3127, yyq3127, yy2arr3127
			const yyr3127 bool = false
			var yynn3127 int
			if yyr3127 || yy2arr3127 {
				r.EncodeArrayStart(1)
			} else {
				yynn3127 = 1
				for _, b := range yyq3127 {
					if b {
						yynn3127++
					}
				}
				r.EncodeMapStart(yynn3127)
				yynn3127 = 0
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3127 || yy2arr3127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3131 := z.DecBinary()
	_ = yym3131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3132 := r.ContainerType()
		if yyct3132 == codecSelferValueTypeMap1234 {
			yyl3132 := r.ReadMapStart()
			if yyl3132 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3132, d)
			}
		} else if yyct3132 == codecSelferValueTypeArray1234 {
			yyl3132 := r.ReadArrayStart()
			if yyl3132 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3132, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3133Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3133Slc
	var yyhl3133 bool = l >= 0
	for yyj3133 := 0; ; yyj3133++ {
		if yyhl3133 {
			if yyj3133 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3133Slc = r.DecodeBytes(yys3133Slc, true, true)
		yys3133 := string(yys3133Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3133 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3134 := &x.Finalizers
				yym3135 := z.DecBinary()
				_ = yym3135
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3134), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3133)
		} // end switch yys3133
	} // end for yyj3133
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3136 int
	var yyb3136 bool
	var yyhl3136 bool = l >= 0
	yyj3136++
	if yyhl3136 {
		yyb3136 = yyj3136 > l
	} else {
		yyb3136 = r.CheckBreak()
	}
	if yyb3136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3137 := &x.Finalizers
		yym3138 := z.DecBinary()
		_ = yym3138
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3137), d)
		}
	}
	for {
		yyj3136++
		if yyhl3136 {
			yyb3136 = yyj3136 > l
		} else {
			yyb3136 = r.CheckBreak()
		}
		if yyb3136 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3136-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3139 := z.EncBinary()
	_ = yym3139
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3140 := z.DecBinary()
	_ = yym3140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3141 := z.EncBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3142 := !z.EncBinary()
			yy2arr3142 := z.EncBasicHandle().StructToArray
			var yyq3142 [1]bool
			_, _, _ = yysep3142, yyq3142, yy2arr3142
			const yyr3142 bool = false
			yyq3142[0] = x.Phase != ""
			var yynn3142 int
			if yyr3142 || yy2arr3142 {
				r.EncodeArrayStart(1)
			} else {
				yynn3142 = 0
				for _, b := range yyq3142 {
					if b {
						yynn3142++
					}
				}
				r.EncodeMapStart(yynn3142)
				yynn3142 = 0
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3142[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3145 := r.ContainerType()
		if yyct3145 == codecSelferValueTypeMap1234 {
			yyl3145 := r.ReadMapStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3145, d)
			}
		} else if yyct3145 == codecSelferValueTypeArray1234 {
			yyl3145 := r.ReadArrayStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3146Slc
	var yyhl3146 bool = l >= 0
	for yyj3146 := 0; ; yyj3146++ {
		if yyhl3146 {
			if yyj3146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3146Slc = r.DecodeBytes(yys3146Slc, true, true)
		yys3146 := string(yys3146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3146 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3146)
		} // end switch yys3146
	} // end for yyj3146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3148 int
	var yyb3148 bool
	var yyhl3148 bool = l >= 0
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3148++
		if yyhl3148 {
			yyb3148 = yyj3148 > l
		} else {
			yyb3148 = r.CheckBreak()
		}
		if yyb3148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3150 := z.EncBinary()
	_ = yym3150
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3151 := z.DecBinary()
	_ = yym3151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3152 := z.EncBinary()
		_ = yym3152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3153 := !z.EncBinary()
			yy2arr3153 := z.EncBasicHandle().StructToArray
			var yyq3153 [5]bool
			_, _, _ = yysep3153, yyq3153, yy2arr3153
			const yyr3153 bool = false
			yyq3153[0] = x.Kind != ""
			yyq3153[1] = x.APIVersion != ""
			yyq3153[2] = true
			yyq3153[3] = true
			yyq3153[4] = true
			var yynn3153 int
			if yyr3153 || yy2arr3153 {
				r.EncodeArrayStart(5)
			} else {
				yynn3153 = 0
				for _, b := range yyq3153 {
					if b {
						yynn3153++
					}
				}
				r.EncodeMapStart(yynn3153)
				yynn3153 = 0
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[0] {
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[1] {
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[2] {
					yy3161 := &x.ObjectMeta
					yy3161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3162 := &x.ObjectMeta
					yy3162.CodecEncodeSelf(e)
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[3] {
					yy3164 := &x.Spec
					yy3164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3165 := &x.Spec
					yy3165.CodecEncodeSelf(e)
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[4] {
					yy3167 := &x.Status
					yy3167.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3168 := &x.Status
					yy3168.CodecEncodeSelf(e)
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3170 := r.ContainerType()
		if yyct3170 == codecSelferValueTypeMap1234 {
			yyl3170 := r.ReadMapStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3170, d)
			}
		} else if yyct3170 == codecSelferValueTypeArray1234 {
			yyl3170 := r.ReadArrayStart()
			if yyl3170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3171Slc
	var yyhl3171 bool = l >= 0
	for yyj3171 := 0; ; yyj3171++ {
		if yyhl3171 {
			if yyj3171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3171Slc = r.DecodeBytes(yys3171Slc, true, true)
		yys3171 := string(yys3171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3174 := &x.ObjectMeta
				yyv3174.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3175 := &x.Spec
				yyv3175.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3176 := &x.Status
				yyv3176.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3171)
		} // end switch yys3171
	} // end for yyj3171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3177 int
	var yyb3177 bool
	var yyhl3177 bool = l >= 0
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3180 := &x.ObjectMeta
		yyv3180.CodecDecodeSelf(d)
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3181 := &x.Spec
		yyv3181.CodecDecodeSelf(d)
	}
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3182 := &x.Status
		yyv3182.CodecDecodeSelf(d)
	}
	for {
		yyj3177++
		if yyhl3177 {
			yyb3177 = yyj3177 > l
		} else {
			yyb3177 = r.CheckBreak()
		}
		if yyb3177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3183 := z.EncBinary()
		_ = yym3183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3184 := !z.EncBinary()
			yy2arr3184 := z.EncBasicHandle().StructToArray
			var yyq3184 [4]bool
			_, _, _ = yysep3184, yyq3184, yy2arr3184
			const yyr3184 bool = false
			yyq3184[0] = x.Kind != ""
			yyq3184[1] = x.APIVersion != ""
			yyq3184[2] = true
			var yynn3184 int
			if yyr3184 || yy2arr3184 {
				r.EncodeArrayStart(4)
			} else {
				yynn3184 = 1
				for _, b := range yyq3184 {
					if b {
						yynn3184++
					}
				}
				r.EncodeMapStart(yynn3184)
				yynn3184 = 0
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3184[0] {
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3184[1] {
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3184[2] {
					yy3192 := &x.ListMeta
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3192) {
					} else {
						z.EncFallback(yy3192)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3194 := &x.ListMeta
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3194) {
					} else {
						z.EncFallback(yy3194)
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3184 || yy2arr3184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3199 := z.DecBinary()
	_ = yym3199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3200 := r.ContainerType()
		if yyct3200 == codecSelferValueTypeMap1234 {
			yyl3200 := r.ReadMapStart()
			if yyl3200 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3200, d)
			}
		} else if yyct3200 == codecSelferValueTypeArray1234 {
			yyl3200 := r.ReadArrayStart()
			if yyl3200 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3200, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3201Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3201Slc
	var yyhl3201 bool = l >= 0
	for yyj3201 := 0; ; yyj3201++ {
		if yyhl3201 {
			if yyj3201 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3201Slc = r.DecodeBytes(yys3201Slc, true, true)
		yys3201 := string(yys3201Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3201 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3204 := &x.ListMeta
				yym3205 := z.DecBinary()
				_ = yym3205
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3204) {
				} else {
					z.DecFallback(yyv3204, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3206 := &x.Items
				yym3207 := z.DecBinary()
				_ = yym3207
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3206), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3201)
		} // end switch yys3201
	} // end for yyj3201
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3208 int
	var yyb3208 bool
	var yyhl3208 bool = l >= 0
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3211 := &x.ListMeta
		yym3212 := z.DecBinary()
		_ = yym3212
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3211) {
		} else {
			z.DecFallback(yyv3211, false)
		}
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3213 := &x.Items
		yym3214 := z.DecBinary()
		_ = yym3214
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3213), d)
		}
	}
	for {
		yyj3208++
		if yyhl3208 {
			yyb3208 = yyj3208 > l
		} else {
			yyb3208 = r.CheckBreak()
		}
		if yyb3208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [4]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[0] = x.Kind != ""
			yyq3216[1] = x.APIVersion != ""
			yyq3216[2] = true
			var yynn3216 int
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(4)
			} else {
				yynn3216 = 1
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
				yynn3216 = 0
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[0] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[1] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[2] {
					yy3224 := &x.ObjectMeta
					yy3224.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3225 := &x.ObjectMeta
					yy3225.CodecEncodeSelf(e)
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3227 := &x.Target
				yy3227.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3228 := &x.Target
				yy3228.CodecEncodeSelf(e)
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3229 := z.DecBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3230 := r.ContainerType()
		if yyct3230 == codecSelferValueTypeMap1234 {
			yyl3230 := r.ReadMapStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3230, d)
			}
		} else if yyct3230 == codecSelferValueTypeArray1234 {
			yyl3230 := r.ReadArrayStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3231Slc
	var yyhl3231 bool = l >= 0
	for yyj3231 := 0; ; yyj3231++ {
		if yyhl3231 {
			if yyj3231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3231Slc = r.DecodeBytes(yys3231Slc, true, true)
		yys3231 := string(yys3231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3231 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3234 := &x.ObjectMeta
				yyv3234.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3235 := &x.Target
				yyv3235.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3231)
		} // end switch yys3231
	} // end for yyj3231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3236 int
	var yyb3236 bool
	var yyhl3236 bool = l >= 0
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3239 := &x.ObjectMeta
		yyv3239.CodecDecodeSelf(d)
	}
	yyj3236++
	if yyhl3236 {
		yyb3236 = yyj3236 > l
	} else {
		yyb3236 = r.CheckBreak()
	}
	if yyb3236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3240 := &x.Target
		yyv3240.CodecDecodeSelf(d)
	}
	for {
		yyj3236++
		if yyhl3236 {
			yyb3236 = yyj3236 > l
		} else {
			yyb3236 = r.CheckBreak()
		}
		if yyb3236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3241 := z.EncBinary()
		_ = yym3241
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3242 := !z.EncBinary()
			yy2arr3242 := z.EncBasicHandle().StructToArray
			var yyq3242 [1]bool
			_, _, _ = yysep3242, yyq3242, yy2arr3242
			const yyr3242 bool = false
			yyq3242[0] = x.UID != nil
			var yynn3242 int
			if yyr3242 || yy2arr3242 {
				r.EncodeArrayStart(1)
			} else {
				yynn3242 = 0
				for _, b := range yyq3242 {
					if b {
						yynn3242++
					}
				}
				r.EncodeMapStart(yynn3242)
				yynn3242 = 0
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3242[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3244 := *x.UID
						yym3245 := z.EncBinary()
						_ = yym3245
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3244) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3244))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3242[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3246 := *x.UID
						yym3247 := z.EncBinary()
						_ = yym3247
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3246) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3246))
						}
					}
				}
			}
			if yyr3242 || yy2arr3242 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3248 := z.DecBinary()
	_ = yym3248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3249 := r.ContainerType()
		if yyct3249 == codecSelferValueTypeMap1234 {
			yyl3249 := r.ReadMapStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3249, d)
			}
		} else if yyct3249 == codecSelferValueTypeArray1234 {
			yyl3249 := r.ReadArrayStart()
			if yyl3249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3250Slc
	var yyhl3250 bool = l >= 0
	for yyj3250 := 0; ; yyj3250++ {
		if yyhl3250 {
			if yyj3250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3250Slc = r.DecodeBytes(yys3250Slc, true, true)
		yys3250 := string(yys3250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3250 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3252 := z.DecBinary()
				_ = yym3252
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3250)
		} // end switch yys3250
	} // end for yyj3250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3253 int
	var yyb3253 bool
	var yyhl3253 bool = l >= 0
	yyj3253++
	if yyhl3253 {
		yyb3253 = yyj3253 > l
	} else {
		yyb3253 = r.CheckBreak()
	}
	if yyb3253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3255 := z.DecBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3253++
		if yyhl3253 {
			yyb3253 = yyj3253 > l
		} else {
			yyb3253 = r.CheckBreak()
		}
		if yyb3253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3256 := z.EncBinary()
		_ = yym3256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3257 := !z.EncBinary()
			yy2arr3257 := z.EncBasicHandle().StructToArray
			var yyq3257 [5]bool
			_, _, _ = yysep3257, yyq3257, yy2arr3257
			const yyr3257 bool = false
			yyq3257[0] = x.Kind != ""
			yyq3257[1] = x.APIVersion != ""
			yyq3257[2] = x.GracePeriodSeconds != nil
			yyq3257[3] = x.Preconditions != nil
			yyq3257[4] = x.OrphanDependents != nil
			var yynn3257 int
			if yyr3257 || yy2arr3257 {
				r.EncodeArrayStart(5)
			} else {
				yynn3257 = 0
				for _, b := range yyq3257 {
					if b {
						yynn3257++
					}
				}
				r.EncodeMapStart(yynn3257)
				yynn3257 = 0
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[0] {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3257[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[1] {
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3257[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3265 := *x.GracePeriodSeconds
						yym3266 := z.EncBinary()
						_ = yym3266
						if false {
						} else {
							r.EncodeInt(int64(yy3265))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3257[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3267 := *x.GracePeriodSeconds
						yym3268 := z.EncBinary()
						_ = yym3268
						if false {
						} else {
							r.EncodeInt(int64(yy3267))
						}
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3257[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3257[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3271 := *x.OrphanDependents
						yym3272 := z.EncBinary()
						_ = yym3272
						if false {
						} else {
							r.EncodeBool(bool(yy3271))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3257[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3273 := *x.OrphanDependents
						yym3274 := z.EncBinary()
						_ = yym3274
						if false {
						} else {
							r.EncodeBool(bool(yy3273))
						}
					}
				}
			}
			if yyr3257 || yy2arr3257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3275 := z.DecBinary()
	_ = yym3275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3276 := r.ContainerType()
		if yyct3276 == codecSelferValueTypeMap1234 {
			yyl3276 := r.ReadMapStart()
			if yyl3276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3276, d)
			}
		} else if yyct3276 == codecSelferValueTypeArray1234 {
			yyl3276 := r.ReadArrayStart()
			if yyl3276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3277Slc
	var yyhl3277 bool = l >= 0
	for yyj3277 := 0; ; yyj3277++ {
		if yyhl3277 {
			if yyj3277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3277Slc = r.DecodeBytes(yys3277Slc, true, true)
		yys3277 := string(yys3277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3281 := z.DecBinary()
				_ = yym3281
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3284 := z.DecBinary()
				_ = yym3284
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3277)
		} // end switch yys3277
	} // end for yyj3277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3285 int
	var yyb3285 bool
	var yyhl3285 bool = l >= 0
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3289 := z.DecBinary()
		_ = yym3289
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3285++
	if yyhl3285 {
		yyb3285 = yyj3285 > l
	} else {
		yyb3285 = r.CheckBreak()
	}
	if yyb3285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3292 := z.DecBinary()
		_ = yym3292
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3285++
		if yyhl3285 {
			yyb3285 = yyj3285 > l
		} else {
			yyb3285 = r.CheckBreak()
		}
		if yyb3285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3293 := z.EncBinary()
		_ = yym3293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3294 := !z.EncBinary()
			yy2arr3294 := z.EncBasicHandle().StructToArray
			var yyq3294 [4]bool
			_, _, _ = yysep3294, yyq3294, yy2arr3294
			const yyr3294 bool = false
			yyq3294[0] = x.Kind != ""
			yyq3294[1] = x.APIVersion != ""
			var yynn3294 int
			if yyr3294 || yy2arr3294 {
				r.EncodeArrayStart(4)
			} else {
				yynn3294 = 2
				for _, b := range yyq3294 {
					if b {
						yynn3294++
					}
				}
				r.EncodeMapStart(yynn3294)
				yynn3294 = 0
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3294[0] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3294[1] {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3302 := z.EncBinary()
				_ = yym3302
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3303 := z.EncBinary()
				_ = yym3303
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3305 := z.EncBinary()
				_ = yym3305
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3306 := z.EncBinary()
				_ = yym3306
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3307 := z.DecBinary()
	_ = yym3307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3308 := r.ContainerType()
		if yyct3308 == codecSelferValueTypeMap1234 {
			yyl3308 := r.ReadMapStart()
			if yyl3308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3308, d)
			}
		} else if yyct3308 == codecSelferValueTypeArray1234 {
			yyl3308 := r.ReadArrayStart()
			if yyl3308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3309Slc
	var yyhl3309 bool = l >= 0
	for yyj3309 := 0; ; yyj3309++ {
		if yyhl3309 {
			if yyj3309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3309Slc = r.DecodeBytes(yys3309Slc, true, true)
		yys3309 := string(yys3309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3309)
		} // end switch yys3309
	} // end for yyj3309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3314 int
	var yyb3314 bool
	var yyhl3314 bool = l >= 0
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3314++
		if yyhl3314 {
			yyb3314 = yyj3314 > l
		} else {
			yyb3314 = r.CheckBreak()
		}
		if yyb3314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3319 := z.EncBinary()
		_ = yym3319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3320 := !z.EncBinary()
			yy2arr3320 := z.EncBasicHandle().StructToArray
			var yyq3320 [7]bool
			_, _, _ = yysep3320, yyq3320, yy2arr3320
			const yyr3320 bool = false
			yyq3320[0] = x.Kind != ""
			yyq3320[1] = x.APIVersion != ""
			var yynn3320 int
			if yyr3320 || yy2arr3320 {
				r.EncodeArrayStart(7)
			} else {
				yynn3320 = 5
				for _, b := range yyq3320 {
					if b {
						yynn3320++
					}
				}
				r.EncodeMapStart(yynn3320)
				yynn3320 = 0
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[0] {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3320[1] {
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3334 := z.EncBinary()
				_ = yym3334
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3335 := z.EncBinary()
				_ = yym3335
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3337 := z.EncBinary()
				_ = yym3337
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3338 := z.EncBinary()
				_ = yym3338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3340 := *x.TimeoutSeconds
					yym3341 := z.EncBinary()
					_ = yym3341
					if false {
					} else {
						r.EncodeInt(int64(yy3340))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3342 := *x.TimeoutSeconds
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeInt(int64(yy3342))
					}
				}
			}
			if yyr3320 || yy2arr3320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3344 := z.DecBinary()
	_ = yym3344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3345 := r.ContainerType()
		if yyct3345 == codecSelferValueTypeMap1234 {
			yyl3345 := r.ReadMapStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3345, d)
			}
		} else if yyct3345 == codecSelferValueTypeArray1234 {
			yyl3345 := r.ReadArrayStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3346Slc
	var yyhl3346 bool = l >= 0
	for yyj3346 := 0; ; yyj3346++ {
		if yyhl3346 {
			if yyj3346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3346Slc = r.DecodeBytes(yys3346Slc, true, true)
		yys3346 := string(yys3346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3349 := &x.LabelSelector
				yym3350 := z.DecBinary()
				_ = yym3350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3349) {
				} else {
					z.DecFallback(yyv3349, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3351 := &x.FieldSelector
				yym3352 := z.DecBinary()
				_ = yym3352
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3351) {
				} else {
					z.DecFallback(yyv3351, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3356 := z.DecBinary()
				_ = yym3356
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3346)
		} // end switch yys3346
	} // end for yyj3346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3357 int
	var yyb3357 bool
	var yyhl3357 bool = l >= 0
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3360 := &x.LabelSelector
		yym3361 := z.DecBinary()
		_ = yym3361
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3360) {
		} else {
			z.DecFallback(yyv3360, true)
		}
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3362 := &x.FieldSelector
		yym3363 := z.DecBinary()
		_ = yym3363
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3362) {
		} else {
			z.DecFallback(yyv3362, true)
		}
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3367 := z.DecBinary()
		_ = yym3367
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3357++
		if yyhl3357 {
			yyb3357 = yyj3357 > l
		} else {
			yyb3357 = r.CheckBreak()
		}
		if yyb3357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3368 := z.EncBinary()
		_ = yym3368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3369 := !z.EncBinary()
			yy2arr3369 := z.EncBasicHandle().StructToArray
			var yyq3369 [10]bool
			_, _, _ = yysep3369, yyq3369, yy2arr3369
			const yyr3369 bool = false
			yyq3369[0] = x.Kind != ""
			yyq3369[1] = x.APIVersion != ""
			var yynn3369 int
			if yyr3369 || yy2arr3369 {
				r.EncodeArrayStart(10)
			} else {
				yynn3369 = 8
				for _, b := range yyq3369 {
					if b {
						yynn3369++
					}
				}
				r.EncodeMapStart(yynn3369)
				yynn3369 = 0
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3369[0] {
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3369[1] {
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3375 := z.EncBinary()
					_ = yym3375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3377 := z.EncBinary()
				_ = yym3377
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3378 := z.EncBinary()
				_ = yym3378
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3380 := z.EncBinary()
				_ = yym3380
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3381 := z.EncBinary()
				_ = yym3381
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3383 := z.EncBinary()
				_ = yym3383
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3384 := z.EncBinary()
				_ = yym3384
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3386 := *x.SinceSeconds
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeInt(int64(yy3386))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3388 := *x.SinceSeconds
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeInt(int64(yy3388))
					}
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3391 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3391 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3392 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3392 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3394 := z.EncBinary()
				_ = yym3394
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3395 := z.EncBinary()
				_ = yym3395
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3397 := *x.TailLines
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeInt(int64(yy3397))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3399 := *x.TailLines
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeInt(int64(yy3399))
					}
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3402 := *x.LimitBytes
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeInt(int64(yy3402))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3404 := *x.LimitBytes
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeInt(int64(yy3404))
					}
				}
			}
			if yyr3369 || yy2arr3369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3406 := z.DecBinary()
	_ = yym3406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3407 := r.ContainerType()
		if yyct3407 == codecSelferValueTypeMap1234 {
			yyl3407 := r.ReadMapStart()
			if yyl3407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3407, d)
			}
		} else if yyct3407 == codecSelferValueTypeArray1234 {
			yyl3407 := r.ReadArrayStart()
			if yyl3407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3408Slc
	var yyhl3408 bool = l >= 0
	for yyj3408 := 0; ; yyj3408++ {
		if yyhl3408 {
			if yyj3408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3408Slc = r.DecodeBytes(yys3408Slc, true, true)
		yys3408 := string(yys3408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3408 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3415 := z.DecBinary()
				_ = yym3415
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3417 := z.DecBinary()
				_ = yym3417
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3417 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3417 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3420 := z.DecBinary()
				_ = yym3420
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3422 := z.DecBinary()
				_ = yym3422
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3408)
		} // end switch yys3408
	} // end for yyj3408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3423 int
	var yyb3423 bool
	var yyhl3423 bool = l >= 0
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3430 := z.DecBinary()
		_ = yym3430
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3432 := z.DecBinary()
		_ = yym3432
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3432 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3432 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3435 := z.DecBinary()
		_ = yym3435
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3437 := z.DecBinary()
		_ = yym3437
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3423++
		if yyhl3423 {
			yyb3423 = yyj3423 > l
		} else {
			yyb3423 = r.CheckBreak()
		}
		if yyb3423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3438 := z.EncBinary()
		_ = yym3438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3439 := !z.EncBinary()
			yy2arr3439 := z.EncBasicHandle().StructToArray
			var yyq3439 [7]bool
			_, _, _ = yysep3439, yyq3439, yy2arr3439
			const yyr3439 bool = false
			yyq3439[0] = x.Kind != ""
			yyq3439[1] = x.APIVersion != ""
			yyq3439[2] = x.Stdin != false
			yyq3439[3] = x.Stdout != false
			yyq3439[4] = x.Stderr != false
			yyq3439[5] = x.TTY != false
			yyq3439[6] = x.Container != ""
			var yynn3439 int
			if yyr3439 || yy2arr3439 {
				r.EncodeArrayStart(7)
			} else {
				yynn3439 = 0
				for _, b := range yyq3439 {
					if b {
						yynn3439++
					}
				}
				r.EncodeMapStart(yynn3439)
				yynn3439 = 0
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[0] {
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[1] {
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[2] {
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3439[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[3] {
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3439[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[4] {
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3439[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[5] {
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3439[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3439[6] {
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3461 := z.DecBinary()
	_ = yym3461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3462 := r.ContainerType()
		if yyct3462 == codecSelferValueTypeMap1234 {
			yyl3462 := r.ReadMapStart()
			if yyl3462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3462, d)
			}
		} else if yyct3462 == codecSelferValueTypeArray1234 {
			yyl3462 := r.ReadArrayStart()
			if yyl3462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3463Slc
	var yyhl3463 bool = l >= 0
	for yyj3463 := 0; ; yyj3463++ {
		if yyhl3463 {
			if yyj3463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3463Slc = r.DecodeBytes(yys3463Slc, true, true)
		yys3463 := string(yys3463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3463 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3463)
		} // end switch yys3463
	} // end for yyj3463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3471 int
	var yyb3471 bool
	var yyhl3471 bool = l >= 0
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3471++
	if yyhl3471 {
		yyb3471 = yyj3471 > l
	} else {
		yyb3471 = r.CheckBreak()
	}
	if yyb3471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3471++
		if yyhl3471 {
			yyb3471 = yyj3471 > l
		} else {
			yyb3471 = r.CheckBreak()
		}
		if yyb3471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3479 := z.EncBinary()
		_ = yym3479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3480 := !z.EncBinary()
			yy2arr3480 := z.EncBasicHandle().StructToArray
			var yyq3480 [8]bool
			_, _, _ = yysep3480, yyq3480, yy2arr3480
			const yyr3480 bool = false
			yyq3480[0] = x.Kind != ""
			yyq3480[1] = x.APIVersion != ""
			var yynn3480 int
			if yyr3480 || yy2arr3480 {
				r.EncodeArrayStart(8)
			} else {
				yynn3480 = 6
				for _, b := range yyq3480 {
					if b {
						yynn3480++
					}
				}
				r.EncodeMapStart(yynn3480)
				yynn3480 = 0
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3480[0] {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3480[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3480[1] {
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3480[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3488 := z.EncBinary()
				_ = yym3488
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3489 := z.EncBinary()
				_ = yym3489
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3491 := z.EncBinary()
				_ = yym3491
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3492 := z.EncBinary()
				_ = yym3492
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3494 := z.EncBinary()
				_ = yym3494
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3495 := z.EncBinary()
				_ = yym3495
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3497 := z.EncBinary()
				_ = yym3497
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3498 := z.EncBinary()
				_ = yym3498
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3500 := z.EncBinary()
				_ = yym3500
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3501 := z.EncBinary()
				_ = yym3501
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3504 := z.EncBinary()
					_ = yym3504
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3480 || yy2arr3480 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3505 := z.DecBinary()
	_ = yym3505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3506 := r.ContainerType()
		if yyct3506 == codecSelferValueTypeMap1234 {
			yyl3506 := r.ReadMapStart()
			if yyl3506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3506, d)
			}
		} else if yyct3506 == codecSelferValueTypeArray1234 {
			yyl3506 := r.ReadArrayStart()
			if yyl3506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3507Slc
	var yyhl3507 bool = l >= 0
	for yyj3507 := 0; ; yyj3507++ {
		if yyhl3507 {
			if yyj3507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3507Slc = r.DecodeBytes(yys3507Slc, true, true)
		yys3507 := string(yys3507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3507 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3515 := &x.Command
				yym3516 := z.DecBinary()
				_ = yym3516
				if false {
				} else {
					z.F.DecSliceStringX(yyv3515, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3507)
		} // end switch yys3507
	} // end for yyj3507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3517 int
	var yyb3517 bool
	var yyhl3517 bool = l >= 0
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3525 := &x.Command
		yym3526 := z.DecBinary()
		_ = yym3526
		if false {
		} else {
			z.F.DecSliceStringX(yyv3525, false, d)
		}
	}
	for {
		yyj3517++
		if yyhl3517 {
			yyb3517 = yyj3517 > l
		} else {
			yyb3517 = r.CheckBreak()
		}
		if yyb3517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3527 := z.EncBinary()
		_ = yym3527
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3528 := !z.EncBinary()
			yy2arr3528 := z.EncBasicHandle().StructToArray
			var yyq3528 [3]bool
			_, _, _ = yysep3528, yyq3528, yy2arr3528
			const yyr3528 bool = false
			yyq3528[0] = x.Kind != ""
			yyq3528[1] = x.APIVersion != ""
			var yynn3528 int
			if yyr3528 || yy2arr3528 {
				r.EncodeArrayStart(3)
			} else {
				yynn3528 = 1
				for _, b := range yyq3528 {
					if b {
						yynn3528++
					}
				}
				r.EncodeMapStart(yynn3528)
				yynn3528 = 0
			}
			if yyr3528 || yy2arr3528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3528[0] {
					yym3530 := z.EncBinary()
					_ = yym3530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3528[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3531 := z.EncBinary()
					_ = yym3531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3528 || yy2arr3528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3528[1] {
					yym3533 := z.EncBinary()
					_ = yym3533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3528[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3534 := z.EncBinary()
					_ = yym3534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3528 || yy2arr3528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3536 := z.EncBinary()
				_ = yym3536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3537 := z.EncBinary()
				_ = yym3537
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3528 || yy2arr3528 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3538 := z.DecBinary()
	_ = yym3538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3539 := r.ContainerType()
		if yyct3539 == codecSelferValueTypeMap1234 {
			yyl3539 := r.ReadMapStart()
			if yyl3539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3539, d)
			}
		} else if yyct3539 == codecSelferValueTypeArray1234 {
			yyl3539 := r.ReadArrayStart()
			if yyl3539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3540Slc
	var yyhl3540 bool = l >= 0
	for yyj3540 := 0; ; yyj3540++ {
		if yyhl3540 {
			if yyj3540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3540Slc = r.DecodeBytes(yys3540Slc, true, true)
		yys3540 := string(yys3540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3540 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3540)
		} // end switch yys3540
	} // end for yyj3540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3544 int
	var yyb3544 bool
	var yyhl3544 bool = l >= 0
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3544++
	if yyhl3544 {
		yyb3544 = yyj3544 > l
	} else {
		yyb3544 = r.CheckBreak()
	}
	if yyb3544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3544++
		if yyhl3544 {
			yyb3544 = yyj3544 > l
		} else {
			yyb3544 = r.CheckBreak()
		}
		if yyb3544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3548 := z.EncBinary()
		_ = yym3548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3549 := !z.EncBinary()
			yy2arr3549 := z.EncBasicHandle().StructToArray
			var yyq3549 [3]bool
			_, _, _ = yysep3549, yyq3549, yy2arr3549
			const yyr3549 bool = false
			yyq3549[0] = x.Kind != ""
			yyq3549[1] = x.APIVersion != ""
			var yynn3549 int
			if yyr3549 || yy2arr3549 {
				r.EncodeArrayStart(3)
			} else {
				yynn3549 = 1
				for _, b := range yyq3549 {
					if b {
						yynn3549++
					}
				}
				r.EncodeMapStart(yynn3549)
				yynn3549 = 0
			}
			if yyr3549 || yy2arr3549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3549[0] {
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3549 || yy2arr3549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3549[1] {
					yym3554 := z.EncBinary()
					_ = yym3554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3549 || yy2arr3549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3557 := z.EncBinary()
				_ = yym3557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3558 := z.EncBinary()
				_ = yym3558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3549 || yy2arr3549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3559 := z.DecBinary()
	_ = yym3559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3560 := r.ContainerType()
		if yyct3560 == codecSelferValueTypeMap1234 {
			yyl3560 := r.ReadMapStart()
			if yyl3560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3560, d)
			}
		} else if yyct3560 == codecSelferValueTypeArray1234 {
			yyl3560 := r.ReadArrayStart()
			if yyl3560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3561Slc
	var yyhl3561 bool = l >= 0
	for yyj3561 := 0; ; yyj3561++ {
		if yyhl3561 {
			if yyj3561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3561Slc = r.DecodeBytes(yys3561Slc, true, true)
		yys3561 := string(yys3561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3561 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3561)
		} // end switch yys3561
	} // end for yyj3561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3565 int
	var yyb3565 bool
	var yyhl3565 bool = l >= 0
	yyj3565++
	if yyhl3565 {
		yyb3565 = yyj3565 > l
	} else {
		yyb3565 = r.CheckBreak()
	}
	if yyb3565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3565++
	if yyhl3565 {
		yyb3565 = yyj3565 > l
	} else {
		yyb3565 = r.CheckBreak()
	}
	if yyb3565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3565++
	if yyhl3565 {
		yyb3565 = yyj3565 > l
	} else {
		yyb3565 = r.CheckBreak()
	}
	if yyb3565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3565++
		if yyhl3565 {
			yyb3565 = yyj3565 > l
		} else {
			yyb3565 = r.CheckBreak()
		}
		if yyb3565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3569 := z.EncBinary()
		_ = yym3569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3570 := !z.EncBinary()
			yy2arr3570 := z.EncBasicHandle().StructToArray
			var yyq3570 [3]bool
			_, _, _ = yysep3570, yyq3570, yy2arr3570
			const yyr3570 bool = false
			yyq3570[0] = x.Kind != ""
			yyq3570[1] = x.APIVersion != ""
			var yynn3570 int
			if yyr3570 || yy2arr3570 {
				r.EncodeArrayStart(3)
			} else {
				yynn3570 = 1
				for _, b := range yyq3570 {
					if b {
						yynn3570++
					}
				}
				r.EncodeMapStart(yynn3570)
				yynn3570 = 0
			}
			if yyr3570 || yy2arr3570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3570[0] {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3570 || yy2arr3570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3570[1] {
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3570 || yy2arr3570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3578 := z.EncBinary()
				_ = yym3578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3579 := z.EncBinary()
				_ = yym3579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3570 || yy2arr3570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3580 := z.DecBinary()
	_ = yym3580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3581 := r.ContainerType()
		if yyct3581 == codecSelferValueTypeMap1234 {
			yyl3581 := r.ReadMapStart()
			if yyl3581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3581, d)
			}
		} else if yyct3581 == codecSelferValueTypeArray1234 {
			yyl3581 := r.ReadArrayStart()
			if yyl3581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3582Slc
	var yyhl3582 bool = l >= 0
	for yyj3582 := 0; ; yyj3582++ {
		if yyhl3582 {
			if yyj3582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3582Slc = r.DecodeBytes(yys3582Slc, true, true)
		yys3582 := string(yys3582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3582 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3582)
		} // end switch yys3582
	} // end for yyj3582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3586 int
	var yyb3586 bool
	var yyhl3586 bool = l >= 0
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3586++
	if yyhl3586 {
		yyb3586 = yyj3586 > l
	} else {
		yyb3586 = r.CheckBreak()
	}
	if yyb3586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3586++
		if yyhl3586 {
			yyb3586 = yyj3586 > l
		} else {
			yyb3586 = r.CheckBreak()
		}
		if yyb3586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3590 := z.EncBinary()
		_ = yym3590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3591 := !z.EncBinary()
			yy2arr3591 := z.EncBasicHandle().StructToArray
			var yyq3591 [5]bool
			_, _, _ = yysep3591, yyq3591, yy2arr3591
			const yyr3591 bool = false
			yyq3591[4] = x.Controller != nil
			var yynn3591 int
			if yyr3591 || yy2arr3591 {
				r.EncodeArrayStart(5)
			} else {
				yynn3591 = 4
				for _, b := range yyq3591 {
					if b {
						yynn3591++
					}
				}
				r.EncodeMapStart(yynn3591)
				yynn3591 = 0
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3593 := z.EncBinary()
				_ = yym3593
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3594 := z.EncBinary()
				_ = yym3594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3596 := z.EncBinary()
				_ = yym3596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3597 := z.EncBinary()
				_ = yym3597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3600 := z.EncBinary()
				_ = yym3600
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3602 := z.EncBinary()
				_ = yym3602
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3603 := z.EncBinary()
				_ = yym3603
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3591[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3605 := *x.Controller
						yym3606 := z.EncBinary()
						_ = yym3606
						if false {
						} else {
							r.EncodeBool(bool(yy3605))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3591[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3607 := *x.Controller
						yym3608 := z.EncBinary()
						_ = yym3608
						if false {
						} else {
							r.EncodeBool(bool(yy3607))
						}
					}
				}
			}
			if yyr3591 || yy2arr3591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3609 := z.DecBinary()
	_ = yym3609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3610 := r.ContainerType()
		if yyct3610 == codecSelferValueTypeMap1234 {
			yyl3610 := r.ReadMapStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3610, d)
			}
		} else if yyct3610 == codecSelferValueTypeArray1234 {
			yyl3610 := r.ReadArrayStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3611Slc
	var yyhl3611 bool = l >= 0
	for yyj3611 := 0; ; yyj3611++ {
		if yyhl3611 {
			if yyj3611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3611Slc = r.DecodeBytes(yys3611Slc, true, true)
		yys3611 := string(yys3611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3611 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3617 := z.DecBinary()
				_ = yym3617
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3611)
		} // end switch yys3611
	} // end for yyj3611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3618 int
	var yyb3618 bool
	var yyhl3618 bool = l >= 0
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3624 := z.DecBinary()
		_ = yym3624
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3618++
		if yyhl3618 {
			yyb3618 = yyj3618 > l
		} else {
			yyb3618 = r.CheckBreak()
		}
		if yyb3618 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3618-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3625 := z.EncBinary()
		_ = yym3625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3626 := !z.EncBinary()
			yy2arr3626 := z.EncBasicHandle().StructToArray
			var yyq3626 [7]bool
			_, _, _ = yysep3626, yyq3626, yy2arr3626
			const yyr3626 bool = false
			yyq3626[0] = x.Kind != ""
			yyq3626[1] = x.Namespace != ""
			yyq3626[2] = x.Name != ""
			yyq3626[3] = x.UID != ""
			yyq3626[4] = x.APIVersion != ""
			yyq3626[5] = x.ResourceVersion != ""
			yyq3626[6] = x.FieldPath != ""
			var yynn3626 int
			if yyr3626 || yy2arr3626 {
				r.EncodeArrayStart(7)
			} else {
				yynn3626 = 0
				for _, b := range yyq3626 {
					if b {
						yynn3626++
					}
				}
				r.EncodeMapStart(yynn3626)
				yynn3626 = 0
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[0] {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[1] {
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[2] {
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[3] {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[4] {
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[5] {
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3626[6] {
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3626[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3626 || yy2arr3626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3648 := z.DecBinary()
	_ = yym3648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3649 := r.ContainerType()
		if yyct3649 == codecSelferValueTypeMap1234 {
			yyl3649 := r.ReadMapStart()
			if yyl3649 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3649, d)
			}
		} else if yyct3649 == codecSelferValueTypeArray1234 {
			yyl3649 := r.ReadArrayStart()
			if yyl3649 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3650Slc
	var yyhl3650 bool = l >= 0
	for yyj3650 := 0; ; yyj3650++ {
		if yyhl3650 {
			if yyj3650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3650Slc = r.DecodeBytes(yys3650Slc, true, true)
		yys3650 := string(yys3650Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3650 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3650)
		} // end switch yys3650
	} // end for yyj3650
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3658 int
	var yyb3658 bool
	var yyhl3658 bool = l >= 0
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3658++
	if yyhl3658 {
		yyb3658 = yyj3658 > l
	} else {
		yyb3658 = r.CheckBreak()
	}
	if yyb3658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3658++
		if yyhl3658 {
			yyb3658 = yyj3658 > l
		} else {
			yyb3658 = r.CheckBreak()
		}
		if yyb3658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3666 := z.EncBinary()
		_ = yym3666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3667 := !z.EncBinary()
			yy2arr3667 := z.EncBasicHandle().StructToArray
			var yyq3667 [1]bool
			_, _, _ = yysep3667, yyq3667, yy2arr3667
			const yyr3667 bool = false
			var yynn3667 int
			if yyr3667 || yy2arr3667 {
				r.EncodeArrayStart(1)
			} else {
				yynn3667 = 1
				for _, b := range yyq3667 {
					if b {
						yynn3667++
					}
				}
				r.EncodeMapStart(yynn3667)
				yynn3667 = 0
			}
			if yyr3667 || yy2arr3667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3669 := z.EncBinary()
				_ = yym3669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3670 := z.EncBinary()
				_ = yym3670
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3667 || yy2arr3667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3671 := z.DecBinary()
	_ = yym3671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3672 := r.ContainerType()
		if yyct3672 == codecSelferValueTypeMap1234 {
			yyl3672 := r.ReadMapStart()
			if yyl3672 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3672, d)
			}
		} else if yyct3672 == codecSelferValueTypeArray1234 {
			yyl3672 := r.ReadArrayStart()
			if yyl3672 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3673Slc
	var yyhl3673 bool = l >= 0
	for yyj3673 := 0; ; yyj3673++ {
		if yyhl3673 {
			if yyj3673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3673Slc = r.DecodeBytes(yys3673Slc, true, true)
		yys3673 := string(yys3673Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3673 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3673)
		} // end switch yys3673
	} // end for yyj3673
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3675 int
	var yyb3675 bool
	var yyhl3675 bool = l >= 0
	yyj3675++
	if yyhl3675 {
		yyb3675 = yyj3675 > l
	} else {
		yyb3675 = r.CheckBreak()
	}
	if yyb3675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3675++
		if yyhl3675 {
			yyb3675 = yyj3675 > l
		} else {
			yyb3675 = r.CheckBreak()
		}
		if yyb3675 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3675-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3677 := z.EncBinary()
		_ = yym3677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3678 := !z.EncBinary()
			yy2arr3678 := z.EncBasicHandle().StructToArray
			var yyq3678 [3]bool
			_, _, _ = yysep3678, yyq3678, yy2arr3678
			const yyr3678 bool = false
			yyq3678[0] = x.Kind != ""
			yyq3678[1] = x.APIVersion != ""
			yyq3678[2] = true
			var yynn3678 int
			if yyr3678 || yy2arr3678 {
				r.EncodeArrayStart(3)
			} else {
				yynn3678 = 0
				for _, b := range yyq3678 {
					if b {
						yynn3678++
					}
				}
				r.EncodeMapStart(yynn3678)
				yynn3678 = 0
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3678[0] {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3678[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3678[1] {
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3678[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3678[2] {
					yy3686 := &x.Reference
					yy3686.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3678[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3687 := &x.Reference
					yy3687.CodecEncodeSelf(e)
				}
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3688 := z.DecBinary()
	_ = yym3688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3689 := r.ContainerType()
		if yyct3689 == codecSelferValueTypeMap1234 {
			yyl3689 := r.ReadMapStart()
			if yyl3689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3689, d)
			}
		} else if yyct3689 == codecSelferValueTypeArray1234 {
			yyl3689 := r.ReadArrayStart()
			if yyl3689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3690Slc
	var yyhl3690 bool = l >= 0
	for yyj3690 := 0; ; yyj3690++ {
		if yyhl3690 {
			if yyj3690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3690Slc = r.DecodeBytes(yys3690Slc, true, true)
		yys3690 := string(yys3690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3690 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3693 := &x.Reference
				yyv3693.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3690)
		} // end switch yys3690
	} // end for yyj3690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3694 int
	var yyb3694 bool
	var yyhl3694 bool = l >= 0
	yyj3694++
	if yyhl3694 {
		yyb3694 = yyj3694 > l
	} else {
		yyb3694 = r.CheckBreak()
	}
	if yyb3694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3694++
	if yyhl3694 {
		yyb3694 = yyj3694 > l
	} else {
		yyb3694 = r.CheckBreak()
	}
	if yyb3694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3694++
	if yyhl3694 {
		yyb3694 = yyj3694 > l
	} else {
		yyb3694 = r.CheckBreak()
	}
	if yyb3694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3697 := &x.Reference
		yyv3697.CodecDecodeSelf(d)
	}
	for {
		yyj3694++
		if yyhl3694 {
			yyb3694 = yyj3694 > l
		} else {
			yyb3694 = r.CheckBreak()
		}
		if yyb3694 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3694-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3698 := z.EncBinary()
		_ = yym3698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3699 := !z.EncBinary()
			yy2arr3699 := z.EncBasicHandle().StructToArray
			var yyq3699 [2]bool
			_, _, _ = yysep3699, yyq3699, yy2arr3699
			const yyr3699 bool = false
			yyq3699[0] = x.Component != ""
			yyq3699[1] = x.Host != ""
			var yynn3699 int
			if yyr3699 || yy2arr3699 {
				r.EncodeArrayStart(2)
			} else {
				yynn3699 = 0
				for _, b := range yyq3699 {
					if b {
						yynn3699++
					}
				}
				r.EncodeMapStart(yynn3699)
				yynn3699 = 0
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3699[0] {
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3699[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3702 := z.EncBinary()
					_ = yym3702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3699[1] {
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3706 := z.DecBinary()
	_ = yym3706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3707 := r.ContainerType()
		if yyct3707 == codecSelferValueTypeMap1234 {
			yyl3707 := r.ReadMapStart()
			if yyl3707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3707, d)
			}
		} else if yyct3707 == codecSelferValueTypeArray1234 {
			yyl3707 := r.ReadArrayStart()
			if yyl3707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3708Slc
	var yyhl3708 bool = l >= 0
	for yyj3708 := 0; ; yyj3708++ {
		if yyhl3708 {
			if yyj3708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3708Slc = r.DecodeBytes(yys3708Slc, true, true)
		yys3708 := string(yys3708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3708 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3708)
		} // end switch yys3708
	} // end for yyj3708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3711 int
	var yyb3711 bool
	var yyhl3711 bool = l >= 0
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3711++
		if yyhl3711 {
			yyb3711 = yyj3711 > l
		} else {
			yyb3711 = r.CheckBreak()
		}
		if yyb3711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3714 := z.EncBinary()
		_ = yym3714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3715 := !z.EncBinary()
			yy2arr3715 := z.EncBasicHandle().StructToArray
			var yyq3715 [11]bool
			_, _, _ = yysep3715, yyq3715, yy2arr3715
			const yyr3715 bool = false
			yyq3715[0] = x.Kind != ""
			yyq3715[1] = x.APIVersion != ""
			yyq3715[2] = true
			yyq3715[3] = true
			yyq3715[4] = x.Reason != ""
			yyq3715[5] = x.Message != ""
			yyq3715[6] = true
			yyq3715[7] = true
			yyq3715[8] = true
			yyq3715[9] = x.Count != 0
			yyq3715[10] = x.Type != ""
			var yynn3715 int
			if yyr3715 || yy2arr3715 {
				r.EncodeArrayStart(11)
			} else {
				yynn3715 = 0
				for _, b := range yyq3715 {
					if b {
						yynn3715++
					}
				}
				r.EncodeMapStart(yynn3715)
				yynn3715 = 0
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[0] {
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3715[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3718 := z.EncBinary()
					_ = yym3718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[1] {
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3715[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[2] {
					yy3723 := &x.ObjectMeta
					yy3723.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3715[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3724 := &x.ObjectMeta
					yy3724.CodecEncodeSelf(e)
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[3] {
					yy3726 := &x.InvolvedObject
					yy3726.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3715[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3727 := &x.InvolvedObject
					yy3727.CodecEncodeSelf(e)
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[4] {
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3715[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[5] {
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3715[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[6] {
					yy3735 := &x.Source
					yy3735.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3715[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3736 := &x.Source
					yy3736.CodecEncodeSelf(e)
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[7] {
					yy3738 := &x.FirstTimestamp
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3738) {
					} else if yym3739 {
						z.EncBinaryMarshal(yy3738)
					} else if !yym3739 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3738)
					} else {
						z.EncFallback(yy3738)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3715[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3740 := &x.FirstTimestamp
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3740) {
					} else if yym3741 {
						z.EncBinaryMarshal(yy3740)
					} else if !yym3741 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3740)
					} else {
						z.EncFallback(yy3740)
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[8] {
					yy3743 := &x.LastTimestamp
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3743) {
					} else if yym3744 {
						z.EncBinaryMarshal(yy3743)
					} else if !yym3744 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3743)
					} else {
						z.EncFallback(yy3743)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3715[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3745 := &x.LastTimestamp
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3745) {
					} else if yym3746 {
						z.EncBinaryMarshal(yy3745)
					} else if !yym3746 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3745)
					} else {
						z.EncFallback(yy3745)
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[9] {
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3715[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3715[10] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3715[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3715 || yy2arr3715 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3753 := z.DecBinary()
	_ = yym3753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3754 := r.ContainerType()
		if yyct3754 == codecSelferValueTypeMap1234 {
			yyl3754 := r.ReadMapStart()
			if yyl3754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3754, d)
			}
		} else if yyct3754 == codecSelferValueTypeArray1234 {
			yyl3754 := r.ReadArrayStart()
			if yyl3754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3755Slc
	var yyhl3755 bool = l >= 0
	for yyj3755 := 0; ; yyj3755++ {
		if yyhl3755 {
			if yyj3755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3755Slc = r.DecodeBytes(yys3755Slc, true, true)
		yys3755 := string(yys3755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3755 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3758 := &x.ObjectMeta
				yyv3758.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3759 := &x.InvolvedObject
				yyv3759.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3762 := &x.Source
				yyv3762.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3763 := &x.FirstTimestamp
				yym3764 := z.DecBinary()
				_ = yym3764
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3763) {
				} else if yym3764 {
					z.DecBinaryUnmarshal(yyv3763)
				} else if !yym3764 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3763)
				} else {
					z.DecFallback(yyv3763, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3765 := &x.LastTimestamp
				yym3766 := z.DecBinary()
				_ = yym3766
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3765) {
				} else if yym3766 {
					z.DecBinaryUnmarshal(yyv3765)
				} else if !yym3766 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3765)
				} else {
					z.DecFallback(yyv3765, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3755)
		} // end switch yys3755
	} // end for yyj3755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3769 int
	var yyb3769 bool
	var yyhl3769 bool = l >= 0
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3772 := &x.ObjectMeta
		yyv3772.CodecDecodeSelf(d)
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3773 := &x.InvolvedObject
		yyv3773.CodecDecodeSelf(d)
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3776 := &x.Source
		yyv3776.CodecDecodeSelf(d)
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3777 := &x.FirstTimestamp
		yym3778 := z.DecBinary()
		_ = yym3778
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3777) {
		} else if yym3778 {
			z.DecBinaryUnmarshal(yyv3777)
		} else if !yym3778 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3777)
		} else {
			z.DecFallback(yyv3777, false)
		}
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3779 := &x.LastTimestamp
		yym3780 := z.DecBinary()
		_ = yym3780
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3779) {
		} else if yym3780 {
			z.DecBinaryUnmarshal(yyv3779)
		} else if !yym3780 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3779)
		} else {
			z.DecFallback(yyv3779, false)
		}
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3769++
	if yyhl3769 {
		yyb3769 = yyj3769 > l
	} else {
		yyb3769 = r.CheckBreak()
	}
	if yyb3769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3769++
		if yyhl3769 {
			yyb3769 = yyj3769 > l
		} else {
			yyb3769 = r.CheckBreak()
		}
		if yyb3769 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3769-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3783 := z.EncBinary()
		_ = yym3783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3784 := !z.EncBinary()
			yy2arr3784 := z.EncBasicHandle().StructToArray
			var yyq3784 [4]bool
			_, _, _ = yysep3784, yyq3784, yy2arr3784
			const yyr3784 bool = false
			yyq3784[0] = x.Kind != ""
			yyq3784[1] = x.APIVersion != ""
			yyq3784[2] = true
			var yynn3784 int
			if yyr3784 || yy2arr3784 {
				r.EncodeArrayStart(4)
			} else {
				yynn3784 = 1
				for _, b := range yyq3784 {
					if b {
						yynn3784++
					}
				}
				r.EncodeMapStart(yynn3784)
				yynn3784 = 0
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3784[0] {
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3784[1] {
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3784[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3784[2] {
					yy3792 := &x.ListMeta
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3792) {
					} else {
						z.EncFallback(yy3792)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3794 := &x.ListMeta
					yym3795 := z.EncBinary()
					_ = yym3795
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3794) {
					} else {
						z.EncFallback(yy3794)
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3798 := z.EncBinary()
					_ = yym3798
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3799 := z.DecBinary()
	_ = yym3799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3800 := r.ContainerType()
		if yyct3800 == codecSelferValueTypeMap1234 {
			yyl3800 := r.ReadMapStart()
			if yyl3800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3800, d)
			}
		} else if yyct3800 == codecSelferValueTypeArray1234 {
			yyl3800 := r.ReadArrayStart()
			if yyl3800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3801Slc
	var yyhl3801 bool = l >= 0
	for yyj3801 := 0; ; yyj3801++ {
		if yyhl3801 {
			if yyj3801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3801Slc = r.DecodeBytes(yys3801Slc, true, true)
		yys3801 := string(yys3801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3801 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3804 := &x.ListMeta
				yym3805 := z.DecBinary()
				_ = yym3805
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3804) {
				} else {
					z.DecFallback(yyv3804, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3806 := &x.Items
				yym3807 := z.DecBinary()
				_ = yym3807
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3806), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3801)
		} // end switch yys3801
	} // end for yyj3801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3808 int
	var yyb3808 bool
	var yyhl3808 bool = l >= 0
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3811 := &x.ListMeta
		yym3812 := z.DecBinary()
		_ = yym3812
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3811) {
		} else {
			z.DecFallback(yyv3811, false)
		}
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3813 := &x.Items
		yym3814 := z.DecBinary()
		_ = yym3814
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3813), d)
		}
	}
	for {
		yyj3808++
		if yyhl3808 {
			yyb3808 = yyj3808 > l
		} else {
			yyb3808 = r.CheckBreak()
		}
		if yyb3808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3815 := z.EncBinary()
		_ = yym3815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3816 := !z.EncBinary()
			yy2arr3816 := z.EncBasicHandle().StructToArray
			var yyq3816 [4]bool
			_, _, _ = yysep3816, yyq3816, yy2arr3816
			const yyr3816 bool = false
			yyq3816[0] = x.Kind != ""
			yyq3816[1] = x.APIVersion != ""
			yyq3816[2] = true
			var yynn3816 int
			if yyr3816 || yy2arr3816 {
				r.EncodeArrayStart(4)
			} else {
				yynn3816 = 1
				for _, b := range yyq3816 {
					if b {
						yynn3816++
					}
				}
				r.EncodeMapStart(yynn3816)
				yynn3816 = 0
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3816[0] {
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3816[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3816[1] {
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3816[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3816[2] {
					yy3824 := &x.ListMeta
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3824) {
					} else {
						z.EncFallback(yy3824)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3816[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3826 := &x.ListMeta
					yym3827 := z.EncBinary()
					_ = yym3827
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3826) {
					} else {
						z.EncFallback(yy3826)
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3831 := z.DecBinary()
	_ = yym3831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3832 := r.ContainerType()
		if yyct3832 == codecSelferValueTypeMap1234 {
			yyl3832 := r.ReadMapStart()
			if yyl3832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3832, d)
			}
		} else if yyct3832 == codecSelferValueTypeArray1234 {
			yyl3832 := r.ReadArrayStart()
			if yyl3832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3833Slc
	var yyhl3833 bool = l >= 0
	for yyj3833 := 0; ; yyj3833++ {
		if yyhl3833 {
			if yyj3833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3833Slc = r.DecodeBytes(yys3833Slc, true, true)
		yys3833 := string(yys3833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3833 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3836 := &x.ListMeta
				yym3837 := z.DecBinary()
				_ = yym3837
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3836) {
				} else {
					z.DecFallback(yyv3836, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3838 := &x.Items
				yym3839 := z.DecBinary()
				_ = yym3839
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3838), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3833)
		} // end switch yys3833
	} // end for yyj3833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3840 int
	var yyb3840 bool
	var yyhl3840 bool = l >= 0
	yyj3840++
	if yyhl3840 {
		yyb3840 = yyj3840 > l
	} else {
		yyb3840 = r.CheckBreak()
	}
	if yyb3840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3840++
	if yyhl3840 {
		yyb3840 = yyj3840 > l
	} else {
		yyb3840 = r.CheckBreak()
	}
	if yyb3840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3840++
	if yyhl3840 {
		yyb3840 = yyj3840 > l
	} else {
		yyb3840 = r.CheckBreak()
	}
	if yyb3840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3843 := &x.ListMeta
		yym3844 := z.DecBinary()
		_ = yym3844
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3843) {
		} else {
			z.DecFallback(yyv3843, false)
		}
	}
	yyj3840++
	if yyhl3840 {
		yyb3840 = yyj3840 > l
	} else {
		yyb3840 = r.CheckBreak()
	}
	if yyb3840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3845 := &x.Items
		yym3846 := z.DecBinary()
		_ = yym3846
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3845), d)
		}
	}
	for {
		yyj3840++
		if yyhl3840 {
			yyb3840 = yyj3840 > l
		} else {
			yyb3840 = r.CheckBreak()
		}
		if yyb3840 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3840-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3847 := z.EncBinary()
	_ = yym3847
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3848 := z.DecBinary()
	_ = yym3848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3849 := z.EncBinary()
		_ = yym3849
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3850 := !z.EncBinary()
			yy2arr3850 := z.EncBasicHandle().StructToArray
			var yyq3850 [6]bool
			_, _, _ = yysep3850, yyq3850, yy2arr3850
			const yyr3850 bool = false
			yyq3850[0] = x.Type != ""
			yyq3850[1] = len(x.Max) != 0
			yyq3850[2] = len(x.Min) != 0
			yyq3850[3] = len(x.Default) != 0
			yyq3850[4] = len(x.DefaultRequest) != 0
			yyq3850[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3850 int
			if yyr3850 || yy2arr3850 {
				r.EncodeArrayStart(6)
			} else {
				yynn3850 = 0
				for _, b := range yyq3850 {
					if b {
						yynn3850++
					}
				}
				r.EncodeMapStart(yynn3850)
				yynn3850 = 0
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3850[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3850[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3850[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3850[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3850[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3850[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3850[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3850[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3850[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3850[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3850[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3850[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3850 || yy2arr3850 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3857 := z.DecBinary()
	_ = yym3857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3858 := r.ContainerType()
		if yyct3858 == codecSelferValueTypeMap1234 {
			yyl3858 := r.ReadMapStart()
			if yyl3858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3858, d)
			}
		} else if yyct3858 == codecSelferValueTypeArray1234 {
			yyl3858 := r.ReadArrayStart()
			if yyl3858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3859Slc
	var yyhl3859 bool = l >= 0
	for yyj3859 := 0; ; yyj3859++ {
		if yyhl3859 {
			if yyj3859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3859Slc = r.DecodeBytes(yys3859Slc, true, true)
		yys3859 := string(yys3859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3859 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3861 := &x.Max
				yyv3861.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3862 := &x.Min
				yyv3862.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3863 := &x.Default
				yyv3863.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3864 := &x.DefaultRequest
				yyv3864.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3865 := &x.MaxLimitRequestRatio
				yyv3865.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3859)
		} // end switch yys3859
	} // end for yyj3859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3866 int
	var yyb3866 bool
	var yyhl3866 bool = l >= 0
	yyj3866++
	if yyhl3866 {
		yyb3866 = yyj3866 > l
	} else {
		yyb3866 = r.CheckBreak()
	}
	if yyb3866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3866++
	if yyhl3866 {
		yyb3866 = yyj3866 > l
	} else {
		yyb3866 = r.CheckBreak()
	}
	if yyb3866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3868 := &x.Max
		yyv3868.CodecDecodeSelf(d)
	}
	yyj3866++
	if yyhl3866 {
		yyb3866 = yyj3866 > l
	} else {
		yyb3866 = r.CheckBreak()
	}
	if yyb3866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3869 := &x.Min
		yyv3869.CodecDecodeSelf(d)
	}
	yyj3866++
	if yyhl3866 {
		yyb3866 = yyj3866 > l
	} else {
		yyb3866 = r.CheckBreak()
	}
	if yyb3866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3870 := &x.Default
		yyv3870.CodecDecodeSelf(d)
	}
	yyj3866++
	if yyhl3866 {
		yyb3866 = yyj3866 > l
	} else {
		yyb3866 = r.CheckBreak()
	}
	if yyb3866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3871 := &x.DefaultRequest
		yyv3871.CodecDecodeSelf(d)
	}
	yyj3866++
	if yyhl3866 {
		yyb3866 = yyj3866 > l
	} else {
		yyb3866 = r.CheckBreak()
	}
	if yyb3866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3872 := &x.MaxLimitRequestRatio
		yyv3872.CodecDecodeSelf(d)
	}
	for {
		yyj3866++
		if yyhl3866 {
			yyb3866 = yyj3866 > l
		} else {
			yyb3866 = r.CheckBreak()
		}
		if yyb3866 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3866-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3873 := z.EncBinary()
		_ = yym3873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3874 := !z.EncBinary()
			yy2arr3874 := z.EncBasicHandle().StructToArray
			var yyq3874 [1]bool
			_, _, _ = yysep3874, yyq3874, yy2arr3874
			const yyr3874 bool = false
			var yynn3874 int
			if yyr3874 || yy2arr3874 {
				r.EncodeArrayStart(1)
			} else {
				yynn3874 = 1
				for _, b := range yyq3874 {
					if b {
						yynn3874++
					}
				}
				r.EncodeMapStart(yynn3874)
				yynn3874 = 0
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3878 := z.DecBinary()
	_ = yym3878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3879 := r.ContainerType()
		if yyct3879 == codecSelferValueTypeMap1234 {
			yyl3879 := r.ReadMapStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3879, d)
			}
		} else if yyct3879 == codecSelferValueTypeArray1234 {
			yyl3879 := r.ReadArrayStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3880Slc
	var yyhl3880 bool = l >= 0
	for yyj3880 := 0; ; yyj3880++ {
		if yyhl3880 {
			if yyj3880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3880Slc = r.DecodeBytes(yys3880Slc, true, true)
		yys3880 := string(yys3880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3880 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3881 := &x.Limits
				yym3882 := z.DecBinary()
				_ = yym3882
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3881), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3880)
		} // end switch yys3880
	} // end for yyj3880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3883 int
	var yyb3883 bool
	var yyhl3883 bool = l >= 0
	yyj3883++
	if yyhl3883 {
		yyb3883 = yyj3883 > l
	} else {
		yyb3883 = r.CheckBreak()
	}
	if yyb3883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3884 := &x.Limits
		yym3885 := z.DecBinary()
		_ = yym3885
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3884), d)
		}
	}
	for {
		yyj3883++
		if yyhl3883 {
			yyb3883 = yyj3883 > l
		} else {
			yyb3883 = r.CheckBreak()
		}
		if yyb3883 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3883-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3886 := z.EncBinary()
		_ = yym3886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3887 := !z.EncBinary()
			yy2arr3887 := z.EncBasicHandle().StructToArray
			var yyq3887 [4]bool
			_, _, _ = yysep3887, yyq3887, yy2arr3887
			const yyr3887 bool = false
			yyq3887[0] = x.Kind != ""
			yyq3887[1] = x.APIVersion != ""
			yyq3887[2] = true
			yyq3887[3] = true
			var yynn3887 int
			if yyr3887 || yy2arr3887 {
				r.EncodeArrayStart(4)
			} else {
				yynn3887 = 0
				for _, b := range yyq3887 {
					if b {
						yynn3887++
					}
				}
				r.EncodeMapStart(yynn3887)
				yynn3887 = 0
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[0] {
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3887[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3890 := z.EncBinary()
					_ = yym3890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[1] {
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3887[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3893 := z.EncBinary()
					_ = yym3893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[2] {
					yy3895 := &x.ObjectMeta
					yy3895.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3887[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3896 := &x.ObjectMeta
					yy3896.CodecEncodeSelf(e)
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[3] {
					yy3898 := &x.Spec
					yy3898.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3887[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3899 := &x.Spec
					yy3899.CodecEncodeSelf(e)
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3900 := z.DecBinary()
	_ = yym3900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3901 := r.ContainerType()
		if yyct3901 == codecSelferValueTypeMap1234 {
			yyl3901 := r.ReadMapStart()
			if yyl3901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3901, d)
			}
		} else if yyct3901 == codecSelferValueTypeArray1234 {
			yyl3901 := r.ReadArrayStart()
			if yyl3901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3902Slc
	var yyhl3902 bool = l >= 0
	for yyj3902 := 0; ; yyj3902++ {
		if yyhl3902 {
			if yyj3902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3902Slc = r.DecodeBytes(yys3902Slc, true, true)
		yys3902 := string(yys3902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3902 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3905 := &x.ObjectMeta
				yyv3905.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3906 := &x.Spec
				yyv3906.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3902)
		} // end switch yys3902
	} // end for yyj3902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3907 int
	var yyb3907 bool
	var yyhl3907 bool = l >= 0
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3910 := &x.ObjectMeta
		yyv3910.CodecDecodeSelf(d)
	}
	yyj3907++
	if yyhl3907 {
		yyb3907 = yyj3907 > l
	} else {
		yyb3907 = r.CheckBreak()
	}
	if yyb3907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3911 := &x.Spec
		yyv3911.CodecDecodeSelf(d)
	}
	for {
		yyj3907++
		if yyhl3907 {
			yyb3907 = yyj3907 > l
		} else {
			yyb3907 = r.CheckBreak()
		}
		if yyb3907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3912 := z.EncBinary()
		_ = yym3912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3913 := !z.EncBinary()
			yy2arr3913 := z.EncBasicHandle().StructToArray
			var yyq3913 [4]bool
			_, _, _ = yysep3913, yyq3913, yy2arr3913
			const yyr3913 bool = false
			yyq3913[0] = x.Kind != ""
			yyq3913[1] = x.APIVersion != ""
			yyq3913[2] = true
			var yynn3913 int
			if yyr3913 || yy2arr3913 {
				r.EncodeArrayStart(4)
			} else {
				yynn3913 = 1
				for _, b := range yyq3913 {
					if b {
						yynn3913++
					}
				}
				r.EncodeMapStart(yynn3913)
				yynn3913 = 0
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[0] {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[1] {
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3919 := z.EncBinary()
					_ = yym3919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[2] {
					yy3921 := &x.ListMeta
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3921) {
					} else {
						z.EncFallback(yy3921)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3913[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3923 := &x.ListMeta
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3923) {
					} else {
						z.EncFallback(yy3923)
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3928 := z.DecBinary()
	_ = yym3928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3929 := r.ContainerType()
		if yyct3929 == codecSelferValueTypeMap1234 {
			yyl3929 := r.ReadMapStart()
			if yyl3929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3929, d)
			}
		} else if yyct3929 == codecSelferValueTypeArray1234 {
			yyl3929 := r.ReadArrayStart()
			if yyl3929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3930Slc
	var yyhl3930 bool = l >= 0
	for yyj3930 := 0; ; yyj3930++ {
		if yyhl3930 {
			if yyj3930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3930Slc = r.DecodeBytes(yys3930Slc, true, true)
		yys3930 := string(yys3930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3930 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3933 := &x.ListMeta
				yym3934 := z.DecBinary()
				_ = yym3934
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3933) {
				} else {
					z.DecFallback(yyv3933, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3935 := &x.Items
				yym3936 := z.DecBinary()
				_ = yym3936
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3935), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3930)
		} // end switch yys3930
	} // end for yyj3930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3937 int
	var yyb3937 bool
	var yyhl3937 bool = l >= 0
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3940 := &x.ListMeta
		yym3941 := z.DecBinary()
		_ = yym3941
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3940) {
		} else {
			z.DecFallback(yyv3940, false)
		}
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3942 := &x.Items
		yym3943 := z.DecBinary()
		_ = yym3943
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3942), d)
		}
	}
	for {
		yyj3937++
		if yyhl3937 {
			yyb3937 = yyj3937 > l
		} else {
			yyb3937 = r.CheckBreak()
		}
		if yyb3937 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3937-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3944 := z.EncBinary()
	_ = yym3944
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3945 := z.DecBinary()
	_ = yym3945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3946 := z.EncBinary()
		_ = yym3946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3947 := !z.EncBinary()
			yy2arr3947 := z.EncBasicHandle().StructToArray
			var yyq3947 [2]bool
			_, _, _ = yysep3947, yyq3947, yy2arr3947
			const yyr3947 bool = false
			yyq3947[0] = len(x.Hard) != 0
			yyq3947[1] = len(x.Scopes) != 0
			var yynn3947 int
			if yyr3947 || yy2arr3947 {
				r.EncodeArrayStart(2)
			} else {
				yynn3947 = 0
				for _, b := range yyq3947 {
					if b {
						yynn3947++
					}
				}
				r.EncodeMapStart(yynn3947)
				yynn3947 = 0
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3947[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3950 := z.EncBinary()
						_ = yym3950
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3947[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3951 := z.EncBinary()
						_ = yym3951
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3947 || yy2arr3947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3952 := z.DecBinary()
	_ = yym3952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3953 := r.ContainerType()
		if yyct3953 == codecSelferValueTypeMap1234 {
			yyl3953 := r.ReadMapStart()
			if yyl3953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3953, d)
			}
		} else if yyct3953 == codecSelferValueTypeArray1234 {
			yyl3953 := r.ReadArrayStart()
			if yyl3953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3954Slc
	var yyhl3954 bool = l >= 0
	for yyj3954 := 0; ; yyj3954++ {
		if yyhl3954 {
			if yyj3954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3954Slc = r.DecodeBytes(yys3954Slc, true, true)
		yys3954 := string(yys3954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3954 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3955 := &x.Hard
				yyv3955.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3956 := &x.Scopes
				yym3957 := z.DecBinary()
				_ = yym3957
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3956), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3954)
		} // end switch yys3954
	} // end for yyj3954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3958 int
	var yyb3958 bool
	var yyhl3958 bool = l >= 0
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3959 := &x.Hard
		yyv3959.CodecDecodeSelf(d)
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3960 := &x.Scopes
		yym3961 := z.DecBinary()
		_ = yym3961
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3960), d)
		}
	}
	for {
		yyj3958++
		if yyhl3958 {
			yyb3958 = yyj3958 > l
		} else {
			yyb3958 = r.CheckBreak()
		}
		if yyb3958 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3958-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3962 := z.EncBinary()
		_ = yym3962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3963 := !z.EncBinary()
			yy2arr3963 := z.EncBasicHandle().StructToArray
			var yyq3963 [2]bool
			_, _, _ = yysep3963, yyq3963, yy2arr3963
			const yyr3963 bool = false
			yyq3963[0] = len(x.Hard) != 0
			yyq3963[1] = len(x.Used) != 0
			var yynn3963 int
			if yyr3963 || yy2arr3963 {
				r.EncodeArrayStart(2)
			} else {
				yynn3963 = 0
				for _, b := range yyq3963 {
					if b {
						yynn3963++
					}
				}
				r.EncodeMapStart(yynn3963)
				yynn3963 = 0
			}
			if yyr3963 || yy2arr3963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3963[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3963 || yy2arr3963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3963[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3963[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3963 || yy2arr3963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3966 := z.DecBinary()
	_ = yym3966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3967 := r.ContainerType()
		if yyct3967 == codecSelferValueTypeMap1234 {
			yyl3967 := r.ReadMapStart()
			if yyl3967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3967, d)
			}
		} else if yyct3967 == codecSelferValueTypeArray1234 {
			yyl3967 := r.ReadArrayStart()
			if yyl3967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3968Slc
	var yyhl3968 bool = l >= 0
	for yyj3968 := 0; ; yyj3968++ {
		if yyhl3968 {
			if yyj3968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3968Slc = r.DecodeBytes(yys3968Slc, true, true)
		yys3968 := string(yys3968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3968 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3969 := &x.Hard
				yyv3969.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3970 := &x.Used
				yyv3970.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3968)
		} // end switch yys3968
	} // end for yyj3968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3971 int
	var yyb3971 bool
	var yyhl3971 bool = l >= 0
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3972 := &x.Hard
		yyv3972.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3973 := &x.Used
		yyv3973.CodecDecodeSelf(d)
	}
	for {
		yyj3971++
		if yyhl3971 {
			yyb3971 = yyj3971 > l
		} else {
			yyb3971 = r.CheckBreak()
		}
		if yyb3971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3974 := z.EncBinary()
		_ = yym3974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3975 := !z.EncBinary()
			yy2arr3975 := z.EncBasicHandle().StructToArray
			var yyq3975 [5]bool
			_, _, _ = yysep3975, yyq3975, yy2arr3975
			const yyr3975 bool = false
			yyq3975[0] = x.Kind != ""
			yyq3975[1] = x.APIVersion != ""
			yyq3975[2] = true
			yyq3975[3] = true
			yyq3975[4] = true
			var yynn3975 int
			if yyr3975 || yy2arr3975 {
				r.EncodeArrayStart(5)
			} else {
				yynn3975 = 0
				for _, b := range yyq3975 {
					if b {
						yynn3975++
					}
				}
				r.EncodeMapStart(yynn3975)
				yynn3975 = 0
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[0] {
					yym3977 := z.EncBinary()
					_ = yym3977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3978 := z.EncBinary()
					_ = yym3978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[1] {
					yym3980 := z.EncBinary()
					_ = yym3980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3975[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3981 := z.EncBinary()
					_ = yym3981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[2] {
					yy3983 := &x.ObjectMeta
					yy3983.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3984 := &x.ObjectMeta
					yy3984.CodecEncodeSelf(e)
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[3] {
					yy3986 := &x.Spec
					yy3986.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3987 := &x.Spec
					yy3987.CodecEncodeSelf(e)
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[4] {
					yy3989 := &x.Status
					yy3989.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3990 := &x.Status
					yy3990.CodecEncodeSelf(e)
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3991 := z.DecBinary()
	_ = yym3991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3992 := r.ContainerType()
		if yyct3992 == codecSelferValueTypeMap1234 {
			yyl3992 := r.ReadMapStart()
			if yyl3992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3992, d)
			}
		} else if yyct3992 == codecSelferValueTypeArray1234 {
			yyl3992 := r.ReadArrayStart()
			if yyl3992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3993Slc
	var yyhl3993 bool = l >= 0
	for yyj3993 := 0; ; yyj3993++ {
		if yyhl3993 {
			if yyj3993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3993Slc = r.DecodeBytes(yys3993Slc, true, true)
		yys3993 := string(yys3993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3993 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3996 := &x.ObjectMeta
				yyv3996.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3997 := &x.Spec
				yyv3997.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3998 := &x.Status
				yyv3998.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3993)
		} // end switch yys3993
	} // end for yyj3993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3999 int
	var yyb3999 bool
	var yyhl3999 bool = l >= 0
	yyj3999++
	if yyhl3999 {
		yyb3999 = yyj3999 > l
	} else {
		yyb3999 = r.CheckBreak()
	}
	if yyb3999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3999++
	if yyhl3999 {
		yyb3999 = yyj3999 > l
	} else {
		yyb3999 = r.CheckBreak()
	}
	if yyb3999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3999++
	if yyhl3999 {
		yyb3999 = yyj3999 > l
	} else {
		yyb3999 = r.CheckBreak()
	}
	if yyb3999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4002 := &x.ObjectMeta
		yyv4002.CodecDecodeSelf(d)
	}
	yyj3999++
	if yyhl3999 {
		yyb3999 = yyj3999 > l
	} else {
		yyb3999 = r.CheckBreak()
	}
	if yyb3999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4003 := &x.Spec
		yyv4003.CodecDecodeSelf(d)
	}
	yyj3999++
	if yyhl3999 {
		yyb3999 = yyj3999 > l
	} else {
		yyb3999 = r.CheckBreak()
	}
	if yyb3999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4004 := &x.Status
		yyv4004.CodecDecodeSelf(d)
	}
	for {
		yyj3999++
		if yyhl3999 {
			yyb3999 = yyj3999 > l
		} else {
			yyb3999 = r.CheckBreak()
		}
		if yyb3999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4005 := z.EncBinary()
		_ = yym4005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4006 := !z.EncBinary()
			yy2arr4006 := z.EncBasicHandle().StructToArray
			var yyq4006 [4]bool
			_, _, _ = yysep4006, yyq4006, yy2arr4006
			const yyr4006 bool = false
			yyq4006[0] = x.Kind != ""
			yyq4006[1] = x.APIVersion != ""
			yyq4006[2] = true
			var yynn4006 int
			if yyr4006 || yy2arr4006 {
				r.EncodeArrayStart(4)
			} else {
				yynn4006 = 1
				for _, b := range yyq4006 {
					if b {
						yynn4006++
					}
				}
				r.EncodeMapStart(yynn4006)
				yynn4006 = 0
			}
			if yyr4006 || yy2arr4006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4006[0] {
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4009 := z.EncBinary()
					_ = yym4009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4006 || yy2arr4006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4006[1] {
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4012 := z.EncBinary()
					_ = yym4012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4006 || yy2arr4006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4006[2] {
					yy4014 := &x.ListMeta
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4014) {
					} else {
						z.EncFallback(yy4014)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4016 := &x.ListMeta
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4016) {
					} else {
						z.EncFallback(yy4016)
					}
				}
			}
			if yyr4006 || yy2arr4006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4020 := z.EncBinary()
					_ = yym4020
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4006 || yy2arr4006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4021 := z.DecBinary()
	_ = yym4021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4022 := r.ContainerType()
		if yyct4022 == codecSelferValueTypeMap1234 {
			yyl4022 := r.ReadMapStart()
			if yyl4022 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4022, d)
			}
		} else if yyct4022 == codecSelferValueTypeArray1234 {
			yyl4022 := r.ReadArrayStart()
			if yyl4022 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4023Slc
	var yyhl4023 bool = l >= 0
	for yyj4023 := 0; ; yyj4023++ {
		if yyhl4023 {
			if yyj4023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4023Slc = r.DecodeBytes(yys4023Slc, true, true)
		yys4023 := string(yys4023Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4023 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4026 := &x.ListMeta
				yym4027 := z.DecBinary()
				_ = yym4027
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4026) {
				} else {
					z.DecFallback(yyv4026, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4028 := &x.Items
				yym4029 := z.DecBinary()
				_ = yym4029
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4028), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4023)
		} // end switch yys4023
	} // end for yyj4023
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4030 int
	var yyb4030 bool
	var yyhl4030 bool = l >= 0
	yyj4030++
	if yyhl4030 {
		yyb4030 = yyj4030 > l
	} else {
		yyb4030 = r.CheckBreak()
	}
	if yyb4030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4030++
	if yyhl4030 {
		yyb4030 = yyj4030 > l
	} else {
		yyb4030 = r.CheckBreak()
	}
	if yyb4030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4030++
	if yyhl4030 {
		yyb4030 = yyj4030 > l
	} else {
		yyb4030 = r.CheckBreak()
	}
	if yyb4030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4033 := &x.ListMeta
		yym4034 := z.DecBinary()
		_ = yym4034
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4033) {
		} else {
			z.DecFallback(yyv4033, false)
		}
	}
	yyj4030++
	if yyhl4030 {
		yyb4030 = yyj4030 > l
	} else {
		yyb4030 = r.CheckBreak()
	}
	if yyb4030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4035 := &x.Items
		yym4036 := z.DecBinary()
		_ = yym4036
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4035), d)
		}
	}
	for {
		yyj4030++
		if yyhl4030 {
			yyb4030 = yyj4030 > l
		} else {
			yyb4030 = r.CheckBreak()
		}
		if yyb4030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4037 := z.EncBinary()
		_ = yym4037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4038 := !z.EncBinary()
			yy2arr4038 := z.EncBasicHandle().StructToArray
			var yyq4038 [5]bool
			_, _, _ = yysep4038, yyq4038, yy2arr4038
			const yyr4038 bool = false
			yyq4038[0] = x.Kind != ""
			yyq4038[1] = x.APIVersion != ""
			yyq4038[2] = true
			yyq4038[3] = len(x.Data) != 0
			yyq4038[4] = x.Type != ""
			var yynn4038 int
			if yyr4038 || yy2arr4038 {
				r.EncodeArrayStart(5)
			} else {
				yynn4038 = 0
				for _, b := range yyq4038 {
					if b {
						yynn4038++
					}
				}
				r.EncodeMapStart(yynn4038)
				yynn4038 = 0
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[0] {
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[1] {
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[2] {
					yy4046 := &x.ObjectMeta
					yy4046.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4038[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4047 := &x.ObjectMeta
					yy4047.CodecEncodeSelf(e)
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4049 := z.EncBinary()
						_ = yym4049
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4038[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4050 := z.EncBinary()
						_ = yym4050
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4052 := z.DecBinary()
	_ = yym4052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4053 := r.ContainerType()
		if yyct4053 == codecSelferValueTypeMap1234 {
			yyl4053 := r.ReadMapStart()
			if yyl4053 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4053, d)
			}
		} else if yyct4053 == codecSelferValueTypeArray1234 {
			yyl4053 := r.ReadArrayStart()
			if yyl4053 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4054Slc
	var yyhl4054 bool = l >= 0
	for yyj4054 := 0; ; yyj4054++ {
		if yyhl4054 {
			if yyj4054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4054Slc = r.DecodeBytes(yys4054Slc, true, true)
		yys4054 := string(yys4054Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4054 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4057 := &x.ObjectMeta
				yyv4057.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4058 := &x.Data
				yym4059 := z.DecBinary()
				_ = yym4059
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4058), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4054)
		} // end switch yys4054
	} // end for yyj4054
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4061 int
	var yyb4061 bool
	var yyhl4061 bool = l >= 0
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4064 := &x.ObjectMeta
		yyv4064.CodecDecodeSelf(d)
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4065 := &x.Data
		yym4066 := z.DecBinary()
		_ = yym4066
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4065), d)
		}
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4061++
		if yyhl4061 {
			yyb4061 = yyj4061 > l
		} else {
			yyb4061 = r.CheckBreak()
		}
		if yyb4061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4068 := z.EncBinary()
	_ = yym4068
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4069 := z.DecBinary()
	_ = yym4069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4070 := z.EncBinary()
		_ = yym4070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4071 := !z.EncBinary()
			yy2arr4071 := z.EncBasicHandle().StructToArray
			var yyq4071 [4]bool
			_, _, _ = yysep4071, yyq4071, yy2arr4071
			const yyr4071 bool = false
			yyq4071[0] = x.Kind != ""
			yyq4071[1] = x.APIVersion != ""
			yyq4071[2] = true
			var yynn4071 int
			if yyr4071 || yy2arr4071 {
				r.EncodeArrayStart(4)
			} else {
				yynn4071 = 1
				for _, b := range yyq4071 {
					if b {
						yynn4071++
					}
				}
				r.EncodeMapStart(yynn4071)
				yynn4071 = 0
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[0] {
					yym4073 := z.EncBinary()
					_ = yym4073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4074 := z.EncBinary()
					_ = yym4074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[1] {
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4071[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[2] {
					yy4079 := &x.ListMeta
					yym4080 := z.EncBinary()
					_ = yym4080
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4079) {
					} else {
						z.EncFallback(yy4079)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4081 := &x.ListMeta
					yym4082 := z.EncBinary()
					_ = yym4082
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4081) {
					} else {
						z.EncFallback(yy4081)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4086 := z.DecBinary()
	_ = yym4086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4087 := r.ContainerType()
		if yyct4087 == codecSelferValueTypeMap1234 {
			yyl4087 := r.ReadMapStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4087, d)
			}
		} else if yyct4087 == codecSelferValueTypeArray1234 {
			yyl4087 := r.ReadArrayStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4088Slc
	var yyhl4088 bool = l >= 0
	for yyj4088 := 0; ; yyj4088++ {
		if yyhl4088 {
			if yyj4088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4088Slc = r.DecodeBytes(yys4088Slc, true, true)
		yys4088 := string(yys4088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4088 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4091 := &x.ListMeta
				yym4092 := z.DecBinary()
				_ = yym4092
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4091) {
				} else {
					z.DecFallback(yyv4091, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4093 := &x.Items
				yym4094 := z.DecBinary()
				_ = yym4094
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4093), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4088)
		} // end switch yys4088
	} // end for yyj4088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4095 int
	var yyb4095 bool
	var yyhl4095 bool = l >= 0
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4098 := &x.ListMeta
		yym4099 := z.DecBinary()
		_ = yym4099
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4098) {
		} else {
			z.DecFallback(yyv4098, false)
		}
	}
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4100 := &x.Items
		yym4101 := z.DecBinary()
		_ = yym4101
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4100), d)
		}
	}
	for {
		yyj4095++
		if yyhl4095 {
			yyb4095 = yyj4095 > l
		} else {
			yyb4095 = r.CheckBreak()
		}
		if yyb4095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4102 := z.EncBinary()
		_ = yym4102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4103 := !z.EncBinary()
			yy2arr4103 := z.EncBasicHandle().StructToArray
			var yyq4103 [4]bool
			_, _, _ = yysep4103, yyq4103, yy2arr4103
			const yyr4103 bool = false
			yyq4103[0] = x.Kind != ""
			yyq4103[1] = x.APIVersion != ""
			yyq4103[2] = true
			yyq4103[3] = len(x.Data) != 0
			var yynn4103 int
			if yyr4103 || yy2arr4103 {
				r.EncodeArrayStart(4)
			} else {
				yynn4103 = 0
				for _, b := range yyq4103 {
					if b {
						yynn4103++
					}
				}
				r.EncodeMapStart(yynn4103)
				yynn4103 = 0
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[0] {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4103[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4106 := z.EncBinary()
					_ = yym4106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[1] {
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4103[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4109 := z.EncBinary()
					_ = yym4109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[2] {
					yy4111 := &x.ObjectMeta
					yy4111.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4103[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4112 := &x.ObjectMeta
					yy4112.CodecEncodeSelf(e)
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4114 := z.EncBinary()
						_ = yym4114
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4103[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4115 := z.EncBinary()
						_ = yym4115
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4116 := z.DecBinary()
	_ = yym4116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4117 := r.ContainerType()
		if yyct4117 == codecSelferValueTypeMap1234 {
			yyl4117 := r.ReadMapStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4117, d)
			}
		} else if yyct4117 == codecSelferValueTypeArray1234 {
			yyl4117 := r.ReadArrayStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4118Slc
	var yyhl4118 bool = l >= 0
	for yyj4118 := 0; ; yyj4118++ {
		if yyhl4118 {
			if yyj4118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4118Slc = r.DecodeBytes(yys4118Slc, true, true)
		yys4118 := string(yys4118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4118 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4121 := &x.ObjectMeta
				yyv4121.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4122 := &x.Data
				yym4123 := z.DecBinary()
				_ = yym4123
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4122, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4118)
		} // end switch yys4118
	} // end for yyj4118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4124 int
	var yyb4124 bool
	var yyhl4124 bool = l >= 0
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4127 := &x.ObjectMeta
		yyv4127.CodecDecodeSelf(d)
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4128 := &x.Data
		yym4129 := z.DecBinary()
		_ = yym4129
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4128, false, d)
		}
	}
	for {
		yyj4124++
		if yyhl4124 {
			yyb4124 = yyj4124 > l
		} else {
			yyb4124 = r.CheckBreak()
		}
		if yyb4124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4130 := z.EncBinary()
		_ = yym4130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4131 := !z.EncBinary()
			yy2arr4131 := z.EncBasicHandle().StructToArray
			var yyq4131 [4]bool
			_, _, _ = yysep4131, yyq4131, yy2arr4131
			const yyr4131 bool = false
			yyq4131[0] = x.Kind != ""
			yyq4131[1] = x.APIVersion != ""
			yyq4131[2] = true
			var yynn4131 int
			if yyr4131 || yy2arr4131 {
				r.EncodeArrayStart(4)
			} else {
				yynn4131 = 1
				for _, b := range yyq4131 {
					if b {
						yynn4131++
					}
				}
				r.EncodeMapStart(yynn4131)
				yynn4131 = 0
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[0] {
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4134 := z.EncBinary()
					_ = yym4134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[1] {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[2] {
					yy4139 := &x.ListMeta
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4139) {
					} else {
						z.EncFallback(yy4139)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4141 := &x.ListMeta
					yym4142 := z.EncBinary()
					_ = yym4142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4141) {
					} else {
						z.EncFallback(yy4141)
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4144 := z.EncBinary()
					_ = yym4144
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4146 := z.DecBinary()
	_ = yym4146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4147 := r.ContainerType()
		if yyct4147 == codecSelferValueTypeMap1234 {
			yyl4147 := r.ReadMapStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4147, d)
			}
		} else if yyct4147 == codecSelferValueTypeArray1234 {
			yyl4147 := r.ReadArrayStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4148Slc
	var yyhl4148 bool = l >= 0
	for yyj4148 := 0; ; yyj4148++ {
		if yyhl4148 {
			if yyj4148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4148Slc = r.DecodeBytes(yys4148Slc, true, true)
		yys4148 := string(yys4148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4148 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4151 := &x.ListMeta
				yym4152 := z.DecBinary()
				_ = yym4152
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4151) {
				} else {
					z.DecFallback(yyv4151, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4153 := &x.Items
				yym4154 := z.DecBinary()
				_ = yym4154
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4153), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4148)
		} // end switch yys4148
	} // end for yyj4148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4155 int
	var yyb4155 bool
	var yyhl4155 bool = l >= 0
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4158 := &x.ListMeta
		yym4159 := z.DecBinary()
		_ = yym4159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4158) {
		} else {
			z.DecFallback(yyv4158, false)
		}
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4160 := &x.Items
		yym4161 := z.DecBinary()
		_ = yym4161
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4160), d)
		}
	}
	for {
		yyj4155++
		if yyhl4155 {
			yyb4155 = yyj4155 > l
		} else {
			yyb4155 = r.CheckBreak()
		}
		if yyb4155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4162 := z.EncBinary()
	_ = yym4162
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4163 := z.DecBinary()
	_ = yym4163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4164 := z.EncBinary()
	_ = yym4164
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4165 := z.DecBinary()
	_ = yym4165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4166 := z.EncBinary()
		_ = yym4166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4167 := !z.EncBinary()
			yy2arr4167 := z.EncBasicHandle().StructToArray
			var yyq4167 [4]bool
			_, _, _ = yysep4167, yyq4167, yy2arr4167
			const yyr4167 bool = false
			yyq4167[2] = x.Message != ""
			yyq4167[3] = x.Error != ""
			var yynn4167 int
			if yyr4167 || yy2arr4167 {
				r.EncodeArrayStart(4)
			} else {
				yynn4167 = 2
				for _, b := range yyq4167 {
					if b {
						yynn4167++
					}
				}
				r.EncodeMapStart(yynn4167)
				yynn4167 = 0
			}
			if yyr4167 || yy2arr4167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4167 || yy2arr4167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4167 || yy2arr4167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4167[2] {
					yym4171 := z.EncBinary()
					_ = yym4171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4172 := z.EncBinary()
					_ = yym4172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4167 || yy2arr4167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4167[3] {
					yym4174 := z.EncBinary()
					_ = yym4174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4175 := z.EncBinary()
					_ = yym4175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4167 || yy2arr4167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4176 := z.DecBinary()
	_ = yym4176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4177 := r.ContainerType()
		if yyct4177 == codecSelferValueTypeMap1234 {
			yyl4177 := r.ReadMapStart()
			if yyl4177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4177, d)
			}
		} else if yyct4177 == codecSelferValueTypeArray1234 {
			yyl4177 := r.ReadArrayStart()
			if yyl4177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4178Slc
	var yyhl4178 bool = l >= 0
	for yyj4178 := 0; ; yyj4178++ {
		if yyhl4178 {
			if yyj4178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4178Slc = r.DecodeBytes(yys4178Slc, true, true)
		yys4178 := string(yys4178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4178 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4178)
		} // end switch yys4178
	} // end for yyj4178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4183 int
	var yyb4183 bool
	var yyhl4183 bool = l >= 0
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4183++
	if yyhl4183 {
		yyb4183 = yyj4183 > l
	} else {
		yyb4183 = r.CheckBreak()
	}
	if yyb4183 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4183++
		if yyhl4183 {
			yyb4183 = yyj4183 > l
		} else {
			yyb4183 = r.CheckBreak()
		}
		if yyb4183 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4183-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4188 := z.EncBinary()
		_ = yym4188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4189 := !z.EncBinary()
			yy2arr4189 := z.EncBasicHandle().StructToArray
			var yyq4189 [4]bool
			_, _, _ = yysep4189, yyq4189, yy2arr4189
			const yyr4189 bool = false
			yyq4189[0] = x.Kind != ""
			yyq4189[1] = x.APIVersion != ""
			yyq4189[2] = true
			yyq4189[3] = len(x.Conditions) != 0
			var yynn4189 int
			if yyr4189 || yy2arr4189 {
				r.EncodeArrayStart(4)
			} else {
				yynn4189 = 0
				for _, b := range yyq4189 {
					if b {
						yynn4189++
					}
				}
				r.EncodeMapStart(yynn4189)
				yynn4189 = 0
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[0] {
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4189[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[1] {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4189[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[2] {
					yy4197 := &x.ObjectMeta
					yy4197.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4189[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4198 := &x.ObjectMeta
					yy4198.CodecEncodeSelf(e)
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4200 := z.EncBinary()
						_ = yym4200
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4189[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4201 := z.EncBinary()
						_ = yym4201
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4202 := z.DecBinary()
	_ = yym4202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4203 := r.ContainerType()
		if yyct4203 == codecSelferValueTypeMap1234 {
			yyl4203 := r.ReadMapStart()
			if yyl4203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4203, d)
			}
		} else if yyct4203 == codecSelferValueTypeArray1234 {
			yyl4203 := r.ReadArrayStart()
			if yyl4203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4204Slc
	var yyhl4204 bool = l >= 0
	for yyj4204 := 0; ; yyj4204++ {
		if yyhl4204 {
			if yyj4204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4204Slc = r.DecodeBytes(yys4204Slc, true, true)
		yys4204 := string(yys4204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4207 := &x.ObjectMeta
				yyv4207.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4208 := &x.Conditions
				yym4209 := z.DecBinary()
				_ = yym4209
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4208), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4204)
		} // end switch yys4204
	} // end for yyj4204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4210 int
	var yyb4210 bool
	var yyhl4210 bool = l >= 0
	yyj4210++
	if yyhl4210 {
		yyb4210 = yyj4210 > l
	} else {
		yyb4210 = r.CheckBreak()
	}
	if yyb4210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4210++
	if yyhl4210 {
		yyb4210 = yyj4210 > l
	} else {
		yyb4210 = r.CheckBreak()
	}
	if yyb4210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4210++
	if yyhl4210 {
		yyb4210 = yyj4210 > l
	} else {
		yyb4210 = r.CheckBreak()
	}
	if yyb4210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4213 := &x.ObjectMeta
		yyv4213.CodecDecodeSelf(d)
	}
	yyj4210++
	if yyhl4210 {
		yyb4210 = yyj4210 > l
	} else {
		yyb4210 = r.CheckBreak()
	}
	if yyb4210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4214 := &x.Conditions
		yym4215 := z.DecBinary()
		_ = yym4215
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4214), d)
		}
	}
	for {
		yyj4210++
		if yyhl4210 {
			yyb4210 = yyj4210 > l
		} else {
			yyb4210 = r.CheckBreak()
		}
		if yyb4210 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4210-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4216 := z.EncBinary()
		_ = yym4216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4217 := !z.EncBinary()
			yy2arr4217 := z.EncBasicHandle().StructToArray
			var yyq4217 [4]bool
			_, _, _ = yysep4217, yyq4217, yy2arr4217
			const yyr4217 bool = false
			yyq4217[0] = x.Kind != ""
			yyq4217[1] = x.APIVersion != ""
			yyq4217[2] = true
			var yynn4217 int
			if yyr4217 || yy2arr4217 {
				r.EncodeArrayStart(4)
			} else {
				yynn4217 = 1
				for _, b := range yyq4217 {
					if b {
						yynn4217++
					}
				}
				r.EncodeMapStart(yynn4217)
				yynn4217 = 0
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4217[0] {
					yym4219 := z.EncBinary()
					_ = yym4219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4217[1] {
					yym4222 := z.EncBinary()
					_ = yym4222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4217[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4217[2] {
					yy4225 := &x.ListMeta
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4225) {
					} else {
						z.EncFallback(yy4225)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4227 := &x.ListMeta
					yym4228 := z.EncBinary()
					_ = yym4228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4227) {
					} else {
						z.EncFallback(yy4227)
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4231 := z.EncBinary()
					_ = yym4231
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4232 := z.DecBinary()
	_ = yym4232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4233 := r.ContainerType()
		if yyct4233 == codecSelferValueTypeMap1234 {
			yyl4233 := r.ReadMapStart()
			if yyl4233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4233, d)
			}
		} else if yyct4233 == codecSelferValueTypeArray1234 {
			yyl4233 := r.ReadArrayStart()
			if yyl4233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4234Slc
	var yyhl4234 bool = l >= 0
	for yyj4234 := 0; ; yyj4234++ {
		if yyhl4234 {
			if yyj4234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4234Slc = r.DecodeBytes(yys4234Slc, true, true)
		yys4234 := string(yys4234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4234 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4237 := &x.ListMeta
				yym4238 := z.DecBinary()
				_ = yym4238
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4237) {
				} else {
					z.DecFallback(yyv4237, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4239 := &x.Items
				yym4240 := z.DecBinary()
				_ = yym4240
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4239), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4234)
		} // end switch yys4234
	} // end for yyj4234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4241 int
	var yyb4241 bool
	var yyhl4241 bool = l >= 0
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4244 := &x.ListMeta
		yym4245 := z.DecBinary()
		_ = yym4245
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4244) {
		} else {
			z.DecFallback(yyv4244, false)
		}
	}
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4246 := &x.Items
		yym4247 := z.DecBinary()
		_ = yym4247
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4246), d)
		}
	}
	for {
		yyj4241++
		if yyhl4241 {
			yyb4241 = yyj4241 > l
		} else {
			yyb4241 = r.CheckBreak()
		}
		if yyb4241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4248 := z.EncBinary()
		_ = yym4248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4249 := !z.EncBinary()
			yy2arr4249 := z.EncBasicHandle().StructToArray
			var yyq4249 [6]bool
			_, _, _ = yysep4249, yyq4249, yy2arr4249
			const yyr4249 bool = false
			yyq4249[0] = x.Capabilities != nil
			yyq4249[1] = x.Privileged != nil
			yyq4249[2] = x.SELinuxOptions != nil
			yyq4249[3] = x.RunAsUser != nil
			yyq4249[4] = x.RunAsNonRoot != nil
			yyq4249[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4249 int
			if yyr4249 || yy2arr4249 {
				r.EncodeArrayStart(6)
			} else {
				yynn4249 = 0
				for _, b := range yyq4249 {
					if b {
						yynn4249++
					}
				}
				r.EncodeMapStart(yynn4249)
				yynn4249 = 0
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4252 := *x.Privileged
						yym4253 := z.EncBinary()
						_ = yym4253
						if false {
						} else {
							r.EncodeBool(bool(yy4252))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4254 := *x.Privileged
						yym4255 := z.EncBinary()
						_ = yym4255
						if false {
						} else {
							r.EncodeBool(bool(yy4254))
						}
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4258 := *x.RunAsUser
						yym4259 := z.EncBinary()
						_ = yym4259
						if false {
						} else {
							r.EncodeInt(int64(yy4258))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4260 := *x.RunAsUser
						yym4261 := z.EncBinary()
						_ = yym4261
						if false {
						} else {
							r.EncodeInt(int64(yy4260))
						}
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4263 := *x.RunAsNonRoot
						yym4264 := z.EncBinary()
						_ = yym4264
						if false {
						} else {
							r.EncodeBool(bool(yy4263))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4265 := *x.RunAsNonRoot
						yym4266 := z.EncBinary()
						_ = yym4266
						if false {
						} else {
							r.EncodeBool(bool(yy4265))
						}
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4268 := *x.ReadOnlyRootFilesystem
						yym4269 := z.EncBinary()
						_ = yym4269
						if false {
						} else {
							r.EncodeBool(bool(yy4268))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4270 := *x.ReadOnlyRootFilesystem
						yym4271 := z.EncBinary()
						_ = yym4271
						if false {
						} else {
							r.EncodeBool(bool(yy4270))
						}
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4272 := z.DecBinary()
	_ = yym4272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4273 := r.ContainerType()
		if yyct4273 == codecSelferValueTypeMap1234 {
			yyl4273 := r.ReadMapStart()
			if yyl4273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4273, d)
			}
		} else if yyct4273 == codecSelferValueTypeArray1234 {
			yyl4273 := r.ReadArrayStart()
			if yyl4273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4274Slc
	var yyhl4274 bool = l >= 0
	for yyj4274 := 0; ; yyj4274++ {
		if yyhl4274 {
			if yyj4274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4274Slc = r.DecodeBytes(yys4274Slc, true, true)
		yys4274 := string(yys4274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4274 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4277 := z.DecBinary()
				_ = yym4277
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4280 := z.DecBinary()
				_ = yym4280
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4282 := z.DecBinary()
				_ = yym4282
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4284 := z.DecBinary()
				_ = yym4284
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4274)
		} // end switch yys4274
	} // end for yyj4274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4285 int
	var yyb4285 bool
	var yyhl4285 bool = l >= 0
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4288 := z.DecBinary()
		_ = yym4288
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4291 := z.DecBinary()
		_ = yym4291
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4293 := z.DecBinary()
		_ = yym4293
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4285++
	if yyhl4285 {
		yyb4285 = yyj4285 > l
	} else {
		yyb4285 = r.CheckBreak()
	}
	if yyb4285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4295 := z.DecBinary()
		_ = yym4295
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4285++
		if yyhl4285 {
			yyb4285 = yyj4285 > l
		} else {
			yyb4285 = r.CheckBreak()
		}
		if yyb4285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4296 := z.EncBinary()
		_ = yym4296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4297 := !z.EncBinary()
			yy2arr4297 := z.EncBasicHandle().StructToArray
			var yyq4297 [4]bool
			_, _, _ = yysep4297, yyq4297, yy2arr4297
			const yyr4297 bool = false
			yyq4297[0] = x.User != ""
			yyq4297[1] = x.Role != ""
			yyq4297[2] = x.Type != ""
			yyq4297[3] = x.Level != ""
			var yynn4297 int
			if yyr4297 || yy2arr4297 {
				r.EncodeArrayStart(4)
			} else {
				yynn4297 = 0
				for _, b := range yyq4297 {
					if b {
						yynn4297++
					}
				}
				r.EncodeMapStart(yynn4297)
				yynn4297 = 0
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4297[0] {
					yym4299 := z.EncBinary()
					_ = yym4299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4300 := z.EncBinary()
					_ = yym4300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4297[1] {
					yym4302 := z.EncBinary()
					_ = yym4302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4303 := z.EncBinary()
					_ = yym4303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4297[2] {
					yym4305 := z.EncBinary()
					_ = yym4305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4297[3] {
					yym4308 := z.EncBinary()
					_ = yym4308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4310 := z.DecBinary()
	_ = yym4310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4311 := r.ContainerType()
		if yyct4311 == codecSelferValueTypeMap1234 {
			yyl4311 := r.ReadMapStart()
			if yyl4311 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4311, d)
			}
		} else if yyct4311 == codecSelferValueTypeArray1234 {
			yyl4311 := r.ReadArrayStart()
			if yyl4311 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4312Slc
	var yyhl4312 bool = l >= 0
	for yyj4312 := 0; ; yyj4312++ {
		if yyhl4312 {
			if yyj4312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4312Slc = r.DecodeBytes(yys4312Slc, true, true)
		yys4312 := string(yys4312Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4312 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4312)
		} // end switch yys4312
	} // end for yyj4312
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4317 int
	var yyb4317 bool
	var yyhl4317 bool = l >= 0
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4317++
		if yyhl4317 {
			yyb4317 = yyj4317 > l
		} else {
			yyb4317 = r.CheckBreak()
		}
		if yyb4317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4322 := z.EncBinary()
		_ = yym4322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4323 := !z.EncBinary()
			yy2arr4323 := z.EncBasicHandle().StructToArray
			var yyq4323 [5]bool
			_, _, _ = yysep4323, yyq4323, yy2arr4323
			const yyr4323 bool = false
			yyq4323[0] = x.Kind != ""
			yyq4323[1] = x.APIVersion != ""
			yyq4323[2] = true
			var yynn4323 int
			if yyr4323 || yy2arr4323 {
				r.EncodeArrayStart(5)
			} else {
				yynn4323 = 2
				for _, b := range yyq4323 {
					if b {
						yynn4323++
					}
				}
				r.EncodeMapStart(yynn4323)
				yynn4323 = 0
			}
			if yyr4323 || yy2arr4323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4323[0] {
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4323[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4323 || yy2arr4323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4323[1] {
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4323 || yy2arr4323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4323[2] {
					yy4331 := &x.ObjectMeta
					yy4331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4323[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4332 := &x.ObjectMeta
					yy4332.CodecEncodeSelf(e)
				}
			}
			if yyr4323 || yy2arr4323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4334 := z.EncBinary()
				_ = yym4334
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4335 := z.EncBinary()
				_ = yym4335
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4323 || yy2arr4323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4337 := z.EncBinary()
					_ = yym4337
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4338 := z.EncBinary()
					_ = yym4338
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4323 || yy2arr4323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4339 := z.DecBinary()
	_ = yym4339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4340 := r.ContainerType()
		if yyct4340 == codecSelferValueTypeMap1234 {
			yyl4340 := r.ReadMapStart()
			if yyl4340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4340, d)
			}
		} else if yyct4340 == codecSelferValueTypeArray1234 {
			yyl4340 := r.ReadArrayStart()
			if yyl4340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4341Slc
	var yyhl4341 bool = l >= 0
	for yyj4341 := 0; ; yyj4341++ {
		if yyhl4341 {
			if yyj4341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4341Slc = r.DecodeBytes(yys4341Slc, true, true)
		yys4341 := string(yys4341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4344 := &x.ObjectMeta
				yyv4344.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4346 := &x.Data
				yym4347 := z.DecBinary()
				_ = yym4347
				if false {
				} else {
					*yyv4346 = r.DecodeBytes(*(*[]byte)(yyv4346), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4341)
		} // end switch yys4341
	} // end for yyj4341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4348 int
	var yyb4348 bool
	var yyhl4348 bool = l >= 0
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4351 := &x.ObjectMeta
		yyv4351.CodecDecodeSelf(d)
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4353 := &x.Data
		yym4354 := z.DecBinary()
		_ = yym4354
		if false {
		} else {
			*yyv4353 = r.DecodeBytes(*(*[]byte)(yyv4353), false, false)
		}
	}
	for {
		yyj4348++
		if yyhl4348 {
			yyb4348 = yyj4348 > l
		} else {
			yyb4348 = r.CheckBreak()
		}
		if yyb4348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4355 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4356 := &yyv4355
		yy4356.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4357 := *v
	yyh4357, yyl4357 := z.DecSliceHelperStart()
	var yyc4357 bool
	if yyl4357 == 0 {
		if yyv4357 == nil {
			yyv4357 = []OwnerReference{}
			yyc4357 = true
		} else if len(yyv4357) != 0 {
			yyv4357 = yyv4357[:0]
			yyc4357 = true
		}
	} else if yyl4357 > 0 {
		var yyrr4357, yyrl4357 int
		var yyrt4357 bool
		if yyl4357 > cap(yyv4357) {

			yyrg4357 := len(yyv4357) > 0
			yyv24357 := yyv4357
			yyrl4357, yyrt4357 = z.DecInferLen(yyl4357, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4357 {
				if yyrl4357 <= cap(yyv4357) {
					yyv4357 = yyv4357[:yyrl4357]
				} else {
					yyv4357 = make([]OwnerReference, yyrl4357)
				}
			} else {
				yyv4357 = make([]OwnerReference, yyrl4357)
			}
			yyc4357 = true
			yyrr4357 = len(yyv4357)
			if yyrg4357 {
				copy(yyv4357, yyv24357)
			}
		} else if yyl4357 != len(yyv4357) {
			yyv4357 = yyv4357[:yyl4357]
			yyc4357 = true
		}
		yyj4357 := 0
		for ; yyj4357 < yyrr4357; yyj4357++ {
			yyh4357.ElemContainerState(yyj4357)
			if r.TryDecodeAsNil() {
				yyv4357[yyj4357] = OwnerReference{}
			} else {
				yyv4358 := &yyv4357[yyj4357]
				yyv4358.CodecDecodeSelf(d)
			}

		}
		if yyrt4357 {
			for ; yyj4357 < yyl4357; yyj4357++ {
				yyv4357 = append(yyv4357, OwnerReference{})
				yyh4357.ElemContainerState(yyj4357)
				if r.TryDecodeAsNil() {
					yyv4357[yyj4357] = OwnerReference{}
				} else {
					yyv4359 := &yyv4357[yyj4357]
					yyv4359.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4357 := 0
		for ; !r.CheckBreak(); yyj4357++ {

			if yyj4357 >= len(yyv4357) {
				yyv4357 = append(yyv4357, OwnerReference{}) // var yyz4357 OwnerReference
				yyc4357 = true
			}
			yyh4357.ElemContainerState(yyj4357)
			if yyj4357 < len(yyv4357) {
				if r.TryDecodeAsNil() {
					yyv4357[yyj4357] = OwnerReference{}
				} else {
					yyv4360 := &yyv4357[yyj4357]
					yyv4360.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4357 < len(yyv4357) {
			yyv4357 = yyv4357[:yyj4357]
			yyc4357 = true
		} else if yyj4357 == 0 && yyv4357 == nil {
			yyv4357 = []OwnerReference{}
			yyc4357 = true
		}
	}
	yyh4357.End()
	if yyc4357 {
		*v = yyv4357
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4361 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4361.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4362 := *v
	yyh4362, yyl4362 := z.DecSliceHelperStart()
	var yyc4362 bool
	if yyl4362 == 0 {
		if yyv4362 == nil {
			yyv4362 = []PersistentVolumeAccessMode{}
			yyc4362 = true
		} else if len(yyv4362) != 0 {
			yyv4362 = yyv4362[:0]
			yyc4362 = true
		}
	} else if yyl4362 > 0 {
		var yyrr4362, yyrl4362 int
		var yyrt4362 bool
		if yyl4362 > cap(yyv4362) {

			yyrl4362, yyrt4362 = z.DecInferLen(yyl4362, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4362 {
				if yyrl4362 <= cap(yyv4362) {
					yyv4362 = yyv4362[:yyrl4362]
				} else {
					yyv4362 = make([]PersistentVolumeAccessMode, yyrl4362)
				}
			} else {
				yyv4362 = make([]PersistentVolumeAccessMode, yyrl4362)
			}
			yyc4362 = true
			yyrr4362 = len(yyv4362)
		} else if yyl4362 != len(yyv4362) {
			yyv4362 = yyv4362[:yyl4362]
			yyc4362 = true
		}
		yyj4362 := 0
		for ; yyj4362 < yyrr4362; yyj4362++ {
			yyh4362.ElemContainerState(yyj4362)
			if r.TryDecodeAsNil() {
				yyv4362[yyj4362] = ""
			} else {
				yyv4362[yyj4362] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4362 {
			for ; yyj4362 < yyl4362; yyj4362++ {
				yyv4362 = append(yyv4362, "")
				yyh4362.ElemContainerState(yyj4362)
				if r.TryDecodeAsNil() {
					yyv4362[yyj4362] = ""
				} else {
					yyv4362[yyj4362] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4362 := 0
		for ; !r.CheckBreak(); yyj4362++ {

			if yyj4362 >= len(yyv4362) {
				yyv4362 = append(yyv4362, "") // var yyz4362 PersistentVolumeAccessMode
				yyc4362 = true
			}
			yyh4362.ElemContainerState(yyj4362)
			if yyj4362 < len(yyv4362) {
				if r.TryDecodeAsNil() {
					yyv4362[yyj4362] = ""
				} else {
					yyv4362[yyj4362] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4362 < len(yyv4362) {
			yyv4362 = yyv4362[:yyj4362]
			yyc4362 = true
		} else if yyj4362 == 0 && yyv4362 == nil {
			yyv4362 = []PersistentVolumeAccessMode{}
			yyc4362 = true
		}
	}
	yyh4362.End()
	if yyc4362 {
		*v = yyv4362
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4366 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4367 := &yyv4366
		yy4367.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4368 := *v
	yyh4368, yyl4368 := z.DecSliceHelperStart()
	var yyc4368 bool
	if yyl4368 == 0 {
		if yyv4368 == nil {
			yyv4368 = []PersistentVolume{}
			yyc4368 = true
		} else if len(yyv4368) != 0 {
			yyv4368 = yyv4368[:0]
			yyc4368 = true
		}
	} else if yyl4368 > 0 {
		var yyrr4368, yyrl4368 int
		var yyrt4368 bool
		if yyl4368 > cap(yyv4368) {

			yyrg4368 := len(yyv4368) > 0
			yyv24368 := yyv4368
			yyrl4368, yyrt4368 = z.DecInferLen(yyl4368, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt4368 {
				if yyrl4368 <= cap(yyv4368) {
					yyv4368 = yyv4368[:yyrl4368]
				} else {
					yyv4368 = make([]PersistentVolume, yyrl4368)
				}
			} else {
				yyv4368 = make([]PersistentVolume, yyrl4368)
			}
			yyc4368 = true
			yyrr4368 = len(yyv4368)
			if yyrg4368 {
				copy(yyv4368, yyv24368)
			}
		} else if yyl4368 != len(yyv4368) {
			yyv4368 = yyv4368[:yyl4368]
			yyc4368 = true
		}
		yyj4368 := 0
		for ; yyj4368 < yyrr4368; yyj4368++ {
			yyh4368.ElemContainerState(yyj4368)
			if r.TryDecodeAsNil() {
				yyv4368[yyj4368] = PersistentVolume{}
			} else {
				yyv4369 := &yyv4368[yyj4368]
				yyv4369.CodecDecodeSelf(d)
			}

		}
		if yyrt4368 {
			for ; yyj4368 < yyl4368; yyj4368++ {
				yyv4368 = append(yyv4368, PersistentVolume{})
				yyh4368.ElemContainerState(yyj4368)
				if r.TryDecodeAsNil() {
					yyv4368[yyj4368] = PersistentVolume{}
				} else {
					yyv4370 := &yyv4368[yyj4368]
					yyv4370.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4368 := 0
		for ; !r.CheckBreak(); yyj4368++ {

			if yyj4368 >= len(yyv4368) {
				yyv4368 = append(yyv4368, PersistentVolume{}) // var yyz4368 PersistentVolume
				yyc4368 = true
			}
			yyh4368.ElemContainerState(yyj4368)
			if yyj4368 < len(yyv4368) {
				if r.TryDecodeAsNil() {
					yyv4368[yyj4368] = PersistentVolume{}
				} else {
					yyv4371 := &yyv4368[yyj4368]
					yyv4371.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4368 < len(yyv4368) {
			yyv4368 = yyv4368[:yyj4368]
			yyc4368 = true
		} else if yyj4368 == 0 && yyv4368 == nil {
			yyv4368 = []PersistentVolume{}
			yyc4368 = true
		}
	}
	yyh4368.End()
	if yyc4368 {
		*v = yyv4368
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4372 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4373 := &yyv4372
		yy4373.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4374 := *v
	yyh4374, yyl4374 := z.DecSliceHelperStart()
	var yyc4374 bool
	if yyl4374 == 0 {
		if yyv4374 == nil {
			yyv4374 = []PersistentVolumeClaim{}
			yyc4374 = true
		} else if len(yyv4374) != 0 {
			yyv4374 = yyv4374[:0]
			yyc4374 = true
		}
	} else if yyl4374 > 0 {
		var yyrr4374, yyrl4374 int
		var yyrt4374 bool
		if yyl4374 > cap(yyv4374) {

			yyrg4374 := len(yyv4374) > 0
			yyv24374 := yyv4374
			yyrl4374, yyrt4374 = z.DecInferLen(yyl4374, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4374 {
				if yyrl4374 <= cap(yyv4374) {
					yyv4374 = yyv4374[:yyrl4374]
				} else {
					yyv4374 = make([]PersistentVolumeClaim, yyrl4374)
				}
			} else {
				yyv4374 = make([]PersistentVolumeClaim, yyrl4374)
			}
			yyc4374 = true
			yyrr4374 = len(yyv4374)
			if yyrg4374 {
				copy(yyv4374, yyv24374)
			}
		} else if yyl4374 != len(yyv4374) {
			yyv4374 = yyv4374[:yyl4374]
			yyc4374 = true
		}
		yyj4374 := 0
		for ; yyj4374 < yyrr4374; yyj4374++ {
			yyh4374.ElemContainerState(yyj4374)
			if r.TryDecodeAsNil() {
				yyv4374[yyj4374] = PersistentVolumeClaim{}
			} else {
				yyv4375 := &yyv4374[yyj4374]
				yyv4375.CodecDecodeSelf(d)
			}

		}
		if yyrt4374 {
			for ; yyj4374 < yyl4374; yyj4374++ {
				yyv4374 = append(yyv4374, PersistentVolumeClaim{})
				yyh4374.ElemContainerState(yyj4374)
				if r.TryDecodeAsNil() {
					yyv4374[yyj4374] = PersistentVolumeClaim{}
				} else {
					yyv4376 := &yyv4374[yyj4374]
					yyv4376.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4374 := 0
		for ; !r.CheckBreak(); yyj4374++ {

			if yyj4374 >= len(yyv4374) {
				yyv4374 = append(yyv4374, PersistentVolumeClaim{}) // var yyz4374 PersistentVolumeClaim
				yyc4374 = true
			}
			yyh4374.ElemContainerState(yyj4374)
			if yyj4374 < len(yyv4374) {
				if r.TryDecodeAsNil() {
					yyv4374[yyj4374] = PersistentVolumeClaim{}
				} else {
					yyv4377 := &yyv4374[yyj4374]
					yyv4377.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4374 < len(yyv4374) {
			yyv4374 = yyv4374[:yyj4374]
			yyc4374 = true
		} else if yyj4374 == 0 && yyv4374 == nil {
			yyv4374 = []PersistentVolumeClaim{}
			yyc4374 = true
		}
	}
	yyh4374.End()
	if yyc4374 {
		*v = yyv4374
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4378 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4379 := &yyv4378
		yy4379.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4380 := *v
	yyh4380, yyl4380 := z.DecSliceHelperStart()
	var yyc4380 bool
	if yyl4380 == 0 {
		if yyv4380 == nil {
			yyv4380 = []KeyToPath{}
			yyc4380 = true
		} else if len(yyv4380) != 0 {
			yyv4380 = yyv4380[:0]
			yyc4380 = true
		}
	} else if yyl4380 > 0 {
		var yyrr4380, yyrl4380 int
		var yyrt4380 bool
		if yyl4380 > cap(yyv4380) {

			yyrg4380 := len(yyv4380) > 0
			yyv24380 := yyv4380
			yyrl4380, yyrt4380 = z.DecInferLen(yyl4380, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4380 {
				if yyrl4380 <= cap(yyv4380) {
					yyv4380 = yyv4380[:yyrl4380]
				} else {
					yyv4380 = make([]KeyToPath, yyrl4380)
				}
			} else {
				yyv4380 = make([]KeyToPath, yyrl4380)
			}
			yyc4380 = true
			yyrr4380 = len(yyv4380)
			if yyrg4380 {
				copy(yyv4380, yyv24380)
			}
		} else if yyl4380 != len(yyv4380) {
			yyv4380 = yyv4380[:yyl4380]
			yyc4380 = true
		}
		yyj4380 := 0
		for ; yyj4380 < yyrr4380; yyj4380++ {
			yyh4380.ElemContainerState(yyj4380)
			if r.TryDecodeAsNil() {
				yyv4380[yyj4380] = KeyToPath{}
			} else {
				yyv4381 := &yyv4380[yyj4380]
				yyv4381.CodecDecodeSelf(d)
			}

		}
		if yyrt4380 {
			for ; yyj4380 < yyl4380; yyj4380++ {
				yyv4380 = append(yyv4380, KeyToPath{})
				yyh4380.ElemContainerState(yyj4380)
				if r.TryDecodeAsNil() {
					yyv4380[yyj4380] = KeyToPath{}
				} else {
					yyv4382 := &yyv4380[yyj4380]
					yyv4382.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4380 := 0
		for ; !r.CheckBreak(); yyj4380++ {

			if yyj4380 >= len(yyv4380) {
				yyv4380 = append(yyv4380, KeyToPath{}) // var yyz4380 KeyToPath
				yyc4380 = true
			}
			yyh4380.ElemContainerState(yyj4380)
			if yyj4380 < len(yyv4380) {
				if r.TryDecodeAsNil() {
					yyv4380[yyj4380] = KeyToPath{}
				} else {
					yyv4383 := &yyv4380[yyj4380]
					yyv4383.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4380 < len(yyv4380) {
			yyv4380 = yyv4380[:yyj4380]
			yyc4380 = true
		} else if yyj4380 == 0 && yyv4380 == nil {
			yyv4380 = []KeyToPath{}
			yyc4380 = true
		}
	}
	yyh4380.End()
	if yyc4380 {
		*v = yyv4380
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4384 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4385 := &yyv4384
		yy4385.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4386 := *v
	yyh4386, yyl4386 := z.DecSliceHelperStart()
	var yyc4386 bool
	if yyl4386 == 0 {
		if yyv4386 == nil {
			yyv4386 = []DownwardAPIVolumeFile{}
			yyc4386 = true
		} else if len(yyv4386) != 0 {
			yyv4386 = yyv4386[:0]
			yyc4386 = true
		}
	} else if yyl4386 > 0 {
		var yyrr4386, yyrl4386 int
		var yyrt4386 bool
		if yyl4386 > cap(yyv4386) {

			yyrg4386 := len(yyv4386) > 0
			yyv24386 := yyv4386
			yyrl4386, yyrt4386 = z.DecInferLen(yyl4386, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4386 {
				if yyrl4386 <= cap(yyv4386) {
					yyv4386 = yyv4386[:yyrl4386]
				} else {
					yyv4386 = make([]DownwardAPIVolumeFile, yyrl4386)
				}
			} else {
				yyv4386 = make([]DownwardAPIVolumeFile, yyrl4386)
			}
			yyc4386 = true
			yyrr4386 = len(yyv4386)
			if yyrg4386 {
				copy(yyv4386, yyv24386)
			}
		} else if yyl4386 != len(yyv4386) {
			yyv4386 = yyv4386[:yyl4386]
			yyc4386 = true
		}
		yyj4386 := 0
		for ; yyj4386 < yyrr4386; yyj4386++ {
			yyh4386.ElemContainerState(yyj4386)
			if r.TryDecodeAsNil() {
				yyv4386[yyj4386] = DownwardAPIVolumeFile{}
			} else {
				yyv4387 := &yyv4386[yyj4386]
				yyv4387.CodecDecodeSelf(d)
			}

		}
		if yyrt4386 {
			for ; yyj4386 < yyl4386; yyj4386++ {
				yyv4386 = append(yyv4386, DownwardAPIVolumeFile{})
				yyh4386.ElemContainerState(yyj4386)
				if r.TryDecodeAsNil() {
					yyv4386[yyj4386] = DownwardAPIVolumeFile{}
				} else {
					yyv4388 := &yyv4386[yyj4386]
					yyv4388.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4386 := 0
		for ; !r.CheckBreak(); yyj4386++ {

			if yyj4386 >= len(yyv4386) {
				yyv4386 = append(yyv4386, DownwardAPIVolumeFile{}) // var yyz4386 DownwardAPIVolumeFile
				yyc4386 = true
			}
			yyh4386.ElemContainerState(yyj4386)
			if yyj4386 < len(yyv4386) {
				if r.TryDecodeAsNil() {
					yyv4386[yyj4386] = DownwardAPIVolumeFile{}
				} else {
					yyv4389 := &yyv4386[yyj4386]
					yyv4389.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4386 < len(yyv4386) {
			yyv4386 = yyv4386[:yyj4386]
			yyc4386 = true
		} else if yyj4386 == 0 && yyv4386 == nil {
			yyv4386 = []DownwardAPIVolumeFile{}
			yyc4386 = true
		}
	}
	yyh4386.End()
	if yyc4386 {
		*v = yyv4386
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4390 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4391 := &yyv4390
		yy4391.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4392 := *v
	yyh4392, yyl4392 := z.DecSliceHelperStart()
	var yyc4392 bool
	if yyl4392 == 0 {
		if yyv4392 == nil {
			yyv4392 = []HTTPHeader{}
			yyc4392 = true
		} else if len(yyv4392) != 0 {
			yyv4392 = yyv4392[:0]
			yyc4392 = true
		}
	} else if yyl4392 > 0 {
		var yyrr4392, yyrl4392 int
		var yyrt4392 bool
		if yyl4392 > cap(yyv4392) {

			yyrg4392 := len(yyv4392) > 0
			yyv24392 := yyv4392
			yyrl4392, yyrt4392 = z.DecInferLen(yyl4392, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4392 {
				if yyrl4392 <= cap(yyv4392) {
					yyv4392 = yyv4392[:yyrl4392]
				} else {
					yyv4392 = make([]HTTPHeader, yyrl4392)
				}
			} else {
				yyv4392 = make([]HTTPHeader, yyrl4392)
			}
			yyc4392 = true
			yyrr4392 = len(yyv4392)
			if yyrg4392 {
				copy(yyv4392, yyv24392)
			}
		} else if yyl4392 != len(yyv4392) {
			yyv4392 = yyv4392[:yyl4392]
			yyc4392 = true
		}
		yyj4392 := 0
		for ; yyj4392 < yyrr4392; yyj4392++ {
			yyh4392.ElemContainerState(yyj4392)
			if r.TryDecodeAsNil() {
				yyv4392[yyj4392] = HTTPHeader{}
			} else {
				yyv4393 := &yyv4392[yyj4392]
				yyv4393.CodecDecodeSelf(d)
			}

		}
		if yyrt4392 {
			for ; yyj4392 < yyl4392; yyj4392++ {
				yyv4392 = append(yyv4392, HTTPHeader{})
				yyh4392.ElemContainerState(yyj4392)
				if r.TryDecodeAsNil() {
					yyv4392[yyj4392] = HTTPHeader{}
				} else {
					yyv4394 := &yyv4392[yyj4392]
					yyv4394.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4392 := 0
		for ; !r.CheckBreak(); yyj4392++ {

			if yyj4392 >= len(yyv4392) {
				yyv4392 = append(yyv4392, HTTPHeader{}) // var yyz4392 HTTPHeader
				yyc4392 = true
			}
			yyh4392.ElemContainerState(yyj4392)
			if yyj4392 < len(yyv4392) {
				if r.TryDecodeAsNil() {
					yyv4392[yyj4392] = HTTPHeader{}
				} else {
					yyv4395 := &yyv4392[yyj4392]
					yyv4395.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4392 < len(yyv4392) {
			yyv4392 = yyv4392[:yyj4392]
			yyc4392 = true
		} else if yyj4392 == 0 && yyv4392 == nil {
			yyv4392 = []HTTPHeader{}
			yyc4392 = true
		}
	}
	yyh4392.End()
	if yyc4392 {
		*v = yyv4392
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4396 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4396.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4397 := *v
	yyh4397, yyl4397 := z.DecSliceHelperStart()
	var yyc4397 bool
	if yyl4397 == 0 {
		if yyv4397 == nil {
			yyv4397 = []Capability{}
			yyc4397 = true
		} else if len(yyv4397) != 0 {
			yyv4397 = yyv4397[:0]
			yyc4397 = true
		}
	} else if yyl4397 > 0 {
		var yyrr4397, yyrl4397 int
		var yyrt4397 bool
		if yyl4397 > cap(yyv4397) {

			yyrl4397, yyrt4397 = z.DecInferLen(yyl4397, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4397 {
				if yyrl4397 <= cap(yyv4397) {
					yyv4397 = yyv4397[:yyrl4397]
				} else {
					yyv4397 = make([]Capability, yyrl4397)
				}
			} else {
				yyv4397 = make([]Capability, yyrl4397)
			}
			yyc4397 = true
			yyrr4397 = len(yyv4397)
		} else if yyl4397 != len(yyv4397) {
			yyv4397 = yyv4397[:yyl4397]
			yyc4397 = true
		}
		yyj4397 := 0
		for ; yyj4397 < yyrr4397; yyj4397++ {
			yyh4397.ElemContainerState(yyj4397)
			if r.TryDecodeAsNil() {
				yyv4397[yyj4397] = ""
			} else {
				yyv4397[yyj4397] = Capability(r.DecodeString())
			}

		}
		if yyrt4397 {
			for ; yyj4397 < yyl4397; yyj4397++ {
				yyv4397 = append(yyv4397, "")
				yyh4397.ElemContainerState(yyj4397)
				if r.TryDecodeAsNil() {
					yyv4397[yyj4397] = ""
				} else {
					yyv4397[yyj4397] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4397 := 0
		for ; !r.CheckBreak(); yyj4397++ {

			if yyj4397 >= len(yyv4397) {
				yyv4397 = append(yyv4397, "") // var yyz4397 Capability
				yyc4397 = true
			}
			yyh4397.ElemContainerState(yyj4397)
			if yyj4397 < len(yyv4397) {
				if r.TryDecodeAsNil() {
					yyv4397[yyj4397] = ""
				} else {
					yyv4397[yyj4397] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4397 < len(yyv4397) {
			yyv4397 = yyv4397[:yyj4397]
			yyc4397 = true
		} else if yyj4397 == 0 && yyv4397 == nil {
			yyv4397 = []Capability{}
			yyc4397 = true
		}
	}
	yyh4397.End()
	if yyc4397 {
		*v = yyv4397
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4401 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4402 := &yyv4401
		yy4402.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4403 := *v
	yyh4403, yyl4403 := z.DecSliceHelperStart()
	var yyc4403 bool
	if yyl4403 == 0 {
		if yyv4403 == nil {
			yyv4403 = []ContainerPort{}
			yyc4403 = true
		} else if len(yyv4403) != 0 {
			yyv4403 = yyv4403[:0]
			yyc4403 = true
		}
	} else if yyl4403 > 0 {
		var yyrr4403, yyrl4403 int
		var yyrt4403 bool
		if yyl4403 > cap(yyv4403) {

			yyrg4403 := len(yyv4403) > 0
			yyv24403 := yyv4403
			yyrl4403, yyrt4403 = z.DecInferLen(yyl4403, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4403 {
				if yyrl4403 <= cap(yyv4403) {
					yyv4403 = yyv4403[:yyrl4403]
				} else {
					yyv4403 = make([]ContainerPort, yyrl4403)
				}
			} else {
				yyv4403 = make([]ContainerPort, yyrl4403)
			}
			yyc4403 = true
			yyrr4403 = len(yyv4403)
			if yyrg4403 {
				copy(yyv4403, yyv24403)
			}
		} else if yyl4403 != len(yyv4403) {
			yyv4403 = yyv4403[:yyl4403]
			yyc4403 = true
		}
		yyj4403 := 0
		for ; yyj4403 < yyrr4403; yyj4403++ {
			yyh4403.ElemContainerState(yyj4403)
			if r.TryDecodeAsNil() {
				yyv4403[yyj4403] = ContainerPort{}
			} else {
				yyv4404 := &yyv4403[yyj4403]
				yyv4404.CodecDecodeSelf(d)
			}

		}
		if yyrt4403 {
			for ; yyj4403 < yyl4403; yyj4403++ {
				yyv4403 = append(yyv4403, ContainerPort{})
				yyh4403.ElemContainerState(yyj4403)
				if r.TryDecodeAsNil() {
					yyv4403[yyj4403] = ContainerPort{}
				} else {
					yyv4405 := &yyv4403[yyj4403]
					yyv4405.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4403 := 0
		for ; !r.CheckBreak(); yyj4403++ {

			if yyj4403 >= len(yyv4403) {
				yyv4403 = append(yyv4403, ContainerPort{}) // var yyz4403 ContainerPort
				yyc4403 = true
			}
			yyh4403.ElemContainerState(yyj4403)
			if yyj4403 < len(yyv4403) {
				if r.TryDecodeAsNil() {
					yyv4403[yyj4403] = ContainerPort{}
				} else {
					yyv4406 := &yyv4403[yyj4403]
					yyv4406.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4403 < len(yyv4403) {
			yyv4403 = yyv4403[:yyj4403]
			yyc4403 = true
		} else if yyj4403 == 0 && yyv4403 == nil {
			yyv4403 = []ContainerPort{}
			yyc4403 = true
		}
	}
	yyh4403.End()
	if yyc4403 {
		*v = yyv4403
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4407 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4408 := &yyv4407
		yy4408.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4409 := *v
	yyh4409, yyl4409 := z.DecSliceHelperStart()
	var yyc4409 bool
	if yyl4409 == 0 {
		if yyv4409 == nil {
			yyv4409 = []EnvVar{}
			yyc4409 = true
		} else if len(yyv4409) != 0 {
			yyv4409 = yyv4409[:0]
			yyc4409 = true
		}
	} else if yyl4409 > 0 {
		var yyrr4409, yyrl4409 int
		var yyrt4409 bool
		if yyl4409 > cap(yyv4409) {

			yyrg4409 := len(yyv4409) > 0
			yyv24409 := yyv4409
			yyrl4409, yyrt4409 = z.DecInferLen(yyl4409, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4409 {
				if yyrl4409 <= cap(yyv4409) {
					yyv4409 = yyv4409[:yyrl4409]
				} else {
					yyv4409 = make([]EnvVar, yyrl4409)
				}
			} else {
				yyv4409 = make([]EnvVar, yyrl4409)
			}
			yyc4409 = true
			yyrr4409 = len(yyv4409)
			if yyrg4409 {
				copy(yyv4409, yyv24409)
			}
		} else if yyl4409 != len(yyv4409) {
			yyv4409 = yyv4409[:yyl4409]
			yyc4409 = true
		}
		yyj4409 := 0
		for ; yyj4409 < yyrr4409; yyj4409++ {
			yyh4409.ElemContainerState(yyj4409)
			if r.TryDecodeAsNil() {
				yyv4409[yyj4409] = EnvVar{}
			} else {
				yyv4410 := &yyv4409[yyj4409]
				yyv4410.CodecDecodeSelf(d)
			}

		}
		if yyrt4409 {
			for ; yyj4409 < yyl4409; yyj4409++ {
				yyv4409 = append(yyv4409, EnvVar{})
				yyh4409.ElemContainerState(yyj4409)
				if r.TryDecodeAsNil() {
					yyv4409[yyj4409] = EnvVar{}
				} else {
					yyv4411 := &yyv4409[yyj4409]
					yyv4411.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4409 := 0
		for ; !r.CheckBreak(); yyj4409++ {

			if yyj4409 >= len(yyv4409) {
				yyv4409 = append(yyv4409, EnvVar{}) // var yyz4409 EnvVar
				yyc4409 = true
			}
			yyh4409.ElemContainerState(yyj4409)
			if yyj4409 < len(yyv4409) {
				if r.TryDecodeAsNil() {
					yyv4409[yyj4409] = EnvVar{}
				} else {
					yyv4412 := &yyv4409[yyj4409]
					yyv4412.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4409 < len(yyv4409) {
			yyv4409 = yyv4409[:yyj4409]
			yyc4409 = true
		} else if yyj4409 == 0 && yyv4409 == nil {
			yyv4409 = []EnvVar{}
			yyc4409 = true
		}
	}
	yyh4409.End()
	if yyc4409 {
		*v = yyv4409
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4413 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4414 := &yyv4413
		yy4414.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4415 := *v
	yyh4415, yyl4415 := z.DecSliceHelperStart()
	var yyc4415 bool
	if yyl4415 == 0 {
		if yyv4415 == nil {
			yyv4415 = []VolumeMount{}
			yyc4415 = true
		} else if len(yyv4415) != 0 {
			yyv4415 = yyv4415[:0]
			yyc4415 = true
		}
	} else if yyl4415 > 0 {
		var yyrr4415, yyrl4415 int
		var yyrt4415 bool
		if yyl4415 > cap(yyv4415) {

			yyrg4415 := len(yyv4415) > 0
			yyv24415 := yyv4415
			yyrl4415, yyrt4415 = z.DecInferLen(yyl4415, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4415 {
				if yyrl4415 <= cap(yyv4415) {
					yyv4415 = yyv4415[:yyrl4415]
				} else {
					yyv4415 = make([]VolumeMount, yyrl4415)
				}
			} else {
				yyv4415 = make([]VolumeMount, yyrl4415)
			}
			yyc4415 = true
			yyrr4415 = len(yyv4415)
			if yyrg4415 {
				copy(yyv4415, yyv24415)
			}
		} else if yyl4415 != len(yyv4415) {
			yyv4415 = yyv4415[:yyl4415]
			yyc4415 = true
		}
		yyj4415 := 0
		for ; yyj4415 < yyrr4415; yyj4415++ {
			yyh4415.ElemContainerState(yyj4415)
			if r.TryDecodeAsNil() {
				yyv4415[yyj4415] = VolumeMount{}
			} else {
				yyv4416 := &yyv4415[yyj4415]
				yyv4416.CodecDecodeSelf(d)
			}

		}
		if yyrt4415 {
			for ; yyj4415 < yyl4415; yyj4415++ {
				yyv4415 = append(yyv4415, VolumeMount{})
				yyh4415.ElemContainerState(yyj4415)
				if r.TryDecodeAsNil() {
					yyv4415[yyj4415] = VolumeMount{}
				} else {
					yyv4417 := &yyv4415[yyj4415]
					yyv4417.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4415 := 0
		for ; !r.CheckBreak(); yyj4415++ {

			if yyj4415 >= len(yyv4415) {
				yyv4415 = append(yyv4415, VolumeMount{}) // var yyz4415 VolumeMount
				yyc4415 = true
			}
			yyh4415.ElemContainerState(yyj4415)
			if yyj4415 < len(yyv4415) {
				if r.TryDecodeAsNil() {
					yyv4415[yyj4415] = VolumeMount{}
				} else {
					yyv4418 := &yyv4415[yyj4415]
					yyv4418.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4415 < len(yyv4415) {
			yyv4415 = yyv4415[:yyj4415]
			yyc4415 = true
		} else if yyj4415 == 0 && yyv4415 == nil {
			yyv4415 = []VolumeMount{}
			yyc4415 = true
		}
	}
	yyh4415.End()
	if yyc4415 {
		*v = yyv4415
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4419 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4420 := &yyv4419
		yy4420.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4421 := *v
	yyh4421, yyl4421 := z.DecSliceHelperStart()
	var yyc4421 bool
	if yyl4421 == 0 {
		if yyv4421 == nil {
			yyv4421 = []Pod{}
			yyc4421 = true
		} else if len(yyv4421) != 0 {
			yyv4421 = yyv4421[:0]
			yyc4421 = true
		}
	} else if yyl4421 > 0 {
		var yyrr4421, yyrl4421 int
		var yyrt4421 bool
		if yyl4421 > cap(yyv4421) {

			yyrg4421 := len(yyv4421) > 0
			yyv24421 := yyv4421
			yyrl4421, yyrt4421 = z.DecInferLen(yyl4421, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4421 {
				if yyrl4421 <= cap(yyv4421) {
					yyv4421 = yyv4421[:yyrl4421]
				} else {
					yyv4421 = make([]Pod, yyrl4421)
				}
			} else {
				yyv4421 = make([]Pod, yyrl4421)
			}
			yyc4421 = true
			yyrr4421 = len(yyv4421)
			if yyrg4421 {
				copy(yyv4421, yyv24421)
			}
		} else if yyl4421 != len(yyv4421) {
			yyv4421 = yyv4421[:yyl4421]
			yyc4421 = true
		}
		yyj4421 := 0
		for ; yyj4421 < yyrr4421; yyj4421++ {
			yyh4421.ElemContainerState(yyj4421)
			if r.TryDecodeAsNil() {
				yyv4421[yyj4421] = Pod{}
			} else {
				yyv4422 := &yyv4421[yyj4421]
				yyv4422.CodecDecodeSelf(d)
			}

		}
		if yyrt4421 {
			for ; yyj4421 < yyl4421; yyj4421++ {
				yyv4421 = append(yyv4421, Pod{})
				yyh4421.ElemContainerState(yyj4421)
				if r.TryDecodeAsNil() {
					yyv4421[yyj4421] = Pod{}
				} else {
					yyv4423 := &yyv4421[yyj4421]
					yyv4423.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4421 := 0
		for ; !r.CheckBreak(); yyj4421++ {

			if yyj4421 >= len(yyv4421) {
				yyv4421 = append(yyv4421, Pod{}) // var yyz4421 Pod
				yyc4421 = true
			}
			yyh4421.ElemContainerState(yyj4421)
			if yyj4421 < len(yyv4421) {
				if r.TryDecodeAsNil() {
					yyv4421[yyj4421] = Pod{}
				} else {
					yyv4424 := &yyv4421[yyj4421]
					yyv4424.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4421 < len(yyv4421) {
			yyv4421 = yyv4421[:yyj4421]
			yyc4421 = true
		} else if yyj4421 == 0 && yyv4421 == nil {
			yyv4421 = []Pod{}
			yyc4421 = true
		}
	}
	yyh4421.End()
	if yyc4421 {
		*v = yyv4421
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4425 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4426 := &yyv4425
		yy4426.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4427 := *v
	yyh4427, yyl4427 := z.DecSliceHelperStart()
	var yyc4427 bool
	if yyl4427 == 0 {
		if yyv4427 == nil {
			yyv4427 = []NodeSelectorTerm{}
			yyc4427 = true
		} else if len(yyv4427) != 0 {
			yyv4427 = yyv4427[:0]
			yyc4427 = true
		}
	} else if yyl4427 > 0 {
		var yyrr4427, yyrl4427 int
		var yyrt4427 bool
		if yyl4427 > cap(yyv4427) {

			yyrg4427 := len(yyv4427) > 0
			yyv24427 := yyv4427
			yyrl4427, yyrt4427 = z.DecInferLen(yyl4427, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4427 {
				if yyrl4427 <= cap(yyv4427) {
					yyv4427 = yyv4427[:yyrl4427]
				} else {
					yyv4427 = make([]NodeSelectorTerm, yyrl4427)
				}
			} else {
				yyv4427 = make([]NodeSelectorTerm, yyrl4427)
			}
			yyc4427 = true
			yyrr4427 = len(yyv4427)
			if yyrg4427 {
				copy(yyv4427, yyv24427)
			}
		} else if yyl4427 != len(yyv4427) {
			yyv4427 = yyv4427[:yyl4427]
			yyc4427 = true
		}
		yyj4427 := 0
		for ; yyj4427 < yyrr4427; yyj4427++ {
			yyh4427.ElemContainerState(yyj4427)
			if r.TryDecodeAsNil() {
				yyv4427[yyj4427] = NodeSelectorTerm{}
			} else {
				yyv4428 := &yyv4427[yyj4427]
				yyv4428.CodecDecodeSelf(d)
			}

		}
		if yyrt4427 {
			for ; yyj4427 < yyl4427; yyj4427++ {
				yyv4427 = append(yyv4427, NodeSelectorTerm{})
				yyh4427.ElemContainerState(yyj4427)
				if r.TryDecodeAsNil() {
					yyv4427[yyj4427] = NodeSelectorTerm{}
				} else {
					yyv4429 := &yyv4427[yyj4427]
					yyv4429.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4427 := 0
		for ; !r.CheckBreak(); yyj4427++ {

			if yyj4427 >= len(yyv4427) {
				yyv4427 = append(yyv4427, NodeSelectorTerm{}) // var yyz4427 NodeSelectorTerm
				yyc4427 = true
			}
			yyh4427.ElemContainerState(yyj4427)
			if yyj4427 < len(yyv4427) {
				if r.TryDecodeAsNil() {
					yyv4427[yyj4427] = NodeSelectorTerm{}
				} else {
					yyv4430 := &yyv4427[yyj4427]
					yyv4430.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4427 < len(yyv4427) {
			yyv4427 = yyv4427[:yyj4427]
			yyc4427 = true
		} else if yyj4427 == 0 && yyv4427 == nil {
			yyv4427 = []NodeSelectorTerm{}
			yyc4427 = true
		}
	}
	yyh4427.End()
	if yyc4427 {
		*v = yyv4427
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4431 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4432 := &yyv4431
		yy4432.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4433 := *v
	yyh4433, yyl4433 := z.DecSliceHelperStart()
	var yyc4433 bool
	if yyl4433 == 0 {
		if yyv4433 == nil {
			yyv4433 = []NodeSelectorRequirement{}
			yyc4433 = true
		} else if len(yyv4433) != 0 {
			yyv4433 = yyv4433[:0]
			yyc4433 = true
		}
	} else if yyl4433 > 0 {
		var yyrr4433, yyrl4433 int
		var yyrt4433 bool
		if yyl4433 > cap(yyv4433) {

			yyrg4433 := len(yyv4433) > 0
			yyv24433 := yyv4433
			yyrl4433, yyrt4433 = z.DecInferLen(yyl4433, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4433 {
				if yyrl4433 <= cap(yyv4433) {
					yyv4433 = yyv4433[:yyrl4433]
				} else {
					yyv4433 = make([]NodeSelectorRequirement, yyrl4433)
				}
			} else {
				yyv4433 = make([]NodeSelectorRequirement, yyrl4433)
			}
			yyc4433 = true
			yyrr4433 = len(yyv4433)
			if yyrg4433 {
				copy(yyv4433, yyv24433)
			}
		} else if yyl4433 != len(yyv4433) {
			yyv4433 = yyv4433[:yyl4433]
			yyc4433 = true
		}
		yyj4433 := 0
		for ; yyj4433 < yyrr4433; yyj4433++ {
			yyh4433.ElemContainerState(yyj4433)
			if r.TryDecodeAsNil() {
				yyv4433[yyj4433] = NodeSelectorRequirement{}
			} else {
				yyv4434 := &yyv4433[yyj4433]
				yyv4434.CodecDecodeSelf(d)
			}

		}
		if yyrt4433 {
			for ; yyj4433 < yyl4433; yyj4433++ {
				yyv4433 = append(yyv4433, NodeSelectorRequirement{})
				yyh4433.ElemContainerState(yyj4433)
				if r.TryDecodeAsNil() {
					yyv4433[yyj4433] = NodeSelectorRequirement{}
				} else {
					yyv4435 := &yyv4433[yyj4433]
					yyv4435.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4433 := 0
		for ; !r.CheckBreak(); yyj4433++ {

			if yyj4433 >= len(yyv4433) {
				yyv4433 = append(yyv4433, NodeSelectorRequirement{}) // var yyz4433 NodeSelectorRequirement
				yyc4433 = true
			}
			yyh4433.ElemContainerState(yyj4433)
			if yyj4433 < len(yyv4433) {
				if r.TryDecodeAsNil() {
					yyv4433[yyj4433] = NodeSelectorRequirement{}
				} else {
					yyv4436 := &yyv4433[yyj4433]
					yyv4436.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4433 < len(yyv4433) {
			yyv4433 = yyv4433[:yyj4433]
			yyc4433 = true
		} else if yyj4433 == 0 && yyv4433 == nil {
			yyv4433 = []NodeSelectorRequirement{}
			yyc4433 = true
		}
	}
	yyh4433.End()
	if yyc4433 {
		*v = yyv4433
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4437 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4438 := &yyv4437
		yy4438.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4439 := *v
	yyh4439, yyl4439 := z.DecSliceHelperStart()
	var yyc4439 bool
	if yyl4439 == 0 {
		if yyv4439 == nil {
			yyv4439 = []PodAffinityTerm{}
			yyc4439 = true
		} else if len(yyv4439) != 0 {
			yyv4439 = yyv4439[:0]
			yyc4439 = true
		}
	} else if yyl4439 > 0 {
		var yyrr4439, yyrl4439 int
		var yyrt4439 bool
		if yyl4439 > cap(yyv4439) {

			yyrg4439 := len(yyv4439) > 0
			yyv24439 := yyv4439
			yyrl4439, yyrt4439 = z.DecInferLen(yyl4439, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4439 {
				if yyrl4439 <= cap(yyv4439) {
					yyv4439 = yyv4439[:yyrl4439]
				} else {
					yyv4439 = make([]PodAffinityTerm, yyrl4439)
				}
			} else {
				yyv4439 = make([]PodAffinityTerm, yyrl4439)
			}
			yyc4439 = true
			yyrr4439 = len(yyv4439)
			if yyrg4439 {
				copy(yyv4439, yyv24439)
			}
		} else if yyl4439 != len(yyv4439) {
			yyv4439 = yyv4439[:yyl4439]
			yyc4439 = true
		}
		yyj4439 := 0
		for ; yyj4439 < yyrr4439; yyj4439++ {
			yyh4439.ElemContainerState(yyj4439)
			if r.TryDecodeAsNil() {
				yyv4439[yyj4439] = PodAffinityTerm{}
			} else {
				yyv4440 := &yyv4439[yyj4439]
				yyv4440.CodecDecodeSelf(d)
			}

		}
		if yyrt4439 {
			for ; yyj4439 < yyl4439; yyj4439++ {
				yyv4439 = append(yyv4439, PodAffinityTerm{})
				yyh4439.ElemContainerState(yyj4439)
				if r.TryDecodeAsNil() {
					yyv4439[yyj4439] = PodAffinityTerm{}
				} else {
					yyv4441 := &yyv4439[yyj4439]
					yyv4441.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4439 := 0
		for ; !r.CheckBreak(); yyj4439++ {

			if yyj4439 >= len(yyv4439) {
				yyv4439 = append(yyv4439, PodAffinityTerm{}) // var yyz4439 PodAffinityTerm
				yyc4439 = true
			}
			yyh4439.ElemContainerState(yyj4439)
			if yyj4439 < len(yyv4439) {
				if r.TryDecodeAsNil() {
					yyv4439[yyj4439] = PodAffinityTerm{}
				} else {
					yyv4442 := &yyv4439[yyj4439]
					yyv4442.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4439 < len(yyv4439) {
			yyv4439 = yyv4439[:yyj4439]
			yyc4439 = true
		} else if yyj4439 == 0 && yyv4439 == nil {
			yyv4439 = []PodAffinityTerm{}
			yyc4439 = true
		}
	}
	yyh4439.End()
	if yyc4439 {
		*v = yyv4439
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4443 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4444 := &yyv4443
		yy4444.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4445 := *v
	yyh4445, yyl4445 := z.DecSliceHelperStart()
	var yyc4445 bool
	if yyl4445 == 0 {
		if yyv4445 == nil {
			yyv4445 = []WeightedPodAffinityTerm{}
			yyc4445 = true
		} else if len(yyv4445) != 0 {
			yyv4445 = yyv4445[:0]
			yyc4445 = true
		}
	} else if yyl4445 > 0 {
		var yyrr4445, yyrl4445 int
		var yyrt4445 bool
		if yyl4445 > cap(yyv4445) {

			yyrg4445 := len(yyv4445) > 0
			yyv24445 := yyv4445
			yyrl4445, yyrt4445 = z.DecInferLen(yyl4445, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4445 {
				if yyrl4445 <= cap(yyv4445) {
					yyv4445 = yyv4445[:yyrl4445]
				} else {
					yyv4445 = make([]WeightedPodAffinityTerm, yyrl4445)
				}
			} else {
				yyv4445 = make([]WeightedPodAffinityTerm, yyrl4445)
			}
			yyc4445 = true
			yyrr4445 = len(yyv4445)
			if yyrg4445 {
				copy(yyv4445, yyv24445)
			}
		} else if yyl4445 != len(yyv4445) {
			yyv4445 = yyv4445[:yyl4445]
			yyc4445 = true
		}
		yyj4445 := 0
		for ; yyj4445 < yyrr4445; yyj4445++ {
			yyh4445.ElemContainerState(yyj4445)
			if r.TryDecodeAsNil() {
				yyv4445[yyj4445] = WeightedPodAffinityTerm{}
			} else {
				yyv4446 := &yyv4445[yyj4445]
				yyv4446.CodecDecodeSelf(d)
			}

		}
		if yyrt4445 {
			for ; yyj4445 < yyl4445; yyj4445++ {
				yyv4445 = append(yyv4445, WeightedPodAffinityTerm{})
				yyh4445.ElemContainerState(yyj4445)
				if r.TryDecodeAsNil() {
					yyv4445[yyj4445] = WeightedPodAffinityTerm{}
				} else {
					yyv4447 := &yyv4445[yyj4445]
					yyv4447.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4445 := 0
		for ; !r.CheckBreak(); yyj4445++ {

			if yyj4445 >= len(yyv4445) {
				yyv4445 = append(yyv4445, WeightedPodAffinityTerm{}) // var yyz4445 WeightedPodAffinityTerm
				yyc4445 = true
			}
			yyh4445.ElemContainerState(yyj4445)
			if yyj4445 < len(yyv4445) {
				if r.TryDecodeAsNil() {
					yyv4445[yyj4445] = WeightedPodAffinityTerm{}
				} else {
					yyv4448 := &yyv4445[yyj4445]
					yyv4448.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4445 < len(yyv4445) {
			yyv4445 = yyv4445[:yyj4445]
			yyc4445 = true
		} else if yyj4445 == 0 && yyv4445 == nil {
			yyv4445 = []WeightedPodAffinityTerm{}
			yyc4445 = true
		}
	}
	yyh4445.End()
	if yyc4445 {
		*v = yyv4445
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4449 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4450 := &yyv4449
		yy4450.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4451 := *v
	yyh4451, yyl4451 := z.DecSliceHelperStart()
	var yyc4451 bool
	if yyl4451 == 0 {
		if yyv4451 == nil {
			yyv4451 = []PreferredSchedulingTerm{}
			yyc4451 = true
		} else if len(yyv4451) != 0 {
			yyv4451 = yyv4451[:0]
			yyc4451 = true
		}
	} else if yyl4451 > 0 {
		var yyrr4451, yyrl4451 int
		var yyrt4451 bool
		if yyl4451 > cap(yyv4451) {

			yyrg4451 := len(yyv4451) > 0
			yyv24451 := yyv4451
			yyrl4451, yyrt4451 = z.DecInferLen(yyl4451, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4451 {
				if yyrl4451 <= cap(yyv4451) {
					yyv4451 = yyv4451[:yyrl4451]
				} else {
					yyv4451 = make([]PreferredSchedulingTerm, yyrl4451)
				}
			} else {
				yyv4451 = make([]PreferredSchedulingTerm, yyrl4451)
			}
			yyc4451 = true
			yyrr4451 = len(yyv4451)
			if yyrg4451 {
				copy(yyv4451, yyv24451)
			}
		} else if yyl4451 != len(yyv4451) {
			yyv4451 = yyv4451[:yyl4451]
			yyc4451 = true
		}
		yyj4451 := 0
		for ; yyj4451 < yyrr4451; yyj4451++ {
			yyh4451.ElemContainerState(yyj4451)
			if r.TryDecodeAsNil() {
				yyv4451[yyj4451] = PreferredSchedulingTerm{}
			} else {
				yyv4452 := &yyv4451[yyj4451]
				yyv4452.CodecDecodeSelf(d)
			}

		}
		if yyrt4451 {
			for ; yyj4451 < yyl4451; yyj4451++ {
				yyv4451 = append(yyv4451, PreferredSchedulingTerm{})
				yyh4451.ElemContainerState(yyj4451)
				if r.TryDecodeAsNil() {
					yyv4451[yyj4451] = PreferredSchedulingTerm{}
				} else {
					yyv4453 := &yyv4451[yyj4451]
					yyv4453.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4451 := 0
		for ; !r.CheckBreak(); yyj4451++ {

			if yyj4451 >= len(yyv4451) {
				yyv4451 = append(yyv4451, PreferredSchedulingTerm{}) // var yyz4451 PreferredSchedulingTerm
				yyc4451 = true
			}
			yyh4451.ElemContainerState(yyj4451)
			if yyj4451 < len(yyv4451) {
				if r.TryDecodeAsNil() {
					yyv4451[yyj4451] = PreferredSchedulingTerm{}
				} else {
					yyv4454 := &yyv4451[yyj4451]
					yyv4454.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4451 < len(yyv4451) {
			yyv4451 = yyv4451[:yyj4451]
			yyc4451 = true
		} else if yyj4451 == 0 && yyv4451 == nil {
			yyv4451 = []PreferredSchedulingTerm{}
			yyc4451 = true
		}
	}
	yyh4451.End()
	if yyc4451 {
		*v = yyv4451
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4455 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4456 := &yyv4455
		yy4456.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4457 := *v
	yyh4457, yyl4457 := z.DecSliceHelperStart()
	var yyc4457 bool
	if yyl4457 == 0 {
		if yyv4457 == nil {
			yyv4457 = []Volume{}
			yyc4457 = true
		} else if len(yyv4457) != 0 {
			yyv4457 = yyv4457[:0]
			yyc4457 = true
		}
	} else if yyl4457 > 0 {
		var yyrr4457, yyrl4457 int
		var yyrt4457 bool
		if yyl4457 > cap(yyv4457) {

			yyrg4457 := len(yyv4457) > 0
			yyv24457 := yyv4457
			yyrl4457, yyrt4457 = z.DecInferLen(yyl4457, z.DecBasicHandle().MaxInitLen, 176)
			if yyrt4457 {
				if yyrl4457 <= cap(yyv4457) {
					yyv4457 = yyv4457[:yyrl4457]
				} else {
					yyv4457 = make([]Volume, yyrl4457)
				}
			} else {
				yyv4457 = make([]Volume, yyrl4457)
			}
			yyc4457 = true
			yyrr4457 = len(yyv4457)
			if yyrg4457 {
				copy(yyv4457, yyv24457)
			}
		} else if yyl4457 != len(yyv4457) {
			yyv4457 = yyv4457[:yyl4457]
			yyc4457 = true
		}
		yyj4457 := 0
		for ; yyj4457 < yyrr4457; yyj4457++ {
			yyh4457.ElemContainerState(yyj4457)
			if r.TryDecodeAsNil() {
				yyv4457[yyj4457] = Volume{}
			} else {
				yyv4458 := &yyv4457[yyj4457]
				yyv4458.CodecDecodeSelf(d)
			}

		}
		if yyrt4457 {
			for ; yyj4457 < yyl4457; yyj4457++ {
				yyv4457 = append(yyv4457, Volume{})
				yyh4457.ElemContainerState(yyj4457)
				if r.TryDecodeAsNil() {
					yyv4457[yyj4457] = Volume{}
				} else {
					yyv4459 := &yyv4457[yyj4457]
					yyv4459.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4457 := 0
		for ; !r.CheckBreak(); yyj4457++ {

			if yyj4457 >= len(yyv4457) {
				yyv4457 = append(yyv4457, Volume{}) // var yyz4457 Volume
				yyc4457 = true
			}
			yyh4457.ElemContainerState(yyj4457)
			if yyj4457 < len(yyv4457) {
				if r.TryDecodeAsNil() {
					yyv4457[yyj4457] = Volume{}
				} else {
					yyv4460 := &yyv4457[yyj4457]
					yyv4460.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4457 < len(yyv4457) {
			yyv4457 = yyv4457[:yyj4457]
			yyc4457 = true
		} else if yyj4457 == 0 && yyv4457 == nil {
			yyv4457 = []Volume{}
			yyc4457 = true
		}
	}
	yyh4457.End()
	if yyc4457 {
		*v = yyv4457
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4461 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4462 := &yyv4461
		yy4462.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4463 := *v
	yyh4463, yyl4463 := z.DecSliceHelperStart()
	var yyc4463 bool
	if yyl4463 == 0 {
		if yyv4463 == nil {
			yyv4463 = []Container{}
			yyc4463 = true
		} else if len(yyv4463) != 0 {
			yyv4463 = yyv4463[:0]
			yyc4463 = true
		}
	} else if yyl4463 > 0 {
		var yyrr4463, yyrl4463 int
		var yyrt4463 bool
		if yyl4463 > cap(yyv4463) {

			yyrg4463 := len(yyv4463) > 0
			yyv24463 := yyv4463
			yyrl4463, yyrt4463 = z.DecInferLen(yyl4463, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4463 {
				if yyrl4463 <= cap(yyv4463) {
					yyv4463 = yyv4463[:yyrl4463]
				} else {
					yyv4463 = make([]Container, yyrl4463)
				}
			} else {
				yyv4463 = make([]Container, yyrl4463)
			}
			yyc4463 = true
			yyrr4463 = len(yyv4463)
			if yyrg4463 {
				copy(yyv4463, yyv24463)
			}
		} else if yyl4463 != len(yyv4463) {
			yyv4463 = yyv4463[:yyl4463]
			yyc4463 = true
		}
		yyj4463 := 0
		for ; yyj4463 < yyrr4463; yyj4463++ {
			yyh4463.ElemContainerState(yyj4463)
			if r.TryDecodeAsNil() {
				yyv4463[yyj4463] = Container{}
			} else {
				yyv4464 := &yyv4463[yyj4463]
				yyv4464.CodecDecodeSelf(d)
			}

		}
		if yyrt4463 {
			for ; yyj4463 < yyl4463; yyj4463++ {
				yyv4463 = append(yyv4463, Container{})
				yyh4463.ElemContainerState(yyj4463)
				if r.TryDecodeAsNil() {
					yyv4463[yyj4463] = Container{}
				} else {
					yyv4465 := &yyv4463[yyj4463]
					yyv4465.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4463 := 0
		for ; !r.CheckBreak(); yyj4463++ {

			if yyj4463 >= len(yyv4463) {
				yyv4463 = append(yyv4463, Container{}) // var yyz4463 Container
				yyc4463 = true
			}
			yyh4463.ElemContainerState(yyj4463)
			if yyj4463 < len(yyv4463) {
				if r.TryDecodeAsNil() {
					yyv4463[yyj4463] = Container{}
				} else {
					yyv4466 := &yyv4463[yyj4463]
					yyv4466.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4463 < len(yyv4463) {
			yyv4463 = yyv4463[:yyj4463]
			yyc4463 = true
		} else if yyj4463 == 0 && yyv4463 == nil {
			yyv4463 = []Container{}
			yyc4463 = true
		}
	}
	yyh4463.End()
	if yyc4463 {
		*v = yyv4463
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4467 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4468 := &yyv4467
		yy4468.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4469 := *v
	yyh4469, yyl4469 := z.DecSliceHelperStart()
	var yyc4469 bool
	if yyl4469 == 0 {
		if yyv4469 == nil {
			yyv4469 = []LocalObjectReference{}
			yyc4469 = true
		} else if len(yyv4469) != 0 {
			yyv4469 = yyv4469[:0]
			yyc4469 = true
		}
	} else if yyl4469 > 0 {
		var yyrr4469, yyrl4469 int
		var yyrt4469 bool
		if yyl4469 > cap(yyv4469) {

			yyrg4469 := len(yyv4469) > 0
			yyv24469 := yyv4469
			yyrl4469, yyrt4469 = z.DecInferLen(yyl4469, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4469 {
				if yyrl4469 <= cap(yyv4469) {
					yyv4469 = yyv4469[:yyrl4469]
				} else {
					yyv4469 = make([]LocalObjectReference, yyrl4469)
				}
			} else {
				yyv4469 = make([]LocalObjectReference, yyrl4469)
			}
			yyc4469 = true
			yyrr4469 = len(yyv4469)
			if yyrg4469 {
				copy(yyv4469, yyv24469)
			}
		} else if yyl4469 != len(yyv4469) {
			yyv4469 = yyv4469[:yyl4469]
			yyc4469 = true
		}
		yyj4469 := 0
		for ; yyj4469 < yyrr4469; yyj4469++ {
			yyh4469.ElemContainerState(yyj4469)
			if r.TryDecodeAsNil() {
				yyv4469[yyj4469] = LocalObjectReference{}
			} else {
				yyv4470 := &yyv4469[yyj4469]
				yyv4470.CodecDecodeSelf(d)
			}

		}
		if yyrt4469 {
			for ; yyj4469 < yyl4469; yyj4469++ {
				yyv4469 = append(yyv4469, LocalObjectReference{})
				yyh4469.ElemContainerState(yyj4469)
				if r.TryDecodeAsNil() {
					yyv4469[yyj4469] = LocalObjectReference{}
				} else {
					yyv4471 := &yyv4469[yyj4469]
					yyv4471.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4469 := 0
		for ; !r.CheckBreak(); yyj4469++ {

			if yyj4469 >= len(yyv4469) {
				yyv4469 = append(yyv4469, LocalObjectReference{}) // var yyz4469 LocalObjectReference
				yyc4469 = true
			}
			yyh4469.ElemContainerState(yyj4469)
			if yyj4469 < len(yyv4469) {
				if r.TryDecodeAsNil() {
					yyv4469[yyj4469] = LocalObjectReference{}
				} else {
					yyv4472 := &yyv4469[yyj4469]
					yyv4472.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4469 < len(yyv4469) {
			yyv4469 = yyv4469[:yyj4469]
			yyc4469 = true
		} else if yyj4469 == 0 && yyv4469 == nil {
			yyv4469 = []LocalObjectReference{}
			yyc4469 = true
		}
	}
	yyh4469.End()
	if yyc4469 {
		*v = yyv4469
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4473 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4474 := &yyv4473
		yy4474.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4475 := *v
	yyh4475, yyl4475 := z.DecSliceHelperStart()
	var yyc4475 bool
	if yyl4475 == 0 {
		if yyv4475 == nil {
			yyv4475 = []PodCondition{}
			yyc4475 = true
		} else if len(yyv4475) != 0 {
			yyv4475 = yyv4475[:0]
			yyc4475 = true
		}
	} else if yyl4475 > 0 {
		var yyrr4475, yyrl4475 int
		var yyrt4475 bool
		if yyl4475 > cap(yyv4475) {

			yyrg4475 := len(yyv4475) > 0
			yyv24475 := yyv4475
			yyrl4475, yyrt4475 = z.DecInferLen(yyl4475, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4475 {
				if yyrl4475 <= cap(yyv4475) {
					yyv4475 = yyv4475[:yyrl4475]
				} else {
					yyv4475 = make([]PodCondition, yyrl4475)
				}
			} else {
				yyv4475 = make([]PodCondition, yyrl4475)
			}
			yyc4475 = true
			yyrr4475 = len(yyv4475)
			if yyrg4475 {
				copy(yyv4475, yyv24475)
			}
		} else if yyl4475 != len(yyv4475) {
			yyv4475 = yyv4475[:yyl4475]
			yyc4475 = true
		}
		yyj4475 := 0
		for ; yyj4475 < yyrr4475; yyj4475++ {
			yyh4475.ElemContainerState(yyj4475)
			if r.TryDecodeAsNil() {
				yyv4475[yyj4475] = PodCondition{}
			} else {
				yyv4476 := &yyv4475[yyj4475]
				yyv4476.CodecDecodeSelf(d)
			}

		}
		if yyrt4475 {
			for ; yyj4475 < yyl4475; yyj4475++ {
				yyv4475 = append(yyv4475, PodCondition{})
				yyh4475.ElemContainerState(yyj4475)
				if r.TryDecodeAsNil() {
					yyv4475[yyj4475] = PodCondition{}
				} else {
					yyv4477 := &yyv4475[yyj4475]
					yyv4477.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4475 := 0
		for ; !r.CheckBreak(); yyj4475++ {

			if yyj4475 >= len(yyv4475) {
				yyv4475 = append(yyv4475, PodCondition{}) // var yyz4475 PodCondition
				yyc4475 = true
			}
			yyh4475.ElemContainerState(yyj4475)
			if yyj4475 < len(yyv4475) {
				if r.TryDecodeAsNil() {
					yyv4475[yyj4475] = PodCondition{}
				} else {
					yyv4478 := &yyv4475[yyj4475]
					yyv4478.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4475 < len(yyv4475) {
			yyv4475 = yyv4475[:yyj4475]
			yyc4475 = true
		} else if yyj4475 == 0 && yyv4475 == nil {
			yyv4475 = []PodCondition{}
			yyc4475 = true
		}
	}
	yyh4475.End()
	if yyc4475 {
		*v = yyv4475
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4479 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4480 := &yyv4479
		yy4480.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4481 := *v
	yyh4481, yyl4481 := z.DecSliceHelperStart()
	var yyc4481 bool
	if yyl4481 == 0 {
		if yyv4481 == nil {
			yyv4481 = []ContainerStatus{}
			yyc4481 = true
		} else if len(yyv4481) != 0 {
			yyv4481 = yyv4481[:0]
			yyc4481 = true
		}
	} else if yyl4481 > 0 {
		var yyrr4481, yyrl4481 int
		var yyrt4481 bool
		if yyl4481 > cap(yyv4481) {

			yyrg4481 := len(yyv4481) > 0
			yyv24481 := yyv4481
			yyrl4481, yyrt4481 = z.DecInferLen(yyl4481, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4481 {
				if yyrl4481 <= cap(yyv4481) {
					yyv4481 = yyv4481[:yyrl4481]
				} else {
					yyv4481 = make([]ContainerStatus, yyrl4481)
				}
			} else {
				yyv4481 = make([]ContainerStatus, yyrl4481)
			}
			yyc4481 = true
			yyrr4481 = len(yyv4481)
			if yyrg4481 {
				copy(yyv4481, yyv24481)
			}
		} else if yyl4481 != len(yyv4481) {
			yyv4481 = yyv4481[:yyl4481]
			yyc4481 = true
		}
		yyj4481 := 0
		for ; yyj4481 < yyrr4481; yyj4481++ {
			yyh4481.ElemContainerState(yyj4481)
			if r.TryDecodeAsNil() {
				yyv4481[yyj4481] = ContainerStatus{}
			} else {
				yyv4482 := &yyv4481[yyj4481]
				yyv4482.CodecDecodeSelf(d)
			}

		}
		if yyrt4481 {
			for ; yyj4481 < yyl4481; yyj4481++ {
				yyv4481 = append(yyv4481, ContainerStatus{})
				yyh4481.ElemContainerState(yyj4481)
				if r.TryDecodeAsNil() {
					yyv4481[yyj4481] = ContainerStatus{}
				} else {
					yyv4483 := &yyv4481[yyj4481]
					yyv4483.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4481 := 0
		for ; !r.CheckBreak(); yyj4481++ {

			if yyj4481 >= len(yyv4481) {
				yyv4481 = append(yyv4481, ContainerStatus{}) // var yyz4481 ContainerStatus
				yyc4481 = true
			}
			yyh4481.ElemContainerState(yyj4481)
			if yyj4481 < len(yyv4481) {
				if r.TryDecodeAsNil() {
					yyv4481[yyj4481] = ContainerStatus{}
				} else {
					yyv4484 := &yyv4481[yyj4481]
					yyv4484.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4481 < len(yyv4481) {
			yyv4481 = yyv4481[:yyj4481]
			yyc4481 = true
		} else if yyj4481 == 0 && yyv4481 == nil {
			yyv4481 = []ContainerStatus{}
			yyc4481 = true
		}
	}
	yyh4481.End()
	if yyc4481 {
		*v = yyv4481
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4485 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4486 := &yyv4485
		yy4486.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4487 := *v
	yyh4487, yyl4487 := z.DecSliceHelperStart()
	var yyc4487 bool
	if yyl4487 == 0 {
		if yyv4487 == nil {
			yyv4487 = []PodTemplate{}
			yyc4487 = true
		} else if len(yyv4487) != 0 {
			yyv4487 = yyv4487[:0]
			yyc4487 = true
		}
	} else if yyl4487 > 0 {
		var yyrr4487, yyrl4487 int
		var yyrt4487 bool
		if yyl4487 > cap(yyv4487) {

			yyrg4487 := len(yyv4487) > 0
			yyv24487 := yyv4487
			yyrl4487, yyrt4487 = z.DecInferLen(yyl4487, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4487 {
				if yyrl4487 <= cap(yyv4487) {
					yyv4487 = yyv4487[:yyrl4487]
				} else {
					yyv4487 = make([]PodTemplate, yyrl4487)
				}
			} else {
				yyv4487 = make([]PodTemplate, yyrl4487)
			}
			yyc4487 = true
			yyrr4487 = len(yyv4487)
			if yyrg4487 {
				copy(yyv4487, yyv24487)
			}
		} else if yyl4487 != len(yyv4487) {
			yyv4487 = yyv4487[:yyl4487]
			yyc4487 = true
		}
		yyj4487 := 0
		for ; yyj4487 < yyrr4487; yyj4487++ {
			yyh4487.ElemContainerState(yyj4487)
			if r.TryDecodeAsNil() {
				yyv4487[yyj4487] = PodTemplate{}
			} else {
				yyv4488 := &yyv4487[yyj4487]
				yyv4488.CodecDecodeSelf(d)
			}

		}
		if yyrt4487 {
			for ; yyj4487 < yyl4487; yyj4487++ {
				yyv4487 = append(yyv4487, PodTemplate{})
				yyh4487.ElemContainerState(yyj4487)
				if r.TryDecodeAsNil() {
					yyv4487[yyj4487] = PodTemplate{}
				} else {
					yyv4489 := &yyv4487[yyj4487]
					yyv4489.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4487 := 0
		for ; !r.CheckBreak(); yyj4487++ {

			if yyj4487 >= len(yyv4487) {
				yyv4487 = append(yyv4487, PodTemplate{}) // var yyz4487 PodTemplate
				yyc4487 = true
			}
			yyh4487.ElemContainerState(yyj4487)
			if yyj4487 < len(yyv4487) {
				if r.TryDecodeAsNil() {
					yyv4487[yyj4487] = PodTemplate{}
				} else {
					yyv4490 := &yyv4487[yyj4487]
					yyv4490.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4487 < len(yyv4487) {
			yyv4487 = yyv4487[:yyj4487]
			yyc4487 = true
		} else if yyj4487 == 0 && yyv4487 == nil {
			yyv4487 = []PodTemplate{}
			yyc4487 = true
		}
	}
	yyh4487.End()
	if yyc4487 {
		*v = yyv4487
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4491 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4492 := &yyv4491
		yy4492.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4493 := *v
	yyh4493, yyl4493 := z.DecSliceHelperStart()
	var yyc4493 bool
	if yyl4493 == 0 {
		if yyv4493 == nil {
			yyv4493 = []ReplicationController{}
			yyc4493 = true
		} else if len(yyv4493) != 0 {
			yyv4493 = yyv4493[:0]
			yyc4493 = true
		}
	} else if yyl4493 > 0 {
		var yyrr4493, yyrl4493 int
		var yyrt4493 bool
		if yyl4493 > cap(yyv4493) {

			yyrg4493 := len(yyv4493) > 0
			yyv24493 := yyv4493
			yyrl4493, yyrt4493 = z.DecInferLen(yyl4493, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4493 {
				if yyrl4493 <= cap(yyv4493) {
					yyv4493 = yyv4493[:yyrl4493]
				} else {
					yyv4493 = make([]ReplicationController, yyrl4493)
				}
			} else {
				yyv4493 = make([]ReplicationController, yyrl4493)
			}
			yyc4493 = true
			yyrr4493 = len(yyv4493)
			if yyrg4493 {
				copy(yyv4493, yyv24493)
			}
		} else if yyl4493 != len(yyv4493) {
			yyv4493 = yyv4493[:yyl4493]
			yyc4493 = true
		}
		yyj4493 := 0
		for ; yyj4493 < yyrr4493; yyj4493++ {
			yyh4493.ElemContainerState(yyj4493)
			if r.TryDecodeAsNil() {
				yyv4493[yyj4493] = ReplicationController{}
			} else {
				yyv4494 := &yyv4493[yyj4493]
				yyv4494.CodecDecodeSelf(d)
			}

		}
		if yyrt4493 {
			for ; yyj4493 < yyl4493; yyj4493++ {
				yyv4493 = append(yyv4493, ReplicationController{})
				yyh4493.ElemContainerState(yyj4493)
				if r.TryDecodeAsNil() {
					yyv4493[yyj4493] = ReplicationController{}
				} else {
					yyv4495 := &yyv4493[yyj4493]
					yyv4495.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4493 := 0
		for ; !r.CheckBreak(); yyj4493++ {

			if yyj4493 >= len(yyv4493) {
				yyv4493 = append(yyv4493, ReplicationController{}) // var yyz4493 ReplicationController
				yyc4493 = true
			}
			yyh4493.ElemContainerState(yyj4493)
			if yyj4493 < len(yyv4493) {
				if r.TryDecodeAsNil() {
					yyv4493[yyj4493] = ReplicationController{}
				} else {
					yyv4496 := &yyv4493[yyj4493]
					yyv4496.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4493 < len(yyv4493) {
			yyv4493 = yyv4493[:yyj4493]
			yyc4493 = true
		} else if yyj4493 == 0 && yyv4493 == nil {
			yyv4493 = []ReplicationController{}
			yyc4493 = true
		}
	}
	yyh4493.End()
	if yyc4493 {
		*v = yyv4493
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4497 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4498 := &yyv4497
		yy4498.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4499 := *v
	yyh4499, yyl4499 := z.DecSliceHelperStart()
	var yyc4499 bool
	if yyl4499 == 0 {
		if yyv4499 == nil {
			yyv4499 = []Service{}
			yyc4499 = true
		} else if len(yyv4499) != 0 {
			yyv4499 = yyv4499[:0]
			yyc4499 = true
		}
	} else if yyl4499 > 0 {
		var yyrr4499, yyrl4499 int
		var yyrt4499 bool
		if yyl4499 > cap(yyv4499) {

			yyrg4499 := len(yyv4499) > 0
			yyv24499 := yyv4499
			yyrl4499, yyrt4499 = z.DecInferLen(yyl4499, z.DecBasicHandle().MaxInitLen, 408)
			if yyrt4499 {
				if yyrl4499 <= cap(yyv4499) {
					yyv4499 = yyv4499[:yyrl4499]
				} else {
					yyv4499 = make([]Service, yyrl4499)
				}
			} else {
				yyv4499 = make([]Service, yyrl4499)
			}
			yyc4499 = true
			yyrr4499 = len(yyv4499)
			if yyrg4499 {
				copy(yyv4499, yyv24499)
			}
		} else if yyl4499 != len(yyv4499) {
			yyv4499 = yyv4499[:yyl4499]
			yyc4499 = true
		}
		yyj4499 := 0
		for ; yyj4499 < yyrr4499; yyj4499++ {
			yyh4499.ElemContainerState(yyj4499)
			if r.TryDecodeAsNil() {
				yyv4499[yyj4499] = Service{}
			} else {
				yyv4500 := &yyv4499[yyj4499]
				yyv4500.CodecDecodeSelf(d)
			}

		}
		if yyrt4499 {
			for ; yyj4499 < yyl4499; yyj4499++ {
				yyv4499 = append(yyv4499, Service{})
				yyh4499.ElemContainerState(yyj4499)
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = Service{}
				} else {
					yyv4501 := &yyv4499[yyj4499]
					yyv4501.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4499 := 0
		for ; !r.CheckBreak(); yyj4499++ {

			if yyj4499 >= len(yyv4499) {
				yyv4499 = append(yyv4499, Service{}) // var yyz4499 Service
				yyc4499 = true
			}
			yyh4499.ElemContainerState(yyj4499)
			if yyj4499 < len(yyv4499) {
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = Service{}
				} else {
					yyv4502 := &yyv4499[yyj4499]
					yyv4502.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4499 < len(yyv4499) {
			yyv4499 = yyv4499[:yyj4499]
			yyc4499 = true
		} else if yyj4499 == 0 && yyv4499 == nil {
			yyv4499 = []Service{}
			yyc4499 = true
		}
	}
	yyh4499.End()
	if yyc4499 {
		*v = yyv4499
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4503 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4504 := &yyv4503
		yy4504.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4505 := *v
	yyh4505, yyl4505 := z.DecSliceHelperStart()
	var yyc4505 bool
	if yyl4505 == 0 {
		if yyv4505 == nil {
			yyv4505 = []LoadBalancerIngress{}
			yyc4505 = true
		} else if len(yyv4505) != 0 {
			yyv4505 = yyv4505[:0]
			yyc4505 = true
		}
	} else if yyl4505 > 0 {
		var yyrr4505, yyrl4505 int
		var yyrt4505 bool
		if yyl4505 > cap(yyv4505) {

			yyrg4505 := len(yyv4505) > 0
			yyv24505 := yyv4505
			yyrl4505, yyrt4505 = z.DecInferLen(yyl4505, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4505 {
				if yyrl4505 <= cap(yyv4505) {
					yyv4505 = yyv4505[:yyrl4505]
				} else {
					yyv4505 = make([]LoadBalancerIngress, yyrl4505)
				}
			} else {
				yyv4505 = make([]LoadBalancerIngress, yyrl4505)
			}
			yyc4505 = true
			yyrr4505 = len(yyv4505)
			if yyrg4505 {
				copy(yyv4505, yyv24505)
			}
		} else if yyl4505 != len(yyv4505) {
			yyv4505 = yyv4505[:yyl4505]
			yyc4505 = true
		}
		yyj4505 := 0
		for ; yyj4505 < yyrr4505; yyj4505++ {
			yyh4505.ElemContainerState(yyj4505)
			if r.TryDecodeAsNil() {
				yyv4505[yyj4505] = LoadBalancerIngress{}
			} else {
				yyv4506 := &yyv4505[yyj4505]
				yyv4506.CodecDecodeSelf(d)
			}

		}
		if yyrt4505 {
			for ; yyj4505 < yyl4505; yyj4505++ {
				yyv4505 = append(yyv4505, LoadBalancerIngress{})
				yyh4505.ElemContainerState(yyj4505)
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = LoadBalancerIngress{}
				} else {
					yyv4507 := &yyv4505[yyj4505]
					yyv4507.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4505 := 0
		for ; !r.CheckBreak(); yyj4505++ {

			if yyj4505 >= len(yyv4505) {
				yyv4505 = append(yyv4505, LoadBalancerIngress{}) // var yyz4505 LoadBalancerIngress
				yyc4505 = true
			}
			yyh4505.ElemContainerState(yyj4505)
			if yyj4505 < len(yyv4505) {
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = LoadBalancerIngress{}
				} else {
					yyv4508 := &yyv4505[yyj4505]
					yyv4508.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4505 < len(yyv4505) {
			yyv4505 = yyv4505[:yyj4505]
			yyc4505 = true
		} else if yyj4505 == 0 && yyv4505 == nil {
			yyv4505 = []LoadBalancerIngress{}
			yyc4505 = true
		}
	}
	yyh4505.End()
	if yyc4505 {
		*v = yyv4505
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4509 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4510 := &yyv4509
		yy4510.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4511 := *v
	yyh4511, yyl4511 := z.DecSliceHelperStart()
	var yyc4511 bool
	if yyl4511 == 0 {
		if yyv4511 == nil {
			yyv4511 = []ServicePort{}
			yyc4511 = true
		} else if len(yyv4511) != 0 {
			yyv4511 = yyv4511[:0]
			yyc4511 = true
		}
	} else if yyl4511 > 0 {
		var yyrr4511, yyrl4511 int
		var yyrt4511 bool
		if yyl4511 > cap(yyv4511) {

			yyrg4511 := len(yyv4511) > 0
			yyv24511 := yyv4511
			yyrl4511, yyrt4511 = z.DecInferLen(yyl4511, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4511 {
				if yyrl4511 <= cap(yyv4511) {
					yyv4511 = yyv4511[:yyrl4511]
				} else {
					yyv4511 = make([]ServicePort, yyrl4511)
				}
			} else {
				yyv4511 = make([]ServicePort, yyrl4511)
			}
			yyc4511 = true
			yyrr4511 = len(yyv4511)
			if yyrg4511 {
				copy(yyv4511, yyv24511)
			}
		} else if yyl4511 != len(yyv4511) {
			yyv4511 = yyv4511[:yyl4511]
			yyc4511 = true
		}
		yyj4511 := 0
		for ; yyj4511 < yyrr4511; yyj4511++ {
			yyh4511.ElemContainerState(yyj4511)
			if r.TryDecodeAsNil() {
				yyv4511[yyj4511] = ServicePort{}
			} else {
				yyv4512 := &yyv4511[yyj4511]
				yyv4512.CodecDecodeSelf(d)
			}

		}
		if yyrt4511 {
			for ; yyj4511 < yyl4511; yyj4511++ {
				yyv4511 = append(yyv4511, ServicePort{})
				yyh4511.ElemContainerState(yyj4511)
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = ServicePort{}
				} else {
					yyv4513 := &yyv4511[yyj4511]
					yyv4513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4511 := 0
		for ; !r.CheckBreak(); yyj4511++ {

			if yyj4511 >= len(yyv4511) {
				yyv4511 = append(yyv4511, ServicePort{}) // var yyz4511 ServicePort
				yyc4511 = true
			}
			yyh4511.ElemContainerState(yyj4511)
			if yyj4511 < len(yyv4511) {
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = ServicePort{}
				} else {
					yyv4514 := &yyv4511[yyj4511]
					yyv4514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4511 < len(yyv4511) {
			yyv4511 = yyv4511[:yyj4511]
			yyc4511 = true
		} else if yyj4511 == 0 && yyv4511 == nil {
			yyv4511 = []ServicePort{}
			yyc4511 = true
		}
	}
	yyh4511.End()
	if yyc4511 {
		*v = yyv4511
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4515 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4516 := &yyv4515
		yy4516.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4517 := *v
	yyh4517, yyl4517 := z.DecSliceHelperStart()
	var yyc4517 bool
	if yyl4517 == 0 {
		if yyv4517 == nil {
			yyv4517 = []ObjectReference{}
			yyc4517 = true
		} else if len(yyv4517) != 0 {
			yyv4517 = yyv4517[:0]
			yyc4517 = true
		}
	} else if yyl4517 > 0 {
		var yyrr4517, yyrl4517 int
		var yyrt4517 bool
		if yyl4517 > cap(yyv4517) {

			yyrg4517 := len(yyv4517) > 0
			yyv24517 := yyv4517
			yyrl4517, yyrt4517 = z.DecInferLen(yyl4517, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4517 {
				if yyrl4517 <= cap(yyv4517) {
					yyv4517 = yyv4517[:yyrl4517]
				} else {
					yyv4517 = make([]ObjectReference, yyrl4517)
				}
			} else {
				yyv4517 = make([]ObjectReference, yyrl4517)
			}
			yyc4517 = true
			yyrr4517 = len(yyv4517)
			if yyrg4517 {
				copy(yyv4517, yyv24517)
			}
		} else if yyl4517 != len(yyv4517) {
			yyv4517 = yyv4517[:yyl4517]
			yyc4517 = true
		}
		yyj4517 := 0
		for ; yyj4517 < yyrr4517; yyj4517++ {
			yyh4517.ElemContainerState(yyj4517)
			if r.TryDecodeAsNil() {
				yyv4517[yyj4517] = ObjectReference{}
			} else {
				yyv4518 := &yyv4517[yyj4517]
				yyv4518.CodecDecodeSelf(d)
			}

		}
		if yyrt4517 {
			for ; yyj4517 < yyl4517; yyj4517++ {
				yyv4517 = append(yyv4517, ObjectReference{})
				yyh4517.ElemContainerState(yyj4517)
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = ObjectReference{}
				} else {
					yyv4519 := &yyv4517[yyj4517]
					yyv4519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4517 := 0
		for ; !r.CheckBreak(); yyj4517++ {

			if yyj4517 >= len(yyv4517) {
				yyv4517 = append(yyv4517, ObjectReference{}) // var yyz4517 ObjectReference
				yyc4517 = true
			}
			yyh4517.ElemContainerState(yyj4517)
			if yyj4517 < len(yyv4517) {
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = ObjectReference{}
				} else {
					yyv4520 := &yyv4517[yyj4517]
					yyv4520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4517 < len(yyv4517) {
			yyv4517 = yyv4517[:yyj4517]
			yyc4517 = true
		} else if yyj4517 == 0 && yyv4517 == nil {
			yyv4517 = []ObjectReference{}
			yyc4517 = true
		}
	}
	yyh4517.End()
	if yyc4517 {
		*v = yyv4517
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4521 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4522 := &yyv4521
		yy4522.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4523 := *v
	yyh4523, yyl4523 := z.DecSliceHelperStart()
	var yyc4523 bool
	if yyl4523 == 0 {
		if yyv4523 == nil {
			yyv4523 = []ServiceAccount{}
			yyc4523 = true
		} else if len(yyv4523) != 0 {
			yyv4523 = yyv4523[:0]
			yyc4523 = true
		}
	} else if yyl4523 > 0 {
		var yyrr4523, yyrl4523 int
		var yyrt4523 bool
		if yyl4523 > cap(yyv4523) {

			yyrg4523 := len(yyv4523) > 0
			yyv24523 := yyv4523
			yyrl4523, yyrt4523 = z.DecInferLen(yyl4523, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4523 {
				if yyrl4523 <= cap(yyv4523) {
					yyv4523 = yyv4523[:yyrl4523]
				} else {
					yyv4523 = make([]ServiceAccount, yyrl4523)
				}
			} else {
				yyv4523 = make([]ServiceAccount, yyrl4523)
			}
			yyc4523 = true
			yyrr4523 = len(yyv4523)
			if yyrg4523 {
				copy(yyv4523, yyv24523)
			}
		} else if yyl4523 != len(yyv4523) {
			yyv4523 = yyv4523[:yyl4523]
			yyc4523 = true
		}
		yyj4523 := 0
		for ; yyj4523 < yyrr4523; yyj4523++ {
			yyh4523.ElemContainerState(yyj4523)
			if r.TryDecodeAsNil() {
				yyv4523[yyj4523] = ServiceAccount{}
			} else {
				yyv4524 := &yyv4523[yyj4523]
				yyv4524.CodecDecodeSelf(d)
			}

		}
		if yyrt4523 {
			for ; yyj4523 < yyl4523; yyj4523++ {
				yyv4523 = append(yyv4523, ServiceAccount{})
				yyh4523.ElemContainerState(yyj4523)
				if r.TryDecodeAsNil() {
					yyv4523[yyj4523] = ServiceAccount{}
				} else {
					yyv4525 := &yyv4523[yyj4523]
					yyv4525.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4523 := 0
		for ; !r.CheckBreak(); yyj4523++ {

			if yyj4523 >= len(yyv4523) {
				yyv4523 = append(yyv4523, ServiceAccount{}) // var yyz4523 ServiceAccount
				yyc4523 = true
			}
			yyh4523.ElemContainerState(yyj4523)
			if yyj4523 < len(yyv4523) {
				if r.TryDecodeAsNil() {
					yyv4523[yyj4523] = ServiceAccount{}
				} else {
					yyv4526 := &yyv4523[yyj4523]
					yyv4526.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4523 < len(yyv4523) {
			yyv4523 = yyv4523[:yyj4523]
			yyc4523 = true
		} else if yyj4523 == 0 && yyv4523 == nil {
			yyv4523 = []ServiceAccount{}
			yyc4523 = true
		}
	}
	yyh4523.End()
	if yyc4523 {
		*v = yyv4523
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4527 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4528 := &yyv4527
		yy4528.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4529 := *v
	yyh4529, yyl4529 := z.DecSliceHelperStart()
	var yyc4529 bool
	if yyl4529 == 0 {
		if yyv4529 == nil {
			yyv4529 = []EndpointSubset{}
			yyc4529 = true
		} else if len(yyv4529) != 0 {
			yyv4529 = yyv4529[:0]
			yyc4529 = true
		}
	} else if yyl4529 > 0 {
		var yyrr4529, yyrl4529 int
		var yyrt4529 bool
		if yyl4529 > cap(yyv4529) {

			yyrg4529 := len(yyv4529) > 0
			yyv24529 := yyv4529
			yyrl4529, yyrt4529 = z.DecInferLen(yyl4529, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4529 {
				if yyrl4529 <= cap(yyv4529) {
					yyv4529 = yyv4529[:yyrl4529]
				} else {
					yyv4529 = make([]EndpointSubset, yyrl4529)
				}
			} else {
				yyv4529 = make([]EndpointSubset, yyrl4529)
			}
			yyc4529 = true
			yyrr4529 = len(yyv4529)
			if yyrg4529 {
				copy(yyv4529, yyv24529)
			}
		} else if yyl4529 != len(yyv4529) {
			yyv4529 = yyv4529[:yyl4529]
			yyc4529 = true
		}
		yyj4529 := 0
		for ; yyj4529 < yyrr4529; yyj4529++ {
			yyh4529.ElemContainerState(yyj4529)
			if r.TryDecodeAsNil() {
				yyv4529[yyj4529] = EndpointSubset{}
			} else {
				yyv4530 := &yyv4529[yyj4529]
				yyv4530.CodecDecodeSelf(d)
			}

		}
		if yyrt4529 {
			for ; yyj4529 < yyl4529; yyj4529++ {
				yyv4529 = append(yyv4529, EndpointSubset{})
				yyh4529.ElemContainerState(yyj4529)
				if r.TryDecodeAsNil() {
					yyv4529[yyj4529] = EndpointSubset{}
				} else {
					yyv4531 := &yyv4529[yyj4529]
					yyv4531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4529 := 0
		for ; !r.CheckBreak(); yyj4529++ {

			if yyj4529 >= len(yyv4529) {
				yyv4529 = append(yyv4529, EndpointSubset{}) // var yyz4529 EndpointSubset
				yyc4529 = true
			}
			yyh4529.ElemContainerState(yyj4529)
			if yyj4529 < len(yyv4529) {
				if r.TryDecodeAsNil() {
					yyv4529[yyj4529] = EndpointSubset{}
				} else {
					yyv4532 := &yyv4529[yyj4529]
					yyv4532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4529 < len(yyv4529) {
			yyv4529 = yyv4529[:yyj4529]
			yyc4529 = true
		} else if yyj4529 == 0 && yyv4529 == nil {
			yyv4529 = []EndpointSubset{}
			yyc4529 = true
		}
	}
	yyh4529.End()
	if yyc4529 {
		*v = yyv4529
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4534 := &yyv4533
		yy4534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4535 := *v
	yyh4535, yyl4535 := z.DecSliceHelperStart()
	var yyc4535 bool
	if yyl4535 == 0 {
		if yyv4535 == nil {
			yyv4535 = []EndpointAddress{}
			yyc4535 = true
		} else if len(yyv4535) != 0 {
			yyv4535 = yyv4535[:0]
			yyc4535 = true
		}
	} else if yyl4535 > 0 {
		var yyrr4535, yyrl4535 int
		var yyrt4535 bool
		if yyl4535 > cap(yyv4535) {

			yyrg4535 := len(yyv4535) > 0
			yyv24535 := yyv4535
			yyrl4535, yyrt4535 = z.DecInferLen(yyl4535, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4535 {
				if yyrl4535 <= cap(yyv4535) {
					yyv4535 = yyv4535[:yyrl4535]
				} else {
					yyv4535 = make([]EndpointAddress, yyrl4535)
				}
			} else {
				yyv4535 = make([]EndpointAddress, yyrl4535)
			}
			yyc4535 = true
			yyrr4535 = len(yyv4535)
			if yyrg4535 {
				copy(yyv4535, yyv24535)
			}
		} else if yyl4535 != len(yyv4535) {
			yyv4535 = yyv4535[:yyl4535]
			yyc4535 = true
		}
		yyj4535 := 0
		for ; yyj4535 < yyrr4535; yyj4535++ {
			yyh4535.ElemContainerState(yyj4535)
			if r.TryDecodeAsNil() {
				yyv4535[yyj4535] = EndpointAddress{}
			} else {
				yyv4536 := &yyv4535[yyj4535]
				yyv4536.CodecDecodeSelf(d)
			}

		}
		if yyrt4535 {
			for ; yyj4535 < yyl4535; yyj4535++ {
				yyv4535 = append(yyv4535, EndpointAddress{})
				yyh4535.ElemContainerState(yyj4535)
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = EndpointAddress{}
				} else {
					yyv4537 := &yyv4535[yyj4535]
					yyv4537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4535 := 0
		for ; !r.CheckBreak(); yyj4535++ {

			if yyj4535 >= len(yyv4535) {
				yyv4535 = append(yyv4535, EndpointAddress{}) // var yyz4535 EndpointAddress
				yyc4535 = true
			}
			yyh4535.ElemContainerState(yyj4535)
			if yyj4535 < len(yyv4535) {
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = EndpointAddress{}
				} else {
					yyv4538 := &yyv4535[yyj4535]
					yyv4538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4535 < len(yyv4535) {
			yyv4535 = yyv4535[:yyj4535]
			yyc4535 = true
		} else if yyj4535 == 0 && yyv4535 == nil {
			yyv4535 = []EndpointAddress{}
			yyc4535 = true
		}
	}
	yyh4535.End()
	if yyc4535 {
		*v = yyv4535
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4540 := &yyv4539
		yy4540.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4541 := *v
	yyh4541, yyl4541 := z.DecSliceHelperStart()
	var yyc4541 bool
	if yyl4541 == 0 {
		if yyv4541 == nil {
			yyv4541 = []EndpointPort{}
			yyc4541 = true
		} else if len(yyv4541) != 0 {
			yyv4541 = yyv4541[:0]
			yyc4541 = true
		}
	} else if yyl4541 > 0 {
		var yyrr4541, yyrl4541 int
		var yyrt4541 bool
		if yyl4541 > cap(yyv4541) {

			yyrg4541 := len(yyv4541) > 0
			yyv24541 := yyv4541
			yyrl4541, yyrt4541 = z.DecInferLen(yyl4541, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4541 {
				if yyrl4541 <= cap(yyv4541) {
					yyv4541 = yyv4541[:yyrl4541]
				} else {
					yyv4541 = make([]EndpointPort, yyrl4541)
				}
			} else {
				yyv4541 = make([]EndpointPort, yyrl4541)
			}
			yyc4541 = true
			yyrr4541 = len(yyv4541)
			if yyrg4541 {
				copy(yyv4541, yyv24541)
			}
		} else if yyl4541 != len(yyv4541) {
			yyv4541 = yyv4541[:yyl4541]
			yyc4541 = true
		}
		yyj4541 := 0
		for ; yyj4541 < yyrr4541; yyj4541++ {
			yyh4541.ElemContainerState(yyj4541)
			if r.TryDecodeAsNil() {
				yyv4541[yyj4541] = EndpointPort{}
			} else {
				yyv4542 := &yyv4541[yyj4541]
				yyv4542.CodecDecodeSelf(d)
			}

		}
		if yyrt4541 {
			for ; yyj4541 < yyl4541; yyj4541++ {
				yyv4541 = append(yyv4541, EndpointPort{})
				yyh4541.ElemContainerState(yyj4541)
				if r.TryDecodeAsNil() {
					yyv4541[yyj4541] = EndpointPort{}
				} else {
					yyv4543 := &yyv4541[yyj4541]
					yyv4543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4541 := 0
		for ; !r.CheckBreak(); yyj4541++ {

			if yyj4541 >= len(yyv4541) {
				yyv4541 = append(yyv4541, EndpointPort{}) // var yyz4541 EndpointPort
				yyc4541 = true
			}
			yyh4541.ElemContainerState(yyj4541)
			if yyj4541 < len(yyv4541) {
				if r.TryDecodeAsNil() {
					yyv4541[yyj4541] = EndpointPort{}
				} else {
					yyv4544 := &yyv4541[yyj4541]
					yyv4544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4541 < len(yyv4541) {
			yyv4541 = yyv4541[:yyj4541]
			yyc4541 = true
		} else if yyj4541 == 0 && yyv4541 == nil {
			yyv4541 = []EndpointPort{}
			yyc4541 = true
		}
	}
	yyh4541.End()
	if yyc4541 {
		*v = yyv4541
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4545 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4546 := &yyv4545
		yy4546.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4547 := *v
	yyh4547, yyl4547 := z.DecSliceHelperStart()
	var yyc4547 bool
	if yyl4547 == 0 {
		if yyv4547 == nil {
			yyv4547 = []Endpoints{}
			yyc4547 = true
		} else if len(yyv4547) != 0 {
			yyv4547 = yyv4547[:0]
			yyc4547 = true
		}
	} else if yyl4547 > 0 {
		var yyrr4547, yyrl4547 int
		var yyrt4547 bool
		if yyl4547 > cap(yyv4547) {

			yyrg4547 := len(yyv4547) > 0
			yyv24547 := yyv4547
			yyrl4547, yyrt4547 = z.DecInferLen(yyl4547, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4547 {
				if yyrl4547 <= cap(yyv4547) {
					yyv4547 = yyv4547[:yyrl4547]
				} else {
					yyv4547 = make([]Endpoints, yyrl4547)
				}
			} else {
				yyv4547 = make([]Endpoints, yyrl4547)
			}
			yyc4547 = true
			yyrr4547 = len(yyv4547)
			if yyrg4547 {
				copy(yyv4547, yyv24547)
			}
		} else if yyl4547 != len(yyv4547) {
			yyv4547 = yyv4547[:yyl4547]
			yyc4547 = true
		}
		yyj4547 := 0
		for ; yyj4547 < yyrr4547; yyj4547++ {
			yyh4547.ElemContainerState(yyj4547)
			if r.TryDecodeAsNil() {
				yyv4547[yyj4547] = Endpoints{}
			} else {
				yyv4548 := &yyv4547[yyj4547]
				yyv4548.CodecDecodeSelf(d)
			}

		}
		if yyrt4547 {
			for ; yyj4547 < yyl4547; yyj4547++ {
				yyv4547 = append(yyv4547, Endpoints{})
				yyh4547.ElemContainerState(yyj4547)
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = Endpoints{}
				} else {
					yyv4549 := &yyv4547[yyj4547]
					yyv4549.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4547 := 0
		for ; !r.CheckBreak(); yyj4547++ {

			if yyj4547 >= len(yyv4547) {
				yyv4547 = append(yyv4547, Endpoints{}) // var yyz4547 Endpoints
				yyc4547 = true
			}
			yyh4547.ElemContainerState(yyj4547)
			if yyj4547 < len(yyv4547) {
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = Endpoints{}
				} else {
					yyv4550 := &yyv4547[yyj4547]
					yyv4550.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4547 < len(yyv4547) {
			yyv4547 = yyv4547[:yyj4547]
			yyc4547 = true
		} else if yyj4547 == 0 && yyv4547 == nil {
			yyv4547 = []Endpoints{}
			yyc4547 = true
		}
	}
	yyh4547.End()
	if yyc4547 {
		*v = yyv4547
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4551 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4552 := &yyv4551
		yy4552.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4553 := *v
	yyh4553, yyl4553 := z.DecSliceHelperStart()
	var yyc4553 bool
	if yyl4553 == 0 {
		if yyv4553 == nil {
			yyv4553 = []NodeCondition{}
			yyc4553 = true
		} else if len(yyv4553) != 0 {
			yyv4553 = yyv4553[:0]
			yyc4553 = true
		}
	} else if yyl4553 > 0 {
		var yyrr4553, yyrl4553 int
		var yyrt4553 bool
		if yyl4553 > cap(yyv4553) {

			yyrg4553 := len(yyv4553) > 0
			yyv24553 := yyv4553
			yyrl4553, yyrt4553 = z.DecInferLen(yyl4553, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4553 {
				if yyrl4553 <= cap(yyv4553) {
					yyv4553 = yyv4553[:yyrl4553]
				} else {
					yyv4553 = make([]NodeCondition, yyrl4553)
				}
			} else {
				yyv4553 = make([]NodeCondition, yyrl4553)
			}
			yyc4553 = true
			yyrr4553 = len(yyv4553)
			if yyrg4553 {
				copy(yyv4553, yyv24553)
			}
		} else if yyl4553 != len(yyv4553) {
			yyv4553 = yyv4553[:yyl4553]
			yyc4553 = true
		}
		yyj4553 := 0
		for ; yyj4553 < yyrr4553; yyj4553++ {
			yyh4553.ElemContainerState(yyj4553)
			if r.TryDecodeAsNil() {
				yyv4553[yyj4553] = NodeCondition{}
			} else {
				yyv4554 := &yyv4553[yyj4553]
				yyv4554.CodecDecodeSelf(d)
			}

		}
		if yyrt4553 {
			for ; yyj4553 < yyl4553; yyj4553++ {
				yyv4553 = append(yyv4553, NodeCondition{})
				yyh4553.ElemContainerState(yyj4553)
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = NodeCondition{}
				} else {
					yyv4555 := &yyv4553[yyj4553]
					yyv4555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4553 := 0
		for ; !r.CheckBreak(); yyj4553++ {

			if yyj4553 >= len(yyv4553) {
				yyv4553 = append(yyv4553, NodeCondition{}) // var yyz4553 NodeCondition
				yyc4553 = true
			}
			yyh4553.ElemContainerState(yyj4553)
			if yyj4553 < len(yyv4553) {
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = NodeCondition{}
				} else {
					yyv4556 := &yyv4553[yyj4553]
					yyv4556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4553 < len(yyv4553) {
			yyv4553 = yyv4553[:yyj4553]
			yyc4553 = true
		} else if yyj4553 == 0 && yyv4553 == nil {
			yyv4553 = []NodeCondition{}
			yyc4553 = true
		}
	}
	yyh4553.End()
	if yyc4553 {
		*v = yyv4553
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4557 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4558 := &yyv4557
		yy4558.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4559 := *v
	yyh4559, yyl4559 := z.DecSliceHelperStart()
	var yyc4559 bool
	if yyl4559 == 0 {
		if yyv4559 == nil {
			yyv4559 = []NodeAddress{}
			yyc4559 = true
		} else if len(yyv4559) != 0 {
			yyv4559 = yyv4559[:0]
			yyc4559 = true
		}
	} else if yyl4559 > 0 {
		var yyrr4559, yyrl4559 int
		var yyrt4559 bool
		if yyl4559 > cap(yyv4559) {

			yyrg4559 := len(yyv4559) > 0
			yyv24559 := yyv4559
			yyrl4559, yyrt4559 = z.DecInferLen(yyl4559, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4559 {
				if yyrl4559 <= cap(yyv4559) {
					yyv4559 = yyv4559[:yyrl4559]
				} else {
					yyv4559 = make([]NodeAddress, yyrl4559)
				}
			} else {
				yyv4559 = make([]NodeAddress, yyrl4559)
			}
			yyc4559 = true
			yyrr4559 = len(yyv4559)
			if yyrg4559 {
				copy(yyv4559, yyv24559)
			}
		} else if yyl4559 != len(yyv4559) {
			yyv4559 = yyv4559[:yyl4559]
			yyc4559 = true
		}
		yyj4559 := 0
		for ; yyj4559 < yyrr4559; yyj4559++ {
			yyh4559.ElemContainerState(yyj4559)
			if r.TryDecodeAsNil() {
				yyv4559[yyj4559] = NodeAddress{}
			} else {
				yyv4560 := &yyv4559[yyj4559]
				yyv4560.CodecDecodeSelf(d)
			}

		}
		if yyrt4559 {
			for ; yyj4559 < yyl4559; yyj4559++ {
				yyv4559 = append(yyv4559, NodeAddress{})
				yyh4559.ElemContainerState(yyj4559)
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = NodeAddress{}
				} else {
					yyv4561 := &yyv4559[yyj4559]
					yyv4561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4559 := 0
		for ; !r.CheckBreak(); yyj4559++ {

			if yyj4559 >= len(yyv4559) {
				yyv4559 = append(yyv4559, NodeAddress{}) // var yyz4559 NodeAddress
				yyc4559 = true
			}
			yyh4559.ElemContainerState(yyj4559)
			if yyj4559 < len(yyv4559) {
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = NodeAddress{}
				} else {
					yyv4562 := &yyv4559[yyj4559]
					yyv4562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4559 < len(yyv4559) {
			yyv4559 = yyv4559[:yyj4559]
			yyc4559 = true
		} else if yyj4559 == 0 && yyv4559 == nil {
			yyv4559 = []NodeAddress{}
			yyc4559 = true
		}
	}
	yyh4559.End()
	if yyc4559 {
		*v = yyv4559
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4563 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4564 := &yyv4563
		yy4564.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4565 := *v
	yyh4565, yyl4565 := z.DecSliceHelperStart()
	var yyc4565 bool
	if yyl4565 == 0 {
		if yyv4565 == nil {
			yyv4565 = []ContainerImage{}
			yyc4565 = true
		} else if len(yyv4565) != 0 {
			yyv4565 = yyv4565[:0]
			yyc4565 = true
		}
	} else if yyl4565 > 0 {
		var yyrr4565, yyrl4565 int
		var yyrt4565 bool
		if yyl4565 > cap(yyv4565) {

			yyrg4565 := len(yyv4565) > 0
			yyv24565 := yyv4565
			yyrl4565, yyrt4565 = z.DecInferLen(yyl4565, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4565 {
				if yyrl4565 <= cap(yyv4565) {
					yyv4565 = yyv4565[:yyrl4565]
				} else {
					yyv4565 = make([]ContainerImage, yyrl4565)
				}
			} else {
				yyv4565 = make([]ContainerImage, yyrl4565)
			}
			yyc4565 = true
			yyrr4565 = len(yyv4565)
			if yyrg4565 {
				copy(yyv4565, yyv24565)
			}
		} else if yyl4565 != len(yyv4565) {
			yyv4565 = yyv4565[:yyl4565]
			yyc4565 = true
		}
		yyj4565 := 0
		for ; yyj4565 < yyrr4565; yyj4565++ {
			yyh4565.ElemContainerState(yyj4565)
			if r.TryDecodeAsNil() {
				yyv4565[yyj4565] = ContainerImage{}
			} else {
				yyv4566 := &yyv4565[yyj4565]
				yyv4566.CodecDecodeSelf(d)
			}

		}
		if yyrt4565 {
			for ; yyj4565 < yyl4565; yyj4565++ {
				yyv4565 = append(yyv4565, ContainerImage{})
				yyh4565.ElemContainerState(yyj4565)
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = ContainerImage{}
				} else {
					yyv4567 := &yyv4565[yyj4565]
					yyv4567.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4565 := 0
		for ; !r.CheckBreak(); yyj4565++ {

			if yyj4565 >= len(yyv4565) {
				yyv4565 = append(yyv4565, ContainerImage{}) // var yyz4565 ContainerImage
				yyc4565 = true
			}
			yyh4565.ElemContainerState(yyj4565)
			if yyj4565 < len(yyv4565) {
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = ContainerImage{}
				} else {
					yyv4568 := &yyv4565[yyj4565]
					yyv4568.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4565 < len(yyv4565) {
			yyv4565 = yyv4565[:yyj4565]
			yyc4565 = true
		} else if yyj4565 == 0 && yyv4565 == nil {
			yyv4565 = []ContainerImage{}
			yyc4565 = true
		}
	}
	yyh4565.End()
	if yyc4565 {
		*v = yyv4565
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4569 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4569.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4570 := *v
	yyh4570, yyl4570 := z.DecSliceHelperStart()
	var yyc4570 bool
	if yyl4570 == 0 {
		if yyv4570 == nil {
			yyv4570 = []UniqueVolumeName{}
			yyc4570 = true
		} else if len(yyv4570) != 0 {
			yyv4570 = yyv4570[:0]
			yyc4570 = true
		}
	} else if yyl4570 > 0 {
		var yyrr4570, yyrl4570 int
		var yyrt4570 bool
		if yyl4570 > cap(yyv4570) {

			yyrl4570, yyrt4570 = z.DecInferLen(yyl4570, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4570 {
				if yyrl4570 <= cap(yyv4570) {
					yyv4570 = yyv4570[:yyrl4570]
				} else {
					yyv4570 = make([]UniqueVolumeName, yyrl4570)
				}
			} else {
				yyv4570 = make([]UniqueVolumeName, yyrl4570)
			}
			yyc4570 = true
			yyrr4570 = len(yyv4570)
		} else if yyl4570 != len(yyv4570) {
			yyv4570 = yyv4570[:yyl4570]
			yyc4570 = true
		}
		yyj4570 := 0
		for ; yyj4570 < yyrr4570; yyj4570++ {
			yyh4570.ElemContainerState(yyj4570)
			if r.TryDecodeAsNil() {
				yyv4570[yyj4570] = ""
			} else {
				yyv4570[yyj4570] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4570 {
			for ; yyj4570 < yyl4570; yyj4570++ {
				yyv4570 = append(yyv4570, "")
				yyh4570.ElemContainerState(yyj4570)
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = ""
				} else {
					yyv4570[yyj4570] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4570 := 0
		for ; !r.CheckBreak(); yyj4570++ {

			if yyj4570 >= len(yyv4570) {
				yyv4570 = append(yyv4570, "") // var yyz4570 UniqueVolumeName
				yyc4570 = true
			}
			yyh4570.ElemContainerState(yyj4570)
			if yyj4570 < len(yyv4570) {
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = ""
				} else {
					yyv4570[yyj4570] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4570 < len(yyv4570) {
			yyv4570 = yyv4570[:yyj4570]
			yyc4570 = true
		} else if yyj4570 == 0 && yyv4570 == nil {
			yyv4570 = []UniqueVolumeName{}
			yyc4570 = true
		}
	}
	yyh4570.End()
	if yyc4570 {
		*v = yyv4570
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4574 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4575 := &yyv4574
		yy4575.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4576 := *v
	yyh4576, yyl4576 := z.DecSliceHelperStart()
	var yyc4576 bool
	if yyl4576 == 0 {
		if yyv4576 == nil {
			yyv4576 = []AttachedVolume{}
			yyc4576 = true
		} else if len(yyv4576) != 0 {
			yyv4576 = yyv4576[:0]
			yyc4576 = true
		}
	} else if yyl4576 > 0 {
		var yyrr4576, yyrl4576 int
		var yyrt4576 bool
		if yyl4576 > cap(yyv4576) {

			yyrg4576 := len(yyv4576) > 0
			yyv24576 := yyv4576
			yyrl4576, yyrt4576 = z.DecInferLen(yyl4576, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4576 {
				if yyrl4576 <= cap(yyv4576) {
					yyv4576 = yyv4576[:yyrl4576]
				} else {
					yyv4576 = make([]AttachedVolume, yyrl4576)
				}
			} else {
				yyv4576 = make([]AttachedVolume, yyrl4576)
			}
			yyc4576 = true
			yyrr4576 = len(yyv4576)
			if yyrg4576 {
				copy(yyv4576, yyv24576)
			}
		} else if yyl4576 != len(yyv4576) {
			yyv4576 = yyv4576[:yyl4576]
			yyc4576 = true
		}
		yyj4576 := 0
		for ; yyj4576 < yyrr4576; yyj4576++ {
			yyh4576.ElemContainerState(yyj4576)
			if r.TryDecodeAsNil() {
				yyv4576[yyj4576] = AttachedVolume{}
			} else {
				yyv4577 := &yyv4576[yyj4576]
				yyv4577.CodecDecodeSelf(d)
			}

		}
		if yyrt4576 {
			for ; yyj4576 < yyl4576; yyj4576++ {
				yyv4576 = append(yyv4576, AttachedVolume{})
				yyh4576.ElemContainerState(yyj4576)
				if r.TryDecodeAsNil() {
					yyv4576[yyj4576] = AttachedVolume{}
				} else {
					yyv4578 := &yyv4576[yyj4576]
					yyv4578.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4576 := 0
		for ; !r.CheckBreak(); yyj4576++ {

			if yyj4576 >= len(yyv4576) {
				yyv4576 = append(yyv4576, AttachedVolume{}) // var yyz4576 AttachedVolume
				yyc4576 = true
			}
			yyh4576.ElemContainerState(yyj4576)
			if yyj4576 < len(yyv4576) {
				if r.TryDecodeAsNil() {
					yyv4576[yyj4576] = AttachedVolume{}
				} else {
					yyv4579 := &yyv4576[yyj4576]
					yyv4579.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4576 < len(yyv4576) {
			yyv4576 = yyv4576[:yyj4576]
			yyc4576 = true
		} else if yyj4576 == 0 && yyv4576 == nil {
			yyv4576 = []AttachedVolume{}
			yyc4576 = true
		}
	}
	yyh4576.End()
	if yyc4576 {
		*v = yyv4576
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4580 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4581 := &yyv4580
		yy4581.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4582 := *v
	yyh4582, yyl4582 := z.DecSliceHelperStart()
	var yyc4582 bool
	if yyl4582 == 0 {
		if yyv4582 == nil {
			yyv4582 = []PreferAvoidPodsEntry{}
			yyc4582 = true
		} else if len(yyv4582) != 0 {
			yyv4582 = yyv4582[:0]
			yyc4582 = true
		}
	} else if yyl4582 > 0 {
		var yyrr4582, yyrl4582 int
		var yyrt4582 bool
		if yyl4582 > cap(yyv4582) {

			yyrg4582 := len(yyv4582) > 0
			yyv24582 := yyv4582
			yyrl4582, yyrt4582 = z.DecInferLen(yyl4582, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4582 {
				if yyrl4582 <= cap(yyv4582) {
					yyv4582 = yyv4582[:yyrl4582]
				} else {
					yyv4582 = make([]PreferAvoidPodsEntry, yyrl4582)
				}
			} else {
				yyv4582 = make([]PreferAvoidPodsEntry, yyrl4582)
			}
			yyc4582 = true
			yyrr4582 = len(yyv4582)
			if yyrg4582 {
				copy(yyv4582, yyv24582)
			}
		} else if yyl4582 != len(yyv4582) {
			yyv4582 = yyv4582[:yyl4582]
			yyc4582 = true
		}
		yyj4582 := 0
		for ; yyj4582 < yyrr4582; yyj4582++ {
			yyh4582.ElemContainerState(yyj4582)
			if r.TryDecodeAsNil() {
				yyv4582[yyj4582] = PreferAvoidPodsEntry{}
			} else {
				yyv4583 := &yyv4582[yyj4582]
				yyv4583.CodecDecodeSelf(d)
			}

		}
		if yyrt4582 {
			for ; yyj4582 < yyl4582; yyj4582++ {
				yyv4582 = append(yyv4582, PreferAvoidPodsEntry{})
				yyh4582.ElemContainerState(yyj4582)
				if r.TryDecodeAsNil() {
					yyv4582[yyj4582] = PreferAvoidPodsEntry{}
				} else {
					yyv4584 := &yyv4582[yyj4582]
					yyv4584.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4582 := 0
		for ; !r.CheckBreak(); yyj4582++ {

			if yyj4582 >= len(yyv4582) {
				yyv4582 = append(yyv4582, PreferAvoidPodsEntry{}) // var yyz4582 PreferAvoidPodsEntry
				yyc4582 = true
			}
			yyh4582.ElemContainerState(yyj4582)
			if yyj4582 < len(yyv4582) {
				if r.TryDecodeAsNil() {
					yyv4582[yyj4582] = PreferAvoidPodsEntry{}
				} else {
					yyv4585 := &yyv4582[yyj4582]
					yyv4585.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4582 < len(yyv4582) {
			yyv4582 = yyv4582[:yyj4582]
			yyc4582 = true
		} else if yyj4582 == 0 && yyv4582 == nil {
			yyv4582 = []PreferAvoidPodsEntry{}
			yyc4582 = true
		}
	}
	yyh4582.End()
	if yyc4582 {
		*v = yyv4582
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4586, yyv4586 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4586.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4587 := &yyv4586
		yym4588 := z.EncBinary()
		_ = yym4588
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4587) {
		} else if !yym4588 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4587)
		} else {
			z.EncFallback(yy4587)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4589 := *v
	yyl4589 := r.ReadMapStart()
	yybh4589 := z.DecBasicHandle()
	if yyv4589 == nil {
		yyrl4589, _ := z.DecInferLen(yyl4589, yybh4589.MaxInitLen, 72)
		yyv4589 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4589)
		*v = yyv4589
	}
	var yymk4589 ResourceName
	var yymv4589 pkg3_resource.Quantity
	var yymg4589 bool
	if yybh4589.MapValueReset {
		yymg4589 = true
	}
	if yyl4589 > 0 {
		for yyj4589 := 0; yyj4589 < yyl4589; yyj4589++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4589 = ""
			} else {
				yymk4589 = ResourceName(r.DecodeString())
			}

			if yymg4589 {
				yymv4589 = yyv4589[yymk4589]
			} else {
				yymv4589 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4589 = pkg3_resource.Quantity{}
			} else {
				yyv4591 := &yymv4589
				yym4592 := z.DecBinary()
				_ = yym4592
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4591) {
				} else if !yym4592 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4591)
				} else {
					z.DecFallback(yyv4591, false)
				}
			}

			if yyv4589 != nil {
				yyv4589[yymk4589] = yymv4589
			}
		}
	} else if yyl4589 < 0 {
		for yyj4589 := 0; !r.CheckBreak(); yyj4589++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4589 = ""
			} else {
				yymk4589 = ResourceName(r.DecodeString())
			}

			if yymg4589 {
				yymv4589 = yyv4589[yymk4589]
			} else {
				yymv4589 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4589 = pkg3_resource.Quantity{}
			} else {
				yyv4594 := &yymv4589
				yym4595 := z.DecBinary()
				_ = yym4595
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4594) {
				} else if !yym4595 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4594)
				} else {
					z.DecFallback(yyv4594, false)
				}
			}

			if yyv4589 != nil {
				yyv4589[yymk4589] = yymv4589
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4596 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4597 := &yyv4596
		yy4597.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4598 := *v
	yyh4598, yyl4598 := z.DecSliceHelperStart()
	var yyc4598 bool
	if yyl4598 == 0 {
		if yyv4598 == nil {
			yyv4598 = []Node{}
			yyc4598 = true
		} else if len(yyv4598) != 0 {
			yyv4598 = yyv4598[:0]
			yyc4598 = true
		}
	} else if yyl4598 > 0 {
		var yyrr4598, yyrl4598 int
		var yyrt4598 bool
		if yyl4598 > cap(yyv4598) {

			yyrg4598 := len(yyv4598) > 0
			yyv24598 := yyv4598
			yyrl4598, yyrt4598 = z.DecInferLen(yyl4598, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4598 {
				if yyrl4598 <= cap(yyv4598) {
					yyv4598 = yyv4598[:yyrl4598]
				} else {
					yyv4598 = make([]Node, yyrl4598)
				}
			} else {
				yyv4598 = make([]Node, yyrl4598)
			}
			yyc4598 = true
			yyrr4598 = len(yyv4598)
			if yyrg4598 {
				copy(yyv4598, yyv24598)
			}
		} else if yyl4598 != len(yyv4598) {
			yyv4598 = yyv4598[:yyl4598]
			yyc4598 = true
		}
		yyj4598 := 0
		for ; yyj4598 < yyrr4598; yyj4598++ {
			yyh4598.ElemContainerState(yyj4598)
			if r.TryDecodeAsNil() {
				yyv4598[yyj4598] = Node{}
			} else {
				yyv4599 := &yyv4598[yyj4598]
				yyv4599.CodecDecodeSelf(d)
			}

		}
		if yyrt4598 {
			for ; yyj4598 < yyl4598; yyj4598++ {
				yyv4598 = append(yyv4598, Node{})
				yyh4598.ElemContainerState(yyj4598)
				if r.TryDecodeAsNil() {
					yyv4598[yyj4598] = Node{}
				} else {
					yyv4600 := &yyv4598[yyj4598]
					yyv4600.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4598 := 0
		for ; !r.CheckBreak(); yyj4598++ {

			if yyj4598 >= len(yyv4598) {
				yyv4598 = append(yyv4598, Node{}) // var yyz4598 Node
				yyc4598 = true
			}
			yyh4598.ElemContainerState(yyj4598)
			if yyj4598 < len(yyv4598) {
				if r.TryDecodeAsNil() {
					yyv4598[yyj4598] = Node{}
				} else {
					yyv4601 := &yyv4598[yyj4598]
					yyv4601.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4598 < len(yyv4598) {
			yyv4598 = yyv4598[:yyj4598]
			yyc4598 = true
		} else if yyj4598 == 0 && yyv4598 == nil {
			yyv4598 = []Node{}
			yyc4598 = true
		}
	}
	yyh4598.End()
	if yyc4598 {
		*v = yyv4598
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4602 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4602.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4603 := *v
	yyh4603, yyl4603 := z.DecSliceHelperStart()
	var yyc4603 bool
	if yyl4603 == 0 {
		if yyv4603 == nil {
			yyv4603 = []FinalizerName{}
			yyc4603 = true
		} else if len(yyv4603) != 0 {
			yyv4603 = yyv4603[:0]
			yyc4603 = true
		}
	} else if yyl4603 > 0 {
		var yyrr4603, yyrl4603 int
		var yyrt4603 bool
		if yyl4603 > cap(yyv4603) {

			yyrl4603, yyrt4603 = z.DecInferLen(yyl4603, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4603 {
				if yyrl4603 <= cap(yyv4603) {
					yyv4603 = yyv4603[:yyrl4603]
				} else {
					yyv4603 = make([]FinalizerName, yyrl4603)
				}
			} else {
				yyv4603 = make([]FinalizerName, yyrl4603)
			}
			yyc4603 = true
			yyrr4603 = len(yyv4603)
		} else if yyl4603 != len(yyv4603) {
			yyv4603 = yyv4603[:yyl4603]
			yyc4603 = true
		}
		yyj4603 := 0
		for ; yyj4603 < yyrr4603; yyj4603++ {
			yyh4603.ElemContainerState(yyj4603)
			if r.TryDecodeAsNil() {
				yyv4603[yyj4603] = ""
			} else {
				yyv4603[yyj4603] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4603 {
			for ; yyj4603 < yyl4603; yyj4603++ {
				yyv4603 = append(yyv4603, "")
				yyh4603.ElemContainerState(yyj4603)
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = ""
				} else {
					yyv4603[yyj4603] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4603 := 0
		for ; !r.CheckBreak(); yyj4603++ {

			if yyj4603 >= len(yyv4603) {
				yyv4603 = append(yyv4603, "") // var yyz4603 FinalizerName
				yyc4603 = true
			}
			yyh4603.ElemContainerState(yyj4603)
			if yyj4603 < len(yyv4603) {
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = ""
				} else {
					yyv4603[yyj4603] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4603 < len(yyv4603) {
			yyv4603 = yyv4603[:yyj4603]
			yyc4603 = true
		} else if yyj4603 == 0 && yyv4603 == nil {
			yyv4603 = []FinalizerName{}
			yyc4603 = true
		}
	}
	yyh4603.End()
	if yyc4603 {
		*v = yyv4603
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4607 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4608 := &yyv4607
		yy4608.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4609 := *v
	yyh4609, yyl4609 := z.DecSliceHelperStart()
	var yyc4609 bool
	if yyl4609 == 0 {
		if yyv4609 == nil {
			yyv4609 = []Namespace{}
			yyc4609 = true
		} else if len(yyv4609) != 0 {
			yyv4609 = yyv4609[:0]
			yyc4609 = true
		}
	} else if yyl4609 > 0 {
		var yyrr4609, yyrl4609 int
		var yyrt4609 bool
		if yyl4609 > cap(yyv4609) {

			yyrg4609 := len(yyv4609) > 0
			yyv24609 := yyv4609
			yyrl4609, yyrt4609 = z.DecInferLen(yyl4609, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4609 {
				if yyrl4609 <= cap(yyv4609) {
					yyv4609 = yyv4609[:yyrl4609]
				} else {
					yyv4609 = make([]Namespace, yyrl4609)
				}
			} else {
				yyv4609 = make([]Namespace, yyrl4609)
			}
			yyc4609 = true
			yyrr4609 = len(yyv4609)
			if yyrg4609 {
				copy(yyv4609, yyv24609)
			}
		} else if yyl4609 != len(yyv4609) {
			yyv4609 = yyv4609[:yyl4609]
			yyc4609 = true
		}
		yyj4609 := 0
		for ; yyj4609 < yyrr4609; yyj4609++ {
			yyh4609.ElemContainerState(yyj4609)
			if r.TryDecodeAsNil() {
				yyv4609[yyj4609] = Namespace{}
			} else {
				yyv4610 := &yyv4609[yyj4609]
				yyv4610.CodecDecodeSelf(d)
			}

		}
		if yyrt4609 {
			for ; yyj4609 < yyl4609; yyj4609++ {
				yyv4609 = append(yyv4609, Namespace{})
				yyh4609.ElemContainerState(yyj4609)
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = Namespace{}
				} else {
					yyv4611 := &yyv4609[yyj4609]
					yyv4611.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4609 := 0
		for ; !r.CheckBreak(); yyj4609++ {

			if yyj4609 >= len(yyv4609) {
				yyv4609 = append(yyv4609, Namespace{}) // var yyz4609 Namespace
				yyc4609 = true
			}
			yyh4609.ElemContainerState(yyj4609)
			if yyj4609 < len(yyv4609) {
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = Namespace{}
				} else {
					yyv4612 := &yyv4609[yyj4609]
					yyv4612.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4609 < len(yyv4609) {
			yyv4609 = yyv4609[:yyj4609]
			yyc4609 = true
		} else if yyj4609 == 0 && yyv4609 == nil {
			yyv4609 = []Namespace{}
			yyc4609 = true
		}
	}
	yyh4609.End()
	if yyc4609 {
		*v = yyv4609
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4613 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4614 := &yyv4613
		yy4614.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4615 := *v
	yyh4615, yyl4615 := z.DecSliceHelperStart()
	var yyc4615 bool
	if yyl4615 == 0 {
		if yyv4615 == nil {
			yyv4615 = []Event{}
			yyc4615 = true
		} else if len(yyv4615) != 0 {
			yyv4615 = yyv4615[:0]
			yyc4615 = true
		}
	} else if yyl4615 > 0 {
		var yyrr4615, yyrl4615 int
		var yyrt4615 bool
		if yyl4615 > cap(yyv4615) {

			yyrg4615 := len(yyv4615) > 0
			yyv24615 := yyv4615
			yyrl4615, yyrt4615 = z.DecInferLen(yyl4615, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4615 {
				if yyrl4615 <= cap(yyv4615) {
					yyv4615 = yyv4615[:yyrl4615]
				} else {
					yyv4615 = make([]Event, yyrl4615)
				}
			} else {
				yyv4615 = make([]Event, yyrl4615)
			}
			yyc4615 = true
			yyrr4615 = len(yyv4615)
			if yyrg4615 {
				copy(yyv4615, yyv24615)
			}
		} else if yyl4615 != len(yyv4615) {
			yyv4615 = yyv4615[:yyl4615]
			yyc4615 = true
		}
		yyj4615 := 0
		for ; yyj4615 < yyrr4615; yyj4615++ {
			yyh4615.ElemContainerState(yyj4615)
			if r.TryDecodeAsNil() {
				yyv4615[yyj4615] = Event{}
			} else {
				yyv4616 := &yyv4615[yyj4615]
				yyv4616.CodecDecodeSelf(d)
			}

		}
		if yyrt4615 {
			for ; yyj4615 < yyl4615; yyj4615++ {
				yyv4615 = append(yyv4615, Event{})
				yyh4615.ElemContainerState(yyj4615)
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = Event{}
				} else {
					yyv4617 := &yyv4615[yyj4615]
					yyv4617.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4615 := 0
		for ; !r.CheckBreak(); yyj4615++ {

			if yyj4615 >= len(yyv4615) {
				yyv4615 = append(yyv4615, Event{}) // var yyz4615 Event
				yyc4615 = true
			}
			yyh4615.ElemContainerState(yyj4615)
			if yyj4615 < len(yyv4615) {
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = Event{}
				} else {
					yyv4618 := &yyv4615[yyj4615]
					yyv4618.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4615 < len(yyv4615) {
			yyv4615 = yyv4615[:yyj4615]
			yyc4615 = true
		} else if yyj4615 == 0 && yyv4615 == nil {
			yyv4615 = []Event{}
			yyc4615 = true
		}
	}
	yyh4615.End()
	if yyc4615 {
		*v = yyv4615
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4619 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4619 == nil {
			r.EncodeNil()
		} else {
			yym4620 := z.EncBinary()
			_ = yym4620
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4619) {
			} else {
				z.EncFallback(yyv4619)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4621 := *v
	yyh4621, yyl4621 := z.DecSliceHelperStart()
	var yyc4621 bool
	if yyl4621 == 0 {
		if yyv4621 == nil {
			yyv4621 = []pkg7_runtime.Object{}
			yyc4621 = true
		} else if len(yyv4621) != 0 {
			yyv4621 = yyv4621[:0]
			yyc4621 = true
		}
	} else if yyl4621 > 0 {
		var yyrr4621, yyrl4621 int
		var yyrt4621 bool
		if yyl4621 > cap(yyv4621) {

			yyrg4621 := len(yyv4621) > 0
			yyv24621 := yyv4621
			yyrl4621, yyrt4621 = z.DecInferLen(yyl4621, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4621 {
				if yyrl4621 <= cap(yyv4621) {
					yyv4621 = yyv4621[:yyrl4621]
				} else {
					yyv4621 = make([]pkg7_runtime.Object, yyrl4621)
				}
			} else {
				yyv4621 = make([]pkg7_runtime.Object, yyrl4621)
			}
			yyc4621 = true
			yyrr4621 = len(yyv4621)
			if yyrg4621 {
				copy(yyv4621, yyv24621)
			}
		} else if yyl4621 != len(yyv4621) {
			yyv4621 = yyv4621[:yyl4621]
			yyc4621 = true
		}
		yyj4621 := 0
		for ; yyj4621 < yyrr4621; yyj4621++ {
			yyh4621.ElemContainerState(yyj4621)
			if r.TryDecodeAsNil() {
				yyv4621[yyj4621] = nil
			} else {
				yyv4622 := &yyv4621[yyj4621]
				yym4623 := z.DecBinary()
				_ = yym4623
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4622) {
				} else {
					z.DecFallback(yyv4622, true)
				}
			}

		}
		if yyrt4621 {
			for ; yyj4621 < yyl4621; yyj4621++ {
				yyv4621 = append(yyv4621, nil)
				yyh4621.ElemContainerState(yyj4621)
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = nil
				} else {
					yyv4624 := &yyv4621[yyj4621]
					yym4625 := z.DecBinary()
					_ = yym4625
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4624) {
					} else {
						z.DecFallback(yyv4624, true)
					}
				}

			}
		}

	} else {
		yyj4621 := 0
		for ; !r.CheckBreak(); yyj4621++ {

			if yyj4621 >= len(yyv4621) {
				yyv4621 = append(yyv4621, nil) // var yyz4621 pkg7_runtime.Object
				yyc4621 = true
			}
			yyh4621.ElemContainerState(yyj4621)
			if yyj4621 < len(yyv4621) {
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = nil
				} else {
					yyv4626 := &yyv4621[yyj4621]
					yym4627 := z.DecBinary()
					_ = yym4627
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4626) {
					} else {
						z.DecFallback(yyv4626, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4621 < len(yyv4621) {
			yyv4621 = yyv4621[:yyj4621]
			yyc4621 = true
		} else if yyj4621 == 0 && yyv4621 == nil {
			yyv4621 = []pkg7_runtime.Object{}
			yyc4621 = true
		}
	}
	yyh4621.End()
	if yyc4621 {
		*v = yyv4621
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4629 := &yyv4628
		yy4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []LimitRangeItem{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrg4630 := len(yyv4630) > 0
			yyv24630 := yyv4630
			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]LimitRangeItem, yyrl4630)
				}
			} else {
				yyv4630 = make([]LimitRangeItem, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
			if yyrg4630 {
				copy(yyv4630, yyv24630)
			}
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = LimitRangeItem{}
			} else {
				yyv4631 := &yyv4630[yyj4630]
				yyv4631.CodecDecodeSelf(d)
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, LimitRangeItem{})
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = LimitRangeItem{}
				} else {
					yyv4632 := &yyv4630[yyj4630]
					yyv4632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, LimitRangeItem{}) // var yyz4630 LimitRangeItem
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = LimitRangeItem{}
				} else {
					yyv4633 := &yyv4630[yyj4630]
					yyv4633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []LimitRangeItem{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yy4635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4636 := *v
	yyh4636, yyl4636 := z.DecSliceHelperStart()
	var yyc4636 bool
	if yyl4636 == 0 {
		if yyv4636 == nil {
			yyv4636 = []LimitRange{}
			yyc4636 = true
		} else if len(yyv4636) != 0 {
			yyv4636 = yyv4636[:0]
			yyc4636 = true
		}
	} else if yyl4636 > 0 {
		var yyrr4636, yyrl4636 int
		var yyrt4636 bool
		if yyl4636 > cap(yyv4636) {

			yyrg4636 := len(yyv4636) > 0
			yyv24636 := yyv4636
			yyrl4636, yyrt4636 = z.DecInferLen(yyl4636, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4636 {
				if yyrl4636 <= cap(yyv4636) {
					yyv4636 = yyv4636[:yyrl4636]
				} else {
					yyv4636 = make([]LimitRange, yyrl4636)
				}
			} else {
				yyv4636 = make([]LimitRange, yyrl4636)
			}
			yyc4636 = true
			yyrr4636 = len(yyv4636)
			if yyrg4636 {
				copy(yyv4636, yyv24636)
			}
		} else if yyl4636 != len(yyv4636) {
			yyv4636 = yyv4636[:yyl4636]
			yyc4636 = true
		}
		yyj4636 := 0
		for ; yyj4636 < yyrr4636; yyj4636++ {
			yyh4636.ElemContainerState(yyj4636)
			if r.TryDecodeAsNil() {
				yyv4636[yyj4636] = LimitRange{}
			} else {
				yyv4637 := &yyv4636[yyj4636]
				yyv4637.CodecDecodeSelf(d)
			}

		}
		if yyrt4636 {
			for ; yyj4636 < yyl4636; yyj4636++ {
				yyv4636 = append(yyv4636, LimitRange{})
				yyh4636.ElemContainerState(yyj4636)
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = LimitRange{}
				} else {
					yyv4638 := &yyv4636[yyj4636]
					yyv4638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4636 := 0
		for ; !r.CheckBreak(); yyj4636++ {

			if yyj4636 >= len(yyv4636) {
				yyv4636 = append(yyv4636, LimitRange{}) // var yyz4636 LimitRange
				yyc4636 = true
			}
			yyh4636.ElemContainerState(yyj4636)
			if yyj4636 < len(yyv4636) {
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = LimitRange{}
				} else {
					yyv4639 := &yyv4636[yyj4636]
					yyv4639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4636 < len(yyv4636) {
			yyv4636 = yyv4636[:yyj4636]
			yyc4636 = true
		} else if yyj4636 == 0 && yyv4636 == nil {
			yyv4636 = []LimitRange{}
			yyc4636 = true
		}
	}
	yyh4636.End()
	if yyc4636 {
		*v = yyv4636
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4641 := *v
	yyh4641, yyl4641 := z.DecSliceHelperStart()
	var yyc4641 bool
	if yyl4641 == 0 {
		if yyv4641 == nil {
			yyv4641 = []ResourceQuotaScope{}
			yyc4641 = true
		} else if len(yyv4641) != 0 {
			yyv4641 = yyv4641[:0]
			yyc4641 = true
		}
	} else if yyl4641 > 0 {
		var yyrr4641, yyrl4641 int
		var yyrt4641 bool
		if yyl4641 > cap(yyv4641) {

			yyrl4641, yyrt4641 = z.DecInferLen(yyl4641, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4641 {
				if yyrl4641 <= cap(yyv4641) {
					yyv4641 = yyv4641[:yyrl4641]
				} else {
					yyv4641 = make([]ResourceQuotaScope, yyrl4641)
				}
			} else {
				yyv4641 = make([]ResourceQuotaScope, yyrl4641)
			}
			yyc4641 = true
			yyrr4641 = len(yyv4641)
		} else if yyl4641 != len(yyv4641) {
			yyv4641 = yyv4641[:yyl4641]
			yyc4641 = true
		}
		yyj4641 := 0
		for ; yyj4641 < yyrr4641; yyj4641++ {
			yyh4641.ElemContainerState(yyj4641)
			if r.TryDecodeAsNil() {
				yyv4641[yyj4641] = ""
			} else {
				yyv4641[yyj4641] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4641 {
			for ; yyj4641 < yyl4641; yyj4641++ {
				yyv4641 = append(yyv4641, "")
				yyh4641.ElemContainerState(yyj4641)
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = ""
				} else {
					yyv4641[yyj4641] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4641 := 0
		for ; !r.CheckBreak(); yyj4641++ {

			if yyj4641 >= len(yyv4641) {
				yyv4641 = append(yyv4641, "") // var yyz4641 ResourceQuotaScope
				yyc4641 = true
			}
			yyh4641.ElemContainerState(yyj4641)
			if yyj4641 < len(yyv4641) {
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = ""
				} else {
					yyv4641[yyj4641] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4641 < len(yyv4641) {
			yyv4641 = yyv4641[:yyj4641]
			yyc4641 = true
		} else if yyj4641 == 0 && yyv4641 == nil {
			yyv4641 = []ResourceQuotaScope{}
			yyc4641 = true
		}
	}
	yyh4641.End()
	if yyc4641 {
		*v = yyv4641
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4645 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4646 := &yyv4645
		yy4646.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4647 := *v
	yyh4647, yyl4647 := z.DecSliceHelperStart()
	var yyc4647 bool
	if yyl4647 == 0 {
		if yyv4647 == nil {
			yyv4647 = []ResourceQuota{}
			yyc4647 = true
		} else if len(yyv4647) != 0 {
			yyv4647 = yyv4647[:0]
			yyc4647 = true
		}
	} else if yyl4647 > 0 {
		var yyrr4647, yyrl4647 int
		var yyrt4647 bool
		if yyl4647 > cap(yyv4647) {

			yyrg4647 := len(yyv4647) > 0
			yyv24647 := yyv4647
			yyrl4647, yyrt4647 = z.DecInferLen(yyl4647, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4647 {
				if yyrl4647 <= cap(yyv4647) {
					yyv4647 = yyv4647[:yyrl4647]
				} else {
					yyv4647 = make([]ResourceQuota, yyrl4647)
				}
			} else {
				yyv4647 = make([]ResourceQuota, yyrl4647)
			}
			yyc4647 = true
			yyrr4647 = len(yyv4647)
			if yyrg4647 {
				copy(yyv4647, yyv24647)
			}
		} else if yyl4647 != len(yyv4647) {
			yyv4647 = yyv4647[:yyl4647]
			yyc4647 = true
		}
		yyj4647 := 0
		for ; yyj4647 < yyrr4647; yyj4647++ {
			yyh4647.ElemContainerState(yyj4647)
			if r.TryDecodeAsNil() {
				yyv4647[yyj4647] = ResourceQuota{}
			} else {
				yyv4648 := &yyv4647[yyj4647]
				yyv4648.CodecDecodeSelf(d)
			}

		}
		if yyrt4647 {
			for ; yyj4647 < yyl4647; yyj4647++ {
				yyv4647 = append(yyv4647, ResourceQuota{})
				yyh4647.ElemContainerState(yyj4647)
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = ResourceQuota{}
				} else {
					yyv4649 := &yyv4647[yyj4647]
					yyv4649.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4647 := 0
		for ; !r.CheckBreak(); yyj4647++ {

			if yyj4647 >= len(yyv4647) {
				yyv4647 = append(yyv4647, ResourceQuota{}) // var yyz4647 ResourceQuota
				yyc4647 = true
			}
			yyh4647.ElemContainerState(yyj4647)
			if yyj4647 < len(yyv4647) {
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = ResourceQuota{}
				} else {
					yyv4650 := &yyv4647[yyj4647]
					yyv4650.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4647 < len(yyv4647) {
			yyv4647 = yyv4647[:yyj4647]
			yyc4647 = true
		} else if yyj4647 == 0 && yyv4647 == nil {
			yyv4647 = []ResourceQuota{}
			yyc4647 = true
		}
	}
	yyh4647.End()
	if yyc4647 {
		*v = yyv4647
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4651, yyv4651 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4652 := z.EncBinary()
		_ = yym4652
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4651))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4651 == nil {
			r.EncodeNil()
		} else {
			yym4653 := z.EncBinary()
			_ = yym4653
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4651))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4654 := *v
	yyl4654 := r.ReadMapStart()
	yybh4654 := z.DecBasicHandle()
	if yyv4654 == nil {
		yyrl4654, _ := z.DecInferLen(yyl4654, yybh4654.MaxInitLen, 40)
		yyv4654 = make(map[string][]uint8, yyrl4654)
		*v = yyv4654
	}
	var yymk4654 string
	var yymv4654 []uint8
	var yymg4654 bool
	if yybh4654.MapValueReset {
		yymg4654 = true
	}
	if yyl4654 > 0 {
		for yyj4654 := 0; yyj4654 < yyl4654; yyj4654++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4654 = ""
			} else {
				yymk4654 = string(r.DecodeString())
			}

			if yymg4654 {
				yymv4654 = yyv4654[yymk4654]
			} else {
				yymv4654 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4654 = nil
			} else {
				yyv4656 := &yymv4654
				yym4657 := z.DecBinary()
				_ = yym4657
				if false {
				} else {
					*yyv4656 = r.DecodeBytes(*(*[]byte)(yyv4656), false, false)
				}
			}

			if yyv4654 != nil {
				yyv4654[yymk4654] = yymv4654
			}
		}
	} else if yyl4654 < 0 {
		for yyj4654 := 0; !r.CheckBreak(); yyj4654++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4654 = ""
			} else {
				yymk4654 = string(r.DecodeString())
			}

			if yymg4654 {
				yymv4654 = yyv4654[yymk4654]
			} else {
				yymv4654 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4654 = nil
			} else {
				yyv4659 := &yymv4654
				yym4660 := z.DecBinary()
				_ = yym4660
				if false {
				} else {
					*yyv4659 = r.DecodeBytes(*(*[]byte)(yyv4659), false, false)
				}
			}

			if yyv4654 != nil {
				yyv4654[yymk4654] = yymv4654
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []Secret{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]Secret, yyrl4663)
				}
			} else {
				yyv4663 = make([]Secret, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = Secret{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, Secret{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = Secret{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, Secret{}) // var yyz4663 Secret
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = Secret{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []Secret{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4668 := &yyv4667
		yy4668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4669 := *v
	yyh4669, yyl4669 := z.DecSliceHelperStart()
	var yyc4669 bool
	if yyl4669 == 0 {
		if yyv4669 == nil {
			yyv4669 = []ConfigMap{}
			yyc4669 = true
		} else if len(yyv4669) != 0 {
			yyv4669 = yyv4669[:0]
			yyc4669 = true
		}
	} else if yyl4669 > 0 {
		var yyrr4669, yyrl4669 int
		var yyrt4669 bool
		if yyl4669 > cap(yyv4669) {

			yyrg4669 := len(yyv4669) > 0
			yyv24669 := yyv4669
			yyrl4669, yyrt4669 = z.DecInferLen(yyl4669, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4669 {
				if yyrl4669 <= cap(yyv4669) {
					yyv4669 = yyv4669[:yyrl4669]
				} else {
					yyv4669 = make([]ConfigMap, yyrl4669)
				}
			} else {
				yyv4669 = make([]ConfigMap, yyrl4669)
			}
			yyc4669 = true
			yyrr4669 = len(yyv4669)
			if yyrg4669 {
				copy(yyv4669, yyv24669)
			}
		} else if yyl4669 != len(yyv4669) {
			yyv4669 = yyv4669[:yyl4669]
			yyc4669 = true
		}
		yyj4669 := 0
		for ; yyj4669 < yyrr4669; yyj4669++ {
			yyh4669.ElemContainerState(yyj4669)
			if r.TryDecodeAsNil() {
				yyv4669[yyj4669] = ConfigMap{}
			} else {
				yyv4670 := &yyv4669[yyj4669]
				yyv4670.CodecDecodeSelf(d)
			}

		}
		if yyrt4669 {
			for ; yyj4669 < yyl4669; yyj4669++ {
				yyv4669 = append(yyv4669, ConfigMap{})
				yyh4669.ElemContainerState(yyj4669)
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = ConfigMap{}
				} else {
					yyv4671 := &yyv4669[yyj4669]
					yyv4671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4669 := 0
		for ; !r.CheckBreak(); yyj4669++ {

			if yyj4669 >= len(yyv4669) {
				yyv4669 = append(yyv4669, ConfigMap{}) // var yyz4669 ConfigMap
				yyc4669 = true
			}
			yyh4669.ElemContainerState(yyj4669)
			if yyj4669 < len(yyv4669) {
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = ConfigMap{}
				} else {
					yyv4672 := &yyv4669[yyj4669]
					yyv4672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4669 < len(yyv4669) {
			yyv4669 = yyv4669[:yyj4669]
			yyc4669 = true
		} else if yyj4669 == 0 && yyv4669 == nil {
			yyv4669 = []ConfigMap{}
			yyc4669 = true
		}
	}
	yyh4669.End()
	if yyc4669 {
		*v = yyv4669
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4674 := &yyv4673
		yy4674.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4675 := *v
	yyh4675, yyl4675 := z.DecSliceHelperStart()
	var yyc4675 bool
	if yyl4675 == 0 {
		if yyv4675 == nil {
			yyv4675 = []ComponentCondition{}
			yyc4675 = true
		} else if len(yyv4675) != 0 {
			yyv4675 = yyv4675[:0]
			yyc4675 = true
		}
	} else if yyl4675 > 0 {
		var yyrr4675, yyrl4675 int
		var yyrt4675 bool
		if yyl4675 > cap(yyv4675) {

			yyrg4675 := len(yyv4675) > 0
			yyv24675 := yyv4675
			yyrl4675, yyrt4675 = z.DecInferLen(yyl4675, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4675 {
				if yyrl4675 <= cap(yyv4675) {
					yyv4675 = yyv4675[:yyrl4675]
				} else {
					yyv4675 = make([]ComponentCondition, yyrl4675)
				}
			} else {
				yyv4675 = make([]ComponentCondition, yyrl4675)
			}
			yyc4675 = true
			yyrr4675 = len(yyv4675)
			if yyrg4675 {
				copy(yyv4675, yyv24675)
			}
		} else if yyl4675 != len(yyv4675) {
			yyv4675 = yyv4675[:yyl4675]
			yyc4675 = true
		}
		yyj4675 := 0
		for ; yyj4675 < yyrr4675; yyj4675++ {
			yyh4675.ElemContainerState(yyj4675)
			if r.TryDecodeAsNil() {
				yyv4675[yyj4675] = ComponentCondition{}
			} else {
				yyv4676 := &yyv4675[yyj4675]
				yyv4676.CodecDecodeSelf(d)
			}

		}
		if yyrt4675 {
			for ; yyj4675 < yyl4675; yyj4675++ {
				yyv4675 = append(yyv4675, ComponentCondition{})
				yyh4675.ElemContainerState(yyj4675)
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = ComponentCondition{}
				} else {
					yyv4677 := &yyv4675[yyj4675]
					yyv4677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4675 := 0
		for ; !r.CheckBreak(); yyj4675++ {

			if yyj4675 >= len(yyv4675) {
				yyv4675 = append(yyv4675, ComponentCondition{}) // var yyz4675 ComponentCondition
				yyc4675 = true
			}
			yyh4675.ElemContainerState(yyj4675)
			if yyj4675 < len(yyv4675) {
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = ComponentCondition{}
				} else {
					yyv4678 := &yyv4675[yyj4675]
					yyv4678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4675 < len(yyv4675) {
			yyv4675 = yyv4675[:yyj4675]
			yyc4675 = true
		} else if yyj4675 == 0 && yyv4675 == nil {
			yyv4675 = []ComponentCondition{}
			yyc4675 = true
		}
	}
	yyh4675.End()
	if yyc4675 {
		*v = yyv4675
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4680 := &yyv4679
		yy4680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4681 := *v
	yyh4681, yyl4681 := z.DecSliceHelperStart()
	var yyc4681 bool
	if yyl4681 == 0 {
		if yyv4681 == nil {
			yyv4681 = []ComponentStatus{}
			yyc4681 = true
		} else if len(yyv4681) != 0 {
			yyv4681 = yyv4681[:0]
			yyc4681 = true
		}
	} else if yyl4681 > 0 {
		var yyrr4681, yyrl4681 int
		var yyrt4681 bool
		if yyl4681 > cap(yyv4681) {

			yyrg4681 := len(yyv4681) > 0
			yyv24681 := yyv4681
			yyrl4681, yyrt4681 = z.DecInferLen(yyl4681, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4681 {
				if yyrl4681 <= cap(yyv4681) {
					yyv4681 = yyv4681[:yyrl4681]
				} else {
					yyv4681 = make([]ComponentStatus, yyrl4681)
				}
			} else {
				yyv4681 = make([]ComponentStatus, yyrl4681)
			}
			yyc4681 = true
			yyrr4681 = len(yyv4681)
			if yyrg4681 {
				copy(yyv4681, yyv24681)
			}
		} else if yyl4681 != len(yyv4681) {
			yyv4681 = yyv4681[:yyl4681]
			yyc4681 = true
		}
		yyj4681 := 0
		for ; yyj4681 < yyrr4681; yyj4681++ {
			yyh4681.ElemContainerState(yyj4681)
			if r.TryDecodeAsNil() {
				yyv4681[yyj4681] = ComponentStatus{}
			} else {
				yyv4682 := &yyv4681[yyj4681]
				yyv4682.CodecDecodeSelf(d)
			}

		}
		if yyrt4681 {
			for ; yyj4681 < yyl4681; yyj4681++ {
				yyv4681 = append(yyv4681, ComponentStatus{})
				yyh4681.ElemContainerState(yyj4681)
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = ComponentStatus{}
				} else {
					yyv4683 := &yyv4681[yyj4681]
					yyv4683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4681 := 0
		for ; !r.CheckBreak(); yyj4681++ {

			if yyj4681 >= len(yyv4681) {
				yyv4681 = append(yyv4681, ComponentStatus{}) // var yyz4681 ComponentStatus
				yyc4681 = true
			}
			yyh4681.ElemContainerState(yyj4681)
			if yyj4681 < len(yyv4681) {
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = ComponentStatus{}
				} else {
					yyv4684 := &yyv4681[yyj4681]
					yyv4684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4681 < len(yyv4681) {
			yyv4681 = yyv4681[:yyj4681]
			yyc4681 = true
		} else if yyj4681 == 0 && yyv4681 == nil {
			yyv4681 = []ComponentStatus{}
			yyc4681 = true
		}
	}
	yyh4681.End()
	if yyc4681 {
		*v = yyv4681
	}
}
