/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [21]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(21)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyq167 [20]bool
			_, _, _ = yysep167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[0] = x.HostPath != nil
			yyq167[1] = x.EmptyDir != nil
			yyq167[2] = x.GCEPersistentDisk != nil
			yyq167[3] = x.AWSElasticBlockStore != nil
			yyq167[4] = x.GitRepo != nil
			yyq167[5] = x.Secret != nil
			yyq167[6] = x.NFS != nil
			yyq167[7] = x.ISCSI != nil
			yyq167[8] = x.Glusterfs != nil
			yyq167[9] = x.PersistentVolumeClaim != nil
			yyq167[10] = x.RBD != nil
			yyq167[11] = x.FlexVolume != nil
			yyq167[12] = x.Cinder != nil
			yyq167[13] = x.CephFS != nil
			yyq167[14] = x.Flocker != nil
			yyq167[15] = x.DownwardAPI != nil
			yyq167[16] = x.FC != nil
			yyq167[17] = x.AzureFile != nil
			yyq167[18] = x.ConfigMap != nil
			yyq167[19] = x.VsphereVolume != nil
			var yynn167 int
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(20)
			} else {
				yynn167 = 0
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
				yynn167 = 0
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym188 := z.DecBinary()
	_ = yym188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct189 := r.ContainerType()
		if yyct189 == codecSelferValueTypeMap1234 {
			yyl189 := r.ReadMapStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl189, d)
			}
		} else if yyct189 == codecSelferValueTypeArray1234 {
			yyl189 := r.ReadArrayStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys190Slc
	var yyhl190 bool = l >= 0
	for yyj190 := 0; ; yyj190++ {
		if yyhl190 {
			if yyj190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys190Slc = r.DecodeBytes(yys190Slc, true, true)
		yys190 := string(yys190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys190 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys190)
		} // end switch yys190
	} // end for yyj190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym232 := z.EncBinary()
		_ = yym232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep233 := !z.EncBinary()
			yy2arr233 := z.EncBasicHandle().StructToArray
			var yyq233 [14]bool
			_, _, _ = yysep233, yyq233, yy2arr233
			const yyr233 bool = false
			yyq233[0] = x.GCEPersistentDisk != nil
			yyq233[1] = x.AWSElasticBlockStore != nil
			yyq233[2] = x.HostPath != nil
			yyq233[3] = x.Glusterfs != nil
			yyq233[4] = x.NFS != nil
			yyq233[5] = x.RBD != nil
			yyq233[6] = x.ISCSI != nil
			yyq233[7] = x.FlexVolume != nil
			yyq233[8] = x.Cinder != nil
			yyq233[9] = x.CephFS != nil
			yyq233[10] = x.FC != nil
			yyq233[11] = x.Flocker != nil
			yyq233[12] = x.AzureFile != nil
			yyq233[13] = x.VsphereVolume != nil
			var yynn233 int
			if yyr233 || yy2arr233 {
				r.EncodeArrayStart(14)
			} else {
				yynn233 = 0
				for _, b := range yyq233 {
					if b {
						yynn233++
					}
				}
				r.EncodeMapStart(yynn233)
				yynn233 = 0
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq233[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym248 := z.DecBinary()
	_ = yym248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct249 := r.ContainerType()
		if yyct249 == codecSelferValueTypeMap1234 {
			yyl249 := r.ReadMapStart()
			if yyl249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl249, d)
			}
		} else if yyct249 == codecSelferValueTypeArray1234 {
			yyl249 := r.ReadArrayStart()
			if yyl249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys250Slc
	var yyhl250 bool = l >= 0
	for yyj250 := 0; ; yyj250++ {
		if yyhl250 {
			if yyj250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys250Slc = r.DecodeBytes(yys250Slc, true, true)
		yys250 := string(yys250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys250 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys250)
		} // end switch yys250
	} // end for yyj250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj265 int
	var yyb265 bool
	var yyhl265 bool = l >= 0
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj265++
		if yyhl265 {
			yyb265 = yyj265 > l
		} else {
			yyb265 = r.CheckBreak()
		}
		if yyb265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [2]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.ReadOnly != false
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(2)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym283 := z.EncBinary()
				_ = yym283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym284 := z.EncBinary()
				_ = yym284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[1] {
					yym286 := z.EncBinary()
					_ = yym286
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym288 := z.DecBinary()
	_ = yym288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct289 := r.ContainerType()
		if yyct289 == codecSelferValueTypeMap1234 {
			yyl289 := r.ReadMapStart()
			if yyl289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl289, d)
			}
		} else if yyct289 == codecSelferValueTypeArray1234 {
			yyl289 := r.ReadArrayStart()
			if yyl289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys290Slc
	var yyhl290 bool = l >= 0
	for yyj290 := 0; ; yyj290++ {
		if yyhl290 {
			if yyj290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys290Slc = r.DecodeBytes(yys290Slc, true, true)
		yys290 := string(yys290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys290 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys290)
		} // end switch yys290
	} // end for yyj290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj293 int
	var yyb293 bool
	var yyhl293 bool = l >= 0
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj293++
		if yyhl293 {
			yyb293 = yyj293 > l
		} else {
			yyb293 = r.CheckBreak()
		}
		if yyb293 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj293-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [5]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			yyq297[3] = true
			yyq297[4] = true
			var yynn297 int
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(5)
			} else {
				yynn297 = 0
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
				yynn297 = 0
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[2] {
					yy305 := &x.ObjectMeta
					yy305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy306 := &x.ObjectMeta
					yy306.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[3] {
					yy308 := &x.Spec
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Spec
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[4] {
					yy311 := &x.Status
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.Status
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv318 := &x.ObjectMeta
				yyv318.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv319 := &x.Spec
				yyv319.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv320 := &x.Status
				yyv320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv324 := &x.ObjectMeta
		yyv324.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv325 := &x.Spec
		yyv325.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv326 := &x.Status
		yyv326.CodecDecodeSelf(d)
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [18]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq328[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq328[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq328[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq328[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq328[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq328[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq328[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq328[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq328[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq328[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq328[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq328[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq328[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq328[15] = len(x.AccessModes) != 0
			yyq328[16] = x.ClaimRef != nil
			yyq328[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(18)
			} else {
				yynn328 = 1
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn330 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn330 = true
				goto LABEL330
			}
		LABEL330:
			if yyr328 || yy2arr328 {
				if yyn330 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn330 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn331 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn331 = true
				goto LABEL331
			}
		LABEL331:
			if yyr328 || yy2arr328 {
				if yyn331 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn331 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn332 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn332 = true
				goto LABEL332
			}
		LABEL332:
			if yyr328 || yy2arr328 {
				if yyn332 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn332 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn333 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn333 = true
				goto LABEL333
			}
		LABEL333:
			if yyr328 || yy2arr328 {
				if yyn333 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn333 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn334 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn334 = true
				goto LABEL334
			}
		LABEL334:
			if yyr328 || yy2arr328 {
				if yyn334 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn334 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn335 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn335 = true
				goto LABEL335
			}
		LABEL335:
			if yyr328 || yy2arr328 {
				if yyn335 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn335 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn336 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn336 = true
				goto LABEL336
			}
		LABEL336:
			if yyr328 || yy2arr328 {
				if yyn336 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn336 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn337 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn337 = true
				goto LABEL337
			}
		LABEL337:
			if yyr328 || yy2arr328 {
				if yyn337 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn337 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn338 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn338 = true
				goto LABEL338
			}
		LABEL338:
			if yyr328 || yy2arr328 {
				if yyn338 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn338 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr328 || yy2arr328 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr328 || yy2arr328 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr328 || yy2arr328 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr328 || yy2arr328 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr328 || yy2arr328 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq328[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq328[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym345 := z.EncBinary()
						_ = yym345
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym346 := z.EncBinary()
						_ = yym346
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym349 := z.DecBinary()
	_ = yym349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct350 := r.ContainerType()
		if yyct350 == codecSelferValueTypeMap1234 {
			yyl350 := r.ReadMapStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl350, d)
			}
		} else if yyct350 == codecSelferValueTypeArray1234 {
			yyl350 := r.ReadArrayStart()
			if yyl350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys351Slc
	var yyhl351 bool = l >= 0
	for yyj351 := 0; ; yyj351++ {
		if yyhl351 {
			if yyj351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys351Slc = r.DecodeBytes(yys351Slc, true, true)
		yys351 := string(yys351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys351 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv352 := &x.Capacity
				yyv352.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv367 := &x.AccessModes
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv367), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys351)
		} // end switch yys351
	} // end for yyj351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj371 int
	var yyb371 bool
	var yyhl371 bool = l >= 0
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv372 := &x.Capacity
		yyv372.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv387 := &x.AccessModes
		yym388 := z.DecBinary()
		_ = yym388
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv387), d)
		}
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj371++
	if yyhl371 {
		yyb371 = yyj371 > l
	} else {
		yyb371 = r.CheckBreak()
	}
	if yyb371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj371++
		if yyhl371 {
			yyb371 = yyj371 > l
		} else {
			yyb371 = r.CheckBreak()
		}
		if yyb371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym391 := z.EncBinary()
	_ = yym391
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym392 := z.DecBinary()
	_ = yym392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym393 := z.EncBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep394 := !z.EncBinary()
			yy2arr394 := z.EncBasicHandle().StructToArray
			var yyq394 [3]bool
			_, _, _ = yysep394, yyq394, yy2arr394
			const yyr394 bool = false
			yyq394[0] = x.Phase != ""
			yyq394[1] = x.Message != ""
			yyq394[2] = x.Reason != ""
			var yynn394 int
			if yyr394 || yy2arr394 {
				r.EncodeArrayStart(3)
			} else {
				yynn394 = 0
				for _, b := range yyq394 {
					if b {
						yynn394++
					}
				}
				r.EncodeMapStart(yynn394)
				yynn394 = 0
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[1] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq394[2] {
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym401 := z.EncBinary()
					_ = yym401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr394 || yy2arr394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym402 := z.DecBinary()
	_ = yym402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct403 := r.ContainerType()
		if yyct403 == codecSelferValueTypeMap1234 {
			yyl403 := r.ReadMapStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl403, d)
			}
		} else if yyct403 == codecSelferValueTypeArray1234 {
			yyl403 := r.ReadArrayStart()
			if yyl403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys404Slc
	var yyhl404 bool = l >= 0
	for yyj404 := 0; ; yyj404++ {
		if yyhl404 {
			if yyj404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys404Slc = r.DecodeBytes(yys404Slc, true, true)
		yys404 := string(yys404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys404 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys404)
		} // end switch yys404
	} // end for yyj404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj408 int
	var yyb408 bool
	var yyhl408 bool = l >= 0
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj408++
	if yyhl408 {
		yyb408 = yyj408 > l
	} else {
		yyb408 = r.CheckBreak()
	}
	if yyb408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj408++
		if yyhl408 {
			yyb408 = yyj408 > l
		} else {
			yyb408 = r.CheckBreak()
		}
		if yyb408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym412 := z.EncBinary()
		_ = yym412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep413 := !z.EncBinary()
			yy2arr413 := z.EncBasicHandle().StructToArray
			var yyq413 [4]bool
			_, _, _ = yysep413, yyq413, yy2arr413
			const yyr413 bool = false
			yyq413[0] = x.Kind != ""
			yyq413[1] = x.APIVersion != ""
			yyq413[2] = true
			var yynn413 int
			if yyr413 || yy2arr413 {
				r.EncodeArrayStart(4)
			} else {
				yynn413 = 1
				for _, b := range yyq413 {
					if b {
						yynn413++
					}
				}
				r.EncodeMapStart(yynn413)
				yynn413 = 0
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[0] {
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym416 := z.EncBinary()
					_ = yym416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[1] {
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym419 := z.EncBinary()
					_ = yym419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq413[2] {
					yy421 := &x.ListMeta
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else if z.HasExtensions() && z.EncExt(yy421) {
					} else {
						z.EncFallback(yy421)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.ListMeta
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else if z.HasExtensions() && z.EncExt(yy423) {
					} else {
						z.EncFallback(yy423)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr413 || yy2arr413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym428 := z.DecBinary()
	_ = yym428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct429 := r.ContainerType()
		if yyct429 == codecSelferValueTypeMap1234 {
			yyl429 := r.ReadMapStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl429, d)
			}
		} else if yyct429 == codecSelferValueTypeArray1234 {
			yyl429 := r.ReadArrayStart()
			if yyl429 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys430Slc
	var yyhl430 bool = l >= 0
	for yyj430 := 0; ; yyj430++ {
		if yyhl430 {
			if yyj430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys430Slc = r.DecodeBytes(yys430Slc, true, true)
		yys430 := string(yys430Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys430 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv433 := &x.ListMeta
				yym434 := z.DecBinary()
				_ = yym434
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv433) {
				} else {
					z.DecFallback(yyv433, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv435 := &x.Items
				yym436 := z.DecBinary()
				_ = yym436
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys430)
		} // end switch yys430
	} // end for yyj430
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv440 := &x.ListMeta
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv440) {
		} else {
			z.DecFallback(yyv440, false)
		}
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv442 := &x.Items
		yym443 := z.DecBinary()
		_ = yym443
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv442), d)
		}
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym444 := z.EncBinary()
		_ = yym444
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep445 := !z.EncBinary()
			yy2arr445 := z.EncBasicHandle().StructToArray
			var yyq445 [5]bool
			_, _, _ = yysep445, yyq445, yy2arr445
			const yyr445 bool = false
			yyq445[0] = x.Kind != ""
			yyq445[1] = x.APIVersion != ""
			yyq445[2] = true
			yyq445[3] = true
			yyq445[4] = true
			var yynn445 int
			if yyr445 || yy2arr445 {
				r.EncodeArrayStart(5)
			} else {
				yynn445 = 0
				for _, b := range yyq445 {
					if b {
						yynn445++
					}
				}
				r.EncodeMapStart(yynn445)
				yynn445 = 0
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[0] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq445[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[2] {
					yy453 := &x.ObjectMeta
					yy453.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy454 := &x.ObjectMeta
					yy454.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[3] {
					yy456 := &x.Spec
					yy456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy457 := &x.Spec
					yy457.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq445[4] {
					yy459 := &x.Status
					yy459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq445[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy460 := &x.Status
					yy460.CodecEncodeSelf(e)
				}
			}
			if yyr445 || yy2arr445 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym461 := z.DecBinary()
	_ = yym461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct462 := r.ContainerType()
		if yyct462 == codecSelferValueTypeMap1234 {
			yyl462 := r.ReadMapStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl462, d)
			}
		} else if yyct462 == codecSelferValueTypeArray1234 {
			yyl462 := r.ReadArrayStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys463Slc
	var yyhl463 bool = l >= 0
	for yyj463 := 0; ; yyj463++ {
		if yyhl463 {
			if yyj463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys463Slc = r.DecodeBytes(yys463Slc, true, true)
		yys463 := string(yys463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys463 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv466 := &x.ObjectMeta
				yyv466.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv467 := &x.Spec
				yyv467.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv468 := &x.Status
				yyv468.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys463)
		} // end switch yys463
	} // end for yyj463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv472 := &x.ObjectMeta
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv473 := &x.Spec
		yyv473.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv474 := &x.Status
		yyv474.CodecDecodeSelf(d)
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [4]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = x.Kind != ""
			yyq476[1] = x.APIVersion != ""
			yyq476[2] = true
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(4)
			} else {
				yynn476 = 1
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym482 := z.EncBinary()
					_ = yym482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[2] {
					yy484 := &x.ListMeta
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else if z.HasExtensions() && z.EncExt(yy484) {
					} else {
						z.EncFallback(yy484)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym491 := z.DecBinary()
	_ = yym491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct492 := r.ContainerType()
		if yyct492 == codecSelferValueTypeMap1234 {
			yyl492 := r.ReadMapStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl492, d)
			}
		} else if yyct492 == codecSelferValueTypeArray1234 {
			yyl492 := r.ReadArrayStart()
			if yyl492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys493Slc
	var yyhl493 bool = l >= 0
	for yyj493 := 0; ; yyj493++ {
		if yyhl493 {
			if yyj493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys493Slc = r.DecodeBytes(yys493Slc, true, true)
		yys493 := string(yys493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv496 := &x.ListMeta
				yym497 := z.DecBinary()
				_ = yym497
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv496) {
				} else {
					z.DecFallback(yyv496, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv498 := &x.Items
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv498), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys493)
		} // end switch yys493
	} // end for yyj493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv503 := &x.ListMeta
		yym504 := z.DecBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv503) {
		} else {
			z.DecFallback(yyv503, false)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv505 := &x.Items
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv505), d)
		}
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym507 := z.EncBinary()
		_ = yym507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep508 := !z.EncBinary()
			yy2arr508 := z.EncBasicHandle().StructToArray
			var yyq508 [4]bool
			_, _, _ = yysep508, yyq508, yy2arr508
			const yyr508 bool = false
			yyq508[0] = len(x.AccessModes) != 0
			yyq508[1] = x.Selector != nil
			yyq508[2] = true
			yyq508[3] = x.VolumeName != ""
			var yynn508 int
			if yyr508 || yy2arr508 {
				r.EncodeArrayStart(4)
			} else {
				yynn508 = 0
				for _, b := range yyq508 {
					if b {
						yynn508++
					}
				}
				r.EncodeMapStart(yynn508)
				yynn508 = 0
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym510 := z.EncBinary()
						_ = yym510
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym511 := z.EncBinary()
						_ = yym511
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym514 := z.EncBinary()
						_ = yym514
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[2] {
					yy516 := &x.Resources
					yy516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy517 := &x.Resources
					yy517.CodecEncodeSelf(e)
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq508[3] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr508 || yy2arr508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym521 := z.DecBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct522 := r.ContainerType()
		if yyct522 == codecSelferValueTypeMap1234 {
			yyl522 := r.ReadMapStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl522, d)
			}
		} else if yyct522 == codecSelferValueTypeArray1234 {
			yyl522 := r.ReadArrayStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys523Slc
	var yyhl523 bool = l >= 0
	for yyj523 := 0; ; yyj523++ {
		if yyhl523 {
			if yyj523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys523Slc = r.DecodeBytes(yys523Slc, true, true)
		yys523 := string(yys523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys523 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv524 := &x.AccessModes
				yym525 := z.DecBinary()
				_ = yym525
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv524), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym527 := z.DecBinary()
				_ = yym527
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv528 := &x.Resources
				yyv528.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys523)
		} // end switch yys523
	} // end for yyj523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj530 int
	var yyb530 bool
	var yyhl530 bool = l >= 0
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv531 := &x.AccessModes
		yym532 := z.DecBinary()
		_ = yym532
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv531), d)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv535 := &x.Resources
		yyv535.CodecDecodeSelf(d)
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj530++
		if yyhl530 {
			yyb530 = yyj530 > l
		} else {
			yyb530 = r.CheckBreak()
		}
		if yyb530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [3]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = x.Phase != ""
			yyq538[1] = len(x.AccessModes) != 0
			yyq538[2] = len(x.Capacity) != 0
			var yynn538 int
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(3)
			} else {
				yynn538 = 0
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
				yynn538 = 0
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym541 := z.EncBinary()
						_ = yym541
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv548 := &x.AccessModes
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv550 := &x.Capacity
				yyv550.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj551 int
	var yyb551 bool
	var yyhl551 bool = l >= 0
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv553 := &x.AccessModes
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
		}
	}
	yyj551++
	if yyhl551 {
		yyb551 = yyj551 > l
	} else {
		yyb551 = r.CheckBreak()
	}
	if yyb551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv555 := &x.Capacity
		yyv555.CodecDecodeSelf(d)
	}
	for {
		yyj551++
		if yyhl551 {
			yyb551 = yyj551 > l
		} else {
			yyb551 = r.CheckBreak()
		}
		if yyb551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym556 := z.EncBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym557 := z.DecBinary()
	_ = yym557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym558 := z.EncBinary()
	_ = yym558
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym559 := z.DecBinary()
	_ = yym559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym560 := z.EncBinary()
	_ = yym560
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym562 := z.EncBinary()
		_ = yym562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep563 := !z.EncBinary()
			yy2arr563 := z.EncBasicHandle().StructToArray
			var yyq563 [1]bool
			_, _, _ = yysep563, yyq563, yy2arr563
			const yyr563 bool = false
			var yynn563 int
			if yyr563 || yy2arr563 {
				r.EncodeArrayStart(1)
			} else {
				yynn563 = 1
				for _, b := range yyq563 {
					if b {
						yynn563++
					}
				}
				r.EncodeMapStart(yynn563)
				yynn563 = 0
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr563 || yy2arr563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym567 := z.DecBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct568 := r.ContainerType()
		if yyct568 == codecSelferValueTypeMap1234 {
			yyl568 := r.ReadMapStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl568, d)
			}
		} else if yyct568 == codecSelferValueTypeArray1234 {
			yyl568 := r.ReadArrayStart()
			if yyl568 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys569Slc
	var yyhl569 bool = l >= 0
	for yyj569 := 0; ; yyj569++ {
		if yyhl569 {
			if yyj569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys569Slc = r.DecodeBytes(yys569Slc, true, true)
		yys569 := string(yys569Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys569 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys569)
		} // end switch yys569
	} // end for yyj569
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym573 := z.EncBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep574 := !z.EncBinary()
			yy2arr574 := z.EncBasicHandle().StructToArray
			var yyq574 [1]bool
			_, _, _ = yysep574, yyq574, yy2arr574
			const yyr574 bool = false
			yyq574[0] = x.Medium != ""
			var yynn574 int
			if yyr574 || yy2arr574 {
				r.EncodeArrayStart(1)
			} else {
				yynn574 = 0
				for _, b := range yyq574 {
					if b {
						yynn574++
					}
				}
				r.EncodeMapStart(yynn574)
				yynn574 = 0
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq574[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym576 := z.DecBinary()
	_ = yym576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct577 := r.ContainerType()
		if yyct577 == codecSelferValueTypeMap1234 {
			yyl577 := r.ReadMapStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl577, d)
			}
		} else if yyct577 == codecSelferValueTypeArray1234 {
			yyl577 := r.ReadArrayStart()
			if yyl577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys578Slc
	var yyhl578 bool = l >= 0
	for yyj578 := 0; ; yyj578++ {
		if yyhl578 {
			if yyj578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys578Slc = r.DecodeBytes(yys578Slc, true, true)
		yys578 := string(yys578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys578 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys578)
		} // end switch yys578
	} // end for yyj578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym584 := z.EncBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym586 := z.EncBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep587 := !z.EncBinary()
			yy2arr587 := z.EncBasicHandle().StructToArray
			var yyq587 [4]bool
			_, _, _ = yysep587, yyq587, yy2arr587
			const yyr587 bool = false
			yyq587[1] = x.FSType != ""
			yyq587[2] = x.Partition != 0
			yyq587[3] = x.ReadOnly != false
			var yynn587 int
			if yyr587 || yy2arr587 {
				r.EncodeArrayStart(4)
			} else {
				yynn587 = 1
				for _, b := range yyq587 {
					if b {
						yynn587++
					}
				}
				r.EncodeMapStart(yynn587)
				yynn587 = 0
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym589 := z.EncBinary()
				_ = yym589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym590 := z.EncBinary()
				_ = yym590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[1] {
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq587[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[2] {
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq587[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[3] {
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq587[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct601 := r.ContainerType()
		if yyct601 == codecSelferValueTypeMap1234 {
			yyl601 := r.ReadMapStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl601, d)
			}
		} else if yyct601 == codecSelferValueTypeArray1234 {
			yyl601 := r.ReadArrayStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys602Slc
	var yyhl602 bool = l >= 0
	for yyj602 := 0; ; yyj602++ {
		if yyhl602 {
			if yyj602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys602Slc = r.DecodeBytes(yys602Slc, true, true)
		yys602 := string(yys602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys602 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys602)
		} // end switch yys602
	} // end for yyj602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj607 int
	var yyb607 bool
	var yyhl607 bool = l >= 0
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj607++
	if yyhl607 {
		yyb607 = yyj607 > l
	} else {
		yyb607 = r.CheckBreak()
	}
	if yyb607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj607++
		if yyhl607 {
			yyb607 = yyj607 > l
		} else {
			yyb607 = r.CheckBreak()
		}
		if yyb607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [6]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[0] = x.TargetPortal != ""
			yyq613[1] = x.IQN != ""
			yyq613[2] = x.Lun != 0
			yyq613[3] = x.ISCSIInterface != ""
			yyq613[4] = x.FSType != ""
			yyq613[5] = x.ReadOnly != false
			var yynn613 int
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(6)
			} else {
				yynn613 = 0
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
				yynn613 = 0
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[0] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[4] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[5] {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym632 := z.DecBinary()
	_ = yym632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct633 := r.ContainerType()
		if yyct633 == codecSelferValueTypeMap1234 {
			yyl633 := r.ReadMapStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl633, d)
			}
		} else if yyct633 == codecSelferValueTypeArray1234 {
			yyl633 := r.ReadArrayStart()
			if yyl633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys634Slc
	var yyhl634 bool = l >= 0
	for yyj634 := 0; ; yyj634++ {
		if yyhl634 {
			if yyj634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys634Slc = r.DecodeBytes(yys634Slc, true, true)
		yys634 := string(yys634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys634 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys634)
		} // end switch yys634
	} // end for yyj634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj641 int
	var yyb641 bool
	var yyhl641 bool = l >= 0
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj641++
	if yyhl641 {
		yyb641 = yyj641 > l
	} else {
		yyb641 = r.CheckBreak()
	}
	if yyb641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj641++
		if yyhl641 {
			yyb641 = yyj641 > l
		} else {
			yyb641 = r.CheckBreak()
		}
		if yyb641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym648 := z.EncBinary()
		_ = yym648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep649 := !z.EncBinary()
			yy2arr649 := z.EncBasicHandle().StructToArray
			var yyq649 [4]bool
			_, _, _ = yysep649, yyq649, yy2arr649
			const yyr649 bool = false
			yyq649[2] = x.FSType != ""
			yyq649[3] = x.ReadOnly != false
			var yynn649 int
			if yyr649 || yy2arr649 {
				r.EncodeArrayStart(4)
			} else {
				yynn649 = 2
				for _, b := range yyq649 {
					if b {
						yynn649++
					}
				}
				r.EncodeMapStart(yynn649)
				yynn649 = 0
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy654 := *x.Lun
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeInt(int64(yy654))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy656 := *x.Lun
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeInt(int64(yy656))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[2] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq649[3] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq649[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr649 || yy2arr649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct665 := r.ContainerType()
		if yyct665 == codecSelferValueTypeMap1234 {
			yyl665 := r.ReadMapStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl665, d)
			}
		} else if yyct665 == codecSelferValueTypeArray1234 {
			yyl665 := r.ReadArrayStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys666Slc
	var yyhl666 bool = l >= 0
	for yyj666 := 0; ; yyj666++ {
		if yyhl666 {
			if yyj666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys666Slc = r.DecodeBytes(yys666Slc, true, true)
		yys666 := string(yys666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys666 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv667 := &x.TargetWWNs
				yym668 := z.DecBinary()
				_ = yym668
				if false {
				} else {
					z.F.DecSliceStringX(yyv667, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym670 := z.DecBinary()
				_ = yym670
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys666)
		} // end switch yys666
	} // end for yyj666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj673 int
	var yyb673 bool
	var yyhl673 bool = l >= 0
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv674 := &x.TargetWWNs
		yym675 := z.DecBinary()
		_ = yym675
		if false {
		} else {
			z.F.DecSliceStringX(yyv674, false, d)
		}
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym677 := z.DecBinary()
		_ = yym677
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj673++
		if yyhl673 {
			yyb673 = yyj673 > l
		} else {
			yyb673 = r.CheckBreak()
		}
		if yyb673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym680 := z.EncBinary()
		_ = yym680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep681 := !z.EncBinary()
			yy2arr681 := z.EncBasicHandle().StructToArray
			var yyq681 [6]bool
			_, _, _ = yysep681, yyq681, yy2arr681
			const yyr681 bool = false
			yyq681[1] = x.FSType != ""
			yyq681[2] = x.SecretRef != nil
			yyq681[3] = x.ReadOnly != false
			yyq681[4] = len(x.Options) != 0
			yyq681[5] = len(x.OptionsItems) != 0
			var yynn681 int
			if yyr681 || yy2arr681 {
				r.EncodeArrayStart(6)
			} else {
				yynn681 = 1
				for _, b := range yyq681 {
					if b {
						yynn681++
					}
				}
				r.EncodeMapStart(yynn681)
				yynn681 = 0
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym684 := z.EncBinary()
				_ = yym684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[1] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[3] {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq681[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym693 := z.EncBinary()
						_ = yym693
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym694 := z.EncBinary()
						_ = yym694
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq681[5] {
					if x.OptionsItems == nil {
						r.EncodeNil()
					} else {
						yym696 := z.EncBinary()
						_ = yym696
						if false {
						} else {
							h.encSliceFlexVolumeOptionsItem(([]FlexVolumeOptionsItem)(x.OptionsItems), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq681[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("optionsItems"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OptionsItems == nil {
						r.EncodeNil()
					} else {
						yym697 := z.EncBinary()
						_ = yym697
						if false {
						} else {
							h.encSliceFlexVolumeOptionsItem(([]FlexVolumeOptionsItem)(x.OptionsItems), e)
						}
					}
				}
			}
			if yyr681 || yy2arr681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym698 := z.DecBinary()
	_ = yym698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct699 := r.ContainerType()
		if yyct699 == codecSelferValueTypeMap1234 {
			yyl699 := r.ReadMapStart()
			if yyl699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl699, d)
			}
		} else if yyct699 == codecSelferValueTypeArray1234 {
			yyl699 := r.ReadArrayStart()
			if yyl699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys700Slc
	var yyhl700 bool = l >= 0
	for yyj700 := 0; ; yyj700++ {
		if yyhl700 {
			if yyj700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys700Slc = r.DecodeBytes(yys700Slc, true, true)
		yys700 := string(yys700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys700 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv705 := &x.Options
				yym706 := z.DecBinary()
				_ = yym706
				if false {
				} else {
					z.F.DecMapStringStringX(yyv705, false, d)
				}
			}
		case "optionsItems":
			if r.TryDecodeAsNil() {
				x.OptionsItems = nil
			} else {
				yyv707 := &x.OptionsItems
				yym708 := z.DecBinary()
				_ = yym708
				if false {
				} else {
					h.decSliceFlexVolumeOptionsItem((*[]FlexVolumeOptionsItem)(yyv707), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys700)
		} // end switch yys700
	} // end for yyj700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj709 int
	var yyb709 bool
	var yyhl709 bool = l >= 0
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv714 := &x.Options
		yym715 := z.DecBinary()
		_ = yym715
		if false {
		} else {
			z.F.DecMapStringStringX(yyv714, false, d)
		}
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OptionsItems = nil
	} else {
		yyv716 := &x.OptionsItems
		yym717 := z.DecBinary()
		_ = yym717
		if false {
		} else {
			h.decSliceFlexVolumeOptionsItem((*[]FlexVolumeOptionsItem)(yyv716), d)
		}
	}
	for {
		yyj709++
		if yyhl709 {
			yyb709 = yyj709 > l
		} else {
			yyb709 = r.CheckBreak()
		}
		if yyb709 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj709-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeOptionsItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [2]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[1] = x.FieldRef != nil
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(2)
			} else {
				yynn719 = 1
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeOptionsItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym724 := z.DecBinary()
	_ = yym724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct725 := r.ContainerType()
		if yyct725 == codecSelferValueTypeMap1234 {
			yyl725 := r.ReadMapStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl725, d)
			}
		} else if yyct725 == codecSelferValueTypeArray1234 {
			yyl725 := r.ReadArrayStart()
			if yyl725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeOptionsItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys726Slc
	var yyhl726 bool = l >= 0
	for yyj726 := 0; ; yyj726++ {
		if yyhl726 {
			if yyj726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys726Slc = r.DecodeBytes(yys726Slc, true, true)
		yys726 := string(yys726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys726 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys726)
		} // end switch yys726
	} // end for yyj726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeOptionsItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj729 int
	var yyb729 bool
	var yyhl729 bool = l >= 0
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj729++
		if yyhl729 {
			yyb729 = yyj729 > l
		} else {
			yyb729 = r.CheckBreak()
		}
		if yyb729 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj729-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [4]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[1] = x.FSType != ""
			yyq733[2] = x.Partition != 0
			yyq733[3] = x.ReadOnly != false
			var yynn733 int
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(4)
			} else {
				yynn733 = 1
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
				yynn733 = 0
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq733[1] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq733[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq733[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq733[3] {
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym746 := z.DecBinary()
	_ = yym746
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct747 := r.ContainerType()
		if yyct747 == codecSelferValueTypeMap1234 {
			yyl747 := r.ReadMapStart()
			if yyl747 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl747, d)
			}
		} else if yyct747 == codecSelferValueTypeArray1234 {
			yyl747 := r.ReadArrayStart()
			if yyl747 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl747, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys748Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys748Slc
	var yyhl748 bool = l >= 0
	for yyj748 := 0; ; yyj748++ {
		if yyhl748 {
			if yyj748 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys748Slc = r.DecodeBytes(yys748Slc, true, true)
		yys748 := string(yys748Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys748 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys748)
		} // end switch yys748
	} // end for yyj748
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj753 int
	var yyb753 bool
	var yyhl753 bool = l >= 0
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj753++
		if yyhl753 {
			yyb753 = yyj753 > l
		} else {
			yyb753 = r.CheckBreak()
		}
		if yyb753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [3]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[1] = x.Revision != ""
			yyq759[2] = x.Directory != ""
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(3)
			} else {
				yynn759 = 1
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[1] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[2] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj775 int
	var yyb775 bool
	var yyhl775 bool = l >= 0
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj775++
		if yyhl775 {
			yyb775 = yyj775 > l
		} else {
			yyb775 = r.CheckBreak()
		}
		if yyb775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [2]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			yyq780[0] = x.SecretName != ""
			yyq780[1] = len(x.Items) != 0
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(2)
			} else {
				yynn780 = 0
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[0] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym785 := z.EncBinary()
						_ = yym785
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym786 := z.EncBinary()
						_ = yym786
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym787 := z.DecBinary()
	_ = yym787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct788 := r.ContainerType()
		if yyct788 == codecSelferValueTypeMap1234 {
			yyl788 := r.ReadMapStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl788, d)
			}
		} else if yyct788 == codecSelferValueTypeArray1234 {
			yyl788 := r.ReadArrayStart()
			if yyl788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys789Slc
	var yyhl789 bool = l >= 0
	for yyj789 := 0; ; yyj789++ {
		if yyhl789 {
			if yyj789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys789Slc = r.DecodeBytes(yys789Slc, true, true)
		yys789 := string(yys789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys789 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv791 := &x.Items
				yym792 := z.DecBinary()
				_ = yym792
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv791), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys789)
		} // end switch yys789
	} // end for yyj789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj793 int
	var yyb793 bool
	var yyhl793 bool = l >= 0
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv795 := &x.Items
		yym796 := z.DecBinary()
		_ = yym796
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv795), d)
		}
	}
	for {
		yyj793++
		if yyhl793 {
			yyb793 = yyj793 > l
		} else {
			yyb793 = r.CheckBreak()
		}
		if yyb793 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj793-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym797 := z.EncBinary()
		_ = yym797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep798 := !z.EncBinary()
			yy2arr798 := z.EncBasicHandle().StructToArray
			var yyq798 [3]bool
			_, _, _ = yysep798, yyq798, yy2arr798
			const yyr798 bool = false
			yyq798[2] = x.ReadOnly != false
			var yynn798 int
			if yyr798 || yy2arr798 {
				r.EncodeArrayStart(3)
			} else {
				yynn798 = 2
				for _, b := range yyq798 {
					if b {
						yynn798++
					}
				}
				r.EncodeMapStart(yynn798)
				yynn798 = 0
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym801 := z.EncBinary()
				_ = yym801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq798[2] {
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq798[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym808 := z.DecBinary()
	_ = yym808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct809 := r.ContainerType()
		if yyct809 == codecSelferValueTypeMap1234 {
			yyl809 := r.ReadMapStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl809, d)
			}
		} else if yyct809 == codecSelferValueTypeArray1234 {
			yyl809 := r.ReadArrayStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys810Slc
	var yyhl810 bool = l >= 0
	for yyj810 := 0; ; yyj810++ {
		if yyhl810 {
			if yyj810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys810Slc = r.DecodeBytes(yys810Slc, true, true)
		yys810 := string(yys810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys810 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys810)
		} // end switch yys810
	} // end for yyj810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [3]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[2] = x.ReadOnly != false
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(3)
			} else {
				yynn819 = 2
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[2] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym829 := z.DecBinary()
	_ = yym829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct830 := r.ContainerType()
		if yyct830 == codecSelferValueTypeMap1234 {
			yyl830 := r.ReadMapStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl830, d)
			}
		} else if yyct830 == codecSelferValueTypeArray1234 {
			yyl830 := r.ReadArrayStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys831Slc
	var yyhl831 bool = l >= 0
	for yyj831 := 0; ; yyj831++ {
		if yyhl831 {
			if yyj831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys831Slc = r.DecodeBytes(yys831Slc, true, true)
		yys831 := string(yys831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys831 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys831)
		} // end switch yys831
	} // end for yyj831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj835 int
	var yyb835 bool
	var yyhl835 bool = l >= 0
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj835++
		if yyhl835 {
			yyb835 = yyj835 > l
		} else {
			yyb835 = r.CheckBreak()
		}
		if yyb835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym839 := z.EncBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep840 := !z.EncBinary()
			yy2arr840 := z.EncBasicHandle().StructToArray
			var yyq840 [8]bool
			_, _, _ = yysep840, yyq840, yy2arr840
			const yyr840 bool = false
			yyq840[2] = x.FSType != ""
			yyq840[3] = x.RBDPool != ""
			yyq840[4] = x.RadosUser != ""
			yyq840[5] = x.Keyring != ""
			yyq840[6] = x.SecretRef != nil
			yyq840[7] = x.ReadOnly != false
			var yynn840 int
			if yyr840 || yy2arr840 {
				r.EncodeArrayStart(8)
			} else {
				yynn840 = 2
				for _, b := range yyq840 {
					if b {
						yynn840++
					}
				}
				r.EncodeMapStart(yynn840)
				yynn840 = 0
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym845 := z.EncBinary()
				_ = yym845
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[2] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[3] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[4] {
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[5] {
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq840[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq840[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq840[7] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq840[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym863 := z.DecBinary()
	_ = yym863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct864 := r.ContainerType()
		if yyct864 == codecSelferValueTypeMap1234 {
			yyl864 := r.ReadMapStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl864, d)
			}
		} else if yyct864 == codecSelferValueTypeArray1234 {
			yyl864 := r.ReadArrayStart()
			if yyl864 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys865Slc
	var yyhl865 bool = l >= 0
	for yyj865 := 0; ; yyj865++ {
		if yyhl865 {
			if yyj865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys865Slc = r.DecodeBytes(yys865Slc, true, true)
		yys865 := string(yys865Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys865 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv866 := &x.CephMonitors
				yym867 := z.DecBinary()
				_ = yym867
				if false {
				} else {
					z.F.DecSliceStringX(yyv866, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys865)
		} // end switch yys865
	} // end for yyj865
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj875 int
	var yyb875 bool
	var yyhl875 bool = l >= 0
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv876 := &x.CephMonitors
		yym877 := z.DecBinary()
		_ = yym877
		if false {
		} else {
			z.F.DecSliceStringX(yyv876, false, d)
		}
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj875++
	if yyhl875 {
		yyb875 = yyj875 > l
	} else {
		yyb875 = r.CheckBreak()
	}
	if yyb875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj875++
		if yyhl875 {
			yyb875 = yyj875 > l
		} else {
			yyb875 = r.CheckBreak()
		}
		if yyb875 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj875-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [3]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			yyq886[1] = x.FSType != ""
			yyq886[2] = x.ReadOnly != false
			var yynn886 int
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(3)
			} else {
				yynn886 = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
				yynn886 = 0
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym889 := z.EncBinary()
				_ = yym889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[1] {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq886[2] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr886 || yy2arr886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym896 := z.DecBinary()
	_ = yym896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct897 := r.ContainerType()
		if yyct897 == codecSelferValueTypeMap1234 {
			yyl897 := r.ReadMapStart()
			if yyl897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl897, d)
			}
		} else if yyct897 == codecSelferValueTypeArray1234 {
			yyl897 := r.ReadArrayStart()
			if yyl897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys898Slc
	var yyhl898 bool = l >= 0
	for yyj898 := 0; ; yyj898++ {
		if yyhl898 {
			if yyj898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys898Slc = r.DecodeBytes(yys898Slc, true, true)
		yys898 := string(yys898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys898 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys898)
		} // end switch yys898
	} // end for yyj898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj902 int
	var yyb902 bool
	var yyhl902 bool = l >= 0
	yyj902++
	if yyhl902 {
		yyb902 = yyj902 > l
	} else {
		yyb902 = r.CheckBreak()
	}
	if yyb902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj902++
	if yyhl902 {
		yyb902 = yyj902 > l
	} else {
		yyb902 = r.CheckBreak()
	}
	if yyb902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj902++
	if yyhl902 {
		yyb902 = yyj902 > l
	} else {
		yyb902 = r.CheckBreak()
	}
	if yyb902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj902++
		if yyhl902 {
			yyb902 = yyj902 > l
		} else {
			yyb902 = r.CheckBreak()
		}
		if yyb902 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj902-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym906 := z.EncBinary()
		_ = yym906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep907 := !z.EncBinary()
			yy2arr907 := z.EncBasicHandle().StructToArray
			var yyq907 [6]bool
			_, _, _ = yysep907, yyq907, yy2arr907
			const yyr907 bool = false
			yyq907[1] = x.Path != ""
			yyq907[2] = x.User != ""
			yyq907[3] = x.SecretFile != ""
			yyq907[4] = x.SecretRef != nil
			yyq907[5] = x.ReadOnly != false
			var yynn907 int
			if yyr907 || yy2arr907 {
				r.EncodeArrayStart(6)
			} else {
				yynn907 = 1
				for _, b := range yyq907 {
					if b {
						yynn907++
					}
				}
				r.EncodeMapStart(yynn907)
				yynn907 = 0
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym910 := z.EncBinary()
					_ = yym910
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[1] {
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq907[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[2] {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq907[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[3] {
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq907[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq907[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq907[5] {
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq907[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr907 || yy2arr907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct925 := r.ContainerType()
		if yyct925 == codecSelferValueTypeMap1234 {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if yyct925 == codecSelferValueTypeArray1234 {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys926 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv927 := &x.Monitors
				yym928 := z.DecBinary()
				_ = yym928
				if false {
				} else {
					z.F.DecSliceStringX(yyv927, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj934 int
	var yyb934 bool
	var yyhl934 bool = l >= 0
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv935 := &x.Monitors
		yym936 := z.DecBinary()
		_ = yym936
		if false {
		} else {
			z.F.DecSliceStringX(yyv935, false, d)
		}
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj934++
		if yyhl934 {
			yyb934 = yyj934 > l
		} else {
			yyb934 = r.CheckBreak()
		}
		if yyb934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym942 := z.EncBinary()
		_ = yym942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep943 := !z.EncBinary()
			yy2arr943 := z.EncBasicHandle().StructToArray
			var yyq943 [1]bool
			_, _, _ = yysep943, yyq943, yy2arr943
			const yyr943 bool = false
			var yynn943 int
			if yyr943 || yy2arr943 {
				r.EncodeArrayStart(1)
			} else {
				yynn943 = 1
				for _, b := range yyq943 {
					if b {
						yynn943++
					}
				}
				r.EncodeMapStart(yynn943)
				yynn943 = 0
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr943 || yy2arr943 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct948 := r.ContainerType()
		if yyct948 == codecSelferValueTypeMap1234 {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if yyct948 == codecSelferValueTypeArray1234 {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys949 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj951 int
	var yyb951 bool
	var yyhl951 bool = l >= 0
	yyj951++
	if yyhl951 {
		yyb951 = yyj951 > l
	} else {
		yyb951 = r.CheckBreak()
	}
	if yyb951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj951++
		if yyhl951 {
			yyb951 = yyj951 > l
		} else {
			yyb951 = r.CheckBreak()
		}
		if yyb951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym953 := z.EncBinary()
		_ = yym953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep954 := !z.EncBinary()
			yy2arr954 := z.EncBasicHandle().StructToArray
			var yyq954 [1]bool
			_, _, _ = yysep954, yyq954, yy2arr954
			const yyr954 bool = false
			yyq954[0] = len(x.Items) != 0
			var yynn954 int
			if yyr954 || yy2arr954 {
				r.EncodeArrayStart(1)
			} else {
				yynn954 = 0
				for _, b := range yyq954 {
					if b {
						yynn954++
					}
				}
				r.EncodeMapStart(yynn954)
				yynn954 = 0
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq954[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym956 := z.EncBinary()
						_ = yym956
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq954[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym957 := z.EncBinary()
						_ = yym957
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr954 || yy2arr954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv961 := &x.Items
				yym962 := z.DecBinary()
				_ = yym962
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv961), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv964 := &x.Items
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv964), d)
		}
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [3]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[1] = x.FieldRef != nil
			yyq967[2] = x.ResourceFieldRef != nil
			var yynn967 int
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(3)
			} else {
				yynn967 = 1
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
				yynn967 = 0
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym970 := z.EncBinary()
				_ = yym970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq967[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct974 := r.ContainerType()
		if yyct974 == codecSelferValueTypeMap1234 {
			yyl974 := r.ReadMapStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl974, d)
			}
		} else if yyct974 == codecSelferValueTypeArray1234 {
			yyl974 := r.ReadArrayStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys975Slc
	var yyhl975 bool = l >= 0
	for yyj975 := 0; ; yyj975++ {
		if yyhl975 {
			if yyj975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys975Slc = r.DecodeBytes(yys975Slc, true, true)
		yys975 := string(yys975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys975 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys975)
		} // end switch yys975
	} // end for yyj975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyq984 [3]bool
			_, _, _ = yysep984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[2] = x.ReadOnly != false
			var yynn984 int
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(3)
			} else {
				yynn984 = 2
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
				yynn984 = 0
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym986 := z.EncBinary()
				_ = yym986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[2] {
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct995 := r.ContainerType()
		if yyct995 == codecSelferValueTypeMap1234 {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if yyct995 == codecSelferValueTypeArray1234 {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys996 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1000 int
	var yyb1000 bool
	var yyhl1000 bool = l >= 0
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1000++
		if yyhl1000 {
			yyb1000 = yyj1000 > l
		} else {
			yyb1000 = r.CheckBreak()
		}
		if yyb1000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1004 := z.EncBinary()
		_ = yym1004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1005 := !z.EncBinary()
			yy2arr1005 := z.EncBasicHandle().StructToArray
			var yyq1005 [2]bool
			_, _, _ = yysep1005, yyq1005, yy2arr1005
			const yyr1005 bool = false
			yyq1005[1] = x.FSType != ""
			var yynn1005 int
			if yyr1005 || yy2arr1005 {
				r.EncodeArrayStart(2)
			} else {
				yynn1005 = 1
				for _, b := range yyq1005 {
					if b {
						yynn1005++
					}
				}
				r.EncodeMapStart(yynn1005)
				yynn1005 = 0
			}
			if yyr1005 || yy2arr1005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1007 := z.EncBinary()
				_ = yym1007
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1008 := z.EncBinary()
				_ = yym1008
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1005 || yy2arr1005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1005[1] {
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1005[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1011 := z.EncBinary()
					_ = yym1011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1005 || yy2arr1005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1012 := z.DecBinary()
	_ = yym1012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1013 := r.ContainerType()
		if yyct1013 == codecSelferValueTypeMap1234 {
			yyl1013 := r.ReadMapStart()
			if yyl1013 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1013, d)
			}
		} else if yyct1013 == codecSelferValueTypeArray1234 {
			yyl1013 := r.ReadArrayStart()
			if yyl1013 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1014Slc
	var yyhl1014 bool = l >= 0
	for yyj1014 := 0; ; yyj1014++ {
		if yyhl1014 {
			if yyj1014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1014Slc = r.DecodeBytes(yys1014Slc, true, true)
		yys1014 := string(yys1014Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1014 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1014)
		} // end switch yys1014
	} // end for yyj1014
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1017 int
	var yyb1017 bool
	var yyhl1017 bool = l >= 0
	yyj1017++
	if yyhl1017 {
		yyb1017 = yyj1017 > l
	} else {
		yyb1017 = r.CheckBreak()
	}
	if yyb1017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1017++
	if yyhl1017 {
		yyb1017 = yyj1017 > l
	} else {
		yyb1017 = r.CheckBreak()
	}
	if yyb1017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1017++
		if yyhl1017 {
			yyb1017 = yyj1017 > l
		} else {
			yyb1017 = r.CheckBreak()
		}
		if yyb1017 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1017-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1020 := z.EncBinary()
		_ = yym1020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1021 := !z.EncBinary()
			yy2arr1021 := z.EncBasicHandle().StructToArray
			var yyq1021 [2]bool
			_, _, _ = yysep1021, yyq1021, yy2arr1021
			const yyr1021 bool = false
			yyq1021[1] = len(x.Items) != 0
			var yynn1021 int
			if yyr1021 || yy2arr1021 {
				r.EncodeArrayStart(2)
			} else {
				yynn1021 = 1
				for _, b := range yyq1021 {
					if b {
						yynn1021++
					}
				}
				r.EncodeMapStart(yynn1021)
				yynn1021 = 0
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1023 := z.EncBinary()
				_ = yym1023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1021[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1026 := z.EncBinary()
						_ = yym1026
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1021[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1027 := z.EncBinary()
						_ = yym1027
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1028 := z.DecBinary()
	_ = yym1028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1029 := r.ContainerType()
		if yyct1029 == codecSelferValueTypeMap1234 {
			yyl1029 := r.ReadMapStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1029, d)
			}
		} else if yyct1029 == codecSelferValueTypeArray1234 {
			yyl1029 := r.ReadArrayStart()
			if yyl1029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1030Slc
	var yyhl1030 bool = l >= 0
	for yyj1030 := 0; ; yyj1030++ {
		if yyhl1030 {
			if yyj1030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1030Slc = r.DecodeBytes(yys1030Slc, true, true)
		yys1030 := string(yys1030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1030 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1032 := &x.Items
				yym1033 := z.DecBinary()
				_ = yym1033
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1032), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1030)
		} // end switch yys1030
	} // end for yyj1030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1034 int
	var yyb1034 bool
	var yyhl1034 bool = l >= 0
	yyj1034++
	if yyhl1034 {
		yyb1034 = yyj1034 > l
	} else {
		yyb1034 = r.CheckBreak()
	}
	if yyb1034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1034++
	if yyhl1034 {
		yyb1034 = yyj1034 > l
	} else {
		yyb1034 = r.CheckBreak()
	}
	if yyb1034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1036 := &x.Items
		yym1037 := z.DecBinary()
		_ = yym1037
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1036), d)
		}
	}
	for {
		yyj1034++
		if yyhl1034 {
			yyb1034 = yyj1034 > l
		} else {
			yyb1034 = r.CheckBreak()
		}
		if yyb1034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1038 := z.EncBinary()
		_ = yym1038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1039 := !z.EncBinary()
			yy2arr1039 := z.EncBasicHandle().StructToArray
			var yyq1039 [2]bool
			_, _, _ = yysep1039, yyq1039, yy2arr1039
			const yyr1039 bool = false
			var yynn1039 int
			if yyr1039 || yy2arr1039 {
				r.EncodeArrayStart(2)
			} else {
				yynn1039 = 2
				for _, b := range yyq1039 {
					if b {
						yynn1039++
					}
				}
				r.EncodeMapStart(yynn1039)
				yynn1039 = 0
			}
			if yyr1039 || yy2arr1039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1041 := z.EncBinary()
				_ = yym1041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1039 || yy2arr1039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1045 := z.EncBinary()
				_ = yym1045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1039 || yy2arr1039 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1047 := r.ContainerType()
		if yyct1047 == codecSelferValueTypeMap1234 {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if yyct1047 == codecSelferValueTypeArray1234 {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1048 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1054 := z.EncBinary()
		_ = yym1054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1055 := !z.EncBinary()
			yy2arr1055 := z.EncBasicHandle().StructToArray
			var yyq1055 [5]bool
			_, _, _ = yysep1055, yyq1055, yy2arr1055
			const yyr1055 bool = false
			yyq1055[0] = x.Name != ""
			yyq1055[1] = x.HostPort != 0
			yyq1055[3] = x.Protocol != ""
			yyq1055[4] = x.HostIP != ""
			var yynn1055 int
			if yyr1055 || yy2arr1055 {
				r.EncodeArrayStart(5)
			} else {
				yynn1055 = 1
				for _, b := range yyq1055 {
					if b {
						yynn1055++
					}
				}
				r.EncodeMapStart(yynn1055)
				yynn1055 = 0
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[0] {
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1058 := z.EncBinary()
					_ = yym1058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[1] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1055[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1063 := z.EncBinary()
				_ = yym1063
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1055[4] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1055[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1055 || yy2arr1055 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1069 := z.DecBinary()
	_ = yym1069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1070 := r.ContainerType()
		if yyct1070 == codecSelferValueTypeMap1234 {
			yyl1070 := r.ReadMapStart()
			if yyl1070 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1070, d)
			}
		} else if yyct1070 == codecSelferValueTypeArray1234 {
			yyl1070 := r.ReadArrayStart()
			if yyl1070 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1071Slc
	var yyhl1071 bool = l >= 0
	for yyj1071 := 0; ; yyj1071++ {
		if yyhl1071 {
			if yyj1071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1071Slc = r.DecodeBytes(yys1071Slc, true, true)
		yys1071 := string(yys1071Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1071 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1071)
		} // end switch yys1071
	} // end for yyj1071
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1077 int
	var yyb1077 bool
	var yyhl1077 bool = l >= 0
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1077++
		if yyhl1077 {
			yyb1077 = yyj1077 > l
		} else {
			yyb1077 = r.CheckBreak()
		}
		if yyb1077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1083 := z.EncBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1084 := !z.EncBinary()
			yy2arr1084 := z.EncBasicHandle().StructToArray
			var yyq1084 [4]bool
			_, _, _ = yysep1084, yyq1084, yy2arr1084
			const yyr1084 bool = false
			yyq1084[1] = x.ReadOnly != false
			yyq1084[3] = x.SubPath != ""
			var yynn1084 int
			if yyr1084 || yy2arr1084 {
				r.EncodeArrayStart(4)
			} else {
				yynn1084 = 2
				for _, b := range yyq1084 {
					if b {
						yynn1084++
					}
				}
				r.EncodeMapStart(yynn1084)
				yynn1084 = 0
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[1] {
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1090 := z.EncBinary()
					_ = yym1090
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1092 := z.EncBinary()
				_ = yym1092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1093 := z.EncBinary()
				_ = yym1093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[3] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1097 := z.DecBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1098 := r.ContainerType()
		if yyct1098 == codecSelferValueTypeMap1234 {
			yyl1098 := r.ReadMapStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1098, d)
			}
		} else if yyct1098 == codecSelferValueTypeArray1234 {
			yyl1098 := r.ReadArrayStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1099Slc
	var yyhl1099 bool = l >= 0
	for yyj1099 := 0; ; yyj1099++ {
		if yyhl1099 {
			if yyj1099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1099Slc = r.DecodeBytes(yys1099Slc, true, true)
		yys1099 := string(yys1099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1099 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1099)
		} // end switch yys1099
	} // end for yyj1099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1109 := z.EncBinary()
		_ = yym1109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1110 := !z.EncBinary()
			yy2arr1110 := z.EncBasicHandle().StructToArray
			var yyq1110 [3]bool
			_, _, _ = yysep1110, yyq1110, yy2arr1110
			const yyr1110 bool = false
			yyq1110[1] = x.Value != ""
			yyq1110[2] = x.ValueFrom != nil
			var yynn1110 int
			if yyr1110 || yy2arr1110 {
				r.EncodeArrayStart(3)
			} else {
				yynn1110 = 1
				for _, b := range yyq1110 {
					if b {
						yynn1110++
					}
				}
				r.EncodeMapStart(yynn1110)
				yynn1110 = 0
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1112 := z.EncBinary()
				_ = yym1112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1113 := z.EncBinary()
				_ = yym1113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1110[1] {
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1110[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1110[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1110[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1118 := z.DecBinary()
	_ = yym1118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1119 := r.ContainerType()
		if yyct1119 == codecSelferValueTypeMap1234 {
			yyl1119 := r.ReadMapStart()
			if yyl1119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1119, d)
			}
		} else if yyct1119 == codecSelferValueTypeArray1234 {
			yyl1119 := r.ReadArrayStart()
			if yyl1119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1120Slc
	var yyhl1120 bool = l >= 0
	for yyj1120 := 0; ; yyj1120++ {
		if yyhl1120 {
			if yyj1120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1120Slc = r.DecodeBytes(yys1120Slc, true, true)
		yys1120 := string(yys1120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1120 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1120)
		} // end switch yys1120
	} // end for yyj1120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1124 int
	var yyb1124 bool
	var yyhl1124 bool = l >= 0
	yyj1124++
	if yyhl1124 {
		yyb1124 = yyj1124 > l
	} else {
		yyb1124 = r.CheckBreak()
	}
	if yyb1124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1124++
	if yyhl1124 {
		yyb1124 = yyj1124 > l
	} else {
		yyb1124 = r.CheckBreak()
	}
	if yyb1124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1124++
	if yyhl1124 {
		yyb1124 = yyj1124 > l
	} else {
		yyb1124 = r.CheckBreak()
	}
	if yyb1124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1124++
		if yyhl1124 {
			yyb1124 = yyj1124 > l
		} else {
			yyb1124 = r.CheckBreak()
		}
		if yyb1124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1128 := z.EncBinary()
		_ = yym1128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1129 := !z.EncBinary()
			yy2arr1129 := z.EncBasicHandle().StructToArray
			var yyq1129 [4]bool
			_, _, _ = yysep1129, yyq1129, yy2arr1129
			const yyr1129 bool = false
			yyq1129[0] = x.FieldRef != nil
			yyq1129[1] = x.ResourceFieldRef != nil
			yyq1129[2] = x.ConfigMapKeyRef != nil
			yyq1129[3] = x.SecretKeyRef != nil
			var yynn1129 int
			if yyr1129 || yy2arr1129 {
				r.EncodeArrayStart(4)
			} else {
				yynn1129 = 0
				for _, b := range yyq1129 {
					if b {
						yynn1129++
					}
				}
				r.EncodeMapStart(yynn1129)
				yynn1129 = 0
			}
			if yyr1129 || yy2arr1129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1129[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1129 || yy2arr1129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1129[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1129[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1129 || yy2arr1129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1129[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1129[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1129 || yy2arr1129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1129[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1129[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1129 || yy2arr1129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1134 := z.DecBinary()
	_ = yym1134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1135 := r.ContainerType()
		if yyct1135 == codecSelferValueTypeMap1234 {
			yyl1135 := r.ReadMapStart()
			if yyl1135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1135, d)
			}
		} else if yyct1135 == codecSelferValueTypeArray1234 {
			yyl1135 := r.ReadArrayStart()
			if yyl1135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1136Slc
	var yyhl1136 bool = l >= 0
	for yyj1136 := 0; ; yyj1136++ {
		if yyhl1136 {
			if yyj1136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1136Slc = r.DecodeBytes(yys1136Slc, true, true)
		yys1136 := string(yys1136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1136 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1136)
		} // end switch yys1136
	} // end for yyj1136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1141 int
	var yyb1141 bool
	var yyhl1141 bool = l >= 0
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1141++
		if yyhl1141 {
			yyb1141 = yyj1141 > l
		} else {
			yyb1141 = r.CheckBreak()
		}
		if yyb1141 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1141-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1146 := z.EncBinary()
		_ = yym1146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1147 := !z.EncBinary()
			yy2arr1147 := z.EncBasicHandle().StructToArray
			var yyq1147 [2]bool
			_, _, _ = yysep1147, yyq1147, yy2arr1147
			const yyr1147 bool = false
			var yynn1147 int
			if yyr1147 || yy2arr1147 {
				r.EncodeArrayStart(2)
			} else {
				yynn1147 = 2
				for _, b := range yyq1147 {
					if b {
						yynn1147++
					}
				}
				r.EncodeMapStart(yynn1147)
				yynn1147 = 0
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1149 := z.EncBinary()
				_ = yym1149
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1150 := z.EncBinary()
				_ = yym1150
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1152 := z.EncBinary()
				_ = yym1152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1154 := z.DecBinary()
	_ = yym1154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1155 := r.ContainerType()
		if yyct1155 == codecSelferValueTypeMap1234 {
			yyl1155 := r.ReadMapStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1155, d)
			}
		} else if yyct1155 == codecSelferValueTypeArray1234 {
			yyl1155 := r.ReadArrayStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1156Slc
	var yyhl1156 bool = l >= 0
	for yyj1156 := 0; ; yyj1156++ {
		if yyhl1156 {
			if yyj1156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1156Slc = r.DecodeBytes(yys1156Slc, true, true)
		yys1156 := string(yys1156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1156 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1156)
		} // end switch yys1156
	} // end for yyj1156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1162 := z.EncBinary()
		_ = yym1162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1163 := !z.EncBinary()
			yy2arr1163 := z.EncBasicHandle().StructToArray
			var yyq1163 [3]bool
			_, _, _ = yysep1163, yyq1163, yy2arr1163
			const yyr1163 bool = false
			yyq1163[0] = x.ContainerName != ""
			yyq1163[2] = true
			var yynn1163 int
			if yyr1163 || yy2arr1163 {
				r.EncodeArrayStart(3)
			} else {
				yynn1163 = 1
				for _, b := range yyq1163 {
					if b {
						yynn1163++
					}
				}
				r.EncodeMapStart(yynn1163)
				yynn1163 = 0
			}
			if yyr1163 || yy2arr1163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1163[0] {
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1166 := z.EncBinary()
					_ = yym1166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1163 || yy2arr1163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1163 || yy2arr1163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1163[2] {
					yy1171 := &x.Divisor
					yym1172 := z.EncBinary()
					_ = yym1172
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1171) {
					} else if !yym1172 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1171)
					} else {
						z.EncFallback(yy1171)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1163[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1173 := &x.Divisor
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1173) {
					} else if !yym1174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1173)
					} else {
						z.EncFallback(yy1173)
					}
				}
			}
			if yyr1163 || yy2arr1163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1175 := z.DecBinary()
	_ = yym1175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1176 := r.ContainerType()
		if yyct1176 == codecSelferValueTypeMap1234 {
			yyl1176 := r.ReadMapStart()
			if yyl1176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1176, d)
			}
		} else if yyct1176 == codecSelferValueTypeArray1234 {
			yyl1176 := r.ReadArrayStart()
			if yyl1176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1177Slc
	var yyhl1177 bool = l >= 0
	for yyj1177 := 0; ; yyj1177++ {
		if yyhl1177 {
			if yyj1177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1177Slc = r.DecodeBytes(yys1177Slc, true, true)
		yys1177 := string(yys1177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1177 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1180 := &x.Divisor
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1180) {
				} else if !yym1181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1180)
				} else {
					z.DecFallback(yyv1180, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1177)
		} // end switch yys1177
	} // end for yyj1177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1185 := &x.Divisor
		yym1186 := z.DecBinary()
		_ = yym1186
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1185) {
		} else if !yym1186 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1185)
		} else {
			z.DecFallback(yyv1185, false)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1187 := z.EncBinary()
		_ = yym1187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1188 := !z.EncBinary()
			yy2arr1188 := z.EncBasicHandle().StructToArray
			var yyq1188 [2]bool
			_, _, _ = yysep1188, yyq1188, yy2arr1188
			const yyr1188 bool = false
			var yynn1188 int
			if yyr1188 || yy2arr1188 {
				r.EncodeArrayStart(2)
			} else {
				yynn1188 = 2
				for _, b := range yyq1188 {
					if b {
						yynn1188++
					}
				}
				r.EncodeMapStart(yynn1188)
				yynn1188 = 0
			}
			if yyr1188 || yy2arr1188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1190 := z.EncBinary()
				_ = yym1190
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1191 := z.EncBinary()
				_ = yym1191
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1188 || yy2arr1188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1193 := z.EncBinary()
				_ = yym1193
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1194 := z.EncBinary()
				_ = yym1194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1188 || yy2arr1188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1195 := z.DecBinary()
	_ = yym1195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1196 := r.ContainerType()
		if yyct1196 == codecSelferValueTypeMap1234 {
			yyl1196 := r.ReadMapStart()
			if yyl1196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1196, d)
			}
		} else if yyct1196 == codecSelferValueTypeArray1234 {
			yyl1196 := r.ReadArrayStart()
			if yyl1196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1197Slc
	var yyhl1197 bool = l >= 0
	for yyj1197 := 0; ; yyj1197++ {
		if yyhl1197 {
			if yyj1197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1197Slc = r.DecodeBytes(yys1197Slc, true, true)
		yys1197 := string(yys1197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1197 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1197)
		} // end switch yys1197
	} // end for yyj1197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1200 int
	var yyb1200 bool
	var yyhl1200 bool = l >= 0
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1200++
		if yyhl1200 {
			yyb1200 = yyj1200 > l
		} else {
			yyb1200 = r.CheckBreak()
		}
		if yyb1200 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1200-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1203 := z.EncBinary()
		_ = yym1203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1204 := !z.EncBinary()
			yy2arr1204 := z.EncBasicHandle().StructToArray
			var yyq1204 [2]bool
			_, _, _ = yysep1204, yyq1204, yy2arr1204
			const yyr1204 bool = false
			var yynn1204 int
			if yyr1204 || yy2arr1204 {
				r.EncodeArrayStart(2)
			} else {
				yynn1204 = 2
				for _, b := range yyq1204 {
					if b {
						yynn1204++
					}
				}
				r.EncodeMapStart(yynn1204)
				yynn1204 = 0
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1206 := z.EncBinary()
				_ = yym1206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1209 := z.EncBinary()
				_ = yym1209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1211 := z.DecBinary()
	_ = yym1211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1212 := r.ContainerType()
		if yyct1212 == codecSelferValueTypeMap1234 {
			yyl1212 := r.ReadMapStart()
			if yyl1212 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1212, d)
			}
		} else if yyct1212 == codecSelferValueTypeArray1234 {
			yyl1212 := r.ReadArrayStart()
			if yyl1212 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1213Slc
	var yyhl1213 bool = l >= 0
	for yyj1213 := 0; ; yyj1213++ {
		if yyhl1213 {
			if yyj1213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1213Slc = r.DecodeBytes(yys1213Slc, true, true)
		yys1213 := string(yys1213Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1213 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1213)
		} // end switch yys1213
	} // end for yyj1213
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1216 int
	var yyb1216 bool
	var yyhl1216 bool = l >= 0
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1216++
		if yyhl1216 {
			yyb1216 = yyj1216 > l
		} else {
			yyb1216 = r.CheckBreak()
		}
		if yyb1216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1219 := z.EncBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1220 := !z.EncBinary()
			yy2arr1220 := z.EncBasicHandle().StructToArray
			var yyq1220 [2]bool
			_, _, _ = yysep1220, yyq1220, yy2arr1220
			const yyr1220 bool = false
			var yynn1220 int
			if yyr1220 || yy2arr1220 {
				r.EncodeArrayStart(2)
			} else {
				yynn1220 = 2
				for _, b := range yyq1220 {
					if b {
						yynn1220++
					}
				}
				r.EncodeMapStart(yynn1220)
				yynn1220 = 0
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1223 := z.EncBinary()
				_ = yym1223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1226 := z.EncBinary()
				_ = yym1226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1227 := z.DecBinary()
	_ = yym1227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1228 := r.ContainerType()
		if yyct1228 == codecSelferValueTypeMap1234 {
			yyl1228 := r.ReadMapStart()
			if yyl1228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1228, d)
			}
		} else if yyct1228 == codecSelferValueTypeArray1234 {
			yyl1228 := r.ReadArrayStart()
			if yyl1228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1229Slc
	var yyhl1229 bool = l >= 0
	for yyj1229 := 0; ; yyj1229++ {
		if yyhl1229 {
			if yyj1229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1229Slc = r.DecodeBytes(yys1229Slc, true, true)
		yys1229 := string(yys1229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1229 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1229)
		} // end switch yys1229
	} // end for yyj1229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1232 int
	var yyb1232 bool
	var yyhl1232 bool = l >= 0
	yyj1232++
	if yyhl1232 {
		yyb1232 = yyj1232 > l
	} else {
		yyb1232 = r.CheckBreak()
	}
	if yyb1232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1232++
	if yyhl1232 {
		yyb1232 = yyj1232 > l
	} else {
		yyb1232 = r.CheckBreak()
	}
	if yyb1232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1232++
		if yyhl1232 {
			yyb1232 = yyj1232 > l
		} else {
			yyb1232 = r.CheckBreak()
		}
		if yyb1232 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1232-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1235 := z.EncBinary()
		_ = yym1235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1236 := !z.EncBinary()
			yy2arr1236 := z.EncBasicHandle().StructToArray
			var yyq1236 [5]bool
			_, _, _ = yysep1236, yyq1236, yy2arr1236
			const yyr1236 bool = false
			yyq1236[0] = x.Path != ""
			yyq1236[1] = true
			yyq1236[2] = x.Host != ""
			yyq1236[3] = x.Scheme != ""
			yyq1236[4] = len(x.HTTPHeaders) != 0
			var yynn1236 int
			if yyr1236 || yy2arr1236 {
				r.EncodeArrayStart(5)
			} else {
				yynn1236 = 0
				for _, b := range yyq1236 {
					if b {
						yynn1236++
					}
				}
				r.EncodeMapStart(yynn1236)
				yynn1236 = 0
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1236[0] {
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1236[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1236[1] {
					yy1241 := &x.Port
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1241) {
					} else if !yym1242 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1241)
					} else {
						z.EncFallback(yy1241)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1236[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1243 := &x.Port
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1243) {
					} else if !yym1244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1243)
					} else {
						z.EncFallback(yy1243)
					}
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1236[2] {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1236[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1236[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1236[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1236[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1250 := z.EncBinary()
						_ = yym1250
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1236[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1251 := z.EncBinary()
						_ = yym1251
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1252 := z.DecBinary()
	_ = yym1252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1253 := r.ContainerType()
		if yyct1253 == codecSelferValueTypeMap1234 {
			yyl1253 := r.ReadMapStart()
			if yyl1253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1253, d)
			}
		} else if yyct1253 == codecSelferValueTypeArray1234 {
			yyl1253 := r.ReadArrayStart()
			if yyl1253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1254Slc
	var yyhl1254 bool = l >= 0
	for yyj1254 := 0; ; yyj1254++ {
		if yyhl1254 {
			if yyj1254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1254Slc = r.DecodeBytes(yys1254Slc, true, true)
		yys1254 := string(yys1254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1254 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1256 := &x.Port
				yym1257 := z.DecBinary()
				_ = yym1257
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1256) {
				} else if !yym1257 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1256)
				} else {
					z.DecFallback(yyv1256, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1260 := &x.HTTPHeaders
				yym1261 := z.DecBinary()
				_ = yym1261
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1260), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1254)
		} // end switch yys1254
	} // end for yyj1254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1262 int
	var yyb1262 bool
	var yyhl1262 bool = l >= 0
	yyj1262++
	if yyhl1262 {
		yyb1262 = yyj1262 > l
	} else {
		yyb1262 = r.CheckBreak()
	}
	if yyb1262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1262++
	if yyhl1262 {
		yyb1262 = yyj1262 > l
	} else {
		yyb1262 = r.CheckBreak()
	}
	if yyb1262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1264 := &x.Port
		yym1265 := z.DecBinary()
		_ = yym1265
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1264) {
		} else if !yym1265 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1264)
		} else {
			z.DecFallback(yyv1264, false)
		}
	}
	yyj1262++
	if yyhl1262 {
		yyb1262 = yyj1262 > l
	} else {
		yyb1262 = r.CheckBreak()
	}
	if yyb1262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1262++
	if yyhl1262 {
		yyb1262 = yyj1262 > l
	} else {
		yyb1262 = r.CheckBreak()
	}
	if yyb1262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1262++
	if yyhl1262 {
		yyb1262 = yyj1262 > l
	} else {
		yyb1262 = r.CheckBreak()
	}
	if yyb1262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1268 := &x.HTTPHeaders
		yym1269 := z.DecBinary()
		_ = yym1269
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1268), d)
		}
	}
	for {
		yyj1262++
		if yyhl1262 {
			yyb1262 = yyj1262 > l
		} else {
			yyb1262 = r.CheckBreak()
		}
		if yyb1262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1270 := z.EncBinary()
	_ = yym1270
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1271 := z.DecBinary()
	_ = yym1271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [1]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[0] = true
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(1)
			} else {
				yynn1273 = 0
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[0] {
					yy1275 := &x.Port
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1275) {
					} else if !yym1276 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1275)
					} else {
						z.EncFallback(yy1275)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1277 := &x.Port
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1277) {
					} else if !yym1278 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1277)
					} else {
						z.EncFallback(yy1277)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1280 := r.ContainerType()
		if yyct1280 == codecSelferValueTypeMap1234 {
			yyl1280 := r.ReadMapStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1280, d)
			}
		} else if yyct1280 == codecSelferValueTypeArray1234 {
			yyl1280 := r.ReadArrayStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1281Slc
	var yyhl1281 bool = l >= 0
	for yyj1281 := 0; ; yyj1281++ {
		if yyhl1281 {
			if yyj1281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1281Slc = r.DecodeBytes(yys1281Slc, true, true)
		yys1281 := string(yys1281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1281 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1282 := &x.Port
				yym1283 := z.DecBinary()
				_ = yym1283
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1282) {
				} else if !yym1283 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1282)
				} else {
					z.DecFallback(yyv1282, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1281)
		} // end switch yys1281
	} // end for yyj1281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1284 int
	var yyb1284 bool
	var yyhl1284 bool = l >= 0
	yyj1284++
	if yyhl1284 {
		yyb1284 = yyj1284 > l
	} else {
		yyb1284 = r.CheckBreak()
	}
	if yyb1284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1285 := &x.Port
		yym1286 := z.DecBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1285) {
		} else if !yym1286 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1285)
		} else {
			z.DecFallback(yyv1285, false)
		}
	}
	for {
		yyj1284++
		if yyhl1284 {
			yyb1284 = yyj1284 > l
		} else {
			yyb1284 = r.CheckBreak()
		}
		if yyb1284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1287 := z.EncBinary()
		_ = yym1287
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1288 := !z.EncBinary()
			yy2arr1288 := z.EncBasicHandle().StructToArray
			var yyq1288 [1]bool
			_, _, _ = yysep1288, yyq1288, yy2arr1288
			const yyr1288 bool = false
			yyq1288[0] = len(x.Command) != 0
			var yynn1288 int
			if yyr1288 || yy2arr1288 {
				r.EncodeArrayStart(1)
			} else {
				yynn1288 = 0
				for _, b := range yyq1288 {
					if b {
						yynn1288++
					}
				}
				r.EncodeMapStart(yynn1288)
				yynn1288 = 0
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1288[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1290 := z.EncBinary()
						_ = yym1290
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1288[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1291 := z.EncBinary()
						_ = yym1291
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1288 || yy2arr1288 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1292 := z.DecBinary()
	_ = yym1292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1293 := r.ContainerType()
		if yyct1293 == codecSelferValueTypeMap1234 {
			yyl1293 := r.ReadMapStart()
			if yyl1293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1293, d)
			}
		} else if yyct1293 == codecSelferValueTypeArray1234 {
			yyl1293 := r.ReadArrayStart()
			if yyl1293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1294Slc
	var yyhl1294 bool = l >= 0
	for yyj1294 := 0; ; yyj1294++ {
		if yyhl1294 {
			if yyj1294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1294Slc = r.DecodeBytes(yys1294Slc, true, true)
		yys1294 := string(yys1294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1294 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1295 := &x.Command
				yym1296 := z.DecBinary()
				_ = yym1296
				if false {
				} else {
					z.F.DecSliceStringX(yyv1295, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1294)
		} // end switch yys1294
	} // end for yyj1294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1297 int
	var yyb1297 bool
	var yyhl1297 bool = l >= 0
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1298 := &x.Command
		yym1299 := z.DecBinary()
		_ = yym1299
		if false {
		} else {
			z.F.DecSliceStringX(yyv1298, false, d)
		}
	}
	for {
		yyj1297++
		if yyhl1297 {
			yyb1297 = yyj1297 > l
		} else {
			yyb1297 = r.CheckBreak()
		}
		if yyb1297 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1297-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1300 := z.EncBinary()
		_ = yym1300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1301 := !z.EncBinary()
			yy2arr1301 := z.EncBasicHandle().StructToArray
			var yyq1301 [8]bool
			_, _, _ = yysep1301, yyq1301, yy2arr1301
			const yyr1301 bool = false
			yyq1301[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1301[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1301[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1301[3] = x.InitialDelaySeconds != 0
			yyq1301[4] = x.TimeoutSeconds != 0
			yyq1301[5] = x.PeriodSeconds != 0
			yyq1301[6] = x.SuccessThreshold != 0
			yyq1301[7] = x.FailureThreshold != 0
			var yynn1301 int
			if yyr1301 || yy2arr1301 {
				r.EncodeArrayStart(8)
			} else {
				yynn1301 = 0
				for _, b := range yyq1301 {
					if b {
						yynn1301++
					}
				}
				r.EncodeMapStart(yynn1301)
				yynn1301 = 0
			}
			var yyn1302 bool
			if x.Handler.Exec == nil {
				yyn1302 = true
				goto LABEL1302
			}
		LABEL1302:
			if yyr1301 || yy2arr1301 {
				if yyn1302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1301[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1301[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1302 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1303 bool
			if x.Handler.HTTPGet == nil {
				yyn1303 = true
				goto LABEL1303
			}
		LABEL1303:
			if yyr1301 || yy2arr1301 {
				if yyn1303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1301[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1303 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1304 bool
			if x.Handler.TCPSocket == nil {
				yyn1304 = true
				goto LABEL1304
			}
		LABEL1304:
			if yyr1301 || yy2arr1301 {
				if yyn1304 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1301[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1301[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1304 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[3] {
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1301[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[4] {
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1301[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[5] {
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1301[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[6] {
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1301[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[7] {
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1301[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1320 := z.DecBinary()
	_ = yym1320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1321 := r.ContainerType()
		if yyct1321 == codecSelferValueTypeMap1234 {
			yyl1321 := r.ReadMapStart()
			if yyl1321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1321, d)
			}
		} else if yyct1321 == codecSelferValueTypeArray1234 {
			yyl1321 := r.ReadArrayStart()
			if yyl1321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1322Slc
	var yyhl1322 bool = l >= 0
	for yyj1322 := 0; ; yyj1322++ {
		if yyhl1322 {
			if yyj1322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1322Slc = r.DecodeBytes(yys1322Slc, true, true)
		yys1322 := string(yys1322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1322 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1322)
		} // end switch yys1322
	} // end for yyj1322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1331 int
	var yyb1331 bool
	var yyhl1331 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1331++
		if yyhl1331 {
			yyb1331 = yyj1331 > l
		} else {
			yyb1331 = r.CheckBreak()
		}
		if yyb1331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1340 := z.EncBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1341 := z.DecBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1342 := z.EncBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1344 := z.EncBinary()
		_ = yym1344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1345 := !z.EncBinary()
			yy2arr1345 := z.EncBasicHandle().StructToArray
			var yyq1345 [2]bool
			_, _, _ = yysep1345, yyq1345, yy2arr1345
			const yyr1345 bool = false
			yyq1345[0] = len(x.Add) != 0
			yyq1345[1] = len(x.Drop) != 0
			var yynn1345 int
			if yyr1345 || yy2arr1345 {
				r.EncodeArrayStart(2)
			} else {
				yynn1345 = 0
				for _, b := range yyq1345 {
					if b {
						yynn1345++
					}
				}
				r.EncodeMapStart(yynn1345)
				yynn1345 = 0
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1345[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1345[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1348 := z.EncBinary()
						_ = yym1348
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1345[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1350 := z.EncBinary()
						_ = yym1350
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1345[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1351 := z.EncBinary()
						_ = yym1351
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1352 := z.DecBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1353 := r.ContainerType()
		if yyct1353 == codecSelferValueTypeMap1234 {
			yyl1353 := r.ReadMapStart()
			if yyl1353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1353, d)
			}
		} else if yyct1353 == codecSelferValueTypeArray1234 {
			yyl1353 := r.ReadArrayStart()
			if yyl1353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1354Slc
	var yyhl1354 bool = l >= 0
	for yyj1354 := 0; ; yyj1354++ {
		if yyhl1354 {
			if yyj1354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1354Slc = r.DecodeBytes(yys1354Slc, true, true)
		yys1354 := string(yys1354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1354 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1355 := &x.Add
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1355), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1357 := &x.Drop
				yym1358 := z.DecBinary()
				_ = yym1358
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1357), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1354)
		} // end switch yys1354
	} // end for yyj1354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1360 := &x.Add
		yym1361 := z.DecBinary()
		_ = yym1361
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1360), d)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1362 := &x.Drop
		yym1363 := z.DecBinary()
		_ = yym1363
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1362), d)
		}
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1364 := z.EncBinary()
		_ = yym1364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1365 := !z.EncBinary()
			yy2arr1365 := z.EncBasicHandle().StructToArray
			var yyq1365 [2]bool
			_, _, _ = yysep1365, yyq1365, yy2arr1365
			const yyr1365 bool = false
			yyq1365[0] = len(x.Limits) != 0
			yyq1365[1] = len(x.Requests) != 0
			var yynn1365 int
			if yyr1365 || yy2arr1365 {
				r.EncodeArrayStart(2)
			} else {
				yynn1365 = 0
				for _, b := range yyq1365 {
					if b {
						yynn1365++
					}
				}
				r.EncodeMapStart(yynn1365)
				yynn1365 = 0
			}
			if yyr1365 || yy2arr1365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1365[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1365[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1365 || yy2arr1365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1365[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1365[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1365 || yy2arr1365 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1368 := z.DecBinary()
	_ = yym1368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1369 := r.ContainerType()
		if yyct1369 == codecSelferValueTypeMap1234 {
			yyl1369 := r.ReadMapStart()
			if yyl1369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1369, d)
			}
		} else if yyct1369 == codecSelferValueTypeArray1234 {
			yyl1369 := r.ReadArrayStart()
			if yyl1369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1370Slc
	var yyhl1370 bool = l >= 0
	for yyj1370 := 0; ; yyj1370++ {
		if yyhl1370 {
			if yyj1370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1370Slc = r.DecodeBytes(yys1370Slc, true, true)
		yys1370 := string(yys1370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1370 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1371 := &x.Limits
				yyv1371.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1372 := &x.Requests
				yyv1372.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1370)
		} // end switch yys1370
	} // end for yyj1370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1373 int
	var yyb1373 bool
	var yyhl1373 bool = l >= 0
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1374 := &x.Limits
		yyv1374.CodecDecodeSelf(d)
	}
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1375 := &x.Requests
		yyv1375.CodecDecodeSelf(d)
	}
	for {
		yyj1373++
		if yyhl1373 {
			yyb1373 = yyj1373 > l
		} else {
			yyb1373 = r.CheckBreak()
		}
		if yyb1373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1376 := z.EncBinary()
		_ = yym1376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1377 := !z.EncBinary()
			yy2arr1377 := z.EncBasicHandle().StructToArray
			var yyq1377 [18]bool
			_, _, _ = yysep1377, yyq1377, yy2arr1377
			const yyr1377 bool = false
			yyq1377[2] = len(x.Command) != 0
			yyq1377[3] = len(x.Args) != 0
			yyq1377[4] = x.WorkingDir != ""
			yyq1377[5] = len(x.Ports) != 0
			yyq1377[6] = len(x.Env) != 0
			yyq1377[7] = true
			yyq1377[8] = len(x.VolumeMounts) != 0
			yyq1377[9] = x.LivenessProbe != nil
			yyq1377[10] = x.ReadinessProbe != nil
			yyq1377[11] = x.Lifecycle != nil
			yyq1377[12] = x.TerminationMessagePath != ""
			yyq1377[14] = x.SecurityContext != nil
			yyq1377[15] = x.Stdin != false
			yyq1377[16] = x.StdinOnce != false
			yyq1377[17] = x.TTY != false
			var yynn1377 int
			if yyr1377 || yy2arr1377 {
				r.EncodeArrayStart(18)
			} else {
				yynn1377 = 3
				for _, b := range yyq1377 {
					if b {
						yynn1377++
					}
				}
				r.EncodeMapStart(yynn1377)
				yynn1377 = 0
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1379 := z.EncBinary()
				_ = yym1379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1380 := z.EncBinary()
				_ = yym1380
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1382 := z.EncBinary()
				_ = yym1382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1383 := z.EncBinary()
				_ = yym1383
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1385 := z.EncBinary()
						_ = yym1385
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1388 := z.EncBinary()
						_ = yym1388
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1389 := z.EncBinary()
						_ = yym1389
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[4] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1377[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1394 := z.EncBinary()
						_ = yym1394
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1395 := z.EncBinary()
						_ = yym1395
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1397 := z.EncBinary()
						_ = yym1397
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1398 := z.EncBinary()
						_ = yym1398
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[7] {
					yy1400 := &x.Resources
					yy1400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1401 := &x.Resources
					yy1401.CodecEncodeSelf(e)
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1403 := z.EncBinary()
						_ = yym1403
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1404 := z.EncBinary()
						_ = yym1404
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[12] {
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1377[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[15] {
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1377[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1415 := z.EncBinary()
					_ = yym1415
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[16] {
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1377[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1418 := z.EncBinary()
					_ = yym1418
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[17] {
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1377[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1422 := z.DecBinary()
	_ = yym1422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1423 := r.ContainerType()
		if yyct1423 == codecSelferValueTypeMap1234 {
			yyl1423 := r.ReadMapStart()
			if yyl1423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1423, d)
			}
		} else if yyct1423 == codecSelferValueTypeArray1234 {
			yyl1423 := r.ReadArrayStart()
			if yyl1423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1424Slc
	var yyhl1424 bool = l >= 0
	for yyj1424 := 0; ; yyj1424++ {
		if yyhl1424 {
			if yyj1424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1424Slc = r.DecodeBytes(yys1424Slc, true, true)
		yys1424 := string(yys1424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1424 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1427 := &x.Command
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					z.F.DecSliceStringX(yyv1427, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1429 := &x.Args
				yym1430 := z.DecBinary()
				_ = yym1430
				if false {
				} else {
					z.F.DecSliceStringX(yyv1429, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1432 := &x.Ports
				yym1433 := z.DecBinary()
				_ = yym1433
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1432), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1434 := &x.Env
				yym1435 := z.DecBinary()
				_ = yym1435
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1434), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1436 := &x.Resources
				yyv1436.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1437 := &x.VolumeMounts
				yym1438 := z.DecBinary()
				_ = yym1438
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1437), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1424)
		} // end switch yys1424
	} // end for yyj1424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1448 int
	var yyb1448 bool
	var yyhl1448 bool = l >= 0
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1451 := &x.Command
		yym1452 := z.DecBinary()
		_ = yym1452
		if false {
		} else {
			z.F.DecSliceStringX(yyv1451, false, d)
		}
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1453 := &x.Args
		yym1454 := z.DecBinary()
		_ = yym1454
		if false {
		} else {
			z.F.DecSliceStringX(yyv1453, false, d)
		}
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1456 := &x.Ports
		yym1457 := z.DecBinary()
		_ = yym1457
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1456), d)
		}
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1458 := &x.Env
		yym1459 := z.DecBinary()
		_ = yym1459
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1458), d)
		}
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1460 := &x.Resources
		yyv1460.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1461 := &x.VolumeMounts
		yym1462 := z.DecBinary()
		_ = yym1462
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1461), d)
		}
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1448++
	if yyhl1448 {
		yyb1448 = yyj1448 > l
	} else {
		yyb1448 = r.CheckBreak()
	}
	if yyb1448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1448++
		if yyhl1448 {
			yyb1448 = yyj1448 > l
		} else {
			yyb1448 = r.CheckBreak()
		}
		if yyb1448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1472 := z.EncBinary()
		_ = yym1472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1473 := !z.EncBinary()
			yy2arr1473 := z.EncBasicHandle().StructToArray
			var yyq1473 [3]bool
			_, _, _ = yysep1473, yyq1473, yy2arr1473
			const yyr1473 bool = false
			yyq1473[0] = x.Exec != nil
			yyq1473[1] = x.HTTPGet != nil
			yyq1473[2] = x.TCPSocket != nil
			var yynn1473 int
			if yyr1473 || yy2arr1473 {
				r.EncodeArrayStart(3)
			} else {
				yynn1473 = 0
				for _, b := range yyq1473 {
					if b {
						yynn1473++
					}
				}
				r.EncodeMapStart(yynn1473)
				yynn1473 = 0
			}
			if yyr1473 || yy2arr1473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1473[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1473 || yy2arr1473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1473[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1473 || yy2arr1473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1473[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1473[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1473 || yy2arr1473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1477 := z.DecBinary()
	_ = yym1477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1478 := r.ContainerType()
		if yyct1478 == codecSelferValueTypeMap1234 {
			yyl1478 := r.ReadMapStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1478, d)
			}
		} else if yyct1478 == codecSelferValueTypeArray1234 {
			yyl1478 := r.ReadArrayStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1479Slc
	var yyhl1479 bool = l >= 0
	for yyj1479 := 0; ; yyj1479++ {
		if yyhl1479 {
			if yyj1479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1479Slc = r.DecodeBytes(yys1479Slc, true, true)
		yys1479 := string(yys1479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1479 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1479)
		} // end switch yys1479
	} // end for yyj1479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1483 int
	var yyb1483 bool
	var yyhl1483 bool = l >= 0
	yyj1483++
	if yyhl1483 {
		yyb1483 = yyj1483 > l
	} else {
		yyb1483 = r.CheckBreak()
	}
	if yyb1483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1483++
	if yyhl1483 {
		yyb1483 = yyj1483 > l
	} else {
		yyb1483 = r.CheckBreak()
	}
	if yyb1483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1483++
	if yyhl1483 {
		yyb1483 = yyj1483 > l
	} else {
		yyb1483 = r.CheckBreak()
	}
	if yyb1483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1483++
		if yyhl1483 {
			yyb1483 = yyj1483 > l
		} else {
			yyb1483 = r.CheckBreak()
		}
		if yyb1483 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1483-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1487 := z.EncBinary()
		_ = yym1487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1488 := !z.EncBinary()
			yy2arr1488 := z.EncBasicHandle().StructToArray
			var yyq1488 [2]bool
			_, _, _ = yysep1488, yyq1488, yy2arr1488
			const yyr1488 bool = false
			yyq1488[0] = x.PostStart != nil
			yyq1488[1] = x.PreStop != nil
			var yynn1488 int
			if yyr1488 || yy2arr1488 {
				r.EncodeArrayStart(2)
			} else {
				yynn1488 = 0
				for _, b := range yyq1488 {
					if b {
						yynn1488++
					}
				}
				r.EncodeMapStart(yynn1488)
				yynn1488 = 0
			}
			if yyr1488 || yy2arr1488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1488[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1488 || yy2arr1488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1488[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1488 || yy2arr1488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1491 := z.DecBinary()
	_ = yym1491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1492 := r.ContainerType()
		if yyct1492 == codecSelferValueTypeMap1234 {
			yyl1492 := r.ReadMapStart()
			if yyl1492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1492, d)
			}
		} else if yyct1492 == codecSelferValueTypeArray1234 {
			yyl1492 := r.ReadArrayStart()
			if yyl1492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1493Slc
	var yyhl1493 bool = l >= 0
	for yyj1493 := 0; ; yyj1493++ {
		if yyhl1493 {
			if yyj1493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1493Slc = r.DecodeBytes(yys1493Slc, true, true)
		yys1493 := string(yys1493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1493 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1493)
		} // end switch yys1493
	} // end for yyj1493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1496 int
	var yyb1496 bool
	var yyhl1496 bool = l >= 0
	yyj1496++
	if yyhl1496 {
		yyb1496 = yyj1496 > l
	} else {
		yyb1496 = r.CheckBreak()
	}
	if yyb1496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1496++
	if yyhl1496 {
		yyb1496 = yyj1496 > l
	} else {
		yyb1496 = r.CheckBreak()
	}
	if yyb1496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1496++
		if yyhl1496 {
			yyb1496 = yyj1496 > l
		} else {
			yyb1496 = r.CheckBreak()
		}
		if yyb1496 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1496-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1499 := z.EncBinary()
	_ = yym1499
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1500 := z.DecBinary()
	_ = yym1500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1501 := z.EncBinary()
		_ = yym1501
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1502 := !z.EncBinary()
			yy2arr1502 := z.EncBasicHandle().StructToArray
			var yyq1502 [2]bool
			_, _, _ = yysep1502, yyq1502, yy2arr1502
			const yyr1502 bool = false
			yyq1502[0] = x.Reason != ""
			yyq1502[1] = x.Message != ""
			var yynn1502 int
			if yyr1502 || yy2arr1502 {
				r.EncodeArrayStart(2)
			} else {
				yynn1502 = 0
				for _, b := range yyq1502 {
					if b {
						yynn1502++
					}
				}
				r.EncodeMapStart(yynn1502)
				yynn1502 = 0
			}
			if yyr1502 || yy2arr1502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1502[0] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1502[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1502 || yy2arr1502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1502[1] {
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1502[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1502 || yy2arr1502 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1509 := z.DecBinary()
	_ = yym1509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1510 := r.ContainerType()
		if yyct1510 == codecSelferValueTypeMap1234 {
			yyl1510 := r.ReadMapStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1510, d)
			}
		} else if yyct1510 == codecSelferValueTypeArray1234 {
			yyl1510 := r.ReadArrayStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1511Slc
	var yyhl1511 bool = l >= 0
	for yyj1511 := 0; ; yyj1511++ {
		if yyhl1511 {
			if yyj1511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1511Slc = r.DecodeBytes(yys1511Slc, true, true)
		yys1511 := string(yys1511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1511 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1511)
		} // end switch yys1511
	} // end for yyj1511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1514 int
	var yyb1514 bool
	var yyhl1514 bool = l >= 0
	yyj1514++
	if yyhl1514 {
		yyb1514 = yyj1514 > l
	} else {
		yyb1514 = r.CheckBreak()
	}
	if yyb1514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1514++
	if yyhl1514 {
		yyb1514 = yyj1514 > l
	} else {
		yyb1514 = r.CheckBreak()
	}
	if yyb1514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1514++
		if yyhl1514 {
			yyb1514 = yyj1514 > l
		} else {
			yyb1514 = r.CheckBreak()
		}
		if yyb1514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1517 := z.EncBinary()
		_ = yym1517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1518 := !z.EncBinary()
			yy2arr1518 := z.EncBasicHandle().StructToArray
			var yyq1518 [1]bool
			_, _, _ = yysep1518, yyq1518, yy2arr1518
			const yyr1518 bool = false
			yyq1518[0] = true
			var yynn1518 int
			if yyr1518 || yy2arr1518 {
				r.EncodeArrayStart(1)
			} else {
				yynn1518 = 0
				for _, b := range yyq1518 {
					if b {
						yynn1518++
					}
				}
				r.EncodeMapStart(yynn1518)
				yynn1518 = 0
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1518[0] {
					yy1520 := &x.StartedAt
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1520) {
					} else if yym1521 {
						z.EncBinaryMarshal(yy1520)
					} else if !yym1521 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1520)
					} else {
						z.EncFallback(yy1520)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1518[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1522 := &x.StartedAt
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1522) {
					} else if yym1523 {
						z.EncBinaryMarshal(yy1522)
					} else if !yym1523 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1522)
					} else {
						z.EncFallback(yy1522)
					}
				}
			}
			if yyr1518 || yy2arr1518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1524 := z.DecBinary()
	_ = yym1524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1525 := r.ContainerType()
		if yyct1525 == codecSelferValueTypeMap1234 {
			yyl1525 := r.ReadMapStart()
			if yyl1525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1525, d)
			}
		} else if yyct1525 == codecSelferValueTypeArray1234 {
			yyl1525 := r.ReadArrayStart()
			if yyl1525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1526Slc
	var yyhl1526 bool = l >= 0
	for yyj1526 := 0; ; yyj1526++ {
		if yyhl1526 {
			if yyj1526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1526Slc = r.DecodeBytes(yys1526Slc, true, true)
		yys1526 := string(yys1526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1526 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1527 := &x.StartedAt
				yym1528 := z.DecBinary()
				_ = yym1528
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1527) {
				} else if yym1528 {
					z.DecBinaryUnmarshal(yyv1527)
				} else if !yym1528 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1527)
				} else {
					z.DecFallback(yyv1527, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1526)
		} // end switch yys1526
	} // end for yyj1526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1529 int
	var yyb1529 bool
	var yyhl1529 bool = l >= 0
	yyj1529++
	if yyhl1529 {
		yyb1529 = yyj1529 > l
	} else {
		yyb1529 = r.CheckBreak()
	}
	if yyb1529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1530 := &x.StartedAt
		yym1531 := z.DecBinary()
		_ = yym1531
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1530) {
		} else if yym1531 {
			z.DecBinaryUnmarshal(yyv1530)
		} else if !yym1531 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1530)
		} else {
			z.DecFallback(yyv1530, false)
		}
	}
	for {
		yyj1529++
		if yyhl1529 {
			yyb1529 = yyj1529 > l
		} else {
			yyb1529 = r.CheckBreak()
		}
		if yyb1529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1532 := z.EncBinary()
		_ = yym1532
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1533 := !z.EncBinary()
			yy2arr1533 := z.EncBasicHandle().StructToArray
			var yyq1533 [7]bool
			_, _, _ = yysep1533, yyq1533, yy2arr1533
			const yyr1533 bool = false
			yyq1533[1] = x.Signal != 0
			yyq1533[2] = x.Reason != ""
			yyq1533[3] = x.Message != ""
			yyq1533[4] = true
			yyq1533[5] = true
			yyq1533[6] = x.ContainerID != ""
			var yynn1533 int
			if yyr1533 || yy2arr1533 {
				r.EncodeArrayStart(7)
			} else {
				yynn1533 = 1
				for _, b := range yyq1533 {
					if b {
						yynn1533++
					}
				}
				r.EncodeMapStart(yynn1533)
				yynn1533 = 0
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1535 := z.EncBinary()
				_ = yym1535
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1536 := z.EncBinary()
				_ = yym1536
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[1] {
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1533[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1539 := z.EncBinary()
					_ = yym1539
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[2] {
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1533[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1542 := z.EncBinary()
					_ = yym1542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[3] {
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1533[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1545 := z.EncBinary()
					_ = yym1545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[4] {
					yy1547 := &x.StartedAt
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1547) {
					} else if yym1548 {
						z.EncBinaryMarshal(yy1547)
					} else if !yym1548 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1547)
					} else {
						z.EncFallback(yy1547)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1533[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1549 := &x.StartedAt
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1549) {
					} else if yym1550 {
						z.EncBinaryMarshal(yy1549)
					} else if !yym1550 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1549)
					} else {
						z.EncFallback(yy1549)
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[5] {
					yy1552 := &x.FinishedAt
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1552) {
					} else if yym1553 {
						z.EncBinaryMarshal(yy1552)
					} else if !yym1553 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1552)
					} else {
						z.EncFallback(yy1552)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1533[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1554 := &x.FinishedAt
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1554) {
					} else if yym1555 {
						z.EncBinaryMarshal(yy1554)
					} else if !yym1555 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1554)
					} else {
						z.EncFallback(yy1554)
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[6] {
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1533[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1559 := z.DecBinary()
	_ = yym1559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1560 := r.ContainerType()
		if yyct1560 == codecSelferValueTypeMap1234 {
			yyl1560 := r.ReadMapStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1560, d)
			}
		} else if yyct1560 == codecSelferValueTypeArray1234 {
			yyl1560 := r.ReadArrayStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1561Slc
	var yyhl1561 bool = l >= 0
	for yyj1561 := 0; ; yyj1561++ {
		if yyhl1561 {
			if yyj1561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1561Slc = r.DecodeBytes(yys1561Slc, true, true)
		yys1561 := string(yys1561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1561 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1566 := &x.StartedAt
				yym1567 := z.DecBinary()
				_ = yym1567
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1566) {
				} else if yym1567 {
					z.DecBinaryUnmarshal(yyv1566)
				} else if !yym1567 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1566)
				} else {
					z.DecFallback(yyv1566, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1568 := &x.FinishedAt
				yym1569 := z.DecBinary()
				_ = yym1569
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1568) {
				} else if yym1569 {
					z.DecBinaryUnmarshal(yyv1568)
				} else if !yym1569 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1568)
				} else {
					z.DecFallback(yyv1568, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1561)
		} // end switch yys1561
	} // end for yyj1561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1571 int
	var yyb1571 bool
	var yyhl1571 bool = l >= 0
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1576 := &x.StartedAt
		yym1577 := z.DecBinary()
		_ = yym1577
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1576) {
		} else if yym1577 {
			z.DecBinaryUnmarshal(yyv1576)
		} else if !yym1577 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1576)
		} else {
			z.DecFallback(yyv1576, false)
		}
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1578 := &x.FinishedAt
		yym1579 := z.DecBinary()
		_ = yym1579
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1578) {
		} else if yym1579 {
			z.DecBinaryUnmarshal(yyv1578)
		} else if !yym1579 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1578)
		} else {
			z.DecFallback(yyv1578, false)
		}
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1571++
		if yyhl1571 {
			yyb1571 = yyj1571 > l
		} else {
			yyb1571 = r.CheckBreak()
		}
		if yyb1571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1581 := z.EncBinary()
		_ = yym1581
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1582 := !z.EncBinary()
			yy2arr1582 := z.EncBasicHandle().StructToArray
			var yyq1582 [3]bool
			_, _, _ = yysep1582, yyq1582, yy2arr1582
			const yyr1582 bool = false
			yyq1582[0] = x.Waiting != nil
			yyq1582[1] = x.Running != nil
			yyq1582[2] = x.Terminated != nil
			var yynn1582 int
			if yyr1582 || yy2arr1582 {
				r.EncodeArrayStart(3)
			} else {
				yynn1582 = 0
				for _, b := range yyq1582 {
					if b {
						yynn1582++
					}
				}
				r.EncodeMapStart(yynn1582)
				yynn1582 = 0
			}
			if yyr1582 || yy2arr1582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1582[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1582[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1582 || yy2arr1582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1582[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1582[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1582 || yy2arr1582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1582[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1582[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1582 || yy2arr1582 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1586 := z.DecBinary()
	_ = yym1586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1587 := r.ContainerType()
		if yyct1587 == codecSelferValueTypeMap1234 {
			yyl1587 := r.ReadMapStart()
			if yyl1587 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1587, d)
			}
		} else if yyct1587 == codecSelferValueTypeArray1234 {
			yyl1587 := r.ReadArrayStart()
			if yyl1587 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1587, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1588Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1588Slc
	var yyhl1588 bool = l >= 0
	for yyj1588 := 0; ; yyj1588++ {
		if yyhl1588 {
			if yyj1588 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1588Slc = r.DecodeBytes(yys1588Slc, true, true)
		yys1588 := string(yys1588Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1588 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1588)
		} // end switch yys1588
	} // end for yyj1588
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1592 int
	var yyb1592 bool
	var yyhl1592 bool = l >= 0
	yyj1592++
	if yyhl1592 {
		yyb1592 = yyj1592 > l
	} else {
		yyb1592 = r.CheckBreak()
	}
	if yyb1592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1592++
	if yyhl1592 {
		yyb1592 = yyj1592 > l
	} else {
		yyb1592 = r.CheckBreak()
	}
	if yyb1592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1592++
	if yyhl1592 {
		yyb1592 = yyj1592 > l
	} else {
		yyb1592 = r.CheckBreak()
	}
	if yyb1592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1592++
		if yyhl1592 {
			yyb1592 = yyj1592 > l
		} else {
			yyb1592 = r.CheckBreak()
		}
		if yyb1592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1596 := z.EncBinary()
		_ = yym1596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1597 := !z.EncBinary()
			yy2arr1597 := z.EncBasicHandle().StructToArray
			var yyq1597 [8]bool
			_, _, _ = yysep1597, yyq1597, yy2arr1597
			const yyr1597 bool = false
			yyq1597[1] = true
			yyq1597[2] = true
			yyq1597[7] = x.ContainerID != ""
			var yynn1597 int
			if yyr1597 || yy2arr1597 {
				r.EncodeArrayStart(8)
			} else {
				yynn1597 = 5
				for _, b := range yyq1597 {
					if b {
						yynn1597++
					}
				}
				r.EncodeMapStart(yynn1597)
				yynn1597 = 0
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1599 := z.EncBinary()
				_ = yym1599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1600 := z.EncBinary()
				_ = yym1600
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1597[1] {
					yy1602 := &x.State
					yy1602.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1597[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1603 := &x.State
					yy1603.CodecEncodeSelf(e)
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1597[2] {
					yy1605 := &x.LastTerminationState
					yy1605.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1597[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1606 := &x.LastTerminationState
					yy1606.CodecEncodeSelf(e)
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1608 := z.EncBinary()
				_ = yym1608
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1609 := z.EncBinary()
				_ = yym1609
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1611 := z.EncBinary()
				_ = yym1611
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1612 := z.EncBinary()
				_ = yym1612
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1614 := z.EncBinary()
				_ = yym1614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1615 := z.EncBinary()
				_ = yym1615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1617 := z.EncBinary()
				_ = yym1617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1618 := z.EncBinary()
				_ = yym1618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1597[7] {
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1597[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1622 := z.DecBinary()
	_ = yym1622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1623 := r.ContainerType()
		if yyct1623 == codecSelferValueTypeMap1234 {
			yyl1623 := r.ReadMapStart()
			if yyl1623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1623, d)
			}
		} else if yyct1623 == codecSelferValueTypeArray1234 {
			yyl1623 := r.ReadArrayStart()
			if yyl1623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1624Slc
	var yyhl1624 bool = l >= 0
	for yyj1624 := 0; ; yyj1624++ {
		if yyhl1624 {
			if yyj1624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1624Slc = r.DecodeBytes(yys1624Slc, true, true)
		yys1624 := string(yys1624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1624 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1626 := &x.State
				yyv1626.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1627 := &x.LastTerminationState
				yyv1627.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1624)
		} // end switch yys1624
	} // end for yyj1624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1633 int
	var yyb1633 bool
	var yyhl1633 bool = l >= 0
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1635 := &x.State
		yyv1635.CodecDecodeSelf(d)
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1636 := &x.LastTerminationState
		yyv1636.CodecDecodeSelf(d)
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1633++
	if yyhl1633 {
		yyb1633 = yyj1633 > l
	} else {
		yyb1633 = r.CheckBreak()
	}
	if yyb1633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1633++
		if yyhl1633 {
			yyb1633 = yyj1633 > l
		} else {
			yyb1633 = r.CheckBreak()
		}
		if yyb1633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1642 := z.EncBinary()
	_ = yym1642
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1643 := z.DecBinary()
	_ = yym1643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1644 := z.EncBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1645 := z.DecBinary()
	_ = yym1645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1646 := z.EncBinary()
		_ = yym1646
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1647 := !z.EncBinary()
			yy2arr1647 := z.EncBasicHandle().StructToArray
			var yyq1647 [6]bool
			_, _, _ = yysep1647, yyq1647, yy2arr1647
			const yyr1647 bool = false
			yyq1647[2] = true
			yyq1647[3] = true
			yyq1647[4] = x.Reason != ""
			yyq1647[5] = x.Message != ""
			var yynn1647 int
			if yyr1647 || yy2arr1647 {
				r.EncodeArrayStart(6)
			} else {
				yynn1647 = 2
				for _, b := range yyq1647 {
					if b {
						yynn1647++
					}
				}
				r.EncodeMapStart(yynn1647)
				yynn1647 = 0
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[2] {
					yy1651 := &x.LastProbeTime
					yym1652 := z.EncBinary()
					_ = yym1652
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1651) {
					} else if yym1652 {
						z.EncBinaryMarshal(yy1651)
					} else if !yym1652 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1651)
					} else {
						z.EncFallback(yy1651)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1647[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1653 := &x.LastProbeTime
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1653) {
					} else if yym1654 {
						z.EncBinaryMarshal(yy1653)
					} else if !yym1654 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1653)
					} else {
						z.EncFallback(yy1653)
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[3] {
					yy1656 := &x.LastTransitionTime
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1656) {
					} else if yym1657 {
						z.EncBinaryMarshal(yy1656)
					} else if !yym1657 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1656)
					} else {
						z.EncFallback(yy1656)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1647[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1658 := &x.LastTransitionTime
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1658) {
					} else if yym1659 {
						z.EncBinaryMarshal(yy1658)
					} else if !yym1659 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1658)
					} else {
						z.EncFallback(yy1658)
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[4] {
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1647[5] {
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1647[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1647 || yy2arr1647 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1666 := z.DecBinary()
	_ = yym1666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1667 := r.ContainerType()
		if yyct1667 == codecSelferValueTypeMap1234 {
			yyl1667 := r.ReadMapStart()
			if yyl1667 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1667, d)
			}
		} else if yyct1667 == codecSelferValueTypeArray1234 {
			yyl1667 := r.ReadArrayStart()
			if yyl1667 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1667, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1668Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1668Slc
	var yyhl1668 bool = l >= 0
	for yyj1668 := 0; ; yyj1668++ {
		if yyhl1668 {
			if yyj1668 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1668Slc = r.DecodeBytes(yys1668Slc, true, true)
		yys1668 := string(yys1668Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1668 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1671 := &x.LastProbeTime
				yym1672 := z.DecBinary()
				_ = yym1672
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1671) {
				} else if yym1672 {
					z.DecBinaryUnmarshal(yyv1671)
				} else if !yym1672 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1671)
				} else {
					z.DecFallback(yyv1671, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1673 := &x.LastTransitionTime
				yym1674 := z.DecBinary()
				_ = yym1674
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1673) {
				} else if yym1674 {
					z.DecBinaryUnmarshal(yyv1673)
				} else if !yym1674 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1673)
				} else {
					z.DecFallback(yyv1673, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1668)
		} // end switch yys1668
	} // end for yyj1668
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1680 := &x.LastProbeTime
		yym1681 := z.DecBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1680) {
		} else if yym1681 {
			z.DecBinaryUnmarshal(yyv1680)
		} else if !yym1681 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1680)
		} else {
			z.DecFallback(yyv1680, false)
		}
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1682 := &x.LastTransitionTime
		yym1683 := z.DecBinary()
		_ = yym1683
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1682) {
		} else if yym1683 {
			z.DecBinaryUnmarshal(yyv1682)
		} else if !yym1683 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1682)
		} else {
			z.DecFallback(yyv1682, false)
		}
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1686 := z.EncBinary()
	_ = yym1686
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1687 := z.DecBinary()
	_ = yym1687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1688 := z.EncBinary()
		_ = yym1688
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1689 := !z.EncBinary()
			yy2arr1689 := z.EncBasicHandle().StructToArray
			var yyq1689 [4]bool
			_, _, _ = yysep1689, yyq1689, yy2arr1689
			const yyr1689 bool = false
			yyq1689[0] = x.Kind != ""
			yyq1689[1] = x.APIVersion != ""
			yyq1689[2] = true
			var yynn1689 int
			if yyr1689 || yy2arr1689 {
				r.EncodeArrayStart(4)
			} else {
				yynn1689 = 1
				for _, b := range yyq1689 {
					if b {
						yynn1689++
					}
				}
				r.EncodeMapStart(yynn1689)
				yynn1689 = 0
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1689[0] {
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1689[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1689[1] {
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1689[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1689[2] {
					yy1697 := &x.ListMeta
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1697) {
					} else {
						z.EncFallback(yy1697)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1689[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1699 := &x.ListMeta
					yym1700 := z.EncBinary()
					_ = yym1700
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1699) {
					} else {
						z.EncFallback(yy1699)
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1689 || yy2arr1689 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1704 := z.DecBinary()
	_ = yym1704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1705 := r.ContainerType()
		if yyct1705 == codecSelferValueTypeMap1234 {
			yyl1705 := r.ReadMapStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1705, d)
			}
		} else if yyct1705 == codecSelferValueTypeArray1234 {
			yyl1705 := r.ReadArrayStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1706Slc
	var yyhl1706 bool = l >= 0
	for yyj1706 := 0; ; yyj1706++ {
		if yyhl1706 {
			if yyj1706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1706Slc = r.DecodeBytes(yys1706Slc, true, true)
		yys1706 := string(yys1706Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1706 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1709 := &x.ListMeta
				yym1710 := z.DecBinary()
				_ = yym1710
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1709) {
				} else {
					z.DecFallback(yyv1709, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1711 := &x.Items
				yym1712 := z.DecBinary()
				_ = yym1712
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1711), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1706)
		} // end switch yys1706
	} // end for yyj1706
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1713 int
	var yyb1713 bool
	var yyhl1713 bool = l >= 0
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1716 := &x.ListMeta
		yym1717 := z.DecBinary()
		_ = yym1717
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1716) {
		} else {
			z.DecFallback(yyv1716, false)
		}
	}
	yyj1713++
	if yyhl1713 {
		yyb1713 = yyj1713 > l
	} else {
		yyb1713 = r.CheckBreak()
	}
	if yyb1713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1718 := &x.Items
		yym1719 := z.DecBinary()
		_ = yym1719
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1718), d)
		}
	}
	for {
		yyj1713++
		if yyhl1713 {
			yyb1713 = yyj1713 > l
		} else {
			yyb1713 = r.CheckBreak()
		}
		if yyb1713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1720 := z.EncBinary()
	_ = yym1720
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1721 := z.DecBinary()
	_ = yym1721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1722 := z.EncBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1723 := !z.EncBinary()
			yy2arr1723 := z.EncBasicHandle().StructToArray
			var yyq1723 [1]bool
			_, _, _ = yysep1723, yyq1723, yy2arr1723
			const yyr1723 bool = false
			var yynn1723 int
			if yyr1723 || yy2arr1723 {
				r.EncodeArrayStart(1)
			} else {
				yynn1723 = 1
				for _, b := range yyq1723 {
					if b {
						yynn1723++
					}
				}
				r.EncodeMapStart(yynn1723)
				yynn1723 = 0
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1727 := z.DecBinary()
	_ = yym1727
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1728 := r.ContainerType()
		if yyct1728 == codecSelferValueTypeMap1234 {
			yyl1728 := r.ReadMapStart()
			if yyl1728 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1728, d)
			}
		} else if yyct1728 == codecSelferValueTypeArray1234 {
			yyl1728 := r.ReadArrayStart()
			if yyl1728 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1728, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1729Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1729Slc
	var yyhl1729 bool = l >= 0
	for yyj1729 := 0; ; yyj1729++ {
		if yyhl1729 {
			if yyj1729 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1729Slc = r.DecodeBytes(yys1729Slc, true, true)
		yys1729 := string(yys1729Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1729 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1730 := &x.NodeSelectorTerms
				yym1731 := z.DecBinary()
				_ = yym1731
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1729)
		} // end switch yys1729
	} // end for yyj1729
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1732 int
	var yyb1732 bool
	var yyhl1732 bool = l >= 0
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1733 := &x.NodeSelectorTerms
		yym1734 := z.DecBinary()
		_ = yym1734
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1733), d)
		}
	}
	for {
		yyj1732++
		if yyhl1732 {
			yyb1732 = yyj1732 > l
		} else {
			yyb1732 = r.CheckBreak()
		}
		if yyb1732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1735 := z.EncBinary()
		_ = yym1735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1736 := !z.EncBinary()
			yy2arr1736 := z.EncBasicHandle().StructToArray
			var yyq1736 [1]bool
			_, _, _ = yysep1736, yyq1736, yy2arr1736
			const yyr1736 bool = false
			var yynn1736 int
			if yyr1736 || yy2arr1736 {
				r.EncodeArrayStart(1)
			} else {
				yynn1736 = 1
				for _, b := range yyq1736 {
					if b {
						yynn1736++
					}
				}
				r.EncodeMapStart(yynn1736)
				yynn1736 = 0
			}
			if yyr1736 || yy2arr1736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1736 || yy2arr1736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1740 := z.DecBinary()
	_ = yym1740
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1741 := r.ContainerType()
		if yyct1741 == codecSelferValueTypeMap1234 {
			yyl1741 := r.ReadMapStart()
			if yyl1741 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1741, d)
			}
		} else if yyct1741 == codecSelferValueTypeArray1234 {
			yyl1741 := r.ReadArrayStart()
			if yyl1741 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1741, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1742Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1742Slc
	var yyhl1742 bool = l >= 0
	for yyj1742 := 0; ; yyj1742++ {
		if yyhl1742 {
			if yyj1742 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1742Slc = r.DecodeBytes(yys1742Slc, true, true)
		yys1742 := string(yys1742Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1742 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1743 := &x.MatchExpressions
				yym1744 := z.DecBinary()
				_ = yym1744
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1743), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1742)
		} // end switch yys1742
	} // end for yyj1742
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1745 int
	var yyb1745 bool
	var yyhl1745 bool = l >= 0
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1746 := &x.MatchExpressions
		yym1747 := z.DecBinary()
		_ = yym1747
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1746), d)
		}
	}
	for {
		yyj1745++
		if yyhl1745 {
			yyb1745 = yyj1745 > l
		} else {
			yyb1745 = r.CheckBreak()
		}
		if yyb1745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1748 := z.EncBinary()
		_ = yym1748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1749 := !z.EncBinary()
			yy2arr1749 := z.EncBasicHandle().StructToArray
			var yyq1749 [3]bool
			_, _, _ = yysep1749, yyq1749, yy2arr1749
			const yyr1749 bool = false
			yyq1749[2] = len(x.Values) != 0
			var yynn1749 int
			if yyr1749 || yy2arr1749 {
				r.EncodeArrayStart(3)
			} else {
				yynn1749 = 2
				for _, b := range yyq1749 {
					if b {
						yynn1749++
					}
				}
				r.EncodeMapStart(yynn1749)
				yynn1749 = 0
			}
			if yyr1749 || yy2arr1749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1751 := z.EncBinary()
				_ = yym1751
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1752 := z.EncBinary()
				_ = yym1752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1749 || yy2arr1749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1749 || yy2arr1749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1749[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1755 := z.EncBinary()
						_ = yym1755
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1756 := z.EncBinary()
						_ = yym1756
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1749 || yy2arr1749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1757 := z.DecBinary()
	_ = yym1757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1758 := r.ContainerType()
		if yyct1758 == codecSelferValueTypeMap1234 {
			yyl1758 := r.ReadMapStart()
			if yyl1758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1758, d)
			}
		} else if yyct1758 == codecSelferValueTypeArray1234 {
			yyl1758 := r.ReadArrayStart()
			if yyl1758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1759Slc
	var yyhl1759 bool = l >= 0
	for yyj1759 := 0; ; yyj1759++ {
		if yyhl1759 {
			if yyj1759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1759Slc = r.DecodeBytes(yys1759Slc, true, true)
		yys1759 := string(yys1759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1759 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1762 := &x.Values
				yym1763 := z.DecBinary()
				_ = yym1763
				if false {
				} else {
					z.F.DecSliceStringX(yyv1762, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1759)
		} // end switch yys1759
	} // end for yyj1759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1764 int
	var yyb1764 bool
	var yyhl1764 bool = l >= 0
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1767 := &x.Values
		yym1768 := z.DecBinary()
		_ = yym1768
		if false {
		} else {
			z.F.DecSliceStringX(yyv1767, false, d)
		}
	}
	for {
		yyj1764++
		if yyhl1764 {
			yyb1764 = yyj1764 > l
		} else {
			yyb1764 = r.CheckBreak()
		}
		if yyb1764 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1764-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1769 := z.EncBinary()
	_ = yym1769
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1770 := z.DecBinary()
	_ = yym1770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1771 := z.EncBinary()
		_ = yym1771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1772 := !z.EncBinary()
			yy2arr1772 := z.EncBasicHandle().StructToArray
			var yyq1772 [3]bool
			_, _, _ = yysep1772, yyq1772, yy2arr1772
			const yyr1772 bool = false
			yyq1772[0] = x.NodeAffinity != nil
			yyq1772[1] = x.PodAffinity != nil
			yyq1772[2] = x.PodAntiAffinity != nil
			var yynn1772 int
			if yyr1772 || yy2arr1772 {
				r.EncodeArrayStart(3)
			} else {
				yynn1772 = 0
				for _, b := range yyq1772 {
					if b {
						yynn1772++
					}
				}
				r.EncodeMapStart(yynn1772)
				yynn1772 = 0
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1776 := z.DecBinary()
	_ = yym1776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1777 := r.ContainerType()
		if yyct1777 == codecSelferValueTypeMap1234 {
			yyl1777 := r.ReadMapStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1777, d)
			}
		} else if yyct1777 == codecSelferValueTypeArray1234 {
			yyl1777 := r.ReadArrayStart()
			if yyl1777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1778Slc
	var yyhl1778 bool = l >= 0
	for yyj1778 := 0; ; yyj1778++ {
		if yyhl1778 {
			if yyj1778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1778Slc = r.DecodeBytes(yys1778Slc, true, true)
		yys1778 := string(yys1778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1778 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1778)
		} // end switch yys1778
	} // end for yyj1778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1782 int
	var yyb1782 bool
	var yyhl1782 bool = l >= 0
	yyj1782++
	if yyhl1782 {
		yyb1782 = yyj1782 > l
	} else {
		yyb1782 = r.CheckBreak()
	}
	if yyb1782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1782++
	if yyhl1782 {
		yyb1782 = yyj1782 > l
	} else {
		yyb1782 = r.CheckBreak()
	}
	if yyb1782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1782++
	if yyhl1782 {
		yyb1782 = yyj1782 > l
	} else {
		yyb1782 = r.CheckBreak()
	}
	if yyb1782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1782++
		if yyhl1782 {
			yyb1782 = yyj1782 > l
		} else {
			yyb1782 = r.CheckBreak()
		}
		if yyb1782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1786 := z.EncBinary()
		_ = yym1786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1787 := !z.EncBinary()
			yy2arr1787 := z.EncBasicHandle().StructToArray
			var yyq1787 [2]bool
			_, _, _ = yysep1787, yyq1787, yy2arr1787
			const yyr1787 bool = false
			yyq1787[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1787[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1787 int
			if yyr1787 || yy2arr1787 {
				r.EncodeArrayStart(2)
			} else {
				yynn1787 = 0
				for _, b := range yyq1787 {
					if b {
						yynn1787++
					}
				}
				r.EncodeMapStart(yynn1787)
				yynn1787 = 0
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1787[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1789 := z.EncBinary()
						_ = yym1789
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1787[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1790 := z.EncBinary()
						_ = yym1790
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1787[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1792 := z.EncBinary()
						_ = yym1792
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1787[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1793 := z.EncBinary()
						_ = yym1793
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1787 || yy2arr1787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1795 := r.ContainerType()
		if yyct1795 == codecSelferValueTypeMap1234 {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if yyct1795 == codecSelferValueTypeArray1234 {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1796 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1797 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1798 := z.DecBinary()
				_ = yym1798
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1797), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1799 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1800 := z.DecBinary()
				_ = yym1800
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1799), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1801 int
	var yyb1801 bool
	var yyhl1801 bool = l >= 0
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1802 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1803 := z.DecBinary()
		_ = yym1803
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1802), d)
		}
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1804 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1805 := z.DecBinary()
		_ = yym1805
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1804), d)
		}
	}
	for {
		yyj1801++
		if yyhl1801 {
			yyb1801 = yyj1801 > l
		} else {
			yyb1801 = r.CheckBreak()
		}
		if yyb1801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1806 := z.EncBinary()
		_ = yym1806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1807 := !z.EncBinary()
			yy2arr1807 := z.EncBasicHandle().StructToArray
			var yyq1807 [2]bool
			_, _, _ = yysep1807, yyq1807, yy2arr1807
			const yyr1807 bool = false
			yyq1807[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1807[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1807 int
			if yyr1807 || yy2arr1807 {
				r.EncodeArrayStart(2)
			} else {
				yynn1807 = 0
				for _, b := range yyq1807 {
					if b {
						yynn1807++
					}
				}
				r.EncodeMapStart(yynn1807)
				yynn1807 = 0
			}
			if yyr1807 || yy2arr1807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1807[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1809 := z.EncBinary()
						_ = yym1809
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1807[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1810 := z.EncBinary()
						_ = yym1810
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1807 || yy2arr1807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1807[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1812 := z.EncBinary()
						_ = yym1812
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1813 := z.EncBinary()
						_ = yym1813
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1807 || yy2arr1807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1814 := z.DecBinary()
	_ = yym1814
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1815 := r.ContainerType()
		if yyct1815 == codecSelferValueTypeMap1234 {
			yyl1815 := r.ReadMapStart()
			if yyl1815 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1815, d)
			}
		} else if yyct1815 == codecSelferValueTypeArray1234 {
			yyl1815 := r.ReadArrayStart()
			if yyl1815 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1815, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1816Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1816Slc
	var yyhl1816 bool = l >= 0
	for yyj1816 := 0; ; yyj1816++ {
		if yyhl1816 {
			if yyj1816 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1816Slc = r.DecodeBytes(yys1816Slc, true, true)
		yys1816 := string(yys1816Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1816 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1817 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1818 := z.DecBinary()
				_ = yym1818
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1817), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1819 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1820 := z.DecBinary()
				_ = yym1820
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1819), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1816)
		} // end switch yys1816
	} // end for yyj1816
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1821 int
	var yyb1821 bool
	var yyhl1821 bool = l >= 0
	yyj1821++
	if yyhl1821 {
		yyb1821 = yyj1821 > l
	} else {
		yyb1821 = r.CheckBreak()
	}
	if yyb1821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1822 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1823 := z.DecBinary()
		_ = yym1823
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1822), d)
		}
	}
	yyj1821++
	if yyhl1821 {
		yyb1821 = yyj1821 > l
	} else {
		yyb1821 = r.CheckBreak()
	}
	if yyb1821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1824 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1825 := z.DecBinary()
		_ = yym1825
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1824), d)
		}
	}
	for {
		yyj1821++
		if yyhl1821 {
			yyb1821 = yyj1821 > l
		} else {
			yyb1821 = r.CheckBreak()
		}
		if yyb1821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1826 := z.EncBinary()
		_ = yym1826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1827 := !z.EncBinary()
			yy2arr1827 := z.EncBasicHandle().StructToArray
			var yyq1827 [2]bool
			_, _, _ = yysep1827, yyq1827, yy2arr1827
			const yyr1827 bool = false
			var yynn1827 int
			if yyr1827 || yy2arr1827 {
				r.EncodeArrayStart(2)
			} else {
				yynn1827 = 2
				for _, b := range yyq1827 {
					if b {
						yynn1827++
					}
				}
				r.EncodeMapStart(yynn1827)
				yynn1827 = 0
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1829 := z.EncBinary()
				_ = yym1829
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1830 := z.EncBinary()
				_ = yym1830
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1832 := &x.PodAffinityTerm
				yy1832.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1833 := &x.PodAffinityTerm
				yy1833.CodecEncodeSelf(e)
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1834 := z.DecBinary()
	_ = yym1834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1835 := r.ContainerType()
		if yyct1835 == codecSelferValueTypeMap1234 {
			yyl1835 := r.ReadMapStart()
			if yyl1835 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1835, d)
			}
		} else if yyct1835 == codecSelferValueTypeArray1234 {
			yyl1835 := r.ReadArrayStart()
			if yyl1835 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1836Slc
	var yyhl1836 bool = l >= 0
	for yyj1836 := 0; ; yyj1836++ {
		if yyhl1836 {
			if yyj1836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1836Slc = r.DecodeBytes(yys1836Slc, true, true)
		yys1836 := string(yys1836Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1836 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1838 := &x.PodAffinityTerm
				yyv1838.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1836)
		} // end switch yys1836
	} // end for yyj1836
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1839 int
	var yyb1839 bool
	var yyhl1839 bool = l >= 0
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1841 := &x.PodAffinityTerm
		yyv1841.CodecDecodeSelf(d)
	}
	for {
		yyj1839++
		if yyhl1839 {
			yyb1839 = yyj1839 > l
		} else {
			yyb1839 = r.CheckBreak()
		}
		if yyb1839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1842 := z.EncBinary()
		_ = yym1842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1843 := !z.EncBinary()
			yy2arr1843 := z.EncBasicHandle().StructToArray
			var yyq1843 [3]bool
			_, _, _ = yysep1843, yyq1843, yy2arr1843
			const yyr1843 bool = false
			yyq1843[0] = x.LabelSelector != nil
			yyq1843[2] = x.TopologyKey != ""
			var yynn1843 int
			if yyr1843 || yy2arr1843 {
				r.EncodeArrayStart(3)
			} else {
				yynn1843 = 1
				for _, b := range yyq1843 {
					if b {
						yynn1843++
					}
				}
				r.EncodeMapStart(yynn1843)
				yynn1843 = 0
			}
			if yyr1843 || yy2arr1843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1843[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1845 := z.EncBinary()
						_ = yym1845
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1843[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1846 := z.EncBinary()
						_ = yym1846
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1843 || yy2arr1843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1843 || yy2arr1843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1843[2] {
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1843[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1852 := z.EncBinary()
					_ = yym1852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1843 || yy2arr1843 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1853 := z.DecBinary()
	_ = yym1853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1854 := r.ContainerType()
		if yyct1854 == codecSelferValueTypeMap1234 {
			yyl1854 := r.ReadMapStart()
			if yyl1854 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1854, d)
			}
		} else if yyct1854 == codecSelferValueTypeArray1234 {
			yyl1854 := r.ReadArrayStart()
			if yyl1854 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1854, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1855Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1855Slc
	var yyhl1855 bool = l >= 0
	for yyj1855 := 0; ; yyj1855++ {
		if yyhl1855 {
			if yyj1855 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1855Slc = r.DecodeBytes(yys1855Slc, true, true)
		yys1855 := string(yys1855Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1855 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1857 := z.DecBinary()
				_ = yym1857
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1858 := &x.Namespaces
				yym1859 := z.DecBinary()
				_ = yym1859
				if false {
				} else {
					z.F.DecSliceStringX(yyv1858, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1855)
		} // end switch yys1855
	} // end for yyj1855
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1861 int
	var yyb1861 bool
	var yyhl1861 bool = l >= 0
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1863 := z.DecBinary()
		_ = yym1863
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1864 := &x.Namespaces
		yym1865 := z.DecBinary()
		_ = yym1865
		if false {
		} else {
			z.F.DecSliceStringX(yyv1864, false, d)
		}
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1861++
		if yyhl1861 {
			yyb1861 = yyj1861 > l
		} else {
			yyb1861 = r.CheckBreak()
		}
		if yyb1861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1867 := z.EncBinary()
		_ = yym1867
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1868 := !z.EncBinary()
			yy2arr1868 := z.EncBasicHandle().StructToArray
			var yyq1868 [2]bool
			_, _, _ = yysep1868, yyq1868, yy2arr1868
			const yyr1868 bool = false
			yyq1868[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1868[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1868 int
			if yyr1868 || yy2arr1868 {
				r.EncodeArrayStart(2)
			} else {
				yynn1868 = 0
				for _, b := range yyq1868 {
					if b {
						yynn1868++
					}
				}
				r.EncodeMapStart(yynn1868)
				yynn1868 = 0
			}
			if yyr1868 || yy2arr1868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1868[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1868[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1868 || yy2arr1868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1868[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1871 := z.EncBinary()
						_ = yym1871
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1868[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1868 || yy2arr1868 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1873 := z.DecBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1874 := r.ContainerType()
		if yyct1874 == codecSelferValueTypeMap1234 {
			yyl1874 := r.ReadMapStart()
			if yyl1874 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1874, d)
			}
		} else if yyct1874 == codecSelferValueTypeArray1234 {
			yyl1874 := r.ReadArrayStart()
			if yyl1874 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1874, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1875Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1875Slc
	var yyhl1875 bool = l >= 0
	for yyj1875 := 0; ; yyj1875++ {
		if yyhl1875 {
			if yyj1875 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1875Slc = r.DecodeBytes(yys1875Slc, true, true)
		yys1875 := string(yys1875Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1875 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1877 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1878 := z.DecBinary()
				_ = yym1878
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1875)
		} // end switch yys1875
	} // end for yyj1875
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1879 int
	var yyb1879 bool
	var yyhl1879 bool = l >= 0
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1881 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1882 := z.DecBinary()
		_ = yym1882
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1881), d)
		}
	}
	for {
		yyj1879++
		if yyhl1879 {
			yyb1879 = yyj1879 > l
		} else {
			yyb1879 = r.CheckBreak()
		}
		if yyb1879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1883 := z.EncBinary()
		_ = yym1883
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1884 := !z.EncBinary()
			yy2arr1884 := z.EncBasicHandle().StructToArray
			var yyq1884 [2]bool
			_, _, _ = yysep1884, yyq1884, yy2arr1884
			const yyr1884 bool = false
			var yynn1884 int
			if yyr1884 || yy2arr1884 {
				r.EncodeArrayStart(2)
			} else {
				yynn1884 = 2
				for _, b := range yyq1884 {
					if b {
						yynn1884++
					}
				}
				r.EncodeMapStart(yynn1884)
				yynn1884 = 0
			}
			if yyr1884 || yy2arr1884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1886 := z.EncBinary()
				_ = yym1886
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1887 := z.EncBinary()
				_ = yym1887
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1884 || yy2arr1884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1889 := &x.Preference
				yy1889.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1890 := &x.Preference
				yy1890.CodecEncodeSelf(e)
			}
			if yyr1884 || yy2arr1884 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1891 := z.DecBinary()
	_ = yym1891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1892 := r.ContainerType()
		if yyct1892 == codecSelferValueTypeMap1234 {
			yyl1892 := r.ReadMapStart()
			if yyl1892 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1892, d)
			}
		} else if yyct1892 == codecSelferValueTypeArray1234 {
			yyl1892 := r.ReadArrayStart()
			if yyl1892 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1893Slc
	var yyhl1893 bool = l >= 0
	for yyj1893 := 0; ; yyj1893++ {
		if yyhl1893 {
			if yyj1893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1893Slc = r.DecodeBytes(yys1893Slc, true, true)
		yys1893 := string(yys1893Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1893 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1895 := &x.Preference
				yyv1895.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1893)
		} // end switch yys1893
	} // end for yyj1893
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1896 int
	var yyb1896 bool
	var yyhl1896 bool = l >= 0
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1898 := &x.Preference
		yyv1898.CodecDecodeSelf(d)
	}
	for {
		yyj1896++
		if yyhl1896 {
			yyb1896 = yyj1896 > l
		} else {
			yyb1896 = r.CheckBreak()
		}
		if yyb1896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1899 := z.EncBinary()
		_ = yym1899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1900 := !z.EncBinary()
			yy2arr1900 := z.EncBasicHandle().StructToArray
			var yyq1900 [3]bool
			_, _, _ = yysep1900, yyq1900, yy2arr1900
			const yyr1900 bool = false
			yyq1900[1] = x.Value != ""
			var yynn1900 int
			if yyr1900 || yy2arr1900 {
				r.EncodeArrayStart(3)
			} else {
				yynn1900 = 2
				for _, b := range yyq1900 {
					if b {
						yynn1900++
					}
				}
				r.EncodeMapStart(yynn1900)
				yynn1900 = 0
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1902 := z.EncBinary()
				_ = yym1902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1903 := z.EncBinary()
				_ = yym1903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[1] {
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1908 := z.DecBinary()
	_ = yym1908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1909 := r.ContainerType()
		if yyct1909 == codecSelferValueTypeMap1234 {
			yyl1909 := r.ReadMapStart()
			if yyl1909 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1909, d)
			}
		} else if yyct1909 == codecSelferValueTypeArray1234 {
			yyl1909 := r.ReadArrayStart()
			if yyl1909 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1909, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1910Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1910Slc
	var yyhl1910 bool = l >= 0
	for yyj1910 := 0; ; yyj1910++ {
		if yyhl1910 {
			if yyj1910 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1910Slc = r.DecodeBytes(yys1910Slc, true, true)
		yys1910 := string(yys1910Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1910 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1910)
		} // end switch yys1910
	} // end for yyj1910
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1914 int
	var yyb1914 bool
	var yyhl1914 bool = l >= 0
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1914++
	if yyhl1914 {
		yyb1914 = yyj1914 > l
	} else {
		yyb1914 = r.CheckBreak()
	}
	if yyb1914 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1914++
		if yyhl1914 {
			yyb1914 = yyj1914 > l
		} else {
			yyb1914 = r.CheckBreak()
		}
		if yyb1914 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1914-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1918 := z.EncBinary()
	_ = yym1918
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1919 := z.DecBinary()
	_ = yym1919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1920 := z.EncBinary()
		_ = yym1920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1921 := !z.EncBinary()
			yy2arr1921 := z.EncBasicHandle().StructToArray
			var yyq1921 [4]bool
			_, _, _ = yysep1921, yyq1921, yy2arr1921
			const yyr1921 bool = false
			yyq1921[0] = x.Key != ""
			yyq1921[1] = x.Operator != ""
			yyq1921[2] = x.Value != ""
			yyq1921[3] = x.Effect != ""
			var yynn1921 int
			if yyr1921 || yy2arr1921 {
				r.EncodeArrayStart(4)
			} else {
				yynn1921 = 0
				for _, b := range yyq1921 {
					if b {
						yynn1921++
					}
				}
				r.EncodeMapStart(yynn1921)
				yynn1921 = 0
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[0] {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[2] {
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1928 := z.EncBinary()
					_ = yym1928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1930 := z.DecBinary()
	_ = yym1930
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1931 := r.ContainerType()
		if yyct1931 == codecSelferValueTypeMap1234 {
			yyl1931 := r.ReadMapStart()
			if yyl1931 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1931, d)
			}
		} else if yyct1931 == codecSelferValueTypeArray1234 {
			yyl1931 := r.ReadArrayStart()
			if yyl1931 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1931, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1932Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1932Slc
	var yyhl1932 bool = l >= 0
	for yyj1932 := 0; ; yyj1932++ {
		if yyhl1932 {
			if yyj1932 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1932Slc = r.DecodeBytes(yys1932Slc, true, true)
		yys1932 := string(yys1932Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1932 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1932)
		} // end switch yys1932
	} // end for yyj1932
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1937 int
	var yyb1937 bool
	var yyhl1937 bool = l >= 0
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1937++
		if yyhl1937 {
			yyb1937 = yyj1937 > l
		} else {
			yyb1937 = r.CheckBreak()
		}
		if yyb1937 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1937-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1942 := z.EncBinary()
	_ = yym1942
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1943 := z.DecBinary()
	_ = yym1943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1944 := z.EncBinary()
		_ = yym1944
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1945 := !z.EncBinary()
			yy2arr1945 := z.EncBasicHandle().StructToArray
			var yyq1945 [13]bool
			_, _, _ = yysep1945, yyq1945, yy2arr1945
			const yyr1945 bool = false
			yyq1945[2] = x.RestartPolicy != ""
			yyq1945[3] = x.TerminationGracePeriodSeconds != nil
			yyq1945[4] = x.ActiveDeadlineSeconds != nil
			yyq1945[5] = x.DNSPolicy != ""
			yyq1945[6] = len(x.NodeSelector) != 0
			yyq1945[8] = x.NodeName != ""
			yyq1945[9] = x.SecurityContext != nil
			yyq1945[10] = len(x.ImagePullSecrets) != 0
			yyq1945[11] = x.Hostname != ""
			yyq1945[12] = x.Subdomain != ""
			var yynn1945 int
			if yyr1945 || yy2arr1945 {
				r.EncodeArrayStart(13)
			} else {
				yynn1945 = 3
				for _, b := range yyq1945 {
					if b {
						yynn1945++
					}
				}
				r.EncodeMapStart(yynn1945)
				yynn1945 = 0
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1948 := z.EncBinary()
					_ = yym1948
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1945[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1954 := *x.TerminationGracePeriodSeconds
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							r.EncodeInt(int64(yy1954))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1945[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1956 := *x.TerminationGracePeriodSeconds
						yym1957 := z.EncBinary()
						_ = yym1957
						if false {
						} else {
							r.EncodeInt(int64(yy1956))
						}
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1959 := *x.ActiveDeadlineSeconds
						yym1960 := z.EncBinary()
						_ = yym1960
						if false {
						} else {
							r.EncodeInt(int64(yy1959))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1945[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1961 := *x.ActiveDeadlineSeconds
						yym1962 := z.EncBinary()
						_ = yym1962
						if false {
						} else {
							r.EncodeInt(int64(yy1961))
						}
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1945[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1965 := z.EncBinary()
						_ = yym1965
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1945[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1966 := z.EncBinary()
						_ = yym1966
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1968 := z.EncBinary()
				_ = yym1968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[8] {
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1945[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1945[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1975 := z.EncBinary()
						_ = yym1975
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1945[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1976 := z.EncBinary()
						_ = yym1976
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[11] {
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1945[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1945[12] {
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1945[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1945 || yy2arr1945 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1983 := z.DecBinary()
	_ = yym1983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1984 := r.ContainerType()
		if yyct1984 == codecSelferValueTypeMap1234 {
			yyl1984 := r.ReadMapStart()
			if yyl1984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1984, d)
			}
		} else if yyct1984 == codecSelferValueTypeArray1234 {
			yyl1984 := r.ReadArrayStart()
			if yyl1984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1985Slc
	var yyhl1985 bool = l >= 0
	for yyj1985 := 0; ; yyj1985++ {
		if yyhl1985 {
			if yyj1985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1985Slc = r.DecodeBytes(yys1985Slc, true, true)
		yys1985 := string(yys1985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1985 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1986 := &x.Volumes
				yym1987 := z.DecBinary()
				_ = yym1987
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1986), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1988 := &x.Containers
				yym1989 := z.DecBinary()
				_ = yym1989
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1988), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1992 := z.DecBinary()
				_ = yym1992
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1994 := z.DecBinary()
				_ = yym1994
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1996 := &x.NodeSelector
				yym1997 := z.DecBinary()
				_ = yym1997
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1996, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2001 := &x.ImagePullSecrets
				yym2002 := z.DecBinary()
				_ = yym2002
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2001), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1985)
		} // end switch yys1985
	} // end for yyj1985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2005 int
	var yyb2005 bool
	var yyhl2005 bool = l >= 0
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2006 := &x.Volumes
		yym2007 := z.DecBinary()
		_ = yym2007
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2006), d)
		}
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2008 := &x.Containers
		yym2009 := z.DecBinary()
		_ = yym2009
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2008), d)
		}
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2012 := z.DecBinary()
		_ = yym2012
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2014 := z.DecBinary()
		_ = yym2014
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2016 := &x.NodeSelector
		yym2017 := z.DecBinary()
		_ = yym2017
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2016, false, d)
		}
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2021 := &x.ImagePullSecrets
		yym2022 := z.DecBinary()
		_ = yym2022
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2021), d)
		}
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2005++
	if yyhl2005 {
		yyb2005 = yyj2005 > l
	} else {
		yyb2005 = r.CheckBreak()
	}
	if yyb2005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2005++
		if yyhl2005 {
			yyb2005 = yyj2005 > l
		} else {
			yyb2005 = r.CheckBreak()
		}
		if yyb2005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2025 := z.EncBinary()
		_ = yym2025
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2026 := !z.EncBinary()
			yy2arr2026 := z.EncBasicHandle().StructToArray
			var yyq2026 [8]bool
			_, _, _ = yysep2026, yyq2026, yy2arr2026
			const yyr2026 bool = false
			yyq2026[0] = x.HostNetwork != false
			yyq2026[1] = x.HostPID != false
			yyq2026[2] = x.HostIPC != false
			yyq2026[3] = x.SELinuxOptions != nil
			yyq2026[4] = x.RunAsUser != nil
			yyq2026[5] = x.RunAsNonRoot != nil
			yyq2026[6] = len(x.SupplementalGroups) != 0
			yyq2026[7] = x.FSGroup != nil
			var yynn2026 int
			if yyr2026 || yy2arr2026 {
				r.EncodeArrayStart(8)
			} else {
				yynn2026 = 0
				for _, b := range yyq2026 {
					if b {
						yynn2026++
					}
				}
				r.EncodeMapStart(yynn2026)
				yynn2026 = 0
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[0] {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2026[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[1] {
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2026[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[2] {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2026[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2026[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2038 := *x.RunAsUser
						yym2039 := z.EncBinary()
						_ = yym2039
						if false {
						} else {
							r.EncodeInt(int64(yy2038))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2026[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2040 := *x.RunAsUser
						yym2041 := z.EncBinary()
						_ = yym2041
						if false {
						} else {
							r.EncodeInt(int64(yy2040))
						}
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2043 := *x.RunAsNonRoot
						yym2044 := z.EncBinary()
						_ = yym2044
						if false {
						} else {
							r.EncodeBool(bool(yy2043))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2026[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2045 := *x.RunAsNonRoot
						yym2046 := z.EncBinary()
						_ = yym2046
						if false {
						} else {
							r.EncodeBool(bool(yy2045))
						}
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2026[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2049 := z.EncBinary()
						_ = yym2049
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2026[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2051 := *x.FSGroup
						yym2052 := z.EncBinary()
						_ = yym2052
						if false {
						} else {
							r.EncodeInt(int64(yy2051))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2026[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2053 := *x.FSGroup
						yym2054 := z.EncBinary()
						_ = yym2054
						if false {
						} else {
							r.EncodeInt(int64(yy2053))
						}
					}
				}
			}
			if yyr2026 || yy2arr2026 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2055 := z.DecBinary()
	_ = yym2055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2056 := r.ContainerType()
		if yyct2056 == codecSelferValueTypeMap1234 {
			yyl2056 := r.ReadMapStart()
			if yyl2056 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2056, d)
			}
		} else if yyct2056 == codecSelferValueTypeArray1234 {
			yyl2056 := r.ReadArrayStart()
			if yyl2056 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2057Slc
	var yyhl2057 bool = l >= 0
	for yyj2057 := 0; ; yyj2057++ {
		if yyhl2057 {
			if yyj2057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2057Slc = r.DecodeBytes(yys2057Slc, true, true)
		yys2057 := string(yys2057Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2057 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2063 := z.DecBinary()
				_ = yym2063
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2065 := z.DecBinary()
				_ = yym2065
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2066 := &x.SupplementalGroups
				yym2067 := z.DecBinary()
				_ = yym2067
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2066, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2069 := z.DecBinary()
				_ = yym2069
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2057)
		} // end switch yys2057
	} // end for yyj2057
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2070 int
	var yyb2070 bool
	var yyhl2070 bool = l >= 0
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2076 := z.DecBinary()
		_ = yym2076
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2078 := z.DecBinary()
		_ = yym2078
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2079 := &x.SupplementalGroups
		yym2080 := z.DecBinary()
		_ = yym2080
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2079, false, d)
		}
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2082 := z.DecBinary()
		_ = yym2082
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2070++
		if yyhl2070 {
			yyb2070 = yyj2070 > l
		} else {
			yyb2070 = r.CheckBreak()
		}
		if yyb2070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2083 := z.EncBinary()
		_ = yym2083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2084 := !z.EncBinary()
			yy2arr2084 := z.EncBasicHandle().StructToArray
			var yyq2084 [8]bool
			_, _, _ = yysep2084, yyq2084, yy2arr2084
			const yyr2084 bool = false
			yyq2084[0] = x.Phase != ""
			yyq2084[1] = len(x.Conditions) != 0
			yyq2084[2] = x.Message != ""
			yyq2084[3] = x.Reason != ""
			yyq2084[4] = x.HostIP != ""
			yyq2084[5] = x.PodIP != ""
			yyq2084[6] = x.StartTime != nil
			yyq2084[7] = len(x.ContainerStatuses) != 0
			var yynn2084 int
			if yyr2084 || yy2arr2084 {
				r.EncodeArrayStart(8)
			} else {
				yynn2084 = 0
				for _, b := range yyq2084 {
					if b {
						yynn2084++
					}
				}
				r.EncodeMapStart(yynn2084)
				yynn2084 = 0
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2087 := z.EncBinary()
						_ = yym2087
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2084[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2088 := z.EncBinary()
						_ = yym2088
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[2] {
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[3] {
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[4] {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[5] {
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2102 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2102 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2084[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2103 := z.EncBinary()
						_ = yym2103
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2103 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2103 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2105 := z.EncBinary()
						_ = yym2105
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2084[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2106 := z.EncBinary()
						_ = yym2106
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2107 := z.DecBinary()
	_ = yym2107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2108 := r.ContainerType()
		if yyct2108 == codecSelferValueTypeMap1234 {
			yyl2108 := r.ReadMapStart()
			if yyl2108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2108, d)
			}
		} else if yyct2108 == codecSelferValueTypeArray1234 {
			yyl2108 := r.ReadArrayStart()
			if yyl2108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2109Slc
	var yyhl2109 bool = l >= 0
	for yyj2109 := 0; ; yyj2109++ {
		if yyhl2109 {
			if yyj2109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2109Slc = r.DecodeBytes(yys2109Slc, true, true)
		yys2109 := string(yys2109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2109 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2111 := &x.Conditions
				yym2112 := z.DecBinary()
				_ = yym2112
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2111), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2118 := z.DecBinary()
				_ = yym2118
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2118 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2118 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2119 := &x.ContainerStatuses
				yym2120 := z.DecBinary()
				_ = yym2120
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2119), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2109)
		} // end switch yys2109
	} // end for yyj2109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2121 int
	var yyb2121 bool
	var yyhl2121 bool = l >= 0
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2123 := &x.Conditions
		yym2124 := z.DecBinary()
		_ = yym2124
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2123), d)
		}
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2130 := z.DecBinary()
		_ = yym2130
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2130 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2130 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2121++
	if yyhl2121 {
		yyb2121 = yyj2121 > l
	} else {
		yyb2121 = r.CheckBreak()
	}
	if yyb2121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2131 := &x.ContainerStatuses
		yym2132 := z.DecBinary()
		_ = yym2132
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2131), d)
		}
	}
	for {
		yyj2121++
		if yyhl2121 {
			yyb2121 = yyj2121 > l
		} else {
			yyb2121 = r.CheckBreak()
		}
		if yyb2121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2133 := z.EncBinary()
		_ = yym2133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2134 := !z.EncBinary()
			yy2arr2134 := z.EncBasicHandle().StructToArray
			var yyq2134 [4]bool
			_, _, _ = yysep2134, yyq2134, yy2arr2134
			const yyr2134 bool = false
			yyq2134[0] = x.Kind != ""
			yyq2134[1] = x.APIVersion != ""
			yyq2134[2] = true
			yyq2134[3] = true
			var yynn2134 int
			if yyr2134 || yy2arr2134 {
				r.EncodeArrayStart(4)
			} else {
				yynn2134 = 0
				for _, b := range yyq2134 {
					if b {
						yynn2134++
					}
				}
				r.EncodeMapStart(yynn2134)
				yynn2134 = 0
			}
			if yyr2134 || yy2arr2134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2134[0] {
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2134[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2134 || yy2arr2134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2134[1] {
					yym2139 := z.EncBinary()
					_ = yym2139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2134[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2134 || yy2arr2134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2134[2] {
					yy2142 := &x.ObjectMeta
					yy2142.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2134[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2143 := &x.ObjectMeta
					yy2143.CodecEncodeSelf(e)
				}
			}
			if yyr2134 || yy2arr2134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2134[3] {
					yy2145 := &x.Status
					yy2145.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2134[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2146 := &x.Status
					yy2146.CodecEncodeSelf(e)
				}
			}
			if yyr2134 || yy2arr2134 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2147 := z.DecBinary()
	_ = yym2147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2148 := r.ContainerType()
		if yyct2148 == codecSelferValueTypeMap1234 {
			yyl2148 := r.ReadMapStart()
			if yyl2148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2148, d)
			}
		} else if yyct2148 == codecSelferValueTypeArray1234 {
			yyl2148 := r.ReadArrayStart()
			if yyl2148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2149Slc
	var yyhl2149 bool = l >= 0
	for yyj2149 := 0; ; yyj2149++ {
		if yyhl2149 {
			if yyj2149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2149Slc = r.DecodeBytes(yys2149Slc, true, true)
		yys2149 := string(yys2149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2149 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2152 := &x.ObjectMeta
				yyv2152.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2153 := &x.Status
				yyv2153.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2149)
		} // end switch yys2149
	} // end for yyj2149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2154 int
	var yyb2154 bool
	var yyhl2154 bool = l >= 0
	yyj2154++
	if yyhl2154 {
		yyb2154 = yyj2154 > l
	} else {
		yyb2154 = r.CheckBreak()
	}
	if yyb2154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2154++
	if yyhl2154 {
		yyb2154 = yyj2154 > l
	} else {
		yyb2154 = r.CheckBreak()
	}
	if yyb2154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2154++
	if yyhl2154 {
		yyb2154 = yyj2154 > l
	} else {
		yyb2154 = r.CheckBreak()
	}
	if yyb2154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2157 := &x.ObjectMeta
		yyv2157.CodecDecodeSelf(d)
	}
	yyj2154++
	if yyhl2154 {
		yyb2154 = yyj2154 > l
	} else {
		yyb2154 = r.CheckBreak()
	}
	if yyb2154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2158 := &x.Status
		yyv2158.CodecDecodeSelf(d)
	}
	for {
		yyj2154++
		if yyhl2154 {
			yyb2154 = yyj2154 > l
		} else {
			yyb2154 = r.CheckBreak()
		}
		if yyb2154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2159 := z.EncBinary()
		_ = yym2159
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2160 := !z.EncBinary()
			yy2arr2160 := z.EncBasicHandle().StructToArray
			var yyq2160 [5]bool
			_, _, _ = yysep2160, yyq2160, yy2arr2160
			const yyr2160 bool = false
			yyq2160[0] = x.Kind != ""
			yyq2160[1] = x.APIVersion != ""
			yyq2160[2] = true
			yyq2160[3] = true
			yyq2160[4] = true
			var yynn2160 int
			if yyr2160 || yy2arr2160 {
				r.EncodeArrayStart(5)
			} else {
				yynn2160 = 0
				for _, b := range yyq2160 {
					if b {
						yynn2160++
					}
				}
				r.EncodeMapStart(yynn2160)
				yynn2160 = 0
			}
			if yyr2160 || yy2arr2160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2160[0] {
					yym2162 := z.EncBinary()
					_ = yym2162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2160[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2160 || yy2arr2160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2160[1] {
					yym2165 := z.EncBinary()
					_ = yym2165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2160[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2160 || yy2arr2160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2160[2] {
					yy2168 := &x.ObjectMeta
					yy2168.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2160[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2169 := &x.ObjectMeta
					yy2169.CodecEncodeSelf(e)
				}
			}
			if yyr2160 || yy2arr2160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2160[3] {
					yy2171 := &x.Spec
					yy2171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2160[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2172 := &x.Spec
					yy2172.CodecEncodeSelf(e)
				}
			}
			if yyr2160 || yy2arr2160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2160[4] {
					yy2174 := &x.Status
					yy2174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2160[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2175 := &x.Status
					yy2175.CodecEncodeSelf(e)
				}
			}
			if yyr2160 || yy2arr2160 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2176 := z.DecBinary()
	_ = yym2176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2177 := r.ContainerType()
		if yyct2177 == codecSelferValueTypeMap1234 {
			yyl2177 := r.ReadMapStart()
			if yyl2177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2177, d)
			}
		} else if yyct2177 == codecSelferValueTypeArray1234 {
			yyl2177 := r.ReadArrayStart()
			if yyl2177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2178Slc
	var yyhl2178 bool = l >= 0
	for yyj2178 := 0; ; yyj2178++ {
		if yyhl2178 {
			if yyj2178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2178Slc = r.DecodeBytes(yys2178Slc, true, true)
		yys2178 := string(yys2178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2178 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2181 := &x.ObjectMeta
				yyv2181.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2182 := &x.Spec
				yyv2182.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2183 := &x.Status
				yyv2183.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2178)
		} // end switch yys2178
	} // end for yyj2178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2184 int
	var yyb2184 bool
	var yyhl2184 bool = l >= 0
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2187 := &x.ObjectMeta
		yyv2187.CodecDecodeSelf(d)
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2188 := &x.Spec
		yyv2188.CodecDecodeSelf(d)
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2189 := &x.Status
		yyv2189.CodecDecodeSelf(d)
	}
	for {
		yyj2184++
		if yyhl2184 {
			yyb2184 = yyj2184 > l
		} else {
			yyb2184 = r.CheckBreak()
		}
		if yyb2184 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2184-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2190 := z.EncBinary()
		_ = yym2190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2191 := !z.EncBinary()
			yy2arr2191 := z.EncBasicHandle().StructToArray
			var yyq2191 [2]bool
			_, _, _ = yysep2191, yyq2191, yy2arr2191
			const yyr2191 bool = false
			yyq2191[0] = true
			yyq2191[1] = true
			var yynn2191 int
			if yyr2191 || yy2arr2191 {
				r.EncodeArrayStart(2)
			} else {
				yynn2191 = 0
				for _, b := range yyq2191 {
					if b {
						yynn2191++
					}
				}
				r.EncodeMapStart(yynn2191)
				yynn2191 = 0
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2191[0] {
					yy2193 := &x.ObjectMeta
					yy2193.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2191[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2194 := &x.ObjectMeta
					yy2194.CodecEncodeSelf(e)
				}
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2191[1] {
					yy2196 := &x.Spec
					yy2196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2191[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2197 := &x.Spec
					yy2197.CodecEncodeSelf(e)
				}
			}
			if yyr2191 || yy2arr2191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2198 := z.DecBinary()
	_ = yym2198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2199 := r.ContainerType()
		if yyct2199 == codecSelferValueTypeMap1234 {
			yyl2199 := r.ReadMapStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2199, d)
			}
		} else if yyct2199 == codecSelferValueTypeArray1234 {
			yyl2199 := r.ReadArrayStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2200Slc
	var yyhl2200 bool = l >= 0
	for yyj2200 := 0; ; yyj2200++ {
		if yyhl2200 {
			if yyj2200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2200Slc = r.DecodeBytes(yys2200Slc, true, true)
		yys2200 := string(yys2200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2200 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2201 := &x.ObjectMeta
				yyv2201.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2202 := &x.Spec
				yyv2202.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2200)
		} // end switch yys2200
	} // end for yyj2200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2203 int
	var yyb2203 bool
	var yyhl2203 bool = l >= 0
	yyj2203++
	if yyhl2203 {
		yyb2203 = yyj2203 > l
	} else {
		yyb2203 = r.CheckBreak()
	}
	if yyb2203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2204 := &x.ObjectMeta
		yyv2204.CodecDecodeSelf(d)
	}
	yyj2203++
	if yyhl2203 {
		yyb2203 = yyj2203 > l
	} else {
		yyb2203 = r.CheckBreak()
	}
	if yyb2203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2205 := &x.Spec
		yyv2205.CodecDecodeSelf(d)
	}
	for {
		yyj2203++
		if yyhl2203 {
			yyb2203 = yyj2203 > l
		} else {
			yyb2203 = r.CheckBreak()
		}
		if yyb2203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2206 := z.EncBinary()
		_ = yym2206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2207 := !z.EncBinary()
			yy2arr2207 := z.EncBasicHandle().StructToArray
			var yyq2207 [4]bool
			_, _, _ = yysep2207, yyq2207, yy2arr2207
			const yyr2207 bool = false
			yyq2207[0] = x.Kind != ""
			yyq2207[1] = x.APIVersion != ""
			yyq2207[2] = true
			yyq2207[3] = true
			var yynn2207 int
			if yyr2207 || yy2arr2207 {
				r.EncodeArrayStart(4)
			} else {
				yynn2207 = 0
				for _, b := range yyq2207 {
					if b {
						yynn2207++
					}
				}
				r.EncodeMapStart(yynn2207)
				yynn2207 = 0
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2207[0] {
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2207[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2207[1] {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2207[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2207[2] {
					yy2215 := &x.ObjectMeta
					yy2215.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2207[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2216 := &x.ObjectMeta
					yy2216.CodecEncodeSelf(e)
				}
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2207[3] {
					yy2218 := &x.Template
					yy2218.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2207[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2219 := &x.Template
					yy2219.CodecEncodeSelf(e)
				}
			}
			if yyr2207 || yy2arr2207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2220 := z.DecBinary()
	_ = yym2220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2221 := r.ContainerType()
		if yyct2221 == codecSelferValueTypeMap1234 {
			yyl2221 := r.ReadMapStart()
			if yyl2221 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2221, d)
			}
		} else if yyct2221 == codecSelferValueTypeArray1234 {
			yyl2221 := r.ReadArrayStart()
			if yyl2221 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2222Slc
	var yyhl2222 bool = l >= 0
	for yyj2222 := 0; ; yyj2222++ {
		if yyhl2222 {
			if yyj2222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2222Slc = r.DecodeBytes(yys2222Slc, true, true)
		yys2222 := string(yys2222Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2222 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2225 := &x.ObjectMeta
				yyv2225.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2226 := &x.Template
				yyv2226.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2222)
		} // end switch yys2222
	} // end for yyj2222
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2227 int
	var yyb2227 bool
	var yyhl2227 bool = l >= 0
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2230 := &x.ObjectMeta
		yyv2230.CodecDecodeSelf(d)
	}
	yyj2227++
	if yyhl2227 {
		yyb2227 = yyj2227 > l
	} else {
		yyb2227 = r.CheckBreak()
	}
	if yyb2227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2231 := &x.Template
		yyv2231.CodecDecodeSelf(d)
	}
	for {
		yyj2227++
		if yyhl2227 {
			yyb2227 = yyj2227 > l
		} else {
			yyb2227 = r.CheckBreak()
		}
		if yyb2227 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2227-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2232 := z.EncBinary()
		_ = yym2232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2233 := !z.EncBinary()
			yy2arr2233 := z.EncBasicHandle().StructToArray
			var yyq2233 [4]bool
			_, _, _ = yysep2233, yyq2233, yy2arr2233
			const yyr2233 bool = false
			yyq2233[0] = x.Kind != ""
			yyq2233[1] = x.APIVersion != ""
			yyq2233[2] = true
			var yynn2233 int
			if yyr2233 || yy2arr2233 {
				r.EncodeArrayStart(4)
			} else {
				yynn2233 = 1
				for _, b := range yyq2233 {
					if b {
						yynn2233++
					}
				}
				r.EncodeMapStart(yynn2233)
				yynn2233 = 0
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[0] {
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2236 := z.EncBinary()
					_ = yym2236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[1] {
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[2] {
					yy2241 := &x.ListMeta
					yym2242 := z.EncBinary()
					_ = yym2242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2241) {
					} else {
						z.EncFallback(yy2241)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2243 := &x.ListMeta
					yym2244 := z.EncBinary()
					_ = yym2244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2243) {
					} else {
						z.EncFallback(yy2243)
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2246 := z.EncBinary()
					_ = yym2246
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2247 := z.EncBinary()
					_ = yym2247
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2248 := z.DecBinary()
	_ = yym2248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2249 := r.ContainerType()
		if yyct2249 == codecSelferValueTypeMap1234 {
			yyl2249 := r.ReadMapStart()
			if yyl2249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2249, d)
			}
		} else if yyct2249 == codecSelferValueTypeArray1234 {
			yyl2249 := r.ReadArrayStart()
			if yyl2249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2250Slc
	var yyhl2250 bool = l >= 0
	for yyj2250 := 0; ; yyj2250++ {
		if yyhl2250 {
			if yyj2250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2250Slc = r.DecodeBytes(yys2250Slc, true, true)
		yys2250 := string(yys2250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2250 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2253 := &x.ListMeta
				yym2254 := z.DecBinary()
				_ = yym2254
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2253) {
				} else {
					z.DecFallback(yyv2253, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2255 := &x.Items
				yym2256 := z.DecBinary()
				_ = yym2256
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2255), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2250)
		} // end switch yys2250
	} // end for yyj2250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2257 int
	var yyb2257 bool
	var yyhl2257 bool = l >= 0
	yyj2257++
	if yyhl2257 {
		yyb2257 = yyj2257 > l
	} else {
		yyb2257 = r.CheckBreak()
	}
	if yyb2257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2257++
	if yyhl2257 {
		yyb2257 = yyj2257 > l
	} else {
		yyb2257 = r.CheckBreak()
	}
	if yyb2257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2257++
	if yyhl2257 {
		yyb2257 = yyj2257 > l
	} else {
		yyb2257 = r.CheckBreak()
	}
	if yyb2257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2260 := &x.ListMeta
		yym2261 := z.DecBinary()
		_ = yym2261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2260) {
		} else {
			z.DecFallback(yyv2260, false)
		}
	}
	yyj2257++
	if yyhl2257 {
		yyb2257 = yyj2257 > l
	} else {
		yyb2257 = r.CheckBreak()
	}
	if yyb2257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2262 := &x.Items
		yym2263 := z.DecBinary()
		_ = yym2263
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2262), d)
		}
	}
	for {
		yyj2257++
		if yyhl2257 {
			yyb2257 = yyj2257 > l
		} else {
			yyb2257 = r.CheckBreak()
		}
		if yyb2257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2264 := z.EncBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2265 := !z.EncBinary()
			yy2arr2265 := z.EncBasicHandle().StructToArray
			var yyq2265 [3]bool
			_, _, _ = yysep2265, yyq2265, yy2arr2265
			const yyr2265 bool = false
			yyq2265[2] = x.Template != nil
			var yynn2265 int
			if yyr2265 || yy2arr2265 {
				r.EncodeArrayStart(3)
			} else {
				yynn2265 = 2
				for _, b := range yyq2265 {
					if b {
						yynn2265++
					}
				}
				r.EncodeMapStart(yynn2265)
				yynn2265 = 0
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2268 := z.EncBinary()
				_ = yym2268
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2271 := z.EncBinary()
					_ = yym2271
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2265[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2273 := z.DecBinary()
	_ = yym2273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2274 := r.ContainerType()
		if yyct2274 == codecSelferValueTypeMap1234 {
			yyl2274 := r.ReadMapStart()
			if yyl2274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2274, d)
			}
		} else if yyct2274 == codecSelferValueTypeArray1234 {
			yyl2274 := r.ReadArrayStart()
			if yyl2274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2275Slc
	var yyhl2275 bool = l >= 0
	for yyj2275 := 0; ; yyj2275++ {
		if yyhl2275 {
			if yyj2275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2275Slc = r.DecodeBytes(yys2275Slc, true, true)
		yys2275 := string(yys2275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2275 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2277 := &x.Selector
				yym2278 := z.DecBinary()
				_ = yym2278
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2277, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2275)
		} // end switch yys2275
	} // end for yyj2275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2280 int
	var yyb2280 bool
	var yyhl2280 bool = l >= 0
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2282 := &x.Selector
		yym2283 := z.DecBinary()
		_ = yym2283
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2282, false, d)
		}
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2280++
		if yyhl2280 {
			yyb2280 = yyj2280 > l
		} else {
			yyb2280 = r.CheckBreak()
		}
		if yyb2280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2285 := z.EncBinary()
		_ = yym2285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2286 := !z.EncBinary()
			yy2arr2286 := z.EncBasicHandle().StructToArray
			var yyq2286 [3]bool
			_, _, _ = yysep2286, yyq2286, yy2arr2286
			const yyr2286 bool = false
			yyq2286[1] = x.FullyLabeledReplicas != 0
			yyq2286[2] = x.ObservedGeneration != 0
			var yynn2286 int
			if yyr2286 || yy2arr2286 {
				r.EncodeArrayStart(3)
			} else {
				yynn2286 = 1
				for _, b := range yyq2286 {
					if b {
						yynn2286++
					}
				}
				r.EncodeMapStart(yynn2286)
				yynn2286 = 0
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2288 := z.EncBinary()
				_ = yym2288
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2289 := z.EncBinary()
				_ = yym2289
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[1] {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2286[2] {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2296 := z.DecBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2297 := r.ContainerType()
		if yyct2297 == codecSelferValueTypeMap1234 {
			yyl2297 := r.ReadMapStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2297, d)
			}
		} else if yyct2297 == codecSelferValueTypeArray1234 {
			yyl2297 := r.ReadArrayStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2298Slc
	var yyhl2298 bool = l >= 0
	for yyj2298 := 0; ; yyj2298++ {
		if yyhl2298 {
			if yyj2298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2298Slc = r.DecodeBytes(yys2298Slc, true, true)
		yys2298 := string(yys2298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2298 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2298)
		} // end switch yys2298
	} // end for yyj2298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2302 int
	var yyb2302 bool
	var yyhl2302 bool = l >= 0
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2302++
		if yyhl2302 {
			yyb2302 = yyj2302 > l
		} else {
			yyb2302 = r.CheckBreak()
		}
		if yyb2302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2306 := z.EncBinary()
		_ = yym2306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2307 := !z.EncBinary()
			yy2arr2307 := z.EncBasicHandle().StructToArray
			var yyq2307 [5]bool
			_, _, _ = yysep2307, yyq2307, yy2arr2307
			const yyr2307 bool = false
			yyq2307[0] = x.Kind != ""
			yyq2307[1] = x.APIVersion != ""
			yyq2307[2] = true
			yyq2307[3] = true
			yyq2307[4] = true
			var yynn2307 int
			if yyr2307 || yy2arr2307 {
				r.EncodeArrayStart(5)
			} else {
				yynn2307 = 0
				for _, b := range yyq2307 {
					if b {
						yynn2307++
					}
				}
				r.EncodeMapStart(yynn2307)
				yynn2307 = 0
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[0] {
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2307[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2310 := z.EncBinary()
					_ = yym2310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[1] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2307[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[2] {
					yy2315 := &x.ObjectMeta
					yy2315.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2307[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2316 := &x.ObjectMeta
					yy2316.CodecEncodeSelf(e)
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[3] {
					yy2318 := &x.Spec
					yy2318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2307[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2319 := &x.Spec
					yy2319.CodecEncodeSelf(e)
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2307[4] {
					yy2321 := &x.Status
					yy2321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2307[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2322 := &x.Status
					yy2322.CodecEncodeSelf(e)
				}
			}
			if yyr2307 || yy2arr2307 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2323 := z.DecBinary()
	_ = yym2323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2324 := r.ContainerType()
		if yyct2324 == codecSelferValueTypeMap1234 {
			yyl2324 := r.ReadMapStart()
			if yyl2324 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2324, d)
			}
		} else if yyct2324 == codecSelferValueTypeArray1234 {
			yyl2324 := r.ReadArrayStart()
			if yyl2324 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2324, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2325Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2325Slc
	var yyhl2325 bool = l >= 0
	for yyj2325 := 0; ; yyj2325++ {
		if yyhl2325 {
			if yyj2325 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2325Slc = r.DecodeBytes(yys2325Slc, true, true)
		yys2325 := string(yys2325Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2325 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2328 := &x.ObjectMeta
				yyv2328.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2329 := &x.Spec
				yyv2329.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2330 := &x.Status
				yyv2330.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2325)
		} // end switch yys2325
	} // end for yyj2325
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2331 int
	var yyb2331 bool
	var yyhl2331 bool = l >= 0
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2334 := &x.ObjectMeta
		yyv2334.CodecDecodeSelf(d)
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2335 := &x.Spec
		yyv2335.CodecDecodeSelf(d)
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2336 := &x.Status
		yyv2336.CodecDecodeSelf(d)
	}
	for {
		yyj2331++
		if yyhl2331 {
			yyb2331 = yyj2331 > l
		} else {
			yyb2331 = r.CheckBreak()
		}
		if yyb2331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2337 := z.EncBinary()
		_ = yym2337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2338 := !z.EncBinary()
			yy2arr2338 := z.EncBasicHandle().StructToArray
			var yyq2338 [4]bool
			_, _, _ = yysep2338, yyq2338, yy2arr2338
			const yyr2338 bool = false
			yyq2338[0] = x.Kind != ""
			yyq2338[1] = x.APIVersion != ""
			yyq2338[2] = true
			var yynn2338 int
			if yyr2338 || yy2arr2338 {
				r.EncodeArrayStart(4)
			} else {
				yynn2338 = 1
				for _, b := range yyq2338 {
					if b {
						yynn2338++
					}
				}
				r.EncodeMapStart(yynn2338)
				yynn2338 = 0
			}
			if yyr2338 || yy2arr2338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2338[0] {
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2338[1] {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2338[2] {
					yy2346 := &x.ListMeta
					yym2347 := z.EncBinary()
					_ = yym2347
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2346) {
					} else {
						z.EncFallback(yy2346)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2348 := &x.ListMeta
					yym2349 := z.EncBinary()
					_ = yym2349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2348) {
					} else {
						z.EncFallback(yy2348)
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2354 := r.ContainerType()
		if yyct2354 == codecSelferValueTypeMap1234 {
			yyl2354 := r.ReadMapStart()
			if yyl2354 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2354, d)
			}
		} else if yyct2354 == codecSelferValueTypeArray1234 {
			yyl2354 := r.ReadArrayStart()
			if yyl2354 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2355Slc
	var yyhl2355 bool = l >= 0
	for yyj2355 := 0; ; yyj2355++ {
		if yyhl2355 {
			if yyj2355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2355Slc = r.DecodeBytes(yys2355Slc, true, true)
		yys2355 := string(yys2355Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2355 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2358 := &x.ListMeta
				yym2359 := z.DecBinary()
				_ = yym2359
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2358) {
				} else {
					z.DecFallback(yyv2358, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2360 := &x.Items
				yym2361 := z.DecBinary()
				_ = yym2361
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2360), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2355)
		} // end switch yys2355
	} // end for yyj2355
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2362 int
	var yyb2362 bool
	var yyhl2362 bool = l >= 0
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2365 := &x.ListMeta
		yym2366 := z.DecBinary()
		_ = yym2366
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2365) {
		} else {
			z.DecFallback(yyv2365, false)
		}
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2367 := &x.Items
		yym2368 := z.DecBinary()
		_ = yym2368
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2367), d)
		}
	}
	for {
		yyj2362++
		if yyhl2362 {
			yyb2362 = yyj2362 > l
		} else {
			yyb2362 = r.CheckBreak()
		}
		if yyb2362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2369 := z.EncBinary()
		_ = yym2369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2370 := !z.EncBinary()
			yy2arr2370 := z.EncBasicHandle().StructToArray
			var yyq2370 [4]bool
			_, _, _ = yysep2370, yyq2370, yy2arr2370
			const yyr2370 bool = false
			yyq2370[0] = x.Kind != ""
			yyq2370[1] = x.APIVersion != ""
			yyq2370[2] = true
			var yynn2370 int
			if yyr2370 || yy2arr2370 {
				r.EncodeArrayStart(4)
			} else {
				yynn2370 = 1
				for _, b := range yyq2370 {
					if b {
						yynn2370++
					}
				}
				r.EncodeMapStart(yynn2370)
				yynn2370 = 0
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[0] {
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2373 := z.EncBinary()
					_ = yym2373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[1] {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[2] {
					yy2378 := &x.ListMeta
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2378) {
					} else {
						z.EncFallback(yy2378)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2370[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2380 := &x.ListMeta
					yym2381 := z.EncBinary()
					_ = yym2381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2380) {
					} else {
						z.EncFallback(yy2380)
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2384 := z.EncBinary()
					_ = yym2384
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2385 := z.DecBinary()
	_ = yym2385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2386 := r.ContainerType()
		if yyct2386 == codecSelferValueTypeMap1234 {
			yyl2386 := r.ReadMapStart()
			if yyl2386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2386, d)
			}
		} else if yyct2386 == codecSelferValueTypeArray1234 {
			yyl2386 := r.ReadArrayStart()
			if yyl2386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2387Slc
	var yyhl2387 bool = l >= 0
	for yyj2387 := 0; ; yyj2387++ {
		if yyhl2387 {
			if yyj2387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2387Slc = r.DecodeBytes(yys2387Slc, true, true)
		yys2387 := string(yys2387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2387 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2390 := &x.ListMeta
				yym2391 := z.DecBinary()
				_ = yym2391
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2390) {
				} else {
					z.DecFallback(yyv2390, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2392 := &x.Items
				yym2393 := z.DecBinary()
				_ = yym2393
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2392), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2387)
		} // end switch yys2387
	} // end for yyj2387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2394 int
	var yyb2394 bool
	var yyhl2394 bool = l >= 0
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2397 := &x.ListMeta
		yym2398 := z.DecBinary()
		_ = yym2398
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2397) {
		} else {
			z.DecFallback(yyv2397, false)
		}
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2399 := &x.Items
		yym2400 := z.DecBinary()
		_ = yym2400
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2399), d)
		}
	}
	for {
		yyj2394++
		if yyhl2394 {
			yyb2394 = yyj2394 > l
		} else {
			yyb2394 = r.CheckBreak()
		}
		if yyb2394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2401 := z.EncBinary()
	_ = yym2401
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2402 := z.DecBinary()
	_ = yym2402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2403 := z.EncBinary()
	_ = yym2403
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2404 := z.DecBinary()
	_ = yym2404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2405 := z.EncBinary()
		_ = yym2405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2406 := !z.EncBinary()
			yy2arr2406 := z.EncBasicHandle().StructToArray
			var yyq2406 [1]bool
			_, _, _ = yysep2406, yyq2406, yy2arr2406
			const yyr2406 bool = false
			yyq2406[0] = true
			var yynn2406 int
			if yyr2406 || yy2arr2406 {
				r.EncodeArrayStart(1)
			} else {
				yynn2406 = 0
				for _, b := range yyq2406 {
					if b {
						yynn2406++
					}
				}
				r.EncodeMapStart(yynn2406)
				yynn2406 = 0
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[0] {
					yy2408 := &x.LoadBalancer
					yy2408.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2409 := &x.LoadBalancer
					yy2409.CodecEncodeSelf(e)
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2410 := z.DecBinary()
	_ = yym2410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2411 := r.ContainerType()
		if yyct2411 == codecSelferValueTypeMap1234 {
			yyl2411 := r.ReadMapStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2411, d)
			}
		} else if yyct2411 == codecSelferValueTypeArray1234 {
			yyl2411 := r.ReadArrayStart()
			if yyl2411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2412Slc
	var yyhl2412 bool = l >= 0
	for yyj2412 := 0; ; yyj2412++ {
		if yyhl2412 {
			if yyj2412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2412Slc = r.DecodeBytes(yys2412Slc, true, true)
		yys2412 := string(yys2412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2412 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2413 := &x.LoadBalancer
				yyv2413.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2412)
		} // end switch yys2412
	} // end for yyj2412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2414 int
	var yyb2414 bool
	var yyhl2414 bool = l >= 0
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2415 := &x.LoadBalancer
		yyv2415.CodecDecodeSelf(d)
	}
	for {
		yyj2414++
		if yyhl2414 {
			yyb2414 = yyj2414 > l
		} else {
			yyb2414 = r.CheckBreak()
		}
		if yyb2414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2416 := z.EncBinary()
		_ = yym2416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2417 := !z.EncBinary()
			yy2arr2417 := z.EncBasicHandle().StructToArray
			var yyq2417 [1]bool
			_, _, _ = yysep2417, yyq2417, yy2arr2417
			const yyr2417 bool = false
			yyq2417[0] = len(x.Ingress) != 0
			var yynn2417 int
			if yyr2417 || yy2arr2417 {
				r.EncodeArrayStart(1)
			} else {
				yynn2417 = 0
				for _, b := range yyq2417 {
					if b {
						yynn2417++
					}
				}
				r.EncodeMapStart(yynn2417)
				yynn2417 = 0
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2417[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2419 := z.EncBinary()
						_ = yym2419
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2417[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2420 := z.EncBinary()
						_ = yym2420
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2421 := z.DecBinary()
	_ = yym2421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2422 := r.ContainerType()
		if yyct2422 == codecSelferValueTypeMap1234 {
			yyl2422 := r.ReadMapStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2422, d)
			}
		} else if yyct2422 == codecSelferValueTypeArray1234 {
			yyl2422 := r.ReadArrayStart()
			if yyl2422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2423Slc
	var yyhl2423 bool = l >= 0
	for yyj2423 := 0; ; yyj2423++ {
		if yyhl2423 {
			if yyj2423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2423Slc = r.DecodeBytes(yys2423Slc, true, true)
		yys2423 := string(yys2423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2423 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2424 := &x.Ingress
				yym2425 := z.DecBinary()
				_ = yym2425
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2424), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2423)
		} // end switch yys2423
	} // end for yyj2423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2426 int
	var yyb2426 bool
	var yyhl2426 bool = l >= 0
	yyj2426++
	if yyhl2426 {
		yyb2426 = yyj2426 > l
	} else {
		yyb2426 = r.CheckBreak()
	}
	if yyb2426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2427 := &x.Ingress
		yym2428 := z.DecBinary()
		_ = yym2428
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2427), d)
		}
	}
	for {
		yyj2426++
		if yyhl2426 {
			yyb2426 = yyj2426 > l
		} else {
			yyb2426 = r.CheckBreak()
		}
		if yyb2426 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2426-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2429 := z.EncBinary()
		_ = yym2429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2430 := !z.EncBinary()
			yy2arr2430 := z.EncBasicHandle().StructToArray
			var yyq2430 [2]bool
			_, _, _ = yysep2430, yyq2430, yy2arr2430
			const yyr2430 bool = false
			yyq2430[0] = x.IP != ""
			yyq2430[1] = x.Hostname != ""
			var yynn2430 int
			if yyr2430 || yy2arr2430 {
				r.EncodeArrayStart(2)
			} else {
				yynn2430 = 0
				for _, b := range yyq2430 {
					if b {
						yynn2430++
					}
				}
				r.EncodeMapStart(yynn2430)
				yynn2430 = 0
			}
			if yyr2430 || yy2arr2430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2430[0] {
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2430[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2430 || yy2arr2430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2430[1] {
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2430[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2430 || yy2arr2430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2437 := z.DecBinary()
	_ = yym2437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2438 := r.ContainerType()
		if yyct2438 == codecSelferValueTypeMap1234 {
			yyl2438 := r.ReadMapStart()
			if yyl2438 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2438, d)
			}
		} else if yyct2438 == codecSelferValueTypeArray1234 {
			yyl2438 := r.ReadArrayStart()
			if yyl2438 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2439Slc
	var yyhl2439 bool = l >= 0
	for yyj2439 := 0; ; yyj2439++ {
		if yyhl2439 {
			if yyj2439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2439Slc = r.DecodeBytes(yys2439Slc, true, true)
		yys2439 := string(yys2439Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2439 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2439)
		} // end switch yys2439
	} // end for yyj2439
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2442 int
	var yyb2442 bool
	var yyhl2442 bool = l >= 0
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2442++
		if yyhl2442 {
			yyb2442 = yyj2442 > l
		} else {
			yyb2442 = r.CheckBreak()
		}
		if yyb2442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2445 := z.EncBinary()
		_ = yym2445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2446 := !z.EncBinary()
			yy2arr2446 := z.EncBasicHandle().StructToArray
			var yyq2446 [8]bool
			_, _, _ = yysep2446, yyq2446, yy2arr2446
			const yyr2446 bool = false
			yyq2446[0] = x.Type != ""
			yyq2446[3] = x.ClusterIP != ""
			yyq2446[4] = len(x.ExternalIPs) != 0
			yyq2446[5] = x.LoadBalancerIP != ""
			yyq2446[6] = x.SessionAffinity != ""
			yyq2446[7] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2446 int
			if yyr2446 || yy2arr2446 {
				r.EncodeArrayStart(8)
			} else {
				yynn2446 = 2
				for _, b := range yyq2446 {
					if b {
						yynn2446++
					}
				}
				r.EncodeMapStart(yynn2446)
				yynn2446 = 0
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[3] {
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2458 := z.EncBinary()
						_ = yym2458
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2446[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2459 := z.EncBinary()
						_ = yym2459
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[5] {
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[7] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2465 := z.EncBinary()
						_ = yym2465
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2446[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2466 := z.EncBinary()
						_ = yym2466
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2467 := z.DecBinary()
	_ = yym2467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2468 := r.ContainerType()
		if yyct2468 == codecSelferValueTypeMap1234 {
			yyl2468 := r.ReadMapStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2468, d)
			}
		} else if yyct2468 == codecSelferValueTypeArray1234 {
			yyl2468 := r.ReadArrayStart()
			if yyl2468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2469Slc
	var yyhl2469 bool = l >= 0
	for yyj2469 := 0; ; yyj2469++ {
		if yyhl2469 {
			if yyj2469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2469Slc = r.DecodeBytes(yys2469Slc, true, true)
		yys2469 := string(yys2469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2469 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2471 := &x.Ports
				yym2472 := z.DecBinary()
				_ = yym2472
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2471), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2473 := &x.Selector
				yym2474 := z.DecBinary()
				_ = yym2474
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2473, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2476 := &x.ExternalIPs
				yym2477 := z.DecBinary()
				_ = yym2477
				if false {
				} else {
					z.F.DecSliceStringX(yyv2476, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2480 := &x.LoadBalancerSourceRanges
				yym2481 := z.DecBinary()
				_ = yym2481
				if false {
				} else {
					z.F.DecSliceStringX(yyv2480, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2469)
		} // end switch yys2469
	} // end for yyj2469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2482 int
	var yyb2482 bool
	var yyhl2482 bool = l >= 0
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2484 := &x.Ports
		yym2485 := z.DecBinary()
		_ = yym2485
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2484), d)
		}
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2486 := &x.Selector
		yym2487 := z.DecBinary()
		_ = yym2487
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2486, false, d)
		}
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2489 := &x.ExternalIPs
		yym2490 := z.DecBinary()
		_ = yym2490
		if false {
		} else {
			z.F.DecSliceStringX(yyv2489, false, d)
		}
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2482++
	if yyhl2482 {
		yyb2482 = yyj2482 > l
	} else {
		yyb2482 = r.CheckBreak()
	}
	if yyb2482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2493 := &x.LoadBalancerSourceRanges
		yym2494 := z.DecBinary()
		_ = yym2494
		if false {
		} else {
			z.F.DecSliceStringX(yyv2493, false, d)
		}
	}
	for {
		yyj2482++
		if yyhl2482 {
			yyb2482 = yyj2482 > l
		} else {
			yyb2482 = r.CheckBreak()
		}
		if yyb2482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2495 := z.EncBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2496 := !z.EncBinary()
			yy2arr2496 := z.EncBasicHandle().StructToArray
			var yyq2496 [5]bool
			_, _, _ = yysep2496, yyq2496, yy2arr2496
			const yyr2496 bool = false
			var yynn2496 int
			if yyr2496 || yy2arr2496 {
				r.EncodeArrayStart(5)
			} else {
				yynn2496 = 5
				for _, b := range yyq2496 {
					if b {
						yynn2496++
					}
				}
				r.EncodeMapStart(yynn2496)
				yynn2496 = 0
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2498 := z.EncBinary()
				_ = yym2498
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2499 := z.EncBinary()
				_ = yym2499
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2502 := z.EncBinary()
				_ = yym2502
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2503 := z.EncBinary()
				_ = yym2503
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2505 := &x.TargetPort
				yym2506 := z.EncBinary()
				_ = yym2506
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2505) {
				} else if !yym2506 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2505)
				} else {
					z.EncFallback(yy2505)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2507 := &x.TargetPort
				yym2508 := z.EncBinary()
				_ = yym2508
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2507) {
				} else if !yym2508 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2507)
				} else {
					z.EncFallback(yy2507)
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2510 := z.EncBinary()
				_ = yym2510
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2511 := z.EncBinary()
				_ = yym2511
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2512 := z.DecBinary()
	_ = yym2512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2513 := r.ContainerType()
		if yyct2513 == codecSelferValueTypeMap1234 {
			yyl2513 := r.ReadMapStart()
			if yyl2513 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2513, d)
			}
		} else if yyct2513 == codecSelferValueTypeArray1234 {
			yyl2513 := r.ReadArrayStart()
			if yyl2513 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2514Slc
	var yyhl2514 bool = l >= 0
	for yyj2514 := 0; ; yyj2514++ {
		if yyhl2514 {
			if yyj2514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2514Slc = r.DecodeBytes(yys2514Slc, true, true)
		yys2514 := string(yys2514Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2514 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2518 := &x.TargetPort
				yym2519 := z.DecBinary()
				_ = yym2519
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2518) {
				} else if !yym2519 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2518)
				} else {
					z.DecFallback(yyv2518, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2514)
		} // end switch yys2514
	} // end for yyj2514
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2521 int
	var yyb2521 bool
	var yyhl2521 bool = l >= 0
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2525 := &x.TargetPort
		yym2526 := z.DecBinary()
		_ = yym2526
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2525) {
		} else if !yym2526 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2525)
		} else {
			z.DecFallback(yyv2525, false)
		}
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2521++
		if yyhl2521 {
			yyb2521 = yyj2521 > l
		} else {
			yyb2521 = r.CheckBreak()
		}
		if yyb2521 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2521-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2528 := z.EncBinary()
		_ = yym2528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2529 := !z.EncBinary()
			yy2arr2529 := z.EncBasicHandle().StructToArray
			var yyq2529 [5]bool
			_, _, _ = yysep2529, yyq2529, yy2arr2529
			const yyr2529 bool = false
			yyq2529[0] = x.Kind != ""
			yyq2529[1] = x.APIVersion != ""
			yyq2529[2] = true
			yyq2529[3] = true
			yyq2529[4] = true
			var yynn2529 int
			if yyr2529 || yy2arr2529 {
				r.EncodeArrayStart(5)
			} else {
				yynn2529 = 0
				for _, b := range yyq2529 {
					if b {
						yynn2529++
					}
				}
				r.EncodeMapStart(yynn2529)
				yynn2529 = 0
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[0] {
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[1] {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[2] {
					yy2537 := &x.ObjectMeta
					yy2537.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2538 := &x.ObjectMeta
					yy2538.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[3] {
					yy2540 := &x.Spec
					yy2540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2541 := &x.Spec
					yy2541.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2529[4] {
					yy2543 := &x.Status
					yy2543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2544 := &x.Status
					yy2544.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2545 := z.DecBinary()
	_ = yym2545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2546 := r.ContainerType()
		if yyct2546 == codecSelferValueTypeMap1234 {
			yyl2546 := r.ReadMapStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2546, d)
			}
		} else if yyct2546 == codecSelferValueTypeArray1234 {
			yyl2546 := r.ReadArrayStart()
			if yyl2546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2547Slc
	var yyhl2547 bool = l >= 0
	for yyj2547 := 0; ; yyj2547++ {
		if yyhl2547 {
			if yyj2547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2547Slc = r.DecodeBytes(yys2547Slc, true, true)
		yys2547 := string(yys2547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2547 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2550 := &x.ObjectMeta
				yyv2550.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2551 := &x.Spec
				yyv2551.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2552 := &x.Status
				yyv2552.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2547)
		} // end switch yys2547
	} // end for yyj2547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2553 int
	var yyb2553 bool
	var yyhl2553 bool = l >= 0
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2556 := &x.ObjectMeta
		yyv2556.CodecDecodeSelf(d)
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2557 := &x.Spec
		yyv2557.CodecDecodeSelf(d)
	}
	yyj2553++
	if yyhl2553 {
		yyb2553 = yyj2553 > l
	} else {
		yyb2553 = r.CheckBreak()
	}
	if yyb2553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2558 := &x.Status
		yyv2558.CodecDecodeSelf(d)
	}
	for {
		yyj2553++
		if yyhl2553 {
			yyb2553 = yyj2553 > l
		} else {
			yyb2553 = r.CheckBreak()
		}
		if yyb2553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2559 := z.EncBinary()
		_ = yym2559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2560 := !z.EncBinary()
			yy2arr2560 := z.EncBasicHandle().StructToArray
			var yyq2560 [5]bool
			_, _, _ = yysep2560, yyq2560, yy2arr2560
			const yyr2560 bool = false
			yyq2560[0] = x.Kind != ""
			yyq2560[1] = x.APIVersion != ""
			yyq2560[2] = true
			yyq2560[4] = len(x.ImagePullSecrets) != 0
			var yynn2560 int
			if yyr2560 || yy2arr2560 {
				r.EncodeArrayStart(5)
			} else {
				yynn2560 = 1
				for _, b := range yyq2560 {
					if b {
						yynn2560++
					}
				}
				r.EncodeMapStart(yynn2560)
				yynn2560 = 0
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[0] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[1] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[2] {
					yy2568 := &x.ObjectMeta
					yy2568.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2560[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2569 := &x.ObjectMeta
					yy2569.CodecEncodeSelf(e)
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2574 := z.EncBinary()
						_ = yym2574
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2560[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2575 := z.EncBinary()
						_ = yym2575
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2576 := z.DecBinary()
	_ = yym2576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2577 := r.ContainerType()
		if yyct2577 == codecSelferValueTypeMap1234 {
			yyl2577 := r.ReadMapStart()
			if yyl2577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2577, d)
			}
		} else if yyct2577 == codecSelferValueTypeArray1234 {
			yyl2577 := r.ReadArrayStart()
			if yyl2577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2578Slc
	var yyhl2578 bool = l >= 0
	for yyj2578 := 0; ; yyj2578++ {
		if yyhl2578 {
			if yyj2578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2578Slc = r.DecodeBytes(yys2578Slc, true, true)
		yys2578 := string(yys2578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2578 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2581 := &x.ObjectMeta
				yyv2581.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2582 := &x.Secrets
				yym2583 := z.DecBinary()
				_ = yym2583
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2582), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2584 := &x.ImagePullSecrets
				yym2585 := z.DecBinary()
				_ = yym2585
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2584), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2578)
		} // end switch yys2578
	} // end for yyj2578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2586 int
	var yyb2586 bool
	var yyhl2586 bool = l >= 0
	yyj2586++
	if yyhl2586 {
		yyb2586 = yyj2586 > l
	} else {
		yyb2586 = r.CheckBreak()
	}
	if yyb2586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2586++
	if yyhl2586 {
		yyb2586 = yyj2586 > l
	} else {
		yyb2586 = r.CheckBreak()
	}
	if yyb2586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2586++
	if yyhl2586 {
		yyb2586 = yyj2586 > l
	} else {
		yyb2586 = r.CheckBreak()
	}
	if yyb2586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2589 := &x.ObjectMeta
		yyv2589.CodecDecodeSelf(d)
	}
	yyj2586++
	if yyhl2586 {
		yyb2586 = yyj2586 > l
	} else {
		yyb2586 = r.CheckBreak()
	}
	if yyb2586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2590 := &x.Secrets
		yym2591 := z.DecBinary()
		_ = yym2591
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2590), d)
		}
	}
	yyj2586++
	if yyhl2586 {
		yyb2586 = yyj2586 > l
	} else {
		yyb2586 = r.CheckBreak()
	}
	if yyb2586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2592 := &x.ImagePullSecrets
		yym2593 := z.DecBinary()
		_ = yym2593
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2592), d)
		}
	}
	for {
		yyj2586++
		if yyhl2586 {
			yyb2586 = yyj2586 > l
		} else {
			yyb2586 = r.CheckBreak()
		}
		if yyb2586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2594 := z.EncBinary()
		_ = yym2594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2595 := !z.EncBinary()
			yy2arr2595 := z.EncBasicHandle().StructToArray
			var yyq2595 [4]bool
			_, _, _ = yysep2595, yyq2595, yy2arr2595
			const yyr2595 bool = false
			yyq2595[0] = x.Kind != ""
			yyq2595[1] = x.APIVersion != ""
			yyq2595[2] = true
			var yynn2595 int
			if yyr2595 || yy2arr2595 {
				r.EncodeArrayStart(4)
			} else {
				yynn2595 = 1
				for _, b := range yyq2595 {
					if b {
						yynn2595++
					}
				}
				r.EncodeMapStart(yynn2595)
				yynn2595 = 0
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[0] {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[1] {
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[2] {
					yy2603 := &x.ListMeta
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2603) {
					} else {
						z.EncFallback(yy2603)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2605 := &x.ListMeta
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2605) {
					} else {
						z.EncFallback(yy2605)
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2610 := z.DecBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2611 := r.ContainerType()
		if yyct2611 == codecSelferValueTypeMap1234 {
			yyl2611 := r.ReadMapStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2611, d)
			}
		} else if yyct2611 == codecSelferValueTypeArray1234 {
			yyl2611 := r.ReadArrayStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2612Slc
	var yyhl2612 bool = l >= 0
	for yyj2612 := 0; ; yyj2612++ {
		if yyhl2612 {
			if yyj2612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2612Slc = r.DecodeBytes(yys2612Slc, true, true)
		yys2612 := string(yys2612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2612 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2615 := &x.ListMeta
				yym2616 := z.DecBinary()
				_ = yym2616
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2615) {
				} else {
					z.DecFallback(yyv2615, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2617 := &x.Items
				yym2618 := z.DecBinary()
				_ = yym2618
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2617), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2612)
		} // end switch yys2612
	} // end for yyj2612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2619 int
	var yyb2619 bool
	var yyhl2619 bool = l >= 0
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2622 := &x.ListMeta
		yym2623 := z.DecBinary()
		_ = yym2623
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2622) {
		} else {
			z.DecFallback(yyv2622, false)
		}
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2624 := &x.Items
		yym2625 := z.DecBinary()
		_ = yym2625
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2624), d)
		}
	}
	for {
		yyj2619++
		if yyhl2619 {
			yyb2619 = yyj2619 > l
		} else {
			yyb2619 = r.CheckBreak()
		}
		if yyb2619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2626 := z.EncBinary()
		_ = yym2626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2627 := !z.EncBinary()
			yy2arr2627 := z.EncBasicHandle().StructToArray
			var yyq2627 [4]bool
			_, _, _ = yysep2627, yyq2627, yy2arr2627
			const yyr2627 bool = false
			yyq2627[0] = x.Kind != ""
			yyq2627[1] = x.APIVersion != ""
			yyq2627[2] = true
			var yynn2627 int
			if yyr2627 || yy2arr2627 {
				r.EncodeArrayStart(4)
			} else {
				yynn2627 = 1
				for _, b := range yyq2627 {
					if b {
						yynn2627++
					}
				}
				r.EncodeMapStart(yynn2627)
				yynn2627 = 0
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[0] {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[1] {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[2] {
					yy2635 := &x.ObjectMeta
					yy2635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2636 := &x.ObjectMeta
					yy2636.CodecEncodeSelf(e)
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2640 := z.DecBinary()
	_ = yym2640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2641 := r.ContainerType()
		if yyct2641 == codecSelferValueTypeMap1234 {
			yyl2641 := r.ReadMapStart()
			if yyl2641 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2641, d)
			}
		} else if yyct2641 == codecSelferValueTypeArray1234 {
			yyl2641 := r.ReadArrayStart()
			if yyl2641 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2642Slc
	var yyhl2642 bool = l >= 0
	for yyj2642 := 0; ; yyj2642++ {
		if yyhl2642 {
			if yyj2642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2642Slc = r.DecodeBytes(yys2642Slc, true, true)
		yys2642 := string(yys2642Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2642 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2645 := &x.ObjectMeta
				yyv2645.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2646 := &x.Subsets
				yym2647 := z.DecBinary()
				_ = yym2647
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2646), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2642)
		} // end switch yys2642
	} // end for yyj2642
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2648 int
	var yyb2648 bool
	var yyhl2648 bool = l >= 0
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2651 := &x.ObjectMeta
		yyv2651.CodecDecodeSelf(d)
	}
	yyj2648++
	if yyhl2648 {
		yyb2648 = yyj2648 > l
	} else {
		yyb2648 = r.CheckBreak()
	}
	if yyb2648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2652 := &x.Subsets
		yym2653 := z.DecBinary()
		_ = yym2653
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2652), d)
		}
	}
	for {
		yyj2648++
		if yyhl2648 {
			yyb2648 = yyj2648 > l
		} else {
			yyb2648 = r.CheckBreak()
		}
		if yyb2648 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2648-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2654 := z.EncBinary()
		_ = yym2654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2655 := !z.EncBinary()
			yy2arr2655 := z.EncBasicHandle().StructToArray
			var yyq2655 [3]bool
			_, _, _ = yysep2655, yyq2655, yy2arr2655
			const yyr2655 bool = false
			var yynn2655 int
			if yyr2655 || yy2arr2655 {
				r.EncodeArrayStart(3)
			} else {
				yynn2655 = 3
				for _, b := range yyq2655 {
					if b {
						yynn2655++
					}
				}
				r.EncodeMapStart(yynn2655)
				yynn2655 = 0
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2655 || yy2arr2655 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2665 := z.DecBinary()
	_ = yym2665
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2666 := r.ContainerType()
		if yyct2666 == codecSelferValueTypeMap1234 {
			yyl2666 := r.ReadMapStart()
			if yyl2666 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2666, d)
			}
		} else if yyct2666 == codecSelferValueTypeArray1234 {
			yyl2666 := r.ReadArrayStart()
			if yyl2666 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2666, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2667Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2667Slc
	var yyhl2667 bool = l >= 0
	for yyj2667 := 0; ; yyj2667++ {
		if yyhl2667 {
			if yyj2667 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2667Slc = r.DecodeBytes(yys2667Slc, true, true)
		yys2667 := string(yys2667Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2667 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2668 := &x.Addresses
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2668), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2670 := &x.NotReadyAddresses
				yym2671 := z.DecBinary()
				_ = yym2671
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2670), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2672 := &x.Ports
				yym2673 := z.DecBinary()
				_ = yym2673
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2672), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2667)
		} // end switch yys2667
	} // end for yyj2667
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2674 int
	var yyb2674 bool
	var yyhl2674 bool = l >= 0
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2675 := &x.Addresses
		yym2676 := z.DecBinary()
		_ = yym2676
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2675), d)
		}
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2677 := &x.NotReadyAddresses
		yym2678 := z.DecBinary()
		_ = yym2678
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2677), d)
		}
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2679 := &x.Ports
		yym2680 := z.DecBinary()
		_ = yym2680
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2679), d)
		}
	}
	for {
		yyj2674++
		if yyhl2674 {
			yyb2674 = yyj2674 > l
		} else {
			yyb2674 = r.CheckBreak()
		}
		if yyb2674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2681 := z.EncBinary()
		_ = yym2681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2682 := !z.EncBinary()
			yy2arr2682 := z.EncBasicHandle().StructToArray
			var yyq2682 [4]bool
			_, _, _ = yysep2682, yyq2682, yy2arr2682
			const yyr2682 bool = false
			yyq2682[1] = x.Hostname != ""
			yyq2682[2] = x.NodeName != nil
			var yynn2682 int
			if yyr2682 || yy2arr2682 {
				r.EncodeArrayStart(4)
			} else {
				yynn2682 = 2
				for _, b := range yyq2682 {
					if b {
						yynn2682++
					}
				}
				r.EncodeMapStart(yynn2682)
				yynn2682 = 0
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2684 := z.EncBinary()
				_ = yym2684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2685 := z.EncBinary()
				_ = yym2685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[1] {
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2682[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2690 := *x.NodeName
						yym2691 := z.EncBinary()
						_ = yym2691
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2690))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2692 := *x.NodeName
						yym2693 := z.EncBinary()
						_ = yym2693
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2692))
						}
					}
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2682 || yy2arr2682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2695 := z.DecBinary()
	_ = yym2695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2696 := r.ContainerType()
		if yyct2696 == codecSelferValueTypeMap1234 {
			yyl2696 := r.ReadMapStart()
			if yyl2696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2696, d)
			}
		} else if yyct2696 == codecSelferValueTypeArray1234 {
			yyl2696 := r.ReadArrayStart()
			if yyl2696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2697Slc
	var yyhl2697 bool = l >= 0
	for yyj2697 := 0; ; yyj2697++ {
		if yyhl2697 {
			if yyj2697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2697Slc = r.DecodeBytes(yys2697Slc, true, true)
		yys2697 := string(yys2697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2697 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2701 := z.DecBinary()
				_ = yym2701
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2697)
		} // end switch yys2697
	} // end for yyj2697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2703 int
	var yyb2703 bool
	var yyhl2703 bool = l >= 0
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2707 := z.DecBinary()
		_ = yym2707
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2703++
		if yyhl2703 {
			yyb2703 = yyj2703 > l
		} else {
			yyb2703 = r.CheckBreak()
		}
		if yyb2703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2709 := z.EncBinary()
		_ = yym2709
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2710 := !z.EncBinary()
			yy2arr2710 := z.EncBasicHandle().StructToArray
			var yyq2710 [3]bool
			_, _, _ = yysep2710, yyq2710, yy2arr2710
			const yyr2710 bool = false
			var yynn2710 int
			if yyr2710 || yy2arr2710 {
				r.EncodeArrayStart(3)
			} else {
				yynn2710 = 3
				for _, b := range yyq2710 {
					if b {
						yynn2710++
					}
				}
				r.EncodeMapStart(yynn2710)
				yynn2710 = 0
			}
			if yyr2710 || yy2arr2710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2712 := z.EncBinary()
				_ = yym2712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2713 := z.EncBinary()
				_ = yym2713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2710 || yy2arr2710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2715 := z.EncBinary()
				_ = yym2715
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2716 := z.EncBinary()
				_ = yym2716
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2710 || yy2arr2710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2710 || yy2arr2710 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2718 := z.DecBinary()
	_ = yym2718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2719 := r.ContainerType()
		if yyct2719 == codecSelferValueTypeMap1234 {
			yyl2719 := r.ReadMapStart()
			if yyl2719 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2719, d)
			}
		} else if yyct2719 == codecSelferValueTypeArray1234 {
			yyl2719 := r.ReadArrayStart()
			if yyl2719 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2719, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2720Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2720Slc
	var yyhl2720 bool = l >= 0
	for yyj2720 := 0; ; yyj2720++ {
		if yyhl2720 {
			if yyj2720 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2720Slc = r.DecodeBytes(yys2720Slc, true, true)
		yys2720 := string(yys2720Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2720 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2720)
		} // end switch yys2720
	} // end for yyj2720
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2724 int
	var yyb2724 bool
	var yyhl2724 bool = l >= 0
	yyj2724++
	if yyhl2724 {
		yyb2724 = yyj2724 > l
	} else {
		yyb2724 = r.CheckBreak()
	}
	if yyb2724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2724++
	if yyhl2724 {
		yyb2724 = yyj2724 > l
	} else {
		yyb2724 = r.CheckBreak()
	}
	if yyb2724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2724++
	if yyhl2724 {
		yyb2724 = yyj2724 > l
	} else {
		yyb2724 = r.CheckBreak()
	}
	if yyb2724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2724++
		if yyhl2724 {
			yyb2724 = yyj2724 > l
		} else {
			yyb2724 = r.CheckBreak()
		}
		if yyb2724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2728 := z.EncBinary()
		_ = yym2728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2729 := !z.EncBinary()
			yy2arr2729 := z.EncBasicHandle().StructToArray
			var yyq2729 [4]bool
			_, _, _ = yysep2729, yyq2729, yy2arr2729
			const yyr2729 bool = false
			yyq2729[0] = x.Kind != ""
			yyq2729[1] = x.APIVersion != ""
			yyq2729[2] = true
			var yynn2729 int
			if yyr2729 || yy2arr2729 {
				r.EncodeArrayStart(4)
			} else {
				yynn2729 = 1
				for _, b := range yyq2729 {
					if b {
						yynn2729++
					}
				}
				r.EncodeMapStart(yynn2729)
				yynn2729 = 0
			}
			if yyr2729 || yy2arr2729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2729[0] {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2729[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2729[1] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2729[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2729[2] {
					yy2737 := &x.ListMeta
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2737) {
					} else {
						z.EncFallback(yy2737)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2739 := &x.ListMeta
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2739) {
					} else {
						z.EncFallback(yy2739)
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2744 := z.DecBinary()
	_ = yym2744
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2745 := r.ContainerType()
		if yyct2745 == codecSelferValueTypeMap1234 {
			yyl2745 := r.ReadMapStart()
			if yyl2745 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2745, d)
			}
		} else if yyct2745 == codecSelferValueTypeArray1234 {
			yyl2745 := r.ReadArrayStart()
			if yyl2745 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2745, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2746Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2746Slc
	var yyhl2746 bool = l >= 0
	for yyj2746 := 0; ; yyj2746++ {
		if yyhl2746 {
			if yyj2746 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2746Slc = r.DecodeBytes(yys2746Slc, true, true)
		yys2746 := string(yys2746Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2746 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2749 := &x.ListMeta
				yym2750 := z.DecBinary()
				_ = yym2750
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2749) {
				} else {
					z.DecFallback(yyv2749, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2751 := &x.Items
				yym2752 := z.DecBinary()
				_ = yym2752
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2751), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2746)
		} // end switch yys2746
	} // end for yyj2746
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2753 int
	var yyb2753 bool
	var yyhl2753 bool = l >= 0
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2756 := &x.ListMeta
		yym2757 := z.DecBinary()
		_ = yym2757
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2756) {
		} else {
			z.DecFallback(yyv2756, false)
		}
	}
	yyj2753++
	if yyhl2753 {
		yyb2753 = yyj2753 > l
	} else {
		yyb2753 = r.CheckBreak()
	}
	if yyb2753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2758 := &x.Items
		yym2759 := z.DecBinary()
		_ = yym2759
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2758), d)
		}
	}
	for {
		yyj2753++
		if yyhl2753 {
			yyb2753 = yyj2753 > l
		} else {
			yyb2753 = r.CheckBreak()
		}
		if yyb2753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2760 := z.EncBinary()
		_ = yym2760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2761 := !z.EncBinary()
			yy2arr2761 := z.EncBasicHandle().StructToArray
			var yyq2761 [4]bool
			_, _, _ = yysep2761, yyq2761, yy2arr2761
			const yyr2761 bool = false
			yyq2761[0] = x.PodCIDR != ""
			yyq2761[1] = x.ExternalID != ""
			yyq2761[2] = x.ProviderID != ""
			yyq2761[3] = x.Unschedulable != false
			var yynn2761 int
			if yyr2761 || yy2arr2761 {
				r.EncodeArrayStart(4)
			} else {
				yynn2761 = 0
				for _, b := range yyq2761 {
					if b {
						yynn2761++
					}
				}
				r.EncodeMapStart(yynn2761)
				yynn2761 = 0
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[0] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[1] {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[2] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[3] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2761[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2774 := z.DecBinary()
	_ = yym2774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2775 := r.ContainerType()
		if yyct2775 == codecSelferValueTypeMap1234 {
			yyl2775 := r.ReadMapStart()
			if yyl2775 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2775, d)
			}
		} else if yyct2775 == codecSelferValueTypeArray1234 {
			yyl2775 := r.ReadArrayStart()
			if yyl2775 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2776Slc
	var yyhl2776 bool = l >= 0
	for yyj2776 := 0; ; yyj2776++ {
		if yyhl2776 {
			if yyj2776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2776Slc = r.DecodeBytes(yys2776Slc, true, true)
		yys2776 := string(yys2776Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2776 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2776)
		} // end switch yys2776
	} // end for yyj2776
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2781 int
	var yyb2781 bool
	var yyhl2781 bool = l >= 0
	yyj2781++
	if yyhl2781 {
		yyb2781 = yyj2781 > l
	} else {
		yyb2781 = r.CheckBreak()
	}
	if yyb2781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2781++
	if yyhl2781 {
		yyb2781 = yyj2781 > l
	} else {
		yyb2781 = r.CheckBreak()
	}
	if yyb2781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2781++
	if yyhl2781 {
		yyb2781 = yyj2781 > l
	} else {
		yyb2781 = r.CheckBreak()
	}
	if yyb2781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2781++
	if yyhl2781 {
		yyb2781 = yyj2781 > l
	} else {
		yyb2781 = r.CheckBreak()
	}
	if yyb2781 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2781++
		if yyhl2781 {
			yyb2781 = yyj2781 > l
		} else {
			yyb2781 = r.CheckBreak()
		}
		if yyb2781 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2781-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2786 := z.EncBinary()
		_ = yym2786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2787 := !z.EncBinary()
			yy2arr2787 := z.EncBasicHandle().StructToArray
			var yyq2787 [1]bool
			_, _, _ = yysep2787, yyq2787, yy2arr2787
			const yyr2787 bool = false
			var yynn2787 int
			if yyr2787 || yy2arr2787 {
				r.EncodeArrayStart(1)
			} else {
				yynn2787 = 1
				for _, b := range yyq2787 {
					if b {
						yynn2787++
					}
				}
				r.EncodeMapStart(yynn2787)
				yynn2787 = 0
			}
			if yyr2787 || yy2arr2787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2789 := z.EncBinary()
				_ = yym2789
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2787 || yy2arr2787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2791 := z.DecBinary()
	_ = yym2791
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2792 := r.ContainerType()
		if yyct2792 == codecSelferValueTypeMap1234 {
			yyl2792 := r.ReadMapStart()
			if yyl2792 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2792, d)
			}
		} else if yyct2792 == codecSelferValueTypeArray1234 {
			yyl2792 := r.ReadArrayStart()
			if yyl2792 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2792, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2793Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2793Slc
	var yyhl2793 bool = l >= 0
	for yyj2793 := 0; ; yyj2793++ {
		if yyhl2793 {
			if yyj2793 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2793Slc = r.DecodeBytes(yys2793Slc, true, true)
		yys2793 := string(yys2793Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2793 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2793)
		} // end switch yys2793
	} // end for yyj2793
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2795 int
	var yyb2795 bool
	var yyhl2795 bool = l >= 0
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2795++
		if yyhl2795 {
			yyb2795 = yyj2795 > l
		} else {
			yyb2795 = r.CheckBreak()
		}
		if yyb2795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2797 := z.EncBinary()
		_ = yym2797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2798 := !z.EncBinary()
			yy2arr2798 := z.EncBasicHandle().StructToArray
			var yyq2798 [1]bool
			_, _, _ = yysep2798, yyq2798, yy2arr2798
			const yyr2798 bool = false
			yyq2798[0] = true
			var yynn2798 int
			if yyr2798 || yy2arr2798 {
				r.EncodeArrayStart(1)
			} else {
				yynn2798 = 0
				for _, b := range yyq2798 {
					if b {
						yynn2798++
					}
				}
				r.EncodeMapStart(yynn2798)
				yynn2798 = 0
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2798[0] {
					yy2800 := &x.KubeletEndpoint
					yy2800.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2798[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2801 := &x.KubeletEndpoint
					yy2801.CodecEncodeSelf(e)
				}
			}
			if yyr2798 || yy2arr2798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2802 := z.DecBinary()
	_ = yym2802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2803 := r.ContainerType()
		if yyct2803 == codecSelferValueTypeMap1234 {
			yyl2803 := r.ReadMapStart()
			if yyl2803 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2803, d)
			}
		} else if yyct2803 == codecSelferValueTypeArray1234 {
			yyl2803 := r.ReadArrayStart()
			if yyl2803 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2803, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2804Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2804Slc
	var yyhl2804 bool = l >= 0
	for yyj2804 := 0; ; yyj2804++ {
		if yyhl2804 {
			if yyj2804 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2804Slc = r.DecodeBytes(yys2804Slc, true, true)
		yys2804 := string(yys2804Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2804 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2805 := &x.KubeletEndpoint
				yyv2805.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2804)
		} // end switch yys2804
	} // end for yyj2804
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2806 int
	var yyb2806 bool
	var yyhl2806 bool = l >= 0
	yyj2806++
	if yyhl2806 {
		yyb2806 = yyj2806 > l
	} else {
		yyb2806 = r.CheckBreak()
	}
	if yyb2806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2807 := &x.KubeletEndpoint
		yyv2807.CodecDecodeSelf(d)
	}
	for {
		yyj2806++
		if yyhl2806 {
			yyb2806 = yyj2806 > l
		} else {
			yyb2806 = r.CheckBreak()
		}
		if yyb2806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2808 := z.EncBinary()
		_ = yym2808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2809 := !z.EncBinary()
			yy2arr2809 := z.EncBasicHandle().StructToArray
			var yyq2809 [10]bool
			_, _, _ = yysep2809, yyq2809, yy2arr2809
			const yyr2809 bool = false
			var yynn2809 int
			if yyr2809 || yy2arr2809 {
				r.EncodeArrayStart(10)
			} else {
				yynn2809 = 10
				for _, b := range yyq2809 {
					if b {
						yynn2809++
					}
				}
				r.EncodeMapStart(yynn2809)
				yynn2809 = 0
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2811 := z.EncBinary()
				_ = yym2811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2817 := z.EncBinary()
				_ = yym2817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2820 := z.EncBinary()
				_ = yym2820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2821 := z.EncBinary()
				_ = yym2821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2823 := z.EncBinary()
				_ = yym2823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2824 := z.EncBinary()
				_ = yym2824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2826 := z.EncBinary()
				_ = yym2826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2827 := z.EncBinary()
				_ = yym2827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2829 := z.EncBinary()
				_ = yym2829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2830 := z.EncBinary()
				_ = yym2830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2832 := z.EncBinary()
				_ = yym2832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2833 := z.EncBinary()
				_ = yym2833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2835 := z.EncBinary()
				_ = yym2835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2836 := z.EncBinary()
				_ = yym2836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2838 := z.EncBinary()
				_ = yym2838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2839 := z.EncBinary()
				_ = yym2839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2809 || yy2arr2809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2840 := z.DecBinary()
	_ = yym2840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2841 := r.ContainerType()
		if yyct2841 == codecSelferValueTypeMap1234 {
			yyl2841 := r.ReadMapStart()
			if yyl2841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2841, d)
			}
		} else if yyct2841 == codecSelferValueTypeArray1234 {
			yyl2841 := r.ReadArrayStart()
			if yyl2841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2842Slc
	var yyhl2842 bool = l >= 0
	for yyj2842 := 0; ; yyj2842++ {
		if yyhl2842 {
			if yyj2842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2842Slc = r.DecodeBytes(yys2842Slc, true, true)
		yys2842 := string(yys2842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2842 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2842)
		} // end switch yys2842
	} // end for yyj2842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2853 int
	var yyb2853 bool
	var yyhl2853 bool = l >= 0
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2853++
		if yyhl2853 {
			yyb2853 = yyj2853 > l
		} else {
			yyb2853 = r.CheckBreak()
		}
		if yyb2853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2864 := z.EncBinary()
		_ = yym2864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2865 := !z.EncBinary()
			yy2arr2865 := z.EncBasicHandle().StructToArray
			var yyq2865 [10]bool
			_, _, _ = yysep2865, yyq2865, yy2arr2865
			const yyr2865 bool = false
			yyq2865[0] = len(x.Capacity) != 0
			yyq2865[1] = len(x.Allocatable) != 0
			yyq2865[2] = x.Phase != ""
			yyq2865[3] = len(x.Conditions) != 0
			yyq2865[4] = len(x.Addresses) != 0
			yyq2865[5] = true
			yyq2865[6] = true
			yyq2865[7] = len(x.Images) != 0
			yyq2865[8] = len(x.VolumesInUse) != 0
			yyq2865[9] = len(x.VolumesAttached) != 0
			var yynn2865 int
			if yyr2865 || yy2arr2865 {
				r.EncodeArrayStart(10)
			} else {
				yynn2865 = 0
				for _, b := range yyq2865 {
					if b {
						yynn2865++
					}
				}
				r.EncodeMapStart(yynn2865)
				yynn2865 = 0
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2870 := z.EncBinary()
						_ = yym2870
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2871 := z.EncBinary()
						_ = yym2871
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2873 := z.EncBinary()
						_ = yym2873
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2874 := z.EncBinary()
						_ = yym2874
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[5] {
					yy2876 := &x.DaemonEndpoints
					yy2876.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2877 := &x.DaemonEndpoints
					yy2877.CodecEncodeSelf(e)
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[6] {
					yy2879 := &x.NodeInfo
					yy2879.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2880 := &x.NodeInfo
					yy2880.CodecEncodeSelf(e)
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2882 := z.EncBinary()
						_ = yym2882
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2883 := z.EncBinary()
						_ = yym2883
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2885 := z.EncBinary()
						_ = yym2885
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2886 := z.EncBinary()
						_ = yym2886
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2888 := z.EncBinary()
						_ = yym2888
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2889 := z.EncBinary()
						_ = yym2889
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2890 := z.DecBinary()
	_ = yym2890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2891 := r.ContainerType()
		if yyct2891 == codecSelferValueTypeMap1234 {
			yyl2891 := r.ReadMapStart()
			if yyl2891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2891, d)
			}
		} else if yyct2891 == codecSelferValueTypeArray1234 {
			yyl2891 := r.ReadArrayStart()
			if yyl2891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2892Slc
	var yyhl2892 bool = l >= 0
	for yyj2892 := 0; ; yyj2892++ {
		if yyhl2892 {
			if yyj2892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2892Slc = r.DecodeBytes(yys2892Slc, true, true)
		yys2892 := string(yys2892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2892 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2893 := &x.Capacity
				yyv2893.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2894 := &x.Allocatable
				yyv2894.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2896 := &x.Conditions
				yym2897 := z.DecBinary()
				_ = yym2897
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2896), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2898 := &x.Addresses
				yym2899 := z.DecBinary()
				_ = yym2899
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2898), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2900 := &x.DaemonEndpoints
				yyv2900.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2901 := &x.NodeInfo
				yyv2901.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2902 := &x.Images
				yym2903 := z.DecBinary()
				_ = yym2903
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2902), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2904 := &x.VolumesInUse
				yym2905 := z.DecBinary()
				_ = yym2905
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2904), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2906 := &x.VolumesAttached
				yym2907 := z.DecBinary()
				_ = yym2907
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2906), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2892)
		} // end switch yys2892
	} // end for yyj2892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2908 int
	var yyb2908 bool
	var yyhl2908 bool = l >= 0
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2909 := &x.Capacity
		yyv2909.CodecDecodeSelf(d)
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2910 := &x.Allocatable
		yyv2910.CodecDecodeSelf(d)
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2912 := &x.Conditions
		yym2913 := z.DecBinary()
		_ = yym2913
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2912), d)
		}
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2914 := &x.Addresses
		yym2915 := z.DecBinary()
		_ = yym2915
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2914), d)
		}
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2916 := &x.DaemonEndpoints
		yyv2916.CodecDecodeSelf(d)
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2917 := &x.NodeInfo
		yyv2917.CodecDecodeSelf(d)
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2918 := &x.Images
		yym2919 := z.DecBinary()
		_ = yym2919
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2918), d)
		}
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2920 := &x.VolumesInUse
		yym2921 := z.DecBinary()
		_ = yym2921
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2920), d)
		}
	}
	yyj2908++
	if yyhl2908 {
		yyb2908 = yyj2908 > l
	} else {
		yyb2908 = r.CheckBreak()
	}
	if yyb2908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2922 := &x.VolumesAttached
		yym2923 := z.DecBinary()
		_ = yym2923
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2922), d)
		}
	}
	for {
		yyj2908++
		if yyhl2908 {
			yyb2908 = yyj2908 > l
		} else {
			yyb2908 = r.CheckBreak()
		}
		if yyb2908 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2908-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2924 := z.EncBinary()
	_ = yym2924
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2925 := z.DecBinary()
	_ = yym2925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2926 := z.EncBinary()
		_ = yym2926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2927 := !z.EncBinary()
			yy2arr2927 := z.EncBasicHandle().StructToArray
			var yyq2927 [2]bool
			_, _, _ = yysep2927, yyq2927, yy2arr2927
			const yyr2927 bool = false
			var yynn2927 int
			if yyr2927 || yy2arr2927 {
				r.EncodeArrayStart(2)
			} else {
				yynn2927 = 2
				for _, b := range yyq2927 {
					if b {
						yynn2927++
					}
				}
				r.EncodeMapStart(yynn2927)
				yynn2927 = 0
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2931 := z.EncBinary()
				_ = yym2931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2932 := z.DecBinary()
	_ = yym2932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2933 := r.ContainerType()
		if yyct2933 == codecSelferValueTypeMap1234 {
			yyl2933 := r.ReadMapStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2933, d)
			}
		} else if yyct2933 == codecSelferValueTypeArray1234 {
			yyl2933 := r.ReadArrayStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2934Slc
	var yyhl2934 bool = l >= 0
	for yyj2934 := 0; ; yyj2934++ {
		if yyhl2934 {
			if yyj2934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2934Slc = r.DecodeBytes(yys2934Slc, true, true)
		yys2934 := string(yys2934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2934 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2934)
		} // end switch yys2934
	} // end for yyj2934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2937 int
	var yyb2937 bool
	var yyhl2937 bool = l >= 0
	yyj2937++
	if yyhl2937 {
		yyb2937 = yyj2937 > l
	} else {
		yyb2937 = r.CheckBreak()
	}
	if yyb2937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2937++
	if yyhl2937 {
		yyb2937 = yyj2937 > l
	} else {
		yyb2937 = r.CheckBreak()
	}
	if yyb2937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2937++
		if yyhl2937 {
			yyb2937 = yyj2937 > l
		} else {
			yyb2937 = r.CheckBreak()
		}
		if yyb2937 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2937-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2940 := z.EncBinary()
		_ = yym2940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2941 := !z.EncBinary()
			yy2arr2941 := z.EncBasicHandle().StructToArray
			var yyq2941 [1]bool
			_, _, _ = yysep2941, yyq2941, yy2arr2941
			const yyr2941 bool = false
			yyq2941[0] = len(x.PreferAvoidPods) != 0
			var yynn2941 int
			if yyr2941 || yy2arr2941 {
				r.EncodeArrayStart(1)
			} else {
				yynn2941 = 0
				for _, b := range yyq2941 {
					if b {
						yynn2941++
					}
				}
				r.EncodeMapStart(yynn2941)
				yynn2941 = 0
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2941[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2943 := z.EncBinary()
						_ = yym2943
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2941[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2944 := z.EncBinary()
						_ = yym2944
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2941 || yy2arr2941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2945 := z.DecBinary()
	_ = yym2945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2946 := r.ContainerType()
		if yyct2946 == codecSelferValueTypeMap1234 {
			yyl2946 := r.ReadMapStart()
			if yyl2946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2946, d)
			}
		} else if yyct2946 == codecSelferValueTypeArray1234 {
			yyl2946 := r.ReadArrayStart()
			if yyl2946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2947Slc
	var yyhl2947 bool = l >= 0
	for yyj2947 := 0; ; yyj2947++ {
		if yyhl2947 {
			if yyj2947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2947Slc = r.DecodeBytes(yys2947Slc, true, true)
		yys2947 := string(yys2947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2947 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2948 := &x.PreferAvoidPods
				yym2949 := z.DecBinary()
				_ = yym2949
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2948), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2947)
		} // end switch yys2947
	} // end for yyj2947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2950 int
	var yyb2950 bool
	var yyhl2950 bool = l >= 0
	yyj2950++
	if yyhl2950 {
		yyb2950 = yyj2950 > l
	} else {
		yyb2950 = r.CheckBreak()
	}
	if yyb2950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2951 := &x.PreferAvoidPods
		yym2952 := z.DecBinary()
		_ = yym2952
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2951), d)
		}
	}
	for {
		yyj2950++
		if yyhl2950 {
			yyb2950 = yyj2950 > l
		} else {
			yyb2950 = r.CheckBreak()
		}
		if yyb2950 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2950-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2953 := z.EncBinary()
		_ = yym2953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2954 := !z.EncBinary()
			yy2arr2954 := z.EncBasicHandle().StructToArray
			var yyq2954 [4]bool
			_, _, _ = yysep2954, yyq2954, yy2arr2954
			const yyr2954 bool = false
			yyq2954[1] = true
			yyq2954[2] = x.Reason != ""
			yyq2954[3] = x.Message != ""
			var yynn2954 int
			if yyr2954 || yy2arr2954 {
				r.EncodeArrayStart(4)
			} else {
				yynn2954 = 1
				for _, b := range yyq2954 {
					if b {
						yynn2954++
					}
				}
				r.EncodeMapStart(yynn2954)
				yynn2954 = 0
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2956 := &x.PodSignature
				yy2956.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2957 := &x.PodSignature
				yy2957.CodecEncodeSelf(e)
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[1] {
					yy2959 := &x.EvictionTime
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2959) {
					} else if yym2960 {
						z.EncBinaryMarshal(yy2959)
					} else if !yym2960 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2959)
					} else {
						z.EncFallback(yy2959)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2954[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2961 := &x.EvictionTime
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2961) {
					} else if yym2962 {
						z.EncBinaryMarshal(yy2961)
					} else if !yym2962 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2961)
					} else {
						z.EncFallback(yy2961)
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[2] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[3] {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2969 := z.DecBinary()
	_ = yym2969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2970 := r.ContainerType()
		if yyct2970 == codecSelferValueTypeMap1234 {
			yyl2970 := r.ReadMapStart()
			if yyl2970 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2970, d)
			}
		} else if yyct2970 == codecSelferValueTypeArray1234 {
			yyl2970 := r.ReadArrayStart()
			if yyl2970 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2971Slc
	var yyhl2971 bool = l >= 0
	for yyj2971 := 0; ; yyj2971++ {
		if yyhl2971 {
			if yyj2971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2971Slc = r.DecodeBytes(yys2971Slc, true, true)
		yys2971 := string(yys2971Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2971 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2972 := &x.PodSignature
				yyv2972.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2973 := &x.EvictionTime
				yym2974 := z.DecBinary()
				_ = yym2974
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2973) {
				} else if yym2974 {
					z.DecBinaryUnmarshal(yyv2973)
				} else if !yym2974 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2973)
				} else {
					z.DecFallback(yyv2973, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2971)
		} // end switch yys2971
	} // end for yyj2971
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2977 int
	var yyb2977 bool
	var yyhl2977 bool = l >= 0
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2978 := &x.PodSignature
		yyv2978.CodecDecodeSelf(d)
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2979 := &x.EvictionTime
		yym2980 := z.DecBinary()
		_ = yym2980
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2979) {
		} else if yym2980 {
			z.DecBinaryUnmarshal(yyv2979)
		} else if !yym2980 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2979)
		} else {
			z.DecFallback(yyv2979, false)
		}
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2977++
		if yyhl2977 {
			yyb2977 = yyj2977 > l
		} else {
			yyb2977 = r.CheckBreak()
		}
		if yyb2977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2983 := z.EncBinary()
		_ = yym2983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2984 := !z.EncBinary()
			yy2arr2984 := z.EncBasicHandle().StructToArray
			var yyq2984 [1]bool
			_, _, _ = yysep2984, yyq2984, yy2arr2984
			const yyr2984 bool = false
			yyq2984[0] = x.PodController != nil
			var yynn2984 int
			if yyr2984 || yy2arr2984 {
				r.EncodeArrayStart(1)
			} else {
				yynn2984 = 0
				for _, b := range yyq2984 {
					if b {
						yynn2984++
					}
				}
				r.EncodeMapStart(yynn2984)
				yynn2984 = 0
			}
			if yyr2984 || yy2arr2984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2984[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2984 || yy2arr2984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2986 := z.DecBinary()
	_ = yym2986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2987 := r.ContainerType()
		if yyct2987 == codecSelferValueTypeMap1234 {
			yyl2987 := r.ReadMapStart()
			if yyl2987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2987, d)
			}
		} else if yyct2987 == codecSelferValueTypeArray1234 {
			yyl2987 := r.ReadArrayStart()
			if yyl2987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2988Slc
	var yyhl2988 bool = l >= 0
	for yyj2988 := 0; ; yyj2988++ {
		if yyhl2988 {
			if yyj2988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2988Slc = r.DecodeBytes(yys2988Slc, true, true)
		yys2988 := string(yys2988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2988 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2988)
		} // end switch yys2988
	} // end for yyj2988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2990 int
	var yyb2990 bool
	var yyhl2990 bool = l >= 0
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2990++
		if yyhl2990 {
			yyb2990 = yyj2990 > l
		} else {
			yyb2990 = r.CheckBreak()
		}
		if yyb2990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2992 := z.EncBinary()
		_ = yym2992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2993 := !z.EncBinary()
			yy2arr2993 := z.EncBasicHandle().StructToArray
			var yyq2993 [2]bool
			_, _, _ = yysep2993, yyq2993, yy2arr2993
			const yyr2993 bool = false
			yyq2993[1] = x.SizeBytes != 0
			var yynn2993 int
			if yyr2993 || yy2arr2993 {
				r.EncodeArrayStart(2)
			} else {
				yynn2993 = 1
				for _, b := range yyq2993 {
					if b {
						yynn2993++
					}
				}
				r.EncodeMapStart(yynn2993)
				yynn2993 = 0
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[1] {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3000 := z.DecBinary()
	_ = yym3000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3001 := r.ContainerType()
		if yyct3001 == codecSelferValueTypeMap1234 {
			yyl3001 := r.ReadMapStart()
			if yyl3001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3001, d)
			}
		} else if yyct3001 == codecSelferValueTypeArray1234 {
			yyl3001 := r.ReadArrayStart()
			if yyl3001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3002Slc
	var yyhl3002 bool = l >= 0
	for yyj3002 := 0; ; yyj3002++ {
		if yyhl3002 {
			if yyj3002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3002Slc = r.DecodeBytes(yys3002Slc, true, true)
		yys3002 := string(yys3002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3002 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3003 := &x.Names
				yym3004 := z.DecBinary()
				_ = yym3004
				if false {
				} else {
					z.F.DecSliceStringX(yyv3003, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3002)
		} // end switch yys3002
	} // end for yyj3002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3006 int
	var yyb3006 bool
	var yyhl3006 bool = l >= 0
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3007 := &x.Names
		yym3008 := z.DecBinary()
		_ = yym3008
		if false {
		} else {
			z.F.DecSliceStringX(yyv3007, false, d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3006++
		if yyhl3006 {
			yyb3006 = yyj3006 > l
		} else {
			yyb3006 = r.CheckBreak()
		}
		if yyb3006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3010 := z.EncBinary()
	_ = yym3010
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3011 := z.DecBinary()
	_ = yym3011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3012 := z.EncBinary()
	_ = yym3012
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3013 := z.DecBinary()
	_ = yym3013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3014 := z.EncBinary()
		_ = yym3014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3015 := !z.EncBinary()
			yy2arr3015 := z.EncBasicHandle().StructToArray
			var yyq3015 [6]bool
			_, _, _ = yysep3015, yyq3015, yy2arr3015
			const yyr3015 bool = false
			yyq3015[2] = true
			yyq3015[3] = true
			yyq3015[4] = x.Reason != ""
			yyq3015[5] = x.Message != ""
			var yynn3015 int
			if yyr3015 || yy2arr3015 {
				r.EncodeArrayStart(6)
			} else {
				yynn3015 = 2
				for _, b := range yyq3015 {
					if b {
						yynn3015++
					}
				}
				r.EncodeMapStart(yynn3015)
				yynn3015 = 0
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[2] {
					yy3019 := &x.LastHeartbeatTime
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3019) {
					} else if yym3020 {
						z.EncBinaryMarshal(yy3019)
					} else if !yym3020 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3019)
					} else {
						z.EncFallback(yy3019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3021 := &x.LastHeartbeatTime
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3021) {
					} else if yym3022 {
						z.EncBinaryMarshal(yy3021)
					} else if !yym3022 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3021)
					} else {
						z.EncFallback(yy3021)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[3] {
					yy3024 := &x.LastTransitionTime
					yym3025 := z.EncBinary()
					_ = yym3025
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3024) {
					} else if yym3025 {
						z.EncBinaryMarshal(yy3024)
					} else if !yym3025 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3024)
					} else {
						z.EncFallback(yy3024)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3026 := &x.LastTransitionTime
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3026) {
					} else if yym3027 {
						z.EncBinaryMarshal(yy3026)
					} else if !yym3027 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3026)
					} else {
						z.EncFallback(yy3026)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[4] {
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3015[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[5] {
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3015[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3034 := z.DecBinary()
	_ = yym3034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3035 := r.ContainerType()
		if yyct3035 == codecSelferValueTypeMap1234 {
			yyl3035 := r.ReadMapStart()
			if yyl3035 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3035, d)
			}
		} else if yyct3035 == codecSelferValueTypeArray1234 {
			yyl3035 := r.ReadArrayStart()
			if yyl3035 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3036Slc
	var yyhl3036 bool = l >= 0
	for yyj3036 := 0; ; yyj3036++ {
		if yyhl3036 {
			if yyj3036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3036Slc = r.DecodeBytes(yys3036Slc, true, true)
		yys3036 := string(yys3036Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3036 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3039 := &x.LastHeartbeatTime
				yym3040 := z.DecBinary()
				_ = yym3040
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3039) {
				} else if yym3040 {
					z.DecBinaryUnmarshal(yyv3039)
				} else if !yym3040 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3039)
				} else {
					z.DecFallback(yyv3039, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3041 := &x.LastTransitionTime
				yym3042 := z.DecBinary()
				_ = yym3042
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3041) {
				} else if yym3042 {
					z.DecBinaryUnmarshal(yyv3041)
				} else if !yym3042 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3041)
				} else {
					z.DecFallback(yyv3041, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3036)
		} // end switch yys3036
	} // end for yyj3036
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3045 int
	var yyb3045 bool
	var yyhl3045 bool = l >= 0
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3048 := &x.LastHeartbeatTime
		yym3049 := z.DecBinary()
		_ = yym3049
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3048) {
		} else if yym3049 {
			z.DecBinaryUnmarshal(yyv3048)
		} else if !yym3049 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3048)
		} else {
			z.DecFallback(yyv3048, false)
		}
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3050 := &x.LastTransitionTime
		yym3051 := z.DecBinary()
		_ = yym3051
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3050) {
		} else if yym3051 {
			z.DecBinaryUnmarshal(yyv3050)
		} else if !yym3051 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3050)
		} else {
			z.DecFallback(yyv3050, false)
		}
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3045++
	if yyhl3045 {
		yyb3045 = yyj3045 > l
	} else {
		yyb3045 = r.CheckBreak()
	}
	if yyb3045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3045++
		if yyhl3045 {
			yyb3045 = yyj3045 > l
		} else {
			yyb3045 = r.CheckBreak()
		}
		if yyb3045 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3045-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3054 := z.EncBinary()
	_ = yym3054
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3055 := z.DecBinary()
	_ = yym3055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3056 := z.EncBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3057 := !z.EncBinary()
			yy2arr3057 := z.EncBasicHandle().StructToArray
			var yyq3057 [2]bool
			_, _, _ = yysep3057, yyq3057, yy2arr3057
			const yyr3057 bool = false
			var yynn3057 int
			if yyr3057 || yy2arr3057 {
				r.EncodeArrayStart(2)
			} else {
				yynn3057 = 2
				for _, b := range yyq3057 {
					if b {
						yynn3057++
					}
				}
				r.EncodeMapStart(yynn3057)
				yynn3057 = 0
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3060 := z.EncBinary()
				_ = yym3060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3061 := z.EncBinary()
				_ = yym3061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3062 := z.DecBinary()
	_ = yym3062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3063 := r.ContainerType()
		if yyct3063 == codecSelferValueTypeMap1234 {
			yyl3063 := r.ReadMapStart()
			if yyl3063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3063, d)
			}
		} else if yyct3063 == codecSelferValueTypeArray1234 {
			yyl3063 := r.ReadArrayStart()
			if yyl3063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3064Slc
	var yyhl3064 bool = l >= 0
	for yyj3064 := 0; ; yyj3064++ {
		if yyhl3064 {
			if yyj3064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3064Slc = r.DecodeBytes(yys3064Slc, true, true)
		yys3064 := string(yys3064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3064 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3064)
		} // end switch yys3064
	} // end for yyj3064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3067 int
	var yyb3067 bool
	var yyhl3067 bool = l >= 0
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3067++
		if yyhl3067 {
			yyb3067 = yyj3067 > l
		} else {
			yyb3067 = r.CheckBreak()
		}
		if yyb3067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [1]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			yyq3071[0] = len(x.Capacity) != 0
			var yynn3071 int
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(1)
			} else {
				yynn3071 = 0
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
				yynn3071 = 0
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3073 := z.DecBinary()
	_ = yym3073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3074 := r.ContainerType()
		if yyct3074 == codecSelferValueTypeMap1234 {
			yyl3074 := r.ReadMapStart()
			if yyl3074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3074, d)
			}
		} else if yyct3074 == codecSelferValueTypeArray1234 {
			yyl3074 := r.ReadArrayStart()
			if yyl3074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3075Slc
	var yyhl3075 bool = l >= 0
	for yyj3075 := 0; ; yyj3075++ {
		if yyhl3075 {
			if yyj3075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3075Slc = r.DecodeBytes(yys3075Slc, true, true)
		yys3075 := string(yys3075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3075 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3076 := &x.Capacity
				yyv3076.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3075)
		} // end switch yys3075
	} // end for yyj3075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3078 := &x.Capacity
		yyv3078.CodecDecodeSelf(d)
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3079 := z.EncBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3080 := z.DecBinary()
	_ = yym3080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3082 := z.DecBinary()
	_ = yym3082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3083 := z.EncBinary()
		_ = yym3083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3084 := !z.EncBinary()
			yy2arr3084 := z.EncBasicHandle().StructToArray
			var yyq3084 [5]bool
			_, _, _ = yysep3084, yyq3084, yy2arr3084
			const yyr3084 bool = false
			yyq3084[0] = x.Kind != ""
			yyq3084[1] = x.APIVersion != ""
			yyq3084[2] = true
			yyq3084[3] = true
			yyq3084[4] = true
			var yynn3084 int
			if yyr3084 || yy2arr3084 {
				r.EncodeArrayStart(5)
			} else {
				yynn3084 = 0
				for _, b := range yyq3084 {
					if b {
						yynn3084++
					}
				}
				r.EncodeMapStart(yynn3084)
				yynn3084 = 0
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[0] {
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3084[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[1] {
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3084[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[2] {
					yy3092 := &x.ObjectMeta
					yy3092.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3093 := &x.ObjectMeta
					yy3093.CodecEncodeSelf(e)
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[3] {
					yy3095 := &x.Spec
					yy3095.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3096 := &x.Spec
					yy3096.CodecEncodeSelf(e)
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[4] {
					yy3098 := &x.Status
					yy3098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3084[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3099 := &x.Status
					yy3099.CodecEncodeSelf(e)
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3100 := z.DecBinary()
	_ = yym3100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3101 := r.ContainerType()
		if yyct3101 == codecSelferValueTypeMap1234 {
			yyl3101 := r.ReadMapStart()
			if yyl3101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3101, d)
			}
		} else if yyct3101 == codecSelferValueTypeArray1234 {
			yyl3101 := r.ReadArrayStart()
			if yyl3101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3102Slc
	var yyhl3102 bool = l >= 0
	for yyj3102 := 0; ; yyj3102++ {
		if yyhl3102 {
			if yyj3102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3102Slc = r.DecodeBytes(yys3102Slc, true, true)
		yys3102 := string(yys3102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3105 := &x.ObjectMeta
				yyv3105.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3106 := &x.Spec
				yyv3106.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3107 := &x.Status
				yyv3107.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3102)
		} // end switch yys3102
	} // end for yyj3102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3108 int
	var yyb3108 bool
	var yyhl3108 bool = l >= 0
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3111 := &x.ObjectMeta
		yyv3111.CodecDecodeSelf(d)
	}
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3112 := &x.Spec
		yyv3112.CodecDecodeSelf(d)
	}
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3113 := &x.Status
		yyv3113.CodecDecodeSelf(d)
	}
	for {
		yyj3108++
		if yyhl3108 {
			yyb3108 = yyj3108 > l
		} else {
			yyb3108 = r.CheckBreak()
		}
		if yyb3108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3114 := z.EncBinary()
		_ = yym3114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3115 := !z.EncBinary()
			yy2arr3115 := z.EncBasicHandle().StructToArray
			var yyq3115 [4]bool
			_, _, _ = yysep3115, yyq3115, yy2arr3115
			const yyr3115 bool = false
			yyq3115[0] = x.Kind != ""
			yyq3115[1] = x.APIVersion != ""
			yyq3115[2] = true
			var yynn3115 int
			if yyr3115 || yy2arr3115 {
				r.EncodeArrayStart(4)
			} else {
				yynn3115 = 1
				for _, b := range yyq3115 {
					if b {
						yynn3115++
					}
				}
				r.EncodeMapStart(yynn3115)
				yynn3115 = 0
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3115[0] {
					yym3117 := z.EncBinary()
					_ = yym3117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3115[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3115[1] {
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3115[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3115[2] {
					yy3123 := &x.ListMeta
					yym3124 := z.EncBinary()
					_ = yym3124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3123) {
					} else {
						z.EncFallback(yy3123)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3115[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3125 := &x.ListMeta
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3125) {
					} else {
						z.EncFallback(yy3125)
					}
				}
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3130 := z.DecBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3131 := r.ContainerType()
		if yyct3131 == codecSelferValueTypeMap1234 {
			yyl3131 := r.ReadMapStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3131, d)
			}
		} else if yyct3131 == codecSelferValueTypeArray1234 {
			yyl3131 := r.ReadArrayStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3132Slc
	var yyhl3132 bool = l >= 0
	for yyj3132 := 0; ; yyj3132++ {
		if yyhl3132 {
			if yyj3132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3132Slc = r.DecodeBytes(yys3132Slc, true, true)
		yys3132 := string(yys3132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3132 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3135 := &x.ListMeta
				yym3136 := z.DecBinary()
				_ = yym3136
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3135) {
				} else {
					z.DecFallback(yyv3135, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3137 := &x.Items
				yym3138 := z.DecBinary()
				_ = yym3138
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3137), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3132)
		} // end switch yys3132
	} // end for yyj3132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3139 int
	var yyb3139 bool
	var yyhl3139 bool = l >= 0
	yyj3139++
	if yyhl3139 {
		yyb3139 = yyj3139 > l
	} else {
		yyb3139 = r.CheckBreak()
	}
	if yyb3139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3139++
	if yyhl3139 {
		yyb3139 = yyj3139 > l
	} else {
		yyb3139 = r.CheckBreak()
	}
	if yyb3139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3139++
	if yyhl3139 {
		yyb3139 = yyj3139 > l
	} else {
		yyb3139 = r.CheckBreak()
	}
	if yyb3139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3142 := &x.ListMeta
		yym3143 := z.DecBinary()
		_ = yym3143
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3142) {
		} else {
			z.DecFallback(yyv3142, false)
		}
	}
	yyj3139++
	if yyhl3139 {
		yyb3139 = yyj3139 > l
	} else {
		yyb3139 = r.CheckBreak()
	}
	if yyb3139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3144 := &x.Items
		yym3145 := z.DecBinary()
		_ = yym3145
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3144), d)
		}
	}
	for {
		yyj3139++
		if yyhl3139 {
			yyb3139 = yyj3139 > l
		} else {
			yyb3139 = r.CheckBreak()
		}
		if yyb3139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3146 := z.EncBinary()
		_ = yym3146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3147 := !z.EncBinary()
			yy2arr3147 := z.EncBasicHandle().StructToArray
			var yyq3147 [1]bool
			_, _, _ = yysep3147, yyq3147, yy2arr3147
			const yyr3147 bool = false
			var yynn3147 int
			if yyr3147 || yy2arr3147 {
				r.EncodeArrayStart(1)
			} else {
				yynn3147 = 1
				for _, b := range yyq3147 {
					if b {
						yynn3147++
					}
				}
				r.EncodeMapStart(yynn3147)
				yynn3147 = 0
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3151 := z.DecBinary()
	_ = yym3151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3152 := r.ContainerType()
		if yyct3152 == codecSelferValueTypeMap1234 {
			yyl3152 := r.ReadMapStart()
			if yyl3152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3152, d)
			}
		} else if yyct3152 == codecSelferValueTypeArray1234 {
			yyl3152 := r.ReadArrayStart()
			if yyl3152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3153Slc
	var yyhl3153 bool = l >= 0
	for yyj3153 := 0; ; yyj3153++ {
		if yyhl3153 {
			if yyj3153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3153Slc = r.DecodeBytes(yys3153Slc, true, true)
		yys3153 := string(yys3153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3153 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3154 := &x.Finalizers
				yym3155 := z.DecBinary()
				_ = yym3155
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3154), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3153)
		} // end switch yys3153
	} // end for yyj3153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3156 int
	var yyb3156 bool
	var yyhl3156 bool = l >= 0
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3157 := &x.Finalizers
		yym3158 := z.DecBinary()
		_ = yym3158
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3157), d)
		}
	}
	for {
		yyj3156++
		if yyhl3156 {
			yyb3156 = yyj3156 > l
		} else {
			yyb3156 = r.CheckBreak()
		}
		if yyb3156 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3156-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3159 := z.EncBinary()
	_ = yym3159
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3160 := z.DecBinary()
	_ = yym3160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3161 := z.EncBinary()
		_ = yym3161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3162 := !z.EncBinary()
			yy2arr3162 := z.EncBasicHandle().StructToArray
			var yyq3162 [1]bool
			_, _, _ = yysep3162, yyq3162, yy2arr3162
			const yyr3162 bool = false
			yyq3162[0] = x.Phase != ""
			var yynn3162 int
			if yyr3162 || yy2arr3162 {
				r.EncodeArrayStart(1)
			} else {
				yynn3162 = 0
				for _, b := range yyq3162 {
					if b {
						yynn3162++
					}
				}
				r.EncodeMapStart(yynn3162)
				yynn3162 = 0
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3164 := z.DecBinary()
	_ = yym3164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3165 := r.ContainerType()
		if yyct3165 == codecSelferValueTypeMap1234 {
			yyl3165 := r.ReadMapStart()
			if yyl3165 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3165, d)
			}
		} else if yyct3165 == codecSelferValueTypeArray1234 {
			yyl3165 := r.ReadArrayStart()
			if yyl3165 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3166Slc
	var yyhl3166 bool = l >= 0
	for yyj3166 := 0; ; yyj3166++ {
		if yyhl3166 {
			if yyj3166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3166Slc = r.DecodeBytes(yys3166Slc, true, true)
		yys3166 := string(yys3166Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3166 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3166)
		} // end switch yys3166
	} // end for yyj3166
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3168 int
	var yyb3168 bool
	var yyhl3168 bool = l >= 0
	yyj3168++
	if yyhl3168 {
		yyb3168 = yyj3168 > l
	} else {
		yyb3168 = r.CheckBreak()
	}
	if yyb3168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3168++
		if yyhl3168 {
			yyb3168 = yyj3168 > l
		} else {
			yyb3168 = r.CheckBreak()
		}
		if yyb3168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3170 := z.EncBinary()
	_ = yym3170
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3171 := z.DecBinary()
	_ = yym3171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [5]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			yyq3173[0] = x.Kind != ""
			yyq3173[1] = x.APIVersion != ""
			yyq3173[2] = true
			yyq3173[3] = true
			yyq3173[4] = true
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(5)
			} else {
				yynn3173 = 0
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[0] {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[1] {
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[2] {
					yy3181 := &x.ObjectMeta
					yy3181.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3182 := &x.ObjectMeta
					yy3182.CodecEncodeSelf(e)
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[3] {
					yy3184 := &x.Spec
					yy3184.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3185 := &x.Spec
					yy3185.CodecEncodeSelf(e)
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[4] {
					yy3187 := &x.Status
					yy3187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3188 := &x.Status
					yy3188.CodecEncodeSelf(e)
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3194 := &x.ObjectMeta
				yyv3194.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3195 := &x.Spec
				yyv3195.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3196 := &x.Status
				yyv3196.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3197 int
	var yyb3197 bool
	var yyhl3197 bool = l >= 0
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3200 := &x.ObjectMeta
		yyv3200.CodecDecodeSelf(d)
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3201 := &x.Spec
		yyv3201.CodecDecodeSelf(d)
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3202 := &x.Status
		yyv3202.CodecDecodeSelf(d)
	}
	for {
		yyj3197++
		if yyhl3197 {
			yyb3197 = yyj3197 > l
		} else {
			yyb3197 = r.CheckBreak()
		}
		if yyb3197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3203 := z.EncBinary()
		_ = yym3203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3204 := !z.EncBinary()
			yy2arr3204 := z.EncBasicHandle().StructToArray
			var yyq3204 [4]bool
			_, _, _ = yysep3204, yyq3204, yy2arr3204
			const yyr3204 bool = false
			yyq3204[0] = x.Kind != ""
			yyq3204[1] = x.APIVersion != ""
			yyq3204[2] = true
			var yynn3204 int
			if yyr3204 || yy2arr3204 {
				r.EncodeArrayStart(4)
			} else {
				yynn3204 = 1
				for _, b := range yyq3204 {
					if b {
						yynn3204++
					}
				}
				r.EncodeMapStart(yynn3204)
				yynn3204 = 0
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[0] {
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[1] {
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[2] {
					yy3212 := &x.ListMeta
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3212) {
					} else {
						z.EncFallback(yy3212)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3214 := &x.ListMeta
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3214) {
					} else {
						z.EncFallback(yy3214)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3219 := z.DecBinary()
	_ = yym3219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3220 := r.ContainerType()
		if yyct3220 == codecSelferValueTypeMap1234 {
			yyl3220 := r.ReadMapStart()
			if yyl3220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3220, d)
			}
		} else if yyct3220 == codecSelferValueTypeArray1234 {
			yyl3220 := r.ReadArrayStart()
			if yyl3220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3221Slc
	var yyhl3221 bool = l >= 0
	for yyj3221 := 0; ; yyj3221++ {
		if yyhl3221 {
			if yyj3221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3221Slc = r.DecodeBytes(yys3221Slc, true, true)
		yys3221 := string(yys3221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3221 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3224 := &x.ListMeta
				yym3225 := z.DecBinary()
				_ = yym3225
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3224) {
				} else {
					z.DecFallback(yyv3224, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3226 := &x.Items
				yym3227 := z.DecBinary()
				_ = yym3227
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3226), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3221)
		} // end switch yys3221
	} // end for yyj3221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3228 int
	var yyb3228 bool
	var yyhl3228 bool = l >= 0
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3231 := &x.ListMeta
		yym3232 := z.DecBinary()
		_ = yym3232
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3231) {
		} else {
			z.DecFallback(yyv3231, false)
		}
	}
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3233 := &x.Items
		yym3234 := z.DecBinary()
		_ = yym3234
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3233), d)
		}
	}
	for {
		yyj3228++
		if yyhl3228 {
			yyb3228 = yyj3228 > l
		} else {
			yyb3228 = r.CheckBreak()
		}
		if yyb3228 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3228-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3235 := z.EncBinary()
		_ = yym3235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3236 := !z.EncBinary()
			yy2arr3236 := z.EncBasicHandle().StructToArray
			var yyq3236 [4]bool
			_, _, _ = yysep3236, yyq3236, yy2arr3236
			const yyr3236 bool = false
			yyq3236[0] = x.Kind != ""
			yyq3236[1] = x.APIVersion != ""
			yyq3236[2] = true
			var yynn3236 int
			if yyr3236 || yy2arr3236 {
				r.EncodeArrayStart(4)
			} else {
				yynn3236 = 1
				for _, b := range yyq3236 {
					if b {
						yynn3236++
					}
				}
				r.EncodeMapStart(yynn3236)
				yynn3236 = 0
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3236[0] {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3236[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3236[1] {
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3236[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3236[2] {
					yy3244 := &x.ObjectMeta
					yy3244.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3236[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3245 := &x.ObjectMeta
					yy3245.CodecEncodeSelf(e)
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3247 := &x.Target
				yy3247.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3248 := &x.Target
				yy3248.CodecEncodeSelf(e)
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3249 := z.DecBinary()
	_ = yym3249
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3250 := r.ContainerType()
		if yyct3250 == codecSelferValueTypeMap1234 {
			yyl3250 := r.ReadMapStart()
			if yyl3250 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3250, d)
			}
		} else if yyct3250 == codecSelferValueTypeArray1234 {
			yyl3250 := r.ReadArrayStart()
			if yyl3250 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3250, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3251Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3251Slc
	var yyhl3251 bool = l >= 0
	for yyj3251 := 0; ; yyj3251++ {
		if yyhl3251 {
			if yyj3251 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3251Slc = r.DecodeBytes(yys3251Slc, true, true)
		yys3251 := string(yys3251Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3251 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3254 := &x.ObjectMeta
				yyv3254.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3255 := &x.Target
				yyv3255.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3251)
		} // end switch yys3251
	} // end for yyj3251
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3256 int
	var yyb3256 bool
	var yyhl3256 bool = l >= 0
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3259 := &x.ObjectMeta
		yyv3259.CodecDecodeSelf(d)
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3260 := &x.Target
		yyv3260.CodecDecodeSelf(d)
	}
	for {
		yyj3256++
		if yyhl3256 {
			yyb3256 = yyj3256 > l
		} else {
			yyb3256 = r.CheckBreak()
		}
		if yyb3256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3261 := z.EncBinary()
		_ = yym3261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3262 := !z.EncBinary()
			yy2arr3262 := z.EncBasicHandle().StructToArray
			var yyq3262 [1]bool
			_, _, _ = yysep3262, yyq3262, yy2arr3262
			const yyr3262 bool = false
			yyq3262[0] = x.UID != nil
			var yynn3262 int
			if yyr3262 || yy2arr3262 {
				r.EncodeArrayStart(1)
			} else {
				yynn3262 = 0
				for _, b := range yyq3262 {
					if b {
						yynn3262++
					}
				}
				r.EncodeMapStart(yynn3262)
				yynn3262 = 0
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3264 := *x.UID
						yym3265 := z.EncBinary()
						_ = yym3265
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3264) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3264))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3266 := *x.UID
						yym3267 := z.EncBinary()
						_ = yym3267
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3266) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3266))
						}
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3268 := z.DecBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3269 := r.ContainerType()
		if yyct3269 == codecSelferValueTypeMap1234 {
			yyl3269 := r.ReadMapStart()
			if yyl3269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3269, d)
			}
		} else if yyct3269 == codecSelferValueTypeArray1234 {
			yyl3269 := r.ReadArrayStart()
			if yyl3269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3270Slc
	var yyhl3270 bool = l >= 0
	for yyj3270 := 0; ; yyj3270++ {
		if yyhl3270 {
			if yyj3270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3270Slc = r.DecodeBytes(yys3270Slc, true, true)
		yys3270 := string(yys3270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3270 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3272 := z.DecBinary()
				_ = yym3272
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3270)
		} // end switch yys3270
	} // end for yyj3270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3273 int
	var yyb3273 bool
	var yyhl3273 bool = l >= 0
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3275 := z.DecBinary()
		_ = yym3275
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3273++
		if yyhl3273 {
			yyb3273 = yyj3273 > l
		} else {
			yyb3273 = r.CheckBreak()
		}
		if yyb3273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3276 := z.EncBinary()
		_ = yym3276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3277 := !z.EncBinary()
			yy2arr3277 := z.EncBasicHandle().StructToArray
			var yyq3277 [5]bool
			_, _, _ = yysep3277, yyq3277, yy2arr3277
			const yyr3277 bool = false
			yyq3277[0] = x.Kind != ""
			yyq3277[1] = x.APIVersion != ""
			yyq3277[2] = x.GracePeriodSeconds != nil
			yyq3277[3] = x.Preconditions != nil
			yyq3277[4] = x.OrphanDependents != nil
			var yynn3277 int
			if yyr3277 || yy2arr3277 {
				r.EncodeArrayStart(5)
			} else {
				yynn3277 = 0
				for _, b := range yyq3277 {
					if b {
						yynn3277++
					}
				}
				r.EncodeMapStart(yynn3277)
				yynn3277 = 0
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[0] {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[1] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3277[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3285 := *x.GracePeriodSeconds
						yym3286 := z.EncBinary()
						_ = yym3286
						if false {
						} else {
							r.EncodeInt(int64(yy3285))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3277[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3287 := *x.GracePeriodSeconds
						yym3288 := z.EncBinary()
						_ = yym3288
						if false {
						} else {
							r.EncodeInt(int64(yy3287))
						}
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3277[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3291 := *x.OrphanDependents
						yym3292 := z.EncBinary()
						_ = yym3292
						if false {
						} else {
							r.EncodeBool(bool(yy3291))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3277[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3293 := *x.OrphanDependents
						yym3294 := z.EncBinary()
						_ = yym3294
						if false {
						} else {
							r.EncodeBool(bool(yy3293))
						}
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3295 := z.DecBinary()
	_ = yym3295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3296 := r.ContainerType()
		if yyct3296 == codecSelferValueTypeMap1234 {
			yyl3296 := r.ReadMapStart()
			if yyl3296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3296, d)
			}
		} else if yyct3296 == codecSelferValueTypeArray1234 {
			yyl3296 := r.ReadArrayStart()
			if yyl3296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3297Slc
	var yyhl3297 bool = l >= 0
	for yyj3297 := 0; ; yyj3297++ {
		if yyhl3297 {
			if yyj3297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3297Slc = r.DecodeBytes(yys3297Slc, true, true)
		yys3297 := string(yys3297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3297 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3301 := z.DecBinary()
				_ = yym3301
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3304 := z.DecBinary()
				_ = yym3304
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3297)
		} // end switch yys3297
	} // end for yyj3297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3305 int
	var yyb3305 bool
	var yyhl3305 bool = l >= 0
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3309 := z.DecBinary()
		_ = yym3309
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3312 := z.DecBinary()
		_ = yym3312
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3305++
		if yyhl3305 {
			yyb3305 = yyj3305 > l
		} else {
			yyb3305 = r.CheckBreak()
		}
		if yyb3305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3313 := z.EncBinary()
		_ = yym3313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3314 := !z.EncBinary()
			yy2arr3314 := z.EncBasicHandle().StructToArray
			var yyq3314 [4]bool
			_, _, _ = yysep3314, yyq3314, yy2arr3314
			const yyr3314 bool = false
			yyq3314[0] = x.Kind != ""
			yyq3314[1] = x.APIVersion != ""
			var yynn3314 int
			if yyr3314 || yy2arr3314 {
				r.EncodeArrayStart(4)
			} else {
				yynn3314 = 2
				for _, b := range yyq3314 {
					if b {
						yynn3314++
					}
				}
				r.EncodeMapStart(yynn3314)
				yynn3314 = 0
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3314[0] {
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3314[1] {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3314[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3322 := z.EncBinary()
				_ = yym3322
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3323 := z.EncBinary()
				_ = yym3323
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3325 := z.EncBinary()
				_ = yym3325
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3326 := z.EncBinary()
				_ = yym3326
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3314 || yy2arr3314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3327 := z.DecBinary()
	_ = yym3327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3328 := r.ContainerType()
		if yyct3328 == codecSelferValueTypeMap1234 {
			yyl3328 := r.ReadMapStart()
			if yyl3328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3328, d)
			}
		} else if yyct3328 == codecSelferValueTypeArray1234 {
			yyl3328 := r.ReadArrayStart()
			if yyl3328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3329Slc
	var yyhl3329 bool = l >= 0
	for yyj3329 := 0; ; yyj3329++ {
		if yyhl3329 {
			if yyj3329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3329Slc = r.DecodeBytes(yys3329Slc, true, true)
		yys3329 := string(yys3329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3329)
		} // end switch yys3329
	} // end for yyj3329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3334 int
	var yyb3334 bool
	var yyhl3334 bool = l >= 0
	yyj3334++
	if yyhl3334 {
		yyb3334 = yyj3334 > l
	} else {
		yyb3334 = r.CheckBreak()
	}
	if yyb3334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3334++
	if yyhl3334 {
		yyb3334 = yyj3334 > l
	} else {
		yyb3334 = r.CheckBreak()
	}
	if yyb3334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3334++
	if yyhl3334 {
		yyb3334 = yyj3334 > l
	} else {
		yyb3334 = r.CheckBreak()
	}
	if yyb3334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3334++
	if yyhl3334 {
		yyb3334 = yyj3334 > l
	} else {
		yyb3334 = r.CheckBreak()
	}
	if yyb3334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3334++
		if yyhl3334 {
			yyb3334 = yyj3334 > l
		} else {
			yyb3334 = r.CheckBreak()
		}
		if yyb3334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3339 := z.EncBinary()
		_ = yym3339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3340 := !z.EncBinary()
			yy2arr3340 := z.EncBasicHandle().StructToArray
			var yyq3340 [7]bool
			_, _, _ = yysep3340, yyq3340, yy2arr3340
			const yyr3340 bool = false
			yyq3340[0] = x.Kind != ""
			yyq3340[1] = x.APIVersion != ""
			var yynn3340 int
			if yyr3340 || yy2arr3340 {
				r.EncodeArrayStart(7)
			} else {
				yynn3340 = 5
				for _, b := range yyq3340 {
					if b {
						yynn3340++
					}
				}
				r.EncodeMapStart(yynn3340)
				yynn3340 = 0
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[0] {
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3340[1] {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3340[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3354 := z.EncBinary()
				_ = yym3354
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3355 := z.EncBinary()
				_ = yym3355
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3357 := z.EncBinary()
				_ = yym3357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3358 := z.EncBinary()
				_ = yym3358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3360 := *x.TimeoutSeconds
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeInt(int64(yy3360))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3362 := *x.TimeoutSeconds
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeInt(int64(yy3362))
					}
				}
			}
			if yyr3340 || yy2arr3340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3364 := z.DecBinary()
	_ = yym3364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3365 := r.ContainerType()
		if yyct3365 == codecSelferValueTypeMap1234 {
			yyl3365 := r.ReadMapStart()
			if yyl3365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3365, d)
			}
		} else if yyct3365 == codecSelferValueTypeArray1234 {
			yyl3365 := r.ReadArrayStart()
			if yyl3365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3366Slc
	var yyhl3366 bool = l >= 0
	for yyj3366 := 0; ; yyj3366++ {
		if yyhl3366 {
			if yyj3366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3366Slc = r.DecodeBytes(yys3366Slc, true, true)
		yys3366 := string(yys3366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3366 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3369 := &x.LabelSelector
				yym3370 := z.DecBinary()
				_ = yym3370
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3369) {
				} else {
					z.DecFallback(yyv3369, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3371 := &x.FieldSelector
				yym3372 := z.DecBinary()
				_ = yym3372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3371) {
				} else {
					z.DecFallback(yyv3371, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3376 := z.DecBinary()
				_ = yym3376
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3366)
		} // end switch yys3366
	} // end for yyj3366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3377 int
	var yyb3377 bool
	var yyhl3377 bool = l >= 0
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3380 := &x.LabelSelector
		yym3381 := z.DecBinary()
		_ = yym3381
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3380) {
		} else {
			z.DecFallback(yyv3380, true)
		}
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3382 := &x.FieldSelector
		yym3383 := z.DecBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3382) {
		} else {
			z.DecFallback(yyv3382, true)
		}
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3377++
	if yyhl3377 {
		yyb3377 = yyj3377 > l
	} else {
		yyb3377 = r.CheckBreak()
	}
	if yyb3377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3387 := z.DecBinary()
		_ = yym3387
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3377++
		if yyhl3377 {
			yyb3377 = yyj3377 > l
		} else {
			yyb3377 = r.CheckBreak()
		}
		if yyb3377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3388 := z.EncBinary()
		_ = yym3388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3389 := !z.EncBinary()
			yy2arr3389 := z.EncBasicHandle().StructToArray
			var yyq3389 [10]bool
			_, _, _ = yysep3389, yyq3389, yy2arr3389
			const yyr3389 bool = false
			yyq3389[0] = x.Kind != ""
			yyq3389[1] = x.APIVersion != ""
			var yynn3389 int
			if yyr3389 || yy2arr3389 {
				r.EncodeArrayStart(10)
			} else {
				yynn3389 = 8
				for _, b := range yyq3389 {
					if b {
						yynn3389++
					}
				}
				r.EncodeMapStart(yynn3389)
				yynn3389 = 0
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3389[0] {
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3389[1] {
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3397 := z.EncBinary()
				_ = yym3397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3398 := z.EncBinary()
				_ = yym3398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3400 := z.EncBinary()
				_ = yym3400
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3401 := z.EncBinary()
				_ = yym3401
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3403 := z.EncBinary()
				_ = yym3403
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3404 := z.EncBinary()
				_ = yym3404
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3406 := *x.SinceSeconds
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else {
						r.EncodeInt(int64(yy3406))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3408 := *x.SinceSeconds
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeInt(int64(yy3408))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3411 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3411 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3412 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3412 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3414 := z.EncBinary()
				_ = yym3414
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3415 := z.EncBinary()
				_ = yym3415
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3417 := *x.TailLines
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeInt(int64(yy3417))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3419 := *x.TailLines
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeInt(int64(yy3419))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3422 := *x.LimitBytes
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeInt(int64(yy3422))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3424 := *x.LimitBytes
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeInt(int64(yy3424))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3426 := z.DecBinary()
	_ = yym3426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3427 := r.ContainerType()
		if yyct3427 == codecSelferValueTypeMap1234 {
			yyl3427 := r.ReadMapStart()
			if yyl3427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3427, d)
			}
		} else if yyct3427 == codecSelferValueTypeArray1234 {
			yyl3427 := r.ReadArrayStart()
			if yyl3427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3428Slc
	var yyhl3428 bool = l >= 0
	for yyj3428 := 0; ; yyj3428++ {
		if yyhl3428 {
			if yyj3428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3428Slc = r.DecodeBytes(yys3428Slc, true, true)
		yys3428 := string(yys3428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3428 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3435 := z.DecBinary()
				_ = yym3435
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3437 := z.DecBinary()
				_ = yym3437
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3437 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3437 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3440 := z.DecBinary()
				_ = yym3440
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3442 := z.DecBinary()
				_ = yym3442
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3428)
		} // end switch yys3428
	} // end for yyj3428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3443 int
	var yyb3443 bool
	var yyhl3443 bool = l >= 0
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3450 := z.DecBinary()
		_ = yym3450
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3452 := z.DecBinary()
		_ = yym3452
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3452 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3452 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3455 := z.DecBinary()
		_ = yym3455
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3457 := z.DecBinary()
		_ = yym3457
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3443++
		if yyhl3443 {
			yyb3443 = yyj3443 > l
		} else {
			yyb3443 = r.CheckBreak()
		}
		if yyb3443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3458 := z.EncBinary()
		_ = yym3458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3459 := !z.EncBinary()
			yy2arr3459 := z.EncBasicHandle().StructToArray
			var yyq3459 [7]bool
			_, _, _ = yysep3459, yyq3459, yy2arr3459
			const yyr3459 bool = false
			yyq3459[0] = x.Kind != ""
			yyq3459[1] = x.APIVersion != ""
			yyq3459[2] = x.Stdin != false
			yyq3459[3] = x.Stdout != false
			yyq3459[4] = x.Stderr != false
			yyq3459[5] = x.TTY != false
			yyq3459[6] = x.Container != ""
			var yynn3459 int
			if yyr3459 || yy2arr3459 {
				r.EncodeArrayStart(7)
			} else {
				yynn3459 = 0
				for _, b := range yyq3459 {
					if b {
						yynn3459++
					}
				}
				r.EncodeMapStart(yynn3459)
				yynn3459 = 0
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[0] {
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3459[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[1] {
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3459[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3465 := z.EncBinary()
					_ = yym3465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[2] {
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[3] {
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3459[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[4] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3459[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[5] {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3459[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3459[6] {
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3459[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3459 || yy2arr3459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3481 := z.DecBinary()
	_ = yym3481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3482 := r.ContainerType()
		if yyct3482 == codecSelferValueTypeMap1234 {
			yyl3482 := r.ReadMapStart()
			if yyl3482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3482, d)
			}
		} else if yyct3482 == codecSelferValueTypeArray1234 {
			yyl3482 := r.ReadArrayStart()
			if yyl3482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3483Slc
	var yyhl3483 bool = l >= 0
	for yyj3483 := 0; ; yyj3483++ {
		if yyhl3483 {
			if yyj3483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3483Slc = r.DecodeBytes(yys3483Slc, true, true)
		yys3483 := string(yys3483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3483 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3483)
		} // end switch yys3483
	} // end for yyj3483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3491 int
	var yyb3491 bool
	var yyhl3491 bool = l >= 0
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3491++
	if yyhl3491 {
		yyb3491 = yyj3491 > l
	} else {
		yyb3491 = r.CheckBreak()
	}
	if yyb3491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3491++
		if yyhl3491 {
			yyb3491 = yyj3491 > l
		} else {
			yyb3491 = r.CheckBreak()
		}
		if yyb3491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3499 := z.EncBinary()
		_ = yym3499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3500 := !z.EncBinary()
			yy2arr3500 := z.EncBasicHandle().StructToArray
			var yyq3500 [8]bool
			_, _, _ = yysep3500, yyq3500, yy2arr3500
			const yyr3500 bool = false
			yyq3500[0] = x.Kind != ""
			yyq3500[1] = x.APIVersion != ""
			var yynn3500 int
			if yyr3500 || yy2arr3500 {
				r.EncodeArrayStart(8)
			} else {
				yynn3500 = 6
				for _, b := range yyq3500 {
					if b {
						yynn3500++
					}
				}
				r.EncodeMapStart(yynn3500)
				yynn3500 = 0
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3500[0] {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3500[1] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3508 := z.EncBinary()
				_ = yym3508
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3509 := z.EncBinary()
				_ = yym3509
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3511 := z.EncBinary()
				_ = yym3511
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3512 := z.EncBinary()
				_ = yym3512
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3514 := z.EncBinary()
				_ = yym3514
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3515 := z.EncBinary()
				_ = yym3515
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3517 := z.EncBinary()
				_ = yym3517
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3518 := z.EncBinary()
				_ = yym3518
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3520 := z.EncBinary()
				_ = yym3520
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3521 := z.EncBinary()
				_ = yym3521
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3500 || yy2arr3500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3525 := z.DecBinary()
	_ = yym3525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3526 := r.ContainerType()
		if yyct3526 == codecSelferValueTypeMap1234 {
			yyl3526 := r.ReadMapStart()
			if yyl3526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3526, d)
			}
		} else if yyct3526 == codecSelferValueTypeArray1234 {
			yyl3526 := r.ReadArrayStart()
			if yyl3526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3527Slc
	var yyhl3527 bool = l >= 0
	for yyj3527 := 0; ; yyj3527++ {
		if yyhl3527 {
			if yyj3527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3527Slc = r.DecodeBytes(yys3527Slc, true, true)
		yys3527 := string(yys3527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3527 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3535 := &x.Command
				yym3536 := z.DecBinary()
				_ = yym3536
				if false {
				} else {
					z.F.DecSliceStringX(yyv3535, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3527)
		} // end switch yys3527
	} // end for yyj3527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3537 int
	var yyb3537 bool
	var yyhl3537 bool = l >= 0
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3545 := &x.Command
		yym3546 := z.DecBinary()
		_ = yym3546
		if false {
		} else {
			z.F.DecSliceStringX(yyv3545, false, d)
		}
	}
	for {
		yyj3537++
		if yyhl3537 {
			yyb3537 = yyj3537 > l
		} else {
			yyb3537 = r.CheckBreak()
		}
		if yyb3537 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3537-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3547 := z.EncBinary()
		_ = yym3547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3548 := !z.EncBinary()
			yy2arr3548 := z.EncBasicHandle().StructToArray
			var yyq3548 [3]bool
			_, _, _ = yysep3548, yyq3548, yy2arr3548
			const yyr3548 bool = false
			yyq3548[0] = x.Kind != ""
			yyq3548[1] = x.APIVersion != ""
			var yynn3548 int
			if yyr3548 || yy2arr3548 {
				r.EncodeArrayStart(3)
			} else {
				yynn3548 = 1
				for _, b := range yyq3548 {
					if b {
						yynn3548++
					}
				}
				r.EncodeMapStart(yynn3548)
				yynn3548 = 0
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3548[0] {
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3548[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3551 := z.EncBinary()
					_ = yym3551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3548[1] {
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3548[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3554 := z.EncBinary()
					_ = yym3554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3556 := z.EncBinary()
				_ = yym3556
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3557 := z.EncBinary()
				_ = yym3557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3548 || yy2arr3548 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3558 := z.DecBinary()
	_ = yym3558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3559 := r.ContainerType()
		if yyct3559 == codecSelferValueTypeMap1234 {
			yyl3559 := r.ReadMapStart()
			if yyl3559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3559, d)
			}
		} else if yyct3559 == codecSelferValueTypeArray1234 {
			yyl3559 := r.ReadArrayStart()
			if yyl3559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3560Slc
	var yyhl3560 bool = l >= 0
	for yyj3560 := 0; ; yyj3560++ {
		if yyhl3560 {
			if yyj3560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3560Slc = r.DecodeBytes(yys3560Slc, true, true)
		yys3560 := string(yys3560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3560 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3560)
		} // end switch yys3560
	} // end for yyj3560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3564 int
	var yyb3564 bool
	var yyhl3564 bool = l >= 0
	yyj3564++
	if yyhl3564 {
		yyb3564 = yyj3564 > l
	} else {
		yyb3564 = r.CheckBreak()
	}
	if yyb3564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3564++
	if yyhl3564 {
		yyb3564 = yyj3564 > l
	} else {
		yyb3564 = r.CheckBreak()
	}
	if yyb3564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3564++
	if yyhl3564 {
		yyb3564 = yyj3564 > l
	} else {
		yyb3564 = r.CheckBreak()
	}
	if yyb3564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3564++
		if yyhl3564 {
			yyb3564 = yyj3564 > l
		} else {
			yyb3564 = r.CheckBreak()
		}
		if yyb3564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3568 := z.EncBinary()
		_ = yym3568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3569 := !z.EncBinary()
			yy2arr3569 := z.EncBasicHandle().StructToArray
			var yyq3569 [3]bool
			_, _, _ = yysep3569, yyq3569, yy2arr3569
			const yyr3569 bool = false
			yyq3569[0] = x.Kind != ""
			yyq3569[1] = x.APIVersion != ""
			var yynn3569 int
			if yyr3569 || yy2arr3569 {
				r.EncodeArrayStart(3)
			} else {
				yynn3569 = 1
				for _, b := range yyq3569 {
					if b {
						yynn3569++
					}
				}
				r.EncodeMapStart(yynn3569)
				yynn3569 = 0
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[0] {
					yym3571 := z.EncBinary()
					_ = yym3571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3569[1] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3569[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3577 := z.EncBinary()
				_ = yym3577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3578 := z.EncBinary()
				_ = yym3578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3569 || yy2arr3569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3579 := z.DecBinary()
	_ = yym3579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3580 := r.ContainerType()
		if yyct3580 == codecSelferValueTypeMap1234 {
			yyl3580 := r.ReadMapStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3580, d)
			}
		} else if yyct3580 == codecSelferValueTypeArray1234 {
			yyl3580 := r.ReadArrayStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3581Slc
	var yyhl3581 bool = l >= 0
	for yyj3581 := 0; ; yyj3581++ {
		if yyhl3581 {
			if yyj3581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3581Slc = r.DecodeBytes(yys3581Slc, true, true)
		yys3581 := string(yys3581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3581)
		} // end switch yys3581
	} // end for yyj3581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3585 int
	var yyb3585 bool
	var yyhl3585 bool = l >= 0
	yyj3585++
	if yyhl3585 {
		yyb3585 = yyj3585 > l
	} else {
		yyb3585 = r.CheckBreak()
	}
	if yyb3585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3585++
	if yyhl3585 {
		yyb3585 = yyj3585 > l
	} else {
		yyb3585 = r.CheckBreak()
	}
	if yyb3585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3585++
	if yyhl3585 {
		yyb3585 = yyj3585 > l
	} else {
		yyb3585 = r.CheckBreak()
	}
	if yyb3585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3585++
		if yyhl3585 {
			yyb3585 = yyj3585 > l
		} else {
			yyb3585 = r.CheckBreak()
		}
		if yyb3585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3589 := z.EncBinary()
		_ = yym3589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3590 := !z.EncBinary()
			yy2arr3590 := z.EncBasicHandle().StructToArray
			var yyq3590 [3]bool
			_, _, _ = yysep3590, yyq3590, yy2arr3590
			const yyr3590 bool = false
			yyq3590[0] = x.Kind != ""
			yyq3590[1] = x.APIVersion != ""
			var yynn3590 int
			if yyr3590 || yy2arr3590 {
				r.EncodeArrayStart(3)
			} else {
				yynn3590 = 1
				for _, b := range yyq3590 {
					if b {
						yynn3590++
					}
				}
				r.EncodeMapStart(yynn3590)
				yynn3590 = 0
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3590[0] {
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3590[1] {
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3590[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3598 := z.EncBinary()
				_ = yym3598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3600 := z.DecBinary()
	_ = yym3600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3601 := r.ContainerType()
		if yyct3601 == codecSelferValueTypeMap1234 {
			yyl3601 := r.ReadMapStart()
			if yyl3601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3601, d)
			}
		} else if yyct3601 == codecSelferValueTypeArray1234 {
			yyl3601 := r.ReadArrayStart()
			if yyl3601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3602Slc
	var yyhl3602 bool = l >= 0
	for yyj3602 := 0; ; yyj3602++ {
		if yyhl3602 {
			if yyj3602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3602Slc = r.DecodeBytes(yys3602Slc, true, true)
		yys3602 := string(yys3602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3602 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3602)
		} // end switch yys3602
	} // end for yyj3602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3606 int
	var yyb3606 bool
	var yyhl3606 bool = l >= 0
	yyj3606++
	if yyhl3606 {
		yyb3606 = yyj3606 > l
	} else {
		yyb3606 = r.CheckBreak()
	}
	if yyb3606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3606++
	if yyhl3606 {
		yyb3606 = yyj3606 > l
	} else {
		yyb3606 = r.CheckBreak()
	}
	if yyb3606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3606++
	if yyhl3606 {
		yyb3606 = yyj3606 > l
	} else {
		yyb3606 = r.CheckBreak()
	}
	if yyb3606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3606++
		if yyhl3606 {
			yyb3606 = yyj3606 > l
		} else {
			yyb3606 = r.CheckBreak()
		}
		if yyb3606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3610 := z.EncBinary()
		_ = yym3610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3611 := !z.EncBinary()
			yy2arr3611 := z.EncBasicHandle().StructToArray
			var yyq3611 [5]bool
			_, _, _ = yysep3611, yyq3611, yy2arr3611
			const yyr3611 bool = false
			yyq3611[4] = x.Controller != nil
			var yynn3611 int
			if yyr3611 || yy2arr3611 {
				r.EncodeArrayStart(5)
			} else {
				yynn3611 = 4
				for _, b := range yyq3611 {
					if b {
						yynn3611++
					}
				}
				r.EncodeMapStart(yynn3611)
				yynn3611 = 0
			}
			if yyr3611 || yy2arr3611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3613 := z.EncBinary()
				_ = yym3613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3614 := z.EncBinary()
				_ = yym3614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3611 || yy2arr3611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3616 := z.EncBinary()
				_ = yym3616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3617 := z.EncBinary()
				_ = yym3617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3611 || yy2arr3611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3619 := z.EncBinary()
				_ = yym3619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3620 := z.EncBinary()
				_ = yym3620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3611 || yy2arr3611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3622 := z.EncBinary()
				_ = yym3622
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3623 := z.EncBinary()
				_ = yym3623
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3611 || yy2arr3611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3611[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3625 := *x.Controller
						yym3626 := z.EncBinary()
						_ = yym3626
						if false {
						} else {
							r.EncodeBool(bool(yy3625))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3611[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3627 := *x.Controller
						yym3628 := z.EncBinary()
						_ = yym3628
						if false {
						} else {
							r.EncodeBool(bool(yy3627))
						}
					}
				}
			}
			if yyr3611 || yy2arr3611 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3629 := z.DecBinary()
	_ = yym3629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3630 := r.ContainerType()
		if yyct3630 == codecSelferValueTypeMap1234 {
			yyl3630 := r.ReadMapStart()
			if yyl3630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3630, d)
			}
		} else if yyct3630 == codecSelferValueTypeArray1234 {
			yyl3630 := r.ReadArrayStart()
			if yyl3630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3631Slc
	var yyhl3631 bool = l >= 0
	for yyj3631 := 0; ; yyj3631++ {
		if yyhl3631 {
			if yyj3631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3631Slc = r.DecodeBytes(yys3631Slc, true, true)
		yys3631 := string(yys3631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3631 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3637 := z.DecBinary()
				_ = yym3637
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3631)
		} // end switch yys3631
	} // end for yyj3631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3638 int
	var yyb3638 bool
	var yyhl3638 bool = l >= 0
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3638++
	if yyhl3638 {
		yyb3638 = yyj3638 > l
	} else {
		yyb3638 = r.CheckBreak()
	}
	if yyb3638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3644 := z.DecBinary()
		_ = yym3644
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3638++
		if yyhl3638 {
			yyb3638 = yyj3638 > l
		} else {
			yyb3638 = r.CheckBreak()
		}
		if yyb3638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3645 := z.EncBinary()
		_ = yym3645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3646 := !z.EncBinary()
			yy2arr3646 := z.EncBasicHandle().StructToArray
			var yyq3646 [7]bool
			_, _, _ = yysep3646, yyq3646, yy2arr3646
			const yyr3646 bool = false
			yyq3646[0] = x.Kind != ""
			yyq3646[1] = x.Namespace != ""
			yyq3646[2] = x.Name != ""
			yyq3646[3] = x.UID != ""
			yyq3646[4] = x.APIVersion != ""
			yyq3646[5] = x.ResourceVersion != ""
			yyq3646[6] = x.FieldPath != ""
			var yynn3646 int
			if yyr3646 || yy2arr3646 {
				r.EncodeArrayStart(7)
			} else {
				yynn3646 = 0
				for _, b := range yyq3646 {
					if b {
						yynn3646++
					}
				}
				r.EncodeMapStart(yynn3646)
				yynn3646 = 0
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[0] {
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[1] {
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[2] {
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[3] {
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3658 := z.EncBinary()
					_ = yym3658
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[4] {
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[5] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3646[6] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3646[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3646 || yy2arr3646 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3668 := z.DecBinary()
	_ = yym3668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3669 := r.ContainerType()
		if yyct3669 == codecSelferValueTypeMap1234 {
			yyl3669 := r.ReadMapStart()
			if yyl3669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3669, d)
			}
		} else if yyct3669 == codecSelferValueTypeArray1234 {
			yyl3669 := r.ReadArrayStart()
			if yyl3669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3670Slc
	var yyhl3670 bool = l >= 0
	for yyj3670 := 0; ; yyj3670++ {
		if yyhl3670 {
			if yyj3670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3670Slc = r.DecodeBytes(yys3670Slc, true, true)
		yys3670 := string(yys3670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3670 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3670)
		} // end switch yys3670
	} // end for yyj3670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3678 int
	var yyb3678 bool
	var yyhl3678 bool = l >= 0
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3678++
	if yyhl3678 {
		yyb3678 = yyj3678 > l
	} else {
		yyb3678 = r.CheckBreak()
	}
	if yyb3678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3678++
		if yyhl3678 {
			yyb3678 = yyj3678 > l
		} else {
			yyb3678 = r.CheckBreak()
		}
		if yyb3678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3686 := z.EncBinary()
		_ = yym3686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3687 := !z.EncBinary()
			yy2arr3687 := z.EncBasicHandle().StructToArray
			var yyq3687 [1]bool
			_, _, _ = yysep3687, yyq3687, yy2arr3687
			const yyr3687 bool = false
			var yynn3687 int
			if yyr3687 || yy2arr3687 {
				r.EncodeArrayStart(1)
			} else {
				yynn3687 = 1
				for _, b := range yyq3687 {
					if b {
						yynn3687++
					}
				}
				r.EncodeMapStart(yynn3687)
				yynn3687 = 0
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3689 := z.EncBinary()
				_ = yym3689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3690 := z.EncBinary()
				_ = yym3690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3687 || yy2arr3687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3691 := z.DecBinary()
	_ = yym3691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3692 := r.ContainerType()
		if yyct3692 == codecSelferValueTypeMap1234 {
			yyl3692 := r.ReadMapStart()
			if yyl3692 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3692, d)
			}
		} else if yyct3692 == codecSelferValueTypeArray1234 {
			yyl3692 := r.ReadArrayStart()
			if yyl3692 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3693Slc
	var yyhl3693 bool = l >= 0
	for yyj3693 := 0; ; yyj3693++ {
		if yyhl3693 {
			if yyj3693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3693Slc = r.DecodeBytes(yys3693Slc, true, true)
		yys3693 := string(yys3693Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3693 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3693)
		} // end switch yys3693
	} // end for yyj3693
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3695 int
	var yyb3695 bool
	var yyhl3695 bool = l >= 0
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3695++
		if yyhl3695 {
			yyb3695 = yyj3695 > l
		} else {
			yyb3695 = r.CheckBreak()
		}
		if yyb3695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3697 := z.EncBinary()
		_ = yym3697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3698 := !z.EncBinary()
			yy2arr3698 := z.EncBasicHandle().StructToArray
			var yyq3698 [3]bool
			_, _, _ = yysep3698, yyq3698, yy2arr3698
			const yyr3698 bool = false
			yyq3698[0] = x.Kind != ""
			yyq3698[1] = x.APIVersion != ""
			yyq3698[2] = true
			var yynn3698 int
			if yyr3698 || yy2arr3698 {
				r.EncodeArrayStart(3)
			} else {
				yynn3698 = 0
				for _, b := range yyq3698 {
					if b {
						yynn3698++
					}
				}
				r.EncodeMapStart(yynn3698)
				yynn3698 = 0
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3698[0] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3698[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3698[1] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3698[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3698[2] {
					yy3706 := &x.Reference
					yy3706.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3698[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3707 := &x.Reference
					yy3707.CodecEncodeSelf(e)
				}
			}
			if yyr3698 || yy2arr3698 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3708 := z.DecBinary()
	_ = yym3708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3709 := r.ContainerType()
		if yyct3709 == codecSelferValueTypeMap1234 {
			yyl3709 := r.ReadMapStart()
			if yyl3709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3709, d)
			}
		} else if yyct3709 == codecSelferValueTypeArray1234 {
			yyl3709 := r.ReadArrayStart()
			if yyl3709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3710Slc
	var yyhl3710 bool = l >= 0
	for yyj3710 := 0; ; yyj3710++ {
		if yyhl3710 {
			if yyj3710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3710Slc = r.DecodeBytes(yys3710Slc, true, true)
		yys3710 := string(yys3710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3710 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3713 := &x.Reference
				yyv3713.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3710)
		} // end switch yys3710
	} // end for yyj3710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3714 int
	var yyb3714 bool
	var yyhl3714 bool = l >= 0
	yyj3714++
	if yyhl3714 {
		yyb3714 = yyj3714 > l
	} else {
		yyb3714 = r.CheckBreak()
	}
	if yyb3714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3714++
	if yyhl3714 {
		yyb3714 = yyj3714 > l
	} else {
		yyb3714 = r.CheckBreak()
	}
	if yyb3714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3714++
	if yyhl3714 {
		yyb3714 = yyj3714 > l
	} else {
		yyb3714 = r.CheckBreak()
	}
	if yyb3714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3717 := &x.Reference
		yyv3717.CodecDecodeSelf(d)
	}
	for {
		yyj3714++
		if yyhl3714 {
			yyb3714 = yyj3714 > l
		} else {
			yyb3714 = r.CheckBreak()
		}
		if yyb3714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3718 := z.EncBinary()
		_ = yym3718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3719 := !z.EncBinary()
			yy2arr3719 := z.EncBasicHandle().StructToArray
			var yyq3719 [2]bool
			_, _, _ = yysep3719, yyq3719, yy2arr3719
			const yyr3719 bool = false
			yyq3719[0] = x.Component != ""
			yyq3719[1] = x.Host != ""
			var yynn3719 int
			if yyr3719 || yy2arr3719 {
				r.EncodeArrayStart(2)
			} else {
				yynn3719 = 0
				for _, b := range yyq3719 {
					if b {
						yynn3719++
					}
				}
				r.EncodeMapStart(yynn3719)
				yynn3719 = 0
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[0] {
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3722 := z.EncBinary()
					_ = yym3722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[1] {
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3726 := z.DecBinary()
	_ = yym3726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3727 := r.ContainerType()
		if yyct3727 == codecSelferValueTypeMap1234 {
			yyl3727 := r.ReadMapStart()
			if yyl3727 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3727, d)
			}
		} else if yyct3727 == codecSelferValueTypeArray1234 {
			yyl3727 := r.ReadArrayStart()
			if yyl3727 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3728Slc
	var yyhl3728 bool = l >= 0
	for yyj3728 := 0; ; yyj3728++ {
		if yyhl3728 {
			if yyj3728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3728Slc = r.DecodeBytes(yys3728Slc, true, true)
		yys3728 := string(yys3728Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3728 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3728)
		} // end switch yys3728
	} // end for yyj3728
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3731 int
	var yyb3731 bool
	var yyhl3731 bool = l >= 0
	yyj3731++
	if yyhl3731 {
		yyb3731 = yyj3731 > l
	} else {
		yyb3731 = r.CheckBreak()
	}
	if yyb3731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3731++
	if yyhl3731 {
		yyb3731 = yyj3731 > l
	} else {
		yyb3731 = r.CheckBreak()
	}
	if yyb3731 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3731++
		if yyhl3731 {
			yyb3731 = yyj3731 > l
		} else {
			yyb3731 = r.CheckBreak()
		}
		if yyb3731 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3731-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3734 := z.EncBinary()
		_ = yym3734
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3735 := !z.EncBinary()
			yy2arr3735 := z.EncBasicHandle().StructToArray
			var yyq3735 [11]bool
			_, _, _ = yysep3735, yyq3735, yy2arr3735
			const yyr3735 bool = false
			yyq3735[0] = x.Kind != ""
			yyq3735[1] = x.APIVersion != ""
			yyq3735[2] = true
			yyq3735[3] = true
			yyq3735[4] = x.Reason != ""
			yyq3735[5] = x.Message != ""
			yyq3735[6] = true
			yyq3735[7] = true
			yyq3735[8] = true
			yyq3735[9] = x.Count != 0
			yyq3735[10] = x.Type != ""
			var yynn3735 int
			if yyr3735 || yy2arr3735 {
				r.EncodeArrayStart(11)
			} else {
				yynn3735 = 0
				for _, b := range yyq3735 {
					if b {
						yynn3735++
					}
				}
				r.EncodeMapStart(yynn3735)
				yynn3735 = 0
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[0] {
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3738 := z.EncBinary()
					_ = yym3738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[1] {
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[2] {
					yy3743 := &x.ObjectMeta
					yy3743.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3735[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3744 := &x.ObjectMeta
					yy3744.CodecEncodeSelf(e)
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[3] {
					yy3746 := &x.InvolvedObject
					yy3746.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3735[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3747 := &x.InvolvedObject
					yy3747.CodecEncodeSelf(e)
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[4] {
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[5] {
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[6] {
					yy3755 := &x.Source
					yy3755.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3735[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3756 := &x.Source
					yy3756.CodecEncodeSelf(e)
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[7] {
					yy3758 := &x.FirstTimestamp
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3758) {
					} else if yym3759 {
						z.EncBinaryMarshal(yy3758)
					} else if !yym3759 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3758)
					} else {
						z.EncFallback(yy3758)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3735[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3760 := &x.FirstTimestamp
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3760) {
					} else if yym3761 {
						z.EncBinaryMarshal(yy3760)
					} else if !yym3761 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3760)
					} else {
						z.EncFallback(yy3760)
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[8] {
					yy3763 := &x.LastTimestamp
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3763) {
					} else if yym3764 {
						z.EncBinaryMarshal(yy3763)
					} else if !yym3764 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3763)
					} else {
						z.EncFallback(yy3763)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3735[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3765 := &x.LastTimestamp
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3765) {
					} else if yym3766 {
						z.EncBinaryMarshal(yy3765)
					} else if !yym3766 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3765)
					} else {
						z.EncFallback(yy3765)
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[9] {
					yym3768 := z.EncBinary()
					_ = yym3768
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3735[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3735[10] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3735[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3735 || yy2arr3735 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3773 := z.DecBinary()
	_ = yym3773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3774 := r.ContainerType()
		if yyct3774 == codecSelferValueTypeMap1234 {
			yyl3774 := r.ReadMapStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3774, d)
			}
		} else if yyct3774 == codecSelferValueTypeArray1234 {
			yyl3774 := r.ReadArrayStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3775Slc
	var yyhl3775 bool = l >= 0
	for yyj3775 := 0; ; yyj3775++ {
		if yyhl3775 {
			if yyj3775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3775Slc = r.DecodeBytes(yys3775Slc, true, true)
		yys3775 := string(yys3775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3775 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3778 := &x.ObjectMeta
				yyv3778.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3779 := &x.InvolvedObject
				yyv3779.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3782 := &x.Source
				yyv3782.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3783 := &x.FirstTimestamp
				yym3784 := z.DecBinary()
				_ = yym3784
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3783) {
				} else if yym3784 {
					z.DecBinaryUnmarshal(yyv3783)
				} else if !yym3784 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3783)
				} else {
					z.DecFallback(yyv3783, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3785 := &x.LastTimestamp
				yym3786 := z.DecBinary()
				_ = yym3786
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3785) {
				} else if yym3786 {
					z.DecBinaryUnmarshal(yyv3785)
				} else if !yym3786 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3785)
				} else {
					z.DecFallback(yyv3785, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3775)
		} // end switch yys3775
	} // end for yyj3775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3789 int
	var yyb3789 bool
	var yyhl3789 bool = l >= 0
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3792 := &x.ObjectMeta
		yyv3792.CodecDecodeSelf(d)
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3793 := &x.InvolvedObject
		yyv3793.CodecDecodeSelf(d)
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3796 := &x.Source
		yyv3796.CodecDecodeSelf(d)
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3797 := &x.FirstTimestamp
		yym3798 := z.DecBinary()
		_ = yym3798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3797) {
		} else if yym3798 {
			z.DecBinaryUnmarshal(yyv3797)
		} else if !yym3798 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3797)
		} else {
			z.DecFallback(yyv3797, false)
		}
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3799 := &x.LastTimestamp
		yym3800 := z.DecBinary()
		_ = yym3800
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3799) {
		} else if yym3800 {
			z.DecBinaryUnmarshal(yyv3799)
		} else if !yym3800 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3799)
		} else {
			z.DecFallback(yyv3799, false)
		}
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3789++
	if yyhl3789 {
		yyb3789 = yyj3789 > l
	} else {
		yyb3789 = r.CheckBreak()
	}
	if yyb3789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3789++
		if yyhl3789 {
			yyb3789 = yyj3789 > l
		} else {
			yyb3789 = r.CheckBreak()
		}
		if yyb3789 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3789-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3803 := z.EncBinary()
		_ = yym3803
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3804 := !z.EncBinary()
			yy2arr3804 := z.EncBasicHandle().StructToArray
			var yyq3804 [4]bool
			_, _, _ = yysep3804, yyq3804, yy2arr3804
			const yyr3804 bool = false
			yyq3804[0] = x.Kind != ""
			yyq3804[1] = x.APIVersion != ""
			yyq3804[2] = true
			var yynn3804 int
			if yyr3804 || yy2arr3804 {
				r.EncodeArrayStart(4)
			} else {
				yynn3804 = 1
				for _, b := range yyq3804 {
					if b {
						yynn3804++
					}
				}
				r.EncodeMapStart(yynn3804)
				yynn3804 = 0
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[0] {
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[1] {
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3810 := z.EncBinary()
					_ = yym3810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[2] {
					yy3812 := &x.ListMeta
					yym3813 := z.EncBinary()
					_ = yym3813
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3812) {
					} else {
						z.EncFallback(yy3812)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3804[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3814 := &x.ListMeta
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3814) {
					} else {
						z.EncFallback(yy3814)
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3819 := z.DecBinary()
	_ = yym3819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3820 := r.ContainerType()
		if yyct3820 == codecSelferValueTypeMap1234 {
			yyl3820 := r.ReadMapStart()
			if yyl3820 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3820, d)
			}
		} else if yyct3820 == codecSelferValueTypeArray1234 {
			yyl3820 := r.ReadArrayStart()
			if yyl3820 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3820, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3821Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3821Slc
	var yyhl3821 bool = l >= 0
	for yyj3821 := 0; ; yyj3821++ {
		if yyhl3821 {
			if yyj3821 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3821Slc = r.DecodeBytes(yys3821Slc, true, true)
		yys3821 := string(yys3821Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3821 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3824 := &x.ListMeta
				yym3825 := z.DecBinary()
				_ = yym3825
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3824) {
				} else {
					z.DecFallback(yyv3824, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3826 := &x.Items
				yym3827 := z.DecBinary()
				_ = yym3827
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3826), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3821)
		} // end switch yys3821
	} // end for yyj3821
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3828 int
	var yyb3828 bool
	var yyhl3828 bool = l >= 0
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3831 := &x.ListMeta
		yym3832 := z.DecBinary()
		_ = yym3832
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3831) {
		} else {
			z.DecFallback(yyv3831, false)
		}
	}
	yyj3828++
	if yyhl3828 {
		yyb3828 = yyj3828 > l
	} else {
		yyb3828 = r.CheckBreak()
	}
	if yyb3828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3833 := &x.Items
		yym3834 := z.DecBinary()
		_ = yym3834
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3833), d)
		}
	}
	for {
		yyj3828++
		if yyhl3828 {
			yyb3828 = yyj3828 > l
		} else {
			yyb3828 = r.CheckBreak()
		}
		if yyb3828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3835 := z.EncBinary()
		_ = yym3835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3836 := !z.EncBinary()
			yy2arr3836 := z.EncBasicHandle().StructToArray
			var yyq3836 [4]bool
			_, _, _ = yysep3836, yyq3836, yy2arr3836
			const yyr3836 bool = false
			yyq3836[0] = x.Kind != ""
			yyq3836[1] = x.APIVersion != ""
			yyq3836[2] = true
			var yynn3836 int
			if yyr3836 || yy2arr3836 {
				r.EncodeArrayStart(4)
			} else {
				yynn3836 = 1
				for _, b := range yyq3836 {
					if b {
						yynn3836++
					}
				}
				r.EncodeMapStart(yynn3836)
				yynn3836 = 0
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[0] {
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[1] {
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3836[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[2] {
					yy3844 := &x.ListMeta
					yym3845 := z.EncBinary()
					_ = yym3845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3844) {
					} else {
						z.EncFallback(yy3844)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3836[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3846 := &x.ListMeta
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3846) {
					} else {
						z.EncFallback(yy3846)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3851 := z.DecBinary()
	_ = yym3851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3852 := r.ContainerType()
		if yyct3852 == codecSelferValueTypeMap1234 {
			yyl3852 := r.ReadMapStart()
			if yyl3852 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3852, d)
			}
		} else if yyct3852 == codecSelferValueTypeArray1234 {
			yyl3852 := r.ReadArrayStart()
			if yyl3852 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3852, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3853Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3853Slc
	var yyhl3853 bool = l >= 0
	for yyj3853 := 0; ; yyj3853++ {
		if yyhl3853 {
			if yyj3853 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3853Slc = r.DecodeBytes(yys3853Slc, true, true)
		yys3853 := string(yys3853Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3853 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3856 := &x.ListMeta
				yym3857 := z.DecBinary()
				_ = yym3857
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3856) {
				} else {
					z.DecFallback(yyv3856, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3858 := &x.Items
				yym3859 := z.DecBinary()
				_ = yym3859
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3858), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3853)
		} // end switch yys3853
	} // end for yyj3853
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3860 int
	var yyb3860 bool
	var yyhl3860 bool = l >= 0
	yyj3860++
	if yyhl3860 {
		yyb3860 = yyj3860 > l
	} else {
		yyb3860 = r.CheckBreak()
	}
	if yyb3860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3860++
	if yyhl3860 {
		yyb3860 = yyj3860 > l
	} else {
		yyb3860 = r.CheckBreak()
	}
	if yyb3860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3860++
	if yyhl3860 {
		yyb3860 = yyj3860 > l
	} else {
		yyb3860 = r.CheckBreak()
	}
	if yyb3860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3863 := &x.ListMeta
		yym3864 := z.DecBinary()
		_ = yym3864
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3863) {
		} else {
			z.DecFallback(yyv3863, false)
		}
	}
	yyj3860++
	if yyhl3860 {
		yyb3860 = yyj3860 > l
	} else {
		yyb3860 = r.CheckBreak()
	}
	if yyb3860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3865 := &x.Items
		yym3866 := z.DecBinary()
		_ = yym3866
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3865), d)
		}
	}
	for {
		yyj3860++
		if yyhl3860 {
			yyb3860 = yyj3860 > l
		} else {
			yyb3860 = r.CheckBreak()
		}
		if yyb3860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3867 := z.EncBinary()
	_ = yym3867
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3868 := z.DecBinary()
	_ = yym3868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3869 := z.EncBinary()
		_ = yym3869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3870 := !z.EncBinary()
			yy2arr3870 := z.EncBasicHandle().StructToArray
			var yyq3870 [6]bool
			_, _, _ = yysep3870, yyq3870, yy2arr3870
			const yyr3870 bool = false
			yyq3870[0] = x.Type != ""
			yyq3870[1] = len(x.Max) != 0
			yyq3870[2] = len(x.Min) != 0
			yyq3870[3] = len(x.Default) != 0
			yyq3870[4] = len(x.DefaultRequest) != 0
			yyq3870[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3870 int
			if yyr3870 || yy2arr3870 {
				r.EncodeArrayStart(6)
			} else {
				yynn3870 = 0
				for _, b := range yyq3870 {
					if b {
						yynn3870++
					}
				}
				r.EncodeMapStart(yynn3870)
				yynn3870 = 0
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3870[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3870[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3870[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3870[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3870[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3870[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3870[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3870[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3870[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3870[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3870 || yy2arr3870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3877 := z.DecBinary()
	_ = yym3877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3878 := r.ContainerType()
		if yyct3878 == codecSelferValueTypeMap1234 {
			yyl3878 := r.ReadMapStart()
			if yyl3878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3878, d)
			}
		} else if yyct3878 == codecSelferValueTypeArray1234 {
			yyl3878 := r.ReadArrayStart()
			if yyl3878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3879Slc
	var yyhl3879 bool = l >= 0
	for yyj3879 := 0; ; yyj3879++ {
		if yyhl3879 {
			if yyj3879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3879Slc = r.DecodeBytes(yys3879Slc, true, true)
		yys3879 := string(yys3879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3879 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3881 := &x.Max
				yyv3881.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3882 := &x.Min
				yyv3882.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3883 := &x.Default
				yyv3883.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3884 := &x.DefaultRequest
				yyv3884.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3885 := &x.MaxLimitRequestRatio
				yyv3885.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3879)
		} // end switch yys3879
	} // end for yyj3879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3886 int
	var yyb3886 bool
	var yyhl3886 bool = l >= 0
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3888 := &x.Max
		yyv3888.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3889 := &x.Min
		yyv3889.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3890 := &x.Default
		yyv3890.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3891 := &x.DefaultRequest
		yyv3891.CodecDecodeSelf(d)
	}
	yyj3886++
	if yyhl3886 {
		yyb3886 = yyj3886 > l
	} else {
		yyb3886 = r.CheckBreak()
	}
	if yyb3886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3892 := &x.MaxLimitRequestRatio
		yyv3892.CodecDecodeSelf(d)
	}
	for {
		yyj3886++
		if yyhl3886 {
			yyb3886 = yyj3886 > l
		} else {
			yyb3886 = r.CheckBreak()
		}
		if yyb3886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3893 := z.EncBinary()
		_ = yym3893
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3894 := !z.EncBinary()
			yy2arr3894 := z.EncBasicHandle().StructToArray
			var yyq3894 [1]bool
			_, _, _ = yysep3894, yyq3894, yy2arr3894
			const yyr3894 bool = false
			var yynn3894 int
			if yyr3894 || yy2arr3894 {
				r.EncodeArrayStart(1)
			} else {
				yynn3894 = 1
				for _, b := range yyq3894 {
					if b {
						yynn3894++
					}
				}
				r.EncodeMapStart(yynn3894)
				yynn3894 = 0
			}
			if yyr3894 || yy2arr3894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3894 || yy2arr3894 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3898 := z.DecBinary()
	_ = yym3898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3899 := r.ContainerType()
		if yyct3899 == codecSelferValueTypeMap1234 {
			yyl3899 := r.ReadMapStart()
			if yyl3899 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3899, d)
			}
		} else if yyct3899 == codecSelferValueTypeArray1234 {
			yyl3899 := r.ReadArrayStart()
			if yyl3899 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3900Slc
	var yyhl3900 bool = l >= 0
	for yyj3900 := 0; ; yyj3900++ {
		if yyhl3900 {
			if yyj3900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3900Slc = r.DecodeBytes(yys3900Slc, true, true)
		yys3900 := string(yys3900Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3900 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3901 := &x.Limits
				yym3902 := z.DecBinary()
				_ = yym3902
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3901), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3900)
		} // end switch yys3900
	} // end for yyj3900
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3903 int
	var yyb3903 bool
	var yyhl3903 bool = l >= 0
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3904 := &x.Limits
		yym3905 := z.DecBinary()
		_ = yym3905
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3904), d)
		}
	}
	for {
		yyj3903++
		if yyhl3903 {
			yyb3903 = yyj3903 > l
		} else {
			yyb3903 = r.CheckBreak()
		}
		if yyb3903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3906 := z.EncBinary()
		_ = yym3906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3907 := !z.EncBinary()
			yy2arr3907 := z.EncBasicHandle().StructToArray
			var yyq3907 [4]bool
			_, _, _ = yysep3907, yyq3907, yy2arr3907
			const yyr3907 bool = false
			yyq3907[0] = x.Kind != ""
			yyq3907[1] = x.APIVersion != ""
			yyq3907[2] = true
			yyq3907[3] = true
			var yynn3907 int
			if yyr3907 || yy2arr3907 {
				r.EncodeArrayStart(4)
			} else {
				yynn3907 = 0
				for _, b := range yyq3907 {
					if b {
						yynn3907++
					}
				}
				r.EncodeMapStart(yynn3907)
				yynn3907 = 0
			}
			if yyr3907 || yy2arr3907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3907[0] {
					yym3909 := z.EncBinary()
					_ = yym3909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3907[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3910 := z.EncBinary()
					_ = yym3910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3907 || yy2arr3907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3907[1] {
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3907[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3907 || yy2arr3907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3907[2] {
					yy3915 := &x.ObjectMeta
					yy3915.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3907[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3916 := &x.ObjectMeta
					yy3916.CodecEncodeSelf(e)
				}
			}
			if yyr3907 || yy2arr3907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3907[3] {
					yy3918 := &x.Spec
					yy3918.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3907[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3919 := &x.Spec
					yy3919.CodecEncodeSelf(e)
				}
			}
			if yyr3907 || yy2arr3907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3920 := z.DecBinary()
	_ = yym3920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3921 := r.ContainerType()
		if yyct3921 == codecSelferValueTypeMap1234 {
			yyl3921 := r.ReadMapStart()
			if yyl3921 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3921, d)
			}
		} else if yyct3921 == codecSelferValueTypeArray1234 {
			yyl3921 := r.ReadArrayStart()
			if yyl3921 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3922Slc
	var yyhl3922 bool = l >= 0
	for yyj3922 := 0; ; yyj3922++ {
		if yyhl3922 {
			if yyj3922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3922Slc = r.DecodeBytes(yys3922Slc, true, true)
		yys3922 := string(yys3922Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3922 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3925 := &x.ObjectMeta
				yyv3925.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3926 := &x.Spec
				yyv3926.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3922)
		} // end switch yys3922
	} // end for yyj3922
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3927 int
	var yyb3927 bool
	var yyhl3927 bool = l >= 0
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3930 := &x.ObjectMeta
		yyv3930.CodecDecodeSelf(d)
	}
	yyj3927++
	if yyhl3927 {
		yyb3927 = yyj3927 > l
	} else {
		yyb3927 = r.CheckBreak()
	}
	if yyb3927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3931 := &x.Spec
		yyv3931.CodecDecodeSelf(d)
	}
	for {
		yyj3927++
		if yyhl3927 {
			yyb3927 = yyj3927 > l
		} else {
			yyb3927 = r.CheckBreak()
		}
		if yyb3927 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3927-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3932 := z.EncBinary()
		_ = yym3932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3933 := !z.EncBinary()
			yy2arr3933 := z.EncBasicHandle().StructToArray
			var yyq3933 [4]bool
			_, _, _ = yysep3933, yyq3933, yy2arr3933
			const yyr3933 bool = false
			yyq3933[0] = x.Kind != ""
			yyq3933[1] = x.APIVersion != ""
			yyq3933[2] = true
			var yynn3933 int
			if yyr3933 || yy2arr3933 {
				r.EncodeArrayStart(4)
			} else {
				yynn3933 = 1
				for _, b := range yyq3933 {
					if b {
						yynn3933++
					}
				}
				r.EncodeMapStart(yynn3933)
				yynn3933 = 0
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[0] {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[1] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[2] {
					yy3941 := &x.ListMeta
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3941) {
					} else {
						z.EncFallback(yy3941)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3933[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3943 := &x.ListMeta
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3943) {
					} else {
						z.EncFallback(yy3943)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3948 := z.DecBinary()
	_ = yym3948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3949 := r.ContainerType()
		if yyct3949 == codecSelferValueTypeMap1234 {
			yyl3949 := r.ReadMapStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3949, d)
			}
		} else if yyct3949 == codecSelferValueTypeArray1234 {
			yyl3949 := r.ReadArrayStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3950Slc
	var yyhl3950 bool = l >= 0
	for yyj3950 := 0; ; yyj3950++ {
		if yyhl3950 {
			if yyj3950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3950Slc = r.DecodeBytes(yys3950Slc, true, true)
		yys3950 := string(yys3950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3950 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3953 := &x.ListMeta
				yym3954 := z.DecBinary()
				_ = yym3954
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3953) {
				} else {
					z.DecFallback(yyv3953, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3955 := &x.Items
				yym3956 := z.DecBinary()
				_ = yym3956
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3955), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3950)
		} // end switch yys3950
	} // end for yyj3950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3957 int
	var yyb3957 bool
	var yyhl3957 bool = l >= 0
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3960 := &x.ListMeta
		yym3961 := z.DecBinary()
		_ = yym3961
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3960) {
		} else {
			z.DecFallback(yyv3960, false)
		}
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3962 := &x.Items
		yym3963 := z.DecBinary()
		_ = yym3963
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3962), d)
		}
	}
	for {
		yyj3957++
		if yyhl3957 {
			yyb3957 = yyj3957 > l
		} else {
			yyb3957 = r.CheckBreak()
		}
		if yyb3957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3964 := z.EncBinary()
	_ = yym3964
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3965 := z.DecBinary()
	_ = yym3965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3966 := z.EncBinary()
		_ = yym3966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3967 := !z.EncBinary()
			yy2arr3967 := z.EncBasicHandle().StructToArray
			var yyq3967 [2]bool
			_, _, _ = yysep3967, yyq3967, yy2arr3967
			const yyr3967 bool = false
			yyq3967[0] = len(x.Hard) != 0
			yyq3967[1] = len(x.Scopes) != 0
			var yynn3967 int
			if yyr3967 || yy2arr3967 {
				r.EncodeArrayStart(2)
			} else {
				yynn3967 = 0
				for _, b := range yyq3967 {
					if b {
						yynn3967++
					}
				}
				r.EncodeMapStart(yynn3967)
				yynn3967 = 0
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3970 := z.EncBinary()
						_ = yym3970
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3971 := z.EncBinary()
						_ = yym3971
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3972 := z.DecBinary()
	_ = yym3972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3973 := r.ContainerType()
		if yyct3973 == codecSelferValueTypeMap1234 {
			yyl3973 := r.ReadMapStart()
			if yyl3973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3973, d)
			}
		} else if yyct3973 == codecSelferValueTypeArray1234 {
			yyl3973 := r.ReadArrayStart()
			if yyl3973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3974Slc
	var yyhl3974 bool = l >= 0
	for yyj3974 := 0; ; yyj3974++ {
		if yyhl3974 {
			if yyj3974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3974Slc = r.DecodeBytes(yys3974Slc, true, true)
		yys3974 := string(yys3974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3974 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3975 := &x.Hard
				yyv3975.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3976 := &x.Scopes
				yym3977 := z.DecBinary()
				_ = yym3977
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3976), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3974)
		} // end switch yys3974
	} // end for yyj3974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3978 int
	var yyb3978 bool
	var yyhl3978 bool = l >= 0
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3979 := &x.Hard
		yyv3979.CodecDecodeSelf(d)
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3980 := &x.Scopes
		yym3981 := z.DecBinary()
		_ = yym3981
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3980), d)
		}
	}
	for {
		yyj3978++
		if yyhl3978 {
			yyb3978 = yyj3978 > l
		} else {
			yyb3978 = r.CheckBreak()
		}
		if yyb3978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3982 := z.EncBinary()
		_ = yym3982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3983 := !z.EncBinary()
			yy2arr3983 := z.EncBasicHandle().StructToArray
			var yyq3983 [2]bool
			_, _, _ = yysep3983, yyq3983, yy2arr3983
			const yyr3983 bool = false
			yyq3983[0] = len(x.Hard) != 0
			yyq3983[1] = len(x.Used) != 0
			var yynn3983 int
			if yyr3983 || yy2arr3983 {
				r.EncodeArrayStart(2)
			} else {
				yynn3983 = 0
				for _, b := range yyq3983 {
					if b {
						yynn3983++
					}
				}
				r.EncodeMapStart(yynn3983)
				yynn3983 = 0
			}
			if yyr3983 || yy2arr3983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3983[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3983[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3983 || yy2arr3983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3983[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3983[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3983 || yy2arr3983 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3986 := z.DecBinary()
	_ = yym3986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3987 := r.ContainerType()
		if yyct3987 == codecSelferValueTypeMap1234 {
			yyl3987 := r.ReadMapStart()
			if yyl3987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3987, d)
			}
		} else if yyct3987 == codecSelferValueTypeArray1234 {
			yyl3987 := r.ReadArrayStart()
			if yyl3987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3988Slc
	var yyhl3988 bool = l >= 0
	for yyj3988 := 0; ; yyj3988++ {
		if yyhl3988 {
			if yyj3988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3988Slc = r.DecodeBytes(yys3988Slc, true, true)
		yys3988 := string(yys3988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3988 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3989 := &x.Hard
				yyv3989.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3990 := &x.Used
				yyv3990.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3988)
		} // end switch yys3988
	} // end for yyj3988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3991 int
	var yyb3991 bool
	var yyhl3991 bool = l >= 0
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3992 := &x.Hard
		yyv3992.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3993 := &x.Used
		yyv3993.CodecDecodeSelf(d)
	}
	for {
		yyj3991++
		if yyhl3991 {
			yyb3991 = yyj3991 > l
		} else {
			yyb3991 = r.CheckBreak()
		}
		if yyb3991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3994 := z.EncBinary()
		_ = yym3994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3995 := !z.EncBinary()
			yy2arr3995 := z.EncBasicHandle().StructToArray
			var yyq3995 [5]bool
			_, _, _ = yysep3995, yyq3995, yy2arr3995
			const yyr3995 bool = false
			yyq3995[0] = x.Kind != ""
			yyq3995[1] = x.APIVersion != ""
			yyq3995[2] = true
			yyq3995[3] = true
			yyq3995[4] = true
			var yynn3995 int
			if yyr3995 || yy2arr3995 {
				r.EncodeArrayStart(5)
			} else {
				yynn3995 = 0
				for _, b := range yyq3995 {
					if b {
						yynn3995++
					}
				}
				r.EncodeMapStart(yynn3995)
				yynn3995 = 0
			}
			if yyr3995 || yy2arr3995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3995[0] {
					yym3997 := z.EncBinary()
					_ = yym3997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3995[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3998 := z.EncBinary()
					_ = yym3998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3995 || yy2arr3995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3995[1] {
					yym4000 := z.EncBinary()
					_ = yym4000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3995[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3995 || yy2arr3995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3995[2] {
					yy4003 := &x.ObjectMeta
					yy4003.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3995[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4004 := &x.ObjectMeta
					yy4004.CodecEncodeSelf(e)
				}
			}
			if yyr3995 || yy2arr3995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3995[3] {
					yy4006 := &x.Spec
					yy4006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3995[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4007 := &x.Spec
					yy4007.CodecEncodeSelf(e)
				}
			}
			if yyr3995 || yy2arr3995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3995[4] {
					yy4009 := &x.Status
					yy4009.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3995[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4010 := &x.Status
					yy4010.CodecEncodeSelf(e)
				}
			}
			if yyr3995 || yy2arr3995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4011 := z.DecBinary()
	_ = yym4011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4012 := r.ContainerType()
		if yyct4012 == codecSelferValueTypeMap1234 {
			yyl4012 := r.ReadMapStart()
			if yyl4012 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4012, d)
			}
		} else if yyct4012 == codecSelferValueTypeArray1234 {
			yyl4012 := r.ReadArrayStart()
			if yyl4012 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4013Slc
	var yyhl4013 bool = l >= 0
	for yyj4013 := 0; ; yyj4013++ {
		if yyhl4013 {
			if yyj4013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4013Slc = r.DecodeBytes(yys4013Slc, true, true)
		yys4013 := string(yys4013Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4013 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4016 := &x.ObjectMeta
				yyv4016.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4017 := &x.Spec
				yyv4017.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4018 := &x.Status
				yyv4018.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4013)
		} // end switch yys4013
	} // end for yyj4013
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4019 int
	var yyb4019 bool
	var yyhl4019 bool = l >= 0
	yyj4019++
	if yyhl4019 {
		yyb4019 = yyj4019 > l
	} else {
		yyb4019 = r.CheckBreak()
	}
	if yyb4019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4019++
	if yyhl4019 {
		yyb4019 = yyj4019 > l
	} else {
		yyb4019 = r.CheckBreak()
	}
	if yyb4019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4019++
	if yyhl4019 {
		yyb4019 = yyj4019 > l
	} else {
		yyb4019 = r.CheckBreak()
	}
	if yyb4019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4022 := &x.ObjectMeta
		yyv4022.CodecDecodeSelf(d)
	}
	yyj4019++
	if yyhl4019 {
		yyb4019 = yyj4019 > l
	} else {
		yyb4019 = r.CheckBreak()
	}
	if yyb4019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4023 := &x.Spec
		yyv4023.CodecDecodeSelf(d)
	}
	yyj4019++
	if yyhl4019 {
		yyb4019 = yyj4019 > l
	} else {
		yyb4019 = r.CheckBreak()
	}
	if yyb4019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4024 := &x.Status
		yyv4024.CodecDecodeSelf(d)
	}
	for {
		yyj4019++
		if yyhl4019 {
			yyb4019 = yyj4019 > l
		} else {
			yyb4019 = r.CheckBreak()
		}
		if yyb4019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4025 := z.EncBinary()
		_ = yym4025
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4026 := !z.EncBinary()
			yy2arr4026 := z.EncBasicHandle().StructToArray
			var yyq4026 [4]bool
			_, _, _ = yysep4026, yyq4026, yy2arr4026
			const yyr4026 bool = false
			yyq4026[0] = x.Kind != ""
			yyq4026[1] = x.APIVersion != ""
			yyq4026[2] = true
			var yynn4026 int
			if yyr4026 || yy2arr4026 {
				r.EncodeArrayStart(4)
			} else {
				yynn4026 = 1
				for _, b := range yyq4026 {
					if b {
						yynn4026++
					}
				}
				r.EncodeMapStart(yynn4026)
				yynn4026 = 0
			}
			if yyr4026 || yy2arr4026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4026[0] {
					yym4028 := z.EncBinary()
					_ = yym4028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4026[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4029 := z.EncBinary()
					_ = yym4029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4026 || yy2arr4026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4026[1] {
					yym4031 := z.EncBinary()
					_ = yym4031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4026[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4032 := z.EncBinary()
					_ = yym4032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4026 || yy2arr4026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4026[2] {
					yy4034 := &x.ListMeta
					yym4035 := z.EncBinary()
					_ = yym4035
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4034) {
					} else {
						z.EncFallback(yy4034)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4026[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4036 := &x.ListMeta
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4036) {
					} else {
						z.EncFallback(yy4036)
					}
				}
			}
			if yyr4026 || yy2arr4026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4026 || yy2arr4026 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4041 := z.DecBinary()
	_ = yym4041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4042 := r.ContainerType()
		if yyct4042 == codecSelferValueTypeMap1234 {
			yyl4042 := r.ReadMapStart()
			if yyl4042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4042, d)
			}
		} else if yyct4042 == codecSelferValueTypeArray1234 {
			yyl4042 := r.ReadArrayStart()
			if yyl4042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4043Slc
	var yyhl4043 bool = l >= 0
	for yyj4043 := 0; ; yyj4043++ {
		if yyhl4043 {
			if yyj4043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4043Slc = r.DecodeBytes(yys4043Slc, true, true)
		yys4043 := string(yys4043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4043 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4046 := &x.ListMeta
				yym4047 := z.DecBinary()
				_ = yym4047
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4046) {
				} else {
					z.DecFallback(yyv4046, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4048 := &x.Items
				yym4049 := z.DecBinary()
				_ = yym4049
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4048), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4043)
		} // end switch yys4043
	} // end for yyj4043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4050 int
	var yyb4050 bool
	var yyhl4050 bool = l >= 0
	yyj4050++
	if yyhl4050 {
		yyb4050 = yyj4050 > l
	} else {
		yyb4050 = r.CheckBreak()
	}
	if yyb4050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4050++
	if yyhl4050 {
		yyb4050 = yyj4050 > l
	} else {
		yyb4050 = r.CheckBreak()
	}
	if yyb4050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4050++
	if yyhl4050 {
		yyb4050 = yyj4050 > l
	} else {
		yyb4050 = r.CheckBreak()
	}
	if yyb4050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4053 := &x.ListMeta
		yym4054 := z.DecBinary()
		_ = yym4054
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4053) {
		} else {
			z.DecFallback(yyv4053, false)
		}
	}
	yyj4050++
	if yyhl4050 {
		yyb4050 = yyj4050 > l
	} else {
		yyb4050 = r.CheckBreak()
	}
	if yyb4050 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4055 := &x.Items
		yym4056 := z.DecBinary()
		_ = yym4056
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4055), d)
		}
	}
	for {
		yyj4050++
		if yyhl4050 {
			yyb4050 = yyj4050 > l
		} else {
			yyb4050 = r.CheckBreak()
		}
		if yyb4050 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4050-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4057 := z.EncBinary()
		_ = yym4057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4058 := !z.EncBinary()
			yy2arr4058 := z.EncBasicHandle().StructToArray
			var yyq4058 [5]bool
			_, _, _ = yysep4058, yyq4058, yy2arr4058
			const yyr4058 bool = false
			yyq4058[0] = x.Kind != ""
			yyq4058[1] = x.APIVersion != ""
			yyq4058[2] = true
			yyq4058[3] = len(x.Data) != 0
			yyq4058[4] = x.Type != ""
			var yynn4058 int
			if yyr4058 || yy2arr4058 {
				r.EncodeArrayStart(5)
			} else {
				yynn4058 = 0
				for _, b := range yyq4058 {
					if b {
						yynn4058++
					}
				}
				r.EncodeMapStart(yynn4058)
				yynn4058 = 0
			}
			if yyr4058 || yy2arr4058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4058[0] {
					yym4060 := z.EncBinary()
					_ = yym4060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4058[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4061 := z.EncBinary()
					_ = yym4061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4058 || yy2arr4058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4058[1] {
					yym4063 := z.EncBinary()
					_ = yym4063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4058[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4058 || yy2arr4058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4058[2] {
					yy4066 := &x.ObjectMeta
					yy4066.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4058[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4067 := &x.ObjectMeta
					yy4067.CodecEncodeSelf(e)
				}
			}
			if yyr4058 || yy2arr4058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4058[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4069 := z.EncBinary()
						_ = yym4069
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4058[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4070 := z.EncBinary()
						_ = yym4070
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4058 || yy2arr4058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4058[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4058[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4058 || yy2arr4058 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4072 := z.DecBinary()
	_ = yym4072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4073 := r.ContainerType()
		if yyct4073 == codecSelferValueTypeMap1234 {
			yyl4073 := r.ReadMapStart()
			if yyl4073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4073, d)
			}
		} else if yyct4073 == codecSelferValueTypeArray1234 {
			yyl4073 := r.ReadArrayStart()
			if yyl4073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4074Slc
	var yyhl4074 bool = l >= 0
	for yyj4074 := 0; ; yyj4074++ {
		if yyhl4074 {
			if yyj4074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4074Slc = r.DecodeBytes(yys4074Slc, true, true)
		yys4074 := string(yys4074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4074 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4077 := &x.ObjectMeta
				yyv4077.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4078 := &x.Data
				yym4079 := z.DecBinary()
				_ = yym4079
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4078), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4074)
		} // end switch yys4074
	} // end for yyj4074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4081 int
	var yyb4081 bool
	var yyhl4081 bool = l >= 0
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4084 := &x.ObjectMeta
		yyv4084.CodecDecodeSelf(d)
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4085 := &x.Data
		yym4086 := z.DecBinary()
		_ = yym4086
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4085), d)
		}
	}
	yyj4081++
	if yyhl4081 {
		yyb4081 = yyj4081 > l
	} else {
		yyb4081 = r.CheckBreak()
	}
	if yyb4081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4081++
		if yyhl4081 {
			yyb4081 = yyj4081 > l
		} else {
			yyb4081 = r.CheckBreak()
		}
		if yyb4081 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4081-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4088 := z.EncBinary()
	_ = yym4088
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4089 := z.DecBinary()
	_ = yym4089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4090 := z.EncBinary()
		_ = yym4090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4091 := !z.EncBinary()
			yy2arr4091 := z.EncBasicHandle().StructToArray
			var yyq4091 [4]bool
			_, _, _ = yysep4091, yyq4091, yy2arr4091
			const yyr4091 bool = false
			yyq4091[0] = x.Kind != ""
			yyq4091[1] = x.APIVersion != ""
			yyq4091[2] = true
			var yynn4091 int
			if yyr4091 || yy2arr4091 {
				r.EncodeArrayStart(4)
			} else {
				yynn4091 = 1
				for _, b := range yyq4091 {
					if b {
						yynn4091++
					}
				}
				r.EncodeMapStart(yynn4091)
				yynn4091 = 0
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4091[0] {
					yym4093 := z.EncBinary()
					_ = yym4093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4091[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4094 := z.EncBinary()
					_ = yym4094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4091[1] {
					yym4096 := z.EncBinary()
					_ = yym4096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4091[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4091[2] {
					yy4099 := &x.ListMeta
					yym4100 := z.EncBinary()
					_ = yym4100
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4099) {
					} else {
						z.EncFallback(yy4099)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4091[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4101 := &x.ListMeta
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4101) {
					} else {
						z.EncFallback(yy4101)
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4104 := z.EncBinary()
					_ = yym4104
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4091 || yy2arr4091 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4106 := z.DecBinary()
	_ = yym4106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4107 := r.ContainerType()
		if yyct4107 == codecSelferValueTypeMap1234 {
			yyl4107 := r.ReadMapStart()
			if yyl4107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4107, d)
			}
		} else if yyct4107 == codecSelferValueTypeArray1234 {
			yyl4107 := r.ReadArrayStart()
			if yyl4107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4108Slc
	var yyhl4108 bool = l >= 0
	for yyj4108 := 0; ; yyj4108++ {
		if yyhl4108 {
			if yyj4108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4108Slc = r.DecodeBytes(yys4108Slc, true, true)
		yys4108 := string(yys4108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4108 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4111 := &x.ListMeta
				yym4112 := z.DecBinary()
				_ = yym4112
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4111) {
				} else {
					z.DecFallback(yyv4111, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4113 := &x.Items
				yym4114 := z.DecBinary()
				_ = yym4114
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4113), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4108)
		} // end switch yys4108
	} // end for yyj4108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4115 int
	var yyb4115 bool
	var yyhl4115 bool = l >= 0
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4118 := &x.ListMeta
		yym4119 := z.DecBinary()
		_ = yym4119
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4118) {
		} else {
			z.DecFallback(yyv4118, false)
		}
	}
	yyj4115++
	if yyhl4115 {
		yyb4115 = yyj4115 > l
	} else {
		yyb4115 = r.CheckBreak()
	}
	if yyb4115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4120 := &x.Items
		yym4121 := z.DecBinary()
		_ = yym4121
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4120), d)
		}
	}
	for {
		yyj4115++
		if yyhl4115 {
			yyb4115 = yyj4115 > l
		} else {
			yyb4115 = r.CheckBreak()
		}
		if yyb4115 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4115-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4122 := z.EncBinary()
		_ = yym4122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4123 := !z.EncBinary()
			yy2arr4123 := z.EncBasicHandle().StructToArray
			var yyq4123 [4]bool
			_, _, _ = yysep4123, yyq4123, yy2arr4123
			const yyr4123 bool = false
			yyq4123[0] = x.Kind != ""
			yyq4123[1] = x.APIVersion != ""
			yyq4123[2] = true
			yyq4123[3] = len(x.Data) != 0
			var yynn4123 int
			if yyr4123 || yy2arr4123 {
				r.EncodeArrayStart(4)
			} else {
				yynn4123 = 0
				for _, b := range yyq4123 {
					if b {
						yynn4123++
					}
				}
				r.EncodeMapStart(yynn4123)
				yynn4123 = 0
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[0] {
					yym4125 := z.EncBinary()
					_ = yym4125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[1] {
					yym4128 := z.EncBinary()
					_ = yym4128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[2] {
					yy4131 := &x.ObjectMeta
					yy4131.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4132 := &x.ObjectMeta
					yy4132.CodecEncodeSelf(e)
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4134 := z.EncBinary()
						_ = yym4134
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4123[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4135 := z.EncBinary()
						_ = yym4135
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4136 := z.DecBinary()
	_ = yym4136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4137 := r.ContainerType()
		if yyct4137 == codecSelferValueTypeMap1234 {
			yyl4137 := r.ReadMapStart()
			if yyl4137 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4137, d)
			}
		} else if yyct4137 == codecSelferValueTypeArray1234 {
			yyl4137 := r.ReadArrayStart()
			if yyl4137 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4138Slc
	var yyhl4138 bool = l >= 0
	for yyj4138 := 0; ; yyj4138++ {
		if yyhl4138 {
			if yyj4138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4138Slc = r.DecodeBytes(yys4138Slc, true, true)
		yys4138 := string(yys4138Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4138 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4141 := &x.ObjectMeta
				yyv4141.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4142 := &x.Data
				yym4143 := z.DecBinary()
				_ = yym4143
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4142, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4138)
		} // end switch yys4138
	} // end for yyj4138
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4144 int
	var yyb4144 bool
	var yyhl4144 bool = l >= 0
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4147 := &x.ObjectMeta
		yyv4147.CodecDecodeSelf(d)
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4148 := &x.Data
		yym4149 := z.DecBinary()
		_ = yym4149
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4148, false, d)
		}
	}
	for {
		yyj4144++
		if yyhl4144 {
			yyb4144 = yyj4144 > l
		} else {
			yyb4144 = r.CheckBreak()
		}
		if yyb4144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4150 := z.EncBinary()
		_ = yym4150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4151 := !z.EncBinary()
			yy2arr4151 := z.EncBasicHandle().StructToArray
			var yyq4151 [4]bool
			_, _, _ = yysep4151, yyq4151, yy2arr4151
			const yyr4151 bool = false
			yyq4151[0] = x.Kind != ""
			yyq4151[1] = x.APIVersion != ""
			yyq4151[2] = true
			var yynn4151 int
			if yyr4151 || yy2arr4151 {
				r.EncodeArrayStart(4)
			} else {
				yynn4151 = 1
				for _, b := range yyq4151 {
					if b {
						yynn4151++
					}
				}
				r.EncodeMapStart(yynn4151)
				yynn4151 = 0
			}
			if yyr4151 || yy2arr4151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4151[0] {
					yym4153 := z.EncBinary()
					_ = yym4153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4154 := z.EncBinary()
					_ = yym4154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4151 || yy2arr4151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4151[1] {
					yym4156 := z.EncBinary()
					_ = yym4156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4157 := z.EncBinary()
					_ = yym4157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4151 || yy2arr4151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4151[2] {
					yy4159 := &x.ListMeta
					yym4160 := z.EncBinary()
					_ = yym4160
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4159) {
					} else {
						z.EncFallback(yy4159)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4151[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4161 := &x.ListMeta
					yym4162 := z.EncBinary()
					_ = yym4162
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4161) {
					} else {
						z.EncFallback(yy4161)
					}
				}
			}
			if yyr4151 || yy2arr4151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4164 := z.EncBinary()
					_ = yym4164
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4151 || yy2arr4151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4166 := z.DecBinary()
	_ = yym4166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4167 := r.ContainerType()
		if yyct4167 == codecSelferValueTypeMap1234 {
			yyl4167 := r.ReadMapStart()
			if yyl4167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4167, d)
			}
		} else if yyct4167 == codecSelferValueTypeArray1234 {
			yyl4167 := r.ReadArrayStart()
			if yyl4167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4168Slc
	var yyhl4168 bool = l >= 0
	for yyj4168 := 0; ; yyj4168++ {
		if yyhl4168 {
			if yyj4168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4168Slc = r.DecodeBytes(yys4168Slc, true, true)
		yys4168 := string(yys4168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4168 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4171 := &x.ListMeta
				yym4172 := z.DecBinary()
				_ = yym4172
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4171) {
				} else {
					z.DecFallback(yyv4171, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4173 := &x.Items
				yym4174 := z.DecBinary()
				_ = yym4174
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4173), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4168)
		} // end switch yys4168
	} // end for yyj4168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4175 int
	var yyb4175 bool
	var yyhl4175 bool = l >= 0
	yyj4175++
	if yyhl4175 {
		yyb4175 = yyj4175 > l
	} else {
		yyb4175 = r.CheckBreak()
	}
	if yyb4175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4175++
	if yyhl4175 {
		yyb4175 = yyj4175 > l
	} else {
		yyb4175 = r.CheckBreak()
	}
	if yyb4175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4175++
	if yyhl4175 {
		yyb4175 = yyj4175 > l
	} else {
		yyb4175 = r.CheckBreak()
	}
	if yyb4175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4178 := &x.ListMeta
		yym4179 := z.DecBinary()
		_ = yym4179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4178) {
		} else {
			z.DecFallback(yyv4178, false)
		}
	}
	yyj4175++
	if yyhl4175 {
		yyb4175 = yyj4175 > l
	} else {
		yyb4175 = r.CheckBreak()
	}
	if yyb4175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4180 := &x.Items
		yym4181 := z.DecBinary()
		_ = yym4181
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4180), d)
		}
	}
	for {
		yyj4175++
		if yyhl4175 {
			yyb4175 = yyj4175 > l
		} else {
			yyb4175 = r.CheckBreak()
		}
		if yyb4175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4182 := z.EncBinary()
	_ = yym4182
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4183 := z.DecBinary()
	_ = yym4183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4184 := z.EncBinary()
	_ = yym4184
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4185 := z.DecBinary()
	_ = yym4185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4186 := z.EncBinary()
		_ = yym4186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4187 := !z.EncBinary()
			yy2arr4187 := z.EncBasicHandle().StructToArray
			var yyq4187 [4]bool
			_, _, _ = yysep4187, yyq4187, yy2arr4187
			const yyr4187 bool = false
			yyq4187[2] = x.Message != ""
			yyq4187[3] = x.Error != ""
			var yynn4187 int
			if yyr4187 || yy2arr4187 {
				r.EncodeArrayStart(4)
			} else {
				yynn4187 = 2
				for _, b := range yyq4187 {
					if b {
						yynn4187++
					}
				}
				r.EncodeMapStart(yynn4187)
				yynn4187 = 0
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[2] {
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[3] {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4187[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4196 := z.DecBinary()
	_ = yym4196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4197 := r.ContainerType()
		if yyct4197 == codecSelferValueTypeMap1234 {
			yyl4197 := r.ReadMapStart()
			if yyl4197 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4197, d)
			}
		} else if yyct4197 == codecSelferValueTypeArray1234 {
			yyl4197 := r.ReadArrayStart()
			if yyl4197 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4198Slc
	var yyhl4198 bool = l >= 0
	for yyj4198 := 0; ; yyj4198++ {
		if yyhl4198 {
			if yyj4198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4198Slc = r.DecodeBytes(yys4198Slc, true, true)
		yys4198 := string(yys4198Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4198 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4198)
		} // end switch yys4198
	} // end for yyj4198
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4203 int
	var yyb4203 bool
	var yyhl4203 bool = l >= 0
	yyj4203++
	if yyhl4203 {
		yyb4203 = yyj4203 > l
	} else {
		yyb4203 = r.CheckBreak()
	}
	if yyb4203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4203++
	if yyhl4203 {
		yyb4203 = yyj4203 > l
	} else {
		yyb4203 = r.CheckBreak()
	}
	if yyb4203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4203++
	if yyhl4203 {
		yyb4203 = yyj4203 > l
	} else {
		yyb4203 = r.CheckBreak()
	}
	if yyb4203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4203++
	if yyhl4203 {
		yyb4203 = yyj4203 > l
	} else {
		yyb4203 = r.CheckBreak()
	}
	if yyb4203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4203++
		if yyhl4203 {
			yyb4203 = yyj4203 > l
		} else {
			yyb4203 = r.CheckBreak()
		}
		if yyb4203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4208 := z.EncBinary()
		_ = yym4208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4209 := !z.EncBinary()
			yy2arr4209 := z.EncBasicHandle().StructToArray
			var yyq4209 [4]bool
			_, _, _ = yysep4209, yyq4209, yy2arr4209
			const yyr4209 bool = false
			yyq4209[0] = x.Kind != ""
			yyq4209[1] = x.APIVersion != ""
			yyq4209[2] = true
			yyq4209[3] = len(x.Conditions) != 0
			var yynn4209 int
			if yyr4209 || yy2arr4209 {
				r.EncodeArrayStart(4)
			} else {
				yynn4209 = 0
				for _, b := range yyq4209 {
					if b {
						yynn4209++
					}
				}
				r.EncodeMapStart(yynn4209)
				yynn4209 = 0
			}
			if yyr4209 || yy2arr4209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4209[0] {
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4212 := z.EncBinary()
					_ = yym4212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4209 || yy2arr4209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4209[1] {
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4209 || yy2arr4209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4209[2] {
					yy4217 := &x.ObjectMeta
					yy4217.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4209[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4218 := &x.ObjectMeta
					yy4218.CodecEncodeSelf(e)
				}
			}
			if yyr4209 || yy2arr4209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4209[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4220 := z.EncBinary()
						_ = yym4220
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4209[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4221 := z.EncBinary()
						_ = yym4221
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4209 || yy2arr4209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4222 := z.DecBinary()
	_ = yym4222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4223 := r.ContainerType()
		if yyct4223 == codecSelferValueTypeMap1234 {
			yyl4223 := r.ReadMapStart()
			if yyl4223 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4223, d)
			}
		} else if yyct4223 == codecSelferValueTypeArray1234 {
			yyl4223 := r.ReadArrayStart()
			if yyl4223 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4224Slc
	var yyhl4224 bool = l >= 0
	for yyj4224 := 0; ; yyj4224++ {
		if yyhl4224 {
			if yyj4224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4224Slc = r.DecodeBytes(yys4224Slc, true, true)
		yys4224 := string(yys4224Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4224 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4227 := &x.ObjectMeta
				yyv4227.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4228 := &x.Conditions
				yym4229 := z.DecBinary()
				_ = yym4229
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4228), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4224)
		} // end switch yys4224
	} // end for yyj4224
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4230 int
	var yyb4230 bool
	var yyhl4230 bool = l >= 0
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4233 := &x.ObjectMeta
		yyv4233.CodecDecodeSelf(d)
	}
	yyj4230++
	if yyhl4230 {
		yyb4230 = yyj4230 > l
	} else {
		yyb4230 = r.CheckBreak()
	}
	if yyb4230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4234 := &x.Conditions
		yym4235 := z.DecBinary()
		_ = yym4235
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4234), d)
		}
	}
	for {
		yyj4230++
		if yyhl4230 {
			yyb4230 = yyj4230 > l
		} else {
			yyb4230 = r.CheckBreak()
		}
		if yyb4230 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4230-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4236 := z.EncBinary()
		_ = yym4236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4237 := !z.EncBinary()
			yy2arr4237 := z.EncBasicHandle().StructToArray
			var yyq4237 [4]bool
			_, _, _ = yysep4237, yyq4237, yy2arr4237
			const yyr4237 bool = false
			yyq4237[0] = x.Kind != ""
			yyq4237[1] = x.APIVersion != ""
			yyq4237[2] = true
			var yynn4237 int
			if yyr4237 || yy2arr4237 {
				r.EncodeArrayStart(4)
			} else {
				yynn4237 = 1
				for _, b := range yyq4237 {
					if b {
						yynn4237++
					}
				}
				r.EncodeMapStart(yynn4237)
				yynn4237 = 0
			}
			if yyr4237 || yy2arr4237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4237[0] {
					yym4239 := z.EncBinary()
					_ = yym4239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4237[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4237 || yy2arr4237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4237[1] {
					yym4242 := z.EncBinary()
					_ = yym4242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4237[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4243 := z.EncBinary()
					_ = yym4243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4237 || yy2arr4237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4237[2] {
					yy4245 := &x.ListMeta
					yym4246 := z.EncBinary()
					_ = yym4246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4245) {
					} else {
						z.EncFallback(yy4245)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4237[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4247 := &x.ListMeta
					yym4248 := z.EncBinary()
					_ = yym4248
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4247) {
					} else {
						z.EncFallback(yy4247)
					}
				}
			}
			if yyr4237 || yy2arr4237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4250 := z.EncBinary()
					_ = yym4250
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4251 := z.EncBinary()
					_ = yym4251
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4237 || yy2arr4237 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4252 := z.DecBinary()
	_ = yym4252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4253 := r.ContainerType()
		if yyct4253 == codecSelferValueTypeMap1234 {
			yyl4253 := r.ReadMapStart()
			if yyl4253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4253, d)
			}
		} else if yyct4253 == codecSelferValueTypeArray1234 {
			yyl4253 := r.ReadArrayStart()
			if yyl4253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4254Slc
	var yyhl4254 bool = l >= 0
	for yyj4254 := 0; ; yyj4254++ {
		if yyhl4254 {
			if yyj4254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4254Slc = r.DecodeBytes(yys4254Slc, true, true)
		yys4254 := string(yys4254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4254 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4257 := &x.ListMeta
				yym4258 := z.DecBinary()
				_ = yym4258
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4257) {
				} else {
					z.DecFallback(yyv4257, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4259 := &x.Items
				yym4260 := z.DecBinary()
				_ = yym4260
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4259), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4254)
		} // end switch yys4254
	} // end for yyj4254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4261 int
	var yyb4261 bool
	var yyhl4261 bool = l >= 0
	yyj4261++
	if yyhl4261 {
		yyb4261 = yyj4261 > l
	} else {
		yyb4261 = r.CheckBreak()
	}
	if yyb4261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4261++
	if yyhl4261 {
		yyb4261 = yyj4261 > l
	} else {
		yyb4261 = r.CheckBreak()
	}
	if yyb4261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4261++
	if yyhl4261 {
		yyb4261 = yyj4261 > l
	} else {
		yyb4261 = r.CheckBreak()
	}
	if yyb4261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4264 := &x.ListMeta
		yym4265 := z.DecBinary()
		_ = yym4265
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4264) {
		} else {
			z.DecFallback(yyv4264, false)
		}
	}
	yyj4261++
	if yyhl4261 {
		yyb4261 = yyj4261 > l
	} else {
		yyb4261 = r.CheckBreak()
	}
	if yyb4261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4266 := &x.Items
		yym4267 := z.DecBinary()
		_ = yym4267
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4266), d)
		}
	}
	for {
		yyj4261++
		if yyhl4261 {
			yyb4261 = yyj4261 > l
		} else {
			yyb4261 = r.CheckBreak()
		}
		if yyb4261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4268 := z.EncBinary()
		_ = yym4268
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4269 := !z.EncBinary()
			yy2arr4269 := z.EncBasicHandle().StructToArray
			var yyq4269 [6]bool
			_, _, _ = yysep4269, yyq4269, yy2arr4269
			const yyr4269 bool = false
			yyq4269[0] = x.Capabilities != nil
			yyq4269[1] = x.Privileged != nil
			yyq4269[2] = x.SELinuxOptions != nil
			yyq4269[3] = x.RunAsUser != nil
			yyq4269[4] = x.RunAsNonRoot != nil
			yyq4269[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4269 int
			if yyr4269 || yy2arr4269 {
				r.EncodeArrayStart(6)
			} else {
				yynn4269 = 0
				for _, b := range yyq4269 {
					if b {
						yynn4269++
					}
				}
				r.EncodeMapStart(yynn4269)
				yynn4269 = 0
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4269[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4272 := *x.Privileged
						yym4273 := z.EncBinary()
						_ = yym4273
						if false {
						} else {
							r.EncodeBool(bool(yy4272))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4269[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4274 := *x.Privileged
						yym4275 := z.EncBinary()
						_ = yym4275
						if false {
						} else {
							r.EncodeBool(bool(yy4274))
						}
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4269[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4278 := *x.RunAsUser
						yym4279 := z.EncBinary()
						_ = yym4279
						if false {
						} else {
							r.EncodeInt(int64(yy4278))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4269[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4280 := *x.RunAsUser
						yym4281 := z.EncBinary()
						_ = yym4281
						if false {
						} else {
							r.EncodeInt(int64(yy4280))
						}
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4283 := *x.RunAsNonRoot
						yym4284 := z.EncBinary()
						_ = yym4284
						if false {
						} else {
							r.EncodeBool(bool(yy4283))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4269[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4285 := *x.RunAsNonRoot
						yym4286 := z.EncBinary()
						_ = yym4286
						if false {
						} else {
							r.EncodeBool(bool(yy4285))
						}
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4269[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4288 := *x.ReadOnlyRootFilesystem
						yym4289 := z.EncBinary()
						_ = yym4289
						if false {
						} else {
							r.EncodeBool(bool(yy4288))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4269[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4290 := *x.ReadOnlyRootFilesystem
						yym4291 := z.EncBinary()
						_ = yym4291
						if false {
						} else {
							r.EncodeBool(bool(yy4290))
						}
					}
				}
			}
			if yyr4269 || yy2arr4269 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4292 := z.DecBinary()
	_ = yym4292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4293 := r.ContainerType()
		if yyct4293 == codecSelferValueTypeMap1234 {
			yyl4293 := r.ReadMapStart()
			if yyl4293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4293, d)
			}
		} else if yyct4293 == codecSelferValueTypeArray1234 {
			yyl4293 := r.ReadArrayStart()
			if yyl4293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4294Slc
	var yyhl4294 bool = l >= 0
	for yyj4294 := 0; ; yyj4294++ {
		if yyhl4294 {
			if yyj4294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4294Slc = r.DecodeBytes(yys4294Slc, true, true)
		yys4294 := string(yys4294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4294 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4297 := z.DecBinary()
				_ = yym4297
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4300 := z.DecBinary()
				_ = yym4300
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4302 := z.DecBinary()
				_ = yym4302
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4304 := z.DecBinary()
				_ = yym4304
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4294)
		} // end switch yys4294
	} // end for yyj4294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4305 int
	var yyb4305 bool
	var yyhl4305 bool = l >= 0
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4308 := z.DecBinary()
		_ = yym4308
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4311 := z.DecBinary()
		_ = yym4311
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4313 := z.DecBinary()
		_ = yym4313
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4315 := z.DecBinary()
		_ = yym4315
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4305++
		if yyhl4305 {
			yyb4305 = yyj4305 > l
		} else {
			yyb4305 = r.CheckBreak()
		}
		if yyb4305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4316 := z.EncBinary()
		_ = yym4316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4317 := !z.EncBinary()
			yy2arr4317 := z.EncBasicHandle().StructToArray
			var yyq4317 [4]bool
			_, _, _ = yysep4317, yyq4317, yy2arr4317
			const yyr4317 bool = false
			yyq4317[0] = x.User != ""
			yyq4317[1] = x.Role != ""
			yyq4317[2] = x.Type != ""
			yyq4317[3] = x.Level != ""
			var yynn4317 int
			if yyr4317 || yy2arr4317 {
				r.EncodeArrayStart(4)
			} else {
				yynn4317 = 0
				for _, b := range yyq4317 {
					if b {
						yynn4317++
					}
				}
				r.EncodeMapStart(yynn4317)
				yynn4317 = 0
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4317[0] {
					yym4319 := z.EncBinary()
					_ = yym4319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4320 := z.EncBinary()
					_ = yym4320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4317[1] {
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4323 := z.EncBinary()
					_ = yym4323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4317[2] {
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4317[3] {
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4317[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4330 := z.DecBinary()
	_ = yym4330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4331 := r.ContainerType()
		if yyct4331 == codecSelferValueTypeMap1234 {
			yyl4331 := r.ReadMapStart()
			if yyl4331 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4331, d)
			}
		} else if yyct4331 == codecSelferValueTypeArray1234 {
			yyl4331 := r.ReadArrayStart()
			if yyl4331 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4331, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4332Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4332Slc
	var yyhl4332 bool = l >= 0
	for yyj4332 := 0; ; yyj4332++ {
		if yyhl4332 {
			if yyj4332 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4332Slc = r.DecodeBytes(yys4332Slc, true, true)
		yys4332 := string(yys4332Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4332 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4332)
		} // end switch yys4332
	} // end for yyj4332
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4337 int
	var yyb4337 bool
	var yyhl4337 bool = l >= 0
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4337++
		if yyhl4337 {
			yyb4337 = yyj4337 > l
		} else {
			yyb4337 = r.CheckBreak()
		}
		if yyb4337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4342 := z.EncBinary()
		_ = yym4342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4343 := !z.EncBinary()
			yy2arr4343 := z.EncBasicHandle().StructToArray
			var yyq4343 [5]bool
			_, _, _ = yysep4343, yyq4343, yy2arr4343
			const yyr4343 bool = false
			yyq4343[0] = x.Kind != ""
			yyq4343[1] = x.APIVersion != ""
			yyq4343[2] = true
			var yynn4343 int
			if yyr4343 || yy2arr4343 {
				r.EncodeArrayStart(5)
			} else {
				yynn4343 = 2
				for _, b := range yyq4343 {
					if b {
						yynn4343++
					}
				}
				r.EncodeMapStart(yynn4343)
				yynn4343 = 0
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[0] {
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[1] {
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[2] {
					yy4351 := &x.ObjectMeta
					yy4351.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4343[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4352 := &x.ObjectMeta
					yy4352.CodecEncodeSelf(e)
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4354 := z.EncBinary()
				_ = yym4354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4355 := z.EncBinary()
				_ = yym4355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4357 := z.EncBinary()
					_ = yym4357
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4358 := z.EncBinary()
					_ = yym4358
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4359 := z.DecBinary()
	_ = yym4359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4360 := r.ContainerType()
		if yyct4360 == codecSelferValueTypeMap1234 {
			yyl4360 := r.ReadMapStart()
			if yyl4360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4360, d)
			}
		} else if yyct4360 == codecSelferValueTypeArray1234 {
			yyl4360 := r.ReadArrayStart()
			if yyl4360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4361Slc
	var yyhl4361 bool = l >= 0
	for yyj4361 := 0; ; yyj4361++ {
		if yyhl4361 {
			if yyj4361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4361Slc = r.DecodeBytes(yys4361Slc, true, true)
		yys4361 := string(yys4361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4361 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4364 := &x.ObjectMeta
				yyv4364.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4366 := &x.Data
				yym4367 := z.DecBinary()
				_ = yym4367
				if false {
				} else {
					*yyv4366 = r.DecodeBytes(*(*[]byte)(yyv4366), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4361)
		} // end switch yys4361
	} // end for yyj4361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4368 int
	var yyb4368 bool
	var yyhl4368 bool = l >= 0
	yyj4368++
	if yyhl4368 {
		yyb4368 = yyj4368 > l
	} else {
		yyb4368 = r.CheckBreak()
	}
	if yyb4368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4368++
	if yyhl4368 {
		yyb4368 = yyj4368 > l
	} else {
		yyb4368 = r.CheckBreak()
	}
	if yyb4368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4368++
	if yyhl4368 {
		yyb4368 = yyj4368 > l
	} else {
		yyb4368 = r.CheckBreak()
	}
	if yyb4368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4371 := &x.ObjectMeta
		yyv4371.CodecDecodeSelf(d)
	}
	yyj4368++
	if yyhl4368 {
		yyb4368 = yyj4368 > l
	} else {
		yyb4368 = r.CheckBreak()
	}
	if yyb4368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4368++
	if yyhl4368 {
		yyb4368 = yyj4368 > l
	} else {
		yyb4368 = r.CheckBreak()
	}
	if yyb4368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4373 := &x.Data
		yym4374 := z.DecBinary()
		_ = yym4374
		if false {
		} else {
			*yyv4373 = r.DecodeBytes(*(*[]byte)(yyv4373), false, false)
		}
	}
	for {
		yyj4368++
		if yyhl4368 {
			yyb4368 = yyj4368 > l
		} else {
			yyb4368 = r.CheckBreak()
		}
		if yyb4368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4375 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4376 := &yyv4375
		yy4376.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4377 := *v
	yyh4377, yyl4377 := z.DecSliceHelperStart()
	var yyc4377 bool
	if yyl4377 == 0 {
		if yyv4377 == nil {
			yyv4377 = []OwnerReference{}
			yyc4377 = true
		} else if len(yyv4377) != 0 {
			yyv4377 = yyv4377[:0]
			yyc4377 = true
		}
	} else if yyl4377 > 0 {
		var yyrr4377, yyrl4377 int
		var yyrt4377 bool
		if yyl4377 > cap(yyv4377) {

			yyrg4377 := len(yyv4377) > 0
			yyv24377 := yyv4377
			yyrl4377, yyrt4377 = z.DecInferLen(yyl4377, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4377 {
				if yyrl4377 <= cap(yyv4377) {
					yyv4377 = yyv4377[:yyrl4377]
				} else {
					yyv4377 = make([]OwnerReference, yyrl4377)
				}
			} else {
				yyv4377 = make([]OwnerReference, yyrl4377)
			}
			yyc4377 = true
			yyrr4377 = len(yyv4377)
			if yyrg4377 {
				copy(yyv4377, yyv24377)
			}
		} else if yyl4377 != len(yyv4377) {
			yyv4377 = yyv4377[:yyl4377]
			yyc4377 = true
		}
		yyj4377 := 0
		for ; yyj4377 < yyrr4377; yyj4377++ {
			yyh4377.ElemContainerState(yyj4377)
			if r.TryDecodeAsNil() {
				yyv4377[yyj4377] = OwnerReference{}
			} else {
				yyv4378 := &yyv4377[yyj4377]
				yyv4378.CodecDecodeSelf(d)
			}

		}
		if yyrt4377 {
			for ; yyj4377 < yyl4377; yyj4377++ {
				yyv4377 = append(yyv4377, OwnerReference{})
				yyh4377.ElemContainerState(yyj4377)
				if r.TryDecodeAsNil() {
					yyv4377[yyj4377] = OwnerReference{}
				} else {
					yyv4379 := &yyv4377[yyj4377]
					yyv4379.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4377 := 0
		for ; !r.CheckBreak(); yyj4377++ {

			if yyj4377 >= len(yyv4377) {
				yyv4377 = append(yyv4377, OwnerReference{}) // var yyz4377 OwnerReference
				yyc4377 = true
			}
			yyh4377.ElemContainerState(yyj4377)
			if yyj4377 < len(yyv4377) {
				if r.TryDecodeAsNil() {
					yyv4377[yyj4377] = OwnerReference{}
				} else {
					yyv4380 := &yyv4377[yyj4377]
					yyv4380.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4377 < len(yyv4377) {
			yyv4377 = yyv4377[:yyj4377]
			yyc4377 = true
		} else if yyj4377 == 0 && yyv4377 == nil {
			yyv4377 = []OwnerReference{}
			yyc4377 = true
		}
	}
	yyh4377.End()
	if yyc4377 {
		*v = yyv4377
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4381 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4381.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4382 := *v
	yyh4382, yyl4382 := z.DecSliceHelperStart()
	var yyc4382 bool
	if yyl4382 == 0 {
		if yyv4382 == nil {
			yyv4382 = []PersistentVolumeAccessMode{}
			yyc4382 = true
		} else if len(yyv4382) != 0 {
			yyv4382 = yyv4382[:0]
			yyc4382 = true
		}
	} else if yyl4382 > 0 {
		var yyrr4382, yyrl4382 int
		var yyrt4382 bool
		if yyl4382 > cap(yyv4382) {

			yyrl4382, yyrt4382 = z.DecInferLen(yyl4382, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4382 {
				if yyrl4382 <= cap(yyv4382) {
					yyv4382 = yyv4382[:yyrl4382]
				} else {
					yyv4382 = make([]PersistentVolumeAccessMode, yyrl4382)
				}
			} else {
				yyv4382 = make([]PersistentVolumeAccessMode, yyrl4382)
			}
			yyc4382 = true
			yyrr4382 = len(yyv4382)
		} else if yyl4382 != len(yyv4382) {
			yyv4382 = yyv4382[:yyl4382]
			yyc4382 = true
		}
		yyj4382 := 0
		for ; yyj4382 < yyrr4382; yyj4382++ {
			yyh4382.ElemContainerState(yyj4382)
			if r.TryDecodeAsNil() {
				yyv4382[yyj4382] = ""
			} else {
				yyv4382[yyj4382] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4382 {
			for ; yyj4382 < yyl4382; yyj4382++ {
				yyv4382 = append(yyv4382, "")
				yyh4382.ElemContainerState(yyj4382)
				if r.TryDecodeAsNil() {
					yyv4382[yyj4382] = ""
				} else {
					yyv4382[yyj4382] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4382 := 0
		for ; !r.CheckBreak(); yyj4382++ {

			if yyj4382 >= len(yyv4382) {
				yyv4382 = append(yyv4382, "") // var yyz4382 PersistentVolumeAccessMode
				yyc4382 = true
			}
			yyh4382.ElemContainerState(yyj4382)
			if yyj4382 < len(yyv4382) {
				if r.TryDecodeAsNil() {
					yyv4382[yyj4382] = ""
				} else {
					yyv4382[yyj4382] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4382 < len(yyv4382) {
			yyv4382 = yyv4382[:yyj4382]
			yyc4382 = true
		} else if yyj4382 == 0 && yyv4382 == nil {
			yyv4382 = []PersistentVolumeAccessMode{}
			yyc4382 = true
		}
	}
	yyh4382.End()
	if yyc4382 {
		*v = yyv4382
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4386 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4387 := &yyv4386
		yy4387.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4388 := *v
	yyh4388, yyl4388 := z.DecSliceHelperStart()
	var yyc4388 bool
	if yyl4388 == 0 {
		if yyv4388 == nil {
			yyv4388 = []PersistentVolume{}
			yyc4388 = true
		} else if len(yyv4388) != 0 {
			yyv4388 = yyv4388[:0]
			yyc4388 = true
		}
	} else if yyl4388 > 0 {
		var yyrr4388, yyrl4388 int
		var yyrt4388 bool
		if yyl4388 > cap(yyv4388) {

			yyrg4388 := len(yyv4388) > 0
			yyv24388 := yyv4388
			yyrl4388, yyrt4388 = z.DecInferLen(yyl4388, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt4388 {
				if yyrl4388 <= cap(yyv4388) {
					yyv4388 = yyv4388[:yyrl4388]
				} else {
					yyv4388 = make([]PersistentVolume, yyrl4388)
				}
			} else {
				yyv4388 = make([]PersistentVolume, yyrl4388)
			}
			yyc4388 = true
			yyrr4388 = len(yyv4388)
			if yyrg4388 {
				copy(yyv4388, yyv24388)
			}
		} else if yyl4388 != len(yyv4388) {
			yyv4388 = yyv4388[:yyl4388]
			yyc4388 = true
		}
		yyj4388 := 0
		for ; yyj4388 < yyrr4388; yyj4388++ {
			yyh4388.ElemContainerState(yyj4388)
			if r.TryDecodeAsNil() {
				yyv4388[yyj4388] = PersistentVolume{}
			} else {
				yyv4389 := &yyv4388[yyj4388]
				yyv4389.CodecDecodeSelf(d)
			}

		}
		if yyrt4388 {
			for ; yyj4388 < yyl4388; yyj4388++ {
				yyv4388 = append(yyv4388, PersistentVolume{})
				yyh4388.ElemContainerState(yyj4388)
				if r.TryDecodeAsNil() {
					yyv4388[yyj4388] = PersistentVolume{}
				} else {
					yyv4390 := &yyv4388[yyj4388]
					yyv4390.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4388 := 0
		for ; !r.CheckBreak(); yyj4388++ {

			if yyj4388 >= len(yyv4388) {
				yyv4388 = append(yyv4388, PersistentVolume{}) // var yyz4388 PersistentVolume
				yyc4388 = true
			}
			yyh4388.ElemContainerState(yyj4388)
			if yyj4388 < len(yyv4388) {
				if r.TryDecodeAsNil() {
					yyv4388[yyj4388] = PersistentVolume{}
				} else {
					yyv4391 := &yyv4388[yyj4388]
					yyv4391.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4388 < len(yyv4388) {
			yyv4388 = yyv4388[:yyj4388]
			yyc4388 = true
		} else if yyj4388 == 0 && yyv4388 == nil {
			yyv4388 = []PersistentVolume{}
			yyc4388 = true
		}
	}
	yyh4388.End()
	if yyc4388 {
		*v = yyv4388
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4392 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4393 := &yyv4392
		yy4393.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4394 := *v
	yyh4394, yyl4394 := z.DecSliceHelperStart()
	var yyc4394 bool
	if yyl4394 == 0 {
		if yyv4394 == nil {
			yyv4394 = []PersistentVolumeClaim{}
			yyc4394 = true
		} else if len(yyv4394) != 0 {
			yyv4394 = yyv4394[:0]
			yyc4394 = true
		}
	} else if yyl4394 > 0 {
		var yyrr4394, yyrl4394 int
		var yyrt4394 bool
		if yyl4394 > cap(yyv4394) {

			yyrg4394 := len(yyv4394) > 0
			yyv24394 := yyv4394
			yyrl4394, yyrt4394 = z.DecInferLen(yyl4394, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4394 {
				if yyrl4394 <= cap(yyv4394) {
					yyv4394 = yyv4394[:yyrl4394]
				} else {
					yyv4394 = make([]PersistentVolumeClaim, yyrl4394)
				}
			} else {
				yyv4394 = make([]PersistentVolumeClaim, yyrl4394)
			}
			yyc4394 = true
			yyrr4394 = len(yyv4394)
			if yyrg4394 {
				copy(yyv4394, yyv24394)
			}
		} else if yyl4394 != len(yyv4394) {
			yyv4394 = yyv4394[:yyl4394]
			yyc4394 = true
		}
		yyj4394 := 0
		for ; yyj4394 < yyrr4394; yyj4394++ {
			yyh4394.ElemContainerState(yyj4394)
			if r.TryDecodeAsNil() {
				yyv4394[yyj4394] = PersistentVolumeClaim{}
			} else {
				yyv4395 := &yyv4394[yyj4394]
				yyv4395.CodecDecodeSelf(d)
			}

		}
		if yyrt4394 {
			for ; yyj4394 < yyl4394; yyj4394++ {
				yyv4394 = append(yyv4394, PersistentVolumeClaim{})
				yyh4394.ElemContainerState(yyj4394)
				if r.TryDecodeAsNil() {
					yyv4394[yyj4394] = PersistentVolumeClaim{}
				} else {
					yyv4396 := &yyv4394[yyj4394]
					yyv4396.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4394 := 0
		for ; !r.CheckBreak(); yyj4394++ {

			if yyj4394 >= len(yyv4394) {
				yyv4394 = append(yyv4394, PersistentVolumeClaim{}) // var yyz4394 PersistentVolumeClaim
				yyc4394 = true
			}
			yyh4394.ElemContainerState(yyj4394)
			if yyj4394 < len(yyv4394) {
				if r.TryDecodeAsNil() {
					yyv4394[yyj4394] = PersistentVolumeClaim{}
				} else {
					yyv4397 := &yyv4394[yyj4394]
					yyv4397.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4394 < len(yyv4394) {
			yyv4394 = yyv4394[:yyj4394]
			yyc4394 = true
		} else if yyj4394 == 0 && yyv4394 == nil {
			yyv4394 = []PersistentVolumeClaim{}
			yyc4394 = true
		}
	}
	yyh4394.End()
	if yyc4394 {
		*v = yyv4394
	}
}

func (x codecSelfer1234) encSliceFlexVolumeOptionsItem(v []FlexVolumeOptionsItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4398 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4399 := &yyv4398
		yy4399.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFlexVolumeOptionsItem(v *[]FlexVolumeOptionsItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4400 := *v
	yyh4400, yyl4400 := z.DecSliceHelperStart()
	var yyc4400 bool
	if yyl4400 == 0 {
		if yyv4400 == nil {
			yyv4400 = []FlexVolumeOptionsItem{}
			yyc4400 = true
		} else if len(yyv4400) != 0 {
			yyv4400 = yyv4400[:0]
			yyc4400 = true
		}
	} else if yyl4400 > 0 {
		var yyrr4400, yyrl4400 int
		var yyrt4400 bool
		if yyl4400 > cap(yyv4400) {

			yyrg4400 := len(yyv4400) > 0
			yyv24400 := yyv4400
			yyrl4400, yyrt4400 = z.DecInferLen(yyl4400, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4400 {
				if yyrl4400 <= cap(yyv4400) {
					yyv4400 = yyv4400[:yyrl4400]
				} else {
					yyv4400 = make([]FlexVolumeOptionsItem, yyrl4400)
				}
			} else {
				yyv4400 = make([]FlexVolumeOptionsItem, yyrl4400)
			}
			yyc4400 = true
			yyrr4400 = len(yyv4400)
			if yyrg4400 {
				copy(yyv4400, yyv24400)
			}
		} else if yyl4400 != len(yyv4400) {
			yyv4400 = yyv4400[:yyl4400]
			yyc4400 = true
		}
		yyj4400 := 0
		for ; yyj4400 < yyrr4400; yyj4400++ {
			yyh4400.ElemContainerState(yyj4400)
			if r.TryDecodeAsNil() {
				yyv4400[yyj4400] = FlexVolumeOptionsItem{}
			} else {
				yyv4401 := &yyv4400[yyj4400]
				yyv4401.CodecDecodeSelf(d)
			}

		}
		if yyrt4400 {
			for ; yyj4400 < yyl4400; yyj4400++ {
				yyv4400 = append(yyv4400, FlexVolumeOptionsItem{})
				yyh4400.ElemContainerState(yyj4400)
				if r.TryDecodeAsNil() {
					yyv4400[yyj4400] = FlexVolumeOptionsItem{}
				} else {
					yyv4402 := &yyv4400[yyj4400]
					yyv4402.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4400 := 0
		for ; !r.CheckBreak(); yyj4400++ {

			if yyj4400 >= len(yyv4400) {
				yyv4400 = append(yyv4400, FlexVolumeOptionsItem{}) // var yyz4400 FlexVolumeOptionsItem
				yyc4400 = true
			}
			yyh4400.ElemContainerState(yyj4400)
			if yyj4400 < len(yyv4400) {
				if r.TryDecodeAsNil() {
					yyv4400[yyj4400] = FlexVolumeOptionsItem{}
				} else {
					yyv4403 := &yyv4400[yyj4400]
					yyv4403.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4400 < len(yyv4400) {
			yyv4400 = yyv4400[:yyj4400]
			yyc4400 = true
		} else if yyj4400 == 0 && yyv4400 == nil {
			yyv4400 = []FlexVolumeOptionsItem{}
			yyc4400 = true
		}
	}
	yyh4400.End()
	if yyc4400 {
		*v = yyv4400
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4404 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4405 := &yyv4404
		yy4405.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4406 := *v
	yyh4406, yyl4406 := z.DecSliceHelperStart()
	var yyc4406 bool
	if yyl4406 == 0 {
		if yyv4406 == nil {
			yyv4406 = []KeyToPath{}
			yyc4406 = true
		} else if len(yyv4406) != 0 {
			yyv4406 = yyv4406[:0]
			yyc4406 = true
		}
	} else if yyl4406 > 0 {
		var yyrr4406, yyrl4406 int
		var yyrt4406 bool
		if yyl4406 > cap(yyv4406) {

			yyrg4406 := len(yyv4406) > 0
			yyv24406 := yyv4406
			yyrl4406, yyrt4406 = z.DecInferLen(yyl4406, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4406 {
				if yyrl4406 <= cap(yyv4406) {
					yyv4406 = yyv4406[:yyrl4406]
				} else {
					yyv4406 = make([]KeyToPath, yyrl4406)
				}
			} else {
				yyv4406 = make([]KeyToPath, yyrl4406)
			}
			yyc4406 = true
			yyrr4406 = len(yyv4406)
			if yyrg4406 {
				copy(yyv4406, yyv24406)
			}
		} else if yyl4406 != len(yyv4406) {
			yyv4406 = yyv4406[:yyl4406]
			yyc4406 = true
		}
		yyj4406 := 0
		for ; yyj4406 < yyrr4406; yyj4406++ {
			yyh4406.ElemContainerState(yyj4406)
			if r.TryDecodeAsNil() {
				yyv4406[yyj4406] = KeyToPath{}
			} else {
				yyv4407 := &yyv4406[yyj4406]
				yyv4407.CodecDecodeSelf(d)
			}

		}
		if yyrt4406 {
			for ; yyj4406 < yyl4406; yyj4406++ {
				yyv4406 = append(yyv4406, KeyToPath{})
				yyh4406.ElemContainerState(yyj4406)
				if r.TryDecodeAsNil() {
					yyv4406[yyj4406] = KeyToPath{}
				} else {
					yyv4408 := &yyv4406[yyj4406]
					yyv4408.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4406 := 0
		for ; !r.CheckBreak(); yyj4406++ {

			if yyj4406 >= len(yyv4406) {
				yyv4406 = append(yyv4406, KeyToPath{}) // var yyz4406 KeyToPath
				yyc4406 = true
			}
			yyh4406.ElemContainerState(yyj4406)
			if yyj4406 < len(yyv4406) {
				if r.TryDecodeAsNil() {
					yyv4406[yyj4406] = KeyToPath{}
				} else {
					yyv4409 := &yyv4406[yyj4406]
					yyv4409.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4406 < len(yyv4406) {
			yyv4406 = yyv4406[:yyj4406]
			yyc4406 = true
		} else if yyj4406 == 0 && yyv4406 == nil {
			yyv4406 = []KeyToPath{}
			yyc4406 = true
		}
	}
	yyh4406.End()
	if yyc4406 {
		*v = yyv4406
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4410 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4411 := &yyv4410
		yy4411.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4412 := *v
	yyh4412, yyl4412 := z.DecSliceHelperStart()
	var yyc4412 bool
	if yyl4412 == 0 {
		if yyv4412 == nil {
			yyv4412 = []DownwardAPIVolumeFile{}
			yyc4412 = true
		} else if len(yyv4412) != 0 {
			yyv4412 = yyv4412[:0]
			yyc4412 = true
		}
	} else if yyl4412 > 0 {
		var yyrr4412, yyrl4412 int
		var yyrt4412 bool
		if yyl4412 > cap(yyv4412) {

			yyrg4412 := len(yyv4412) > 0
			yyv24412 := yyv4412
			yyrl4412, yyrt4412 = z.DecInferLen(yyl4412, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4412 {
				if yyrl4412 <= cap(yyv4412) {
					yyv4412 = yyv4412[:yyrl4412]
				} else {
					yyv4412 = make([]DownwardAPIVolumeFile, yyrl4412)
				}
			} else {
				yyv4412 = make([]DownwardAPIVolumeFile, yyrl4412)
			}
			yyc4412 = true
			yyrr4412 = len(yyv4412)
			if yyrg4412 {
				copy(yyv4412, yyv24412)
			}
		} else if yyl4412 != len(yyv4412) {
			yyv4412 = yyv4412[:yyl4412]
			yyc4412 = true
		}
		yyj4412 := 0
		for ; yyj4412 < yyrr4412; yyj4412++ {
			yyh4412.ElemContainerState(yyj4412)
			if r.TryDecodeAsNil() {
				yyv4412[yyj4412] = DownwardAPIVolumeFile{}
			} else {
				yyv4413 := &yyv4412[yyj4412]
				yyv4413.CodecDecodeSelf(d)
			}

		}
		if yyrt4412 {
			for ; yyj4412 < yyl4412; yyj4412++ {
				yyv4412 = append(yyv4412, DownwardAPIVolumeFile{})
				yyh4412.ElemContainerState(yyj4412)
				if r.TryDecodeAsNil() {
					yyv4412[yyj4412] = DownwardAPIVolumeFile{}
				} else {
					yyv4414 := &yyv4412[yyj4412]
					yyv4414.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4412 := 0
		for ; !r.CheckBreak(); yyj4412++ {

			if yyj4412 >= len(yyv4412) {
				yyv4412 = append(yyv4412, DownwardAPIVolumeFile{}) // var yyz4412 DownwardAPIVolumeFile
				yyc4412 = true
			}
			yyh4412.ElemContainerState(yyj4412)
			if yyj4412 < len(yyv4412) {
				if r.TryDecodeAsNil() {
					yyv4412[yyj4412] = DownwardAPIVolumeFile{}
				} else {
					yyv4415 := &yyv4412[yyj4412]
					yyv4415.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4412 < len(yyv4412) {
			yyv4412 = yyv4412[:yyj4412]
			yyc4412 = true
		} else if yyj4412 == 0 && yyv4412 == nil {
			yyv4412 = []DownwardAPIVolumeFile{}
			yyc4412 = true
		}
	}
	yyh4412.End()
	if yyc4412 {
		*v = yyv4412
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4416 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4417 := &yyv4416
		yy4417.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4418 := *v
	yyh4418, yyl4418 := z.DecSliceHelperStart()
	var yyc4418 bool
	if yyl4418 == 0 {
		if yyv4418 == nil {
			yyv4418 = []HTTPHeader{}
			yyc4418 = true
		} else if len(yyv4418) != 0 {
			yyv4418 = yyv4418[:0]
			yyc4418 = true
		}
	} else if yyl4418 > 0 {
		var yyrr4418, yyrl4418 int
		var yyrt4418 bool
		if yyl4418 > cap(yyv4418) {

			yyrg4418 := len(yyv4418) > 0
			yyv24418 := yyv4418
			yyrl4418, yyrt4418 = z.DecInferLen(yyl4418, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4418 {
				if yyrl4418 <= cap(yyv4418) {
					yyv4418 = yyv4418[:yyrl4418]
				} else {
					yyv4418 = make([]HTTPHeader, yyrl4418)
				}
			} else {
				yyv4418 = make([]HTTPHeader, yyrl4418)
			}
			yyc4418 = true
			yyrr4418 = len(yyv4418)
			if yyrg4418 {
				copy(yyv4418, yyv24418)
			}
		} else if yyl4418 != len(yyv4418) {
			yyv4418 = yyv4418[:yyl4418]
			yyc4418 = true
		}
		yyj4418 := 0
		for ; yyj4418 < yyrr4418; yyj4418++ {
			yyh4418.ElemContainerState(yyj4418)
			if r.TryDecodeAsNil() {
				yyv4418[yyj4418] = HTTPHeader{}
			} else {
				yyv4419 := &yyv4418[yyj4418]
				yyv4419.CodecDecodeSelf(d)
			}

		}
		if yyrt4418 {
			for ; yyj4418 < yyl4418; yyj4418++ {
				yyv4418 = append(yyv4418, HTTPHeader{})
				yyh4418.ElemContainerState(yyj4418)
				if r.TryDecodeAsNil() {
					yyv4418[yyj4418] = HTTPHeader{}
				} else {
					yyv4420 := &yyv4418[yyj4418]
					yyv4420.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4418 := 0
		for ; !r.CheckBreak(); yyj4418++ {

			if yyj4418 >= len(yyv4418) {
				yyv4418 = append(yyv4418, HTTPHeader{}) // var yyz4418 HTTPHeader
				yyc4418 = true
			}
			yyh4418.ElemContainerState(yyj4418)
			if yyj4418 < len(yyv4418) {
				if r.TryDecodeAsNil() {
					yyv4418[yyj4418] = HTTPHeader{}
				} else {
					yyv4421 := &yyv4418[yyj4418]
					yyv4421.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4418 < len(yyv4418) {
			yyv4418 = yyv4418[:yyj4418]
			yyc4418 = true
		} else if yyj4418 == 0 && yyv4418 == nil {
			yyv4418 = []HTTPHeader{}
			yyc4418 = true
		}
	}
	yyh4418.End()
	if yyc4418 {
		*v = yyv4418
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4422 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4422.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4423 := *v
	yyh4423, yyl4423 := z.DecSliceHelperStart()
	var yyc4423 bool
	if yyl4423 == 0 {
		if yyv4423 == nil {
			yyv4423 = []Capability{}
			yyc4423 = true
		} else if len(yyv4423) != 0 {
			yyv4423 = yyv4423[:0]
			yyc4423 = true
		}
	} else if yyl4423 > 0 {
		var yyrr4423, yyrl4423 int
		var yyrt4423 bool
		if yyl4423 > cap(yyv4423) {

			yyrl4423, yyrt4423 = z.DecInferLen(yyl4423, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4423 {
				if yyrl4423 <= cap(yyv4423) {
					yyv4423 = yyv4423[:yyrl4423]
				} else {
					yyv4423 = make([]Capability, yyrl4423)
				}
			} else {
				yyv4423 = make([]Capability, yyrl4423)
			}
			yyc4423 = true
			yyrr4423 = len(yyv4423)
		} else if yyl4423 != len(yyv4423) {
			yyv4423 = yyv4423[:yyl4423]
			yyc4423 = true
		}
		yyj4423 := 0
		for ; yyj4423 < yyrr4423; yyj4423++ {
			yyh4423.ElemContainerState(yyj4423)
			if r.TryDecodeAsNil() {
				yyv4423[yyj4423] = ""
			} else {
				yyv4423[yyj4423] = Capability(r.DecodeString())
			}

		}
		if yyrt4423 {
			for ; yyj4423 < yyl4423; yyj4423++ {
				yyv4423 = append(yyv4423, "")
				yyh4423.ElemContainerState(yyj4423)
				if r.TryDecodeAsNil() {
					yyv4423[yyj4423] = ""
				} else {
					yyv4423[yyj4423] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4423 := 0
		for ; !r.CheckBreak(); yyj4423++ {

			if yyj4423 >= len(yyv4423) {
				yyv4423 = append(yyv4423, "") // var yyz4423 Capability
				yyc4423 = true
			}
			yyh4423.ElemContainerState(yyj4423)
			if yyj4423 < len(yyv4423) {
				if r.TryDecodeAsNil() {
					yyv4423[yyj4423] = ""
				} else {
					yyv4423[yyj4423] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4423 < len(yyv4423) {
			yyv4423 = yyv4423[:yyj4423]
			yyc4423 = true
		} else if yyj4423 == 0 && yyv4423 == nil {
			yyv4423 = []Capability{}
			yyc4423 = true
		}
	}
	yyh4423.End()
	if yyc4423 {
		*v = yyv4423
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4427 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4428 := &yyv4427
		yy4428.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4429 := *v
	yyh4429, yyl4429 := z.DecSliceHelperStart()
	var yyc4429 bool
	if yyl4429 == 0 {
		if yyv4429 == nil {
			yyv4429 = []ContainerPort{}
			yyc4429 = true
		} else if len(yyv4429) != 0 {
			yyv4429 = yyv4429[:0]
			yyc4429 = true
		}
	} else if yyl4429 > 0 {
		var yyrr4429, yyrl4429 int
		var yyrt4429 bool
		if yyl4429 > cap(yyv4429) {

			yyrg4429 := len(yyv4429) > 0
			yyv24429 := yyv4429
			yyrl4429, yyrt4429 = z.DecInferLen(yyl4429, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4429 {
				if yyrl4429 <= cap(yyv4429) {
					yyv4429 = yyv4429[:yyrl4429]
				} else {
					yyv4429 = make([]ContainerPort, yyrl4429)
				}
			} else {
				yyv4429 = make([]ContainerPort, yyrl4429)
			}
			yyc4429 = true
			yyrr4429 = len(yyv4429)
			if yyrg4429 {
				copy(yyv4429, yyv24429)
			}
		} else if yyl4429 != len(yyv4429) {
			yyv4429 = yyv4429[:yyl4429]
			yyc4429 = true
		}
		yyj4429 := 0
		for ; yyj4429 < yyrr4429; yyj4429++ {
			yyh4429.ElemContainerState(yyj4429)
			if r.TryDecodeAsNil() {
				yyv4429[yyj4429] = ContainerPort{}
			} else {
				yyv4430 := &yyv4429[yyj4429]
				yyv4430.CodecDecodeSelf(d)
			}

		}
		if yyrt4429 {
			for ; yyj4429 < yyl4429; yyj4429++ {
				yyv4429 = append(yyv4429, ContainerPort{})
				yyh4429.ElemContainerState(yyj4429)
				if r.TryDecodeAsNil() {
					yyv4429[yyj4429] = ContainerPort{}
				} else {
					yyv4431 := &yyv4429[yyj4429]
					yyv4431.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4429 := 0
		for ; !r.CheckBreak(); yyj4429++ {

			if yyj4429 >= len(yyv4429) {
				yyv4429 = append(yyv4429, ContainerPort{}) // var yyz4429 ContainerPort
				yyc4429 = true
			}
			yyh4429.ElemContainerState(yyj4429)
			if yyj4429 < len(yyv4429) {
				if r.TryDecodeAsNil() {
					yyv4429[yyj4429] = ContainerPort{}
				} else {
					yyv4432 := &yyv4429[yyj4429]
					yyv4432.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4429 < len(yyv4429) {
			yyv4429 = yyv4429[:yyj4429]
			yyc4429 = true
		} else if yyj4429 == 0 && yyv4429 == nil {
			yyv4429 = []ContainerPort{}
			yyc4429 = true
		}
	}
	yyh4429.End()
	if yyc4429 {
		*v = yyv4429
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4433 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4434 := &yyv4433
		yy4434.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4435 := *v
	yyh4435, yyl4435 := z.DecSliceHelperStart()
	var yyc4435 bool
	if yyl4435 == 0 {
		if yyv4435 == nil {
			yyv4435 = []EnvVar{}
			yyc4435 = true
		} else if len(yyv4435) != 0 {
			yyv4435 = yyv4435[:0]
			yyc4435 = true
		}
	} else if yyl4435 > 0 {
		var yyrr4435, yyrl4435 int
		var yyrt4435 bool
		if yyl4435 > cap(yyv4435) {

			yyrg4435 := len(yyv4435) > 0
			yyv24435 := yyv4435
			yyrl4435, yyrt4435 = z.DecInferLen(yyl4435, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4435 {
				if yyrl4435 <= cap(yyv4435) {
					yyv4435 = yyv4435[:yyrl4435]
				} else {
					yyv4435 = make([]EnvVar, yyrl4435)
				}
			} else {
				yyv4435 = make([]EnvVar, yyrl4435)
			}
			yyc4435 = true
			yyrr4435 = len(yyv4435)
			if yyrg4435 {
				copy(yyv4435, yyv24435)
			}
		} else if yyl4435 != len(yyv4435) {
			yyv4435 = yyv4435[:yyl4435]
			yyc4435 = true
		}
		yyj4435 := 0
		for ; yyj4435 < yyrr4435; yyj4435++ {
			yyh4435.ElemContainerState(yyj4435)
			if r.TryDecodeAsNil() {
				yyv4435[yyj4435] = EnvVar{}
			} else {
				yyv4436 := &yyv4435[yyj4435]
				yyv4436.CodecDecodeSelf(d)
			}

		}
		if yyrt4435 {
			for ; yyj4435 < yyl4435; yyj4435++ {
				yyv4435 = append(yyv4435, EnvVar{})
				yyh4435.ElemContainerState(yyj4435)
				if r.TryDecodeAsNil() {
					yyv4435[yyj4435] = EnvVar{}
				} else {
					yyv4437 := &yyv4435[yyj4435]
					yyv4437.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4435 := 0
		for ; !r.CheckBreak(); yyj4435++ {

			if yyj4435 >= len(yyv4435) {
				yyv4435 = append(yyv4435, EnvVar{}) // var yyz4435 EnvVar
				yyc4435 = true
			}
			yyh4435.ElemContainerState(yyj4435)
			if yyj4435 < len(yyv4435) {
				if r.TryDecodeAsNil() {
					yyv4435[yyj4435] = EnvVar{}
				} else {
					yyv4438 := &yyv4435[yyj4435]
					yyv4438.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4435 < len(yyv4435) {
			yyv4435 = yyv4435[:yyj4435]
			yyc4435 = true
		} else if yyj4435 == 0 && yyv4435 == nil {
			yyv4435 = []EnvVar{}
			yyc4435 = true
		}
	}
	yyh4435.End()
	if yyc4435 {
		*v = yyv4435
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4439 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4440 := &yyv4439
		yy4440.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4441 := *v
	yyh4441, yyl4441 := z.DecSliceHelperStart()
	var yyc4441 bool
	if yyl4441 == 0 {
		if yyv4441 == nil {
			yyv4441 = []VolumeMount{}
			yyc4441 = true
		} else if len(yyv4441) != 0 {
			yyv4441 = yyv4441[:0]
			yyc4441 = true
		}
	} else if yyl4441 > 0 {
		var yyrr4441, yyrl4441 int
		var yyrt4441 bool
		if yyl4441 > cap(yyv4441) {

			yyrg4441 := len(yyv4441) > 0
			yyv24441 := yyv4441
			yyrl4441, yyrt4441 = z.DecInferLen(yyl4441, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4441 {
				if yyrl4441 <= cap(yyv4441) {
					yyv4441 = yyv4441[:yyrl4441]
				} else {
					yyv4441 = make([]VolumeMount, yyrl4441)
				}
			} else {
				yyv4441 = make([]VolumeMount, yyrl4441)
			}
			yyc4441 = true
			yyrr4441 = len(yyv4441)
			if yyrg4441 {
				copy(yyv4441, yyv24441)
			}
		} else if yyl4441 != len(yyv4441) {
			yyv4441 = yyv4441[:yyl4441]
			yyc4441 = true
		}
		yyj4441 := 0
		for ; yyj4441 < yyrr4441; yyj4441++ {
			yyh4441.ElemContainerState(yyj4441)
			if r.TryDecodeAsNil() {
				yyv4441[yyj4441] = VolumeMount{}
			} else {
				yyv4442 := &yyv4441[yyj4441]
				yyv4442.CodecDecodeSelf(d)
			}

		}
		if yyrt4441 {
			for ; yyj4441 < yyl4441; yyj4441++ {
				yyv4441 = append(yyv4441, VolumeMount{})
				yyh4441.ElemContainerState(yyj4441)
				if r.TryDecodeAsNil() {
					yyv4441[yyj4441] = VolumeMount{}
				} else {
					yyv4443 := &yyv4441[yyj4441]
					yyv4443.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4441 := 0
		for ; !r.CheckBreak(); yyj4441++ {

			if yyj4441 >= len(yyv4441) {
				yyv4441 = append(yyv4441, VolumeMount{}) // var yyz4441 VolumeMount
				yyc4441 = true
			}
			yyh4441.ElemContainerState(yyj4441)
			if yyj4441 < len(yyv4441) {
				if r.TryDecodeAsNil() {
					yyv4441[yyj4441] = VolumeMount{}
				} else {
					yyv4444 := &yyv4441[yyj4441]
					yyv4444.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4441 < len(yyv4441) {
			yyv4441 = yyv4441[:yyj4441]
			yyc4441 = true
		} else if yyj4441 == 0 && yyv4441 == nil {
			yyv4441 = []VolumeMount{}
			yyc4441 = true
		}
	}
	yyh4441.End()
	if yyc4441 {
		*v = yyv4441
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4445 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4446 := &yyv4445
		yy4446.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4447 := *v
	yyh4447, yyl4447 := z.DecSliceHelperStart()
	var yyc4447 bool
	if yyl4447 == 0 {
		if yyv4447 == nil {
			yyv4447 = []Pod{}
			yyc4447 = true
		} else if len(yyv4447) != 0 {
			yyv4447 = yyv4447[:0]
			yyc4447 = true
		}
	} else if yyl4447 > 0 {
		var yyrr4447, yyrl4447 int
		var yyrt4447 bool
		if yyl4447 > cap(yyv4447) {

			yyrg4447 := len(yyv4447) > 0
			yyv24447 := yyv4447
			yyrl4447, yyrt4447 = z.DecInferLen(yyl4447, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4447 {
				if yyrl4447 <= cap(yyv4447) {
					yyv4447 = yyv4447[:yyrl4447]
				} else {
					yyv4447 = make([]Pod, yyrl4447)
				}
			} else {
				yyv4447 = make([]Pod, yyrl4447)
			}
			yyc4447 = true
			yyrr4447 = len(yyv4447)
			if yyrg4447 {
				copy(yyv4447, yyv24447)
			}
		} else if yyl4447 != len(yyv4447) {
			yyv4447 = yyv4447[:yyl4447]
			yyc4447 = true
		}
		yyj4447 := 0
		for ; yyj4447 < yyrr4447; yyj4447++ {
			yyh4447.ElemContainerState(yyj4447)
			if r.TryDecodeAsNil() {
				yyv4447[yyj4447] = Pod{}
			} else {
				yyv4448 := &yyv4447[yyj4447]
				yyv4448.CodecDecodeSelf(d)
			}

		}
		if yyrt4447 {
			for ; yyj4447 < yyl4447; yyj4447++ {
				yyv4447 = append(yyv4447, Pod{})
				yyh4447.ElemContainerState(yyj4447)
				if r.TryDecodeAsNil() {
					yyv4447[yyj4447] = Pod{}
				} else {
					yyv4449 := &yyv4447[yyj4447]
					yyv4449.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4447 := 0
		for ; !r.CheckBreak(); yyj4447++ {

			if yyj4447 >= len(yyv4447) {
				yyv4447 = append(yyv4447, Pod{}) // var yyz4447 Pod
				yyc4447 = true
			}
			yyh4447.ElemContainerState(yyj4447)
			if yyj4447 < len(yyv4447) {
				if r.TryDecodeAsNil() {
					yyv4447[yyj4447] = Pod{}
				} else {
					yyv4450 := &yyv4447[yyj4447]
					yyv4450.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4447 < len(yyv4447) {
			yyv4447 = yyv4447[:yyj4447]
			yyc4447 = true
		} else if yyj4447 == 0 && yyv4447 == nil {
			yyv4447 = []Pod{}
			yyc4447 = true
		}
	}
	yyh4447.End()
	if yyc4447 {
		*v = yyv4447
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4451 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4452 := &yyv4451
		yy4452.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4453 := *v
	yyh4453, yyl4453 := z.DecSliceHelperStart()
	var yyc4453 bool
	if yyl4453 == 0 {
		if yyv4453 == nil {
			yyv4453 = []NodeSelectorTerm{}
			yyc4453 = true
		} else if len(yyv4453) != 0 {
			yyv4453 = yyv4453[:0]
			yyc4453 = true
		}
	} else if yyl4453 > 0 {
		var yyrr4453, yyrl4453 int
		var yyrt4453 bool
		if yyl4453 > cap(yyv4453) {

			yyrg4453 := len(yyv4453) > 0
			yyv24453 := yyv4453
			yyrl4453, yyrt4453 = z.DecInferLen(yyl4453, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4453 {
				if yyrl4453 <= cap(yyv4453) {
					yyv4453 = yyv4453[:yyrl4453]
				} else {
					yyv4453 = make([]NodeSelectorTerm, yyrl4453)
				}
			} else {
				yyv4453 = make([]NodeSelectorTerm, yyrl4453)
			}
			yyc4453 = true
			yyrr4453 = len(yyv4453)
			if yyrg4453 {
				copy(yyv4453, yyv24453)
			}
		} else if yyl4453 != len(yyv4453) {
			yyv4453 = yyv4453[:yyl4453]
			yyc4453 = true
		}
		yyj4453 := 0
		for ; yyj4453 < yyrr4453; yyj4453++ {
			yyh4453.ElemContainerState(yyj4453)
			if r.TryDecodeAsNil() {
				yyv4453[yyj4453] = NodeSelectorTerm{}
			} else {
				yyv4454 := &yyv4453[yyj4453]
				yyv4454.CodecDecodeSelf(d)
			}

		}
		if yyrt4453 {
			for ; yyj4453 < yyl4453; yyj4453++ {
				yyv4453 = append(yyv4453, NodeSelectorTerm{})
				yyh4453.ElemContainerState(yyj4453)
				if r.TryDecodeAsNil() {
					yyv4453[yyj4453] = NodeSelectorTerm{}
				} else {
					yyv4455 := &yyv4453[yyj4453]
					yyv4455.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4453 := 0
		for ; !r.CheckBreak(); yyj4453++ {

			if yyj4453 >= len(yyv4453) {
				yyv4453 = append(yyv4453, NodeSelectorTerm{}) // var yyz4453 NodeSelectorTerm
				yyc4453 = true
			}
			yyh4453.ElemContainerState(yyj4453)
			if yyj4453 < len(yyv4453) {
				if r.TryDecodeAsNil() {
					yyv4453[yyj4453] = NodeSelectorTerm{}
				} else {
					yyv4456 := &yyv4453[yyj4453]
					yyv4456.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4453 < len(yyv4453) {
			yyv4453 = yyv4453[:yyj4453]
			yyc4453 = true
		} else if yyj4453 == 0 && yyv4453 == nil {
			yyv4453 = []NodeSelectorTerm{}
			yyc4453 = true
		}
	}
	yyh4453.End()
	if yyc4453 {
		*v = yyv4453
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4457 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4458 := &yyv4457
		yy4458.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4459 := *v
	yyh4459, yyl4459 := z.DecSliceHelperStart()
	var yyc4459 bool
	if yyl4459 == 0 {
		if yyv4459 == nil {
			yyv4459 = []NodeSelectorRequirement{}
			yyc4459 = true
		} else if len(yyv4459) != 0 {
			yyv4459 = yyv4459[:0]
			yyc4459 = true
		}
	} else if yyl4459 > 0 {
		var yyrr4459, yyrl4459 int
		var yyrt4459 bool
		if yyl4459 > cap(yyv4459) {

			yyrg4459 := len(yyv4459) > 0
			yyv24459 := yyv4459
			yyrl4459, yyrt4459 = z.DecInferLen(yyl4459, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4459 {
				if yyrl4459 <= cap(yyv4459) {
					yyv4459 = yyv4459[:yyrl4459]
				} else {
					yyv4459 = make([]NodeSelectorRequirement, yyrl4459)
				}
			} else {
				yyv4459 = make([]NodeSelectorRequirement, yyrl4459)
			}
			yyc4459 = true
			yyrr4459 = len(yyv4459)
			if yyrg4459 {
				copy(yyv4459, yyv24459)
			}
		} else if yyl4459 != len(yyv4459) {
			yyv4459 = yyv4459[:yyl4459]
			yyc4459 = true
		}
		yyj4459 := 0
		for ; yyj4459 < yyrr4459; yyj4459++ {
			yyh4459.ElemContainerState(yyj4459)
			if r.TryDecodeAsNil() {
				yyv4459[yyj4459] = NodeSelectorRequirement{}
			} else {
				yyv4460 := &yyv4459[yyj4459]
				yyv4460.CodecDecodeSelf(d)
			}

		}
		if yyrt4459 {
			for ; yyj4459 < yyl4459; yyj4459++ {
				yyv4459 = append(yyv4459, NodeSelectorRequirement{})
				yyh4459.ElemContainerState(yyj4459)
				if r.TryDecodeAsNil() {
					yyv4459[yyj4459] = NodeSelectorRequirement{}
				} else {
					yyv4461 := &yyv4459[yyj4459]
					yyv4461.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4459 := 0
		for ; !r.CheckBreak(); yyj4459++ {

			if yyj4459 >= len(yyv4459) {
				yyv4459 = append(yyv4459, NodeSelectorRequirement{}) // var yyz4459 NodeSelectorRequirement
				yyc4459 = true
			}
			yyh4459.ElemContainerState(yyj4459)
			if yyj4459 < len(yyv4459) {
				if r.TryDecodeAsNil() {
					yyv4459[yyj4459] = NodeSelectorRequirement{}
				} else {
					yyv4462 := &yyv4459[yyj4459]
					yyv4462.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4459 < len(yyv4459) {
			yyv4459 = yyv4459[:yyj4459]
			yyc4459 = true
		} else if yyj4459 == 0 && yyv4459 == nil {
			yyv4459 = []NodeSelectorRequirement{}
			yyc4459 = true
		}
	}
	yyh4459.End()
	if yyc4459 {
		*v = yyv4459
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4463 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4464 := &yyv4463
		yy4464.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4465 := *v
	yyh4465, yyl4465 := z.DecSliceHelperStart()
	var yyc4465 bool
	if yyl4465 == 0 {
		if yyv4465 == nil {
			yyv4465 = []PodAffinityTerm{}
			yyc4465 = true
		} else if len(yyv4465) != 0 {
			yyv4465 = yyv4465[:0]
			yyc4465 = true
		}
	} else if yyl4465 > 0 {
		var yyrr4465, yyrl4465 int
		var yyrt4465 bool
		if yyl4465 > cap(yyv4465) {

			yyrg4465 := len(yyv4465) > 0
			yyv24465 := yyv4465
			yyrl4465, yyrt4465 = z.DecInferLen(yyl4465, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4465 {
				if yyrl4465 <= cap(yyv4465) {
					yyv4465 = yyv4465[:yyrl4465]
				} else {
					yyv4465 = make([]PodAffinityTerm, yyrl4465)
				}
			} else {
				yyv4465 = make([]PodAffinityTerm, yyrl4465)
			}
			yyc4465 = true
			yyrr4465 = len(yyv4465)
			if yyrg4465 {
				copy(yyv4465, yyv24465)
			}
		} else if yyl4465 != len(yyv4465) {
			yyv4465 = yyv4465[:yyl4465]
			yyc4465 = true
		}
		yyj4465 := 0
		for ; yyj4465 < yyrr4465; yyj4465++ {
			yyh4465.ElemContainerState(yyj4465)
			if r.TryDecodeAsNil() {
				yyv4465[yyj4465] = PodAffinityTerm{}
			} else {
				yyv4466 := &yyv4465[yyj4465]
				yyv4466.CodecDecodeSelf(d)
			}

		}
		if yyrt4465 {
			for ; yyj4465 < yyl4465; yyj4465++ {
				yyv4465 = append(yyv4465, PodAffinityTerm{})
				yyh4465.ElemContainerState(yyj4465)
				if r.TryDecodeAsNil() {
					yyv4465[yyj4465] = PodAffinityTerm{}
				} else {
					yyv4467 := &yyv4465[yyj4465]
					yyv4467.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4465 := 0
		for ; !r.CheckBreak(); yyj4465++ {

			if yyj4465 >= len(yyv4465) {
				yyv4465 = append(yyv4465, PodAffinityTerm{}) // var yyz4465 PodAffinityTerm
				yyc4465 = true
			}
			yyh4465.ElemContainerState(yyj4465)
			if yyj4465 < len(yyv4465) {
				if r.TryDecodeAsNil() {
					yyv4465[yyj4465] = PodAffinityTerm{}
				} else {
					yyv4468 := &yyv4465[yyj4465]
					yyv4468.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4465 < len(yyv4465) {
			yyv4465 = yyv4465[:yyj4465]
			yyc4465 = true
		} else if yyj4465 == 0 && yyv4465 == nil {
			yyv4465 = []PodAffinityTerm{}
			yyc4465 = true
		}
	}
	yyh4465.End()
	if yyc4465 {
		*v = yyv4465
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4469 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4470 := &yyv4469
		yy4470.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4471 := *v
	yyh4471, yyl4471 := z.DecSliceHelperStart()
	var yyc4471 bool
	if yyl4471 == 0 {
		if yyv4471 == nil {
			yyv4471 = []WeightedPodAffinityTerm{}
			yyc4471 = true
		} else if len(yyv4471) != 0 {
			yyv4471 = yyv4471[:0]
			yyc4471 = true
		}
	} else if yyl4471 > 0 {
		var yyrr4471, yyrl4471 int
		var yyrt4471 bool
		if yyl4471 > cap(yyv4471) {

			yyrg4471 := len(yyv4471) > 0
			yyv24471 := yyv4471
			yyrl4471, yyrt4471 = z.DecInferLen(yyl4471, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4471 {
				if yyrl4471 <= cap(yyv4471) {
					yyv4471 = yyv4471[:yyrl4471]
				} else {
					yyv4471 = make([]WeightedPodAffinityTerm, yyrl4471)
				}
			} else {
				yyv4471 = make([]WeightedPodAffinityTerm, yyrl4471)
			}
			yyc4471 = true
			yyrr4471 = len(yyv4471)
			if yyrg4471 {
				copy(yyv4471, yyv24471)
			}
		} else if yyl4471 != len(yyv4471) {
			yyv4471 = yyv4471[:yyl4471]
			yyc4471 = true
		}
		yyj4471 := 0
		for ; yyj4471 < yyrr4471; yyj4471++ {
			yyh4471.ElemContainerState(yyj4471)
			if r.TryDecodeAsNil() {
				yyv4471[yyj4471] = WeightedPodAffinityTerm{}
			} else {
				yyv4472 := &yyv4471[yyj4471]
				yyv4472.CodecDecodeSelf(d)
			}

		}
		if yyrt4471 {
			for ; yyj4471 < yyl4471; yyj4471++ {
				yyv4471 = append(yyv4471, WeightedPodAffinityTerm{})
				yyh4471.ElemContainerState(yyj4471)
				if r.TryDecodeAsNil() {
					yyv4471[yyj4471] = WeightedPodAffinityTerm{}
				} else {
					yyv4473 := &yyv4471[yyj4471]
					yyv4473.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4471 := 0
		for ; !r.CheckBreak(); yyj4471++ {

			if yyj4471 >= len(yyv4471) {
				yyv4471 = append(yyv4471, WeightedPodAffinityTerm{}) // var yyz4471 WeightedPodAffinityTerm
				yyc4471 = true
			}
			yyh4471.ElemContainerState(yyj4471)
			if yyj4471 < len(yyv4471) {
				if r.TryDecodeAsNil() {
					yyv4471[yyj4471] = WeightedPodAffinityTerm{}
				} else {
					yyv4474 := &yyv4471[yyj4471]
					yyv4474.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4471 < len(yyv4471) {
			yyv4471 = yyv4471[:yyj4471]
			yyc4471 = true
		} else if yyj4471 == 0 && yyv4471 == nil {
			yyv4471 = []WeightedPodAffinityTerm{}
			yyc4471 = true
		}
	}
	yyh4471.End()
	if yyc4471 {
		*v = yyv4471
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4475 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4476 := &yyv4475
		yy4476.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4477 := *v
	yyh4477, yyl4477 := z.DecSliceHelperStart()
	var yyc4477 bool
	if yyl4477 == 0 {
		if yyv4477 == nil {
			yyv4477 = []PreferredSchedulingTerm{}
			yyc4477 = true
		} else if len(yyv4477) != 0 {
			yyv4477 = yyv4477[:0]
			yyc4477 = true
		}
	} else if yyl4477 > 0 {
		var yyrr4477, yyrl4477 int
		var yyrt4477 bool
		if yyl4477 > cap(yyv4477) {

			yyrg4477 := len(yyv4477) > 0
			yyv24477 := yyv4477
			yyrl4477, yyrt4477 = z.DecInferLen(yyl4477, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4477 {
				if yyrl4477 <= cap(yyv4477) {
					yyv4477 = yyv4477[:yyrl4477]
				} else {
					yyv4477 = make([]PreferredSchedulingTerm, yyrl4477)
				}
			} else {
				yyv4477 = make([]PreferredSchedulingTerm, yyrl4477)
			}
			yyc4477 = true
			yyrr4477 = len(yyv4477)
			if yyrg4477 {
				copy(yyv4477, yyv24477)
			}
		} else if yyl4477 != len(yyv4477) {
			yyv4477 = yyv4477[:yyl4477]
			yyc4477 = true
		}
		yyj4477 := 0
		for ; yyj4477 < yyrr4477; yyj4477++ {
			yyh4477.ElemContainerState(yyj4477)
			if r.TryDecodeAsNil() {
				yyv4477[yyj4477] = PreferredSchedulingTerm{}
			} else {
				yyv4478 := &yyv4477[yyj4477]
				yyv4478.CodecDecodeSelf(d)
			}

		}
		if yyrt4477 {
			for ; yyj4477 < yyl4477; yyj4477++ {
				yyv4477 = append(yyv4477, PreferredSchedulingTerm{})
				yyh4477.ElemContainerState(yyj4477)
				if r.TryDecodeAsNil() {
					yyv4477[yyj4477] = PreferredSchedulingTerm{}
				} else {
					yyv4479 := &yyv4477[yyj4477]
					yyv4479.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4477 := 0
		for ; !r.CheckBreak(); yyj4477++ {

			if yyj4477 >= len(yyv4477) {
				yyv4477 = append(yyv4477, PreferredSchedulingTerm{}) // var yyz4477 PreferredSchedulingTerm
				yyc4477 = true
			}
			yyh4477.ElemContainerState(yyj4477)
			if yyj4477 < len(yyv4477) {
				if r.TryDecodeAsNil() {
					yyv4477[yyj4477] = PreferredSchedulingTerm{}
				} else {
					yyv4480 := &yyv4477[yyj4477]
					yyv4480.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4477 < len(yyv4477) {
			yyv4477 = yyv4477[:yyj4477]
			yyc4477 = true
		} else if yyj4477 == 0 && yyv4477 == nil {
			yyv4477 = []PreferredSchedulingTerm{}
			yyc4477 = true
		}
	}
	yyh4477.End()
	if yyc4477 {
		*v = yyv4477
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4481 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4482 := &yyv4481
		yy4482.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4483 := *v
	yyh4483, yyl4483 := z.DecSliceHelperStart()
	var yyc4483 bool
	if yyl4483 == 0 {
		if yyv4483 == nil {
			yyv4483 = []Volume{}
			yyc4483 = true
		} else if len(yyv4483) != 0 {
			yyv4483 = yyv4483[:0]
			yyc4483 = true
		}
	} else if yyl4483 > 0 {
		var yyrr4483, yyrl4483 int
		var yyrt4483 bool
		if yyl4483 > cap(yyv4483) {

			yyrg4483 := len(yyv4483) > 0
			yyv24483 := yyv4483
			yyrl4483, yyrt4483 = z.DecInferLen(yyl4483, z.DecBasicHandle().MaxInitLen, 176)
			if yyrt4483 {
				if yyrl4483 <= cap(yyv4483) {
					yyv4483 = yyv4483[:yyrl4483]
				} else {
					yyv4483 = make([]Volume, yyrl4483)
				}
			} else {
				yyv4483 = make([]Volume, yyrl4483)
			}
			yyc4483 = true
			yyrr4483 = len(yyv4483)
			if yyrg4483 {
				copy(yyv4483, yyv24483)
			}
		} else if yyl4483 != len(yyv4483) {
			yyv4483 = yyv4483[:yyl4483]
			yyc4483 = true
		}
		yyj4483 := 0
		for ; yyj4483 < yyrr4483; yyj4483++ {
			yyh4483.ElemContainerState(yyj4483)
			if r.TryDecodeAsNil() {
				yyv4483[yyj4483] = Volume{}
			} else {
				yyv4484 := &yyv4483[yyj4483]
				yyv4484.CodecDecodeSelf(d)
			}

		}
		if yyrt4483 {
			for ; yyj4483 < yyl4483; yyj4483++ {
				yyv4483 = append(yyv4483, Volume{})
				yyh4483.ElemContainerState(yyj4483)
				if r.TryDecodeAsNil() {
					yyv4483[yyj4483] = Volume{}
				} else {
					yyv4485 := &yyv4483[yyj4483]
					yyv4485.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4483 := 0
		for ; !r.CheckBreak(); yyj4483++ {

			if yyj4483 >= len(yyv4483) {
				yyv4483 = append(yyv4483, Volume{}) // var yyz4483 Volume
				yyc4483 = true
			}
			yyh4483.ElemContainerState(yyj4483)
			if yyj4483 < len(yyv4483) {
				if r.TryDecodeAsNil() {
					yyv4483[yyj4483] = Volume{}
				} else {
					yyv4486 := &yyv4483[yyj4483]
					yyv4486.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4483 < len(yyv4483) {
			yyv4483 = yyv4483[:yyj4483]
			yyc4483 = true
		} else if yyj4483 == 0 && yyv4483 == nil {
			yyv4483 = []Volume{}
			yyc4483 = true
		}
	}
	yyh4483.End()
	if yyc4483 {
		*v = yyv4483
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4487 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4488 := &yyv4487
		yy4488.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4489 := *v
	yyh4489, yyl4489 := z.DecSliceHelperStart()
	var yyc4489 bool
	if yyl4489 == 0 {
		if yyv4489 == nil {
			yyv4489 = []Container{}
			yyc4489 = true
		} else if len(yyv4489) != 0 {
			yyv4489 = yyv4489[:0]
			yyc4489 = true
		}
	} else if yyl4489 > 0 {
		var yyrr4489, yyrl4489 int
		var yyrt4489 bool
		if yyl4489 > cap(yyv4489) {

			yyrg4489 := len(yyv4489) > 0
			yyv24489 := yyv4489
			yyrl4489, yyrt4489 = z.DecInferLen(yyl4489, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4489 {
				if yyrl4489 <= cap(yyv4489) {
					yyv4489 = yyv4489[:yyrl4489]
				} else {
					yyv4489 = make([]Container, yyrl4489)
				}
			} else {
				yyv4489 = make([]Container, yyrl4489)
			}
			yyc4489 = true
			yyrr4489 = len(yyv4489)
			if yyrg4489 {
				copy(yyv4489, yyv24489)
			}
		} else if yyl4489 != len(yyv4489) {
			yyv4489 = yyv4489[:yyl4489]
			yyc4489 = true
		}
		yyj4489 := 0
		for ; yyj4489 < yyrr4489; yyj4489++ {
			yyh4489.ElemContainerState(yyj4489)
			if r.TryDecodeAsNil() {
				yyv4489[yyj4489] = Container{}
			} else {
				yyv4490 := &yyv4489[yyj4489]
				yyv4490.CodecDecodeSelf(d)
			}

		}
		if yyrt4489 {
			for ; yyj4489 < yyl4489; yyj4489++ {
				yyv4489 = append(yyv4489, Container{})
				yyh4489.ElemContainerState(yyj4489)
				if r.TryDecodeAsNil() {
					yyv4489[yyj4489] = Container{}
				} else {
					yyv4491 := &yyv4489[yyj4489]
					yyv4491.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4489 := 0
		for ; !r.CheckBreak(); yyj4489++ {

			if yyj4489 >= len(yyv4489) {
				yyv4489 = append(yyv4489, Container{}) // var yyz4489 Container
				yyc4489 = true
			}
			yyh4489.ElemContainerState(yyj4489)
			if yyj4489 < len(yyv4489) {
				if r.TryDecodeAsNil() {
					yyv4489[yyj4489] = Container{}
				} else {
					yyv4492 := &yyv4489[yyj4489]
					yyv4492.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4489 < len(yyv4489) {
			yyv4489 = yyv4489[:yyj4489]
			yyc4489 = true
		} else if yyj4489 == 0 && yyv4489 == nil {
			yyv4489 = []Container{}
			yyc4489 = true
		}
	}
	yyh4489.End()
	if yyc4489 {
		*v = yyv4489
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4493 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4494 := &yyv4493
		yy4494.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4495 := *v
	yyh4495, yyl4495 := z.DecSliceHelperStart()
	var yyc4495 bool
	if yyl4495 == 0 {
		if yyv4495 == nil {
			yyv4495 = []LocalObjectReference{}
			yyc4495 = true
		} else if len(yyv4495) != 0 {
			yyv4495 = yyv4495[:0]
			yyc4495 = true
		}
	} else if yyl4495 > 0 {
		var yyrr4495, yyrl4495 int
		var yyrt4495 bool
		if yyl4495 > cap(yyv4495) {

			yyrg4495 := len(yyv4495) > 0
			yyv24495 := yyv4495
			yyrl4495, yyrt4495 = z.DecInferLen(yyl4495, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4495 {
				if yyrl4495 <= cap(yyv4495) {
					yyv4495 = yyv4495[:yyrl4495]
				} else {
					yyv4495 = make([]LocalObjectReference, yyrl4495)
				}
			} else {
				yyv4495 = make([]LocalObjectReference, yyrl4495)
			}
			yyc4495 = true
			yyrr4495 = len(yyv4495)
			if yyrg4495 {
				copy(yyv4495, yyv24495)
			}
		} else if yyl4495 != len(yyv4495) {
			yyv4495 = yyv4495[:yyl4495]
			yyc4495 = true
		}
		yyj4495 := 0
		for ; yyj4495 < yyrr4495; yyj4495++ {
			yyh4495.ElemContainerState(yyj4495)
			if r.TryDecodeAsNil() {
				yyv4495[yyj4495] = LocalObjectReference{}
			} else {
				yyv4496 := &yyv4495[yyj4495]
				yyv4496.CodecDecodeSelf(d)
			}

		}
		if yyrt4495 {
			for ; yyj4495 < yyl4495; yyj4495++ {
				yyv4495 = append(yyv4495, LocalObjectReference{})
				yyh4495.ElemContainerState(yyj4495)
				if r.TryDecodeAsNil() {
					yyv4495[yyj4495] = LocalObjectReference{}
				} else {
					yyv4497 := &yyv4495[yyj4495]
					yyv4497.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4495 := 0
		for ; !r.CheckBreak(); yyj4495++ {

			if yyj4495 >= len(yyv4495) {
				yyv4495 = append(yyv4495, LocalObjectReference{}) // var yyz4495 LocalObjectReference
				yyc4495 = true
			}
			yyh4495.ElemContainerState(yyj4495)
			if yyj4495 < len(yyv4495) {
				if r.TryDecodeAsNil() {
					yyv4495[yyj4495] = LocalObjectReference{}
				} else {
					yyv4498 := &yyv4495[yyj4495]
					yyv4498.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4495 < len(yyv4495) {
			yyv4495 = yyv4495[:yyj4495]
			yyc4495 = true
		} else if yyj4495 == 0 && yyv4495 == nil {
			yyv4495 = []LocalObjectReference{}
			yyc4495 = true
		}
	}
	yyh4495.End()
	if yyc4495 {
		*v = yyv4495
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4499 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4500 := &yyv4499
		yy4500.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4501 := *v
	yyh4501, yyl4501 := z.DecSliceHelperStart()
	var yyc4501 bool
	if yyl4501 == 0 {
		if yyv4501 == nil {
			yyv4501 = []PodCondition{}
			yyc4501 = true
		} else if len(yyv4501) != 0 {
			yyv4501 = yyv4501[:0]
			yyc4501 = true
		}
	} else if yyl4501 > 0 {
		var yyrr4501, yyrl4501 int
		var yyrt4501 bool
		if yyl4501 > cap(yyv4501) {

			yyrg4501 := len(yyv4501) > 0
			yyv24501 := yyv4501
			yyrl4501, yyrt4501 = z.DecInferLen(yyl4501, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4501 {
				if yyrl4501 <= cap(yyv4501) {
					yyv4501 = yyv4501[:yyrl4501]
				} else {
					yyv4501 = make([]PodCondition, yyrl4501)
				}
			} else {
				yyv4501 = make([]PodCondition, yyrl4501)
			}
			yyc4501 = true
			yyrr4501 = len(yyv4501)
			if yyrg4501 {
				copy(yyv4501, yyv24501)
			}
		} else if yyl4501 != len(yyv4501) {
			yyv4501 = yyv4501[:yyl4501]
			yyc4501 = true
		}
		yyj4501 := 0
		for ; yyj4501 < yyrr4501; yyj4501++ {
			yyh4501.ElemContainerState(yyj4501)
			if r.TryDecodeAsNil() {
				yyv4501[yyj4501] = PodCondition{}
			} else {
				yyv4502 := &yyv4501[yyj4501]
				yyv4502.CodecDecodeSelf(d)
			}

		}
		if yyrt4501 {
			for ; yyj4501 < yyl4501; yyj4501++ {
				yyv4501 = append(yyv4501, PodCondition{})
				yyh4501.ElemContainerState(yyj4501)
				if r.TryDecodeAsNil() {
					yyv4501[yyj4501] = PodCondition{}
				} else {
					yyv4503 := &yyv4501[yyj4501]
					yyv4503.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4501 := 0
		for ; !r.CheckBreak(); yyj4501++ {

			if yyj4501 >= len(yyv4501) {
				yyv4501 = append(yyv4501, PodCondition{}) // var yyz4501 PodCondition
				yyc4501 = true
			}
			yyh4501.ElemContainerState(yyj4501)
			if yyj4501 < len(yyv4501) {
				if r.TryDecodeAsNil() {
					yyv4501[yyj4501] = PodCondition{}
				} else {
					yyv4504 := &yyv4501[yyj4501]
					yyv4504.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4501 < len(yyv4501) {
			yyv4501 = yyv4501[:yyj4501]
			yyc4501 = true
		} else if yyj4501 == 0 && yyv4501 == nil {
			yyv4501 = []PodCondition{}
			yyc4501 = true
		}
	}
	yyh4501.End()
	if yyc4501 {
		*v = yyv4501
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4505 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4506 := &yyv4505
		yy4506.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4507 := *v
	yyh4507, yyl4507 := z.DecSliceHelperStart()
	var yyc4507 bool
	if yyl4507 == 0 {
		if yyv4507 == nil {
			yyv4507 = []ContainerStatus{}
			yyc4507 = true
		} else if len(yyv4507) != 0 {
			yyv4507 = yyv4507[:0]
			yyc4507 = true
		}
	} else if yyl4507 > 0 {
		var yyrr4507, yyrl4507 int
		var yyrt4507 bool
		if yyl4507 > cap(yyv4507) {

			yyrg4507 := len(yyv4507) > 0
			yyv24507 := yyv4507
			yyrl4507, yyrt4507 = z.DecInferLen(yyl4507, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4507 {
				if yyrl4507 <= cap(yyv4507) {
					yyv4507 = yyv4507[:yyrl4507]
				} else {
					yyv4507 = make([]ContainerStatus, yyrl4507)
				}
			} else {
				yyv4507 = make([]ContainerStatus, yyrl4507)
			}
			yyc4507 = true
			yyrr4507 = len(yyv4507)
			if yyrg4507 {
				copy(yyv4507, yyv24507)
			}
		} else if yyl4507 != len(yyv4507) {
			yyv4507 = yyv4507[:yyl4507]
			yyc4507 = true
		}
		yyj4507 := 0
		for ; yyj4507 < yyrr4507; yyj4507++ {
			yyh4507.ElemContainerState(yyj4507)
			if r.TryDecodeAsNil() {
				yyv4507[yyj4507] = ContainerStatus{}
			} else {
				yyv4508 := &yyv4507[yyj4507]
				yyv4508.CodecDecodeSelf(d)
			}

		}
		if yyrt4507 {
			for ; yyj4507 < yyl4507; yyj4507++ {
				yyv4507 = append(yyv4507, ContainerStatus{})
				yyh4507.ElemContainerState(yyj4507)
				if r.TryDecodeAsNil() {
					yyv4507[yyj4507] = ContainerStatus{}
				} else {
					yyv4509 := &yyv4507[yyj4507]
					yyv4509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4507 := 0
		for ; !r.CheckBreak(); yyj4507++ {

			if yyj4507 >= len(yyv4507) {
				yyv4507 = append(yyv4507, ContainerStatus{}) // var yyz4507 ContainerStatus
				yyc4507 = true
			}
			yyh4507.ElemContainerState(yyj4507)
			if yyj4507 < len(yyv4507) {
				if r.TryDecodeAsNil() {
					yyv4507[yyj4507] = ContainerStatus{}
				} else {
					yyv4510 := &yyv4507[yyj4507]
					yyv4510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4507 < len(yyv4507) {
			yyv4507 = yyv4507[:yyj4507]
			yyc4507 = true
		} else if yyj4507 == 0 && yyv4507 == nil {
			yyv4507 = []ContainerStatus{}
			yyc4507 = true
		}
	}
	yyh4507.End()
	if yyc4507 {
		*v = yyv4507
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4511 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4512 := &yyv4511
		yy4512.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4513 := *v
	yyh4513, yyl4513 := z.DecSliceHelperStart()
	var yyc4513 bool
	if yyl4513 == 0 {
		if yyv4513 == nil {
			yyv4513 = []PodTemplate{}
			yyc4513 = true
		} else if len(yyv4513) != 0 {
			yyv4513 = yyv4513[:0]
			yyc4513 = true
		}
	} else if yyl4513 > 0 {
		var yyrr4513, yyrl4513 int
		var yyrt4513 bool
		if yyl4513 > cap(yyv4513) {

			yyrg4513 := len(yyv4513) > 0
			yyv24513 := yyv4513
			yyrl4513, yyrt4513 = z.DecInferLen(yyl4513, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4513 {
				if yyrl4513 <= cap(yyv4513) {
					yyv4513 = yyv4513[:yyrl4513]
				} else {
					yyv4513 = make([]PodTemplate, yyrl4513)
				}
			} else {
				yyv4513 = make([]PodTemplate, yyrl4513)
			}
			yyc4513 = true
			yyrr4513 = len(yyv4513)
			if yyrg4513 {
				copy(yyv4513, yyv24513)
			}
		} else if yyl4513 != len(yyv4513) {
			yyv4513 = yyv4513[:yyl4513]
			yyc4513 = true
		}
		yyj4513 := 0
		for ; yyj4513 < yyrr4513; yyj4513++ {
			yyh4513.ElemContainerState(yyj4513)
			if r.TryDecodeAsNil() {
				yyv4513[yyj4513] = PodTemplate{}
			} else {
				yyv4514 := &yyv4513[yyj4513]
				yyv4514.CodecDecodeSelf(d)
			}

		}
		if yyrt4513 {
			for ; yyj4513 < yyl4513; yyj4513++ {
				yyv4513 = append(yyv4513, PodTemplate{})
				yyh4513.ElemContainerState(yyj4513)
				if r.TryDecodeAsNil() {
					yyv4513[yyj4513] = PodTemplate{}
				} else {
					yyv4515 := &yyv4513[yyj4513]
					yyv4515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4513 := 0
		for ; !r.CheckBreak(); yyj4513++ {

			if yyj4513 >= len(yyv4513) {
				yyv4513 = append(yyv4513, PodTemplate{}) // var yyz4513 PodTemplate
				yyc4513 = true
			}
			yyh4513.ElemContainerState(yyj4513)
			if yyj4513 < len(yyv4513) {
				if r.TryDecodeAsNil() {
					yyv4513[yyj4513] = PodTemplate{}
				} else {
					yyv4516 := &yyv4513[yyj4513]
					yyv4516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4513 < len(yyv4513) {
			yyv4513 = yyv4513[:yyj4513]
			yyc4513 = true
		} else if yyj4513 == 0 && yyv4513 == nil {
			yyv4513 = []PodTemplate{}
			yyc4513 = true
		}
	}
	yyh4513.End()
	if yyc4513 {
		*v = yyv4513
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4517 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4518 := &yyv4517
		yy4518.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4519 := *v
	yyh4519, yyl4519 := z.DecSliceHelperStart()
	var yyc4519 bool
	if yyl4519 == 0 {
		if yyv4519 == nil {
			yyv4519 = []ReplicationController{}
			yyc4519 = true
		} else if len(yyv4519) != 0 {
			yyv4519 = yyv4519[:0]
			yyc4519 = true
		}
	} else if yyl4519 > 0 {
		var yyrr4519, yyrl4519 int
		var yyrt4519 bool
		if yyl4519 > cap(yyv4519) {

			yyrg4519 := len(yyv4519) > 0
			yyv24519 := yyv4519
			yyrl4519, yyrt4519 = z.DecInferLen(yyl4519, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4519 {
				if yyrl4519 <= cap(yyv4519) {
					yyv4519 = yyv4519[:yyrl4519]
				} else {
					yyv4519 = make([]ReplicationController, yyrl4519)
				}
			} else {
				yyv4519 = make([]ReplicationController, yyrl4519)
			}
			yyc4519 = true
			yyrr4519 = len(yyv4519)
			if yyrg4519 {
				copy(yyv4519, yyv24519)
			}
		} else if yyl4519 != len(yyv4519) {
			yyv4519 = yyv4519[:yyl4519]
			yyc4519 = true
		}
		yyj4519 := 0
		for ; yyj4519 < yyrr4519; yyj4519++ {
			yyh4519.ElemContainerState(yyj4519)
			if r.TryDecodeAsNil() {
				yyv4519[yyj4519] = ReplicationController{}
			} else {
				yyv4520 := &yyv4519[yyj4519]
				yyv4520.CodecDecodeSelf(d)
			}

		}
		if yyrt4519 {
			for ; yyj4519 < yyl4519; yyj4519++ {
				yyv4519 = append(yyv4519, ReplicationController{})
				yyh4519.ElemContainerState(yyj4519)
				if r.TryDecodeAsNil() {
					yyv4519[yyj4519] = ReplicationController{}
				} else {
					yyv4521 := &yyv4519[yyj4519]
					yyv4521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4519 := 0
		for ; !r.CheckBreak(); yyj4519++ {

			if yyj4519 >= len(yyv4519) {
				yyv4519 = append(yyv4519, ReplicationController{}) // var yyz4519 ReplicationController
				yyc4519 = true
			}
			yyh4519.ElemContainerState(yyj4519)
			if yyj4519 < len(yyv4519) {
				if r.TryDecodeAsNil() {
					yyv4519[yyj4519] = ReplicationController{}
				} else {
					yyv4522 := &yyv4519[yyj4519]
					yyv4522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4519 < len(yyv4519) {
			yyv4519 = yyv4519[:yyj4519]
			yyc4519 = true
		} else if yyj4519 == 0 && yyv4519 == nil {
			yyv4519 = []ReplicationController{}
			yyc4519 = true
		}
	}
	yyh4519.End()
	if yyc4519 {
		*v = yyv4519
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4523 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4524 := &yyv4523
		yy4524.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4525 := *v
	yyh4525, yyl4525 := z.DecSliceHelperStart()
	var yyc4525 bool
	if yyl4525 == 0 {
		if yyv4525 == nil {
			yyv4525 = []Service{}
			yyc4525 = true
		} else if len(yyv4525) != 0 {
			yyv4525 = yyv4525[:0]
			yyc4525 = true
		}
	} else if yyl4525 > 0 {
		var yyrr4525, yyrl4525 int
		var yyrt4525 bool
		if yyl4525 > cap(yyv4525) {

			yyrg4525 := len(yyv4525) > 0
			yyv24525 := yyv4525
			yyrl4525, yyrt4525 = z.DecInferLen(yyl4525, z.DecBasicHandle().MaxInitLen, 408)
			if yyrt4525 {
				if yyrl4525 <= cap(yyv4525) {
					yyv4525 = yyv4525[:yyrl4525]
				} else {
					yyv4525 = make([]Service, yyrl4525)
				}
			} else {
				yyv4525 = make([]Service, yyrl4525)
			}
			yyc4525 = true
			yyrr4525 = len(yyv4525)
			if yyrg4525 {
				copy(yyv4525, yyv24525)
			}
		} else if yyl4525 != len(yyv4525) {
			yyv4525 = yyv4525[:yyl4525]
			yyc4525 = true
		}
		yyj4525 := 0
		for ; yyj4525 < yyrr4525; yyj4525++ {
			yyh4525.ElemContainerState(yyj4525)
			if r.TryDecodeAsNil() {
				yyv4525[yyj4525] = Service{}
			} else {
				yyv4526 := &yyv4525[yyj4525]
				yyv4526.CodecDecodeSelf(d)
			}

		}
		if yyrt4525 {
			for ; yyj4525 < yyl4525; yyj4525++ {
				yyv4525 = append(yyv4525, Service{})
				yyh4525.ElemContainerState(yyj4525)
				if r.TryDecodeAsNil() {
					yyv4525[yyj4525] = Service{}
				} else {
					yyv4527 := &yyv4525[yyj4525]
					yyv4527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4525 := 0
		for ; !r.CheckBreak(); yyj4525++ {

			if yyj4525 >= len(yyv4525) {
				yyv4525 = append(yyv4525, Service{}) // var yyz4525 Service
				yyc4525 = true
			}
			yyh4525.ElemContainerState(yyj4525)
			if yyj4525 < len(yyv4525) {
				if r.TryDecodeAsNil() {
					yyv4525[yyj4525] = Service{}
				} else {
					yyv4528 := &yyv4525[yyj4525]
					yyv4528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4525 < len(yyv4525) {
			yyv4525 = yyv4525[:yyj4525]
			yyc4525 = true
		} else if yyj4525 == 0 && yyv4525 == nil {
			yyv4525 = []Service{}
			yyc4525 = true
		}
	}
	yyh4525.End()
	if yyc4525 {
		*v = yyv4525
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4529 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4530 := &yyv4529
		yy4530.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4531 := *v
	yyh4531, yyl4531 := z.DecSliceHelperStart()
	var yyc4531 bool
	if yyl4531 == 0 {
		if yyv4531 == nil {
			yyv4531 = []LoadBalancerIngress{}
			yyc4531 = true
		} else if len(yyv4531) != 0 {
			yyv4531 = yyv4531[:0]
			yyc4531 = true
		}
	} else if yyl4531 > 0 {
		var yyrr4531, yyrl4531 int
		var yyrt4531 bool
		if yyl4531 > cap(yyv4531) {

			yyrg4531 := len(yyv4531) > 0
			yyv24531 := yyv4531
			yyrl4531, yyrt4531 = z.DecInferLen(yyl4531, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4531 {
				if yyrl4531 <= cap(yyv4531) {
					yyv4531 = yyv4531[:yyrl4531]
				} else {
					yyv4531 = make([]LoadBalancerIngress, yyrl4531)
				}
			} else {
				yyv4531 = make([]LoadBalancerIngress, yyrl4531)
			}
			yyc4531 = true
			yyrr4531 = len(yyv4531)
			if yyrg4531 {
				copy(yyv4531, yyv24531)
			}
		} else if yyl4531 != len(yyv4531) {
			yyv4531 = yyv4531[:yyl4531]
			yyc4531 = true
		}
		yyj4531 := 0
		for ; yyj4531 < yyrr4531; yyj4531++ {
			yyh4531.ElemContainerState(yyj4531)
			if r.TryDecodeAsNil() {
				yyv4531[yyj4531] = LoadBalancerIngress{}
			} else {
				yyv4532 := &yyv4531[yyj4531]
				yyv4532.CodecDecodeSelf(d)
			}

		}
		if yyrt4531 {
			for ; yyj4531 < yyl4531; yyj4531++ {
				yyv4531 = append(yyv4531, LoadBalancerIngress{})
				yyh4531.ElemContainerState(yyj4531)
				if r.TryDecodeAsNil() {
					yyv4531[yyj4531] = LoadBalancerIngress{}
				} else {
					yyv4533 := &yyv4531[yyj4531]
					yyv4533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4531 := 0
		for ; !r.CheckBreak(); yyj4531++ {

			if yyj4531 >= len(yyv4531) {
				yyv4531 = append(yyv4531, LoadBalancerIngress{}) // var yyz4531 LoadBalancerIngress
				yyc4531 = true
			}
			yyh4531.ElemContainerState(yyj4531)
			if yyj4531 < len(yyv4531) {
				if r.TryDecodeAsNil() {
					yyv4531[yyj4531] = LoadBalancerIngress{}
				} else {
					yyv4534 := &yyv4531[yyj4531]
					yyv4534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4531 < len(yyv4531) {
			yyv4531 = yyv4531[:yyj4531]
			yyc4531 = true
		} else if yyj4531 == 0 && yyv4531 == nil {
			yyv4531 = []LoadBalancerIngress{}
			yyc4531 = true
		}
	}
	yyh4531.End()
	if yyc4531 {
		*v = yyv4531
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4535 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4536 := &yyv4535
		yy4536.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4537 := *v
	yyh4537, yyl4537 := z.DecSliceHelperStart()
	var yyc4537 bool
	if yyl4537 == 0 {
		if yyv4537 == nil {
			yyv4537 = []ServicePort{}
			yyc4537 = true
		} else if len(yyv4537) != 0 {
			yyv4537 = yyv4537[:0]
			yyc4537 = true
		}
	} else if yyl4537 > 0 {
		var yyrr4537, yyrl4537 int
		var yyrt4537 bool
		if yyl4537 > cap(yyv4537) {

			yyrg4537 := len(yyv4537) > 0
			yyv24537 := yyv4537
			yyrl4537, yyrt4537 = z.DecInferLen(yyl4537, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4537 {
				if yyrl4537 <= cap(yyv4537) {
					yyv4537 = yyv4537[:yyrl4537]
				} else {
					yyv4537 = make([]ServicePort, yyrl4537)
				}
			} else {
				yyv4537 = make([]ServicePort, yyrl4537)
			}
			yyc4537 = true
			yyrr4537 = len(yyv4537)
			if yyrg4537 {
				copy(yyv4537, yyv24537)
			}
		} else if yyl4537 != len(yyv4537) {
			yyv4537 = yyv4537[:yyl4537]
			yyc4537 = true
		}
		yyj4537 := 0
		for ; yyj4537 < yyrr4537; yyj4537++ {
			yyh4537.ElemContainerState(yyj4537)
			if r.TryDecodeAsNil() {
				yyv4537[yyj4537] = ServicePort{}
			} else {
				yyv4538 := &yyv4537[yyj4537]
				yyv4538.CodecDecodeSelf(d)
			}

		}
		if yyrt4537 {
			for ; yyj4537 < yyl4537; yyj4537++ {
				yyv4537 = append(yyv4537, ServicePort{})
				yyh4537.ElemContainerState(yyj4537)
				if r.TryDecodeAsNil() {
					yyv4537[yyj4537] = ServicePort{}
				} else {
					yyv4539 := &yyv4537[yyj4537]
					yyv4539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4537 := 0
		for ; !r.CheckBreak(); yyj4537++ {

			if yyj4537 >= len(yyv4537) {
				yyv4537 = append(yyv4537, ServicePort{}) // var yyz4537 ServicePort
				yyc4537 = true
			}
			yyh4537.ElemContainerState(yyj4537)
			if yyj4537 < len(yyv4537) {
				if r.TryDecodeAsNil() {
					yyv4537[yyj4537] = ServicePort{}
				} else {
					yyv4540 := &yyv4537[yyj4537]
					yyv4540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4537 < len(yyv4537) {
			yyv4537 = yyv4537[:yyj4537]
			yyc4537 = true
		} else if yyj4537 == 0 && yyv4537 == nil {
			yyv4537 = []ServicePort{}
			yyc4537 = true
		}
	}
	yyh4537.End()
	if yyc4537 {
		*v = yyv4537
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4541 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4542 := &yyv4541
		yy4542.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4543 := *v
	yyh4543, yyl4543 := z.DecSliceHelperStart()
	var yyc4543 bool
	if yyl4543 == 0 {
		if yyv4543 == nil {
			yyv4543 = []ObjectReference{}
			yyc4543 = true
		} else if len(yyv4543) != 0 {
			yyv4543 = yyv4543[:0]
			yyc4543 = true
		}
	} else if yyl4543 > 0 {
		var yyrr4543, yyrl4543 int
		var yyrt4543 bool
		if yyl4543 > cap(yyv4543) {

			yyrg4543 := len(yyv4543) > 0
			yyv24543 := yyv4543
			yyrl4543, yyrt4543 = z.DecInferLen(yyl4543, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4543 {
				if yyrl4543 <= cap(yyv4543) {
					yyv4543 = yyv4543[:yyrl4543]
				} else {
					yyv4543 = make([]ObjectReference, yyrl4543)
				}
			} else {
				yyv4543 = make([]ObjectReference, yyrl4543)
			}
			yyc4543 = true
			yyrr4543 = len(yyv4543)
			if yyrg4543 {
				copy(yyv4543, yyv24543)
			}
		} else if yyl4543 != len(yyv4543) {
			yyv4543 = yyv4543[:yyl4543]
			yyc4543 = true
		}
		yyj4543 := 0
		for ; yyj4543 < yyrr4543; yyj4543++ {
			yyh4543.ElemContainerState(yyj4543)
			if r.TryDecodeAsNil() {
				yyv4543[yyj4543] = ObjectReference{}
			} else {
				yyv4544 := &yyv4543[yyj4543]
				yyv4544.CodecDecodeSelf(d)
			}

		}
		if yyrt4543 {
			for ; yyj4543 < yyl4543; yyj4543++ {
				yyv4543 = append(yyv4543, ObjectReference{})
				yyh4543.ElemContainerState(yyj4543)
				if r.TryDecodeAsNil() {
					yyv4543[yyj4543] = ObjectReference{}
				} else {
					yyv4545 := &yyv4543[yyj4543]
					yyv4545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4543 := 0
		for ; !r.CheckBreak(); yyj4543++ {

			if yyj4543 >= len(yyv4543) {
				yyv4543 = append(yyv4543, ObjectReference{}) // var yyz4543 ObjectReference
				yyc4543 = true
			}
			yyh4543.ElemContainerState(yyj4543)
			if yyj4543 < len(yyv4543) {
				if r.TryDecodeAsNil() {
					yyv4543[yyj4543] = ObjectReference{}
				} else {
					yyv4546 := &yyv4543[yyj4543]
					yyv4546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4543 < len(yyv4543) {
			yyv4543 = yyv4543[:yyj4543]
			yyc4543 = true
		} else if yyj4543 == 0 && yyv4543 == nil {
			yyv4543 = []ObjectReference{}
			yyc4543 = true
		}
	}
	yyh4543.End()
	if yyc4543 {
		*v = yyv4543
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4547 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4548 := &yyv4547
		yy4548.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4549 := *v
	yyh4549, yyl4549 := z.DecSliceHelperStart()
	var yyc4549 bool
	if yyl4549 == 0 {
		if yyv4549 == nil {
			yyv4549 = []ServiceAccount{}
			yyc4549 = true
		} else if len(yyv4549) != 0 {
			yyv4549 = yyv4549[:0]
			yyc4549 = true
		}
	} else if yyl4549 > 0 {
		var yyrr4549, yyrl4549 int
		var yyrt4549 bool
		if yyl4549 > cap(yyv4549) {

			yyrg4549 := len(yyv4549) > 0
			yyv24549 := yyv4549
			yyrl4549, yyrt4549 = z.DecInferLen(yyl4549, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4549 {
				if yyrl4549 <= cap(yyv4549) {
					yyv4549 = yyv4549[:yyrl4549]
				} else {
					yyv4549 = make([]ServiceAccount, yyrl4549)
				}
			} else {
				yyv4549 = make([]ServiceAccount, yyrl4549)
			}
			yyc4549 = true
			yyrr4549 = len(yyv4549)
			if yyrg4549 {
				copy(yyv4549, yyv24549)
			}
		} else if yyl4549 != len(yyv4549) {
			yyv4549 = yyv4549[:yyl4549]
			yyc4549 = true
		}
		yyj4549 := 0
		for ; yyj4549 < yyrr4549; yyj4549++ {
			yyh4549.ElemContainerState(yyj4549)
			if r.TryDecodeAsNil() {
				yyv4549[yyj4549] = ServiceAccount{}
			} else {
				yyv4550 := &yyv4549[yyj4549]
				yyv4550.CodecDecodeSelf(d)
			}

		}
		if yyrt4549 {
			for ; yyj4549 < yyl4549; yyj4549++ {
				yyv4549 = append(yyv4549, ServiceAccount{})
				yyh4549.ElemContainerState(yyj4549)
				if r.TryDecodeAsNil() {
					yyv4549[yyj4549] = ServiceAccount{}
				} else {
					yyv4551 := &yyv4549[yyj4549]
					yyv4551.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4549 := 0
		for ; !r.CheckBreak(); yyj4549++ {

			if yyj4549 >= len(yyv4549) {
				yyv4549 = append(yyv4549, ServiceAccount{}) // var yyz4549 ServiceAccount
				yyc4549 = true
			}
			yyh4549.ElemContainerState(yyj4549)
			if yyj4549 < len(yyv4549) {
				if r.TryDecodeAsNil() {
					yyv4549[yyj4549] = ServiceAccount{}
				} else {
					yyv4552 := &yyv4549[yyj4549]
					yyv4552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4549 < len(yyv4549) {
			yyv4549 = yyv4549[:yyj4549]
			yyc4549 = true
		} else if yyj4549 == 0 && yyv4549 == nil {
			yyv4549 = []ServiceAccount{}
			yyc4549 = true
		}
	}
	yyh4549.End()
	if yyc4549 {
		*v = yyv4549
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4553 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4554 := &yyv4553
		yy4554.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4555 := *v
	yyh4555, yyl4555 := z.DecSliceHelperStart()
	var yyc4555 bool
	if yyl4555 == 0 {
		if yyv4555 == nil {
			yyv4555 = []EndpointSubset{}
			yyc4555 = true
		} else if len(yyv4555) != 0 {
			yyv4555 = yyv4555[:0]
			yyc4555 = true
		}
	} else if yyl4555 > 0 {
		var yyrr4555, yyrl4555 int
		var yyrt4555 bool
		if yyl4555 > cap(yyv4555) {

			yyrg4555 := len(yyv4555) > 0
			yyv24555 := yyv4555
			yyrl4555, yyrt4555 = z.DecInferLen(yyl4555, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4555 {
				if yyrl4555 <= cap(yyv4555) {
					yyv4555 = yyv4555[:yyrl4555]
				} else {
					yyv4555 = make([]EndpointSubset, yyrl4555)
				}
			} else {
				yyv4555 = make([]EndpointSubset, yyrl4555)
			}
			yyc4555 = true
			yyrr4555 = len(yyv4555)
			if yyrg4555 {
				copy(yyv4555, yyv24555)
			}
		} else if yyl4555 != len(yyv4555) {
			yyv4555 = yyv4555[:yyl4555]
			yyc4555 = true
		}
		yyj4555 := 0
		for ; yyj4555 < yyrr4555; yyj4555++ {
			yyh4555.ElemContainerState(yyj4555)
			if r.TryDecodeAsNil() {
				yyv4555[yyj4555] = EndpointSubset{}
			} else {
				yyv4556 := &yyv4555[yyj4555]
				yyv4556.CodecDecodeSelf(d)
			}

		}
		if yyrt4555 {
			for ; yyj4555 < yyl4555; yyj4555++ {
				yyv4555 = append(yyv4555, EndpointSubset{})
				yyh4555.ElemContainerState(yyj4555)
				if r.TryDecodeAsNil() {
					yyv4555[yyj4555] = EndpointSubset{}
				} else {
					yyv4557 := &yyv4555[yyj4555]
					yyv4557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4555 := 0
		for ; !r.CheckBreak(); yyj4555++ {

			if yyj4555 >= len(yyv4555) {
				yyv4555 = append(yyv4555, EndpointSubset{}) // var yyz4555 EndpointSubset
				yyc4555 = true
			}
			yyh4555.ElemContainerState(yyj4555)
			if yyj4555 < len(yyv4555) {
				if r.TryDecodeAsNil() {
					yyv4555[yyj4555] = EndpointSubset{}
				} else {
					yyv4558 := &yyv4555[yyj4555]
					yyv4558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4555 < len(yyv4555) {
			yyv4555 = yyv4555[:yyj4555]
			yyc4555 = true
		} else if yyj4555 == 0 && yyv4555 == nil {
			yyv4555 = []EndpointSubset{}
			yyc4555 = true
		}
	}
	yyh4555.End()
	if yyc4555 {
		*v = yyv4555
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4559 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4560 := &yyv4559
		yy4560.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4561 := *v
	yyh4561, yyl4561 := z.DecSliceHelperStart()
	var yyc4561 bool
	if yyl4561 == 0 {
		if yyv4561 == nil {
			yyv4561 = []EndpointAddress{}
			yyc4561 = true
		} else if len(yyv4561) != 0 {
			yyv4561 = yyv4561[:0]
			yyc4561 = true
		}
	} else if yyl4561 > 0 {
		var yyrr4561, yyrl4561 int
		var yyrt4561 bool
		if yyl4561 > cap(yyv4561) {

			yyrg4561 := len(yyv4561) > 0
			yyv24561 := yyv4561
			yyrl4561, yyrt4561 = z.DecInferLen(yyl4561, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4561 {
				if yyrl4561 <= cap(yyv4561) {
					yyv4561 = yyv4561[:yyrl4561]
				} else {
					yyv4561 = make([]EndpointAddress, yyrl4561)
				}
			} else {
				yyv4561 = make([]EndpointAddress, yyrl4561)
			}
			yyc4561 = true
			yyrr4561 = len(yyv4561)
			if yyrg4561 {
				copy(yyv4561, yyv24561)
			}
		} else if yyl4561 != len(yyv4561) {
			yyv4561 = yyv4561[:yyl4561]
			yyc4561 = true
		}
		yyj4561 := 0
		for ; yyj4561 < yyrr4561; yyj4561++ {
			yyh4561.ElemContainerState(yyj4561)
			if r.TryDecodeAsNil() {
				yyv4561[yyj4561] = EndpointAddress{}
			} else {
				yyv4562 := &yyv4561[yyj4561]
				yyv4562.CodecDecodeSelf(d)
			}

		}
		if yyrt4561 {
			for ; yyj4561 < yyl4561; yyj4561++ {
				yyv4561 = append(yyv4561, EndpointAddress{})
				yyh4561.ElemContainerState(yyj4561)
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = EndpointAddress{}
				} else {
					yyv4563 := &yyv4561[yyj4561]
					yyv4563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4561 := 0
		for ; !r.CheckBreak(); yyj4561++ {

			if yyj4561 >= len(yyv4561) {
				yyv4561 = append(yyv4561, EndpointAddress{}) // var yyz4561 EndpointAddress
				yyc4561 = true
			}
			yyh4561.ElemContainerState(yyj4561)
			if yyj4561 < len(yyv4561) {
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = EndpointAddress{}
				} else {
					yyv4564 := &yyv4561[yyj4561]
					yyv4564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4561 < len(yyv4561) {
			yyv4561 = yyv4561[:yyj4561]
			yyc4561 = true
		} else if yyj4561 == 0 && yyv4561 == nil {
			yyv4561 = []EndpointAddress{}
			yyc4561 = true
		}
	}
	yyh4561.End()
	if yyc4561 {
		*v = yyv4561
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4565 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4566 := &yyv4565
		yy4566.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4567 := *v
	yyh4567, yyl4567 := z.DecSliceHelperStart()
	var yyc4567 bool
	if yyl4567 == 0 {
		if yyv4567 == nil {
			yyv4567 = []EndpointPort{}
			yyc4567 = true
		} else if len(yyv4567) != 0 {
			yyv4567 = yyv4567[:0]
			yyc4567 = true
		}
	} else if yyl4567 > 0 {
		var yyrr4567, yyrl4567 int
		var yyrt4567 bool
		if yyl4567 > cap(yyv4567) {

			yyrg4567 := len(yyv4567) > 0
			yyv24567 := yyv4567
			yyrl4567, yyrt4567 = z.DecInferLen(yyl4567, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4567 {
				if yyrl4567 <= cap(yyv4567) {
					yyv4567 = yyv4567[:yyrl4567]
				} else {
					yyv4567 = make([]EndpointPort, yyrl4567)
				}
			} else {
				yyv4567 = make([]EndpointPort, yyrl4567)
			}
			yyc4567 = true
			yyrr4567 = len(yyv4567)
			if yyrg4567 {
				copy(yyv4567, yyv24567)
			}
		} else if yyl4567 != len(yyv4567) {
			yyv4567 = yyv4567[:yyl4567]
			yyc4567 = true
		}
		yyj4567 := 0
		for ; yyj4567 < yyrr4567; yyj4567++ {
			yyh4567.ElemContainerState(yyj4567)
			if r.TryDecodeAsNil() {
				yyv4567[yyj4567] = EndpointPort{}
			} else {
				yyv4568 := &yyv4567[yyj4567]
				yyv4568.CodecDecodeSelf(d)
			}

		}
		if yyrt4567 {
			for ; yyj4567 < yyl4567; yyj4567++ {
				yyv4567 = append(yyv4567, EndpointPort{})
				yyh4567.ElemContainerState(yyj4567)
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = EndpointPort{}
				} else {
					yyv4569 := &yyv4567[yyj4567]
					yyv4569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4567 := 0
		for ; !r.CheckBreak(); yyj4567++ {

			if yyj4567 >= len(yyv4567) {
				yyv4567 = append(yyv4567, EndpointPort{}) // var yyz4567 EndpointPort
				yyc4567 = true
			}
			yyh4567.ElemContainerState(yyj4567)
			if yyj4567 < len(yyv4567) {
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = EndpointPort{}
				} else {
					yyv4570 := &yyv4567[yyj4567]
					yyv4570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4567 < len(yyv4567) {
			yyv4567 = yyv4567[:yyj4567]
			yyc4567 = true
		} else if yyj4567 == 0 && yyv4567 == nil {
			yyv4567 = []EndpointPort{}
			yyc4567 = true
		}
	}
	yyh4567.End()
	if yyc4567 {
		*v = yyv4567
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4571 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4572 := &yyv4571
		yy4572.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4573 := *v
	yyh4573, yyl4573 := z.DecSliceHelperStart()
	var yyc4573 bool
	if yyl4573 == 0 {
		if yyv4573 == nil {
			yyv4573 = []Endpoints{}
			yyc4573 = true
		} else if len(yyv4573) != 0 {
			yyv4573 = yyv4573[:0]
			yyc4573 = true
		}
	} else if yyl4573 > 0 {
		var yyrr4573, yyrl4573 int
		var yyrt4573 bool
		if yyl4573 > cap(yyv4573) {

			yyrg4573 := len(yyv4573) > 0
			yyv24573 := yyv4573
			yyrl4573, yyrt4573 = z.DecInferLen(yyl4573, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4573 {
				if yyrl4573 <= cap(yyv4573) {
					yyv4573 = yyv4573[:yyrl4573]
				} else {
					yyv4573 = make([]Endpoints, yyrl4573)
				}
			} else {
				yyv4573 = make([]Endpoints, yyrl4573)
			}
			yyc4573 = true
			yyrr4573 = len(yyv4573)
			if yyrg4573 {
				copy(yyv4573, yyv24573)
			}
		} else if yyl4573 != len(yyv4573) {
			yyv4573 = yyv4573[:yyl4573]
			yyc4573 = true
		}
		yyj4573 := 0
		for ; yyj4573 < yyrr4573; yyj4573++ {
			yyh4573.ElemContainerState(yyj4573)
			if r.TryDecodeAsNil() {
				yyv4573[yyj4573] = Endpoints{}
			} else {
				yyv4574 := &yyv4573[yyj4573]
				yyv4574.CodecDecodeSelf(d)
			}

		}
		if yyrt4573 {
			for ; yyj4573 < yyl4573; yyj4573++ {
				yyv4573 = append(yyv4573, Endpoints{})
				yyh4573.ElemContainerState(yyj4573)
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = Endpoints{}
				} else {
					yyv4575 := &yyv4573[yyj4573]
					yyv4575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4573 := 0
		for ; !r.CheckBreak(); yyj4573++ {

			if yyj4573 >= len(yyv4573) {
				yyv4573 = append(yyv4573, Endpoints{}) // var yyz4573 Endpoints
				yyc4573 = true
			}
			yyh4573.ElemContainerState(yyj4573)
			if yyj4573 < len(yyv4573) {
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = Endpoints{}
				} else {
					yyv4576 := &yyv4573[yyj4573]
					yyv4576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4573 < len(yyv4573) {
			yyv4573 = yyv4573[:yyj4573]
			yyc4573 = true
		} else if yyj4573 == 0 && yyv4573 == nil {
			yyv4573 = []Endpoints{}
			yyc4573 = true
		}
	}
	yyh4573.End()
	if yyc4573 {
		*v = yyv4573
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4577 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4578 := &yyv4577
		yy4578.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4579 := *v
	yyh4579, yyl4579 := z.DecSliceHelperStart()
	var yyc4579 bool
	if yyl4579 == 0 {
		if yyv4579 == nil {
			yyv4579 = []NodeCondition{}
			yyc4579 = true
		} else if len(yyv4579) != 0 {
			yyv4579 = yyv4579[:0]
			yyc4579 = true
		}
	} else if yyl4579 > 0 {
		var yyrr4579, yyrl4579 int
		var yyrt4579 bool
		if yyl4579 > cap(yyv4579) {

			yyrg4579 := len(yyv4579) > 0
			yyv24579 := yyv4579
			yyrl4579, yyrt4579 = z.DecInferLen(yyl4579, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4579 {
				if yyrl4579 <= cap(yyv4579) {
					yyv4579 = yyv4579[:yyrl4579]
				} else {
					yyv4579 = make([]NodeCondition, yyrl4579)
				}
			} else {
				yyv4579 = make([]NodeCondition, yyrl4579)
			}
			yyc4579 = true
			yyrr4579 = len(yyv4579)
			if yyrg4579 {
				copy(yyv4579, yyv24579)
			}
		} else if yyl4579 != len(yyv4579) {
			yyv4579 = yyv4579[:yyl4579]
			yyc4579 = true
		}
		yyj4579 := 0
		for ; yyj4579 < yyrr4579; yyj4579++ {
			yyh4579.ElemContainerState(yyj4579)
			if r.TryDecodeAsNil() {
				yyv4579[yyj4579] = NodeCondition{}
			} else {
				yyv4580 := &yyv4579[yyj4579]
				yyv4580.CodecDecodeSelf(d)
			}

		}
		if yyrt4579 {
			for ; yyj4579 < yyl4579; yyj4579++ {
				yyv4579 = append(yyv4579, NodeCondition{})
				yyh4579.ElemContainerState(yyj4579)
				if r.TryDecodeAsNil() {
					yyv4579[yyj4579] = NodeCondition{}
				} else {
					yyv4581 := &yyv4579[yyj4579]
					yyv4581.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4579 := 0
		for ; !r.CheckBreak(); yyj4579++ {

			if yyj4579 >= len(yyv4579) {
				yyv4579 = append(yyv4579, NodeCondition{}) // var yyz4579 NodeCondition
				yyc4579 = true
			}
			yyh4579.ElemContainerState(yyj4579)
			if yyj4579 < len(yyv4579) {
				if r.TryDecodeAsNil() {
					yyv4579[yyj4579] = NodeCondition{}
				} else {
					yyv4582 := &yyv4579[yyj4579]
					yyv4582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4579 < len(yyv4579) {
			yyv4579 = yyv4579[:yyj4579]
			yyc4579 = true
		} else if yyj4579 == 0 && yyv4579 == nil {
			yyv4579 = []NodeCondition{}
			yyc4579 = true
		}
	}
	yyh4579.End()
	if yyc4579 {
		*v = yyv4579
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4583 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4584 := &yyv4583
		yy4584.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4585 := *v
	yyh4585, yyl4585 := z.DecSliceHelperStart()
	var yyc4585 bool
	if yyl4585 == 0 {
		if yyv4585 == nil {
			yyv4585 = []NodeAddress{}
			yyc4585 = true
		} else if len(yyv4585) != 0 {
			yyv4585 = yyv4585[:0]
			yyc4585 = true
		}
	} else if yyl4585 > 0 {
		var yyrr4585, yyrl4585 int
		var yyrt4585 bool
		if yyl4585 > cap(yyv4585) {

			yyrg4585 := len(yyv4585) > 0
			yyv24585 := yyv4585
			yyrl4585, yyrt4585 = z.DecInferLen(yyl4585, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4585 {
				if yyrl4585 <= cap(yyv4585) {
					yyv4585 = yyv4585[:yyrl4585]
				} else {
					yyv4585 = make([]NodeAddress, yyrl4585)
				}
			} else {
				yyv4585 = make([]NodeAddress, yyrl4585)
			}
			yyc4585 = true
			yyrr4585 = len(yyv4585)
			if yyrg4585 {
				copy(yyv4585, yyv24585)
			}
		} else if yyl4585 != len(yyv4585) {
			yyv4585 = yyv4585[:yyl4585]
			yyc4585 = true
		}
		yyj4585 := 0
		for ; yyj4585 < yyrr4585; yyj4585++ {
			yyh4585.ElemContainerState(yyj4585)
			if r.TryDecodeAsNil() {
				yyv4585[yyj4585] = NodeAddress{}
			} else {
				yyv4586 := &yyv4585[yyj4585]
				yyv4586.CodecDecodeSelf(d)
			}

		}
		if yyrt4585 {
			for ; yyj4585 < yyl4585; yyj4585++ {
				yyv4585 = append(yyv4585, NodeAddress{})
				yyh4585.ElemContainerState(yyj4585)
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = NodeAddress{}
				} else {
					yyv4587 := &yyv4585[yyj4585]
					yyv4587.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4585 := 0
		for ; !r.CheckBreak(); yyj4585++ {

			if yyj4585 >= len(yyv4585) {
				yyv4585 = append(yyv4585, NodeAddress{}) // var yyz4585 NodeAddress
				yyc4585 = true
			}
			yyh4585.ElemContainerState(yyj4585)
			if yyj4585 < len(yyv4585) {
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = NodeAddress{}
				} else {
					yyv4588 := &yyv4585[yyj4585]
					yyv4588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4585 < len(yyv4585) {
			yyv4585 = yyv4585[:yyj4585]
			yyc4585 = true
		} else if yyj4585 == 0 && yyv4585 == nil {
			yyv4585 = []NodeAddress{}
			yyc4585 = true
		}
	}
	yyh4585.End()
	if yyc4585 {
		*v = yyv4585
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4589 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4590 := &yyv4589
		yy4590.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4591 := *v
	yyh4591, yyl4591 := z.DecSliceHelperStart()
	var yyc4591 bool
	if yyl4591 == 0 {
		if yyv4591 == nil {
			yyv4591 = []ContainerImage{}
			yyc4591 = true
		} else if len(yyv4591) != 0 {
			yyv4591 = yyv4591[:0]
			yyc4591 = true
		}
	} else if yyl4591 > 0 {
		var yyrr4591, yyrl4591 int
		var yyrt4591 bool
		if yyl4591 > cap(yyv4591) {

			yyrg4591 := len(yyv4591) > 0
			yyv24591 := yyv4591
			yyrl4591, yyrt4591 = z.DecInferLen(yyl4591, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4591 {
				if yyrl4591 <= cap(yyv4591) {
					yyv4591 = yyv4591[:yyrl4591]
				} else {
					yyv4591 = make([]ContainerImage, yyrl4591)
				}
			} else {
				yyv4591 = make([]ContainerImage, yyrl4591)
			}
			yyc4591 = true
			yyrr4591 = len(yyv4591)
			if yyrg4591 {
				copy(yyv4591, yyv24591)
			}
		} else if yyl4591 != len(yyv4591) {
			yyv4591 = yyv4591[:yyl4591]
			yyc4591 = true
		}
		yyj4591 := 0
		for ; yyj4591 < yyrr4591; yyj4591++ {
			yyh4591.ElemContainerState(yyj4591)
			if r.TryDecodeAsNil() {
				yyv4591[yyj4591] = ContainerImage{}
			} else {
				yyv4592 := &yyv4591[yyj4591]
				yyv4592.CodecDecodeSelf(d)
			}

		}
		if yyrt4591 {
			for ; yyj4591 < yyl4591; yyj4591++ {
				yyv4591 = append(yyv4591, ContainerImage{})
				yyh4591.ElemContainerState(yyj4591)
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = ContainerImage{}
				} else {
					yyv4593 := &yyv4591[yyj4591]
					yyv4593.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4591 := 0
		for ; !r.CheckBreak(); yyj4591++ {

			if yyj4591 >= len(yyv4591) {
				yyv4591 = append(yyv4591, ContainerImage{}) // var yyz4591 ContainerImage
				yyc4591 = true
			}
			yyh4591.ElemContainerState(yyj4591)
			if yyj4591 < len(yyv4591) {
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = ContainerImage{}
				} else {
					yyv4594 := &yyv4591[yyj4591]
					yyv4594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4591 < len(yyv4591) {
			yyv4591 = yyv4591[:yyj4591]
			yyc4591 = true
		} else if yyj4591 == 0 && yyv4591 == nil {
			yyv4591 = []ContainerImage{}
			yyc4591 = true
		}
	}
	yyh4591.End()
	if yyc4591 {
		*v = yyv4591
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4595 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4595.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4596 := *v
	yyh4596, yyl4596 := z.DecSliceHelperStart()
	var yyc4596 bool
	if yyl4596 == 0 {
		if yyv4596 == nil {
			yyv4596 = []UniqueVolumeName{}
			yyc4596 = true
		} else if len(yyv4596) != 0 {
			yyv4596 = yyv4596[:0]
			yyc4596 = true
		}
	} else if yyl4596 > 0 {
		var yyrr4596, yyrl4596 int
		var yyrt4596 bool
		if yyl4596 > cap(yyv4596) {

			yyrl4596, yyrt4596 = z.DecInferLen(yyl4596, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4596 {
				if yyrl4596 <= cap(yyv4596) {
					yyv4596 = yyv4596[:yyrl4596]
				} else {
					yyv4596 = make([]UniqueVolumeName, yyrl4596)
				}
			} else {
				yyv4596 = make([]UniqueVolumeName, yyrl4596)
			}
			yyc4596 = true
			yyrr4596 = len(yyv4596)
		} else if yyl4596 != len(yyv4596) {
			yyv4596 = yyv4596[:yyl4596]
			yyc4596 = true
		}
		yyj4596 := 0
		for ; yyj4596 < yyrr4596; yyj4596++ {
			yyh4596.ElemContainerState(yyj4596)
			if r.TryDecodeAsNil() {
				yyv4596[yyj4596] = ""
			} else {
				yyv4596[yyj4596] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4596 {
			for ; yyj4596 < yyl4596; yyj4596++ {
				yyv4596 = append(yyv4596, "")
				yyh4596.ElemContainerState(yyj4596)
				if r.TryDecodeAsNil() {
					yyv4596[yyj4596] = ""
				} else {
					yyv4596[yyj4596] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4596 := 0
		for ; !r.CheckBreak(); yyj4596++ {

			if yyj4596 >= len(yyv4596) {
				yyv4596 = append(yyv4596, "") // var yyz4596 UniqueVolumeName
				yyc4596 = true
			}
			yyh4596.ElemContainerState(yyj4596)
			if yyj4596 < len(yyv4596) {
				if r.TryDecodeAsNil() {
					yyv4596[yyj4596] = ""
				} else {
					yyv4596[yyj4596] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4596 < len(yyv4596) {
			yyv4596 = yyv4596[:yyj4596]
			yyc4596 = true
		} else if yyj4596 == 0 && yyv4596 == nil {
			yyv4596 = []UniqueVolumeName{}
			yyc4596 = true
		}
	}
	yyh4596.End()
	if yyc4596 {
		*v = yyv4596
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4600 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4601 := &yyv4600
		yy4601.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4602 := *v
	yyh4602, yyl4602 := z.DecSliceHelperStart()
	var yyc4602 bool
	if yyl4602 == 0 {
		if yyv4602 == nil {
			yyv4602 = []AttachedVolume{}
			yyc4602 = true
		} else if len(yyv4602) != 0 {
			yyv4602 = yyv4602[:0]
			yyc4602 = true
		}
	} else if yyl4602 > 0 {
		var yyrr4602, yyrl4602 int
		var yyrt4602 bool
		if yyl4602 > cap(yyv4602) {

			yyrg4602 := len(yyv4602) > 0
			yyv24602 := yyv4602
			yyrl4602, yyrt4602 = z.DecInferLen(yyl4602, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4602 {
				if yyrl4602 <= cap(yyv4602) {
					yyv4602 = yyv4602[:yyrl4602]
				} else {
					yyv4602 = make([]AttachedVolume, yyrl4602)
				}
			} else {
				yyv4602 = make([]AttachedVolume, yyrl4602)
			}
			yyc4602 = true
			yyrr4602 = len(yyv4602)
			if yyrg4602 {
				copy(yyv4602, yyv24602)
			}
		} else if yyl4602 != len(yyv4602) {
			yyv4602 = yyv4602[:yyl4602]
			yyc4602 = true
		}
		yyj4602 := 0
		for ; yyj4602 < yyrr4602; yyj4602++ {
			yyh4602.ElemContainerState(yyj4602)
			if r.TryDecodeAsNil() {
				yyv4602[yyj4602] = AttachedVolume{}
			} else {
				yyv4603 := &yyv4602[yyj4602]
				yyv4603.CodecDecodeSelf(d)
			}

		}
		if yyrt4602 {
			for ; yyj4602 < yyl4602; yyj4602++ {
				yyv4602 = append(yyv4602, AttachedVolume{})
				yyh4602.ElemContainerState(yyj4602)
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = AttachedVolume{}
				} else {
					yyv4604 := &yyv4602[yyj4602]
					yyv4604.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4602 := 0
		for ; !r.CheckBreak(); yyj4602++ {

			if yyj4602 >= len(yyv4602) {
				yyv4602 = append(yyv4602, AttachedVolume{}) // var yyz4602 AttachedVolume
				yyc4602 = true
			}
			yyh4602.ElemContainerState(yyj4602)
			if yyj4602 < len(yyv4602) {
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = AttachedVolume{}
				} else {
					yyv4605 := &yyv4602[yyj4602]
					yyv4605.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4602 < len(yyv4602) {
			yyv4602 = yyv4602[:yyj4602]
			yyc4602 = true
		} else if yyj4602 == 0 && yyv4602 == nil {
			yyv4602 = []AttachedVolume{}
			yyc4602 = true
		}
	}
	yyh4602.End()
	if yyc4602 {
		*v = yyv4602
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4606 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4607 := &yyv4606
		yy4607.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4608 := *v
	yyh4608, yyl4608 := z.DecSliceHelperStart()
	var yyc4608 bool
	if yyl4608 == 0 {
		if yyv4608 == nil {
			yyv4608 = []PreferAvoidPodsEntry{}
			yyc4608 = true
		} else if len(yyv4608) != 0 {
			yyv4608 = yyv4608[:0]
			yyc4608 = true
		}
	} else if yyl4608 > 0 {
		var yyrr4608, yyrl4608 int
		var yyrt4608 bool
		if yyl4608 > cap(yyv4608) {

			yyrg4608 := len(yyv4608) > 0
			yyv24608 := yyv4608
			yyrl4608, yyrt4608 = z.DecInferLen(yyl4608, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4608 {
				if yyrl4608 <= cap(yyv4608) {
					yyv4608 = yyv4608[:yyrl4608]
				} else {
					yyv4608 = make([]PreferAvoidPodsEntry, yyrl4608)
				}
			} else {
				yyv4608 = make([]PreferAvoidPodsEntry, yyrl4608)
			}
			yyc4608 = true
			yyrr4608 = len(yyv4608)
			if yyrg4608 {
				copy(yyv4608, yyv24608)
			}
		} else if yyl4608 != len(yyv4608) {
			yyv4608 = yyv4608[:yyl4608]
			yyc4608 = true
		}
		yyj4608 := 0
		for ; yyj4608 < yyrr4608; yyj4608++ {
			yyh4608.ElemContainerState(yyj4608)
			if r.TryDecodeAsNil() {
				yyv4608[yyj4608] = PreferAvoidPodsEntry{}
			} else {
				yyv4609 := &yyv4608[yyj4608]
				yyv4609.CodecDecodeSelf(d)
			}

		}
		if yyrt4608 {
			for ; yyj4608 < yyl4608; yyj4608++ {
				yyv4608 = append(yyv4608, PreferAvoidPodsEntry{})
				yyh4608.ElemContainerState(yyj4608)
				if r.TryDecodeAsNil() {
					yyv4608[yyj4608] = PreferAvoidPodsEntry{}
				} else {
					yyv4610 := &yyv4608[yyj4608]
					yyv4610.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4608 := 0
		for ; !r.CheckBreak(); yyj4608++ {

			if yyj4608 >= len(yyv4608) {
				yyv4608 = append(yyv4608, PreferAvoidPodsEntry{}) // var yyz4608 PreferAvoidPodsEntry
				yyc4608 = true
			}
			yyh4608.ElemContainerState(yyj4608)
			if yyj4608 < len(yyv4608) {
				if r.TryDecodeAsNil() {
					yyv4608[yyj4608] = PreferAvoidPodsEntry{}
				} else {
					yyv4611 := &yyv4608[yyj4608]
					yyv4611.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4608 < len(yyv4608) {
			yyv4608 = yyv4608[:yyj4608]
			yyc4608 = true
		} else if yyj4608 == 0 && yyv4608 == nil {
			yyv4608 = []PreferAvoidPodsEntry{}
			yyc4608 = true
		}
	}
	yyh4608.End()
	if yyc4608 {
		*v = yyv4608
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4612, yyv4612 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4612.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4613 := &yyv4612
		yym4614 := z.EncBinary()
		_ = yym4614
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4613) {
		} else if !yym4614 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4613)
		} else {
			z.EncFallback(yy4613)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4615 := *v
	yyl4615 := r.ReadMapStart()
	yybh4615 := z.DecBasicHandle()
	if yyv4615 == nil {
		yyrl4615, _ := z.DecInferLen(yyl4615, yybh4615.MaxInitLen, 72)
		yyv4615 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4615)
		*v = yyv4615
	}
	var yymk4615 ResourceName
	var yymv4615 pkg3_resource.Quantity
	var yymg4615 bool
	if yybh4615.MapValueReset {
		yymg4615 = true
	}
	if yyl4615 > 0 {
		for yyj4615 := 0; yyj4615 < yyl4615; yyj4615++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4615 = ""
			} else {
				yymk4615 = ResourceName(r.DecodeString())
			}

			if yymg4615 {
				yymv4615 = yyv4615[yymk4615]
			} else {
				yymv4615 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4615 = pkg3_resource.Quantity{}
			} else {
				yyv4617 := &yymv4615
				yym4618 := z.DecBinary()
				_ = yym4618
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4617) {
				} else if !yym4618 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4617)
				} else {
					z.DecFallback(yyv4617, false)
				}
			}

			if yyv4615 != nil {
				yyv4615[yymk4615] = yymv4615
			}
		}
	} else if yyl4615 < 0 {
		for yyj4615 := 0; !r.CheckBreak(); yyj4615++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4615 = ""
			} else {
				yymk4615 = ResourceName(r.DecodeString())
			}

			if yymg4615 {
				yymv4615 = yyv4615[yymk4615]
			} else {
				yymv4615 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4615 = pkg3_resource.Quantity{}
			} else {
				yyv4620 := &yymv4615
				yym4621 := z.DecBinary()
				_ = yym4621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4620) {
				} else if !yym4621 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4620)
				} else {
					z.DecFallback(yyv4620, false)
				}
			}

			if yyv4615 != nil {
				yyv4615[yymk4615] = yymv4615
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4623 := &yyv4622
		yy4623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4624 := *v
	yyh4624, yyl4624 := z.DecSliceHelperStart()
	var yyc4624 bool
	if yyl4624 == 0 {
		if yyv4624 == nil {
			yyv4624 = []Node{}
			yyc4624 = true
		} else if len(yyv4624) != 0 {
			yyv4624 = yyv4624[:0]
			yyc4624 = true
		}
	} else if yyl4624 > 0 {
		var yyrr4624, yyrl4624 int
		var yyrt4624 bool
		if yyl4624 > cap(yyv4624) {

			yyrg4624 := len(yyv4624) > 0
			yyv24624 := yyv4624
			yyrl4624, yyrt4624 = z.DecInferLen(yyl4624, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4624 {
				if yyrl4624 <= cap(yyv4624) {
					yyv4624 = yyv4624[:yyrl4624]
				} else {
					yyv4624 = make([]Node, yyrl4624)
				}
			} else {
				yyv4624 = make([]Node, yyrl4624)
			}
			yyc4624 = true
			yyrr4624 = len(yyv4624)
			if yyrg4624 {
				copy(yyv4624, yyv24624)
			}
		} else if yyl4624 != len(yyv4624) {
			yyv4624 = yyv4624[:yyl4624]
			yyc4624 = true
		}
		yyj4624 := 0
		for ; yyj4624 < yyrr4624; yyj4624++ {
			yyh4624.ElemContainerState(yyj4624)
			if r.TryDecodeAsNil() {
				yyv4624[yyj4624] = Node{}
			} else {
				yyv4625 := &yyv4624[yyj4624]
				yyv4625.CodecDecodeSelf(d)
			}

		}
		if yyrt4624 {
			for ; yyj4624 < yyl4624; yyj4624++ {
				yyv4624 = append(yyv4624, Node{})
				yyh4624.ElemContainerState(yyj4624)
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = Node{}
				} else {
					yyv4626 := &yyv4624[yyj4624]
					yyv4626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4624 := 0
		for ; !r.CheckBreak(); yyj4624++ {

			if yyj4624 >= len(yyv4624) {
				yyv4624 = append(yyv4624, Node{}) // var yyz4624 Node
				yyc4624 = true
			}
			yyh4624.ElemContainerState(yyj4624)
			if yyj4624 < len(yyv4624) {
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = Node{}
				} else {
					yyv4627 := &yyv4624[yyj4624]
					yyv4627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4624 < len(yyv4624) {
			yyv4624 = yyv4624[:yyj4624]
			yyc4624 = true
		} else if yyj4624 == 0 && yyv4624 == nil {
			yyv4624 = []Node{}
			yyc4624 = true
		}
	}
	yyh4624.End()
	if yyc4624 {
		*v = yyv4624
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4629 := *v
	yyh4629, yyl4629 := z.DecSliceHelperStart()
	var yyc4629 bool
	if yyl4629 == 0 {
		if yyv4629 == nil {
			yyv4629 = []FinalizerName{}
			yyc4629 = true
		} else if len(yyv4629) != 0 {
			yyv4629 = yyv4629[:0]
			yyc4629 = true
		}
	} else if yyl4629 > 0 {
		var yyrr4629, yyrl4629 int
		var yyrt4629 bool
		if yyl4629 > cap(yyv4629) {

			yyrl4629, yyrt4629 = z.DecInferLen(yyl4629, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4629 {
				if yyrl4629 <= cap(yyv4629) {
					yyv4629 = yyv4629[:yyrl4629]
				} else {
					yyv4629 = make([]FinalizerName, yyrl4629)
				}
			} else {
				yyv4629 = make([]FinalizerName, yyrl4629)
			}
			yyc4629 = true
			yyrr4629 = len(yyv4629)
		} else if yyl4629 != len(yyv4629) {
			yyv4629 = yyv4629[:yyl4629]
			yyc4629 = true
		}
		yyj4629 := 0
		for ; yyj4629 < yyrr4629; yyj4629++ {
			yyh4629.ElemContainerState(yyj4629)
			if r.TryDecodeAsNil() {
				yyv4629[yyj4629] = ""
			} else {
				yyv4629[yyj4629] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4629 {
			for ; yyj4629 < yyl4629; yyj4629++ {
				yyv4629 = append(yyv4629, "")
				yyh4629.ElemContainerState(yyj4629)
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = ""
				} else {
					yyv4629[yyj4629] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4629 := 0
		for ; !r.CheckBreak(); yyj4629++ {

			if yyj4629 >= len(yyv4629) {
				yyv4629 = append(yyv4629, "") // var yyz4629 FinalizerName
				yyc4629 = true
			}
			yyh4629.ElemContainerState(yyj4629)
			if yyj4629 < len(yyv4629) {
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = ""
				} else {
					yyv4629[yyj4629] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4629 < len(yyv4629) {
			yyv4629 = yyv4629[:yyj4629]
			yyc4629 = true
		} else if yyj4629 == 0 && yyv4629 == nil {
			yyv4629 = []FinalizerName{}
			yyc4629 = true
		}
	}
	yyh4629.End()
	if yyc4629 {
		*v = yyv4629
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4634 := &yyv4633
		yy4634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4635 := *v
	yyh4635, yyl4635 := z.DecSliceHelperStart()
	var yyc4635 bool
	if yyl4635 == 0 {
		if yyv4635 == nil {
			yyv4635 = []Namespace{}
			yyc4635 = true
		} else if len(yyv4635) != 0 {
			yyv4635 = yyv4635[:0]
			yyc4635 = true
		}
	} else if yyl4635 > 0 {
		var yyrr4635, yyrl4635 int
		var yyrt4635 bool
		if yyl4635 > cap(yyv4635) {

			yyrg4635 := len(yyv4635) > 0
			yyv24635 := yyv4635
			yyrl4635, yyrt4635 = z.DecInferLen(yyl4635, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4635 {
				if yyrl4635 <= cap(yyv4635) {
					yyv4635 = yyv4635[:yyrl4635]
				} else {
					yyv4635 = make([]Namespace, yyrl4635)
				}
			} else {
				yyv4635 = make([]Namespace, yyrl4635)
			}
			yyc4635 = true
			yyrr4635 = len(yyv4635)
			if yyrg4635 {
				copy(yyv4635, yyv24635)
			}
		} else if yyl4635 != len(yyv4635) {
			yyv4635 = yyv4635[:yyl4635]
			yyc4635 = true
		}
		yyj4635 := 0
		for ; yyj4635 < yyrr4635; yyj4635++ {
			yyh4635.ElemContainerState(yyj4635)
			if r.TryDecodeAsNil() {
				yyv4635[yyj4635] = Namespace{}
			} else {
				yyv4636 := &yyv4635[yyj4635]
				yyv4636.CodecDecodeSelf(d)
			}

		}
		if yyrt4635 {
			for ; yyj4635 < yyl4635; yyj4635++ {
				yyv4635 = append(yyv4635, Namespace{})
				yyh4635.ElemContainerState(yyj4635)
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = Namespace{}
				} else {
					yyv4637 := &yyv4635[yyj4635]
					yyv4637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4635 := 0
		for ; !r.CheckBreak(); yyj4635++ {

			if yyj4635 >= len(yyv4635) {
				yyv4635 = append(yyv4635, Namespace{}) // var yyz4635 Namespace
				yyc4635 = true
			}
			yyh4635.ElemContainerState(yyj4635)
			if yyj4635 < len(yyv4635) {
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = Namespace{}
				} else {
					yyv4638 := &yyv4635[yyj4635]
					yyv4638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4635 < len(yyv4635) {
			yyv4635 = yyv4635[:yyj4635]
			yyc4635 = true
		} else if yyj4635 == 0 && yyv4635 == nil {
			yyv4635 = []Namespace{}
			yyc4635 = true
		}
	}
	yyh4635.End()
	if yyc4635 {
		*v = yyv4635
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4640 := &yyv4639
		yy4640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4641 := *v
	yyh4641, yyl4641 := z.DecSliceHelperStart()
	var yyc4641 bool
	if yyl4641 == 0 {
		if yyv4641 == nil {
			yyv4641 = []Event{}
			yyc4641 = true
		} else if len(yyv4641) != 0 {
			yyv4641 = yyv4641[:0]
			yyc4641 = true
		}
	} else if yyl4641 > 0 {
		var yyrr4641, yyrl4641 int
		var yyrt4641 bool
		if yyl4641 > cap(yyv4641) {

			yyrg4641 := len(yyv4641) > 0
			yyv24641 := yyv4641
			yyrl4641, yyrt4641 = z.DecInferLen(yyl4641, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4641 {
				if yyrl4641 <= cap(yyv4641) {
					yyv4641 = yyv4641[:yyrl4641]
				} else {
					yyv4641 = make([]Event, yyrl4641)
				}
			} else {
				yyv4641 = make([]Event, yyrl4641)
			}
			yyc4641 = true
			yyrr4641 = len(yyv4641)
			if yyrg4641 {
				copy(yyv4641, yyv24641)
			}
		} else if yyl4641 != len(yyv4641) {
			yyv4641 = yyv4641[:yyl4641]
			yyc4641 = true
		}
		yyj4641 := 0
		for ; yyj4641 < yyrr4641; yyj4641++ {
			yyh4641.ElemContainerState(yyj4641)
			if r.TryDecodeAsNil() {
				yyv4641[yyj4641] = Event{}
			} else {
				yyv4642 := &yyv4641[yyj4641]
				yyv4642.CodecDecodeSelf(d)
			}

		}
		if yyrt4641 {
			for ; yyj4641 < yyl4641; yyj4641++ {
				yyv4641 = append(yyv4641, Event{})
				yyh4641.ElemContainerState(yyj4641)
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = Event{}
				} else {
					yyv4643 := &yyv4641[yyj4641]
					yyv4643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4641 := 0
		for ; !r.CheckBreak(); yyj4641++ {

			if yyj4641 >= len(yyv4641) {
				yyv4641 = append(yyv4641, Event{}) // var yyz4641 Event
				yyc4641 = true
			}
			yyh4641.ElemContainerState(yyj4641)
			if yyj4641 < len(yyv4641) {
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = Event{}
				} else {
					yyv4644 := &yyv4641[yyj4641]
					yyv4644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4641 < len(yyv4641) {
			yyv4641 = yyv4641[:yyj4641]
			yyc4641 = true
		} else if yyj4641 == 0 && yyv4641 == nil {
			yyv4641 = []Event{}
			yyc4641 = true
		}
	}
	yyh4641.End()
	if yyc4641 {
		*v = yyv4641
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4645 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4645 == nil {
			r.EncodeNil()
		} else {
			yym4646 := z.EncBinary()
			_ = yym4646
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4645) {
			} else {
				z.EncFallback(yyv4645)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4647 := *v
	yyh4647, yyl4647 := z.DecSliceHelperStart()
	var yyc4647 bool
	if yyl4647 == 0 {
		if yyv4647 == nil {
			yyv4647 = []pkg7_runtime.Object{}
			yyc4647 = true
		} else if len(yyv4647) != 0 {
			yyv4647 = yyv4647[:0]
			yyc4647 = true
		}
	} else if yyl4647 > 0 {
		var yyrr4647, yyrl4647 int
		var yyrt4647 bool
		if yyl4647 > cap(yyv4647) {

			yyrg4647 := len(yyv4647) > 0
			yyv24647 := yyv4647
			yyrl4647, yyrt4647 = z.DecInferLen(yyl4647, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4647 {
				if yyrl4647 <= cap(yyv4647) {
					yyv4647 = yyv4647[:yyrl4647]
				} else {
					yyv4647 = make([]pkg7_runtime.Object, yyrl4647)
				}
			} else {
				yyv4647 = make([]pkg7_runtime.Object, yyrl4647)
			}
			yyc4647 = true
			yyrr4647 = len(yyv4647)
			if yyrg4647 {
				copy(yyv4647, yyv24647)
			}
		} else if yyl4647 != len(yyv4647) {
			yyv4647 = yyv4647[:yyl4647]
			yyc4647 = true
		}
		yyj4647 := 0
		for ; yyj4647 < yyrr4647; yyj4647++ {
			yyh4647.ElemContainerState(yyj4647)
			if r.TryDecodeAsNil() {
				yyv4647[yyj4647] = nil
			} else {
				yyv4648 := &yyv4647[yyj4647]
				yym4649 := z.DecBinary()
				_ = yym4649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4648) {
				} else {
					z.DecFallback(yyv4648, true)
				}
			}

		}
		if yyrt4647 {
			for ; yyj4647 < yyl4647; yyj4647++ {
				yyv4647 = append(yyv4647, nil)
				yyh4647.ElemContainerState(yyj4647)
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = nil
				} else {
					yyv4650 := &yyv4647[yyj4647]
					yym4651 := z.DecBinary()
					_ = yym4651
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4650) {
					} else {
						z.DecFallback(yyv4650, true)
					}
				}

			}
		}

	} else {
		yyj4647 := 0
		for ; !r.CheckBreak(); yyj4647++ {

			if yyj4647 >= len(yyv4647) {
				yyv4647 = append(yyv4647, nil) // var yyz4647 pkg7_runtime.Object
				yyc4647 = true
			}
			yyh4647.ElemContainerState(yyj4647)
			if yyj4647 < len(yyv4647) {
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = nil
				} else {
					yyv4652 := &yyv4647[yyj4647]
					yym4653 := z.DecBinary()
					_ = yym4653
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4652) {
					} else {
						z.DecFallback(yyv4652, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4647 < len(yyv4647) {
			yyv4647 = yyv4647[:yyj4647]
			yyc4647 = true
		} else if yyj4647 == 0 && yyv4647 == nil {
			yyv4647 = []pkg7_runtime.Object{}
			yyc4647 = true
		}
	}
	yyh4647.End()
	if yyc4647 {
		*v = yyv4647
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4655 := &yyv4654
		yy4655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4656 := *v
	yyh4656, yyl4656 := z.DecSliceHelperStart()
	var yyc4656 bool
	if yyl4656 == 0 {
		if yyv4656 == nil {
			yyv4656 = []LimitRangeItem{}
			yyc4656 = true
		} else if len(yyv4656) != 0 {
			yyv4656 = yyv4656[:0]
			yyc4656 = true
		}
	} else if yyl4656 > 0 {
		var yyrr4656, yyrl4656 int
		var yyrt4656 bool
		if yyl4656 > cap(yyv4656) {

			yyrg4656 := len(yyv4656) > 0
			yyv24656 := yyv4656
			yyrl4656, yyrt4656 = z.DecInferLen(yyl4656, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4656 {
				if yyrl4656 <= cap(yyv4656) {
					yyv4656 = yyv4656[:yyrl4656]
				} else {
					yyv4656 = make([]LimitRangeItem, yyrl4656)
				}
			} else {
				yyv4656 = make([]LimitRangeItem, yyrl4656)
			}
			yyc4656 = true
			yyrr4656 = len(yyv4656)
			if yyrg4656 {
				copy(yyv4656, yyv24656)
			}
		} else if yyl4656 != len(yyv4656) {
			yyv4656 = yyv4656[:yyl4656]
			yyc4656 = true
		}
		yyj4656 := 0
		for ; yyj4656 < yyrr4656; yyj4656++ {
			yyh4656.ElemContainerState(yyj4656)
			if r.TryDecodeAsNil() {
				yyv4656[yyj4656] = LimitRangeItem{}
			} else {
				yyv4657 := &yyv4656[yyj4656]
				yyv4657.CodecDecodeSelf(d)
			}

		}
		if yyrt4656 {
			for ; yyj4656 < yyl4656; yyj4656++ {
				yyv4656 = append(yyv4656, LimitRangeItem{})
				yyh4656.ElemContainerState(yyj4656)
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = LimitRangeItem{}
				} else {
					yyv4658 := &yyv4656[yyj4656]
					yyv4658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4656 := 0
		for ; !r.CheckBreak(); yyj4656++ {

			if yyj4656 >= len(yyv4656) {
				yyv4656 = append(yyv4656, LimitRangeItem{}) // var yyz4656 LimitRangeItem
				yyc4656 = true
			}
			yyh4656.ElemContainerState(yyj4656)
			if yyj4656 < len(yyv4656) {
				if r.TryDecodeAsNil() {
					yyv4656[yyj4656] = LimitRangeItem{}
				} else {
					yyv4659 := &yyv4656[yyj4656]
					yyv4659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4656 < len(yyv4656) {
			yyv4656 = yyv4656[:yyj4656]
			yyc4656 = true
		} else if yyj4656 == 0 && yyv4656 == nil {
			yyv4656 = []LimitRangeItem{}
			yyc4656 = true
		}
	}
	yyh4656.End()
	if yyc4656 {
		*v = yyv4656
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4661 := &yyv4660
		yy4661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4662 := *v
	yyh4662, yyl4662 := z.DecSliceHelperStart()
	var yyc4662 bool
	if yyl4662 == 0 {
		if yyv4662 == nil {
			yyv4662 = []LimitRange{}
			yyc4662 = true
		} else if len(yyv4662) != 0 {
			yyv4662 = yyv4662[:0]
			yyc4662 = true
		}
	} else if yyl4662 > 0 {
		var yyrr4662, yyrl4662 int
		var yyrt4662 bool
		if yyl4662 > cap(yyv4662) {

			yyrg4662 := len(yyv4662) > 0
			yyv24662 := yyv4662
			yyrl4662, yyrt4662 = z.DecInferLen(yyl4662, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4662 {
				if yyrl4662 <= cap(yyv4662) {
					yyv4662 = yyv4662[:yyrl4662]
				} else {
					yyv4662 = make([]LimitRange, yyrl4662)
				}
			} else {
				yyv4662 = make([]LimitRange, yyrl4662)
			}
			yyc4662 = true
			yyrr4662 = len(yyv4662)
			if yyrg4662 {
				copy(yyv4662, yyv24662)
			}
		} else if yyl4662 != len(yyv4662) {
			yyv4662 = yyv4662[:yyl4662]
			yyc4662 = true
		}
		yyj4662 := 0
		for ; yyj4662 < yyrr4662; yyj4662++ {
			yyh4662.ElemContainerState(yyj4662)
			if r.TryDecodeAsNil() {
				yyv4662[yyj4662] = LimitRange{}
			} else {
				yyv4663 := &yyv4662[yyj4662]
				yyv4663.CodecDecodeSelf(d)
			}

		}
		if yyrt4662 {
			for ; yyj4662 < yyl4662; yyj4662++ {
				yyv4662 = append(yyv4662, LimitRange{})
				yyh4662.ElemContainerState(yyj4662)
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = LimitRange{}
				} else {
					yyv4664 := &yyv4662[yyj4662]
					yyv4664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4662 := 0
		for ; !r.CheckBreak(); yyj4662++ {

			if yyj4662 >= len(yyv4662) {
				yyv4662 = append(yyv4662, LimitRange{}) // var yyz4662 LimitRange
				yyc4662 = true
			}
			yyh4662.ElemContainerState(yyj4662)
			if yyj4662 < len(yyv4662) {
				if r.TryDecodeAsNil() {
					yyv4662[yyj4662] = LimitRange{}
				} else {
					yyv4665 := &yyv4662[yyj4662]
					yyv4665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4662 < len(yyv4662) {
			yyv4662 = yyv4662[:yyj4662]
			yyc4662 = true
		} else if yyj4662 == 0 && yyv4662 == nil {
			yyv4662 = []LimitRange{}
			yyc4662 = true
		}
	}
	yyh4662.End()
	if yyc4662 {
		*v = yyv4662
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4667 := *v
	yyh4667, yyl4667 := z.DecSliceHelperStart()
	var yyc4667 bool
	if yyl4667 == 0 {
		if yyv4667 == nil {
			yyv4667 = []ResourceQuotaScope{}
			yyc4667 = true
		} else if len(yyv4667) != 0 {
			yyv4667 = yyv4667[:0]
			yyc4667 = true
		}
	} else if yyl4667 > 0 {
		var yyrr4667, yyrl4667 int
		var yyrt4667 bool
		if yyl4667 > cap(yyv4667) {

			yyrl4667, yyrt4667 = z.DecInferLen(yyl4667, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4667 {
				if yyrl4667 <= cap(yyv4667) {
					yyv4667 = yyv4667[:yyrl4667]
				} else {
					yyv4667 = make([]ResourceQuotaScope, yyrl4667)
				}
			} else {
				yyv4667 = make([]ResourceQuotaScope, yyrl4667)
			}
			yyc4667 = true
			yyrr4667 = len(yyv4667)
		} else if yyl4667 != len(yyv4667) {
			yyv4667 = yyv4667[:yyl4667]
			yyc4667 = true
		}
		yyj4667 := 0
		for ; yyj4667 < yyrr4667; yyj4667++ {
			yyh4667.ElemContainerState(yyj4667)
			if r.TryDecodeAsNil() {
				yyv4667[yyj4667] = ""
			} else {
				yyv4667[yyj4667] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4667 {
			for ; yyj4667 < yyl4667; yyj4667++ {
				yyv4667 = append(yyv4667, "")
				yyh4667.ElemContainerState(yyj4667)
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ""
				} else {
					yyv4667[yyj4667] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4667 := 0
		for ; !r.CheckBreak(); yyj4667++ {

			if yyj4667 >= len(yyv4667) {
				yyv4667 = append(yyv4667, "") // var yyz4667 ResourceQuotaScope
				yyc4667 = true
			}
			yyh4667.ElemContainerState(yyj4667)
			if yyj4667 < len(yyv4667) {
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ""
				} else {
					yyv4667[yyj4667] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4667 < len(yyv4667) {
			yyv4667 = yyv4667[:yyj4667]
			yyc4667 = true
		} else if yyj4667 == 0 && yyv4667 == nil {
			yyv4667 = []ResourceQuotaScope{}
			yyc4667 = true
		}
	}
	yyh4667.End()
	if yyc4667 {
		*v = yyv4667
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4672 := &yyv4671
		yy4672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4673 := *v
	yyh4673, yyl4673 := z.DecSliceHelperStart()
	var yyc4673 bool
	if yyl4673 == 0 {
		if yyv4673 == nil {
			yyv4673 = []ResourceQuota{}
			yyc4673 = true
		} else if len(yyv4673) != 0 {
			yyv4673 = yyv4673[:0]
			yyc4673 = true
		}
	} else if yyl4673 > 0 {
		var yyrr4673, yyrl4673 int
		var yyrt4673 bool
		if yyl4673 > cap(yyv4673) {

			yyrg4673 := len(yyv4673) > 0
			yyv24673 := yyv4673
			yyrl4673, yyrt4673 = z.DecInferLen(yyl4673, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4673 {
				if yyrl4673 <= cap(yyv4673) {
					yyv4673 = yyv4673[:yyrl4673]
				} else {
					yyv4673 = make([]ResourceQuota, yyrl4673)
				}
			} else {
				yyv4673 = make([]ResourceQuota, yyrl4673)
			}
			yyc4673 = true
			yyrr4673 = len(yyv4673)
			if yyrg4673 {
				copy(yyv4673, yyv24673)
			}
		} else if yyl4673 != len(yyv4673) {
			yyv4673 = yyv4673[:yyl4673]
			yyc4673 = true
		}
		yyj4673 := 0
		for ; yyj4673 < yyrr4673; yyj4673++ {
			yyh4673.ElemContainerState(yyj4673)
			if r.TryDecodeAsNil() {
				yyv4673[yyj4673] = ResourceQuota{}
			} else {
				yyv4674 := &yyv4673[yyj4673]
				yyv4674.CodecDecodeSelf(d)
			}

		}
		if yyrt4673 {
			for ; yyj4673 < yyl4673; yyj4673++ {
				yyv4673 = append(yyv4673, ResourceQuota{})
				yyh4673.ElemContainerState(yyj4673)
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ResourceQuota{}
				} else {
					yyv4675 := &yyv4673[yyj4673]
					yyv4675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4673 := 0
		for ; !r.CheckBreak(); yyj4673++ {

			if yyj4673 >= len(yyv4673) {
				yyv4673 = append(yyv4673, ResourceQuota{}) // var yyz4673 ResourceQuota
				yyc4673 = true
			}
			yyh4673.ElemContainerState(yyj4673)
			if yyj4673 < len(yyv4673) {
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ResourceQuota{}
				} else {
					yyv4676 := &yyv4673[yyj4673]
					yyv4676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4673 < len(yyv4673) {
			yyv4673 = yyv4673[:yyj4673]
			yyc4673 = true
		} else if yyj4673 == 0 && yyv4673 == nil {
			yyv4673 = []ResourceQuota{}
			yyc4673 = true
		}
	}
	yyh4673.End()
	if yyc4673 {
		*v = yyv4673
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4677, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4678 := z.EncBinary()
		_ = yym4678
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4677))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4677 == nil {
			r.EncodeNil()
		} else {
			yym4679 := z.EncBinary()
			_ = yym4679
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4677))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4680 := *v
	yyl4680 := r.ReadMapStart()
	yybh4680 := z.DecBasicHandle()
	if yyv4680 == nil {
		yyrl4680, _ := z.DecInferLen(yyl4680, yybh4680.MaxInitLen, 40)
		yyv4680 = make(map[string][]uint8, yyrl4680)
		*v = yyv4680
	}
	var yymk4680 string
	var yymv4680 []uint8
	var yymg4680 bool
	if yybh4680.MapValueReset {
		yymg4680 = true
	}
	if yyl4680 > 0 {
		for yyj4680 := 0; yyj4680 < yyl4680; yyj4680++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4680 = ""
			} else {
				yymk4680 = string(r.DecodeString())
			}

			if yymg4680 {
				yymv4680 = yyv4680[yymk4680]
			} else {
				yymv4680 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4680 = nil
			} else {
				yyv4682 := &yymv4680
				yym4683 := z.DecBinary()
				_ = yym4683
				if false {
				} else {
					*yyv4682 = r.DecodeBytes(*(*[]byte)(yyv4682), false, false)
				}
			}

			if yyv4680 != nil {
				yyv4680[yymk4680] = yymv4680
			}
		}
	} else if yyl4680 < 0 {
		for yyj4680 := 0; !r.CheckBreak(); yyj4680++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4680 = ""
			} else {
				yymk4680 = string(r.DecodeString())
			}

			if yymg4680 {
				yymv4680 = yyv4680[yymk4680]
			} else {
				yymv4680 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4680 = nil
			} else {
				yyv4685 := &yymv4680
				yym4686 := z.DecBinary()
				_ = yym4686
				if false {
				} else {
					*yyv4685 = r.DecodeBytes(*(*[]byte)(yyv4685), false, false)
				}
			}

			if yyv4680 != nil {
				yyv4680[yymk4680] = yymv4680
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4688 := &yyv4687
		yy4688.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4689 := *v
	yyh4689, yyl4689 := z.DecSliceHelperStart()
	var yyc4689 bool
	if yyl4689 == 0 {
		if yyv4689 == nil {
			yyv4689 = []Secret{}
			yyc4689 = true
		} else if len(yyv4689) != 0 {
			yyv4689 = yyv4689[:0]
			yyc4689 = true
		}
	} else if yyl4689 > 0 {
		var yyrr4689, yyrl4689 int
		var yyrt4689 bool
		if yyl4689 > cap(yyv4689) {

			yyrg4689 := len(yyv4689) > 0
			yyv24689 := yyv4689
			yyrl4689, yyrt4689 = z.DecInferLen(yyl4689, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4689 {
				if yyrl4689 <= cap(yyv4689) {
					yyv4689 = yyv4689[:yyrl4689]
				} else {
					yyv4689 = make([]Secret, yyrl4689)
				}
			} else {
				yyv4689 = make([]Secret, yyrl4689)
			}
			yyc4689 = true
			yyrr4689 = len(yyv4689)
			if yyrg4689 {
				copy(yyv4689, yyv24689)
			}
		} else if yyl4689 != len(yyv4689) {
			yyv4689 = yyv4689[:yyl4689]
			yyc4689 = true
		}
		yyj4689 := 0
		for ; yyj4689 < yyrr4689; yyj4689++ {
			yyh4689.ElemContainerState(yyj4689)
			if r.TryDecodeAsNil() {
				yyv4689[yyj4689] = Secret{}
			} else {
				yyv4690 := &yyv4689[yyj4689]
				yyv4690.CodecDecodeSelf(d)
			}

		}
		if yyrt4689 {
			for ; yyj4689 < yyl4689; yyj4689++ {
				yyv4689 = append(yyv4689, Secret{})
				yyh4689.ElemContainerState(yyj4689)
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = Secret{}
				} else {
					yyv4691 := &yyv4689[yyj4689]
					yyv4691.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4689 := 0
		for ; !r.CheckBreak(); yyj4689++ {

			if yyj4689 >= len(yyv4689) {
				yyv4689 = append(yyv4689, Secret{}) // var yyz4689 Secret
				yyc4689 = true
			}
			yyh4689.ElemContainerState(yyj4689)
			if yyj4689 < len(yyv4689) {
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = Secret{}
				} else {
					yyv4692 := &yyv4689[yyj4689]
					yyv4692.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4689 < len(yyv4689) {
			yyv4689 = yyv4689[:yyj4689]
			yyc4689 = true
		} else if yyj4689 == 0 && yyv4689 == nil {
			yyv4689 = []Secret{}
			yyc4689 = true
		}
	}
	yyh4689.End()
	if yyc4689 {
		*v = yyv4689
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4693 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4694 := &yyv4693
		yy4694.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4695 := *v
	yyh4695, yyl4695 := z.DecSliceHelperStart()
	var yyc4695 bool
	if yyl4695 == 0 {
		if yyv4695 == nil {
			yyv4695 = []ConfigMap{}
			yyc4695 = true
		} else if len(yyv4695) != 0 {
			yyv4695 = yyv4695[:0]
			yyc4695 = true
		}
	} else if yyl4695 > 0 {
		var yyrr4695, yyrl4695 int
		var yyrt4695 bool
		if yyl4695 > cap(yyv4695) {

			yyrg4695 := len(yyv4695) > 0
			yyv24695 := yyv4695
			yyrl4695, yyrt4695 = z.DecInferLen(yyl4695, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4695 {
				if yyrl4695 <= cap(yyv4695) {
					yyv4695 = yyv4695[:yyrl4695]
				} else {
					yyv4695 = make([]ConfigMap, yyrl4695)
				}
			} else {
				yyv4695 = make([]ConfigMap, yyrl4695)
			}
			yyc4695 = true
			yyrr4695 = len(yyv4695)
			if yyrg4695 {
				copy(yyv4695, yyv24695)
			}
		} else if yyl4695 != len(yyv4695) {
			yyv4695 = yyv4695[:yyl4695]
			yyc4695 = true
		}
		yyj4695 := 0
		for ; yyj4695 < yyrr4695; yyj4695++ {
			yyh4695.ElemContainerState(yyj4695)
			if r.TryDecodeAsNil() {
				yyv4695[yyj4695] = ConfigMap{}
			} else {
				yyv4696 := &yyv4695[yyj4695]
				yyv4696.CodecDecodeSelf(d)
			}

		}
		if yyrt4695 {
			for ; yyj4695 < yyl4695; yyj4695++ {
				yyv4695 = append(yyv4695, ConfigMap{})
				yyh4695.ElemContainerState(yyj4695)
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ConfigMap{}
				} else {
					yyv4697 := &yyv4695[yyj4695]
					yyv4697.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4695 := 0
		for ; !r.CheckBreak(); yyj4695++ {

			if yyj4695 >= len(yyv4695) {
				yyv4695 = append(yyv4695, ConfigMap{}) // var yyz4695 ConfigMap
				yyc4695 = true
			}
			yyh4695.ElemContainerState(yyj4695)
			if yyj4695 < len(yyv4695) {
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ConfigMap{}
				} else {
					yyv4698 := &yyv4695[yyj4695]
					yyv4698.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4695 < len(yyv4695) {
			yyv4695 = yyv4695[:yyj4695]
			yyc4695 = true
		} else if yyj4695 == 0 && yyv4695 == nil {
			yyv4695 = []ConfigMap{}
			yyc4695 = true
		}
	}
	yyh4695.End()
	if yyc4695 {
		*v = yyv4695
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4699 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4700 := &yyv4699
		yy4700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4701 := *v
	yyh4701, yyl4701 := z.DecSliceHelperStart()
	var yyc4701 bool
	if yyl4701 == 0 {
		if yyv4701 == nil {
			yyv4701 = []ComponentCondition{}
			yyc4701 = true
		} else if len(yyv4701) != 0 {
			yyv4701 = yyv4701[:0]
			yyc4701 = true
		}
	} else if yyl4701 > 0 {
		var yyrr4701, yyrl4701 int
		var yyrt4701 bool
		if yyl4701 > cap(yyv4701) {

			yyrg4701 := len(yyv4701) > 0
			yyv24701 := yyv4701
			yyrl4701, yyrt4701 = z.DecInferLen(yyl4701, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4701 {
				if yyrl4701 <= cap(yyv4701) {
					yyv4701 = yyv4701[:yyrl4701]
				} else {
					yyv4701 = make([]ComponentCondition, yyrl4701)
				}
			} else {
				yyv4701 = make([]ComponentCondition, yyrl4701)
			}
			yyc4701 = true
			yyrr4701 = len(yyv4701)
			if yyrg4701 {
				copy(yyv4701, yyv24701)
			}
		} else if yyl4701 != len(yyv4701) {
			yyv4701 = yyv4701[:yyl4701]
			yyc4701 = true
		}
		yyj4701 := 0
		for ; yyj4701 < yyrr4701; yyj4701++ {
			yyh4701.ElemContainerState(yyj4701)
			if r.TryDecodeAsNil() {
				yyv4701[yyj4701] = ComponentCondition{}
			} else {
				yyv4702 := &yyv4701[yyj4701]
				yyv4702.CodecDecodeSelf(d)
			}

		}
		if yyrt4701 {
			for ; yyj4701 < yyl4701; yyj4701++ {
				yyv4701 = append(yyv4701, ComponentCondition{})
				yyh4701.ElemContainerState(yyj4701)
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ComponentCondition{}
				} else {
					yyv4703 := &yyv4701[yyj4701]
					yyv4703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4701 := 0
		for ; !r.CheckBreak(); yyj4701++ {

			if yyj4701 >= len(yyv4701) {
				yyv4701 = append(yyv4701, ComponentCondition{}) // var yyz4701 ComponentCondition
				yyc4701 = true
			}
			yyh4701.ElemContainerState(yyj4701)
			if yyj4701 < len(yyv4701) {
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ComponentCondition{}
				} else {
					yyv4704 := &yyv4701[yyj4701]
					yyv4704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4701 < len(yyv4701) {
			yyv4701 = yyv4701[:yyj4701]
			yyc4701 = true
		} else if yyj4701 == 0 && yyv4701 == nil {
			yyv4701 = []ComponentCondition{}
			yyc4701 = true
		}
	}
	yyh4701.End()
	if yyc4701 {
		*v = yyv4701
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4706 := &yyv4705
		yy4706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyh4707, yyl4707 := z.DecSliceHelperStart()
	var yyc4707 bool
	if yyl4707 == 0 {
		if yyv4707 == nil {
			yyv4707 = []ComponentStatus{}
			yyc4707 = true
		} else if len(yyv4707) != 0 {
			yyv4707 = yyv4707[:0]
			yyc4707 = true
		}
	} else if yyl4707 > 0 {
		var yyrr4707, yyrl4707 int
		var yyrt4707 bool
		if yyl4707 > cap(yyv4707) {

			yyrg4707 := len(yyv4707) > 0
			yyv24707 := yyv4707
			yyrl4707, yyrt4707 = z.DecInferLen(yyl4707, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4707 {
				if yyrl4707 <= cap(yyv4707) {
					yyv4707 = yyv4707[:yyrl4707]
				} else {
					yyv4707 = make([]ComponentStatus, yyrl4707)
				}
			} else {
				yyv4707 = make([]ComponentStatus, yyrl4707)
			}
			yyc4707 = true
			yyrr4707 = len(yyv4707)
			if yyrg4707 {
				copy(yyv4707, yyv24707)
			}
		} else if yyl4707 != len(yyv4707) {
			yyv4707 = yyv4707[:yyl4707]
			yyc4707 = true
		}
		yyj4707 := 0
		for ; yyj4707 < yyrr4707; yyj4707++ {
			yyh4707.ElemContainerState(yyj4707)
			if r.TryDecodeAsNil() {
				yyv4707[yyj4707] = ComponentStatus{}
			} else {
				yyv4708 := &yyv4707[yyj4707]
				yyv4708.CodecDecodeSelf(d)
			}

		}
		if yyrt4707 {
			for ; yyj4707 < yyl4707; yyj4707++ {
				yyv4707 = append(yyv4707, ComponentStatus{})
				yyh4707.ElemContainerState(yyj4707)
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = ComponentStatus{}
				} else {
					yyv4709 := &yyv4707[yyj4707]
					yyv4709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4707 := 0
		for ; !r.CheckBreak(); yyj4707++ {

			if yyj4707 >= len(yyv4707) {
				yyv4707 = append(yyv4707, ComponentStatus{}) // var yyz4707 ComponentStatus
				yyc4707 = true
			}
			yyh4707.ElemContainerState(yyj4707)
			if yyj4707 < len(yyv4707) {
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = ComponentStatus{}
				} else {
					yyv4710 := &yyv4707[yyj4707]
					yyv4710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4707 < len(yyv4707) {
			yyv4707 = yyv4707[:yyj4707]
			yyc4707 = true
		} else if yyj4707 == 0 && yyv4707 == nil {
			yyv4707 = []ComponentStatus{}
			yyc4707 = true
		}
	}
	yyh4707.End()
	if yyc4707 {
		*v = yyv4707
	}
}
