/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [23]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq96[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq96[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(23)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.Quobyte == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Cinder == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.CephFS == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.Flocker == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FC == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.AzureFile == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr96 || yy2arr96 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr96 || yy2arr96 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym122 := z.DecBinary()
	_ = yym122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct123 := r.ContainerType()
		if yyct123 == codecSelferValueTypeMap1234 {
			yyl123 := r.ReadMapStart()
			if yyl123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl123, d)
			}
		} else if yyct123 == codecSelferValueTypeArray1234 {
			yyl123 := r.ReadArrayStart()
			if yyl123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys124Slc
	var yyhl124 bool = l >= 0
	for yyj124 := 0; ; yyj124++ {
		if yyhl124 {
			if yyj124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys124Slc = r.DecodeBytes(yys124Slc, true, true)
		yys124 := string(yys124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys124 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys124)
		} // end switch yys124
	} // end for yyj124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj148 int
	var yyb148 bool
	var yyhl148 bool = l >= 0
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj148++
		if yyhl148 {
			yyb148 = yyj148 > l
		} else {
			yyb148 = r.CheckBreak()
		}
		if yyb148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym172 := z.EncBinary()
		_ = yym172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep173 := !z.EncBinary()
			yy2arr173 := z.EncBasicHandle().StructToArray
			var yyq173 [22]bool
			_, _, _ = yysep173, yyq173, yy2arr173
			const yyr173 bool = false
			yyq173[0] = x.HostPath != nil
			yyq173[1] = x.EmptyDir != nil
			yyq173[2] = x.GCEPersistentDisk != nil
			yyq173[3] = x.AWSElasticBlockStore != nil
			yyq173[4] = x.GitRepo != nil
			yyq173[5] = x.Secret != nil
			yyq173[6] = x.NFS != nil
			yyq173[7] = x.ISCSI != nil
			yyq173[8] = x.Glusterfs != nil
			yyq173[9] = x.PersistentVolumeClaim != nil
			yyq173[10] = x.RBD != nil
			yyq173[11] = x.Quobyte != nil
			yyq173[12] = x.FlexVolume != nil
			yyq173[13] = x.Cinder != nil
			yyq173[14] = x.CephFS != nil
			yyq173[15] = x.Flocker != nil
			yyq173[16] = x.DownwardAPI != nil
			yyq173[17] = x.FC != nil
			yyq173[18] = x.AzureFile != nil
			yyq173[19] = x.ConfigMap != nil
			yyq173[20] = x.VsphereVolume != nil
			yyq173[21] = x.AzureDisk != nil
			var yynn173 int
			if yyr173 || yy2arr173 {
				r.EncodeArrayStart(22)
			} else {
				yynn173 = 0
				for _, b := range yyq173 {
					if b {
						yynn173++
					}
				}
				r.EncodeMapStart(yynn173)
				yynn173 = 0
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym196 := z.DecBinary()
	_ = yym196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct197 := r.ContainerType()
		if yyct197 == codecSelferValueTypeMap1234 {
			yyl197 := r.ReadMapStart()
			if yyl197 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl197, d)
			}
		} else if yyct197 == codecSelferValueTypeArray1234 {
			yyl197 := r.ReadArrayStart()
			if yyl197 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys198Slc
	var yyhl198 bool = l >= 0
	for yyj198 := 0; ; yyj198++ {
		if yyhl198 {
			if yyj198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys198Slc = r.DecodeBytes(yys198Slc, true, true)
		yys198 := string(yys198Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys198 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys198)
		} // end switch yys198
	} // end for yyj198
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym244 := z.EncBinary()
		_ = yym244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep245 := !z.EncBinary()
			yy2arr245 := z.EncBasicHandle().StructToArray
			var yyq245 [16]bool
			_, _, _ = yysep245, yyq245, yy2arr245
			const yyr245 bool = false
			yyq245[0] = x.GCEPersistentDisk != nil
			yyq245[1] = x.AWSElasticBlockStore != nil
			yyq245[2] = x.HostPath != nil
			yyq245[3] = x.Glusterfs != nil
			yyq245[4] = x.NFS != nil
			yyq245[5] = x.RBD != nil
			yyq245[6] = x.Quobyte != nil
			yyq245[7] = x.ISCSI != nil
			yyq245[8] = x.FlexVolume != nil
			yyq245[9] = x.Cinder != nil
			yyq245[10] = x.CephFS != nil
			yyq245[11] = x.FC != nil
			yyq245[12] = x.Flocker != nil
			yyq245[13] = x.AzureFile != nil
			yyq245[14] = x.VsphereVolume != nil
			yyq245[15] = x.AzureDisk != nil
			var yynn245 int
			if yyr245 || yy2arr245 {
				r.EncodeArrayStart(16)
			} else {
				yynn245 = 0
				for _, b := range yyq245 {
					if b {
						yynn245++
					}
				}
				r.EncodeMapStart(yynn245)
				yynn245 = 0
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym262 := z.DecBinary()
	_ = yym262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct263 := r.ContainerType()
		if yyct263 == codecSelferValueTypeMap1234 {
			yyl263 := r.ReadMapStart()
			if yyl263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl263, d)
			}
		} else if yyct263 == codecSelferValueTypeArray1234 {
			yyl263 := r.ReadArrayStart()
			if yyl263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys264Slc
	var yyhl264 bool = l >= 0
	for yyj264 := 0; ; yyj264++ {
		if yyhl264 {
			if yyj264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys264Slc = r.DecodeBytes(yys264Slc, true, true)
		yys264 := string(yys264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys264 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys264)
		} // end switch yys264
	} // end for yyj264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj281 int
	var yyb281 bool
	var yyhl281 bool = l >= 0
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj281++
		if yyhl281 {
			yyb281 = yyj281 > l
		} else {
			yyb281 = r.CheckBreak()
		}
		if yyb281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym298 := z.EncBinary()
		_ = yym298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep299 := !z.EncBinary()
			yy2arr299 := z.EncBasicHandle().StructToArray
			var yyq299 [2]bool
			_, _, _ = yysep299, yyq299, yy2arr299
			const yyr299 bool = false
			yyq299[1] = x.ReadOnly != false
			var yynn299 int
			if yyr299 || yy2arr299 {
				r.EncodeArrayStart(2)
			} else {
				yynn299 = 1
				for _, b := range yyq299 {
					if b {
						yynn299++
					}
				}
				r.EncodeMapStart(yynn299)
				yynn299 = 0
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym301 := z.EncBinary()
				_ = yym301
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym302 := z.EncBinary()
				_ = yym302
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[1] {
					yym304 := z.EncBinary()
					_ = yym304
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym306 := z.DecBinary()
	_ = yym306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct307 := r.ContainerType()
		if yyct307 == codecSelferValueTypeMap1234 {
			yyl307 := r.ReadMapStart()
			if yyl307 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl307, d)
			}
		} else if yyct307 == codecSelferValueTypeArray1234 {
			yyl307 := r.ReadArrayStart()
			if yyl307 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys308Slc
	var yyhl308 bool = l >= 0
	for yyj308 := 0; ; yyj308++ {
		if yyhl308 {
			if yyj308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys308Slc = r.DecodeBytes(yys308Slc, true, true)
		yys308 := string(yys308Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys308 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys308)
		} // end switch yys308
	} // end for yyj308
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj311 int
	var yyb311 bool
	var yyhl311 bool = l >= 0
	yyj311++
	if yyhl311 {
		yyb311 = yyj311 > l
	} else {
		yyb311 = r.CheckBreak()
	}
	if yyb311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj311++
	if yyhl311 {
		yyb311 = yyj311 > l
	} else {
		yyb311 = r.CheckBreak()
	}
	if yyb311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj311++
		if yyhl311 {
			yyb311 = yyj311 > l
		} else {
			yyb311 = r.CheckBreak()
		}
		if yyb311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym314 := z.EncBinary()
		_ = yym314
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep315 := !z.EncBinary()
			yy2arr315 := z.EncBasicHandle().StructToArray
			var yyq315 [5]bool
			_, _, _ = yysep315, yyq315, yy2arr315
			const yyr315 bool = false
			yyq315[0] = x.Kind != ""
			yyq315[1] = x.APIVersion != ""
			yyq315[2] = true
			yyq315[3] = true
			yyq315[4] = true
			var yynn315 int
			if yyr315 || yy2arr315 {
				r.EncodeArrayStart(5)
			} else {
				yynn315 = 0
				for _, b := range yyq315 {
					if b {
						yynn315++
					}
				}
				r.EncodeMapStart(yynn315)
				yynn315 = 0
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[0] {
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq315[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[1] {
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq315[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym321 := z.EncBinary()
					_ = yym321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[2] {
					yy323 := &x.ObjectMeta
					yy323.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy324 := &x.ObjectMeta
					yy324.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[3] {
					yy326 := &x.Spec
					yy326.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy327 := &x.Spec
					yy327.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[4] {
					yy329 := &x.Status
					yy329.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy330 := &x.Status
					yy330.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym331 := z.DecBinary()
	_ = yym331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct332 := r.ContainerType()
		if yyct332 == codecSelferValueTypeMap1234 {
			yyl332 := r.ReadMapStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl332, d)
			}
		} else if yyct332 == codecSelferValueTypeArray1234 {
			yyl332 := r.ReadArrayStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys333Slc
	var yyhl333 bool = l >= 0
	for yyj333 := 0; ; yyj333++ {
		if yyhl333 {
			if yyj333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys333Slc = r.DecodeBytes(yys333Slc, true, true)
		yys333 := string(yys333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys333 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv336 := &x.ObjectMeta
				yyv336.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv337 := &x.Spec
				yyv337.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv338 := &x.Status
				yyv338.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys333)
		} // end switch yys333
	} // end for yyj333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj339 int
	var yyb339 bool
	var yyhl339 bool = l >= 0
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv342 := &x.ObjectMeta
		yyv342.CodecDecodeSelf(d)
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv343 := &x.Spec
		yyv343.CodecDecodeSelf(d)
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv344 := &x.Status
		yyv344.CodecDecodeSelf(d)
	}
	for {
		yyj339++
		if yyhl339 {
			yyb339 = yyj339 > l
		} else {
			yyb339 = r.CheckBreak()
		}
		if yyb339 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj339-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym345 := z.EncBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep346 := !z.EncBinary()
			yy2arr346 := z.EncBasicHandle().StructToArray
			var yyq346 [20]bool
			_, _, _ = yysep346, yyq346, yy2arr346
			const yyr346 bool = false
			yyq346[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq346[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq346[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq346[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq346[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq346[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq346[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq346[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq346[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq346[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq346[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq346[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq346[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq346[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq346[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq346[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq346[17] = len(x.AccessModes) != 0
			yyq346[18] = x.ClaimRef != nil
			yyq346[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn346 int
			if yyr346 || yy2arr346 {
				r.EncodeArrayStart(20)
			} else {
				yynn346 = 1
				for _, b := range yyq346 {
					if b {
						yynn346++
					}
				}
				r.EncodeMapStart(yynn346)
				yynn346 = 0
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr346 || yy2arr346 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr346 || yy2arr346 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr346 || yy2arr346 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr346 || yy2arr346 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr346 || yy2arr346 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr346 || yy2arr346 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr346 || yy2arr346 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr346 || yy2arr346 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr346 || yy2arr346 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr346 || yy2arr346 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr346 || yy2arr346 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn359 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn359 = true
				goto LABEL359
			}
		LABEL359:
			if yyr346 || yy2arr346 {
				if yyn359 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn359 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn360 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn360 = true
				goto LABEL360
			}
		LABEL360:
			if yyr346 || yy2arr346 {
				if yyn360 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn360 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn361 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn361 = true
				goto LABEL361
			}
		LABEL361:
			if yyr346 || yy2arr346 {
				if yyn361 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn361 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr346 || yy2arr346 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr346 || yy2arr346 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym365 := z.EncBinary()
						_ = yym365
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq346[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym366 := z.EncBinary()
						_ = yym366
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq346[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym369 := z.DecBinary()
	_ = yym369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct370 := r.ContainerType()
		if yyct370 == codecSelferValueTypeMap1234 {
			yyl370 := r.ReadMapStart()
			if yyl370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl370, d)
			}
		} else if yyct370 == codecSelferValueTypeArray1234 {
			yyl370 := r.ReadArrayStart()
			if yyl370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys371Slc
	var yyhl371 bool = l >= 0
	for yyj371 := 0; ; yyj371++ {
		if yyhl371 {
			if yyj371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys371Slc = r.DecodeBytes(yys371Slc, true, true)
		yys371 := string(yys371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys371 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv372 := &x.Capacity
				yyv372.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv389 := &x.AccessModes
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv389), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys371)
		} // end switch yys371
	} // end for yyj371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv394 := &x.Capacity
		yyv394.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv411 := &x.AccessModes
		yym412 := z.DecBinary()
		_ = yym412
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv411), d)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym415 := z.EncBinary()
	_ = yym415
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym416 := z.DecBinary()
	_ = yym416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym417 := z.EncBinary()
		_ = yym417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep418 := !z.EncBinary()
			yy2arr418 := z.EncBasicHandle().StructToArray
			var yyq418 [3]bool
			_, _, _ = yysep418, yyq418, yy2arr418
			const yyr418 bool = false
			yyq418[0] = x.Phase != ""
			yyq418[1] = x.Message != ""
			yyq418[2] = x.Reason != ""
			var yynn418 int
			if yyr418 || yy2arr418 {
				r.EncodeArrayStart(3)
			} else {
				yynn418 = 0
				for _, b := range yyq418 {
					if b {
						yynn418++
					}
				}
				r.EncodeMapStart(yynn418)
				yynn418 = 0
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq418[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq418[1] {
					yym421 := z.EncBinary()
					_ = yym421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq418[2] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym426 := z.DecBinary()
	_ = yym426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct427 := r.ContainerType()
		if yyct427 == codecSelferValueTypeMap1234 {
			yyl427 := r.ReadMapStart()
			if yyl427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl427, d)
			}
		} else if yyct427 == codecSelferValueTypeArray1234 {
			yyl427 := r.ReadArrayStart()
			if yyl427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys428Slc
	var yyhl428 bool = l >= 0
	for yyj428 := 0; ; yyj428++ {
		if yyhl428 {
			if yyj428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys428Slc = r.DecodeBytes(yys428Slc, true, true)
		yys428 := string(yys428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys428 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys428)
		} // end switch yys428
	} // end for yyj428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj432 int
	var yyb432 bool
	var yyhl432 bool = l >= 0
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj432++
		if yyhl432 {
			yyb432 = yyj432 > l
		} else {
			yyb432 = r.CheckBreak()
		}
		if yyb432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym436 := z.EncBinary()
		_ = yym436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep437 := !z.EncBinary()
			yy2arr437 := z.EncBasicHandle().StructToArray
			var yyq437 [4]bool
			_, _, _ = yysep437, yyq437, yy2arr437
			const yyr437 bool = false
			yyq437[0] = x.Kind != ""
			yyq437[1] = x.APIVersion != ""
			yyq437[2] = true
			var yynn437 int
			if yyr437 || yy2arr437 {
				r.EncodeArrayStart(4)
			} else {
				yynn437 = 1
				for _, b := range yyq437 {
					if b {
						yynn437++
					}
				}
				r.EncodeMapStart(yynn437)
				yynn437 = 0
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[0] {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[1] {
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[2] {
					yy445 := &x.ListMeta
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else if z.HasExtensions() && z.EncExt(yy445) {
					} else {
						z.EncFallback(yy445)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq437[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy447 := &x.ListMeta
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy447) {
					} else {
						z.EncFallback(yy447)
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym452 := z.DecBinary()
	_ = yym452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct453 := r.ContainerType()
		if yyct453 == codecSelferValueTypeMap1234 {
			yyl453 := r.ReadMapStart()
			if yyl453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl453, d)
			}
		} else if yyct453 == codecSelferValueTypeArray1234 {
			yyl453 := r.ReadArrayStart()
			if yyl453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys454Slc
	var yyhl454 bool = l >= 0
	for yyj454 := 0; ; yyj454++ {
		if yyhl454 {
			if yyj454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys454Slc = r.DecodeBytes(yys454Slc, true, true)
		yys454 := string(yys454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys454 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv457 := &x.ListMeta
				yym458 := z.DecBinary()
				_ = yym458
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv457) {
				} else {
					z.DecFallback(yyv457, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv459 := &x.Items
				yym460 := z.DecBinary()
				_ = yym460
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv459), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys454)
		} // end switch yys454
	} // end for yyj454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj461 int
	var yyb461 bool
	var yyhl461 bool = l >= 0
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv464 := &x.ListMeta
		yym465 := z.DecBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv464) {
		} else {
			z.DecFallback(yyv464, false)
		}
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv466 := &x.Items
		yym467 := z.DecBinary()
		_ = yym467
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv466), d)
		}
	}
	for {
		yyj461++
		if yyhl461 {
			yyb461 = yyj461 > l
		} else {
			yyb461 = r.CheckBreak()
		}
		if yyb461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym468 := z.EncBinary()
		_ = yym468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep469 := !z.EncBinary()
			yy2arr469 := z.EncBasicHandle().StructToArray
			var yyq469 [5]bool
			_, _, _ = yysep469, yyq469, yy2arr469
			const yyr469 bool = false
			yyq469[0] = x.Kind != ""
			yyq469[1] = x.APIVersion != ""
			yyq469[2] = true
			yyq469[3] = true
			yyq469[4] = true
			var yynn469 int
			if yyr469 || yy2arr469 {
				r.EncodeArrayStart(5)
			} else {
				yynn469 = 0
				for _, b := range yyq469 {
					if b {
						yynn469++
					}
				}
				r.EncodeMapStart(yynn469)
				yynn469 = 0
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[0] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[1] {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[2] {
					yy477 := &x.ObjectMeta
					yy477.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy478 := &x.ObjectMeta
					yy478.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[3] {
					yy480 := &x.Spec
					yy480.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy481 := &x.Spec
					yy481.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[4] {
					yy483 := &x.Status
					yy483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy484 := &x.Status
					yy484.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym485 := z.DecBinary()
	_ = yym485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct486 := r.ContainerType()
		if yyct486 == codecSelferValueTypeMap1234 {
			yyl486 := r.ReadMapStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl486, d)
			}
		} else if yyct486 == codecSelferValueTypeArray1234 {
			yyl486 := r.ReadArrayStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys487Slc
	var yyhl487 bool = l >= 0
	for yyj487 := 0; ; yyj487++ {
		if yyhl487 {
			if yyj487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys487Slc = r.DecodeBytes(yys487Slc, true, true)
		yys487 := string(yys487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys487 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv490 := &x.ObjectMeta
				yyv490.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv491 := &x.Spec
				yyv491.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv492 := &x.Status
				yyv492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys487)
		} // end switch yys487
	} // end for yyj487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv496 := &x.ObjectMeta
		yyv496.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv497 := &x.Spec
		yyv497.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv498 := &x.Status
		yyv498.CodecDecodeSelf(d)
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [4]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			yyq500[0] = x.Kind != ""
			yyq500[1] = x.APIVersion != ""
			yyq500[2] = true
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(4)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[0] {
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[1] {
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[2] {
					yy508 := &x.ListMeta
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else if z.HasExtensions() && z.EncExt(yy508) {
					} else {
						z.EncFallback(yy508)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy510 := &x.ListMeta
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else if z.HasExtensions() && z.EncExt(yy510) {
					} else {
						z.EncFallback(yy510)
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym515 := z.DecBinary()
	_ = yym515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct516 := r.ContainerType()
		if yyct516 == codecSelferValueTypeMap1234 {
			yyl516 := r.ReadMapStart()
			if yyl516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl516, d)
			}
		} else if yyct516 == codecSelferValueTypeArray1234 {
			yyl516 := r.ReadArrayStart()
			if yyl516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys517Slc
	var yyhl517 bool = l >= 0
	for yyj517 := 0; ; yyj517++ {
		if yyhl517 {
			if yyj517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys517Slc = r.DecodeBytes(yys517Slc, true, true)
		yys517 := string(yys517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys517 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv520 := &x.ListMeta
				yym521 := z.DecBinary()
				_ = yym521
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv520) {
				} else {
					z.DecFallback(yyv520, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv522 := &x.Items
				yym523 := z.DecBinary()
				_ = yym523
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv522), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys517)
		} // end switch yys517
	} // end for yyj517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv527 := &x.ListMeta
		yym528 := z.DecBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv527) {
		} else {
			z.DecFallback(yyv527, false)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv529 := &x.Items
		yym530 := z.DecBinary()
		_ = yym530
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv529), d)
		}
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym531 := z.EncBinary()
		_ = yym531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep532 := !z.EncBinary()
			yy2arr532 := z.EncBasicHandle().StructToArray
			var yyq532 [4]bool
			_, _, _ = yysep532, yyq532, yy2arr532
			const yyr532 bool = false
			yyq532[0] = len(x.AccessModes) != 0
			yyq532[1] = x.Selector != nil
			yyq532[2] = true
			yyq532[3] = x.VolumeName != ""
			var yynn532 int
			if yyr532 || yy2arr532 {
				r.EncodeArrayStart(4)
			} else {
				yynn532 = 0
				for _, b := range yyq532 {
					if b {
						yynn532++
					}
				}
				r.EncodeMapStart(yynn532)
				yynn532 = 0
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym534 := z.EncBinary()
						_ = yym534
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq532[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym535 := z.EncBinary()
						_ = yym535
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym537 := z.EncBinary()
						_ = yym537
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq532[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym538 := z.EncBinary()
						_ = yym538
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[2] {
					yy540 := &x.Resources
					yy540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq532[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy541 := &x.Resources
					yy541.CodecEncodeSelf(e)
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[3] {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq532[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym545 := z.DecBinary()
	_ = yym545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct546 := r.ContainerType()
		if yyct546 == codecSelferValueTypeMap1234 {
			yyl546 := r.ReadMapStart()
			if yyl546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl546, d)
			}
		} else if yyct546 == codecSelferValueTypeArray1234 {
			yyl546 := r.ReadArrayStart()
			if yyl546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys547Slc
	var yyhl547 bool = l >= 0
	for yyj547 := 0; ; yyj547++ {
		if yyhl547 {
			if yyj547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys547Slc = r.DecodeBytes(yys547Slc, true, true)
		yys547 := string(yys547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys547 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv548 := &x.AccessModes
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym551 := z.DecBinary()
				_ = yym551
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv552 := &x.Resources
				yyv552.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys547)
		} // end switch yys547
	} // end for yyj547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj554 int
	var yyb554 bool
	var yyhl554 bool = l >= 0
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv555 := &x.AccessModes
		yym556 := z.DecBinary()
		_ = yym556
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv555), d)
		}
	}
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym558 := z.DecBinary()
		_ = yym558
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv559 := &x.Resources
		yyv559.CodecDecodeSelf(d)
	}
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj554++
		if yyhl554 {
			yyb554 = yyj554 > l
		} else {
			yyb554 = r.CheckBreak()
		}
		if yyb554 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj554-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [3]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			yyq562[0] = x.Phase != ""
			yyq562[1] = len(x.AccessModes) != 0
			yyq562[2] = len(x.Capacity) != 0
			var yynn562 int
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(3)
			} else {
				yynn562 = 0
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
				yynn562 = 0
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym565 := z.EncBinary()
						_ = yym565
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym568 := z.DecBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct569 := r.ContainerType()
		if yyct569 == codecSelferValueTypeMap1234 {
			yyl569 := r.ReadMapStart()
			if yyl569 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl569, d)
			}
		} else if yyct569 == codecSelferValueTypeArray1234 {
			yyl569 := r.ReadArrayStart()
			if yyl569 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl569, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys570Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys570Slc
	var yyhl570 bool = l >= 0
	for yyj570 := 0; ; yyj570++ {
		if yyhl570 {
			if yyj570 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys570Slc = r.DecodeBytes(yys570Slc, true, true)
		yys570 := string(yys570Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys570 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv572 := &x.AccessModes
				yym573 := z.DecBinary()
				_ = yym573
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv574 := &x.Capacity
				yyv574.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys570)
		} // end switch yys570
	} // end for yyj570
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj575 int
	var yyb575 bool
	var yyhl575 bool = l >= 0
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv577 := &x.AccessModes
		yym578 := z.DecBinary()
		_ = yym578
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
		}
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv579 := &x.Capacity
		yyv579.CodecDecodeSelf(d)
	}
	for {
		yyj575++
		if yyhl575 {
			yyb575 = yyj575 > l
		} else {
			yyb575 = r.CheckBreak()
		}
		if yyb575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym580 := z.EncBinary()
	_ = yym580
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym584 := z.EncBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym586 := z.EncBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep587 := !z.EncBinary()
			yy2arr587 := z.EncBasicHandle().StructToArray
			var yyq587 [1]bool
			_, _, _ = yysep587, yyq587, yy2arr587
			const yyr587 bool = false
			var yynn587 int
			if yyr587 || yy2arr587 {
				r.EncodeArrayStart(1)
			} else {
				yynn587 = 1
				for _, b := range yyq587 {
					if b {
						yynn587++
					}
				}
				r.EncodeMapStart(yynn587)
				yynn587 = 0
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym589 := z.EncBinary()
				_ = yym589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym590 := z.EncBinary()
				_ = yym590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym591 := z.DecBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct592 := r.ContainerType()
		if yyct592 == codecSelferValueTypeMap1234 {
			yyl592 := r.ReadMapStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl592, d)
			}
		} else if yyct592 == codecSelferValueTypeArray1234 {
			yyl592 := r.ReadArrayStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys593Slc
	var yyhl593 bool = l >= 0
	for yyj593 := 0; ; yyj593++ {
		if yyhl593 {
			if yyj593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys593Slc = r.DecodeBytes(yys593Slc, true, true)
		yys593 := string(yys593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys593 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys593)
		} // end switch yys593
	} // end for yyj593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj595 int
	var yyb595 bool
	var yyhl595 bool = l >= 0
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj595++
		if yyhl595 {
			yyb595 = yyj595 > l
		} else {
			yyb595 = r.CheckBreak()
		}
		if yyb595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [1]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[0] = x.Medium != ""
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(1)
			} else {
				yynn598 = 0
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct601 := r.ContainerType()
		if yyct601 == codecSelferValueTypeMap1234 {
			yyl601 := r.ReadMapStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl601, d)
			}
		} else if yyct601 == codecSelferValueTypeArray1234 {
			yyl601 := r.ReadArrayStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys602Slc
	var yyhl602 bool = l >= 0
	for yyj602 := 0; ; yyj602++ {
		if yyhl602 {
			if yyj602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys602Slc = r.DecodeBytes(yys602Slc, true, true)
		yys602 := string(yys602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys602 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys602)
		} // end switch yys602
	} // end for yyj602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym606 := z.EncBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym607 := z.DecBinary()
	_ = yym607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym608 := z.EncBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym609 := z.DecBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym610 := z.EncBinary()
		_ = yym610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep611 := !z.EncBinary()
			yy2arr611 := z.EncBasicHandle().StructToArray
			var yyq611 [4]bool
			_, _, _ = yysep611, yyq611, yy2arr611
			const yyr611 bool = false
			yyq611[1] = x.FSType != ""
			yyq611[2] = x.Partition != 0
			yyq611[3] = x.ReadOnly != false
			var yynn611 int
			if yyr611 || yy2arr611 {
				r.EncodeArrayStart(4)
			} else {
				yynn611 = 1
				for _, b := range yyq611 {
					if b {
						yynn611++
					}
				}
				r.EncodeMapStart(yynn611)
				yynn611 = 0
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq611[1] {
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq611[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq611[2] {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq611[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq611[3] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq611[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr611 || yy2arr611 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct625 := r.ContainerType()
		if yyct625 == codecSelferValueTypeMap1234 {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if yyct625 == codecSelferValueTypeArray1234 {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys626 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj631 int
	var yyb631 bool
	var yyhl631 bool = l >= 0
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj631++
		if yyhl631 {
			yyb631 = yyj631 > l
		} else {
			yyb631 = r.CheckBreak()
		}
		if yyb631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym636 := z.EncBinary()
		_ = yym636
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep637 := !z.EncBinary()
			yy2arr637 := z.EncBasicHandle().StructToArray
			var yyq637 [6]bool
			_, _, _ = yysep637, yyq637, yy2arr637
			const yyr637 bool = false
			yyq637[0] = x.TargetPortal != ""
			yyq637[1] = x.IQN != ""
			yyq637[2] = x.Lun != 0
			yyq637[3] = x.ISCSIInterface != ""
			yyq637[4] = x.FSType != ""
			yyq637[5] = x.ReadOnly != false
			var yynn637 int
			if yyr637 || yy2arr637 {
				r.EncodeArrayStart(6)
			} else {
				yynn637 = 0
				for _, b := range yyq637 {
					if b {
						yynn637++
					}
				}
				r.EncodeMapStart(yynn637)
				yynn637 = 0
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[0] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq637[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[1] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq637[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[2] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq637[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[3] {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq637[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[4] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq637[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[5] {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq637[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym656 := z.DecBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct657 := r.ContainerType()
		if yyct657 == codecSelferValueTypeMap1234 {
			yyl657 := r.ReadMapStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl657, d)
			}
		} else if yyct657 == codecSelferValueTypeArray1234 {
			yyl657 := r.ReadArrayStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys658Slc
	var yyhl658 bool = l >= 0
	for yyj658 := 0; ; yyj658++ {
		if yyhl658 {
			if yyj658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys658Slc = r.DecodeBytes(yys658Slc, true, true)
		yys658 := string(yys658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys658 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys658)
		} // end switch yys658
	} // end for yyj658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj665 int
	var yyb665 bool
	var yyhl665 bool = l >= 0
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj665++
		if yyhl665 {
			yyb665 = yyj665 > l
		} else {
			yyb665 = r.CheckBreak()
		}
		if yyb665 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj665-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym672 := z.EncBinary()
		_ = yym672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep673 := !z.EncBinary()
			yy2arr673 := z.EncBasicHandle().StructToArray
			var yyq673 [4]bool
			_, _, _ = yysep673, yyq673, yy2arr673
			const yyr673 bool = false
			yyq673[2] = x.FSType != ""
			yyq673[3] = x.ReadOnly != false
			var yynn673 int
			if yyr673 || yy2arr673 {
				r.EncodeArrayStart(4)
			} else {
				yynn673 = 2
				for _, b := range yyq673 {
					if b {
						yynn673++
					}
				}
				r.EncodeMapStart(yynn673)
				yynn673 = 0
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy678 := *x.Lun
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeInt(int64(yy678))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy680 := *x.Lun
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeInt(int64(yy680))
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq673[2] {
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq673[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq673[3] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq673[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr673 || yy2arr673 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym688 := z.DecBinary()
	_ = yym688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct689 := r.ContainerType()
		if yyct689 == codecSelferValueTypeMap1234 {
			yyl689 := r.ReadMapStart()
			if yyl689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl689, d)
			}
		} else if yyct689 == codecSelferValueTypeArray1234 {
			yyl689 := r.ReadArrayStart()
			if yyl689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys690Slc
	var yyhl690 bool = l >= 0
	for yyj690 := 0; ; yyj690++ {
		if yyhl690 {
			if yyj690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys690Slc = r.DecodeBytes(yys690Slc, true, true)
		yys690 := string(yys690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys690 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv691 := &x.TargetWWNs
				yym692 := z.DecBinary()
				_ = yym692
				if false {
				} else {
					z.F.DecSliceStringX(yyv691, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym694 := z.DecBinary()
				_ = yym694
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys690)
		} // end switch yys690
	} // end for yyj690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj697 int
	var yyb697 bool
	var yyhl697 bool = l >= 0
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv698 := &x.TargetWWNs
		yym699 := z.DecBinary()
		_ = yym699
		if false {
		} else {
			z.F.DecSliceStringX(yyv698, false, d)
		}
	}
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym701 := z.DecBinary()
		_ = yym701
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj697++
		if yyhl697 {
			yyb697 = yyj697 > l
		} else {
			yyb697 = r.CheckBreak()
		}
		if yyb697 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj697-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym704 := z.EncBinary()
		_ = yym704
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep705 := !z.EncBinary()
			yy2arr705 := z.EncBasicHandle().StructToArray
			var yyq705 [5]bool
			_, _, _ = yysep705, yyq705, yy2arr705
			const yyr705 bool = false
			yyq705[1] = x.FSType != ""
			yyq705[2] = x.SecretRef != nil
			yyq705[3] = x.ReadOnly != false
			yyq705[4] = len(x.Options) != 0
			var yynn705 int
			if yyr705 || yy2arr705 {
				r.EncodeArrayStart(5)
			} else {
				yynn705 = 1
				for _, b := range yyq705 {
					if b {
						yynn705++
					}
				}
				r.EncodeMapStart(yynn705)
				yynn705 = 0
			}
			if yyr705 || yy2arr705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym707 := z.EncBinary()
				_ = yym707
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr705 || yy2arr705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq705[1] {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq705[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr705 || yy2arr705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq705[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq705[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr705 || yy2arr705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq705[3] {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq705[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr705 || yy2arr705 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq705[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym717 := z.EncBinary()
						_ = yym717
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq705[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym718 := z.EncBinary()
						_ = yym718
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr705 || yy2arr705 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym719 := z.DecBinary()
	_ = yym719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct720 := r.ContainerType()
		if yyct720 == codecSelferValueTypeMap1234 {
			yyl720 := r.ReadMapStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl720, d)
			}
		} else if yyct720 == codecSelferValueTypeArray1234 {
			yyl720 := r.ReadArrayStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys721Slc
	var yyhl721 bool = l >= 0
	for yyj721 := 0; ; yyj721++ {
		if yyhl721 {
			if yyj721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys721Slc = r.DecodeBytes(yys721Slc, true, true)
		yys721 := string(yys721Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys721 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv726 := &x.Options
				yym727 := z.DecBinary()
				_ = yym727
				if false {
				} else {
					z.F.DecMapStringStringX(yyv726, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys721)
		} // end switch yys721
	} // end for yyj721
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj728 int
	var yyb728 bool
	var yyhl728 bool = l >= 0
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj728++
	if yyhl728 {
		yyb728 = yyj728 > l
	} else {
		yyb728 = r.CheckBreak()
	}
	if yyb728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv733 := &x.Options
		yym734 := z.DecBinary()
		_ = yym734
		if false {
		} else {
			z.F.DecMapStringStringX(yyv733, false, d)
		}
	}
	for {
		yyj728++
		if yyhl728 {
			yyb728 = yyj728 > l
		} else {
			yyb728 = r.CheckBreak()
		}
		if yyb728 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj728-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [4]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[1] = x.FSType != ""
			yyq736[2] = x.Partition != 0
			yyq736[3] = x.ReadOnly != false
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(4)
			} else {
				yynn736 = 1
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[2] {
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[3] {
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq736[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym749 := z.DecBinary()
	_ = yym749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct750 := r.ContainerType()
		if yyct750 == codecSelferValueTypeMap1234 {
			yyl750 := r.ReadMapStart()
			if yyl750 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl750, d)
			}
		} else if yyct750 == codecSelferValueTypeArray1234 {
			yyl750 := r.ReadArrayStart()
			if yyl750 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl750, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys751Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys751Slc
	var yyhl751 bool = l >= 0
	for yyj751 := 0; ; yyj751++ {
		if yyhl751 {
			if yyj751 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys751Slc = r.DecodeBytes(yys751Slc, true, true)
		yys751 := string(yys751Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys751 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys751)
		} // end switch yys751
	} // end for yyj751
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym761 := z.EncBinary()
		_ = yym761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep762 := !z.EncBinary()
			yy2arr762 := z.EncBasicHandle().StructToArray
			var yyq762 [3]bool
			_, _, _ = yysep762, yyq762, yy2arr762
			const yyr762 bool = false
			yyq762[1] = x.Revision != ""
			yyq762[2] = x.Directory != ""
			var yynn762 int
			if yyr762 || yy2arr762 {
				r.EncodeArrayStart(3)
			} else {
				yynn762 = 1
				for _, b := range yyq762 {
					if b {
						yynn762++
					}
				}
				r.EncodeMapStart(yynn762)
				yynn762 = 0
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym764 := z.EncBinary()
				_ = yym764
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[1] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[2] {
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym772 := z.DecBinary()
	_ = yym772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct773 := r.ContainerType()
		if yyct773 == codecSelferValueTypeMap1234 {
			yyl773 := r.ReadMapStart()
			if yyl773 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl773, d)
			}
		} else if yyct773 == codecSelferValueTypeArray1234 {
			yyl773 := r.ReadArrayStart()
			if yyl773 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys774Slc
	var yyhl774 bool = l >= 0
	for yyj774 := 0; ; yyj774++ {
		if yyhl774 {
			if yyj774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys774Slc = r.DecodeBytes(yys774Slc, true, true)
		yys774 := string(yys774Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys774 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys774)
		} // end switch yys774
	} // end for yyj774
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym782 := z.EncBinary()
		_ = yym782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep783 := !z.EncBinary()
			yy2arr783 := z.EncBasicHandle().StructToArray
			var yyq783 [3]bool
			_, _, _ = yysep783, yyq783, yy2arr783
			const yyr783 bool = false
			yyq783[0] = x.SecretName != ""
			yyq783[1] = len(x.Items) != 0
			yyq783[2] = x.DefaultMode != nil
			var yynn783 int
			if yyr783 || yy2arr783 {
				r.EncodeArrayStart(3)
			} else {
				yynn783 = 0
				for _, b := range yyq783 {
					if b {
						yynn783++
					}
				}
				r.EncodeMapStart(yynn783)
				yynn783 = 0
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[0] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym788 := z.EncBinary()
						_ = yym788
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym789 := z.EncBinary()
						_ = yym789
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy791 := *x.DefaultMode
						yym792 := z.EncBinary()
						_ = yym792
						if false {
						} else {
							r.EncodeInt(int64(yy791))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy793 := *x.DefaultMode
						yym794 := z.EncBinary()
						_ = yym794
						if false {
						} else {
							r.EncodeInt(int64(yy793))
						}
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym795 := z.DecBinary()
	_ = yym795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct796 := r.ContainerType()
		if yyct796 == codecSelferValueTypeMap1234 {
			yyl796 := r.ReadMapStart()
			if yyl796 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl796, d)
			}
		} else if yyct796 == codecSelferValueTypeArray1234 {
			yyl796 := r.ReadArrayStart()
			if yyl796 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl796, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys797Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys797Slc
	var yyhl797 bool = l >= 0
	for yyj797 := 0; ; yyj797++ {
		if yyhl797 {
			if yyj797 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys797Slc = r.DecodeBytes(yys797Slc, true, true)
		yys797 := string(yys797Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys797 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv799 := &x.Items
				yym800 := z.DecBinary()
				_ = yym800
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv799), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym802 := z.DecBinary()
				_ = yym802
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys797)
		} // end switch yys797
	} // end for yyj797
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj803 int
	var yyb803 bool
	var yyhl803 bool = l >= 0
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv805 := &x.Items
		yym806 := z.DecBinary()
		_ = yym806
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv805), d)
		}
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym808 := z.DecBinary()
		_ = yym808
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj803++
		if yyhl803 {
			yyb803 = yyj803 > l
		} else {
			yyb803 = r.CheckBreak()
		}
		if yyb803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym809 := z.EncBinary()
		_ = yym809
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep810 := !z.EncBinary()
			yy2arr810 := z.EncBasicHandle().StructToArray
			var yyq810 [3]bool
			_, _, _ = yysep810, yyq810, yy2arr810
			const yyr810 bool = false
			yyq810[2] = x.ReadOnly != false
			var yynn810 int
			if yyr810 || yy2arr810 {
				r.EncodeArrayStart(3)
			} else {
				yynn810 = 2
				for _, b := range yyq810 {
					if b {
						yynn810++
					}
				}
				r.EncodeMapStart(yynn810)
				yynn810 = 0
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym812 := z.EncBinary()
				_ = yym812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym813 := z.EncBinary()
				_ = yym813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym815 := z.EncBinary()
				_ = yym815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym816 := z.EncBinary()
				_ = yym816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq810[2] {
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq810[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym820 := z.DecBinary()
	_ = yym820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct821 := r.ContainerType()
		if yyct821 == codecSelferValueTypeMap1234 {
			yyl821 := r.ReadMapStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl821, d)
			}
		} else if yyct821 == codecSelferValueTypeArray1234 {
			yyl821 := r.ReadArrayStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys822Slc
	var yyhl822 bool = l >= 0
	for yyj822 := 0; ; yyj822++ {
		if yyhl822 {
			if yyj822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys822Slc = r.DecodeBytes(yys822Slc, true, true)
		yys822 := string(yys822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys822 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys822)
		} // end switch yys822
	} // end for yyj822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj826 int
	var yyb826 bool
	var yyhl826 bool = l >= 0
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj826++
		if yyhl826 {
			yyb826 = yyj826 > l
		} else {
			yyb826 = r.CheckBreak()
		}
		if yyb826 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj826-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym830 := z.EncBinary()
		_ = yym830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep831 := !z.EncBinary()
			yy2arr831 := z.EncBasicHandle().StructToArray
			var yyq831 [5]bool
			_, _, _ = yysep831, yyq831, yy2arr831
			const yyr831 bool = false
			yyq831[2] = x.ReadOnly != false
			yyq831[3] = x.User != ""
			yyq831[4] = x.Group != ""
			var yynn831 int
			if yyr831 || yy2arr831 {
				r.EncodeArrayStart(5)
			} else {
				yynn831 = 2
				for _, b := range yyq831 {
					if b {
						yynn831++
					}
				}
				r.EncodeMapStart(yynn831)
				yynn831 = 0
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym834 := z.EncBinary()
				_ = yym834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym836 := z.EncBinary()
				_ = yym836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym837 := z.EncBinary()
				_ = yym837
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[2] {
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq831[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[3] {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq831[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[4] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq831[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct848 := r.ContainerType()
		if yyct848 == codecSelferValueTypeMap1234 {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if yyct848 == codecSelferValueTypeArray1234 {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys849 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym861 := z.EncBinary()
		_ = yym861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep862 := !z.EncBinary()
			yy2arr862 := z.EncBasicHandle().StructToArray
			var yyq862 [3]bool
			_, _, _ = yysep862, yyq862, yy2arr862
			const yyr862 bool = false
			yyq862[2] = x.ReadOnly != false
			var yynn862 int
			if yyr862 || yy2arr862 {
				r.EncodeArrayStart(3)
			} else {
				yynn862 = 2
				for _, b := range yyq862 {
					if b {
						yynn862++
					}
				}
				r.EncodeMapStart(yynn862)
				yynn862 = 0
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym867 := z.EncBinary()
				_ = yym867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym868 := z.EncBinary()
				_ = yym868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq862[2] {
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq862[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym872 := z.DecBinary()
	_ = yym872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct873 := r.ContainerType()
		if yyct873 == codecSelferValueTypeMap1234 {
			yyl873 := r.ReadMapStart()
			if yyl873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl873, d)
			}
		} else if yyct873 == codecSelferValueTypeArray1234 {
			yyl873 := r.ReadArrayStart()
			if yyl873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys874Slc
	var yyhl874 bool = l >= 0
	for yyj874 := 0; ; yyj874++ {
		if yyhl874 {
			if yyj874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys874Slc = r.DecodeBytes(yys874Slc, true, true)
		yys874 := string(yys874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys874 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys874)
		} // end switch yys874
	} // end for yyj874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym882 := z.EncBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep883 := !z.EncBinary()
			yy2arr883 := z.EncBasicHandle().StructToArray
			var yyq883 [8]bool
			_, _, _ = yysep883, yyq883, yy2arr883
			const yyr883 bool = false
			yyq883[2] = x.FSType != ""
			yyq883[3] = x.RBDPool != ""
			yyq883[4] = x.RadosUser != ""
			yyq883[5] = x.Keyring != ""
			yyq883[6] = x.SecretRef != nil
			yyq883[7] = x.ReadOnly != false
			var yynn883 int
			if yyr883 || yy2arr883 {
				r.EncodeArrayStart(8)
			} else {
				yynn883 = 2
				for _, b := range yyq883 {
					if b {
						yynn883++
					}
				}
				r.EncodeMapStart(yynn883)
				yynn883 = 0
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym889 := z.EncBinary()
				_ = yym889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq883[2] {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq883[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq883[3] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq883[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq883[4] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq883[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq883[5] {
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq883[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq883[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq883[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq883[7] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq883[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr883 || yy2arr883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym906 := z.DecBinary()
	_ = yym906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct907 := r.ContainerType()
		if yyct907 == codecSelferValueTypeMap1234 {
			yyl907 := r.ReadMapStart()
			if yyl907 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl907, d)
			}
		} else if yyct907 == codecSelferValueTypeArray1234 {
			yyl907 := r.ReadArrayStart()
			if yyl907 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys908Slc
	var yyhl908 bool = l >= 0
	for yyj908 := 0; ; yyj908++ {
		if yyhl908 {
			if yyj908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys908Slc = r.DecodeBytes(yys908Slc, true, true)
		yys908 := string(yys908Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys908 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv909 := &x.CephMonitors
				yym910 := z.DecBinary()
				_ = yym910
				if false {
				} else {
					z.F.DecSliceStringX(yyv909, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys908)
		} // end switch yys908
	} // end for yyj908
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj918 int
	var yyb918 bool
	var yyhl918 bool = l >= 0
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv919 := &x.CephMonitors
		yym920 := z.DecBinary()
		_ = yym920
		if false {
		} else {
			z.F.DecSliceStringX(yyv919, false, d)
		}
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj918++
		if yyhl918 {
			yyb918 = yyj918 > l
		} else {
			yyb918 = r.CheckBreak()
		}
		if yyb918 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj918-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym928 := z.EncBinary()
		_ = yym928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep929 := !z.EncBinary()
			yy2arr929 := z.EncBasicHandle().StructToArray
			var yyq929 [3]bool
			_, _, _ = yysep929, yyq929, yy2arr929
			const yyr929 bool = false
			yyq929[1] = x.FSType != ""
			yyq929[2] = x.ReadOnly != false
			var yynn929 int
			if yyr929 || yy2arr929 {
				r.EncodeArrayStart(3)
			} else {
				yynn929 = 1
				for _, b := range yyq929 {
					if b {
						yynn929++
					}
				}
				r.EncodeMapStart(yynn929)
				yynn929 = 0
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq929[1] {
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq929[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq929[2] {
					yym937 := z.EncBinary()
					_ = yym937
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq929[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct940 := r.ContainerType()
		if yyct940 == codecSelferValueTypeMap1234 {
			yyl940 := r.ReadMapStart()
			if yyl940 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl940, d)
			}
		} else if yyct940 == codecSelferValueTypeArray1234 {
			yyl940 := r.ReadArrayStart()
			if yyl940 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys941Slc
	var yyhl941 bool = l >= 0
	for yyj941 := 0; ; yyj941++ {
		if yyhl941 {
			if yyj941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys941Slc = r.DecodeBytes(yys941Slc, true, true)
		yys941 := string(yys941Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys941 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys941)
		} // end switch yys941
	} // end for yyj941
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj945 int
	var yyb945 bool
	var yyhl945 bool = l >= 0
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj945++
		if yyhl945 {
			yyb945 = yyj945 > l
		} else {
			yyb945 = r.CheckBreak()
		}
		if yyb945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym949 := z.EncBinary()
		_ = yym949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep950 := !z.EncBinary()
			yy2arr950 := z.EncBasicHandle().StructToArray
			var yyq950 [6]bool
			_, _, _ = yysep950, yyq950, yy2arr950
			const yyr950 bool = false
			yyq950[1] = x.Path != ""
			yyq950[2] = x.User != ""
			yyq950[3] = x.SecretFile != ""
			yyq950[4] = x.SecretRef != nil
			yyq950[5] = x.ReadOnly != false
			var yynn950 int
			if yyr950 || yy2arr950 {
				r.EncodeArrayStart(6)
			} else {
				yynn950 = 1
				for _, b := range yyq950 {
					if b {
						yynn950++
					}
				}
				r.EncodeMapStart(yynn950)
				yynn950 = 0
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[1] {
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[2] {
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[3] {
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq950[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[5] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq950[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym967 := z.DecBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct968 := r.ContainerType()
		if yyct968 == codecSelferValueTypeMap1234 {
			yyl968 := r.ReadMapStart()
			if yyl968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl968, d)
			}
		} else if yyct968 == codecSelferValueTypeArray1234 {
			yyl968 := r.ReadArrayStart()
			if yyl968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys969Slc
	var yyhl969 bool = l >= 0
	for yyj969 := 0; ; yyj969++ {
		if yyhl969 {
			if yyj969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys969Slc = r.DecodeBytes(yys969Slc, true, true)
		yys969 := string(yys969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys969 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv970 := &x.Monitors
				yym971 := z.DecBinary()
				_ = yym971
				if false {
				} else {
					z.F.DecSliceStringX(yyv970, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys969)
		} // end switch yys969
	} // end for yyj969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj977 int
	var yyb977 bool
	var yyhl977 bool = l >= 0
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv978 := &x.Monitors
		yym979 := z.DecBinary()
		_ = yym979
		if false {
		} else {
			z.F.DecSliceStringX(yyv978, false, d)
		}
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj977++
		if yyhl977 {
			yyb977 = yyj977 > l
		} else {
			yyb977 = r.CheckBreak()
		}
		if yyb977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym985 := z.EncBinary()
		_ = yym985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep986 := !z.EncBinary()
			yy2arr986 := z.EncBasicHandle().StructToArray
			var yyq986 [1]bool
			_, _, _ = yysep986, yyq986, yy2arr986
			const yyr986 bool = false
			var yynn986 int
			if yyr986 || yy2arr986 {
				r.EncodeArrayStart(1)
			} else {
				yynn986 = 1
				for _, b := range yyq986 {
					if b {
						yynn986++
					}
				}
				r.EncodeMapStart(yynn986)
				yynn986 = 0
			}
			if yyr986 || yy2arr986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym988 := z.EncBinary()
				_ = yym988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr986 || yy2arr986 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym990 := z.DecBinary()
	_ = yym990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct991 := r.ContainerType()
		if yyct991 == codecSelferValueTypeMap1234 {
			yyl991 := r.ReadMapStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl991, d)
			}
		} else if yyct991 == codecSelferValueTypeArray1234 {
			yyl991 := r.ReadArrayStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys992Slc
	var yyhl992 bool = l >= 0
	for yyj992 := 0; ; yyj992++ {
		if yyhl992 {
			if yyj992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys992Slc = r.DecodeBytes(yys992Slc, true, true)
		yys992 := string(yys992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys992 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys992)
		} // end switch yys992
	} // end for yyj992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym996 := z.EncBinary()
		_ = yym996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep997 := !z.EncBinary()
			yy2arr997 := z.EncBasicHandle().StructToArray
			var yyq997 [2]bool
			_, _, _ = yysep997, yyq997, yy2arr997
			const yyr997 bool = false
			yyq997[0] = len(x.Items) != 0
			yyq997[1] = x.DefaultMode != nil
			var yynn997 int
			if yyr997 || yy2arr997 {
				r.EncodeArrayStart(2)
			} else {
				yynn997 = 0
				for _, b := range yyq997 {
					if b {
						yynn997++
					}
				}
				r.EncodeMapStart(yynn997)
				yynn997 = 0
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq997[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym999 := z.EncBinary()
						_ = yym999
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq997[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq997[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1002 := *x.DefaultMode
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							r.EncodeInt(int64(yy1002))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq997[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1004 := *x.DefaultMode
						yym1005 := z.EncBinary()
						_ = yym1005
						if false {
						} else {
							r.EncodeInt(int64(yy1004))
						}
					}
				}
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1006 := z.DecBinary()
	_ = yym1006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1007 := r.ContainerType()
		if yyct1007 == codecSelferValueTypeMap1234 {
			yyl1007 := r.ReadMapStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1007, d)
			}
		} else if yyct1007 == codecSelferValueTypeArray1234 {
			yyl1007 := r.ReadArrayStart()
			if yyl1007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1008Slc
	var yyhl1008 bool = l >= 0
	for yyj1008 := 0; ; yyj1008++ {
		if yyhl1008 {
			if yyj1008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1008Slc = r.DecodeBytes(yys1008Slc, true, true)
		yys1008 := string(yys1008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1008 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1009 := &x.Items
				yym1010 := z.DecBinary()
				_ = yym1010
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1009), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1012 := z.DecBinary()
				_ = yym1012
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1008)
		} // end switch yys1008
	} // end for yyj1008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1013 int
	var yyb1013 bool
	var yyhl1013 bool = l >= 0
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1014 := &x.Items
		yym1015 := z.DecBinary()
		_ = yym1015
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1014), d)
		}
	}
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1017 := z.DecBinary()
		_ = yym1017
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1013++
		if yyhl1013 {
			yyb1013 = yyj1013 > l
		} else {
			yyb1013 = r.CheckBreak()
		}
		if yyb1013 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1013-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1018 := z.EncBinary()
		_ = yym1018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1019 := !z.EncBinary()
			yy2arr1019 := z.EncBasicHandle().StructToArray
			var yyq1019 [4]bool
			_, _, _ = yysep1019, yyq1019, yy2arr1019
			const yyr1019 bool = false
			yyq1019[1] = x.FieldRef != nil
			yyq1019[2] = x.ResourceFieldRef != nil
			yyq1019[3] = x.Mode != nil
			var yynn1019 int
			if yyr1019 || yy2arr1019 {
				r.EncodeArrayStart(4)
			} else {
				yynn1019 = 1
				for _, b := range yyq1019 {
					if b {
						yynn1019++
					}
				}
				r.EncodeMapStart(yynn1019)
				yynn1019 = 0
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1022 := z.EncBinary()
				_ = yym1022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1019[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1019[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1019[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1019[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1019[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1026 := *x.Mode
						yym1027 := z.EncBinary()
						_ = yym1027
						if false {
						} else {
							r.EncodeInt(int64(yy1026))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1019[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1028 := *x.Mode
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							r.EncodeInt(int64(yy1028))
						}
					}
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1030 := z.DecBinary()
	_ = yym1030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1031 := r.ContainerType()
		if yyct1031 == codecSelferValueTypeMap1234 {
			yyl1031 := r.ReadMapStart()
			if yyl1031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1031, d)
			}
		} else if yyct1031 == codecSelferValueTypeArray1234 {
			yyl1031 := r.ReadArrayStart()
			if yyl1031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1032Slc
	var yyhl1032 bool = l >= 0
	for yyj1032 := 0; ; yyj1032++ {
		if yyhl1032 {
			if yyj1032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1032Slc = r.DecodeBytes(yys1032Slc, true, true)
		yys1032 := string(yys1032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1032 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1037 := z.DecBinary()
				_ = yym1037
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1032)
		} // end switch yys1032
	} // end for yyj1032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1038 int
	var yyb1038 bool
	var yyhl1038 bool = l >= 0
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1043 := z.DecBinary()
		_ = yym1043
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1038++
		if yyhl1038 {
			yyb1038 = yyj1038 > l
		} else {
			yyb1038 = r.CheckBreak()
		}
		if yyb1038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1044 := z.EncBinary()
		_ = yym1044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1045 := !z.EncBinary()
			yy2arr1045 := z.EncBasicHandle().StructToArray
			var yyq1045 [3]bool
			_, _, _ = yysep1045, yyq1045, yy2arr1045
			const yyr1045 bool = false
			yyq1045[2] = x.ReadOnly != false
			var yynn1045 int
			if yyr1045 || yy2arr1045 {
				r.EncodeArrayStart(3)
			} else {
				yynn1045 = 2
				for _, b := range yyq1045 {
					if b {
						yynn1045++
					}
				}
				r.EncodeMapStart(yynn1045)
				yynn1045 = 0
			}
			if yyr1045 || yy2arr1045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1047 := z.EncBinary()
				_ = yym1047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1048 := z.EncBinary()
				_ = yym1048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1045 || yy2arr1045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1050 := z.EncBinary()
				_ = yym1050
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1045 || yy2arr1045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1045[2] {
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1045[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1055 := z.DecBinary()
	_ = yym1055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1056 := r.ContainerType()
		if yyct1056 == codecSelferValueTypeMap1234 {
			yyl1056 := r.ReadMapStart()
			if yyl1056 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1056, d)
			}
		} else if yyct1056 == codecSelferValueTypeArray1234 {
			yyl1056 := r.ReadArrayStart()
			if yyl1056 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1057Slc
	var yyhl1057 bool = l >= 0
	for yyj1057 := 0; ; yyj1057++ {
		if yyhl1057 {
			if yyj1057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1057Slc = r.DecodeBytes(yys1057Slc, true, true)
		yys1057 := string(yys1057Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1057 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1057)
		} // end switch yys1057
	} // end for yyj1057
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1061 int
	var yyb1061 bool
	var yyhl1061 bool = l >= 0
	yyj1061++
	if yyhl1061 {
		yyb1061 = yyj1061 > l
	} else {
		yyb1061 = r.CheckBreak()
	}
	if yyb1061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1061++
	if yyhl1061 {
		yyb1061 = yyj1061 > l
	} else {
		yyb1061 = r.CheckBreak()
	}
	if yyb1061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1061++
	if yyhl1061 {
		yyb1061 = yyj1061 > l
	} else {
		yyb1061 = r.CheckBreak()
	}
	if yyb1061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1061++
		if yyhl1061 {
			yyb1061 = yyj1061 > l
		} else {
			yyb1061 = r.CheckBreak()
		}
		if yyb1061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1065 := z.EncBinary()
		_ = yym1065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1066 := !z.EncBinary()
			yy2arr1066 := z.EncBasicHandle().StructToArray
			var yyq1066 [2]bool
			_, _, _ = yysep1066, yyq1066, yy2arr1066
			const yyr1066 bool = false
			yyq1066[1] = x.FSType != ""
			var yynn1066 int
			if yyr1066 || yy2arr1066 {
				r.EncodeArrayStart(2)
			} else {
				yynn1066 = 1
				for _, b := range yyq1066 {
					if b {
						yynn1066++
					}
				}
				r.EncodeMapStart(yynn1066)
				yynn1066 = 0
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1068 := z.EncBinary()
				_ = yym1068
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1069 := z.EncBinary()
				_ = yym1069
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1066[1] {
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1066[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1072 := z.EncBinary()
					_ = yym1072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1073 := z.DecBinary()
	_ = yym1073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1074 := r.ContainerType()
		if yyct1074 == codecSelferValueTypeMap1234 {
			yyl1074 := r.ReadMapStart()
			if yyl1074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1074, d)
			}
		} else if yyct1074 == codecSelferValueTypeArray1234 {
			yyl1074 := r.ReadArrayStart()
			if yyl1074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1075Slc
	var yyhl1075 bool = l >= 0
	for yyj1075 := 0; ; yyj1075++ {
		if yyhl1075 {
			if yyj1075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1075Slc = r.DecodeBytes(yys1075Slc, true, true)
		yys1075 := string(yys1075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1075 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1075)
		} // end switch yys1075
	} // end for yyj1075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1078 int
	var yyb1078 bool
	var yyhl1078 bool = l >= 0
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1078++
		if yyhl1078 {
			yyb1078 = yyj1078 > l
		} else {
			yyb1078 = r.CheckBreak()
		}
		if yyb1078 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1078-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1081 := z.EncBinary()
	_ = yym1081
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1082 := z.DecBinary()
	_ = yym1082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1083 := z.EncBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1084 := !z.EncBinary()
			yy2arr1084 := z.EncBasicHandle().StructToArray
			var yyq1084 [5]bool
			_, _, _ = yysep1084, yyq1084, yy2arr1084
			const yyr1084 bool = false
			yyq1084[2] = x.CachingMode != nil
			yyq1084[3] = x.FSType != nil
			yyq1084[4] = x.ReadOnly != nil
			var yynn1084 int
			if yyr1084 || yy2arr1084 {
				r.EncodeArrayStart(5)
			} else {
				yynn1084 = 2
				for _, b := range yyq1084 {
					if b {
						yynn1084++
					}
				}
				r.EncodeMapStart(yynn1084)
				yynn1084 = 0
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1092 := *x.CachingMode
						yy1092.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1093 := *x.CachingMode
						yy1093.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1095 := *x.FSType
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1095))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1097 := *x.FSType
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1097))
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1100 := *x.ReadOnly
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							r.EncodeBool(bool(yy1100))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1102 := *x.ReadOnly
						yym1103 := z.EncBinary()
						_ = yym1103
						if false {
						} else {
							r.EncodeBool(bool(yy1102))
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1104 := z.DecBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1105 := r.ContainerType()
		if yyct1105 == codecSelferValueTypeMap1234 {
			yyl1105 := r.ReadMapStart()
			if yyl1105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1105, d)
			}
		} else if yyct1105 == codecSelferValueTypeArray1234 {
			yyl1105 := r.ReadArrayStart()
			if yyl1105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1106Slc
	var yyhl1106 bool = l >= 0
	for yyj1106 := 0; ; yyj1106++ {
		if yyhl1106 {
			if yyj1106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1106Slc = r.DecodeBytes(yys1106Slc, true, true)
		yys1106 := string(yys1106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1106 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1111 := z.DecBinary()
				_ = yym1111
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1106)
		} // end switch yys1106
	} // end for yyj1106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1114 int
	var yyb1114 bool
	var yyhl1114 bool = l >= 0
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1119 := z.DecBinary()
		_ = yym1119
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1121 := z.DecBinary()
		_ = yym1121
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1114++
		if yyhl1114 {
			yyb1114 = yyj1114 > l
		} else {
			yyb1114 = r.CheckBreak()
		}
		if yyb1114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1122 := z.EncBinary()
		_ = yym1122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1123 := !z.EncBinary()
			yy2arr1123 := z.EncBasicHandle().StructToArray
			var yyq1123 [3]bool
			_, _, _ = yysep1123, yyq1123, yy2arr1123
			const yyr1123 bool = false
			yyq1123[1] = len(x.Items) != 0
			yyq1123[2] = x.DefaultMode != nil
			var yynn1123 int
			if yyr1123 || yy2arr1123 {
				r.EncodeArrayStart(3)
			} else {
				yynn1123 = 1
				for _, b := range yyq1123 {
					if b {
						yynn1123++
					}
				}
				r.EncodeMapStart(yynn1123)
				yynn1123 = 0
			}
			if yyr1123 || yy2arr1123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1125 := z.EncBinary()
				_ = yym1125
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1126 := z.EncBinary()
				_ = yym1126
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1123 || yy2arr1123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1123[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1128 := z.EncBinary()
						_ = yym1128
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1129 := z.EncBinary()
						_ = yym1129
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1123 || yy2arr1123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1123[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1131 := *x.DefaultMode
						yym1132 := z.EncBinary()
						_ = yym1132
						if false {
						} else {
							r.EncodeInt(int64(yy1131))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1133 := *x.DefaultMode
						yym1134 := z.EncBinary()
						_ = yym1134
						if false {
						} else {
							r.EncodeInt(int64(yy1133))
						}
					}
				}
			}
			if yyr1123 || yy2arr1123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1135 := z.DecBinary()
	_ = yym1135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1136 := r.ContainerType()
		if yyct1136 == codecSelferValueTypeMap1234 {
			yyl1136 := r.ReadMapStart()
			if yyl1136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1136, d)
			}
		} else if yyct1136 == codecSelferValueTypeArray1234 {
			yyl1136 := r.ReadArrayStart()
			if yyl1136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1137Slc
	var yyhl1137 bool = l >= 0
	for yyj1137 := 0; ; yyj1137++ {
		if yyhl1137 {
			if yyj1137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1137Slc = r.DecodeBytes(yys1137Slc, true, true)
		yys1137 := string(yys1137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1137 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1139 := &x.Items
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1139), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1137)
		} // end switch yys1137
	} // end for yyj1137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1143 int
	var yyb1143 bool
	var yyhl1143 bool = l >= 0
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1145 := &x.Items
		yym1146 := z.DecBinary()
		_ = yym1146
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1145), d)
		}
	}
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1148 := z.DecBinary()
		_ = yym1148
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1143++
		if yyhl1143 {
			yyb1143 = yyj1143 > l
		} else {
			yyb1143 = r.CheckBreak()
		}
		if yyb1143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1149 := z.EncBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1150 := !z.EncBinary()
			yy2arr1150 := z.EncBasicHandle().StructToArray
			var yyq1150 [3]bool
			_, _, _ = yysep1150, yyq1150, yy2arr1150
			const yyr1150 bool = false
			yyq1150[2] = x.Mode != nil
			var yynn1150 int
			if yyr1150 || yy2arr1150 {
				r.EncodeArrayStart(3)
			} else {
				yynn1150 = 2
				for _, b := range yyq1150 {
					if b {
						yynn1150++
					}
				}
				r.EncodeMapStart(yynn1150)
				yynn1150 = 0
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1152 := z.EncBinary()
				_ = yym1152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1155 := z.EncBinary()
				_ = yym1155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1156 := z.EncBinary()
				_ = yym1156
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1150[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1158 := *x.Mode
						yym1159 := z.EncBinary()
						_ = yym1159
						if false {
						} else {
							r.EncodeInt(int64(yy1158))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1150[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1160 := *x.Mode
						yym1161 := z.EncBinary()
						_ = yym1161
						if false {
						} else {
							r.EncodeInt(int64(yy1160))
						}
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1163 := r.ContainerType()
		if yyct1163 == codecSelferValueTypeMap1234 {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if yyct1163 == codecSelferValueTypeArray1234 {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1164 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1168 := z.DecBinary()
				_ = yym1168
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1173 := z.DecBinary()
		_ = yym1173
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1174 := z.EncBinary()
		_ = yym1174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1175 := !z.EncBinary()
			yy2arr1175 := z.EncBasicHandle().StructToArray
			var yyq1175 [5]bool
			_, _, _ = yysep1175, yyq1175, yy2arr1175
			const yyr1175 bool = false
			yyq1175[0] = x.Name != ""
			yyq1175[1] = x.HostPort != 0
			yyq1175[3] = x.Protocol != ""
			yyq1175[4] = x.HostIP != ""
			var yynn1175 int
			if yyr1175 || yy2arr1175 {
				r.EncodeArrayStart(5)
			} else {
				yynn1175 = 1
				for _, b := range yyq1175 {
					if b {
						yynn1175++
					}
				}
				r.EncodeMapStart(yynn1175)
				yynn1175 = 0
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[0] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[1] {
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1181 := z.EncBinary()
					_ = yym1181
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1183 := z.EncBinary()
				_ = yym1183
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1175[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[4] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1175[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1189 := z.DecBinary()
	_ = yym1189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1190 := r.ContainerType()
		if yyct1190 == codecSelferValueTypeMap1234 {
			yyl1190 := r.ReadMapStart()
			if yyl1190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1190, d)
			}
		} else if yyct1190 == codecSelferValueTypeArray1234 {
			yyl1190 := r.ReadArrayStart()
			if yyl1190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1191Slc
	var yyhl1191 bool = l >= 0
	for yyj1191 := 0; ; yyj1191++ {
		if yyhl1191 {
			if yyj1191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1191Slc = r.DecodeBytes(yys1191Slc, true, true)
		yys1191 := string(yys1191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1191 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1191)
		} // end switch yys1191
	} // end for yyj1191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1197 int
	var yyb1197 bool
	var yyhl1197 bool = l >= 0
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1197++
		if yyhl1197 {
			yyb1197 = yyj1197 > l
		} else {
			yyb1197 = r.CheckBreak()
		}
		if yyb1197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1203 := z.EncBinary()
		_ = yym1203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1204 := !z.EncBinary()
			yy2arr1204 := z.EncBasicHandle().StructToArray
			var yyq1204 [4]bool
			_, _, _ = yysep1204, yyq1204, yy2arr1204
			const yyr1204 bool = false
			yyq1204[1] = x.ReadOnly != false
			yyq1204[3] = x.SubPath != ""
			var yynn1204 int
			if yyr1204 || yy2arr1204 {
				r.EncodeArrayStart(4)
			} else {
				yynn1204 = 2
				for _, b := range yyq1204 {
					if b {
						yynn1204++
					}
				}
				r.EncodeMapStart(yynn1204)
				yynn1204 = 0
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1206 := z.EncBinary()
				_ = yym1206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[1] {
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1212 := z.EncBinary()
				_ = yym1212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[3] {
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1217 := z.DecBinary()
	_ = yym1217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1218 := r.ContainerType()
		if yyct1218 == codecSelferValueTypeMap1234 {
			yyl1218 := r.ReadMapStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1218, d)
			}
		} else if yyct1218 == codecSelferValueTypeArray1234 {
			yyl1218 := r.ReadArrayStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1219Slc
	var yyhl1219 bool = l >= 0
	for yyj1219 := 0; ; yyj1219++ {
		if yyhl1219 {
			if yyj1219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1219Slc = r.DecodeBytes(yys1219Slc, true, true)
		yys1219 := string(yys1219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1219 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1219)
		} // end switch yys1219
	} // end for yyj1219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [3]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[1] = x.Value != ""
			yyq1230[2] = x.ValueFrom != nil
			var yynn1230 int
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(3)
			} else {
				yynn1230 = 1
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
				yynn1230 = 0
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1232 := z.EncBinary()
				_ = yym1232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1233 := z.EncBinary()
				_ = yym1233
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[1] {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1238 := z.DecBinary()
	_ = yym1238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1239 := r.ContainerType()
		if yyct1239 == codecSelferValueTypeMap1234 {
			yyl1239 := r.ReadMapStart()
			if yyl1239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1239, d)
			}
		} else if yyct1239 == codecSelferValueTypeArray1234 {
			yyl1239 := r.ReadArrayStart()
			if yyl1239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1240Slc
	var yyhl1240 bool = l >= 0
	for yyj1240 := 0; ; yyj1240++ {
		if yyhl1240 {
			if yyj1240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1240Slc = r.DecodeBytes(yys1240Slc, true, true)
		yys1240 := string(yys1240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1240 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1240)
		} // end switch yys1240
	} // end for yyj1240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1244 int
	var yyb1244 bool
	var yyhl1244 bool = l >= 0
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1244++
		if yyhl1244 {
			yyb1244 = yyj1244 > l
		} else {
			yyb1244 = r.CheckBreak()
		}
		if yyb1244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1248 := z.EncBinary()
		_ = yym1248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1249 := !z.EncBinary()
			yy2arr1249 := z.EncBasicHandle().StructToArray
			var yyq1249 [4]bool
			_, _, _ = yysep1249, yyq1249, yy2arr1249
			const yyr1249 bool = false
			yyq1249[0] = x.FieldRef != nil
			yyq1249[1] = x.ResourceFieldRef != nil
			yyq1249[2] = x.ConfigMapKeyRef != nil
			yyq1249[3] = x.SecretKeyRef != nil
			var yynn1249 int
			if yyr1249 || yy2arr1249 {
				r.EncodeArrayStart(4)
			} else {
				yynn1249 = 0
				for _, b := range yyq1249 {
					if b {
						yynn1249++
					}
				}
				r.EncodeMapStart(yynn1249)
				yynn1249 = 0
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1249[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1249[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1249[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1249[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1249[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1249[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1254 := z.DecBinary()
	_ = yym1254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1255 := r.ContainerType()
		if yyct1255 == codecSelferValueTypeMap1234 {
			yyl1255 := r.ReadMapStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1255, d)
			}
		} else if yyct1255 == codecSelferValueTypeArray1234 {
			yyl1255 := r.ReadArrayStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1256Slc
	var yyhl1256 bool = l >= 0
	for yyj1256 := 0; ; yyj1256++ {
		if yyhl1256 {
			if yyj1256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1256Slc = r.DecodeBytes(yys1256Slc, true, true)
		yys1256 := string(yys1256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1256 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1256)
		} // end switch yys1256
	} // end for yyj1256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1261 int
	var yyb1261 bool
	var yyhl1261 bool = l >= 0
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1261++
		if yyhl1261 {
			yyb1261 = yyj1261 > l
		} else {
			yyb1261 = r.CheckBreak()
		}
		if yyb1261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1266 := z.EncBinary()
		_ = yym1266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1267 := !z.EncBinary()
			yy2arr1267 := z.EncBasicHandle().StructToArray
			var yyq1267 [2]bool
			_, _, _ = yysep1267, yyq1267, yy2arr1267
			const yyr1267 bool = false
			var yynn1267 int
			if yyr1267 || yy2arr1267 {
				r.EncodeArrayStart(2)
			} else {
				yynn1267 = 2
				for _, b := range yyq1267 {
					if b {
						yynn1267++
					}
				}
				r.EncodeMapStart(yynn1267)
				yynn1267 = 0
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1269 := z.EncBinary()
				_ = yym1269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1273 := z.EncBinary()
				_ = yym1273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1267 || yy2arr1267 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1274 := z.DecBinary()
	_ = yym1274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1275 := r.ContainerType()
		if yyct1275 == codecSelferValueTypeMap1234 {
			yyl1275 := r.ReadMapStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1275, d)
			}
		} else if yyct1275 == codecSelferValueTypeArray1234 {
			yyl1275 := r.ReadArrayStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1276Slc
	var yyhl1276 bool = l >= 0
	for yyj1276 := 0; ; yyj1276++ {
		if yyhl1276 {
			if yyj1276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1276Slc = r.DecodeBytes(yys1276Slc, true, true)
		yys1276 := string(yys1276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1276 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1276)
		} // end switch yys1276
	} // end for yyj1276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1279 int
	var yyb1279 bool
	var yyhl1279 bool = l >= 0
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1279++
		if yyhl1279 {
			yyb1279 = yyj1279 > l
		} else {
			yyb1279 = r.CheckBreak()
		}
		if yyb1279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1282 := z.EncBinary()
		_ = yym1282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1283 := !z.EncBinary()
			yy2arr1283 := z.EncBasicHandle().StructToArray
			var yyq1283 [3]bool
			_, _, _ = yysep1283, yyq1283, yy2arr1283
			const yyr1283 bool = false
			yyq1283[0] = x.ContainerName != ""
			yyq1283[2] = true
			var yynn1283 int
			if yyr1283 || yy2arr1283 {
				r.EncodeArrayStart(3)
			} else {
				yynn1283 = 1
				for _, b := range yyq1283 {
					if b {
						yynn1283++
					}
				}
				r.EncodeMapStart(yynn1283)
				yynn1283 = 0
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[0] {
					yym1285 := z.EncBinary()
					_ = yym1285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1283[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1286 := z.EncBinary()
					_ = yym1286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1288 := z.EncBinary()
				_ = yym1288
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1289 := z.EncBinary()
				_ = yym1289
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[2] {
					yy1291 := &x.Divisor
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1291) {
					} else if !yym1292 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1291)
					} else {
						z.EncFallback(yy1291)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1293 := &x.Divisor
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1293) {
					} else if !yym1294 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1293)
					} else {
						z.EncFallback(yy1293)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1295 := z.DecBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1296 := r.ContainerType()
		if yyct1296 == codecSelferValueTypeMap1234 {
			yyl1296 := r.ReadMapStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1296, d)
			}
		} else if yyct1296 == codecSelferValueTypeArray1234 {
			yyl1296 := r.ReadArrayStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1297Slc
	var yyhl1297 bool = l >= 0
	for yyj1297 := 0; ; yyj1297++ {
		if yyhl1297 {
			if yyj1297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1297Slc = r.DecodeBytes(yys1297Slc, true, true)
		yys1297 := string(yys1297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1297 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1300 := &x.Divisor
				yym1301 := z.DecBinary()
				_ = yym1301
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1300) {
				} else if !yym1301 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1300)
				} else {
					z.DecFallback(yyv1300, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1297)
		} // end switch yys1297
	} // end for yyj1297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1302 int
	var yyb1302 bool
	var yyhl1302 bool = l >= 0
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1302++
	if yyhl1302 {
		yyb1302 = yyj1302 > l
	} else {
		yyb1302 = r.CheckBreak()
	}
	if yyb1302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1305 := &x.Divisor
		yym1306 := z.DecBinary()
		_ = yym1306
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1305) {
		} else if !yym1306 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1305)
		} else {
			z.DecFallback(yyv1305, false)
		}
	}
	for {
		yyj1302++
		if yyhl1302 {
			yyb1302 = yyj1302 > l
		} else {
			yyb1302 = r.CheckBreak()
		}
		if yyb1302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [2]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(2)
			} else {
				yynn1308 = 2
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1310 := z.EncBinary()
				_ = yym1310
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1311 := z.EncBinary()
				_ = yym1311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1313 := z.EncBinary()
				_ = yym1313
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1314 := z.EncBinary()
				_ = yym1314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1315 := z.DecBinary()
	_ = yym1315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1316 := r.ContainerType()
		if yyct1316 == codecSelferValueTypeMap1234 {
			yyl1316 := r.ReadMapStart()
			if yyl1316 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1316, d)
			}
		} else if yyct1316 == codecSelferValueTypeArray1234 {
			yyl1316 := r.ReadArrayStart()
			if yyl1316 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1317Slc
	var yyhl1317 bool = l >= 0
	for yyj1317 := 0; ; yyj1317++ {
		if yyhl1317 {
			if yyj1317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1317Slc = r.DecodeBytes(yys1317Slc, true, true)
		yys1317 := string(yys1317Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1317 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1317)
		} // end switch yys1317
	} // end for yyj1317
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1320 int
	var yyb1320 bool
	var yyhl1320 bool = l >= 0
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1320++
	if yyhl1320 {
		yyb1320 = yyj1320 > l
	} else {
		yyb1320 = r.CheckBreak()
	}
	if yyb1320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1320++
		if yyhl1320 {
			yyb1320 = yyj1320 > l
		} else {
			yyb1320 = r.CheckBreak()
		}
		if yyb1320 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1320-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1323 := z.EncBinary()
		_ = yym1323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1324 := !z.EncBinary()
			yy2arr1324 := z.EncBasicHandle().StructToArray
			var yyq1324 [2]bool
			_, _, _ = yysep1324, yyq1324, yy2arr1324
			const yyr1324 bool = false
			var yynn1324 int
			if yyr1324 || yy2arr1324 {
				r.EncodeArrayStart(2)
			} else {
				yynn1324 = 2
				for _, b := range yyq1324 {
					if b {
						yynn1324++
					}
				}
				r.EncodeMapStart(yynn1324)
				yynn1324 = 0
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1329 := z.EncBinary()
				_ = yym1329
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1330 := z.EncBinary()
				_ = yym1330
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1331 := z.DecBinary()
	_ = yym1331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1332 := r.ContainerType()
		if yyct1332 == codecSelferValueTypeMap1234 {
			yyl1332 := r.ReadMapStart()
			if yyl1332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1332, d)
			}
		} else if yyct1332 == codecSelferValueTypeArray1234 {
			yyl1332 := r.ReadArrayStart()
			if yyl1332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1333Slc
	var yyhl1333 bool = l >= 0
	for yyj1333 := 0; ; yyj1333++ {
		if yyhl1333 {
			if yyj1333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1333Slc = r.DecodeBytes(yys1333Slc, true, true)
		yys1333 := string(yys1333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1333 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1333)
		} // end switch yys1333
	} // end for yyj1333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1336 int
	var yyb1336 bool
	var yyhl1336 bool = l >= 0
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1336++
		if yyhl1336 {
			yyb1336 = yyj1336 > l
		} else {
			yyb1336 = r.CheckBreak()
		}
		if yyb1336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1339 := z.EncBinary()
		_ = yym1339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1340 := !z.EncBinary()
			yy2arr1340 := z.EncBasicHandle().StructToArray
			var yyq1340 [2]bool
			_, _, _ = yysep1340, yyq1340, yy2arr1340
			const yyr1340 bool = false
			var yynn1340 int
			if yyr1340 || yy2arr1340 {
				r.EncodeArrayStart(2)
			} else {
				yynn1340 = 2
				for _, b := range yyq1340 {
					if b {
						yynn1340++
					}
				}
				r.EncodeMapStart(yynn1340)
				yynn1340 = 0
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1342 := z.EncBinary()
				_ = yym1342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1343 := z.EncBinary()
				_ = yym1343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1345 := z.EncBinary()
				_ = yym1345
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1346 := z.EncBinary()
				_ = yym1346
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1347 := z.DecBinary()
	_ = yym1347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1348 := r.ContainerType()
		if yyct1348 == codecSelferValueTypeMap1234 {
			yyl1348 := r.ReadMapStart()
			if yyl1348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1348, d)
			}
		} else if yyct1348 == codecSelferValueTypeArray1234 {
			yyl1348 := r.ReadArrayStart()
			if yyl1348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1349Slc
	var yyhl1349 bool = l >= 0
	for yyj1349 := 0; ; yyj1349++ {
		if yyhl1349 {
			if yyj1349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1349Slc = r.DecodeBytes(yys1349Slc, true, true)
		yys1349 := string(yys1349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1349 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1349)
		} // end switch yys1349
	} // end for yyj1349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1352 int
	var yyb1352 bool
	var yyhl1352 bool = l >= 0
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1352++
		if yyhl1352 {
			yyb1352 = yyj1352 > l
		} else {
			yyb1352 = r.CheckBreak()
		}
		if yyb1352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1355 := z.EncBinary()
		_ = yym1355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1356 := !z.EncBinary()
			yy2arr1356 := z.EncBasicHandle().StructToArray
			var yyq1356 [5]bool
			_, _, _ = yysep1356, yyq1356, yy2arr1356
			const yyr1356 bool = false
			yyq1356[0] = x.Path != ""
			yyq1356[1] = true
			yyq1356[2] = x.Host != ""
			yyq1356[3] = x.Scheme != ""
			yyq1356[4] = len(x.HTTPHeaders) != 0
			var yynn1356 int
			if yyr1356 || yy2arr1356 {
				r.EncodeArrayStart(5)
			} else {
				yynn1356 = 0
				for _, b := range yyq1356 {
					if b {
						yynn1356++
					}
				}
				r.EncodeMapStart(yynn1356)
				yynn1356 = 0
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[0] {
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[1] {
					yy1361 := &x.Port
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1361) {
					} else if !yym1362 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1361)
					} else {
						z.EncFallback(yy1361)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1363 := &x.Port
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1363) {
					} else if !yym1364 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1363)
					} else {
						z.EncFallback(yy1363)
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[2] {
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1356[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1356[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1356[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1370 := z.EncBinary()
						_ = yym1370
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1356[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1371 := z.EncBinary()
						_ = yym1371
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1356 || yy2arr1356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1372 := z.DecBinary()
	_ = yym1372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1373 := r.ContainerType()
		if yyct1373 == codecSelferValueTypeMap1234 {
			yyl1373 := r.ReadMapStart()
			if yyl1373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1373, d)
			}
		} else if yyct1373 == codecSelferValueTypeArray1234 {
			yyl1373 := r.ReadArrayStart()
			if yyl1373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1374Slc
	var yyhl1374 bool = l >= 0
	for yyj1374 := 0; ; yyj1374++ {
		if yyhl1374 {
			if yyj1374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1374Slc = r.DecodeBytes(yys1374Slc, true, true)
		yys1374 := string(yys1374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1374 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1376 := &x.Port
				yym1377 := z.DecBinary()
				_ = yym1377
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1376) {
				} else if !yym1377 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1376)
				} else {
					z.DecFallback(yyv1376, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1380 := &x.HTTPHeaders
				yym1381 := z.DecBinary()
				_ = yym1381
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1380), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1374)
		} // end switch yys1374
	} // end for yyj1374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1382 int
	var yyb1382 bool
	var yyhl1382 bool = l >= 0
	yyj1382++
	if yyhl1382 {
		yyb1382 = yyj1382 > l
	} else {
		yyb1382 = r.CheckBreak()
	}
	if yyb1382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1382++
	if yyhl1382 {
		yyb1382 = yyj1382 > l
	} else {
		yyb1382 = r.CheckBreak()
	}
	if yyb1382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1384 := &x.Port
		yym1385 := z.DecBinary()
		_ = yym1385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1384) {
		} else if !yym1385 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1384)
		} else {
			z.DecFallback(yyv1384, false)
		}
	}
	yyj1382++
	if yyhl1382 {
		yyb1382 = yyj1382 > l
	} else {
		yyb1382 = r.CheckBreak()
	}
	if yyb1382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1382++
	if yyhl1382 {
		yyb1382 = yyj1382 > l
	} else {
		yyb1382 = r.CheckBreak()
	}
	if yyb1382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1382++
	if yyhl1382 {
		yyb1382 = yyj1382 > l
	} else {
		yyb1382 = r.CheckBreak()
	}
	if yyb1382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1388 := &x.HTTPHeaders
		yym1389 := z.DecBinary()
		_ = yym1389
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1388), d)
		}
	}
	for {
		yyj1382++
		if yyhl1382 {
			yyb1382 = yyj1382 > l
		} else {
			yyb1382 = r.CheckBreak()
		}
		if yyb1382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1390 := z.EncBinary()
	_ = yym1390
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1391 := z.DecBinary()
	_ = yym1391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1392 := z.EncBinary()
		_ = yym1392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1393 := !z.EncBinary()
			yy2arr1393 := z.EncBasicHandle().StructToArray
			var yyq1393 [1]bool
			_, _, _ = yysep1393, yyq1393, yy2arr1393
			const yyr1393 bool = false
			yyq1393[0] = true
			var yynn1393 int
			if yyr1393 || yy2arr1393 {
				r.EncodeArrayStart(1)
			} else {
				yynn1393 = 0
				for _, b := range yyq1393 {
					if b {
						yynn1393++
					}
				}
				r.EncodeMapStart(yynn1393)
				yynn1393 = 0
			}
			if yyr1393 || yy2arr1393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1393[0] {
					yy1395 := &x.Port
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1395) {
					} else if !yym1396 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1395)
					} else {
						z.EncFallback(yy1395)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1397 := &x.Port
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1397) {
					} else if !yym1398 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1397)
					} else {
						z.EncFallback(yy1397)
					}
				}
			}
			if yyr1393 || yy2arr1393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1399 := z.DecBinary()
	_ = yym1399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1400 := r.ContainerType()
		if yyct1400 == codecSelferValueTypeMap1234 {
			yyl1400 := r.ReadMapStart()
			if yyl1400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1400, d)
			}
		} else if yyct1400 == codecSelferValueTypeArray1234 {
			yyl1400 := r.ReadArrayStart()
			if yyl1400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1401Slc
	var yyhl1401 bool = l >= 0
	for yyj1401 := 0; ; yyj1401++ {
		if yyhl1401 {
			if yyj1401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1401Slc = r.DecodeBytes(yys1401Slc, true, true)
		yys1401 := string(yys1401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1401 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1402 := &x.Port
				yym1403 := z.DecBinary()
				_ = yym1403
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1402) {
				} else if !yym1403 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1402)
				} else {
					z.DecFallback(yyv1402, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1401)
		} // end switch yys1401
	} // end for yyj1401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1404 int
	var yyb1404 bool
	var yyhl1404 bool = l >= 0
	yyj1404++
	if yyhl1404 {
		yyb1404 = yyj1404 > l
	} else {
		yyb1404 = r.CheckBreak()
	}
	if yyb1404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1405 := &x.Port
		yym1406 := z.DecBinary()
		_ = yym1406
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1405) {
		} else if !yym1406 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1405)
		} else {
			z.DecFallback(yyv1405, false)
		}
	}
	for {
		yyj1404++
		if yyhl1404 {
			yyb1404 = yyj1404 > l
		} else {
			yyb1404 = r.CheckBreak()
		}
		if yyb1404 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1404-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1407 := z.EncBinary()
		_ = yym1407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1408 := !z.EncBinary()
			yy2arr1408 := z.EncBasicHandle().StructToArray
			var yyq1408 [1]bool
			_, _, _ = yysep1408, yyq1408, yy2arr1408
			const yyr1408 bool = false
			yyq1408[0] = len(x.Command) != 0
			var yynn1408 int
			if yyr1408 || yy2arr1408 {
				r.EncodeArrayStart(1)
			} else {
				yynn1408 = 0
				for _, b := range yyq1408 {
					if b {
						yynn1408++
					}
				}
				r.EncodeMapStart(yynn1408)
				yynn1408 = 0
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1408[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1410 := z.EncBinary()
						_ = yym1410
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1408[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1411 := z.EncBinary()
						_ = yym1411
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1412 := z.DecBinary()
	_ = yym1412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1413 := r.ContainerType()
		if yyct1413 == codecSelferValueTypeMap1234 {
			yyl1413 := r.ReadMapStart()
			if yyl1413 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1413, d)
			}
		} else if yyct1413 == codecSelferValueTypeArray1234 {
			yyl1413 := r.ReadArrayStart()
			if yyl1413 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1414Slc
	var yyhl1414 bool = l >= 0
	for yyj1414 := 0; ; yyj1414++ {
		if yyhl1414 {
			if yyj1414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1414Slc = r.DecodeBytes(yys1414Slc, true, true)
		yys1414 := string(yys1414Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1414 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1415 := &x.Command
				yym1416 := z.DecBinary()
				_ = yym1416
				if false {
				} else {
					z.F.DecSliceStringX(yyv1415, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1414)
		} // end switch yys1414
	} // end for yyj1414
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1417 int
	var yyb1417 bool
	var yyhl1417 bool = l >= 0
	yyj1417++
	if yyhl1417 {
		yyb1417 = yyj1417 > l
	} else {
		yyb1417 = r.CheckBreak()
	}
	if yyb1417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1418 := &x.Command
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else {
			z.F.DecSliceStringX(yyv1418, false, d)
		}
	}
	for {
		yyj1417++
		if yyhl1417 {
			yyb1417 = yyj1417 > l
		} else {
			yyb1417 = r.CheckBreak()
		}
		if yyb1417 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1417-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1420 := z.EncBinary()
		_ = yym1420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1421 := !z.EncBinary()
			yy2arr1421 := z.EncBasicHandle().StructToArray
			var yyq1421 [8]bool
			_, _, _ = yysep1421, yyq1421, yy2arr1421
			const yyr1421 bool = false
			yyq1421[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1421[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1421[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1421[3] = x.InitialDelaySeconds != 0
			yyq1421[4] = x.TimeoutSeconds != 0
			yyq1421[5] = x.PeriodSeconds != 0
			yyq1421[6] = x.SuccessThreshold != 0
			yyq1421[7] = x.FailureThreshold != 0
			var yynn1421 int
			if yyr1421 || yy2arr1421 {
				r.EncodeArrayStart(8)
			} else {
				yynn1421 = 0
				for _, b := range yyq1421 {
					if b {
						yynn1421++
					}
				}
				r.EncodeMapStart(yynn1421)
				yynn1421 = 0
			}
			var yyn1422 bool
			if x.Handler.Exec == nil {
				yyn1422 = true
				goto LABEL1422
			}
		LABEL1422:
			if yyr1421 || yy2arr1421 {
				if yyn1422 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1421[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1421[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1422 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1423 bool
			if x.Handler.HTTPGet == nil {
				yyn1423 = true
				goto LABEL1423
			}
		LABEL1423:
			if yyr1421 || yy2arr1421 {
				if yyn1423 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1421[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1421[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1423 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1424 bool
			if x.Handler.TCPSocket == nil {
				yyn1424 = true
				goto LABEL1424
			}
		LABEL1424:
			if yyr1421 || yy2arr1421 {
				if yyn1424 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1421[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1421[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1424 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[3] {
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1421[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[4] {
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1421[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[5] {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1421[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[6] {
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1421[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1436 := z.EncBinary()
					_ = yym1436
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[7] {
					yym1438 := z.EncBinary()
					_ = yym1438
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1421[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1439 := z.EncBinary()
					_ = yym1439
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1441 := r.ContainerType()
		if yyct1441 == codecSelferValueTypeMap1234 {
			yyl1441 := r.ReadMapStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1441, d)
			}
		} else if yyct1441 == codecSelferValueTypeArray1234 {
			yyl1441 := r.ReadArrayStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1442Slc
	var yyhl1442 bool = l >= 0
	for yyj1442 := 0; ; yyj1442++ {
		if yyhl1442 {
			if yyj1442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1442Slc = r.DecodeBytes(yys1442Slc, true, true)
		yys1442 := string(yys1442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1442 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1442)
		} // end switch yys1442
	} // end for yyj1442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1451 int
	var yyb1451 bool
	var yyhl1451 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1451++
		if yyhl1451 {
			yyb1451 = yyj1451 > l
		} else {
			yyb1451 = r.CheckBreak()
		}
		if yyb1451 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1451-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1460 := z.EncBinary()
	_ = yym1460
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1461 := z.DecBinary()
	_ = yym1461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1462 := z.EncBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1463 := z.DecBinary()
	_ = yym1463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1464 := z.EncBinary()
		_ = yym1464
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1465 := !z.EncBinary()
			yy2arr1465 := z.EncBasicHandle().StructToArray
			var yyq1465 [2]bool
			_, _, _ = yysep1465, yyq1465, yy2arr1465
			const yyr1465 bool = false
			yyq1465[0] = len(x.Add) != 0
			yyq1465[1] = len(x.Drop) != 0
			var yynn1465 int
			if yyr1465 || yy2arr1465 {
				r.EncodeArrayStart(2)
			} else {
				yynn1465 = 0
				for _, b := range yyq1465 {
					if b {
						yynn1465++
					}
				}
				r.EncodeMapStart(yynn1465)
				yynn1465 = 0
			}
			if yyr1465 || yy2arr1465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1465[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1465[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1468 := z.EncBinary()
						_ = yym1468
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1465 || yy2arr1465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1465[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1465[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1465 || yy2arr1465 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1472 := z.DecBinary()
	_ = yym1472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1473 := r.ContainerType()
		if yyct1473 == codecSelferValueTypeMap1234 {
			yyl1473 := r.ReadMapStart()
			if yyl1473 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1473, d)
			}
		} else if yyct1473 == codecSelferValueTypeArray1234 {
			yyl1473 := r.ReadArrayStart()
			if yyl1473 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1474Slc
	var yyhl1474 bool = l >= 0
	for yyj1474 := 0; ; yyj1474++ {
		if yyhl1474 {
			if yyj1474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1474Slc = r.DecodeBytes(yys1474Slc, true, true)
		yys1474 := string(yys1474Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1474 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1475 := &x.Add
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1475), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1477 := &x.Drop
				yym1478 := z.DecBinary()
				_ = yym1478
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1477), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1474)
		} // end switch yys1474
	} // end for yyj1474
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1479 int
	var yyb1479 bool
	var yyhl1479 bool = l >= 0
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1480 := &x.Add
		yym1481 := z.DecBinary()
		_ = yym1481
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1480), d)
		}
	}
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1482 := &x.Drop
		yym1483 := z.DecBinary()
		_ = yym1483
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1482), d)
		}
	}
	for {
		yyj1479++
		if yyhl1479 {
			yyb1479 = yyj1479 > l
		} else {
			yyb1479 = r.CheckBreak()
		}
		if yyb1479 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1479-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1484 := z.EncBinary()
		_ = yym1484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1485 := !z.EncBinary()
			yy2arr1485 := z.EncBasicHandle().StructToArray
			var yyq1485 [2]bool
			_, _, _ = yysep1485, yyq1485, yy2arr1485
			const yyr1485 bool = false
			yyq1485[0] = len(x.Limits) != 0
			yyq1485[1] = len(x.Requests) != 0
			var yynn1485 int
			if yyr1485 || yy2arr1485 {
				r.EncodeArrayStart(2)
			} else {
				yynn1485 = 0
				for _, b := range yyq1485 {
					if b {
						yynn1485++
					}
				}
				r.EncodeMapStart(yynn1485)
				yynn1485 = 0
			}
			if yyr1485 || yy2arr1485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1485[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1485[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1485[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1485[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1485 || yy2arr1485 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1488 := z.DecBinary()
	_ = yym1488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1489 := r.ContainerType()
		if yyct1489 == codecSelferValueTypeMap1234 {
			yyl1489 := r.ReadMapStart()
			if yyl1489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1489, d)
			}
		} else if yyct1489 == codecSelferValueTypeArray1234 {
			yyl1489 := r.ReadArrayStart()
			if yyl1489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1490Slc
	var yyhl1490 bool = l >= 0
	for yyj1490 := 0; ; yyj1490++ {
		if yyhl1490 {
			if yyj1490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1490Slc = r.DecodeBytes(yys1490Slc, true, true)
		yys1490 := string(yys1490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1490 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1491 := &x.Limits
				yyv1491.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1492 := &x.Requests
				yyv1492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1490)
		} // end switch yys1490
	} // end for yyj1490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1493 int
	var yyb1493 bool
	var yyhl1493 bool = l >= 0
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1494 := &x.Limits
		yyv1494.CodecDecodeSelf(d)
	}
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1495 := &x.Requests
		yyv1495.CodecDecodeSelf(d)
	}
	for {
		yyj1493++
		if yyhl1493 {
			yyb1493 = yyj1493 > l
		} else {
			yyb1493 = r.CheckBreak()
		}
		if yyb1493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1496 := z.EncBinary()
		_ = yym1496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1497 := !z.EncBinary()
			yy2arr1497 := z.EncBasicHandle().StructToArray
			var yyq1497 [18]bool
			_, _, _ = yysep1497, yyq1497, yy2arr1497
			const yyr1497 bool = false
			yyq1497[2] = len(x.Command) != 0
			yyq1497[3] = len(x.Args) != 0
			yyq1497[4] = x.WorkingDir != ""
			yyq1497[5] = len(x.Ports) != 0
			yyq1497[6] = len(x.Env) != 0
			yyq1497[7] = true
			yyq1497[8] = len(x.VolumeMounts) != 0
			yyq1497[9] = x.LivenessProbe != nil
			yyq1497[10] = x.ReadinessProbe != nil
			yyq1497[11] = x.Lifecycle != nil
			yyq1497[12] = x.TerminationMessagePath != ""
			yyq1497[14] = x.SecurityContext != nil
			yyq1497[15] = x.Stdin != false
			yyq1497[16] = x.StdinOnce != false
			yyq1497[17] = x.TTY != false
			var yynn1497 int
			if yyr1497 || yy2arr1497 {
				r.EncodeArrayStart(18)
			} else {
				yynn1497 = 3
				for _, b := range yyq1497 {
					if b {
						yynn1497++
					}
				}
				r.EncodeMapStart(yynn1497)
				yynn1497 = 0
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1499 := z.EncBinary()
				_ = yym1499
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1500 := z.EncBinary()
				_ = yym1500
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1502 := z.EncBinary()
				_ = yym1502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1503 := z.EncBinary()
				_ = yym1503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1505 := z.EncBinary()
						_ = yym1505
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1509 := z.EncBinary()
						_ = yym1509
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[4] {
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1497[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1515 := z.EncBinary()
						_ = yym1515
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1517 := z.EncBinary()
						_ = yym1517
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1518 := z.EncBinary()
						_ = yym1518
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[7] {
					yy1520 := &x.Resources
					yy1520.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1521 := &x.Resources
					yy1521.CodecEncodeSelf(e)
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[12] {
					yym1529 := z.EncBinary()
					_ = yym1529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1497[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1497[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[15] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1497[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[16] {
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1497[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1497[17] {
					yym1540 := z.EncBinary()
					_ = yym1540
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1497[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1497 || yy2arr1497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1542 := z.DecBinary()
	_ = yym1542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1543 := r.ContainerType()
		if yyct1543 == codecSelferValueTypeMap1234 {
			yyl1543 := r.ReadMapStart()
			if yyl1543 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1543, d)
			}
		} else if yyct1543 == codecSelferValueTypeArray1234 {
			yyl1543 := r.ReadArrayStart()
			if yyl1543 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1544Slc
	var yyhl1544 bool = l >= 0
	for yyj1544 := 0; ; yyj1544++ {
		if yyhl1544 {
			if yyj1544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1544Slc = r.DecodeBytes(yys1544Slc, true, true)
		yys1544 := string(yys1544Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1544 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1547 := &x.Command
				yym1548 := z.DecBinary()
				_ = yym1548
				if false {
				} else {
					z.F.DecSliceStringX(yyv1547, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1549 := &x.Args
				yym1550 := z.DecBinary()
				_ = yym1550
				if false {
				} else {
					z.F.DecSliceStringX(yyv1549, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1552 := &x.Ports
				yym1553 := z.DecBinary()
				_ = yym1553
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1552), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1554 := &x.Env
				yym1555 := z.DecBinary()
				_ = yym1555
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1554), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1556 := &x.Resources
				yyv1556.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1557 := &x.VolumeMounts
				yym1558 := z.DecBinary()
				_ = yym1558
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1557), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1544)
		} // end switch yys1544
	} // end for yyj1544
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1568 int
	var yyb1568 bool
	var yyhl1568 bool = l >= 0
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1571 := &x.Command
		yym1572 := z.DecBinary()
		_ = yym1572
		if false {
		} else {
			z.F.DecSliceStringX(yyv1571, false, d)
		}
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1573 := &x.Args
		yym1574 := z.DecBinary()
		_ = yym1574
		if false {
		} else {
			z.F.DecSliceStringX(yyv1573, false, d)
		}
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1576 := &x.Ports
		yym1577 := z.DecBinary()
		_ = yym1577
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1576), d)
		}
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1578 := &x.Env
		yym1579 := z.DecBinary()
		_ = yym1579
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1578), d)
		}
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1580 := &x.Resources
		yyv1580.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1581 := &x.VolumeMounts
		yym1582 := z.DecBinary()
		_ = yym1582
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1581), d)
		}
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1568++
		if yyhl1568 {
			yyb1568 = yyj1568 > l
		} else {
			yyb1568 = r.CheckBreak()
		}
		if yyb1568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1592 := z.EncBinary()
		_ = yym1592
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1593 := !z.EncBinary()
			yy2arr1593 := z.EncBasicHandle().StructToArray
			var yyq1593 [3]bool
			_, _, _ = yysep1593, yyq1593, yy2arr1593
			const yyr1593 bool = false
			yyq1593[0] = x.Exec != nil
			yyq1593[1] = x.HTTPGet != nil
			yyq1593[2] = x.TCPSocket != nil
			var yynn1593 int
			if yyr1593 || yy2arr1593 {
				r.EncodeArrayStart(3)
			} else {
				yynn1593 = 0
				for _, b := range yyq1593 {
					if b {
						yynn1593++
					}
				}
				r.EncodeMapStart(yynn1593)
				yynn1593 = 0
			}
			if yyr1593 || yy2arr1593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1593[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1593[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1593 || yy2arr1593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1593[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1593[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1593 || yy2arr1593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1593[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1593[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1593 || yy2arr1593 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1597 := z.DecBinary()
	_ = yym1597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1598 := r.ContainerType()
		if yyct1598 == codecSelferValueTypeMap1234 {
			yyl1598 := r.ReadMapStart()
			if yyl1598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1598, d)
			}
		} else if yyct1598 == codecSelferValueTypeArray1234 {
			yyl1598 := r.ReadArrayStart()
			if yyl1598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1599Slc
	var yyhl1599 bool = l >= 0
	for yyj1599 := 0; ; yyj1599++ {
		if yyhl1599 {
			if yyj1599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1599Slc = r.DecodeBytes(yys1599Slc, true, true)
		yys1599 := string(yys1599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1599 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1599)
		} // end switch yys1599
	} // end for yyj1599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1603 int
	var yyb1603 bool
	var yyhl1603 bool = l >= 0
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1603++
	if yyhl1603 {
		yyb1603 = yyj1603 > l
	} else {
		yyb1603 = r.CheckBreak()
	}
	if yyb1603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1603++
		if yyhl1603 {
			yyb1603 = yyj1603 > l
		} else {
			yyb1603 = r.CheckBreak()
		}
		if yyb1603 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1603-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1607 := z.EncBinary()
		_ = yym1607
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1608 := !z.EncBinary()
			yy2arr1608 := z.EncBasicHandle().StructToArray
			var yyq1608 [2]bool
			_, _, _ = yysep1608, yyq1608, yy2arr1608
			const yyr1608 bool = false
			yyq1608[0] = x.PostStart != nil
			yyq1608[1] = x.PreStop != nil
			var yynn1608 int
			if yyr1608 || yy2arr1608 {
				r.EncodeArrayStart(2)
			} else {
				yynn1608 = 0
				for _, b := range yyq1608 {
					if b {
						yynn1608++
					}
				}
				r.EncodeMapStart(yynn1608)
				yynn1608 = 0
			}
			if yyr1608 || yy2arr1608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1608[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1608[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1608 || yy2arr1608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1608[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1608[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1608 || yy2arr1608 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1611 := z.DecBinary()
	_ = yym1611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1612 := r.ContainerType()
		if yyct1612 == codecSelferValueTypeMap1234 {
			yyl1612 := r.ReadMapStart()
			if yyl1612 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1612, d)
			}
		} else if yyct1612 == codecSelferValueTypeArray1234 {
			yyl1612 := r.ReadArrayStart()
			if yyl1612 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1612, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1613Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1613Slc
	var yyhl1613 bool = l >= 0
	for yyj1613 := 0; ; yyj1613++ {
		if yyhl1613 {
			if yyj1613 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1613Slc = r.DecodeBytes(yys1613Slc, true, true)
		yys1613 := string(yys1613Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1613 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1613)
		} // end switch yys1613
	} // end for yyj1613
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1616 int
	var yyb1616 bool
	var yyhl1616 bool = l >= 0
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1616++
	if yyhl1616 {
		yyb1616 = yyj1616 > l
	} else {
		yyb1616 = r.CheckBreak()
	}
	if yyb1616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1616++
		if yyhl1616 {
			yyb1616 = yyj1616 > l
		} else {
			yyb1616 = r.CheckBreak()
		}
		if yyb1616 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1616-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1619 := z.EncBinary()
	_ = yym1619
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1620 := z.DecBinary()
	_ = yym1620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1621 := z.EncBinary()
		_ = yym1621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1622 := !z.EncBinary()
			yy2arr1622 := z.EncBasicHandle().StructToArray
			var yyq1622 [2]bool
			_, _, _ = yysep1622, yyq1622, yy2arr1622
			const yyr1622 bool = false
			yyq1622[0] = x.Reason != ""
			yyq1622[1] = x.Message != ""
			var yynn1622 int
			if yyr1622 || yy2arr1622 {
				r.EncodeArrayStart(2)
			} else {
				yynn1622 = 0
				for _, b := range yyq1622 {
					if b {
						yynn1622++
					}
				}
				r.EncodeMapStart(yynn1622)
				yynn1622 = 0
			}
			if yyr1622 || yy2arr1622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1622[0] {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1622[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1622 || yy2arr1622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1622[1] {
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1622[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1622 || yy2arr1622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1629 := z.DecBinary()
	_ = yym1629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1630 := r.ContainerType()
		if yyct1630 == codecSelferValueTypeMap1234 {
			yyl1630 := r.ReadMapStart()
			if yyl1630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1630, d)
			}
		} else if yyct1630 == codecSelferValueTypeArray1234 {
			yyl1630 := r.ReadArrayStart()
			if yyl1630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1631Slc
	var yyhl1631 bool = l >= 0
	for yyj1631 := 0; ; yyj1631++ {
		if yyhl1631 {
			if yyj1631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1631Slc = r.DecodeBytes(yys1631Slc, true, true)
		yys1631 := string(yys1631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1631 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1631)
		} // end switch yys1631
	} // end for yyj1631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1634 int
	var yyb1634 bool
	var yyhl1634 bool = l >= 0
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1634++
		if yyhl1634 {
			yyb1634 = yyj1634 > l
		} else {
			yyb1634 = r.CheckBreak()
		}
		if yyb1634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1637 := z.EncBinary()
		_ = yym1637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1638 := !z.EncBinary()
			yy2arr1638 := z.EncBasicHandle().StructToArray
			var yyq1638 [1]bool
			_, _, _ = yysep1638, yyq1638, yy2arr1638
			const yyr1638 bool = false
			yyq1638[0] = true
			var yynn1638 int
			if yyr1638 || yy2arr1638 {
				r.EncodeArrayStart(1)
			} else {
				yynn1638 = 0
				for _, b := range yyq1638 {
					if b {
						yynn1638++
					}
				}
				r.EncodeMapStart(yynn1638)
				yynn1638 = 0
			}
			if yyr1638 || yy2arr1638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1638[0] {
					yy1640 := &x.StartedAt
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1640) {
					} else if yym1641 {
						z.EncBinaryMarshal(yy1640)
					} else if !yym1641 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1640)
					} else {
						z.EncFallback(yy1640)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1638[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1642 := &x.StartedAt
					yym1643 := z.EncBinary()
					_ = yym1643
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1642) {
					} else if yym1643 {
						z.EncBinaryMarshal(yy1642)
					} else if !yym1643 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1642)
					} else {
						z.EncFallback(yy1642)
					}
				}
			}
			if yyr1638 || yy2arr1638 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1644 := z.DecBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1645 := r.ContainerType()
		if yyct1645 == codecSelferValueTypeMap1234 {
			yyl1645 := r.ReadMapStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1645, d)
			}
		} else if yyct1645 == codecSelferValueTypeArray1234 {
			yyl1645 := r.ReadArrayStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1646Slc
	var yyhl1646 bool = l >= 0
	for yyj1646 := 0; ; yyj1646++ {
		if yyhl1646 {
			if yyj1646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1646Slc = r.DecodeBytes(yys1646Slc, true, true)
		yys1646 := string(yys1646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1646 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1647 := &x.StartedAt
				yym1648 := z.DecBinary()
				_ = yym1648
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1647) {
				} else if yym1648 {
					z.DecBinaryUnmarshal(yyv1647)
				} else if !yym1648 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1647)
				} else {
					z.DecFallback(yyv1647, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1646)
		} // end switch yys1646
	} // end for yyj1646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1649 int
	var yyb1649 bool
	var yyhl1649 bool = l >= 0
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1650 := &x.StartedAt
		yym1651 := z.DecBinary()
		_ = yym1651
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1650) {
		} else if yym1651 {
			z.DecBinaryUnmarshal(yyv1650)
		} else if !yym1651 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1650)
		} else {
			z.DecFallback(yyv1650, false)
		}
	}
	for {
		yyj1649++
		if yyhl1649 {
			yyb1649 = yyj1649 > l
		} else {
			yyb1649 = r.CheckBreak()
		}
		if yyb1649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [7]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			yyq1653[1] = x.Signal != 0
			yyq1653[2] = x.Reason != ""
			yyq1653[3] = x.Message != ""
			yyq1653[4] = true
			yyq1653[5] = true
			yyq1653[6] = x.ContainerID != ""
			var yynn1653 int
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(7)
			} else {
				yynn1653 = 1
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
				yynn1653 = 0
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1655 := z.EncBinary()
				_ = yym1655
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1656 := z.EncBinary()
				_ = yym1656
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[1] {
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[2] {
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[3] {
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[4] {
					yy1667 := &x.StartedAt
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1667) {
					} else if yym1668 {
						z.EncBinaryMarshal(yy1667)
					} else if !yym1668 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1667)
					} else {
						z.EncFallback(yy1667)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1669 := &x.StartedAt
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1669) {
					} else if yym1670 {
						z.EncBinaryMarshal(yy1669)
					} else if !yym1670 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1669)
					} else {
						z.EncFallback(yy1669)
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[5] {
					yy1672 := &x.FinishedAt
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1672) {
					} else if yym1673 {
						z.EncBinaryMarshal(yy1672)
					} else if !yym1673 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1672)
					} else {
						z.EncFallback(yy1672)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1674 := &x.FinishedAt
					yym1675 := z.EncBinary()
					_ = yym1675
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1674) {
					} else if yym1675 {
						z.EncBinaryMarshal(yy1674)
					} else if !yym1675 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1674)
					} else {
						z.EncFallback(yy1674)
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1653[6] {
					yym1677 := z.EncBinary()
					_ = yym1677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1678 := z.EncBinary()
					_ = yym1678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1679 := z.DecBinary()
	_ = yym1679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1680 := r.ContainerType()
		if yyct1680 == codecSelferValueTypeMap1234 {
			yyl1680 := r.ReadMapStart()
			if yyl1680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1680, d)
			}
		} else if yyct1680 == codecSelferValueTypeArray1234 {
			yyl1680 := r.ReadArrayStart()
			if yyl1680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1681Slc
	var yyhl1681 bool = l >= 0
	for yyj1681 := 0; ; yyj1681++ {
		if yyhl1681 {
			if yyj1681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1681Slc = r.DecodeBytes(yys1681Slc, true, true)
		yys1681 := string(yys1681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1681 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1686 := &x.StartedAt
				yym1687 := z.DecBinary()
				_ = yym1687
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1686) {
				} else if yym1687 {
					z.DecBinaryUnmarshal(yyv1686)
				} else if !yym1687 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1686)
				} else {
					z.DecFallback(yyv1686, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1688 := &x.FinishedAt
				yym1689 := z.DecBinary()
				_ = yym1689
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1688) {
				} else if yym1689 {
					z.DecBinaryUnmarshal(yyv1688)
				} else if !yym1689 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1688)
				} else {
					z.DecFallback(yyv1688, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1681)
		} // end switch yys1681
	} // end for yyj1681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1691 int
	var yyb1691 bool
	var yyhl1691 bool = l >= 0
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1696 := &x.StartedAt
		yym1697 := z.DecBinary()
		_ = yym1697
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1696) {
		} else if yym1697 {
			z.DecBinaryUnmarshal(yyv1696)
		} else if !yym1697 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1696)
		} else {
			z.DecFallback(yyv1696, false)
		}
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1698 := &x.FinishedAt
		yym1699 := z.DecBinary()
		_ = yym1699
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1698) {
		} else if yym1699 {
			z.DecBinaryUnmarshal(yyv1698)
		} else if !yym1699 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1698)
		} else {
			z.DecFallback(yyv1698, false)
		}
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1691++
		if yyhl1691 {
			yyb1691 = yyj1691 > l
		} else {
			yyb1691 = r.CheckBreak()
		}
		if yyb1691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1701 := z.EncBinary()
		_ = yym1701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1702 := !z.EncBinary()
			yy2arr1702 := z.EncBasicHandle().StructToArray
			var yyq1702 [3]bool
			_, _, _ = yysep1702, yyq1702, yy2arr1702
			const yyr1702 bool = false
			yyq1702[0] = x.Waiting != nil
			yyq1702[1] = x.Running != nil
			yyq1702[2] = x.Terminated != nil
			var yynn1702 int
			if yyr1702 || yy2arr1702 {
				r.EncodeArrayStart(3)
			} else {
				yynn1702 = 0
				for _, b := range yyq1702 {
					if b {
						yynn1702++
					}
				}
				r.EncodeMapStart(yynn1702)
				yynn1702 = 0
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1706 := z.DecBinary()
	_ = yym1706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1707 := r.ContainerType()
		if yyct1707 == codecSelferValueTypeMap1234 {
			yyl1707 := r.ReadMapStart()
			if yyl1707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1707, d)
			}
		} else if yyct1707 == codecSelferValueTypeArray1234 {
			yyl1707 := r.ReadArrayStart()
			if yyl1707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1708Slc
	var yyhl1708 bool = l >= 0
	for yyj1708 := 0; ; yyj1708++ {
		if yyhl1708 {
			if yyj1708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1708Slc = r.DecodeBytes(yys1708Slc, true, true)
		yys1708 := string(yys1708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1708 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1708)
		} // end switch yys1708
	} // end for yyj1708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1712 int
	var yyb1712 bool
	var yyhl1712 bool = l >= 0
	yyj1712++
	if yyhl1712 {
		yyb1712 = yyj1712 > l
	} else {
		yyb1712 = r.CheckBreak()
	}
	if yyb1712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1712++
	if yyhl1712 {
		yyb1712 = yyj1712 > l
	} else {
		yyb1712 = r.CheckBreak()
	}
	if yyb1712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1712++
	if yyhl1712 {
		yyb1712 = yyj1712 > l
	} else {
		yyb1712 = r.CheckBreak()
	}
	if yyb1712 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1712++
		if yyhl1712 {
			yyb1712 = yyj1712 > l
		} else {
			yyb1712 = r.CheckBreak()
		}
		if yyb1712 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1712-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1716 := z.EncBinary()
		_ = yym1716
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1717 := !z.EncBinary()
			yy2arr1717 := z.EncBasicHandle().StructToArray
			var yyq1717 [8]bool
			_, _, _ = yysep1717, yyq1717, yy2arr1717
			const yyr1717 bool = false
			yyq1717[1] = true
			yyq1717[2] = true
			yyq1717[7] = x.ContainerID != ""
			var yynn1717 int
			if yyr1717 || yy2arr1717 {
				r.EncodeArrayStart(8)
			} else {
				yynn1717 = 5
				for _, b := range yyq1717 {
					if b {
						yynn1717++
					}
				}
				r.EncodeMapStart(yynn1717)
				yynn1717 = 0
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1719 := z.EncBinary()
				_ = yym1719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1720 := z.EncBinary()
				_ = yym1720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[1] {
					yy1722 := &x.State
					yy1722.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1717[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1723 := &x.State
					yy1723.CodecEncodeSelf(e)
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[2] {
					yy1725 := &x.LastTerminationState
					yy1725.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1717[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1726 := &x.LastTerminationState
					yy1726.CodecEncodeSelf(e)
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1728 := z.EncBinary()
				_ = yym1728
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1729 := z.EncBinary()
				_ = yym1729
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1731 := z.EncBinary()
				_ = yym1731
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1732 := z.EncBinary()
				_ = yym1732
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1734 := z.EncBinary()
				_ = yym1734
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1735 := z.EncBinary()
				_ = yym1735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1737 := z.EncBinary()
				_ = yym1737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1738 := z.EncBinary()
				_ = yym1738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[7] {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1717[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1742 := z.DecBinary()
	_ = yym1742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1743 := r.ContainerType()
		if yyct1743 == codecSelferValueTypeMap1234 {
			yyl1743 := r.ReadMapStart()
			if yyl1743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1743, d)
			}
		} else if yyct1743 == codecSelferValueTypeArray1234 {
			yyl1743 := r.ReadArrayStart()
			if yyl1743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1744Slc
	var yyhl1744 bool = l >= 0
	for yyj1744 := 0; ; yyj1744++ {
		if yyhl1744 {
			if yyj1744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1744Slc = r.DecodeBytes(yys1744Slc, true, true)
		yys1744 := string(yys1744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1744 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1746 := &x.State
				yyv1746.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1747 := &x.LastTerminationState
				yyv1747.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1744)
		} // end switch yys1744
	} // end for yyj1744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1753 int
	var yyb1753 bool
	var yyhl1753 bool = l >= 0
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1755 := &x.State
		yyv1755.CodecDecodeSelf(d)
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1756 := &x.LastTerminationState
		yyv1756.CodecDecodeSelf(d)
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1753++
	if yyhl1753 {
		yyb1753 = yyj1753 > l
	} else {
		yyb1753 = r.CheckBreak()
	}
	if yyb1753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1753++
		if yyhl1753 {
			yyb1753 = yyj1753 > l
		} else {
			yyb1753 = r.CheckBreak()
		}
		if yyb1753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1762 := z.EncBinary()
	_ = yym1762
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1763 := z.DecBinary()
	_ = yym1763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1764 := z.EncBinary()
	_ = yym1764
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1765 := z.DecBinary()
	_ = yym1765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1766 := z.EncBinary()
		_ = yym1766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1767 := !z.EncBinary()
			yy2arr1767 := z.EncBasicHandle().StructToArray
			var yyq1767 [6]bool
			_, _, _ = yysep1767, yyq1767, yy2arr1767
			const yyr1767 bool = false
			yyq1767[2] = true
			yyq1767[3] = true
			yyq1767[4] = x.Reason != ""
			yyq1767[5] = x.Message != ""
			var yynn1767 int
			if yyr1767 || yy2arr1767 {
				r.EncodeArrayStart(6)
			} else {
				yynn1767 = 2
				for _, b := range yyq1767 {
					if b {
						yynn1767++
					}
				}
				r.EncodeMapStart(yynn1767)
				yynn1767 = 0
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1767[2] {
					yy1771 := &x.LastProbeTime
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1771) {
					} else if yym1772 {
						z.EncBinaryMarshal(yy1771)
					} else if !yym1772 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1771)
					} else {
						z.EncFallback(yy1771)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1767[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1773 := &x.LastProbeTime
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1773) {
					} else if yym1774 {
						z.EncBinaryMarshal(yy1773)
					} else if !yym1774 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1773)
					} else {
						z.EncFallback(yy1773)
					}
				}
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1767[3] {
					yy1776 := &x.LastTransitionTime
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1776) {
					} else if yym1777 {
						z.EncBinaryMarshal(yy1776)
					} else if !yym1777 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1776)
					} else {
						z.EncFallback(yy1776)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1767[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1778 := &x.LastTransitionTime
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1778) {
					} else if yym1779 {
						z.EncBinaryMarshal(yy1778)
					} else if !yym1779 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1778)
					} else {
						z.EncFallback(yy1778)
					}
				}
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1767[4] {
					yym1781 := z.EncBinary()
					_ = yym1781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1767[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1782 := z.EncBinary()
					_ = yym1782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1767[5] {
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1767[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1785 := z.EncBinary()
					_ = yym1785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1767 || yy2arr1767 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1786 := z.DecBinary()
	_ = yym1786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1787 := r.ContainerType()
		if yyct1787 == codecSelferValueTypeMap1234 {
			yyl1787 := r.ReadMapStart()
			if yyl1787 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1787, d)
			}
		} else if yyct1787 == codecSelferValueTypeArray1234 {
			yyl1787 := r.ReadArrayStart()
			if yyl1787 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1787, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1788Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1788Slc
	var yyhl1788 bool = l >= 0
	for yyj1788 := 0; ; yyj1788++ {
		if yyhl1788 {
			if yyj1788 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1788Slc = r.DecodeBytes(yys1788Slc, true, true)
		yys1788 := string(yys1788Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1788 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1791 := &x.LastProbeTime
				yym1792 := z.DecBinary()
				_ = yym1792
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1791) {
				} else if yym1792 {
					z.DecBinaryUnmarshal(yyv1791)
				} else if !yym1792 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1791)
				} else {
					z.DecFallback(yyv1791, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1793 := &x.LastTransitionTime
				yym1794 := z.DecBinary()
				_ = yym1794
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1793) {
				} else if yym1794 {
					z.DecBinaryUnmarshal(yyv1793)
				} else if !yym1794 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1793)
				} else {
					z.DecFallback(yyv1793, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1788)
		} // end switch yys1788
	} // end for yyj1788
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1797 int
	var yyb1797 bool
	var yyhl1797 bool = l >= 0
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1800 := &x.LastProbeTime
		yym1801 := z.DecBinary()
		_ = yym1801
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1800) {
		} else if yym1801 {
			z.DecBinaryUnmarshal(yyv1800)
		} else if !yym1801 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1800)
		} else {
			z.DecFallback(yyv1800, false)
		}
	}
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1802 := &x.LastTransitionTime
		yym1803 := z.DecBinary()
		_ = yym1803
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1802) {
		} else if yym1803 {
			z.DecBinaryUnmarshal(yyv1802)
		} else if !yym1803 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1802)
		} else {
			z.DecFallback(yyv1802, false)
		}
	}
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1797++
	if yyhl1797 {
		yyb1797 = yyj1797 > l
	} else {
		yyb1797 = r.CheckBreak()
	}
	if yyb1797 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1797++
		if yyhl1797 {
			yyb1797 = yyj1797 > l
		} else {
			yyb1797 = r.CheckBreak()
		}
		if yyb1797 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1797-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1806 := z.EncBinary()
	_ = yym1806
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1807 := z.DecBinary()
	_ = yym1807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1808 := z.EncBinary()
		_ = yym1808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1809 := !z.EncBinary()
			yy2arr1809 := z.EncBasicHandle().StructToArray
			var yyq1809 [4]bool
			_, _, _ = yysep1809, yyq1809, yy2arr1809
			const yyr1809 bool = false
			yyq1809[0] = x.Kind != ""
			yyq1809[1] = x.APIVersion != ""
			yyq1809[2] = true
			var yynn1809 int
			if yyr1809 || yy2arr1809 {
				r.EncodeArrayStart(4)
			} else {
				yynn1809 = 1
				for _, b := range yyq1809 {
					if b {
						yynn1809++
					}
				}
				r.EncodeMapStart(yynn1809)
				yynn1809 = 0
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[0] {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1809[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1812 := z.EncBinary()
					_ = yym1812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[1] {
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1809[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1809[2] {
					yy1817 := &x.ListMeta
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1817) {
					} else {
						z.EncFallback(yy1817)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1809[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1819 := &x.ListMeta
					yym1820 := z.EncBinary()
					_ = yym1820
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1819) {
					} else {
						z.EncFallback(yy1819)
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1823 := z.EncBinary()
					_ = yym1823
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1809 || yy2arr1809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1824 := z.DecBinary()
	_ = yym1824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1825 := r.ContainerType()
		if yyct1825 == codecSelferValueTypeMap1234 {
			yyl1825 := r.ReadMapStart()
			if yyl1825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1825, d)
			}
		} else if yyct1825 == codecSelferValueTypeArray1234 {
			yyl1825 := r.ReadArrayStart()
			if yyl1825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1826Slc
	var yyhl1826 bool = l >= 0
	for yyj1826 := 0; ; yyj1826++ {
		if yyhl1826 {
			if yyj1826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1826Slc = r.DecodeBytes(yys1826Slc, true, true)
		yys1826 := string(yys1826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1826 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1829 := &x.ListMeta
				yym1830 := z.DecBinary()
				_ = yym1830
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1829) {
				} else {
					z.DecFallback(yyv1829, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1831 := &x.Items
				yym1832 := z.DecBinary()
				_ = yym1832
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1831), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1826)
		} // end switch yys1826
	} // end for yyj1826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1833 int
	var yyb1833 bool
	var yyhl1833 bool = l >= 0
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1836 := &x.ListMeta
		yym1837 := z.DecBinary()
		_ = yym1837
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1836) {
		} else {
			z.DecFallback(yyv1836, false)
		}
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1838 := &x.Items
		yym1839 := z.DecBinary()
		_ = yym1839
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1838), d)
		}
	}
	for {
		yyj1833++
		if yyhl1833 {
			yyb1833 = yyj1833 > l
		} else {
			yyb1833 = r.CheckBreak()
		}
		if yyb1833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1840 := z.EncBinary()
	_ = yym1840
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1841 := z.DecBinary()
	_ = yym1841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1842 := z.EncBinary()
		_ = yym1842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1843 := !z.EncBinary()
			yy2arr1843 := z.EncBasicHandle().StructToArray
			var yyq1843 [1]bool
			_, _, _ = yysep1843, yyq1843, yy2arr1843
			const yyr1843 bool = false
			var yynn1843 int
			if yyr1843 || yy2arr1843 {
				r.EncodeArrayStart(1)
			} else {
				yynn1843 = 1
				for _, b := range yyq1843 {
					if b {
						yynn1843++
					}
				}
				r.EncodeMapStart(yynn1843)
				yynn1843 = 0
			}
			if yyr1843 || yy2arr1843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1843 || yy2arr1843 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1847 := z.DecBinary()
	_ = yym1847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1848 := r.ContainerType()
		if yyct1848 == codecSelferValueTypeMap1234 {
			yyl1848 := r.ReadMapStart()
			if yyl1848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1848, d)
			}
		} else if yyct1848 == codecSelferValueTypeArray1234 {
			yyl1848 := r.ReadArrayStart()
			if yyl1848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1849Slc
	var yyhl1849 bool = l >= 0
	for yyj1849 := 0; ; yyj1849++ {
		if yyhl1849 {
			if yyj1849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1849Slc = r.DecodeBytes(yys1849Slc, true, true)
		yys1849 := string(yys1849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1849 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1850 := &x.NodeSelectorTerms
				yym1851 := z.DecBinary()
				_ = yym1851
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1850), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1849)
		} // end switch yys1849
	} // end for yyj1849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1852 int
	var yyb1852 bool
	var yyhl1852 bool = l >= 0
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1853 := &x.NodeSelectorTerms
		yym1854 := z.DecBinary()
		_ = yym1854
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1853), d)
		}
	}
	for {
		yyj1852++
		if yyhl1852 {
			yyb1852 = yyj1852 > l
		} else {
			yyb1852 = r.CheckBreak()
		}
		if yyb1852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1855 := z.EncBinary()
		_ = yym1855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1856 := !z.EncBinary()
			yy2arr1856 := z.EncBasicHandle().StructToArray
			var yyq1856 [1]bool
			_, _, _ = yysep1856, yyq1856, yy2arr1856
			const yyr1856 bool = false
			var yynn1856 int
			if yyr1856 || yy2arr1856 {
				r.EncodeArrayStart(1)
			} else {
				yynn1856 = 1
				for _, b := range yyq1856 {
					if b {
						yynn1856++
					}
				}
				r.EncodeMapStart(yynn1856)
				yynn1856 = 0
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1856 || yy2arr1856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1860 := z.DecBinary()
	_ = yym1860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1861 := r.ContainerType()
		if yyct1861 == codecSelferValueTypeMap1234 {
			yyl1861 := r.ReadMapStart()
			if yyl1861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1861, d)
			}
		} else if yyct1861 == codecSelferValueTypeArray1234 {
			yyl1861 := r.ReadArrayStart()
			if yyl1861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1862Slc
	var yyhl1862 bool = l >= 0
	for yyj1862 := 0; ; yyj1862++ {
		if yyhl1862 {
			if yyj1862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1862Slc = r.DecodeBytes(yys1862Slc, true, true)
		yys1862 := string(yys1862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1862 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1863 := &x.MatchExpressions
				yym1864 := z.DecBinary()
				_ = yym1864
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1863), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1862)
		} // end switch yys1862
	} // end for yyj1862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1865 int
	var yyb1865 bool
	var yyhl1865 bool = l >= 0
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1866 := &x.MatchExpressions
		yym1867 := z.DecBinary()
		_ = yym1867
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1866), d)
		}
	}
	for {
		yyj1865++
		if yyhl1865 {
			yyb1865 = yyj1865 > l
		} else {
			yyb1865 = r.CheckBreak()
		}
		if yyb1865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1868 := z.EncBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1869 := !z.EncBinary()
			yy2arr1869 := z.EncBasicHandle().StructToArray
			var yyq1869 [3]bool
			_, _, _ = yysep1869, yyq1869, yy2arr1869
			const yyr1869 bool = false
			yyq1869[2] = len(x.Values) != 0
			var yynn1869 int
			if yyr1869 || yy2arr1869 {
				r.EncodeArrayStart(3)
			} else {
				yynn1869 = 2
				for _, b := range yyq1869 {
					if b {
						yynn1869++
					}
				}
				r.EncodeMapStart(yynn1869)
				yynn1869 = 0
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1871 := z.EncBinary()
				_ = yym1871
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1872 := z.EncBinary()
				_ = yym1872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1869[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1875 := z.EncBinary()
						_ = yym1875
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1869[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1869 || yy2arr1869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1877 := z.DecBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1878 := r.ContainerType()
		if yyct1878 == codecSelferValueTypeMap1234 {
			yyl1878 := r.ReadMapStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1878, d)
			}
		} else if yyct1878 == codecSelferValueTypeArray1234 {
			yyl1878 := r.ReadArrayStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1879Slc
	var yyhl1879 bool = l >= 0
	for yyj1879 := 0; ; yyj1879++ {
		if yyhl1879 {
			if yyj1879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1879Slc = r.DecodeBytes(yys1879Slc, true, true)
		yys1879 := string(yys1879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1879 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1882 := &x.Values
				yym1883 := z.DecBinary()
				_ = yym1883
				if false {
				} else {
					z.F.DecSliceStringX(yyv1882, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1879)
		} // end switch yys1879
	} // end for yyj1879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1887 := &x.Values
		yym1888 := z.DecBinary()
		_ = yym1888
		if false {
		} else {
			z.F.DecSliceStringX(yyv1887, false, d)
		}
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1889 := z.EncBinary()
	_ = yym1889
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1890 := z.DecBinary()
	_ = yym1890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1891 := z.EncBinary()
		_ = yym1891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1892 := !z.EncBinary()
			yy2arr1892 := z.EncBasicHandle().StructToArray
			var yyq1892 [3]bool
			_, _, _ = yysep1892, yyq1892, yy2arr1892
			const yyr1892 bool = false
			yyq1892[0] = x.NodeAffinity != nil
			yyq1892[1] = x.PodAffinity != nil
			yyq1892[2] = x.PodAntiAffinity != nil
			var yynn1892 int
			if yyr1892 || yy2arr1892 {
				r.EncodeArrayStart(3)
			} else {
				yynn1892 = 0
				for _, b := range yyq1892 {
					if b {
						yynn1892++
					}
				}
				r.EncodeMapStart(yynn1892)
				yynn1892 = 0
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1892[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1892[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1892[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1892[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1892[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1892[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1896 := z.DecBinary()
	_ = yym1896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1897 := r.ContainerType()
		if yyct1897 == codecSelferValueTypeMap1234 {
			yyl1897 := r.ReadMapStart()
			if yyl1897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1897, d)
			}
		} else if yyct1897 == codecSelferValueTypeArray1234 {
			yyl1897 := r.ReadArrayStart()
			if yyl1897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1898Slc
	var yyhl1898 bool = l >= 0
	for yyj1898 := 0; ; yyj1898++ {
		if yyhl1898 {
			if yyj1898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1898Slc = r.DecodeBytes(yys1898Slc, true, true)
		yys1898 := string(yys1898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1898 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1898)
		} // end switch yys1898
	} // end for yyj1898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1902 int
	var yyb1902 bool
	var yyhl1902 bool = l >= 0
	yyj1902++
	if yyhl1902 {
		yyb1902 = yyj1902 > l
	} else {
		yyb1902 = r.CheckBreak()
	}
	if yyb1902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1902++
	if yyhl1902 {
		yyb1902 = yyj1902 > l
	} else {
		yyb1902 = r.CheckBreak()
	}
	if yyb1902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1902++
	if yyhl1902 {
		yyb1902 = yyj1902 > l
	} else {
		yyb1902 = r.CheckBreak()
	}
	if yyb1902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1902++
		if yyhl1902 {
			yyb1902 = yyj1902 > l
		} else {
			yyb1902 = r.CheckBreak()
		}
		if yyb1902 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1902-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1906 := z.EncBinary()
		_ = yym1906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1907 := !z.EncBinary()
			yy2arr1907 := z.EncBasicHandle().StructToArray
			var yyq1907 [2]bool
			_, _, _ = yysep1907, yyq1907, yy2arr1907
			const yyr1907 bool = false
			yyq1907[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1907[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1907 int
			if yyr1907 || yy2arr1907 {
				r.EncodeArrayStart(2)
			} else {
				yynn1907 = 0
				for _, b := range yyq1907 {
					if b {
						yynn1907++
					}
				}
				r.EncodeMapStart(yynn1907)
				yynn1907 = 0
			}
			if yyr1907 || yy2arr1907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1907[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1909 := z.EncBinary()
						_ = yym1909
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1907[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1910 := z.EncBinary()
						_ = yym1910
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1907 || yy2arr1907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1907[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1912 := z.EncBinary()
						_ = yym1912
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1907[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1913 := z.EncBinary()
						_ = yym1913
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1907 || yy2arr1907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1914 := z.DecBinary()
	_ = yym1914
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1915 := r.ContainerType()
		if yyct1915 == codecSelferValueTypeMap1234 {
			yyl1915 := r.ReadMapStart()
			if yyl1915 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1915, d)
			}
		} else if yyct1915 == codecSelferValueTypeArray1234 {
			yyl1915 := r.ReadArrayStart()
			if yyl1915 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1915, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1916Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1916Slc
	var yyhl1916 bool = l >= 0
	for yyj1916 := 0; ; yyj1916++ {
		if yyhl1916 {
			if yyj1916 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1916Slc = r.DecodeBytes(yys1916Slc, true, true)
		yys1916 := string(yys1916Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1916 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1917 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1918 := z.DecBinary()
				_ = yym1918
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1917), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1919 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1920 := z.DecBinary()
				_ = yym1920
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1919), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1916)
		} // end switch yys1916
	} // end for yyj1916
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1921 int
	var yyb1921 bool
	var yyhl1921 bool = l >= 0
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1922 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1923 := z.DecBinary()
		_ = yym1923
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1922), d)
		}
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1924 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1925 := z.DecBinary()
		_ = yym1925
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1924), d)
		}
	}
	for {
		yyj1921++
		if yyhl1921 {
			yyb1921 = yyj1921 > l
		} else {
			yyb1921 = r.CheckBreak()
		}
		if yyb1921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1926 := z.EncBinary()
		_ = yym1926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1927 := !z.EncBinary()
			yy2arr1927 := z.EncBasicHandle().StructToArray
			var yyq1927 [2]bool
			_, _, _ = yysep1927, yyq1927, yy2arr1927
			const yyr1927 bool = false
			yyq1927[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1927[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1927 int
			if yyr1927 || yy2arr1927 {
				r.EncodeArrayStart(2)
			} else {
				yynn1927 = 0
				for _, b := range yyq1927 {
					if b {
						yynn1927++
					}
				}
				r.EncodeMapStart(yynn1927)
				yynn1927 = 0
			}
			if yyr1927 || yy2arr1927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1927[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1927[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1930 := z.EncBinary()
						_ = yym1930
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1927 || yy2arr1927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1927[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1932 := z.EncBinary()
						_ = yym1932
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1927[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1933 := z.EncBinary()
						_ = yym1933
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1927 || yy2arr1927 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1934 := z.DecBinary()
	_ = yym1934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1935 := r.ContainerType()
		if yyct1935 == codecSelferValueTypeMap1234 {
			yyl1935 := r.ReadMapStart()
			if yyl1935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1935, d)
			}
		} else if yyct1935 == codecSelferValueTypeArray1234 {
			yyl1935 := r.ReadArrayStart()
			if yyl1935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1936Slc
	var yyhl1936 bool = l >= 0
	for yyj1936 := 0; ; yyj1936++ {
		if yyhl1936 {
			if yyj1936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1936Slc = r.DecodeBytes(yys1936Slc, true, true)
		yys1936 := string(yys1936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1936 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1937 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1938 := z.DecBinary()
				_ = yym1938
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1937), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1939 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1940 := z.DecBinary()
				_ = yym1940
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1939), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1936)
		} // end switch yys1936
	} // end for yyj1936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1941 int
	var yyb1941 bool
	var yyhl1941 bool = l >= 0
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1942 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1943 := z.DecBinary()
		_ = yym1943
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1942), d)
		}
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1944 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1945 := z.DecBinary()
		_ = yym1945
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1944), d)
		}
	}
	for {
		yyj1941++
		if yyhl1941 {
			yyb1941 = yyj1941 > l
		} else {
			yyb1941 = r.CheckBreak()
		}
		if yyb1941 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1941-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1946 := z.EncBinary()
		_ = yym1946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1947 := !z.EncBinary()
			yy2arr1947 := z.EncBasicHandle().StructToArray
			var yyq1947 [2]bool
			_, _, _ = yysep1947, yyq1947, yy2arr1947
			const yyr1947 bool = false
			var yynn1947 int
			if yyr1947 || yy2arr1947 {
				r.EncodeArrayStart(2)
			} else {
				yynn1947 = 2
				for _, b := range yyq1947 {
					if b {
						yynn1947++
					}
				}
				r.EncodeMapStart(yynn1947)
				yynn1947 = 0
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1949 := z.EncBinary()
				_ = yym1949
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1950 := z.EncBinary()
				_ = yym1950
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1952 := &x.PodAffinityTerm
				yy1952.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1953 := &x.PodAffinityTerm
				yy1953.CodecEncodeSelf(e)
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1954 := z.DecBinary()
	_ = yym1954
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1955 := r.ContainerType()
		if yyct1955 == codecSelferValueTypeMap1234 {
			yyl1955 := r.ReadMapStart()
			if yyl1955 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1955, d)
			}
		} else if yyct1955 == codecSelferValueTypeArray1234 {
			yyl1955 := r.ReadArrayStart()
			if yyl1955 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1955, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1956Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1956Slc
	var yyhl1956 bool = l >= 0
	for yyj1956 := 0; ; yyj1956++ {
		if yyhl1956 {
			if yyj1956 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1956Slc = r.DecodeBytes(yys1956Slc, true, true)
		yys1956 := string(yys1956Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1956 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1958 := &x.PodAffinityTerm
				yyv1958.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1956)
		} // end switch yys1956
	} // end for yyj1956
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1959 int
	var yyb1959 bool
	var yyhl1959 bool = l >= 0
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1961 := &x.PodAffinityTerm
		yyv1961.CodecDecodeSelf(d)
	}
	for {
		yyj1959++
		if yyhl1959 {
			yyb1959 = yyj1959 > l
		} else {
			yyb1959 = r.CheckBreak()
		}
		if yyb1959 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1959-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1962 := z.EncBinary()
		_ = yym1962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1963 := !z.EncBinary()
			yy2arr1963 := z.EncBasicHandle().StructToArray
			var yyq1963 [3]bool
			_, _, _ = yysep1963, yyq1963, yy2arr1963
			const yyr1963 bool = false
			yyq1963[0] = x.LabelSelector != nil
			yyq1963[2] = x.TopologyKey != ""
			var yynn1963 int
			if yyr1963 || yy2arr1963 {
				r.EncodeArrayStart(3)
			} else {
				yynn1963 = 1
				for _, b := range yyq1963 {
					if b {
						yynn1963++
					}
				}
				r.EncodeMapStart(yynn1963)
				yynn1963 = 0
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1965 := z.EncBinary()
						_ = yym1965
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1966 := z.EncBinary()
						_ = yym1966
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1968 := z.EncBinary()
					_ = yym1968
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1969 := z.EncBinary()
					_ = yym1969
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[2] {
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1973 := z.DecBinary()
	_ = yym1973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1974 := r.ContainerType()
		if yyct1974 == codecSelferValueTypeMap1234 {
			yyl1974 := r.ReadMapStart()
			if yyl1974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1974, d)
			}
		} else if yyct1974 == codecSelferValueTypeArray1234 {
			yyl1974 := r.ReadArrayStart()
			if yyl1974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1975Slc
	var yyhl1975 bool = l >= 0
	for yyj1975 := 0; ; yyj1975++ {
		if yyhl1975 {
			if yyj1975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1975Slc = r.DecodeBytes(yys1975Slc, true, true)
		yys1975 := string(yys1975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1975 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1977 := z.DecBinary()
				_ = yym1977
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1978 := &x.Namespaces
				yym1979 := z.DecBinary()
				_ = yym1979
				if false {
				} else {
					z.F.DecSliceStringX(yyv1978, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1975)
		} // end switch yys1975
	} // end for yyj1975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1981 int
	var yyb1981 bool
	var yyhl1981 bool = l >= 0
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1983 := z.DecBinary()
		_ = yym1983
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1984 := &x.Namespaces
		yym1985 := z.DecBinary()
		_ = yym1985
		if false {
		} else {
			z.F.DecSliceStringX(yyv1984, false, d)
		}
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1981++
		if yyhl1981 {
			yyb1981 = yyj1981 > l
		} else {
			yyb1981 = r.CheckBreak()
		}
		if yyb1981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1987 := z.EncBinary()
		_ = yym1987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1988 := !z.EncBinary()
			yy2arr1988 := z.EncBasicHandle().StructToArray
			var yyq1988 [2]bool
			_, _, _ = yysep1988, yyq1988, yy2arr1988
			const yyr1988 bool = false
			yyq1988[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1988[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1988 int
			if yyr1988 || yy2arr1988 {
				r.EncodeArrayStart(2)
			} else {
				yynn1988 = 0
				for _, b := range yyq1988 {
					if b {
						yynn1988++
					}
				}
				r.EncodeMapStart(yynn1988)
				yynn1988 = 0
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1991 := z.EncBinary()
						_ = yym1991
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1992 := z.EncBinary()
						_ = yym1992
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1993 := z.DecBinary()
	_ = yym1993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1994 := r.ContainerType()
		if yyct1994 == codecSelferValueTypeMap1234 {
			yyl1994 := r.ReadMapStart()
			if yyl1994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1994, d)
			}
		} else if yyct1994 == codecSelferValueTypeArray1234 {
			yyl1994 := r.ReadArrayStart()
			if yyl1994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1995Slc
	var yyhl1995 bool = l >= 0
	for yyj1995 := 0; ; yyj1995++ {
		if yyhl1995 {
			if yyj1995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1995Slc = r.DecodeBytes(yys1995Slc, true, true)
		yys1995 := string(yys1995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1995 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1997 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1998 := z.DecBinary()
				_ = yym1998
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1997), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1995)
		} // end switch yys1995
	} // end for yyj1995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1999 int
	var yyb1999 bool
	var yyhl1999 bool = l >= 0
	yyj1999++
	if yyhl1999 {
		yyb1999 = yyj1999 > l
	} else {
		yyb1999 = r.CheckBreak()
	}
	if yyb1999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1999++
	if yyhl1999 {
		yyb1999 = yyj1999 > l
	} else {
		yyb1999 = r.CheckBreak()
	}
	if yyb1999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2001 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2002 := z.DecBinary()
		_ = yym2002
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2001), d)
		}
	}
	for {
		yyj1999++
		if yyhl1999 {
			yyb1999 = yyj1999 > l
		} else {
			yyb1999 = r.CheckBreak()
		}
		if yyb1999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2003 := z.EncBinary()
		_ = yym2003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2004 := !z.EncBinary()
			yy2arr2004 := z.EncBasicHandle().StructToArray
			var yyq2004 [2]bool
			_, _, _ = yysep2004, yyq2004, yy2arr2004
			const yyr2004 bool = false
			var yynn2004 int
			if yyr2004 || yy2arr2004 {
				r.EncodeArrayStart(2)
			} else {
				yynn2004 = 2
				for _, b := range yyq2004 {
					if b {
						yynn2004++
					}
				}
				r.EncodeMapStart(yynn2004)
				yynn2004 = 0
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2006 := z.EncBinary()
				_ = yym2006
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2007 := z.EncBinary()
				_ = yym2007
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2009 := &x.Preference
				yy2009.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2010 := &x.Preference
				yy2010.CodecEncodeSelf(e)
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2011 := z.DecBinary()
	_ = yym2011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2012 := r.ContainerType()
		if yyct2012 == codecSelferValueTypeMap1234 {
			yyl2012 := r.ReadMapStart()
			if yyl2012 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2012, d)
			}
		} else if yyct2012 == codecSelferValueTypeArray1234 {
			yyl2012 := r.ReadArrayStart()
			if yyl2012 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2013Slc
	var yyhl2013 bool = l >= 0
	for yyj2013 := 0; ; yyj2013++ {
		if yyhl2013 {
			if yyj2013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2013Slc = r.DecodeBytes(yys2013Slc, true, true)
		yys2013 := string(yys2013Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2013 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2015 := &x.Preference
				yyv2015.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2013)
		} // end switch yys2013
	} // end for yyj2013
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2016 int
	var yyb2016 bool
	var yyhl2016 bool = l >= 0
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2018 := &x.Preference
		yyv2018.CodecDecodeSelf(d)
	}
	for {
		yyj2016++
		if yyhl2016 {
			yyb2016 = yyj2016 > l
		} else {
			yyb2016 = r.CheckBreak()
		}
		if yyb2016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2019 := z.EncBinary()
		_ = yym2019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2020 := !z.EncBinary()
			yy2arr2020 := z.EncBasicHandle().StructToArray
			var yyq2020 [3]bool
			_, _, _ = yysep2020, yyq2020, yy2arr2020
			const yyr2020 bool = false
			yyq2020[1] = x.Value != ""
			var yynn2020 int
			if yyr2020 || yy2arr2020 {
				r.EncodeArrayStart(3)
			} else {
				yynn2020 = 2
				for _, b := range yyq2020 {
					if b {
						yynn2020++
					}
				}
				r.EncodeMapStart(yynn2020)
				yynn2020 = 0
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2022 := z.EncBinary()
				_ = yym2022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2023 := z.EncBinary()
				_ = yym2023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2020[1] {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2020[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2020 || yy2arr2020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2028 := z.DecBinary()
	_ = yym2028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2029 := r.ContainerType()
		if yyct2029 == codecSelferValueTypeMap1234 {
			yyl2029 := r.ReadMapStart()
			if yyl2029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2029, d)
			}
		} else if yyct2029 == codecSelferValueTypeArray1234 {
			yyl2029 := r.ReadArrayStart()
			if yyl2029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2030Slc
	var yyhl2030 bool = l >= 0
	for yyj2030 := 0; ; yyj2030++ {
		if yyhl2030 {
			if yyj2030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2030Slc = r.DecodeBytes(yys2030Slc, true, true)
		yys2030 := string(yys2030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2030 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2030)
		} // end switch yys2030
	} // end for yyj2030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2034 int
	var yyb2034 bool
	var yyhl2034 bool = l >= 0
	yyj2034++
	if yyhl2034 {
		yyb2034 = yyj2034 > l
	} else {
		yyb2034 = r.CheckBreak()
	}
	if yyb2034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2034++
	if yyhl2034 {
		yyb2034 = yyj2034 > l
	} else {
		yyb2034 = r.CheckBreak()
	}
	if yyb2034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2034++
	if yyhl2034 {
		yyb2034 = yyj2034 > l
	} else {
		yyb2034 = r.CheckBreak()
	}
	if yyb2034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2034++
		if yyhl2034 {
			yyb2034 = yyj2034 > l
		} else {
			yyb2034 = r.CheckBreak()
		}
		if yyb2034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2038 := z.EncBinary()
	_ = yym2038
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2039 := z.DecBinary()
	_ = yym2039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2040 := z.EncBinary()
		_ = yym2040
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2041 := !z.EncBinary()
			yy2arr2041 := z.EncBasicHandle().StructToArray
			var yyq2041 [4]bool
			_, _, _ = yysep2041, yyq2041, yy2arr2041
			const yyr2041 bool = false
			yyq2041[0] = x.Key != ""
			yyq2041[1] = x.Operator != ""
			yyq2041[2] = x.Value != ""
			yyq2041[3] = x.Effect != ""
			var yynn2041 int
			if yyr2041 || yy2arr2041 {
				r.EncodeArrayStart(4)
			} else {
				yynn2041 = 0
				for _, b := range yyq2041 {
					if b {
						yynn2041++
					}
				}
				r.EncodeMapStart(yynn2041)
				yynn2041 = 0
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2041[0] {
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2041[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2041[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2041[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2041[2] {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2041[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2041[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2041[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2050 := z.DecBinary()
	_ = yym2050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2051 := r.ContainerType()
		if yyct2051 == codecSelferValueTypeMap1234 {
			yyl2051 := r.ReadMapStart()
			if yyl2051 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2051, d)
			}
		} else if yyct2051 == codecSelferValueTypeArray1234 {
			yyl2051 := r.ReadArrayStart()
			if yyl2051 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2052Slc
	var yyhl2052 bool = l >= 0
	for yyj2052 := 0; ; yyj2052++ {
		if yyhl2052 {
			if yyj2052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2052Slc = r.DecodeBytes(yys2052Slc, true, true)
		yys2052 := string(yys2052Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2052 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2052)
		} // end switch yys2052
	} // end for yyj2052
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2057 int
	var yyb2057 bool
	var yyhl2057 bool = l >= 0
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2057++
		if yyhl2057 {
			yyb2057 = yyj2057 > l
		} else {
			yyb2057 = r.CheckBreak()
		}
		if yyb2057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2062 := z.EncBinary()
	_ = yym2062
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2063 := z.DecBinary()
	_ = yym2063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2064 := z.EncBinary()
		_ = yym2064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2065 := !z.EncBinary()
			yy2arr2065 := z.EncBasicHandle().StructToArray
			var yyq2065 [13]bool
			_, _, _ = yysep2065, yyq2065, yy2arr2065
			const yyr2065 bool = false
			yyq2065[2] = x.RestartPolicy != ""
			yyq2065[3] = x.TerminationGracePeriodSeconds != nil
			yyq2065[4] = x.ActiveDeadlineSeconds != nil
			yyq2065[5] = x.DNSPolicy != ""
			yyq2065[6] = len(x.NodeSelector) != 0
			yyq2065[8] = x.NodeName != ""
			yyq2065[9] = x.SecurityContext != nil
			yyq2065[10] = len(x.ImagePullSecrets) != 0
			yyq2065[11] = x.Hostname != ""
			yyq2065[12] = x.Subdomain != ""
			var yynn2065 int
			if yyr2065 || yy2arr2065 {
				r.EncodeArrayStart(13)
			} else {
				yynn2065 = 3
				for _, b := range yyq2065 {
					if b {
						yynn2065++
					}
				}
				r.EncodeMapStart(yynn2065)
				yynn2065 = 0
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2070 := z.EncBinary()
					_ = yym2070
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2074 := *x.TerminationGracePeriodSeconds
						yym2075 := z.EncBinary()
						_ = yym2075
						if false {
						} else {
							r.EncodeInt(int64(yy2074))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2076 := *x.TerminationGracePeriodSeconds
						yym2077 := z.EncBinary()
						_ = yym2077
						if false {
						} else {
							r.EncodeInt(int64(yy2076))
						}
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2079 := *x.ActiveDeadlineSeconds
						yym2080 := z.EncBinary()
						_ = yym2080
						if false {
						} else {
							r.EncodeInt(int64(yy2079))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2081 := *x.ActiveDeadlineSeconds
						yym2082 := z.EncBinary()
						_ = yym2082
						if false {
						} else {
							r.EncodeInt(int64(yy2081))
						}
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2085 := z.EncBinary()
						_ = yym2085
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2086 := z.EncBinary()
						_ = yym2086
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2088 := z.EncBinary()
				_ = yym2088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2089 := z.EncBinary()
				_ = yym2089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[8] {
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2095 := z.EncBinary()
						_ = yym2095
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2096 := z.EncBinary()
						_ = yym2096
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[11] {
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2065[12] {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2104 := r.ContainerType()
		if yyct2104 == codecSelferValueTypeMap1234 {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if yyct2104 == codecSelferValueTypeArray1234 {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2105 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2106 := &x.Volumes
				yym2107 := z.DecBinary()
				_ = yym2107
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2106), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2108 := &x.Containers
				yym2109 := z.DecBinary()
				_ = yym2109
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2108), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2112 := z.DecBinary()
				_ = yym2112
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2114 := z.DecBinary()
				_ = yym2114
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2116 := &x.NodeSelector
				yym2117 := z.DecBinary()
				_ = yym2117
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2116, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2121 := &x.ImagePullSecrets
				yym2122 := z.DecBinary()
				_ = yym2122
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2121), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2125 int
	var yyb2125 bool
	var yyhl2125 bool = l >= 0
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2126 := &x.Volumes
		yym2127 := z.DecBinary()
		_ = yym2127
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2126), d)
		}
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2128 := &x.Containers
		yym2129 := z.DecBinary()
		_ = yym2129
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2128), d)
		}
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2132 := z.DecBinary()
		_ = yym2132
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2134 := z.DecBinary()
		_ = yym2134
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2136 := &x.NodeSelector
		yym2137 := z.DecBinary()
		_ = yym2137
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2136, false, d)
		}
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2141 := &x.ImagePullSecrets
		yym2142 := z.DecBinary()
		_ = yym2142
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2141), d)
		}
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2125++
	if yyhl2125 {
		yyb2125 = yyj2125 > l
	} else {
		yyb2125 = r.CheckBreak()
	}
	if yyb2125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2125++
		if yyhl2125 {
			yyb2125 = yyj2125 > l
		} else {
			yyb2125 = r.CheckBreak()
		}
		if yyb2125 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2125-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2145 := z.EncBinary()
		_ = yym2145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2146 := !z.EncBinary()
			yy2arr2146 := z.EncBasicHandle().StructToArray
			var yyq2146 [8]bool
			_, _, _ = yysep2146, yyq2146, yy2arr2146
			const yyr2146 bool = false
			yyq2146[0] = x.HostNetwork != false
			yyq2146[1] = x.HostPID != false
			yyq2146[2] = x.HostIPC != false
			yyq2146[3] = x.SELinuxOptions != nil
			yyq2146[4] = x.RunAsUser != nil
			yyq2146[5] = x.RunAsNonRoot != nil
			yyq2146[6] = len(x.SupplementalGroups) != 0
			yyq2146[7] = x.FSGroup != nil
			var yynn2146 int
			if yyr2146 || yy2arr2146 {
				r.EncodeArrayStart(8)
			} else {
				yynn2146 = 0
				for _, b := range yyq2146 {
					if b {
						yynn2146++
					}
				}
				r.EncodeMapStart(yynn2146)
				yynn2146 = 0
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[0] {
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[1] {
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2146[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2152 := z.EncBinary()
					_ = yym2152
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[2] {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2146[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2146[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2158 := *x.RunAsUser
						yym2159 := z.EncBinary()
						_ = yym2159
						if false {
						} else {
							r.EncodeInt(int64(yy2158))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2146[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2160 := *x.RunAsUser
						yym2161 := z.EncBinary()
						_ = yym2161
						if false {
						} else {
							r.EncodeInt(int64(yy2160))
						}
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2163 := *x.RunAsNonRoot
						yym2164 := z.EncBinary()
						_ = yym2164
						if false {
						} else {
							r.EncodeBool(bool(yy2163))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2146[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2165 := *x.RunAsNonRoot
						yym2166 := z.EncBinary()
						_ = yym2166
						if false {
						} else {
							r.EncodeBool(bool(yy2165))
						}
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2168 := z.EncBinary()
						_ = yym2168
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2146[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2169 := z.EncBinary()
						_ = yym2169
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2146[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2171 := *x.FSGroup
						yym2172 := z.EncBinary()
						_ = yym2172
						if false {
						} else {
							r.EncodeInt(int64(yy2171))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2146[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2173 := *x.FSGroup
						yym2174 := z.EncBinary()
						_ = yym2174
						if false {
						} else {
							r.EncodeInt(int64(yy2173))
						}
					}
				}
			}
			if yyr2146 || yy2arr2146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2175 := z.DecBinary()
	_ = yym2175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2176 := r.ContainerType()
		if yyct2176 == codecSelferValueTypeMap1234 {
			yyl2176 := r.ReadMapStart()
			if yyl2176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2176, d)
			}
		} else if yyct2176 == codecSelferValueTypeArray1234 {
			yyl2176 := r.ReadArrayStart()
			if yyl2176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2177Slc
	var yyhl2177 bool = l >= 0
	for yyj2177 := 0; ; yyj2177++ {
		if yyhl2177 {
			if yyj2177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2177Slc = r.DecodeBytes(yys2177Slc, true, true)
		yys2177 := string(yys2177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2177 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2183 := z.DecBinary()
				_ = yym2183
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2185 := z.DecBinary()
				_ = yym2185
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2186 := &x.SupplementalGroups
				yym2187 := z.DecBinary()
				_ = yym2187
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2186, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2189 := z.DecBinary()
				_ = yym2189
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2177)
		} // end switch yys2177
	} // end for yyj2177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2190 int
	var yyb2190 bool
	var yyhl2190 bool = l >= 0
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2196 := z.DecBinary()
		_ = yym2196
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2198 := z.DecBinary()
		_ = yym2198
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2199 := &x.SupplementalGroups
		yym2200 := z.DecBinary()
		_ = yym2200
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2199, false, d)
		}
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2202 := z.DecBinary()
		_ = yym2202
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2190++
		if yyhl2190 {
			yyb2190 = yyj2190 > l
		} else {
			yyb2190 = r.CheckBreak()
		}
		if yyb2190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2203 := z.EncBinary()
		_ = yym2203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2204 := !z.EncBinary()
			yy2arr2204 := z.EncBasicHandle().StructToArray
			var yyq2204 [8]bool
			_, _, _ = yysep2204, yyq2204, yy2arr2204
			const yyr2204 bool = false
			yyq2204[0] = x.Phase != ""
			yyq2204[1] = len(x.Conditions) != 0
			yyq2204[2] = x.Message != ""
			yyq2204[3] = x.Reason != ""
			yyq2204[4] = x.HostIP != ""
			yyq2204[5] = x.PodIP != ""
			yyq2204[6] = x.StartTime != nil
			yyq2204[7] = len(x.ContainerStatuses) != 0
			var yynn2204 int
			if yyr2204 || yy2arr2204 {
				r.EncodeArrayStart(8)
			} else {
				yynn2204 = 0
				for _, b := range yyq2204 {
					if b {
						yynn2204++
					}
				}
				r.EncodeMapStart(yynn2204)
				yynn2204 = 0
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2207 := z.EncBinary()
						_ = yym2207
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2208 := z.EncBinary()
						_ = yym2208
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[2] {
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[3] {
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[4] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[5] {
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2222 := z.EncBinary()
						_ = yym2222
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2222 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2222 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2204[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2223 := z.EncBinary()
						_ = yym2223
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2223 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2223 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2204[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2225 := z.EncBinary()
						_ = yym2225
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2204[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2226 := z.EncBinary()
						_ = yym2226
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2227 := z.DecBinary()
	_ = yym2227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2228 := r.ContainerType()
		if yyct2228 == codecSelferValueTypeMap1234 {
			yyl2228 := r.ReadMapStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2228, d)
			}
		} else if yyct2228 == codecSelferValueTypeArray1234 {
			yyl2228 := r.ReadArrayStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2229Slc
	var yyhl2229 bool = l >= 0
	for yyj2229 := 0; ; yyj2229++ {
		if yyhl2229 {
			if yyj2229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2229Slc = r.DecodeBytes(yys2229Slc, true, true)
		yys2229 := string(yys2229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2229 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2231 := &x.Conditions
				yym2232 := z.DecBinary()
				_ = yym2232
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2231), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2238 := z.DecBinary()
				_ = yym2238
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2238 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2238 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2239 := &x.ContainerStatuses
				yym2240 := z.DecBinary()
				_ = yym2240
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2239), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2229)
		} // end switch yys2229
	} // end for yyj2229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2241 int
	var yyb2241 bool
	var yyhl2241 bool = l >= 0
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2243 := &x.Conditions
		yym2244 := z.DecBinary()
		_ = yym2244
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2243), d)
		}
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2250 := z.DecBinary()
		_ = yym2250
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2250 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2250 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2241++
	if yyhl2241 {
		yyb2241 = yyj2241 > l
	} else {
		yyb2241 = r.CheckBreak()
	}
	if yyb2241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2251 := &x.ContainerStatuses
		yym2252 := z.DecBinary()
		_ = yym2252
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2251), d)
		}
	}
	for {
		yyj2241++
		if yyhl2241 {
			yyb2241 = yyj2241 > l
		} else {
			yyb2241 = r.CheckBreak()
		}
		if yyb2241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2253 := z.EncBinary()
		_ = yym2253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2254 := !z.EncBinary()
			yy2arr2254 := z.EncBasicHandle().StructToArray
			var yyq2254 [4]bool
			_, _, _ = yysep2254, yyq2254, yy2arr2254
			const yyr2254 bool = false
			yyq2254[0] = x.Kind != ""
			yyq2254[1] = x.APIVersion != ""
			yyq2254[2] = true
			yyq2254[3] = true
			var yynn2254 int
			if yyr2254 || yy2arr2254 {
				r.EncodeArrayStart(4)
			} else {
				yynn2254 = 0
				for _, b := range yyq2254 {
					if b {
						yynn2254++
					}
				}
				r.EncodeMapStart(yynn2254)
				yynn2254 = 0
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2254[0] {
					yym2256 := z.EncBinary()
					_ = yym2256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2254[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2254[1] {
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2254[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2254[2] {
					yy2262 := &x.ObjectMeta
					yy2262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2254[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2263 := &x.ObjectMeta
					yy2263.CodecEncodeSelf(e)
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2254[3] {
					yy2265 := &x.Status
					yy2265.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2254[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2266 := &x.Status
					yy2266.CodecEncodeSelf(e)
				}
			}
			if yyr2254 || yy2arr2254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2267 := z.DecBinary()
	_ = yym2267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2268 := r.ContainerType()
		if yyct2268 == codecSelferValueTypeMap1234 {
			yyl2268 := r.ReadMapStart()
			if yyl2268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2268, d)
			}
		} else if yyct2268 == codecSelferValueTypeArray1234 {
			yyl2268 := r.ReadArrayStart()
			if yyl2268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2269Slc
	var yyhl2269 bool = l >= 0
	for yyj2269 := 0; ; yyj2269++ {
		if yyhl2269 {
			if yyj2269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2269Slc = r.DecodeBytes(yys2269Slc, true, true)
		yys2269 := string(yys2269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2269 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2272 := &x.ObjectMeta
				yyv2272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2273 := &x.Status
				yyv2273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2269)
		} // end switch yys2269
	} // end for yyj2269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2274 int
	var yyb2274 bool
	var yyhl2274 bool = l >= 0
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2277 := &x.ObjectMeta
		yyv2277.CodecDecodeSelf(d)
	}
	yyj2274++
	if yyhl2274 {
		yyb2274 = yyj2274 > l
	} else {
		yyb2274 = r.CheckBreak()
	}
	if yyb2274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2278 := &x.Status
		yyv2278.CodecDecodeSelf(d)
	}
	for {
		yyj2274++
		if yyhl2274 {
			yyb2274 = yyj2274 > l
		} else {
			yyb2274 = r.CheckBreak()
		}
		if yyb2274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2279 := z.EncBinary()
		_ = yym2279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2280 := !z.EncBinary()
			yy2arr2280 := z.EncBasicHandle().StructToArray
			var yyq2280 [5]bool
			_, _, _ = yysep2280, yyq2280, yy2arr2280
			const yyr2280 bool = false
			yyq2280[0] = x.Kind != ""
			yyq2280[1] = x.APIVersion != ""
			yyq2280[2] = true
			yyq2280[3] = true
			yyq2280[4] = true
			var yynn2280 int
			if yyr2280 || yy2arr2280 {
				r.EncodeArrayStart(5)
			} else {
				yynn2280 = 0
				for _, b := range yyq2280 {
					if b {
						yynn2280++
					}
				}
				r.EncodeMapStart(yynn2280)
				yynn2280 = 0
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[0] {
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[1] {
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[2] {
					yy2288 := &x.ObjectMeta
					yy2288.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2289 := &x.ObjectMeta
					yy2289.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[3] {
					yy2291 := &x.Spec
					yy2291.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2292 := &x.Spec
					yy2292.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[4] {
					yy2294 := &x.Status
					yy2294.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2295 := &x.Status
					yy2295.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2296 := z.DecBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2297 := r.ContainerType()
		if yyct2297 == codecSelferValueTypeMap1234 {
			yyl2297 := r.ReadMapStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2297, d)
			}
		} else if yyct2297 == codecSelferValueTypeArray1234 {
			yyl2297 := r.ReadArrayStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2298Slc
	var yyhl2298 bool = l >= 0
	for yyj2298 := 0; ; yyj2298++ {
		if yyhl2298 {
			if yyj2298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2298Slc = r.DecodeBytes(yys2298Slc, true, true)
		yys2298 := string(yys2298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2298 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2301 := &x.ObjectMeta
				yyv2301.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2302 := &x.Spec
				yyv2302.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2303 := &x.Status
				yyv2303.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2298)
		} // end switch yys2298
	} // end for yyj2298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2304 int
	var yyb2304 bool
	var yyhl2304 bool = l >= 0
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2307 := &x.ObjectMeta
		yyv2307.CodecDecodeSelf(d)
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2308 := &x.Spec
		yyv2308.CodecDecodeSelf(d)
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2309 := &x.Status
		yyv2309.CodecDecodeSelf(d)
	}
	for {
		yyj2304++
		if yyhl2304 {
			yyb2304 = yyj2304 > l
		} else {
			yyb2304 = r.CheckBreak()
		}
		if yyb2304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2310 := z.EncBinary()
		_ = yym2310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2311 := !z.EncBinary()
			yy2arr2311 := z.EncBasicHandle().StructToArray
			var yyq2311 [2]bool
			_, _, _ = yysep2311, yyq2311, yy2arr2311
			const yyr2311 bool = false
			yyq2311[0] = true
			yyq2311[1] = true
			var yynn2311 int
			if yyr2311 || yy2arr2311 {
				r.EncodeArrayStart(2)
			} else {
				yynn2311 = 0
				for _, b := range yyq2311 {
					if b {
						yynn2311++
					}
				}
				r.EncodeMapStart(yynn2311)
				yynn2311 = 0
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[0] {
					yy2313 := &x.ObjectMeta
					yy2313.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2314 := &x.ObjectMeta
					yy2314.CodecEncodeSelf(e)
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[1] {
					yy2316 := &x.Spec
					yy2316.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2317 := &x.Spec
					yy2317.CodecEncodeSelf(e)
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2318 := z.DecBinary()
	_ = yym2318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2319 := r.ContainerType()
		if yyct2319 == codecSelferValueTypeMap1234 {
			yyl2319 := r.ReadMapStart()
			if yyl2319 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2319, d)
			}
		} else if yyct2319 == codecSelferValueTypeArray1234 {
			yyl2319 := r.ReadArrayStart()
			if yyl2319 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2319, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2320Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2320Slc
	var yyhl2320 bool = l >= 0
	for yyj2320 := 0; ; yyj2320++ {
		if yyhl2320 {
			if yyj2320 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2320Slc = r.DecodeBytes(yys2320Slc, true, true)
		yys2320 := string(yys2320Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2320 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2321 := &x.ObjectMeta
				yyv2321.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2322 := &x.Spec
				yyv2322.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2320)
		} // end switch yys2320
	} // end for yyj2320
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2323 int
	var yyb2323 bool
	var yyhl2323 bool = l >= 0
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2324 := &x.ObjectMeta
		yyv2324.CodecDecodeSelf(d)
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2325 := &x.Spec
		yyv2325.CodecDecodeSelf(d)
	}
	for {
		yyj2323++
		if yyhl2323 {
			yyb2323 = yyj2323 > l
		} else {
			yyb2323 = r.CheckBreak()
		}
		if yyb2323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2326 := z.EncBinary()
		_ = yym2326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2327 := !z.EncBinary()
			yy2arr2327 := z.EncBasicHandle().StructToArray
			var yyq2327 [4]bool
			_, _, _ = yysep2327, yyq2327, yy2arr2327
			const yyr2327 bool = false
			yyq2327[0] = x.Kind != ""
			yyq2327[1] = x.APIVersion != ""
			yyq2327[2] = true
			yyq2327[3] = true
			var yynn2327 int
			if yyr2327 || yy2arr2327 {
				r.EncodeArrayStart(4)
			} else {
				yynn2327 = 0
				for _, b := range yyq2327 {
					if b {
						yynn2327++
					}
				}
				r.EncodeMapStart(yynn2327)
				yynn2327 = 0
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[0] {
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[1] {
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[2] {
					yy2335 := &x.ObjectMeta
					yy2335.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2336 := &x.ObjectMeta
					yy2336.CodecEncodeSelf(e)
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[3] {
					yy2338 := &x.Template
					yy2338.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2327[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2339 := &x.Template
					yy2339.CodecEncodeSelf(e)
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2340 := z.DecBinary()
	_ = yym2340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2341 := r.ContainerType()
		if yyct2341 == codecSelferValueTypeMap1234 {
			yyl2341 := r.ReadMapStart()
			if yyl2341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2341, d)
			}
		} else if yyct2341 == codecSelferValueTypeArray1234 {
			yyl2341 := r.ReadArrayStart()
			if yyl2341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2342Slc
	var yyhl2342 bool = l >= 0
	for yyj2342 := 0; ; yyj2342++ {
		if yyhl2342 {
			if yyj2342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2342Slc = r.DecodeBytes(yys2342Slc, true, true)
		yys2342 := string(yys2342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2342 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2345 := &x.ObjectMeta
				yyv2345.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2346 := &x.Template
				yyv2346.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2342)
		} // end switch yys2342
	} // end for yyj2342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2347 int
	var yyb2347 bool
	var yyhl2347 bool = l >= 0
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2350 := &x.ObjectMeta
		yyv2350.CodecDecodeSelf(d)
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2351 := &x.Template
		yyv2351.CodecDecodeSelf(d)
	}
	for {
		yyj2347++
		if yyhl2347 {
			yyb2347 = yyj2347 > l
		} else {
			yyb2347 = r.CheckBreak()
		}
		if yyb2347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2352 := z.EncBinary()
		_ = yym2352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2353 := !z.EncBinary()
			yy2arr2353 := z.EncBasicHandle().StructToArray
			var yyq2353 [4]bool
			_, _, _ = yysep2353, yyq2353, yy2arr2353
			const yyr2353 bool = false
			yyq2353[0] = x.Kind != ""
			yyq2353[1] = x.APIVersion != ""
			yyq2353[2] = true
			var yynn2353 int
			if yyr2353 || yy2arr2353 {
				r.EncodeArrayStart(4)
			} else {
				yynn2353 = 1
				for _, b := range yyq2353 {
					if b {
						yynn2353++
					}
				}
				r.EncodeMapStart(yynn2353)
				yynn2353 = 0
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[0] {
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[1] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[2] {
					yy2361 := &x.ListMeta
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2361) {
					} else {
						z.EncFallback(yy2361)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2363 := &x.ListMeta
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2363) {
					} else {
						z.EncFallback(yy2363)
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2368 := z.DecBinary()
	_ = yym2368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2369 := r.ContainerType()
		if yyct2369 == codecSelferValueTypeMap1234 {
			yyl2369 := r.ReadMapStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2369, d)
			}
		} else if yyct2369 == codecSelferValueTypeArray1234 {
			yyl2369 := r.ReadArrayStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2370Slc
	var yyhl2370 bool = l >= 0
	for yyj2370 := 0; ; yyj2370++ {
		if yyhl2370 {
			if yyj2370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2370Slc = r.DecodeBytes(yys2370Slc, true, true)
		yys2370 := string(yys2370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2370 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2373 := &x.ListMeta
				yym2374 := z.DecBinary()
				_ = yym2374
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2373) {
				} else {
					z.DecFallback(yyv2373, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2375 := &x.Items
				yym2376 := z.DecBinary()
				_ = yym2376
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2375), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2370)
		} // end switch yys2370
	} // end for yyj2370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2377 int
	var yyb2377 bool
	var yyhl2377 bool = l >= 0
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2380 := &x.ListMeta
		yym2381 := z.DecBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2380) {
		} else {
			z.DecFallback(yyv2380, false)
		}
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2382 := &x.Items
		yym2383 := z.DecBinary()
		_ = yym2383
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2382), d)
		}
	}
	for {
		yyj2377++
		if yyhl2377 {
			yyb2377 = yyj2377 > l
		} else {
			yyb2377 = r.CheckBreak()
		}
		if yyb2377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2384 := z.EncBinary()
		_ = yym2384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2385 := !z.EncBinary()
			yy2arr2385 := z.EncBasicHandle().StructToArray
			var yyq2385 [3]bool
			_, _, _ = yysep2385, yyq2385, yy2arr2385
			const yyr2385 bool = false
			yyq2385[2] = x.Template != nil
			var yynn2385 int
			if yyr2385 || yy2arr2385 {
				r.EncodeArrayStart(3)
			} else {
				yynn2385 = 2
				for _, b := range yyq2385 {
					if b {
						yynn2385++
					}
				}
				r.EncodeMapStart(yynn2385)
				yynn2385 = 0
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2387 := z.EncBinary()
				_ = yym2387
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2388 := z.EncBinary()
				_ = yym2388
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2385[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2385[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2393 := z.DecBinary()
	_ = yym2393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2394 := r.ContainerType()
		if yyct2394 == codecSelferValueTypeMap1234 {
			yyl2394 := r.ReadMapStart()
			if yyl2394 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2394, d)
			}
		} else if yyct2394 == codecSelferValueTypeArray1234 {
			yyl2394 := r.ReadArrayStart()
			if yyl2394 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2395Slc
	var yyhl2395 bool = l >= 0
	for yyj2395 := 0; ; yyj2395++ {
		if yyhl2395 {
			if yyj2395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2395Slc = r.DecodeBytes(yys2395Slc, true, true)
		yys2395 := string(yys2395Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2395 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2397 := &x.Selector
				yym2398 := z.DecBinary()
				_ = yym2398
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2397, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2395)
		} // end switch yys2395
	} // end for yyj2395
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2400 int
	var yyb2400 bool
	var yyhl2400 bool = l >= 0
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2402 := &x.Selector
		yym2403 := z.DecBinary()
		_ = yym2403
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2402, false, d)
		}
	}
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2400++
		if yyhl2400 {
			yyb2400 = yyj2400 > l
		} else {
			yyb2400 = r.CheckBreak()
		}
		if yyb2400 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2400-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2405 := z.EncBinary()
		_ = yym2405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2406 := !z.EncBinary()
			yy2arr2406 := z.EncBasicHandle().StructToArray
			var yyq2406 [4]bool
			_, _, _ = yysep2406, yyq2406, yy2arr2406
			const yyr2406 bool = false
			yyq2406[1] = x.FullyLabeledReplicas != 0
			yyq2406[2] = x.ReadyReplicas != 0
			yyq2406[3] = x.ObservedGeneration != 0
			var yynn2406 int
			if yyr2406 || yy2arr2406 {
				r.EncodeArrayStart(4)
			} else {
				yynn2406 = 1
				for _, b := range yyq2406 {
					if b {
						yynn2406++
					}
				}
				r.EncodeMapStart(yynn2406)
				yynn2406 = 0
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2408 := z.EncBinary()
				_ = yym2408
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2409 := z.EncBinary()
				_ = yym2409
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[1] {
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[2] {
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2406[3] {
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2406 || yy2arr2406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2419 := z.DecBinary()
	_ = yym2419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2420 := r.ContainerType()
		if yyct2420 == codecSelferValueTypeMap1234 {
			yyl2420 := r.ReadMapStart()
			if yyl2420 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2420, d)
			}
		} else if yyct2420 == codecSelferValueTypeArray1234 {
			yyl2420 := r.ReadArrayStart()
			if yyl2420 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2421Slc
	var yyhl2421 bool = l >= 0
	for yyj2421 := 0; ; yyj2421++ {
		if yyhl2421 {
			if yyj2421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2421Slc = r.DecodeBytes(yys2421Slc, true, true)
		yys2421 := string(yys2421Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2421 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2421)
		} // end switch yys2421
	} // end for yyj2421
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2426 int
	var yyb2426 bool
	var yyhl2426 bool = l >= 0
	yyj2426++
	if yyhl2426 {
		yyb2426 = yyj2426 > l
	} else {
		yyb2426 = r.CheckBreak()
	}
	if yyb2426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2426++
	if yyhl2426 {
		yyb2426 = yyj2426 > l
	} else {
		yyb2426 = r.CheckBreak()
	}
	if yyb2426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2426++
	if yyhl2426 {
		yyb2426 = yyj2426 > l
	} else {
		yyb2426 = r.CheckBreak()
	}
	if yyb2426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2426++
	if yyhl2426 {
		yyb2426 = yyj2426 > l
	} else {
		yyb2426 = r.CheckBreak()
	}
	if yyb2426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2426++
		if yyhl2426 {
			yyb2426 = yyj2426 > l
		} else {
			yyb2426 = r.CheckBreak()
		}
		if yyb2426 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2426-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2431 := z.EncBinary()
		_ = yym2431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2432 := !z.EncBinary()
			yy2arr2432 := z.EncBasicHandle().StructToArray
			var yyq2432 [5]bool
			_, _, _ = yysep2432, yyq2432, yy2arr2432
			const yyr2432 bool = false
			yyq2432[0] = x.Kind != ""
			yyq2432[1] = x.APIVersion != ""
			yyq2432[2] = true
			yyq2432[3] = true
			yyq2432[4] = true
			var yynn2432 int
			if yyr2432 || yy2arr2432 {
				r.EncodeArrayStart(5)
			} else {
				yynn2432 = 0
				for _, b := range yyq2432 {
					if b {
						yynn2432++
					}
				}
				r.EncodeMapStart(yynn2432)
				yynn2432 = 0
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2432[0] {
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2432[1] {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2432[2] {
					yy2440 := &x.ObjectMeta
					yy2440.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2441 := &x.ObjectMeta
					yy2441.CodecEncodeSelf(e)
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2432[3] {
					yy2443 := &x.Spec
					yy2443.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2432[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2444 := &x.Spec
					yy2444.CodecEncodeSelf(e)
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2432[4] {
					yy2446 := &x.Status
					yy2446.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2432[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2447 := &x.Status
					yy2447.CodecEncodeSelf(e)
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2448 := z.DecBinary()
	_ = yym2448
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2449 := r.ContainerType()
		if yyct2449 == codecSelferValueTypeMap1234 {
			yyl2449 := r.ReadMapStart()
			if yyl2449 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2449, d)
			}
		} else if yyct2449 == codecSelferValueTypeArray1234 {
			yyl2449 := r.ReadArrayStart()
			if yyl2449 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2449, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2450Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2450Slc
	var yyhl2450 bool = l >= 0
	for yyj2450 := 0; ; yyj2450++ {
		if yyhl2450 {
			if yyj2450 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2450Slc = r.DecodeBytes(yys2450Slc, true, true)
		yys2450 := string(yys2450Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2450 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2453 := &x.ObjectMeta
				yyv2453.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2454 := &x.Spec
				yyv2454.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2455 := &x.Status
				yyv2455.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2450)
		} // end switch yys2450
	} // end for yyj2450
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2456 int
	var yyb2456 bool
	var yyhl2456 bool = l >= 0
	yyj2456++
	if yyhl2456 {
		yyb2456 = yyj2456 > l
	} else {
		yyb2456 = r.CheckBreak()
	}
	if yyb2456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2456++
	if yyhl2456 {
		yyb2456 = yyj2456 > l
	} else {
		yyb2456 = r.CheckBreak()
	}
	if yyb2456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2456++
	if yyhl2456 {
		yyb2456 = yyj2456 > l
	} else {
		yyb2456 = r.CheckBreak()
	}
	if yyb2456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2459 := &x.ObjectMeta
		yyv2459.CodecDecodeSelf(d)
	}
	yyj2456++
	if yyhl2456 {
		yyb2456 = yyj2456 > l
	} else {
		yyb2456 = r.CheckBreak()
	}
	if yyb2456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2460 := &x.Spec
		yyv2460.CodecDecodeSelf(d)
	}
	yyj2456++
	if yyhl2456 {
		yyb2456 = yyj2456 > l
	} else {
		yyb2456 = r.CheckBreak()
	}
	if yyb2456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2461 := &x.Status
		yyv2461.CodecDecodeSelf(d)
	}
	for {
		yyj2456++
		if yyhl2456 {
			yyb2456 = yyj2456 > l
		} else {
			yyb2456 = r.CheckBreak()
		}
		if yyb2456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2462 := z.EncBinary()
		_ = yym2462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2463 := !z.EncBinary()
			yy2arr2463 := z.EncBasicHandle().StructToArray
			var yyq2463 [4]bool
			_, _, _ = yysep2463, yyq2463, yy2arr2463
			const yyr2463 bool = false
			yyq2463[0] = x.Kind != ""
			yyq2463[1] = x.APIVersion != ""
			yyq2463[2] = true
			var yynn2463 int
			if yyr2463 || yy2arr2463 {
				r.EncodeArrayStart(4)
			} else {
				yynn2463 = 1
				for _, b := range yyq2463 {
					if b {
						yynn2463++
					}
				}
				r.EncodeMapStart(yynn2463)
				yynn2463 = 0
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[0] {
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[1] {
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[2] {
					yy2471 := &x.ListMeta
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2471) {
					} else {
						z.EncFallback(yy2471)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2463[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2473 := &x.ListMeta
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2473) {
					} else {
						z.EncFallback(yy2473)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2479 := r.ContainerType()
		if yyct2479 == codecSelferValueTypeMap1234 {
			yyl2479 := r.ReadMapStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2479, d)
			}
		} else if yyct2479 == codecSelferValueTypeArray1234 {
			yyl2479 := r.ReadArrayStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2480Slc
	var yyhl2480 bool = l >= 0
	for yyj2480 := 0; ; yyj2480++ {
		if yyhl2480 {
			if yyj2480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2480Slc = r.DecodeBytes(yys2480Slc, true, true)
		yys2480 := string(yys2480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2483 := &x.ListMeta
				yym2484 := z.DecBinary()
				_ = yym2484
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2483) {
				} else {
					z.DecFallback(yyv2483, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2485 := &x.Items
				yym2486 := z.DecBinary()
				_ = yym2486
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2485), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2480)
		} // end switch yys2480
	} // end for yyj2480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2487 int
	var yyb2487 bool
	var yyhl2487 bool = l >= 0
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2490 := &x.ListMeta
		yym2491 := z.DecBinary()
		_ = yym2491
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2490) {
		} else {
			z.DecFallback(yyv2490, false)
		}
	}
	yyj2487++
	if yyhl2487 {
		yyb2487 = yyj2487 > l
	} else {
		yyb2487 = r.CheckBreak()
	}
	if yyb2487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2492 := &x.Items
		yym2493 := z.DecBinary()
		_ = yym2493
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2492), d)
		}
	}
	for {
		yyj2487++
		if yyhl2487 {
			yyb2487 = yyj2487 > l
		} else {
			yyb2487 = r.CheckBreak()
		}
		if yyb2487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2494 := z.EncBinary()
		_ = yym2494
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2495 := !z.EncBinary()
			yy2arr2495 := z.EncBasicHandle().StructToArray
			var yyq2495 [4]bool
			_, _, _ = yysep2495, yyq2495, yy2arr2495
			const yyr2495 bool = false
			yyq2495[0] = x.Kind != ""
			yyq2495[1] = x.APIVersion != ""
			yyq2495[2] = true
			var yynn2495 int
			if yyr2495 || yy2arr2495 {
				r.EncodeArrayStart(4)
			} else {
				yynn2495 = 1
				for _, b := range yyq2495 {
					if b {
						yynn2495++
					}
				}
				r.EncodeMapStart(yynn2495)
				yynn2495 = 0
			}
			if yyr2495 || yy2arr2495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2495[0] {
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2495[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2495 || yy2arr2495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2495[1] {
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2495[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2495 || yy2arr2495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2495[2] {
					yy2503 := &x.ListMeta
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2503) {
					} else {
						z.EncFallback(yy2503)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2495[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2505 := &x.ListMeta
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2505) {
					} else {
						z.EncFallback(yy2505)
					}
				}
			}
			if yyr2495 || yy2arr2495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2495 || yy2arr2495 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2510 := z.DecBinary()
	_ = yym2510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2511 := r.ContainerType()
		if yyct2511 == codecSelferValueTypeMap1234 {
			yyl2511 := r.ReadMapStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2511, d)
			}
		} else if yyct2511 == codecSelferValueTypeArray1234 {
			yyl2511 := r.ReadArrayStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2512Slc
	var yyhl2512 bool = l >= 0
	for yyj2512 := 0; ; yyj2512++ {
		if yyhl2512 {
			if yyj2512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2512Slc = r.DecodeBytes(yys2512Slc, true, true)
		yys2512 := string(yys2512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2512 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2515 := &x.ListMeta
				yym2516 := z.DecBinary()
				_ = yym2516
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2515) {
				} else {
					z.DecFallback(yyv2515, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2517 := &x.Items
				yym2518 := z.DecBinary()
				_ = yym2518
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2517), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2512)
		} // end switch yys2512
	} // end for yyj2512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2519 int
	var yyb2519 bool
	var yyhl2519 bool = l >= 0
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2522 := &x.ListMeta
		yym2523 := z.DecBinary()
		_ = yym2523
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2522) {
		} else {
			z.DecFallback(yyv2522, false)
		}
	}
	yyj2519++
	if yyhl2519 {
		yyb2519 = yyj2519 > l
	} else {
		yyb2519 = r.CheckBreak()
	}
	if yyb2519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2524 := &x.Items
		yym2525 := z.DecBinary()
		_ = yym2525
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2524), d)
		}
	}
	for {
		yyj2519++
		if yyhl2519 {
			yyb2519 = yyj2519 > l
		} else {
			yyb2519 = r.CheckBreak()
		}
		if yyb2519 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2519-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2526 := z.EncBinary()
	_ = yym2526
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2527 := z.DecBinary()
	_ = yym2527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2528 := z.EncBinary()
	_ = yym2528
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2529 := z.DecBinary()
	_ = yym2529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2530 := z.EncBinary()
		_ = yym2530
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2531 := !z.EncBinary()
			yy2arr2531 := z.EncBasicHandle().StructToArray
			var yyq2531 [1]bool
			_, _, _ = yysep2531, yyq2531, yy2arr2531
			const yyr2531 bool = false
			yyq2531[0] = true
			var yynn2531 int
			if yyr2531 || yy2arr2531 {
				r.EncodeArrayStart(1)
			} else {
				yynn2531 = 0
				for _, b := range yyq2531 {
					if b {
						yynn2531++
					}
				}
				r.EncodeMapStart(yynn2531)
				yynn2531 = 0
			}
			if yyr2531 || yy2arr2531 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2531[0] {
					yy2533 := &x.LoadBalancer
					yy2533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2531[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2534 := &x.LoadBalancer
					yy2534.CodecEncodeSelf(e)
				}
			}
			if yyr2531 || yy2arr2531 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2535 := z.DecBinary()
	_ = yym2535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2536 := r.ContainerType()
		if yyct2536 == codecSelferValueTypeMap1234 {
			yyl2536 := r.ReadMapStart()
			if yyl2536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2536, d)
			}
		} else if yyct2536 == codecSelferValueTypeArray1234 {
			yyl2536 := r.ReadArrayStart()
			if yyl2536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2537Slc
	var yyhl2537 bool = l >= 0
	for yyj2537 := 0; ; yyj2537++ {
		if yyhl2537 {
			if yyj2537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2537Slc = r.DecodeBytes(yys2537Slc, true, true)
		yys2537 := string(yys2537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2537 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2538 := &x.LoadBalancer
				yyv2538.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2537)
		} // end switch yys2537
	} // end for yyj2537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2539 int
	var yyb2539 bool
	var yyhl2539 bool = l >= 0
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2540 := &x.LoadBalancer
		yyv2540.CodecDecodeSelf(d)
	}
	for {
		yyj2539++
		if yyhl2539 {
			yyb2539 = yyj2539 > l
		} else {
			yyb2539 = r.CheckBreak()
		}
		if yyb2539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2541 := z.EncBinary()
		_ = yym2541
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2542 := !z.EncBinary()
			yy2arr2542 := z.EncBasicHandle().StructToArray
			var yyq2542 [1]bool
			_, _, _ = yysep2542, yyq2542, yy2arr2542
			const yyr2542 bool = false
			yyq2542[0] = len(x.Ingress) != 0
			var yynn2542 int
			if yyr2542 || yy2arr2542 {
				r.EncodeArrayStart(1)
			} else {
				yynn2542 = 0
				for _, b := range yyq2542 {
					if b {
						yynn2542++
					}
				}
				r.EncodeMapStart(yynn2542)
				yynn2542 = 0
			}
			if yyr2542 || yy2arr2542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2542[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2544 := z.EncBinary()
						_ = yym2544
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2542[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2545 := z.EncBinary()
						_ = yym2545
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2542 || yy2arr2542 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2546 := z.DecBinary()
	_ = yym2546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2547 := r.ContainerType()
		if yyct2547 == codecSelferValueTypeMap1234 {
			yyl2547 := r.ReadMapStart()
			if yyl2547 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2547, d)
			}
		} else if yyct2547 == codecSelferValueTypeArray1234 {
			yyl2547 := r.ReadArrayStart()
			if yyl2547 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2547, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2548Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2548Slc
	var yyhl2548 bool = l >= 0
	for yyj2548 := 0; ; yyj2548++ {
		if yyhl2548 {
			if yyj2548 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2548Slc = r.DecodeBytes(yys2548Slc, true, true)
		yys2548 := string(yys2548Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2548 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2549 := &x.Ingress
				yym2550 := z.DecBinary()
				_ = yym2550
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2549), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2548)
		} // end switch yys2548
	} // end for yyj2548
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2551 int
	var yyb2551 bool
	var yyhl2551 bool = l >= 0
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2552 := &x.Ingress
		yym2553 := z.DecBinary()
		_ = yym2553
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2552), d)
		}
	}
	for {
		yyj2551++
		if yyhl2551 {
			yyb2551 = yyj2551 > l
		} else {
			yyb2551 = r.CheckBreak()
		}
		if yyb2551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2554 := z.EncBinary()
		_ = yym2554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2555 := !z.EncBinary()
			yy2arr2555 := z.EncBasicHandle().StructToArray
			var yyq2555 [2]bool
			_, _, _ = yysep2555, yyq2555, yy2arr2555
			const yyr2555 bool = false
			yyq2555[0] = x.IP != ""
			yyq2555[1] = x.Hostname != ""
			var yynn2555 int
			if yyr2555 || yy2arr2555 {
				r.EncodeArrayStart(2)
			} else {
				yynn2555 = 0
				for _, b := range yyq2555 {
					if b {
						yynn2555++
					}
				}
				r.EncodeMapStart(yynn2555)
				yynn2555 = 0
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2555[0] {
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2555[1] {
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2562 := z.DecBinary()
	_ = yym2562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2563 := r.ContainerType()
		if yyct2563 == codecSelferValueTypeMap1234 {
			yyl2563 := r.ReadMapStart()
			if yyl2563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2563, d)
			}
		} else if yyct2563 == codecSelferValueTypeArray1234 {
			yyl2563 := r.ReadArrayStart()
			if yyl2563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2564Slc
	var yyhl2564 bool = l >= 0
	for yyj2564 := 0; ; yyj2564++ {
		if yyhl2564 {
			if yyj2564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2564Slc = r.DecodeBytes(yys2564Slc, true, true)
		yys2564 := string(yys2564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2564 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2564)
		} // end switch yys2564
	} // end for yyj2564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2567 int
	var yyb2567 bool
	var yyhl2567 bool = l >= 0
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2567++
	if yyhl2567 {
		yyb2567 = yyj2567 > l
	} else {
		yyb2567 = r.CheckBreak()
	}
	if yyb2567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2567++
		if yyhl2567 {
			yyb2567 = yyj2567 > l
		} else {
			yyb2567 = r.CheckBreak()
		}
		if yyb2567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2570 := z.EncBinary()
		_ = yym2570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2571 := !z.EncBinary()
			yy2arr2571 := z.EncBasicHandle().StructToArray
			var yyq2571 [9]bool
			_, _, _ = yysep2571, yyq2571, yy2arr2571
			const yyr2571 bool = false
			yyq2571[0] = x.Type != ""
			yyq2571[3] = x.ClusterIP != ""
			yyq2571[5] = len(x.ExternalIPs) != 0
			yyq2571[6] = x.LoadBalancerIP != ""
			yyq2571[7] = x.SessionAffinity != ""
			yyq2571[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2571 int
			if yyr2571 || yy2arr2571 {
				r.EncodeArrayStart(9)
			} else {
				yynn2571 = 3
				for _, b := range yyq2571 {
					if b {
						yynn2571++
					}
				}
				r.EncodeMapStart(yynn2571)
				yynn2571 = 0
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2571[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2571[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2571[3] {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2571[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2583 := z.EncBinary()
				_ = yym2583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2584 := z.EncBinary()
				_ = yym2584
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2571[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2586 := z.EncBinary()
						_ = yym2586
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2571[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2587 := z.EncBinary()
						_ = yym2587
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2571[6] {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2571[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2571[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2571[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2571[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2593 := z.EncBinary()
						_ = yym2593
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2571[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2594 := z.EncBinary()
						_ = yym2594
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2595 := z.DecBinary()
	_ = yym2595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2596 := r.ContainerType()
		if yyct2596 == codecSelferValueTypeMap1234 {
			yyl2596 := r.ReadMapStart()
			if yyl2596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2596, d)
			}
		} else if yyct2596 == codecSelferValueTypeArray1234 {
			yyl2596 := r.ReadArrayStart()
			if yyl2596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2597Slc
	var yyhl2597 bool = l >= 0
	for yyj2597 := 0; ; yyj2597++ {
		if yyhl2597 {
			if yyj2597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2597Slc = r.DecodeBytes(yys2597Slc, true, true)
		yys2597 := string(yys2597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2597 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2599 := &x.Ports
				yym2600 := z.DecBinary()
				_ = yym2600
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2599), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2601 := &x.Selector
				yym2602 := z.DecBinary()
				_ = yym2602
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2601, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2605 := &x.ExternalIPs
				yym2606 := z.DecBinary()
				_ = yym2606
				if false {
				} else {
					z.F.DecSliceStringX(yyv2605, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2609 := &x.LoadBalancerSourceRanges
				yym2610 := z.DecBinary()
				_ = yym2610
				if false {
				} else {
					z.F.DecSliceStringX(yyv2609, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2597)
		} // end switch yys2597
	} // end for yyj2597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2611 int
	var yyb2611 bool
	var yyhl2611 bool = l >= 0
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2613 := &x.Ports
		yym2614 := z.DecBinary()
		_ = yym2614
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2613), d)
		}
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2615 := &x.Selector
		yym2616 := z.DecBinary()
		_ = yym2616
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2615, false, d)
		}
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2619 := &x.ExternalIPs
		yym2620 := z.DecBinary()
		_ = yym2620
		if false {
		} else {
			z.F.DecSliceStringX(yyv2619, false, d)
		}
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2611++
	if yyhl2611 {
		yyb2611 = yyj2611 > l
	} else {
		yyb2611 = r.CheckBreak()
	}
	if yyb2611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2623 := &x.LoadBalancerSourceRanges
		yym2624 := z.DecBinary()
		_ = yym2624
		if false {
		} else {
			z.F.DecSliceStringX(yyv2623, false, d)
		}
	}
	for {
		yyj2611++
		if yyhl2611 {
			yyb2611 = yyj2611 > l
		} else {
			yyb2611 = r.CheckBreak()
		}
		if yyb2611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2625 := z.EncBinary()
		_ = yym2625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2626 := !z.EncBinary()
			yy2arr2626 := z.EncBasicHandle().StructToArray
			var yyq2626 [5]bool
			_, _, _ = yysep2626, yyq2626, yy2arr2626
			const yyr2626 bool = false
			var yynn2626 int
			if yyr2626 || yy2arr2626 {
				r.EncodeArrayStart(5)
			} else {
				yynn2626 = 5
				for _, b := range yyq2626 {
					if b {
						yynn2626++
					}
				}
				r.EncodeMapStart(yynn2626)
				yynn2626 = 0
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2628 := z.EncBinary()
				_ = yym2628
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2629 := z.EncBinary()
				_ = yym2629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2632 := z.EncBinary()
				_ = yym2632
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2633 := z.EncBinary()
				_ = yym2633
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2635 := &x.TargetPort
				yym2636 := z.EncBinary()
				_ = yym2636
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2635) {
				} else if !yym2636 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2635)
				} else {
					z.EncFallback(yy2635)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2637 := &x.TargetPort
				yym2638 := z.EncBinary()
				_ = yym2638
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2637) {
				} else if !yym2638 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2637)
				} else {
					z.EncFallback(yy2637)
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2640 := z.EncBinary()
				_ = yym2640
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2641 := z.EncBinary()
				_ = yym2641
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2642 := z.DecBinary()
	_ = yym2642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2643 := r.ContainerType()
		if yyct2643 == codecSelferValueTypeMap1234 {
			yyl2643 := r.ReadMapStart()
			if yyl2643 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2643, d)
			}
		} else if yyct2643 == codecSelferValueTypeArray1234 {
			yyl2643 := r.ReadArrayStart()
			if yyl2643 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2643, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2644Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2644Slc
	var yyhl2644 bool = l >= 0
	for yyj2644 := 0; ; yyj2644++ {
		if yyhl2644 {
			if yyj2644 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2644Slc = r.DecodeBytes(yys2644Slc, true, true)
		yys2644 := string(yys2644Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2644 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2648 := &x.TargetPort
				yym2649 := z.DecBinary()
				_ = yym2649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2648) {
				} else if !yym2649 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2648)
				} else {
					z.DecFallback(yyv2648, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2644)
		} // end switch yys2644
	} // end for yyj2644
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2651 int
	var yyb2651 bool
	var yyhl2651 bool = l >= 0
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2655 := &x.TargetPort
		yym2656 := z.DecBinary()
		_ = yym2656
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2655) {
		} else if !yym2656 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2655)
		} else {
			z.DecFallback(yyv2655, false)
		}
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2651++
		if yyhl2651 {
			yyb2651 = yyj2651 > l
		} else {
			yyb2651 = r.CheckBreak()
		}
		if yyb2651 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2651-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2658 := z.EncBinary()
		_ = yym2658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2659 := !z.EncBinary()
			yy2arr2659 := z.EncBasicHandle().StructToArray
			var yyq2659 [5]bool
			_, _, _ = yysep2659, yyq2659, yy2arr2659
			const yyr2659 bool = false
			yyq2659[0] = x.Kind != ""
			yyq2659[1] = x.APIVersion != ""
			yyq2659[2] = true
			yyq2659[3] = true
			yyq2659[4] = true
			var yynn2659 int
			if yyr2659 || yy2arr2659 {
				r.EncodeArrayStart(5)
			} else {
				yynn2659 = 0
				for _, b := range yyq2659 {
					if b {
						yynn2659++
					}
				}
				r.EncodeMapStart(yynn2659)
				yynn2659 = 0
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[0] {
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2659[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2662 := z.EncBinary()
					_ = yym2662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[1] {
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2659[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[2] {
					yy2667 := &x.ObjectMeta
					yy2667.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2659[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2668 := &x.ObjectMeta
					yy2668.CodecEncodeSelf(e)
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[3] {
					yy2670 := &x.Spec
					yy2670.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2659[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2671 := &x.Spec
					yy2671.CodecEncodeSelf(e)
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[4] {
					yy2673 := &x.Status
					yy2673.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2659[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2674 := &x.Status
					yy2674.CodecEncodeSelf(e)
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2675 := z.DecBinary()
	_ = yym2675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2676 := r.ContainerType()
		if yyct2676 == codecSelferValueTypeMap1234 {
			yyl2676 := r.ReadMapStart()
			if yyl2676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2676, d)
			}
		} else if yyct2676 == codecSelferValueTypeArray1234 {
			yyl2676 := r.ReadArrayStart()
			if yyl2676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2677Slc
	var yyhl2677 bool = l >= 0
	for yyj2677 := 0; ; yyj2677++ {
		if yyhl2677 {
			if yyj2677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2677Slc = r.DecodeBytes(yys2677Slc, true, true)
		yys2677 := string(yys2677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2677 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2680 := &x.ObjectMeta
				yyv2680.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2681 := &x.Spec
				yyv2681.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2682 := &x.Status
				yyv2682.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2677)
		} // end switch yys2677
	} // end for yyj2677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2683 int
	var yyb2683 bool
	var yyhl2683 bool = l >= 0
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2686 := &x.ObjectMeta
		yyv2686.CodecDecodeSelf(d)
	}
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2687 := &x.Spec
		yyv2687.CodecDecodeSelf(d)
	}
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2688 := &x.Status
		yyv2688.CodecDecodeSelf(d)
	}
	for {
		yyj2683++
		if yyhl2683 {
			yyb2683 = yyj2683 > l
		} else {
			yyb2683 = r.CheckBreak()
		}
		if yyb2683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2689 := z.EncBinary()
		_ = yym2689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2690 := !z.EncBinary()
			yy2arr2690 := z.EncBasicHandle().StructToArray
			var yyq2690 [5]bool
			_, _, _ = yysep2690, yyq2690, yy2arr2690
			const yyr2690 bool = false
			yyq2690[0] = x.Kind != ""
			yyq2690[1] = x.APIVersion != ""
			yyq2690[2] = true
			yyq2690[4] = len(x.ImagePullSecrets) != 0
			var yynn2690 int
			if yyr2690 || yy2arr2690 {
				r.EncodeArrayStart(5)
			} else {
				yynn2690 = 1
				for _, b := range yyq2690 {
					if b {
						yynn2690++
					}
				}
				r.EncodeMapStart(yynn2690)
				yynn2690 = 0
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[0] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[1] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[2] {
					yy2698 := &x.ObjectMeta
					yy2698.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2690[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2699 := &x.ObjectMeta
					yy2699.CodecEncodeSelf(e)
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2690[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2704 := z.EncBinary()
						_ = yym2704
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2690[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2705 := z.EncBinary()
						_ = yym2705
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2706 := z.DecBinary()
	_ = yym2706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2707 := r.ContainerType()
		if yyct2707 == codecSelferValueTypeMap1234 {
			yyl2707 := r.ReadMapStart()
			if yyl2707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2707, d)
			}
		} else if yyct2707 == codecSelferValueTypeArray1234 {
			yyl2707 := r.ReadArrayStart()
			if yyl2707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2708Slc
	var yyhl2708 bool = l >= 0
	for yyj2708 := 0; ; yyj2708++ {
		if yyhl2708 {
			if yyj2708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2708Slc = r.DecodeBytes(yys2708Slc, true, true)
		yys2708 := string(yys2708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2708 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2711 := &x.ObjectMeta
				yyv2711.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2712 := &x.Secrets
				yym2713 := z.DecBinary()
				_ = yym2713
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2712), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2714 := &x.ImagePullSecrets
				yym2715 := z.DecBinary()
				_ = yym2715
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2714), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2708)
		} // end switch yys2708
	} // end for yyj2708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2716 int
	var yyb2716 bool
	var yyhl2716 bool = l >= 0
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2719 := &x.ObjectMeta
		yyv2719.CodecDecodeSelf(d)
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2720 := &x.Secrets
		yym2721 := z.DecBinary()
		_ = yym2721
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2720), d)
		}
	}
	yyj2716++
	if yyhl2716 {
		yyb2716 = yyj2716 > l
	} else {
		yyb2716 = r.CheckBreak()
	}
	if yyb2716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2722 := &x.ImagePullSecrets
		yym2723 := z.DecBinary()
		_ = yym2723
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2722), d)
		}
	}
	for {
		yyj2716++
		if yyhl2716 {
			yyb2716 = yyj2716 > l
		} else {
			yyb2716 = r.CheckBreak()
		}
		if yyb2716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2724 := z.EncBinary()
		_ = yym2724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2725 := !z.EncBinary()
			yy2arr2725 := z.EncBasicHandle().StructToArray
			var yyq2725 [4]bool
			_, _, _ = yysep2725, yyq2725, yy2arr2725
			const yyr2725 bool = false
			yyq2725[0] = x.Kind != ""
			yyq2725[1] = x.APIVersion != ""
			yyq2725[2] = true
			var yynn2725 int
			if yyr2725 || yy2arr2725 {
				r.EncodeArrayStart(4)
			} else {
				yynn2725 = 1
				for _, b := range yyq2725 {
					if b {
						yynn2725++
					}
				}
				r.EncodeMapStart(yynn2725)
				yynn2725 = 0
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[0] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[1] {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[2] {
					yy2733 := &x.ListMeta
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2733) {
					} else {
						z.EncFallback(yy2733)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2735 := &x.ListMeta
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2735) {
					} else {
						z.EncFallback(yy2735)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2740 := z.DecBinary()
	_ = yym2740
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2741 := r.ContainerType()
		if yyct2741 == codecSelferValueTypeMap1234 {
			yyl2741 := r.ReadMapStart()
			if yyl2741 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2741, d)
			}
		} else if yyct2741 == codecSelferValueTypeArray1234 {
			yyl2741 := r.ReadArrayStart()
			if yyl2741 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2741, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2742Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2742Slc
	var yyhl2742 bool = l >= 0
	for yyj2742 := 0; ; yyj2742++ {
		if yyhl2742 {
			if yyj2742 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2742Slc = r.DecodeBytes(yys2742Slc, true, true)
		yys2742 := string(yys2742Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2742 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2745 := &x.ListMeta
				yym2746 := z.DecBinary()
				_ = yym2746
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2745) {
				} else {
					z.DecFallback(yyv2745, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2747 := &x.Items
				yym2748 := z.DecBinary()
				_ = yym2748
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2747), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2742)
		} // end switch yys2742
	} // end for yyj2742
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2749 int
	var yyb2749 bool
	var yyhl2749 bool = l >= 0
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2752 := &x.ListMeta
		yym2753 := z.DecBinary()
		_ = yym2753
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2752) {
		} else {
			z.DecFallback(yyv2752, false)
		}
	}
	yyj2749++
	if yyhl2749 {
		yyb2749 = yyj2749 > l
	} else {
		yyb2749 = r.CheckBreak()
	}
	if yyb2749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2754 := &x.Items
		yym2755 := z.DecBinary()
		_ = yym2755
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2754), d)
		}
	}
	for {
		yyj2749++
		if yyhl2749 {
			yyb2749 = yyj2749 > l
		} else {
			yyb2749 = r.CheckBreak()
		}
		if yyb2749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2756 := z.EncBinary()
		_ = yym2756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2757 := !z.EncBinary()
			yy2arr2757 := z.EncBasicHandle().StructToArray
			var yyq2757 [4]bool
			_, _, _ = yysep2757, yyq2757, yy2arr2757
			const yyr2757 bool = false
			yyq2757[0] = x.Kind != ""
			yyq2757[1] = x.APIVersion != ""
			yyq2757[2] = true
			var yynn2757 int
			if yyr2757 || yy2arr2757 {
				r.EncodeArrayStart(4)
			} else {
				yynn2757 = 1
				for _, b := range yyq2757 {
					if b {
						yynn2757++
					}
				}
				r.EncodeMapStart(yynn2757)
				yynn2757 = 0
			}
			if yyr2757 || yy2arr2757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2757[0] {
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2757[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2757 || yy2arr2757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2757[1] {
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2757[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2757 || yy2arr2757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2757[2] {
					yy2765 := &x.ObjectMeta
					yy2765.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2757[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2766 := &x.ObjectMeta
					yy2766.CodecEncodeSelf(e)
				}
			}
			if yyr2757 || yy2arr2757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2757 || yy2arr2757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2770 := z.DecBinary()
	_ = yym2770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2771 := r.ContainerType()
		if yyct2771 == codecSelferValueTypeMap1234 {
			yyl2771 := r.ReadMapStart()
			if yyl2771 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2771, d)
			}
		} else if yyct2771 == codecSelferValueTypeArray1234 {
			yyl2771 := r.ReadArrayStart()
			if yyl2771 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2772Slc
	var yyhl2772 bool = l >= 0
	for yyj2772 := 0; ; yyj2772++ {
		if yyhl2772 {
			if yyj2772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2772Slc = r.DecodeBytes(yys2772Slc, true, true)
		yys2772 := string(yys2772Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2772 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2775 := &x.ObjectMeta
				yyv2775.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2776 := &x.Subsets
				yym2777 := z.DecBinary()
				_ = yym2777
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2776), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2772)
		} // end switch yys2772
	} // end for yyj2772
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2778 int
	var yyb2778 bool
	var yyhl2778 bool = l >= 0
	yyj2778++
	if yyhl2778 {
		yyb2778 = yyj2778 > l
	} else {
		yyb2778 = r.CheckBreak()
	}
	if yyb2778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2778++
	if yyhl2778 {
		yyb2778 = yyj2778 > l
	} else {
		yyb2778 = r.CheckBreak()
	}
	if yyb2778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2778++
	if yyhl2778 {
		yyb2778 = yyj2778 > l
	} else {
		yyb2778 = r.CheckBreak()
	}
	if yyb2778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2781 := &x.ObjectMeta
		yyv2781.CodecDecodeSelf(d)
	}
	yyj2778++
	if yyhl2778 {
		yyb2778 = yyj2778 > l
	} else {
		yyb2778 = r.CheckBreak()
	}
	if yyb2778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2782 := &x.Subsets
		yym2783 := z.DecBinary()
		_ = yym2783
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2782), d)
		}
	}
	for {
		yyj2778++
		if yyhl2778 {
			yyb2778 = yyj2778 > l
		} else {
			yyb2778 = r.CheckBreak()
		}
		if yyb2778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2784 := z.EncBinary()
		_ = yym2784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2785 := !z.EncBinary()
			yy2arr2785 := z.EncBasicHandle().StructToArray
			var yyq2785 [3]bool
			_, _, _ = yysep2785, yyq2785, yy2arr2785
			const yyr2785 bool = false
			var yynn2785 int
			if yyr2785 || yy2arr2785 {
				r.EncodeArrayStart(3)
			} else {
				yynn2785 = 3
				for _, b := range yyq2785 {
					if b {
						yynn2785++
					}
				}
				r.EncodeMapStart(yynn2785)
				yynn2785 = 0
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2785 || yy2arr2785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2795 := z.DecBinary()
	_ = yym2795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2796 := r.ContainerType()
		if yyct2796 == codecSelferValueTypeMap1234 {
			yyl2796 := r.ReadMapStart()
			if yyl2796 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2796, d)
			}
		} else if yyct2796 == codecSelferValueTypeArray1234 {
			yyl2796 := r.ReadArrayStart()
			if yyl2796 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2796, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2797Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2797Slc
	var yyhl2797 bool = l >= 0
	for yyj2797 := 0; ; yyj2797++ {
		if yyhl2797 {
			if yyj2797 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2797Slc = r.DecodeBytes(yys2797Slc, true, true)
		yys2797 := string(yys2797Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2797 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2798 := &x.Addresses
				yym2799 := z.DecBinary()
				_ = yym2799
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2798), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2800 := &x.NotReadyAddresses
				yym2801 := z.DecBinary()
				_ = yym2801
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2800), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2802 := &x.Ports
				yym2803 := z.DecBinary()
				_ = yym2803
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2802), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2797)
		} // end switch yys2797
	} // end for yyj2797
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2804 int
	var yyb2804 bool
	var yyhl2804 bool = l >= 0
	yyj2804++
	if yyhl2804 {
		yyb2804 = yyj2804 > l
	} else {
		yyb2804 = r.CheckBreak()
	}
	if yyb2804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2805 := &x.Addresses
		yym2806 := z.DecBinary()
		_ = yym2806
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2805), d)
		}
	}
	yyj2804++
	if yyhl2804 {
		yyb2804 = yyj2804 > l
	} else {
		yyb2804 = r.CheckBreak()
	}
	if yyb2804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2807 := &x.NotReadyAddresses
		yym2808 := z.DecBinary()
		_ = yym2808
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2807), d)
		}
	}
	yyj2804++
	if yyhl2804 {
		yyb2804 = yyj2804 > l
	} else {
		yyb2804 = r.CheckBreak()
	}
	if yyb2804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2809 := &x.Ports
		yym2810 := z.DecBinary()
		_ = yym2810
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2809), d)
		}
	}
	for {
		yyj2804++
		if yyhl2804 {
			yyb2804 = yyj2804 > l
		} else {
			yyb2804 = r.CheckBreak()
		}
		if yyb2804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2811 := z.EncBinary()
		_ = yym2811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2812 := !z.EncBinary()
			yy2arr2812 := z.EncBasicHandle().StructToArray
			var yyq2812 [4]bool
			_, _, _ = yysep2812, yyq2812, yy2arr2812
			const yyr2812 bool = false
			yyq2812[1] = x.Hostname != ""
			yyq2812[2] = x.NodeName != nil
			var yynn2812 int
			if yyr2812 || yy2arr2812 {
				r.EncodeArrayStart(4)
			} else {
				yynn2812 = 2
				for _, b := range yyq2812 {
					if b {
						yynn2812++
					}
				}
				r.EncodeMapStart(yynn2812)
				yynn2812 = 0
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2812[1] {
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2812[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2820 := *x.NodeName
						yym2821 := z.EncBinary()
						_ = yym2821
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2820))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2822 := *x.NodeName
						yym2823 := z.EncBinary()
						_ = yym2823
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2822))
						}
					}
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2825 := z.DecBinary()
	_ = yym2825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2826 := r.ContainerType()
		if yyct2826 == codecSelferValueTypeMap1234 {
			yyl2826 := r.ReadMapStart()
			if yyl2826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2826, d)
			}
		} else if yyct2826 == codecSelferValueTypeArray1234 {
			yyl2826 := r.ReadArrayStart()
			if yyl2826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2827Slc
	var yyhl2827 bool = l >= 0
	for yyj2827 := 0; ; yyj2827++ {
		if yyhl2827 {
			if yyj2827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2827Slc = r.DecodeBytes(yys2827Slc, true, true)
		yys2827 := string(yys2827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2827 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2831 := z.DecBinary()
				_ = yym2831
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2827)
		} // end switch yys2827
	} // end for yyj2827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2833 int
	var yyb2833 bool
	var yyhl2833 bool = l >= 0
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2837 := z.DecBinary()
		_ = yym2837
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2833++
		if yyhl2833 {
			yyb2833 = yyj2833 > l
		} else {
			yyb2833 = r.CheckBreak()
		}
		if yyb2833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2839 := z.EncBinary()
		_ = yym2839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2840 := !z.EncBinary()
			yy2arr2840 := z.EncBasicHandle().StructToArray
			var yyq2840 [3]bool
			_, _, _ = yysep2840, yyq2840, yy2arr2840
			const yyr2840 bool = false
			var yynn2840 int
			if yyr2840 || yy2arr2840 {
				r.EncodeArrayStart(3)
			} else {
				yynn2840 = 3
				for _, b := range yyq2840 {
					if b {
						yynn2840++
					}
				}
				r.EncodeMapStart(yynn2840)
				yynn2840 = 0
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2842 := z.EncBinary()
				_ = yym2842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2843 := z.EncBinary()
				_ = yym2843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2845 := z.EncBinary()
				_ = yym2845
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2846 := z.EncBinary()
				_ = yym2846
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2840 || yy2arr2840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2848 := z.DecBinary()
	_ = yym2848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2849 := r.ContainerType()
		if yyct2849 == codecSelferValueTypeMap1234 {
			yyl2849 := r.ReadMapStart()
			if yyl2849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2849, d)
			}
		} else if yyct2849 == codecSelferValueTypeArray1234 {
			yyl2849 := r.ReadArrayStart()
			if yyl2849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2850Slc
	var yyhl2850 bool = l >= 0
	for yyj2850 := 0; ; yyj2850++ {
		if yyhl2850 {
			if yyj2850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2850Slc = r.DecodeBytes(yys2850Slc, true, true)
		yys2850 := string(yys2850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2850 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2850)
		} // end switch yys2850
	} // end for yyj2850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2854 int
	var yyb2854 bool
	var yyhl2854 bool = l >= 0
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2854++
	if yyhl2854 {
		yyb2854 = yyj2854 > l
	} else {
		yyb2854 = r.CheckBreak()
	}
	if yyb2854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2854++
		if yyhl2854 {
			yyb2854 = yyj2854 > l
		} else {
			yyb2854 = r.CheckBreak()
		}
		if yyb2854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2858 := z.EncBinary()
		_ = yym2858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2859 := !z.EncBinary()
			yy2arr2859 := z.EncBasicHandle().StructToArray
			var yyq2859 [4]bool
			_, _, _ = yysep2859, yyq2859, yy2arr2859
			const yyr2859 bool = false
			yyq2859[0] = x.Kind != ""
			yyq2859[1] = x.APIVersion != ""
			yyq2859[2] = true
			var yynn2859 int
			if yyr2859 || yy2arr2859 {
				r.EncodeArrayStart(4)
			} else {
				yynn2859 = 1
				for _, b := range yyq2859 {
					if b {
						yynn2859++
					}
				}
				r.EncodeMapStart(yynn2859)
				yynn2859 = 0
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[0] {
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[1] {
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[2] {
					yy2867 := &x.ListMeta
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2867) {
					} else {
						z.EncFallback(yy2867)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2869 := &x.ListMeta
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2869) {
					} else {
						z.EncFallback(yy2869)
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2874 := z.DecBinary()
	_ = yym2874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2875 := r.ContainerType()
		if yyct2875 == codecSelferValueTypeMap1234 {
			yyl2875 := r.ReadMapStart()
			if yyl2875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2875, d)
			}
		} else if yyct2875 == codecSelferValueTypeArray1234 {
			yyl2875 := r.ReadArrayStart()
			if yyl2875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2876Slc
	var yyhl2876 bool = l >= 0
	for yyj2876 := 0; ; yyj2876++ {
		if yyhl2876 {
			if yyj2876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2876Slc = r.DecodeBytes(yys2876Slc, true, true)
		yys2876 := string(yys2876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2876 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2879 := &x.ListMeta
				yym2880 := z.DecBinary()
				_ = yym2880
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2879) {
				} else {
					z.DecFallback(yyv2879, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2881 := &x.Items
				yym2882 := z.DecBinary()
				_ = yym2882
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2881), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2876)
		} // end switch yys2876
	} // end for yyj2876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2883 int
	var yyb2883 bool
	var yyhl2883 bool = l >= 0
	yyj2883++
	if yyhl2883 {
		yyb2883 = yyj2883 > l
	} else {
		yyb2883 = r.CheckBreak()
	}
	if yyb2883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2883++
	if yyhl2883 {
		yyb2883 = yyj2883 > l
	} else {
		yyb2883 = r.CheckBreak()
	}
	if yyb2883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2883++
	if yyhl2883 {
		yyb2883 = yyj2883 > l
	} else {
		yyb2883 = r.CheckBreak()
	}
	if yyb2883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2886 := &x.ListMeta
		yym2887 := z.DecBinary()
		_ = yym2887
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2886) {
		} else {
			z.DecFallback(yyv2886, false)
		}
	}
	yyj2883++
	if yyhl2883 {
		yyb2883 = yyj2883 > l
	} else {
		yyb2883 = r.CheckBreak()
	}
	if yyb2883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2888 := &x.Items
		yym2889 := z.DecBinary()
		_ = yym2889
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2888), d)
		}
	}
	for {
		yyj2883++
		if yyhl2883 {
			yyb2883 = yyj2883 > l
		} else {
			yyb2883 = r.CheckBreak()
		}
		if yyb2883 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2883-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2890 := z.EncBinary()
		_ = yym2890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2891 := !z.EncBinary()
			yy2arr2891 := z.EncBasicHandle().StructToArray
			var yyq2891 [4]bool
			_, _, _ = yysep2891, yyq2891, yy2arr2891
			const yyr2891 bool = false
			yyq2891[0] = x.PodCIDR != ""
			yyq2891[1] = x.ExternalID != ""
			yyq2891[2] = x.ProviderID != ""
			yyq2891[3] = x.Unschedulable != false
			var yynn2891 int
			if yyr2891 || yy2arr2891 {
				r.EncodeArrayStart(4)
			} else {
				yynn2891 = 0
				for _, b := range yyq2891 {
					if b {
						yynn2891++
					}
				}
				r.EncodeMapStart(yynn2891)
				yynn2891 = 0
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2891[0] {
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2891[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2891[1] {
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2891[2] {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2891[3] {
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2891[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2891 || yy2arr2891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2904 := z.DecBinary()
	_ = yym2904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2905 := r.ContainerType()
		if yyct2905 == codecSelferValueTypeMap1234 {
			yyl2905 := r.ReadMapStart()
			if yyl2905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2905, d)
			}
		} else if yyct2905 == codecSelferValueTypeArray1234 {
			yyl2905 := r.ReadArrayStart()
			if yyl2905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2906Slc
	var yyhl2906 bool = l >= 0
	for yyj2906 := 0; ; yyj2906++ {
		if yyhl2906 {
			if yyj2906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2906Slc = r.DecodeBytes(yys2906Slc, true, true)
		yys2906 := string(yys2906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2906 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2906)
		} // end switch yys2906
	} // end for yyj2906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2911 int
	var yyb2911 bool
	var yyhl2911 bool = l >= 0
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2911++
		if yyhl2911 {
			yyb2911 = yyj2911 > l
		} else {
			yyb2911 = r.CheckBreak()
		}
		if yyb2911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2916 := z.EncBinary()
		_ = yym2916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2917 := !z.EncBinary()
			yy2arr2917 := z.EncBasicHandle().StructToArray
			var yyq2917 [1]bool
			_, _, _ = yysep2917, yyq2917, yy2arr2917
			const yyr2917 bool = false
			var yynn2917 int
			if yyr2917 || yy2arr2917 {
				r.EncodeArrayStart(1)
			} else {
				yynn2917 = 1
				for _, b := range yyq2917 {
					if b {
						yynn2917++
					}
				}
				r.EncodeMapStart(yynn2917)
				yynn2917 = 0
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2919 := z.EncBinary()
				_ = yym2919
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2920 := z.EncBinary()
				_ = yym2920
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2917 || yy2arr2917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2921 := z.DecBinary()
	_ = yym2921
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2922 := r.ContainerType()
		if yyct2922 == codecSelferValueTypeMap1234 {
			yyl2922 := r.ReadMapStart()
			if yyl2922 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2922, d)
			}
		} else if yyct2922 == codecSelferValueTypeArray1234 {
			yyl2922 := r.ReadArrayStart()
			if yyl2922 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2922, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2923Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2923Slc
	var yyhl2923 bool = l >= 0
	for yyj2923 := 0; ; yyj2923++ {
		if yyhl2923 {
			if yyj2923 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2923Slc = r.DecodeBytes(yys2923Slc, true, true)
		yys2923 := string(yys2923Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2923 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2923)
		} // end switch yys2923
	} // end for yyj2923
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2925 int
	var yyb2925 bool
	var yyhl2925 bool = l >= 0
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2925++
		if yyhl2925 {
			yyb2925 = yyj2925 > l
		} else {
			yyb2925 = r.CheckBreak()
		}
		if yyb2925 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2925-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2927 := z.EncBinary()
		_ = yym2927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2928 := !z.EncBinary()
			yy2arr2928 := z.EncBasicHandle().StructToArray
			var yyq2928 [1]bool
			_, _, _ = yysep2928, yyq2928, yy2arr2928
			const yyr2928 bool = false
			yyq2928[0] = true
			var yynn2928 int
			if yyr2928 || yy2arr2928 {
				r.EncodeArrayStart(1)
			} else {
				yynn2928 = 0
				for _, b := range yyq2928 {
					if b {
						yynn2928++
					}
				}
				r.EncodeMapStart(yynn2928)
				yynn2928 = 0
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2928[0] {
					yy2930 := &x.KubeletEndpoint
					yy2930.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2931 := &x.KubeletEndpoint
					yy2931.CodecEncodeSelf(e)
				}
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2932 := z.DecBinary()
	_ = yym2932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2933 := r.ContainerType()
		if yyct2933 == codecSelferValueTypeMap1234 {
			yyl2933 := r.ReadMapStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2933, d)
			}
		} else if yyct2933 == codecSelferValueTypeArray1234 {
			yyl2933 := r.ReadArrayStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2934Slc
	var yyhl2934 bool = l >= 0
	for yyj2934 := 0; ; yyj2934++ {
		if yyhl2934 {
			if yyj2934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2934Slc = r.DecodeBytes(yys2934Slc, true, true)
		yys2934 := string(yys2934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2934 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2935 := &x.KubeletEndpoint
				yyv2935.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2934)
		} // end switch yys2934
	} // end for yyj2934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2936 int
	var yyb2936 bool
	var yyhl2936 bool = l >= 0
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2937 := &x.KubeletEndpoint
		yyv2937.CodecDecodeSelf(d)
	}
	for {
		yyj2936++
		if yyhl2936 {
			yyb2936 = yyj2936 > l
		} else {
			yyb2936 = r.CheckBreak()
		}
		if yyb2936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2938 := z.EncBinary()
		_ = yym2938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2939 := !z.EncBinary()
			yy2arr2939 := z.EncBasicHandle().StructToArray
			var yyq2939 [10]bool
			_, _, _ = yysep2939, yyq2939, yy2arr2939
			const yyr2939 bool = false
			var yynn2939 int
			if yyr2939 || yy2arr2939 {
				r.EncodeArrayStart(10)
			} else {
				yynn2939 = 10
				for _, b := range yyq2939 {
					if b {
						yynn2939++
					}
				}
				r.EncodeMapStart(yynn2939)
				yynn2939 = 0
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2941 := z.EncBinary()
				_ = yym2941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2942 := z.EncBinary()
				_ = yym2942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2944 := z.EncBinary()
				_ = yym2944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2945 := z.EncBinary()
				_ = yym2945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2947 := z.EncBinary()
				_ = yym2947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2950 := z.EncBinary()
				_ = yym2950
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2951 := z.EncBinary()
				_ = yym2951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2953 := z.EncBinary()
				_ = yym2953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2954 := z.EncBinary()
				_ = yym2954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2956 := z.EncBinary()
				_ = yym2956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2957 := z.EncBinary()
				_ = yym2957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2959 := z.EncBinary()
				_ = yym2959
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2960 := z.EncBinary()
				_ = yym2960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2962 := z.EncBinary()
				_ = yym2962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2963 := z.EncBinary()
				_ = yym2963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2965 := z.EncBinary()
				_ = yym2965
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2966 := z.EncBinary()
				_ = yym2966
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2968 := z.EncBinary()
				_ = yym2968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2969 := z.EncBinary()
				_ = yym2969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2970 := z.DecBinary()
	_ = yym2970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2971 := r.ContainerType()
		if yyct2971 == codecSelferValueTypeMap1234 {
			yyl2971 := r.ReadMapStart()
			if yyl2971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2971, d)
			}
		} else if yyct2971 == codecSelferValueTypeArray1234 {
			yyl2971 := r.ReadArrayStart()
			if yyl2971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2972Slc
	var yyhl2972 bool = l >= 0
	for yyj2972 := 0; ; yyj2972++ {
		if yyhl2972 {
			if yyj2972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2972Slc = r.DecodeBytes(yys2972Slc, true, true)
		yys2972 := string(yys2972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2972 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2972)
		} // end switch yys2972
	} // end for yyj2972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2983 int
	var yyb2983 bool
	var yyhl2983 bool = l >= 0
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2983++
		if yyhl2983 {
			yyb2983 = yyj2983 > l
		} else {
			yyb2983 = r.CheckBreak()
		}
		if yyb2983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2994 := z.EncBinary()
		_ = yym2994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2995 := !z.EncBinary()
			yy2arr2995 := z.EncBasicHandle().StructToArray
			var yyq2995 [10]bool
			_, _, _ = yysep2995, yyq2995, yy2arr2995
			const yyr2995 bool = false
			yyq2995[0] = len(x.Capacity) != 0
			yyq2995[1] = len(x.Allocatable) != 0
			yyq2995[2] = x.Phase != ""
			yyq2995[3] = len(x.Conditions) != 0
			yyq2995[4] = len(x.Addresses) != 0
			yyq2995[5] = true
			yyq2995[6] = true
			yyq2995[7] = len(x.Images) != 0
			yyq2995[8] = len(x.VolumesInUse) != 0
			yyq2995[9] = len(x.VolumesAttached) != 0
			var yynn2995 int
			if yyr2995 || yy2arr2995 {
				r.EncodeArrayStart(10)
			} else {
				yynn2995 = 0
				for _, b := range yyq2995 {
					if b {
						yynn2995++
					}
				}
				r.EncodeMapStart(yynn2995)
				yynn2995 = 0
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2995[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3000 := z.EncBinary()
						_ = yym3000
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3001 := z.EncBinary()
						_ = yym3001
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3003 := z.EncBinary()
						_ = yym3003
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3004 := z.EncBinary()
						_ = yym3004
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[5] {
					yy3006 := &x.DaemonEndpoints
					yy3006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3007 := &x.DaemonEndpoints
					yy3007.CodecEncodeSelf(e)
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[6] {
					yy3009 := &x.NodeInfo
					yy3009.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3010 := &x.NodeInfo
					yy3010.CodecEncodeSelf(e)
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3012 := z.EncBinary()
						_ = yym3012
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3013 := z.EncBinary()
						_ = yym3013
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3015 := z.EncBinary()
						_ = yym3015
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3016 := z.EncBinary()
						_ = yym3016
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2995[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3018 := z.EncBinary()
						_ = yym3018
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3019 := z.EncBinary()
						_ = yym3019
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3020 := z.DecBinary()
	_ = yym3020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3021 := r.ContainerType()
		if yyct3021 == codecSelferValueTypeMap1234 {
			yyl3021 := r.ReadMapStart()
			if yyl3021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3021, d)
			}
		} else if yyct3021 == codecSelferValueTypeArray1234 {
			yyl3021 := r.ReadArrayStart()
			if yyl3021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3022Slc
	var yyhl3022 bool = l >= 0
	for yyj3022 := 0; ; yyj3022++ {
		if yyhl3022 {
			if yyj3022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3022Slc = r.DecodeBytes(yys3022Slc, true, true)
		yys3022 := string(yys3022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3022 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3023 := &x.Capacity
				yyv3023.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3024 := &x.Allocatable
				yyv3024.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3026 := &x.Conditions
				yym3027 := z.DecBinary()
				_ = yym3027
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3026), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3028 := &x.Addresses
				yym3029 := z.DecBinary()
				_ = yym3029
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3028), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3030 := &x.DaemonEndpoints
				yyv3030.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3031 := &x.NodeInfo
				yyv3031.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3032 := &x.Images
				yym3033 := z.DecBinary()
				_ = yym3033
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3032), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3034 := &x.VolumesInUse
				yym3035 := z.DecBinary()
				_ = yym3035
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3034), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3036 := &x.VolumesAttached
				yym3037 := z.DecBinary()
				_ = yym3037
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3036), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3022)
		} // end switch yys3022
	} // end for yyj3022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3038 int
	var yyb3038 bool
	var yyhl3038 bool = l >= 0
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3039 := &x.Capacity
		yyv3039.CodecDecodeSelf(d)
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3040 := &x.Allocatable
		yyv3040.CodecDecodeSelf(d)
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3042 := &x.Conditions
		yym3043 := z.DecBinary()
		_ = yym3043
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3042), d)
		}
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3044 := &x.Addresses
		yym3045 := z.DecBinary()
		_ = yym3045
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3044), d)
		}
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3046 := &x.DaemonEndpoints
		yyv3046.CodecDecodeSelf(d)
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3047 := &x.NodeInfo
		yyv3047.CodecDecodeSelf(d)
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3048 := &x.Images
		yym3049 := z.DecBinary()
		_ = yym3049
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3048), d)
		}
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3050 := &x.VolumesInUse
		yym3051 := z.DecBinary()
		_ = yym3051
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3050), d)
		}
	}
	yyj3038++
	if yyhl3038 {
		yyb3038 = yyj3038 > l
	} else {
		yyb3038 = r.CheckBreak()
	}
	if yyb3038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3052 := &x.VolumesAttached
		yym3053 := z.DecBinary()
		_ = yym3053
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3052), d)
		}
	}
	for {
		yyj3038++
		if yyhl3038 {
			yyb3038 = yyj3038 > l
		} else {
			yyb3038 = r.CheckBreak()
		}
		if yyb3038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3054 := z.EncBinary()
	_ = yym3054
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3055 := z.DecBinary()
	_ = yym3055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3056 := z.EncBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3057 := !z.EncBinary()
			yy2arr3057 := z.EncBasicHandle().StructToArray
			var yyq3057 [2]bool
			_, _, _ = yysep3057, yyq3057, yy2arr3057
			const yyr3057 bool = false
			var yynn3057 int
			if yyr3057 || yy2arr3057 {
				r.EncodeArrayStart(2)
			} else {
				yynn3057 = 2
				for _, b := range yyq3057 {
					if b {
						yynn3057++
					}
				}
				r.EncodeMapStart(yynn3057)
				yynn3057 = 0
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3060 := z.EncBinary()
				_ = yym3060
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3061 := z.EncBinary()
				_ = yym3061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3062 := z.DecBinary()
	_ = yym3062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3063 := r.ContainerType()
		if yyct3063 == codecSelferValueTypeMap1234 {
			yyl3063 := r.ReadMapStart()
			if yyl3063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3063, d)
			}
		} else if yyct3063 == codecSelferValueTypeArray1234 {
			yyl3063 := r.ReadArrayStart()
			if yyl3063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3064Slc
	var yyhl3064 bool = l >= 0
	for yyj3064 := 0; ; yyj3064++ {
		if yyhl3064 {
			if yyj3064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3064Slc = r.DecodeBytes(yys3064Slc, true, true)
		yys3064 := string(yys3064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3064 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3064)
		} // end switch yys3064
	} // end for yyj3064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3067 int
	var yyb3067 bool
	var yyhl3067 bool = l >= 0
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3067++
	if yyhl3067 {
		yyb3067 = yyj3067 > l
	} else {
		yyb3067 = r.CheckBreak()
	}
	if yyb3067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3067++
		if yyhl3067 {
			yyb3067 = yyj3067 > l
		} else {
			yyb3067 = r.CheckBreak()
		}
		if yyb3067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [1]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			yyq3071[0] = len(x.PreferAvoidPods) != 0
			var yynn3071 int
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(1)
			} else {
				yynn3071 = 0
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
				yynn3071 = 0
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3071[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3073 := z.EncBinary()
						_ = yym3073
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3074 := z.EncBinary()
						_ = yym3074
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3075 := z.DecBinary()
	_ = yym3075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3076 := r.ContainerType()
		if yyct3076 == codecSelferValueTypeMap1234 {
			yyl3076 := r.ReadMapStart()
			if yyl3076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3076, d)
			}
		} else if yyct3076 == codecSelferValueTypeArray1234 {
			yyl3076 := r.ReadArrayStart()
			if yyl3076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3077Slc
	var yyhl3077 bool = l >= 0
	for yyj3077 := 0; ; yyj3077++ {
		if yyhl3077 {
			if yyj3077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3077Slc = r.DecodeBytes(yys3077Slc, true, true)
		yys3077 := string(yys3077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3077 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3078 := &x.PreferAvoidPods
				yym3079 := z.DecBinary()
				_ = yym3079
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3078), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3077)
		} // end switch yys3077
	} // end for yyj3077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3080 int
	var yyb3080 bool
	var yyhl3080 bool = l >= 0
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3081 := &x.PreferAvoidPods
		yym3082 := z.DecBinary()
		_ = yym3082
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3081), d)
		}
	}
	for {
		yyj3080++
		if yyhl3080 {
			yyb3080 = yyj3080 > l
		} else {
			yyb3080 = r.CheckBreak()
		}
		if yyb3080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3083 := z.EncBinary()
		_ = yym3083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3084 := !z.EncBinary()
			yy2arr3084 := z.EncBasicHandle().StructToArray
			var yyq3084 [4]bool
			_, _, _ = yysep3084, yyq3084, yy2arr3084
			const yyr3084 bool = false
			yyq3084[1] = true
			yyq3084[2] = x.Reason != ""
			yyq3084[3] = x.Message != ""
			var yynn3084 int
			if yyr3084 || yy2arr3084 {
				r.EncodeArrayStart(4)
			} else {
				yynn3084 = 1
				for _, b := range yyq3084 {
					if b {
						yynn3084++
					}
				}
				r.EncodeMapStart(yynn3084)
				yynn3084 = 0
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3086 := &x.PodSignature
				yy3086.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3087 := &x.PodSignature
				yy3087.CodecEncodeSelf(e)
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[1] {
					yy3089 := &x.EvictionTime
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3089) {
					} else if yym3090 {
						z.EncBinaryMarshal(yy3089)
					} else if !yym3090 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3089)
					} else {
						z.EncFallback(yy3089)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3084[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3091 := &x.EvictionTime
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3091) {
					} else if yym3092 {
						z.EncBinaryMarshal(yy3091)
					} else if !yym3092 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3091)
					} else {
						z.EncFallback(yy3091)
					}
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[2] {
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3084[3] {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3084 || yy2arr3084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3099 := z.DecBinary()
	_ = yym3099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3100 := r.ContainerType()
		if yyct3100 == codecSelferValueTypeMap1234 {
			yyl3100 := r.ReadMapStart()
			if yyl3100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3100, d)
			}
		} else if yyct3100 == codecSelferValueTypeArray1234 {
			yyl3100 := r.ReadArrayStart()
			if yyl3100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3101Slc
	var yyhl3101 bool = l >= 0
	for yyj3101 := 0; ; yyj3101++ {
		if yyhl3101 {
			if yyj3101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3101Slc = r.DecodeBytes(yys3101Slc, true, true)
		yys3101 := string(yys3101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3101 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3102 := &x.PodSignature
				yyv3102.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3103 := &x.EvictionTime
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3103) {
				} else if yym3104 {
					z.DecBinaryUnmarshal(yyv3103)
				} else if !yym3104 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3103)
				} else {
					z.DecFallback(yyv3103, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3101)
		} // end switch yys3101
	} // end for yyj3101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3107 int
	var yyb3107 bool
	var yyhl3107 bool = l >= 0
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3108 := &x.PodSignature
		yyv3108.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3109 := &x.EvictionTime
		yym3110 := z.DecBinary()
		_ = yym3110
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3109) {
		} else if yym3110 {
			z.DecBinaryUnmarshal(yyv3109)
		} else if !yym3110 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3109)
		} else {
			z.DecFallback(yyv3109, false)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3107++
		if yyhl3107 {
			yyb3107 = yyj3107 > l
		} else {
			yyb3107 = r.CheckBreak()
		}
		if yyb3107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3113 := z.EncBinary()
		_ = yym3113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3114 := !z.EncBinary()
			yy2arr3114 := z.EncBasicHandle().StructToArray
			var yyq3114 [1]bool
			_, _, _ = yysep3114, yyq3114, yy2arr3114
			const yyr3114 bool = false
			yyq3114[0] = x.PodController != nil
			var yynn3114 int
			if yyr3114 || yy2arr3114 {
				r.EncodeArrayStart(1)
			} else {
				yynn3114 = 0
				for _, b := range yyq3114 {
					if b {
						yynn3114++
					}
				}
				r.EncodeMapStart(yynn3114)
				yynn3114 = 0
			}
			if yyr3114 || yy2arr3114 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3114[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3114[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3114 || yy2arr3114 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3116 := z.DecBinary()
	_ = yym3116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3117 := r.ContainerType()
		if yyct3117 == codecSelferValueTypeMap1234 {
			yyl3117 := r.ReadMapStart()
			if yyl3117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3117, d)
			}
		} else if yyct3117 == codecSelferValueTypeArray1234 {
			yyl3117 := r.ReadArrayStart()
			if yyl3117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3118Slc
	var yyhl3118 bool = l >= 0
	for yyj3118 := 0; ; yyj3118++ {
		if yyhl3118 {
			if yyj3118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3118Slc = r.DecodeBytes(yys3118Slc, true, true)
		yys3118 := string(yys3118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3118 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3118)
		} // end switch yys3118
	} // end for yyj3118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3120 int
	var yyb3120 bool
	var yyhl3120 bool = l >= 0
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3120++
		if yyhl3120 {
			yyb3120 = yyj3120 > l
		} else {
			yyb3120 = r.CheckBreak()
		}
		if yyb3120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3122 := z.EncBinary()
		_ = yym3122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3123 := !z.EncBinary()
			yy2arr3123 := z.EncBasicHandle().StructToArray
			var yyq3123 [2]bool
			_, _, _ = yysep3123, yyq3123, yy2arr3123
			const yyr3123 bool = false
			yyq3123[1] = x.SizeBytes != 0
			var yynn3123 int
			if yyr3123 || yy2arr3123 {
				r.EncodeArrayStart(2)
			} else {
				yynn3123 = 1
				for _, b := range yyq3123 {
					if b {
						yynn3123++
					}
				}
				r.EncodeMapStart(yynn3123)
				yynn3123 = 0
			}
			if yyr3123 || yy2arr3123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3123 || yy2arr3123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3123[1] {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3123 || yy2arr3123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3130 := z.DecBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3131 := r.ContainerType()
		if yyct3131 == codecSelferValueTypeMap1234 {
			yyl3131 := r.ReadMapStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3131, d)
			}
		} else if yyct3131 == codecSelferValueTypeArray1234 {
			yyl3131 := r.ReadArrayStart()
			if yyl3131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3132Slc
	var yyhl3132 bool = l >= 0
	for yyj3132 := 0; ; yyj3132++ {
		if yyhl3132 {
			if yyj3132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3132Slc = r.DecodeBytes(yys3132Slc, true, true)
		yys3132 := string(yys3132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3132 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3133 := &x.Names
				yym3134 := z.DecBinary()
				_ = yym3134
				if false {
				} else {
					z.F.DecSliceStringX(yyv3133, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3132)
		} // end switch yys3132
	} // end for yyj3132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3136 int
	var yyb3136 bool
	var yyhl3136 bool = l >= 0
	yyj3136++
	if yyhl3136 {
		yyb3136 = yyj3136 > l
	} else {
		yyb3136 = r.CheckBreak()
	}
	if yyb3136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3137 := &x.Names
		yym3138 := z.DecBinary()
		_ = yym3138
		if false {
		} else {
			z.F.DecSliceStringX(yyv3137, false, d)
		}
	}
	yyj3136++
	if yyhl3136 {
		yyb3136 = yyj3136 > l
	} else {
		yyb3136 = r.CheckBreak()
	}
	if yyb3136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3136++
		if yyhl3136 {
			yyb3136 = yyj3136 > l
		} else {
			yyb3136 = r.CheckBreak()
		}
		if yyb3136 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3136-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3140 := z.EncBinary()
	_ = yym3140
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3141 := z.DecBinary()
	_ = yym3141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3142 := z.EncBinary()
	_ = yym3142
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3143 := z.DecBinary()
	_ = yym3143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3144 := z.EncBinary()
		_ = yym3144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3145 := !z.EncBinary()
			yy2arr3145 := z.EncBasicHandle().StructToArray
			var yyq3145 [6]bool
			_, _, _ = yysep3145, yyq3145, yy2arr3145
			const yyr3145 bool = false
			yyq3145[2] = true
			yyq3145[3] = true
			yyq3145[4] = x.Reason != ""
			yyq3145[5] = x.Message != ""
			var yynn3145 int
			if yyr3145 || yy2arr3145 {
				r.EncodeArrayStart(6)
			} else {
				yynn3145 = 2
				for _, b := range yyq3145 {
					if b {
						yynn3145++
					}
				}
				r.EncodeMapStart(yynn3145)
				yynn3145 = 0
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[2] {
					yy3149 := &x.LastHeartbeatTime
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3149) {
					} else if yym3150 {
						z.EncBinaryMarshal(yy3149)
					} else if !yym3150 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3149)
					} else {
						z.EncFallback(yy3149)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3145[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3151 := &x.LastHeartbeatTime
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3151) {
					} else if yym3152 {
						z.EncBinaryMarshal(yy3151)
					} else if !yym3152 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3151)
					} else {
						z.EncFallback(yy3151)
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[3] {
					yy3154 := &x.LastTransitionTime
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3154) {
					} else if yym3155 {
						z.EncBinaryMarshal(yy3154)
					} else if !yym3155 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3154)
					} else {
						z.EncFallback(yy3154)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3145[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3156 := &x.LastTransitionTime
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3156) {
					} else if yym3157 {
						z.EncBinaryMarshal(yy3156)
					} else if !yym3157 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3156)
					} else {
						z.EncFallback(yy3156)
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[4] {
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3145[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3145[5] {
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3145[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3145 || yy2arr3145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3164 := z.DecBinary()
	_ = yym3164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3165 := r.ContainerType()
		if yyct3165 == codecSelferValueTypeMap1234 {
			yyl3165 := r.ReadMapStart()
			if yyl3165 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3165, d)
			}
		} else if yyct3165 == codecSelferValueTypeArray1234 {
			yyl3165 := r.ReadArrayStart()
			if yyl3165 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3166Slc
	var yyhl3166 bool = l >= 0
	for yyj3166 := 0; ; yyj3166++ {
		if yyhl3166 {
			if yyj3166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3166Slc = r.DecodeBytes(yys3166Slc, true, true)
		yys3166 := string(yys3166Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3166 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3169 := &x.LastHeartbeatTime
				yym3170 := z.DecBinary()
				_ = yym3170
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3169) {
				} else if yym3170 {
					z.DecBinaryUnmarshal(yyv3169)
				} else if !yym3170 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3169)
				} else {
					z.DecFallback(yyv3169, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3171 := &x.LastTransitionTime
				yym3172 := z.DecBinary()
				_ = yym3172
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3171) {
				} else if yym3172 {
					z.DecBinaryUnmarshal(yyv3171)
				} else if !yym3172 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3171)
				} else {
					z.DecFallback(yyv3171, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3166)
		} // end switch yys3166
	} // end for yyj3166
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3175 int
	var yyb3175 bool
	var yyhl3175 bool = l >= 0
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3178 := &x.LastHeartbeatTime
		yym3179 := z.DecBinary()
		_ = yym3179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3178) {
		} else if yym3179 {
			z.DecBinaryUnmarshal(yyv3178)
		} else if !yym3179 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3178)
		} else {
			z.DecFallback(yyv3178, false)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3180 := &x.LastTransitionTime
		yym3181 := z.DecBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3180) {
		} else if yym3181 {
			z.DecBinaryUnmarshal(yyv3180)
		} else if !yym3181 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3180)
		} else {
			z.DecFallback(yyv3180, false)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3175++
		if yyhl3175 {
			yyb3175 = yyj3175 > l
		} else {
			yyb3175 = r.CheckBreak()
		}
		if yyb3175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3184 := z.EncBinary()
	_ = yym3184
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3185 := z.DecBinary()
	_ = yym3185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3186 := z.EncBinary()
		_ = yym3186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3187 := !z.EncBinary()
			yy2arr3187 := z.EncBasicHandle().StructToArray
			var yyq3187 [2]bool
			_, _, _ = yysep3187, yyq3187, yy2arr3187
			const yyr3187 bool = false
			var yynn3187 int
			if yyr3187 || yy2arr3187 {
				r.EncodeArrayStart(2)
			} else {
				yynn3187 = 2
				for _, b := range yyq3187 {
					if b {
						yynn3187++
					}
				}
				r.EncodeMapStart(yynn3187)
				yynn3187 = 0
			}
			if yyr3187 || yy2arr3187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3187 || yy2arr3187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3190 := z.EncBinary()
				_ = yym3190
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3191 := z.EncBinary()
				_ = yym3191
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3187 || yy2arr3187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3193 := r.ContainerType()
		if yyct3193 == codecSelferValueTypeMap1234 {
			yyl3193 := r.ReadMapStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3193, d)
			}
		} else if yyct3193 == codecSelferValueTypeArray1234 {
			yyl3193 := r.ReadArrayStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3194Slc
	var yyhl3194 bool = l >= 0
	for yyj3194 := 0; ; yyj3194++ {
		if yyhl3194 {
			if yyj3194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3194Slc = r.DecodeBytes(yys3194Slc, true, true)
		yys3194 := string(yys3194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3194 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3194)
		} // end switch yys3194
	} // end for yyj3194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3197 int
	var yyb3197 bool
	var yyhl3197 bool = l >= 0
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3197++
		if yyhl3197 {
			yyb3197 = yyj3197 > l
		} else {
			yyb3197 = r.CheckBreak()
		}
		if yyb3197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3200 := z.EncBinary()
		_ = yym3200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3201 := !z.EncBinary()
			yy2arr3201 := z.EncBasicHandle().StructToArray
			var yyq3201 [1]bool
			_, _, _ = yysep3201, yyq3201, yy2arr3201
			const yyr3201 bool = false
			yyq3201[0] = len(x.Capacity) != 0
			var yynn3201 int
			if yyr3201 || yy2arr3201 {
				r.EncodeArrayStart(1)
			} else {
				yynn3201 = 0
				for _, b := range yyq3201 {
					if b {
						yynn3201++
					}
				}
				r.EncodeMapStart(yynn3201)
				yynn3201 = 0
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3201[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3201 || yy2arr3201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3203 := z.DecBinary()
	_ = yym3203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3204 := r.ContainerType()
		if yyct3204 == codecSelferValueTypeMap1234 {
			yyl3204 := r.ReadMapStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3204, d)
			}
		} else if yyct3204 == codecSelferValueTypeArray1234 {
			yyl3204 := r.ReadArrayStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3205Slc
	var yyhl3205 bool = l >= 0
	for yyj3205 := 0; ; yyj3205++ {
		if yyhl3205 {
			if yyj3205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3205Slc = r.DecodeBytes(yys3205Slc, true, true)
		yys3205 := string(yys3205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3205 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3206 := &x.Capacity
				yyv3206.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3205)
		} // end switch yys3205
	} // end for yyj3205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3207 int
	var yyb3207 bool
	var yyhl3207 bool = l >= 0
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3208 := &x.Capacity
		yyv3208.CodecDecodeSelf(d)
	}
	for {
		yyj3207++
		if yyhl3207 {
			yyb3207 = yyj3207 > l
		} else {
			yyb3207 = r.CheckBreak()
		}
		if yyb3207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3209 := z.EncBinary()
	_ = yym3209
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3210 := z.DecBinary()
	_ = yym3210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3211 := z.EncBinary()
		_ = yym3211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3213 := z.EncBinary()
		_ = yym3213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3214 := !z.EncBinary()
			yy2arr3214 := z.EncBasicHandle().StructToArray
			var yyq3214 [5]bool
			_, _, _ = yysep3214, yyq3214, yy2arr3214
			const yyr3214 bool = false
			yyq3214[0] = x.Kind != ""
			yyq3214[1] = x.APIVersion != ""
			yyq3214[2] = true
			yyq3214[3] = true
			yyq3214[4] = true
			var yynn3214 int
			if yyr3214 || yy2arr3214 {
				r.EncodeArrayStart(5)
			} else {
				yynn3214 = 0
				for _, b := range yyq3214 {
					if b {
						yynn3214++
					}
				}
				r.EncodeMapStart(yynn3214)
				yynn3214 = 0
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3214[0] {
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3214[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3214[1] {
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3214[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3214[2] {
					yy3222 := &x.ObjectMeta
					yy3222.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3214[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3223 := &x.ObjectMeta
					yy3223.CodecEncodeSelf(e)
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3214[3] {
					yy3225 := &x.Spec
					yy3225.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3214[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3226 := &x.Spec
					yy3226.CodecEncodeSelf(e)
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3214[4] {
					yy3228 := &x.Status
					yy3228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3214[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3229 := &x.Status
					yy3229.CodecEncodeSelf(e)
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3230 := z.DecBinary()
	_ = yym3230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3231 := r.ContainerType()
		if yyct3231 == codecSelferValueTypeMap1234 {
			yyl3231 := r.ReadMapStart()
			if yyl3231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3231, d)
			}
		} else if yyct3231 == codecSelferValueTypeArray1234 {
			yyl3231 := r.ReadArrayStart()
			if yyl3231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3232Slc
	var yyhl3232 bool = l >= 0
	for yyj3232 := 0; ; yyj3232++ {
		if yyhl3232 {
			if yyj3232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3232Slc = r.DecodeBytes(yys3232Slc, true, true)
		yys3232 := string(yys3232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3232 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3235 := &x.ObjectMeta
				yyv3235.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3236 := &x.Spec
				yyv3236.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3237 := &x.Status
				yyv3237.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3232)
		} // end switch yys3232
	} // end for yyj3232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3238 int
	var yyb3238 bool
	var yyhl3238 bool = l >= 0
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3241 := &x.ObjectMeta
		yyv3241.CodecDecodeSelf(d)
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3242 := &x.Spec
		yyv3242.CodecDecodeSelf(d)
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3243 := &x.Status
		yyv3243.CodecDecodeSelf(d)
	}
	for {
		yyj3238++
		if yyhl3238 {
			yyb3238 = yyj3238 > l
		} else {
			yyb3238 = r.CheckBreak()
		}
		if yyb3238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3244 := z.EncBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3245 := !z.EncBinary()
			yy2arr3245 := z.EncBasicHandle().StructToArray
			var yyq3245 [4]bool
			_, _, _ = yysep3245, yyq3245, yy2arr3245
			const yyr3245 bool = false
			yyq3245[0] = x.Kind != ""
			yyq3245[1] = x.APIVersion != ""
			yyq3245[2] = true
			var yynn3245 int
			if yyr3245 || yy2arr3245 {
				r.EncodeArrayStart(4)
			} else {
				yynn3245 = 1
				for _, b := range yyq3245 {
					if b {
						yynn3245++
					}
				}
				r.EncodeMapStart(yynn3245)
				yynn3245 = 0
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3245[0] {
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3245[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3245[1] {
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3245[2] {
					yy3253 := &x.ListMeta
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3253) {
					} else {
						z.EncFallback(yy3253)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3255 := &x.ListMeta
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3255) {
					} else {
						z.EncFallback(yy3255)
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3260 := z.DecBinary()
	_ = yym3260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3261 := r.ContainerType()
		if yyct3261 == codecSelferValueTypeMap1234 {
			yyl3261 := r.ReadMapStart()
			if yyl3261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3261, d)
			}
		} else if yyct3261 == codecSelferValueTypeArray1234 {
			yyl3261 := r.ReadArrayStart()
			if yyl3261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3262Slc
	var yyhl3262 bool = l >= 0
	for yyj3262 := 0; ; yyj3262++ {
		if yyhl3262 {
			if yyj3262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3262Slc = r.DecodeBytes(yys3262Slc, true, true)
		yys3262 := string(yys3262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3262 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3265 := &x.ListMeta
				yym3266 := z.DecBinary()
				_ = yym3266
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3265) {
				} else {
					z.DecFallback(yyv3265, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3267 := &x.Items
				yym3268 := z.DecBinary()
				_ = yym3268
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3267), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3262)
		} // end switch yys3262
	} // end for yyj3262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3269 int
	var yyb3269 bool
	var yyhl3269 bool = l >= 0
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3272 := &x.ListMeta
		yym3273 := z.DecBinary()
		_ = yym3273
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3272) {
		} else {
			z.DecFallback(yyv3272, false)
		}
	}
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3274 := &x.Items
		yym3275 := z.DecBinary()
		_ = yym3275
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3274), d)
		}
	}
	for {
		yyj3269++
		if yyhl3269 {
			yyb3269 = yyj3269 > l
		} else {
			yyb3269 = r.CheckBreak()
		}
		if yyb3269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3276 := z.EncBinary()
		_ = yym3276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3277 := !z.EncBinary()
			yy2arr3277 := z.EncBasicHandle().StructToArray
			var yyq3277 [1]bool
			_, _, _ = yysep3277, yyq3277, yy2arr3277
			const yyr3277 bool = false
			var yynn3277 int
			if yyr3277 || yy2arr3277 {
				r.EncodeArrayStart(1)
			} else {
				yynn3277 = 1
				for _, b := range yyq3277 {
					if b {
						yynn3277++
					}
				}
				r.EncodeMapStart(yynn3277)
				yynn3277 = 0
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3281 := z.DecBinary()
	_ = yym3281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3282 := r.ContainerType()
		if yyct3282 == codecSelferValueTypeMap1234 {
			yyl3282 := r.ReadMapStart()
			if yyl3282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3282, d)
			}
		} else if yyct3282 == codecSelferValueTypeArray1234 {
			yyl3282 := r.ReadArrayStart()
			if yyl3282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3283Slc
	var yyhl3283 bool = l >= 0
	for yyj3283 := 0; ; yyj3283++ {
		if yyhl3283 {
			if yyj3283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3283Slc = r.DecodeBytes(yys3283Slc, true, true)
		yys3283 := string(yys3283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3283 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3284 := &x.Finalizers
				yym3285 := z.DecBinary()
				_ = yym3285
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3284), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3283)
		} // end switch yys3283
	} // end for yyj3283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3286 int
	var yyb3286 bool
	var yyhl3286 bool = l >= 0
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3287 := &x.Finalizers
		yym3288 := z.DecBinary()
		_ = yym3288
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3287), d)
		}
	}
	for {
		yyj3286++
		if yyhl3286 {
			yyb3286 = yyj3286 > l
		} else {
			yyb3286 = r.CheckBreak()
		}
		if yyb3286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3289 := z.EncBinary()
	_ = yym3289
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3290 := z.DecBinary()
	_ = yym3290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3291 := z.EncBinary()
		_ = yym3291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3292 := !z.EncBinary()
			yy2arr3292 := z.EncBasicHandle().StructToArray
			var yyq3292 [1]bool
			_, _, _ = yysep3292, yyq3292, yy2arr3292
			const yyr3292 bool = false
			yyq3292[0] = x.Phase != ""
			var yynn3292 int
			if yyr3292 || yy2arr3292 {
				r.EncodeArrayStart(1)
			} else {
				yynn3292 = 0
				for _, b := range yyq3292 {
					if b {
						yynn3292++
					}
				}
				r.EncodeMapStart(yynn3292)
				yynn3292 = 0
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3292[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3292 || yy2arr3292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3294 := z.DecBinary()
	_ = yym3294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3295 := r.ContainerType()
		if yyct3295 == codecSelferValueTypeMap1234 {
			yyl3295 := r.ReadMapStart()
			if yyl3295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3295, d)
			}
		} else if yyct3295 == codecSelferValueTypeArray1234 {
			yyl3295 := r.ReadArrayStart()
			if yyl3295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3296Slc
	var yyhl3296 bool = l >= 0
	for yyj3296 := 0; ; yyj3296++ {
		if yyhl3296 {
			if yyj3296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3296Slc = r.DecodeBytes(yys3296Slc, true, true)
		yys3296 := string(yys3296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3296 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3296)
		} // end switch yys3296
	} // end for yyj3296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3298 int
	var yyb3298 bool
	var yyhl3298 bool = l >= 0
	yyj3298++
	if yyhl3298 {
		yyb3298 = yyj3298 > l
	} else {
		yyb3298 = r.CheckBreak()
	}
	if yyb3298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3298++
		if yyhl3298 {
			yyb3298 = yyj3298 > l
		} else {
			yyb3298 = r.CheckBreak()
		}
		if yyb3298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3300 := z.EncBinary()
	_ = yym3300
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3302 := z.EncBinary()
		_ = yym3302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3303 := !z.EncBinary()
			yy2arr3303 := z.EncBasicHandle().StructToArray
			var yyq3303 [5]bool
			_, _, _ = yysep3303, yyq3303, yy2arr3303
			const yyr3303 bool = false
			yyq3303[0] = x.Kind != ""
			yyq3303[1] = x.APIVersion != ""
			yyq3303[2] = true
			yyq3303[3] = true
			yyq3303[4] = true
			var yynn3303 int
			if yyr3303 || yy2arr3303 {
				r.EncodeArrayStart(5)
			} else {
				yynn3303 = 0
				for _, b := range yyq3303 {
					if b {
						yynn3303++
					}
				}
				r.EncodeMapStart(yynn3303)
				yynn3303 = 0
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[0] {
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[1] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[2] {
					yy3311 := &x.ObjectMeta
					yy3311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3312 := &x.ObjectMeta
					yy3312.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[3] {
					yy3314 := &x.Spec
					yy3314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3315 := &x.Spec
					yy3315.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[4] {
					yy3317 := &x.Status
					yy3317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3318 := &x.Status
					yy3318.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3319 := z.DecBinary()
	_ = yym3319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3320 := r.ContainerType()
		if yyct3320 == codecSelferValueTypeMap1234 {
			yyl3320 := r.ReadMapStart()
			if yyl3320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3320, d)
			}
		} else if yyct3320 == codecSelferValueTypeArray1234 {
			yyl3320 := r.ReadArrayStart()
			if yyl3320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3321Slc
	var yyhl3321 bool = l >= 0
	for yyj3321 := 0; ; yyj3321++ {
		if yyhl3321 {
			if yyj3321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3321Slc = r.DecodeBytes(yys3321Slc, true, true)
		yys3321 := string(yys3321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3324 := &x.ObjectMeta
				yyv3324.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3325 := &x.Spec
				yyv3325.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3326 := &x.Status
				yyv3326.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3321)
		} // end switch yys3321
	} // end for yyj3321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3327 int
	var yyb3327 bool
	var yyhl3327 bool = l >= 0
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3330 := &x.ObjectMeta
		yyv3330.CodecDecodeSelf(d)
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3331 := &x.Spec
		yyv3331.CodecDecodeSelf(d)
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3332 := &x.Status
		yyv3332.CodecDecodeSelf(d)
	}
	for {
		yyj3327++
		if yyhl3327 {
			yyb3327 = yyj3327 > l
		} else {
			yyb3327 = r.CheckBreak()
		}
		if yyb3327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3333 := z.EncBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3334 := !z.EncBinary()
			yy2arr3334 := z.EncBasicHandle().StructToArray
			var yyq3334 [4]bool
			_, _, _ = yysep3334, yyq3334, yy2arr3334
			const yyr3334 bool = false
			yyq3334[0] = x.Kind != ""
			yyq3334[1] = x.APIVersion != ""
			yyq3334[2] = true
			var yynn3334 int
			if yyr3334 || yy2arr3334 {
				r.EncodeArrayStart(4)
			} else {
				yynn3334 = 1
				for _, b := range yyq3334 {
					if b {
						yynn3334++
					}
				}
				r.EncodeMapStart(yynn3334)
				yynn3334 = 0
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[0] {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[1] {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3334[2] {
					yy3342 := &x.ListMeta
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3342) {
					} else {
						z.EncFallback(yy3342)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3344 := &x.ListMeta
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3344) {
					} else {
						z.EncFallback(yy3344)
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3334 || yy2arr3334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3349 := z.DecBinary()
	_ = yym3349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3350 := r.ContainerType()
		if yyct3350 == codecSelferValueTypeMap1234 {
			yyl3350 := r.ReadMapStart()
			if yyl3350 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3350, d)
			}
		} else if yyct3350 == codecSelferValueTypeArray1234 {
			yyl3350 := r.ReadArrayStart()
			if yyl3350 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3350, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3351Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3351Slc
	var yyhl3351 bool = l >= 0
	for yyj3351 := 0; ; yyj3351++ {
		if yyhl3351 {
			if yyj3351 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3351Slc = r.DecodeBytes(yys3351Slc, true, true)
		yys3351 := string(yys3351Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3351 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3354 := &x.ListMeta
				yym3355 := z.DecBinary()
				_ = yym3355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3354) {
				} else {
					z.DecFallback(yyv3354, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3356 := &x.Items
				yym3357 := z.DecBinary()
				_ = yym3357
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3356), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3351)
		} // end switch yys3351
	} // end for yyj3351
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3358 int
	var yyb3358 bool
	var yyhl3358 bool = l >= 0
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3361 := &x.ListMeta
		yym3362 := z.DecBinary()
		_ = yym3362
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3361) {
		} else {
			z.DecFallback(yyv3361, false)
		}
	}
	yyj3358++
	if yyhl3358 {
		yyb3358 = yyj3358 > l
	} else {
		yyb3358 = r.CheckBreak()
	}
	if yyb3358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3363 := &x.Items
		yym3364 := z.DecBinary()
		_ = yym3364
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3363), d)
		}
	}
	for {
		yyj3358++
		if yyhl3358 {
			yyb3358 = yyj3358 > l
		} else {
			yyb3358 = r.CheckBreak()
		}
		if yyb3358 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3358-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3365 := z.EncBinary()
		_ = yym3365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3366 := !z.EncBinary()
			yy2arr3366 := z.EncBasicHandle().StructToArray
			var yyq3366 [4]bool
			_, _, _ = yysep3366, yyq3366, yy2arr3366
			const yyr3366 bool = false
			yyq3366[0] = x.Kind != ""
			yyq3366[1] = x.APIVersion != ""
			yyq3366[2] = true
			var yynn3366 int
			if yyr3366 || yy2arr3366 {
				r.EncodeArrayStart(4)
			} else {
				yynn3366 = 1
				for _, b := range yyq3366 {
					if b {
						yynn3366++
					}
				}
				r.EncodeMapStart(yynn3366)
				yynn3366 = 0
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[0] {
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[1] {
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[2] {
					yy3374 := &x.ObjectMeta
					yy3374.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3375 := &x.ObjectMeta
					yy3375.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3377 := &x.Target
				yy3377.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3378 := &x.Target
				yy3378.CodecEncodeSelf(e)
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3379 := z.DecBinary()
	_ = yym3379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3380 := r.ContainerType()
		if yyct3380 == codecSelferValueTypeMap1234 {
			yyl3380 := r.ReadMapStart()
			if yyl3380 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3380, d)
			}
		} else if yyct3380 == codecSelferValueTypeArray1234 {
			yyl3380 := r.ReadArrayStart()
			if yyl3380 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3380, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3381Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3381Slc
	var yyhl3381 bool = l >= 0
	for yyj3381 := 0; ; yyj3381++ {
		if yyhl3381 {
			if yyj3381 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3381Slc = r.DecodeBytes(yys3381Slc, true, true)
		yys3381 := string(yys3381Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3381 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3384 := &x.ObjectMeta
				yyv3384.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3385 := &x.Target
				yyv3385.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3381)
		} // end switch yys3381
	} // end for yyj3381
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3386 int
	var yyb3386 bool
	var yyhl3386 bool = l >= 0
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3389 := &x.ObjectMeta
		yyv3389.CodecDecodeSelf(d)
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3390 := &x.Target
		yyv3390.CodecDecodeSelf(d)
	}
	for {
		yyj3386++
		if yyhl3386 {
			yyb3386 = yyj3386 > l
		} else {
			yyb3386 = r.CheckBreak()
		}
		if yyb3386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3391 := z.EncBinary()
		_ = yym3391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3392 := !z.EncBinary()
			yy2arr3392 := z.EncBasicHandle().StructToArray
			var yyq3392 [1]bool
			_, _, _ = yysep3392, yyq3392, yy2arr3392
			const yyr3392 bool = false
			yyq3392[0] = x.UID != nil
			var yynn3392 int
			if yyr3392 || yy2arr3392 {
				r.EncodeArrayStart(1)
			} else {
				yynn3392 = 0
				for _, b := range yyq3392 {
					if b {
						yynn3392++
					}
				}
				r.EncodeMapStart(yynn3392)
				yynn3392 = 0
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3394 := *x.UID
						yym3395 := z.EncBinary()
						_ = yym3395
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3394) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3394))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3396 := *x.UID
						yym3397 := z.EncBinary()
						_ = yym3397
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3396) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3396))
						}
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3398 := z.DecBinary()
	_ = yym3398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3399 := r.ContainerType()
		if yyct3399 == codecSelferValueTypeMap1234 {
			yyl3399 := r.ReadMapStart()
			if yyl3399 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3399, d)
			}
		} else if yyct3399 == codecSelferValueTypeArray1234 {
			yyl3399 := r.ReadArrayStart()
			if yyl3399 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3399, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3400Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3400Slc
	var yyhl3400 bool = l >= 0
	for yyj3400 := 0; ; yyj3400++ {
		if yyhl3400 {
			if yyj3400 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3400Slc = r.DecodeBytes(yys3400Slc, true, true)
		yys3400 := string(yys3400Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3400 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3402 := z.DecBinary()
				_ = yym3402
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3400)
		} // end switch yys3400
	} // end for yyj3400
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3403 int
	var yyb3403 bool
	var yyhl3403 bool = l >= 0
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3405 := z.DecBinary()
		_ = yym3405
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3403++
		if yyhl3403 {
			yyb3403 = yyj3403 > l
		} else {
			yyb3403 = r.CheckBreak()
		}
		if yyb3403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3406 := z.EncBinary()
		_ = yym3406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3407 := !z.EncBinary()
			yy2arr3407 := z.EncBasicHandle().StructToArray
			var yyq3407 [5]bool
			_, _, _ = yysep3407, yyq3407, yy2arr3407
			const yyr3407 bool = false
			yyq3407[0] = x.Kind != ""
			yyq3407[1] = x.APIVersion != ""
			yyq3407[2] = x.GracePeriodSeconds != nil
			yyq3407[3] = x.Preconditions != nil
			yyq3407[4] = x.OrphanDependents != nil
			var yynn3407 int
			if yyr3407 || yy2arr3407 {
				r.EncodeArrayStart(5)
			} else {
				yynn3407 = 0
				for _, b := range yyq3407 {
					if b {
						yynn3407++
					}
				}
				r.EncodeMapStart(yynn3407)
				yynn3407 = 0
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[0] {
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[1] {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3413 := z.EncBinary()
					_ = yym3413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3415 := *x.GracePeriodSeconds
						yym3416 := z.EncBinary()
						_ = yym3416
						if false {
						} else {
							r.EncodeInt(int64(yy3415))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3407[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3417 := *x.GracePeriodSeconds
						yym3418 := z.EncBinary()
						_ = yym3418
						if false {
						} else {
							r.EncodeInt(int64(yy3417))
						}
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3407[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3421 := *x.OrphanDependents
						yym3422 := z.EncBinary()
						_ = yym3422
						if false {
						} else {
							r.EncodeBool(bool(yy3421))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3407[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3423 := *x.OrphanDependents
						yym3424 := z.EncBinary()
						_ = yym3424
						if false {
						} else {
							r.EncodeBool(bool(yy3423))
						}
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3425 := z.DecBinary()
	_ = yym3425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3426 := r.ContainerType()
		if yyct3426 == codecSelferValueTypeMap1234 {
			yyl3426 := r.ReadMapStart()
			if yyl3426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3426, d)
			}
		} else if yyct3426 == codecSelferValueTypeArray1234 {
			yyl3426 := r.ReadArrayStart()
			if yyl3426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3427Slc
	var yyhl3427 bool = l >= 0
	for yyj3427 := 0; ; yyj3427++ {
		if yyhl3427 {
			if yyj3427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3427Slc = r.DecodeBytes(yys3427Slc, true, true)
		yys3427 := string(yys3427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3427 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3431 := z.DecBinary()
				_ = yym3431
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3434 := z.DecBinary()
				_ = yym3434
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3427)
		} // end switch yys3427
	} // end for yyj3427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3435 int
	var yyb3435 bool
	var yyhl3435 bool = l >= 0
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3439 := z.DecBinary()
		_ = yym3439
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3442 := z.DecBinary()
		_ = yym3442
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3435++
		if yyhl3435 {
			yyb3435 = yyj3435 > l
		} else {
			yyb3435 = r.CheckBreak()
		}
		if yyb3435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3443 := z.EncBinary()
		_ = yym3443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3444 := !z.EncBinary()
			yy2arr3444 := z.EncBasicHandle().StructToArray
			var yyq3444 [4]bool
			_, _, _ = yysep3444, yyq3444, yy2arr3444
			const yyr3444 bool = false
			yyq3444[0] = x.Kind != ""
			yyq3444[1] = x.APIVersion != ""
			var yynn3444 int
			if yyr3444 || yy2arr3444 {
				r.EncodeArrayStart(4)
			} else {
				yynn3444 = 2
				for _, b := range yyq3444 {
					if b {
						yynn3444++
					}
				}
				r.EncodeMapStart(yynn3444)
				yynn3444 = 0
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3444[0] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3444[1] {
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3450 := z.EncBinary()
					_ = yym3450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3452 := z.EncBinary()
				_ = yym3452
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3453 := z.EncBinary()
				_ = yym3453
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3455 := z.EncBinary()
				_ = yym3455
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3456 := z.EncBinary()
				_ = yym3456
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3457 := z.DecBinary()
	_ = yym3457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3458 := r.ContainerType()
		if yyct3458 == codecSelferValueTypeMap1234 {
			yyl3458 := r.ReadMapStart()
			if yyl3458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3458, d)
			}
		} else if yyct3458 == codecSelferValueTypeArray1234 {
			yyl3458 := r.ReadArrayStart()
			if yyl3458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3459Slc
	var yyhl3459 bool = l >= 0
	for yyj3459 := 0; ; yyj3459++ {
		if yyhl3459 {
			if yyj3459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3459Slc = r.DecodeBytes(yys3459Slc, true, true)
		yys3459 := string(yys3459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3459)
		} // end switch yys3459
	} // end for yyj3459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3464 int
	var yyb3464 bool
	var yyhl3464 bool = l >= 0
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3464++
		if yyhl3464 {
			yyb3464 = yyj3464 > l
		} else {
			yyb3464 = r.CheckBreak()
		}
		if yyb3464 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3464-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3469 := z.EncBinary()
		_ = yym3469
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3470 := !z.EncBinary()
			yy2arr3470 := z.EncBasicHandle().StructToArray
			var yyq3470 [7]bool
			_, _, _ = yysep3470, yyq3470, yy2arr3470
			const yyr3470 bool = false
			yyq3470[0] = x.Kind != ""
			yyq3470[1] = x.APIVersion != ""
			var yynn3470 int
			if yyr3470 || yy2arr3470 {
				r.EncodeArrayStart(7)
			} else {
				yynn3470 = 5
				for _, b := range yyq3470 {
					if b {
						yynn3470++
					}
				}
				r.EncodeMapStart(yynn3470)
				yynn3470 = 0
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3470[0] {
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3470[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3470[1] {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3470[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3484 := z.EncBinary()
				_ = yym3484
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3485 := z.EncBinary()
				_ = yym3485
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3487 := z.EncBinary()
				_ = yym3487
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3488 := z.EncBinary()
				_ = yym3488
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3490 := *x.TimeoutSeconds
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeInt(int64(yy3490))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3492 := *x.TimeoutSeconds
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else {
						r.EncodeInt(int64(yy3492))
					}
				}
			}
			if yyr3470 || yy2arr3470 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3494 := z.DecBinary()
	_ = yym3494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3495 := r.ContainerType()
		if yyct3495 == codecSelferValueTypeMap1234 {
			yyl3495 := r.ReadMapStart()
			if yyl3495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3495, d)
			}
		} else if yyct3495 == codecSelferValueTypeArray1234 {
			yyl3495 := r.ReadArrayStart()
			if yyl3495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3496Slc
	var yyhl3496 bool = l >= 0
	for yyj3496 := 0; ; yyj3496++ {
		if yyhl3496 {
			if yyj3496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3496Slc = r.DecodeBytes(yys3496Slc, true, true)
		yys3496 := string(yys3496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3496 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3499 := &x.LabelSelector
				yym3500 := z.DecBinary()
				_ = yym3500
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3499) {
				} else {
					z.DecFallback(yyv3499, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3501 := &x.FieldSelector
				yym3502 := z.DecBinary()
				_ = yym3502
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3501) {
				} else {
					z.DecFallback(yyv3501, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3506 := z.DecBinary()
				_ = yym3506
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3496)
		} // end switch yys3496
	} // end for yyj3496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3507 int
	var yyb3507 bool
	var yyhl3507 bool = l >= 0
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3510 := &x.LabelSelector
		yym3511 := z.DecBinary()
		_ = yym3511
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3510) {
		} else {
			z.DecFallback(yyv3510, true)
		}
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3512 := &x.FieldSelector
		yym3513 := z.DecBinary()
		_ = yym3513
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3512) {
		} else {
			z.DecFallback(yyv3512, true)
		}
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3517 := z.DecBinary()
		_ = yym3517
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3507++
		if yyhl3507 {
			yyb3507 = yyj3507 > l
		} else {
			yyb3507 = r.CheckBreak()
		}
		if yyb3507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3518 := z.EncBinary()
		_ = yym3518
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3519 := !z.EncBinary()
			yy2arr3519 := z.EncBasicHandle().StructToArray
			var yyq3519 [10]bool
			_, _, _ = yysep3519, yyq3519, yy2arr3519
			const yyr3519 bool = false
			yyq3519[0] = x.Kind != ""
			yyq3519[1] = x.APIVersion != ""
			var yynn3519 int
			if yyr3519 || yy2arr3519 {
				r.EncodeArrayStart(10)
			} else {
				yynn3519 = 8
				for _, b := range yyq3519 {
					if b {
						yynn3519++
					}
				}
				r.EncodeMapStart(yynn3519)
				yynn3519 = 0
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3519[0] {
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3519[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3519[1] {
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3519[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3527 := z.EncBinary()
				_ = yym3527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3528 := z.EncBinary()
				_ = yym3528
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3530 := z.EncBinary()
				_ = yym3530
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3531 := z.EncBinary()
				_ = yym3531
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3533 := z.EncBinary()
				_ = yym3533
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3534 := z.EncBinary()
				_ = yym3534
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3536 := *x.SinceSeconds
					yym3537 := z.EncBinary()
					_ = yym3537
					if false {
					} else {
						r.EncodeInt(int64(yy3536))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3538 := *x.SinceSeconds
					yym3539 := z.EncBinary()
					_ = yym3539
					if false {
					} else {
						r.EncodeInt(int64(yy3538))
					}
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3541 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3541 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3542 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3542 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3544 := z.EncBinary()
				_ = yym3544
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3545 := z.EncBinary()
				_ = yym3545
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3547 := *x.TailLines
					yym3548 := z.EncBinary()
					_ = yym3548
					if false {
					} else {
						r.EncodeInt(int64(yy3547))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3549 := *x.TailLines
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeInt(int64(yy3549))
					}
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3552 := *x.LimitBytes
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeInt(int64(yy3552))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3554 := *x.LimitBytes
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeInt(int64(yy3554))
					}
				}
			}
			if yyr3519 || yy2arr3519 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3556 := z.DecBinary()
	_ = yym3556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3557 := r.ContainerType()
		if yyct3557 == codecSelferValueTypeMap1234 {
			yyl3557 := r.ReadMapStart()
			if yyl3557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3557, d)
			}
		} else if yyct3557 == codecSelferValueTypeArray1234 {
			yyl3557 := r.ReadArrayStart()
			if yyl3557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3558Slc
	var yyhl3558 bool = l >= 0
	for yyj3558 := 0; ; yyj3558++ {
		if yyhl3558 {
			if yyj3558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3558Slc = r.DecodeBytes(yys3558Slc, true, true)
		yys3558 := string(yys3558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3558 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3565 := z.DecBinary()
				_ = yym3565
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3567 := z.DecBinary()
				_ = yym3567
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3567 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3567 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3570 := z.DecBinary()
				_ = yym3570
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3572 := z.DecBinary()
				_ = yym3572
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3558)
		} // end switch yys3558
	} // end for yyj3558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3573 int
	var yyb3573 bool
	var yyhl3573 bool = l >= 0
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3580 := z.DecBinary()
		_ = yym3580
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3582 := z.DecBinary()
		_ = yym3582
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3582 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3582 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3585 := z.DecBinary()
		_ = yym3585
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3573++
	if yyhl3573 {
		yyb3573 = yyj3573 > l
	} else {
		yyb3573 = r.CheckBreak()
	}
	if yyb3573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3587 := z.DecBinary()
		_ = yym3587
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3573++
		if yyhl3573 {
			yyb3573 = yyj3573 > l
		} else {
			yyb3573 = r.CheckBreak()
		}
		if yyb3573 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3573-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3588 := z.EncBinary()
		_ = yym3588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3589 := !z.EncBinary()
			yy2arr3589 := z.EncBasicHandle().StructToArray
			var yyq3589 [7]bool
			_, _, _ = yysep3589, yyq3589, yy2arr3589
			const yyr3589 bool = false
			yyq3589[0] = x.Kind != ""
			yyq3589[1] = x.APIVersion != ""
			yyq3589[2] = x.Stdin != false
			yyq3589[3] = x.Stdout != false
			yyq3589[4] = x.Stderr != false
			yyq3589[5] = x.TTY != false
			yyq3589[6] = x.Container != ""
			var yynn3589 int
			if yyr3589 || yy2arr3589 {
				r.EncodeArrayStart(7)
			} else {
				yynn3589 = 0
				for _, b := range yyq3589 {
					if b {
						yynn3589++
					}
				}
				r.EncodeMapStart(yynn3589)
				yynn3589 = 0
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[0] {
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3589[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[1] {
					yym3594 := z.EncBinary()
					_ = yym3594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3589[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[2] {
					yym3597 := z.EncBinary()
					_ = yym3597
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3589[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[3] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3589[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[4] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3589[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[5] {
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3589[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3589[6] {
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3589[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3589 || yy2arr3589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3611 := z.DecBinary()
	_ = yym3611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3612 := r.ContainerType()
		if yyct3612 == codecSelferValueTypeMap1234 {
			yyl3612 := r.ReadMapStart()
			if yyl3612 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3612, d)
			}
		} else if yyct3612 == codecSelferValueTypeArray1234 {
			yyl3612 := r.ReadArrayStart()
			if yyl3612 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3612, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3613Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3613Slc
	var yyhl3613 bool = l >= 0
	for yyj3613 := 0; ; yyj3613++ {
		if yyhl3613 {
			if yyj3613 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3613Slc = r.DecodeBytes(yys3613Slc, true, true)
		yys3613 := string(yys3613Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3613 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3613)
		} // end switch yys3613
	} // end for yyj3613
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3621 int
	var yyb3621 bool
	var yyhl3621 bool = l >= 0
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3621++
	if yyhl3621 {
		yyb3621 = yyj3621 > l
	} else {
		yyb3621 = r.CheckBreak()
	}
	if yyb3621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3621++
		if yyhl3621 {
			yyb3621 = yyj3621 > l
		} else {
			yyb3621 = r.CheckBreak()
		}
		if yyb3621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3629 := z.EncBinary()
		_ = yym3629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3630 := !z.EncBinary()
			yy2arr3630 := z.EncBasicHandle().StructToArray
			var yyq3630 [8]bool
			_, _, _ = yysep3630, yyq3630, yy2arr3630
			const yyr3630 bool = false
			yyq3630[0] = x.Kind != ""
			yyq3630[1] = x.APIVersion != ""
			var yynn3630 int
			if yyr3630 || yy2arr3630 {
				r.EncodeArrayStart(8)
			} else {
				yynn3630 = 6
				for _, b := range yyq3630 {
					if b {
						yynn3630++
					}
				}
				r.EncodeMapStart(yynn3630)
				yynn3630 = 0
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[0] {
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[1] {
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3638 := z.EncBinary()
				_ = yym3638
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3639 := z.EncBinary()
				_ = yym3639
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3641 := z.EncBinary()
				_ = yym3641
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3642 := z.EncBinary()
				_ = yym3642
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3644 := z.EncBinary()
				_ = yym3644
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3645 := z.EncBinary()
				_ = yym3645
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3647 := z.EncBinary()
				_ = yym3647
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3648 := z.EncBinary()
				_ = yym3648
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3650 := z.EncBinary()
				_ = yym3650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3651 := z.EncBinary()
				_ = yym3651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3655 := z.DecBinary()
	_ = yym3655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3656 := r.ContainerType()
		if yyct3656 == codecSelferValueTypeMap1234 {
			yyl3656 := r.ReadMapStart()
			if yyl3656 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3656, d)
			}
		} else if yyct3656 == codecSelferValueTypeArray1234 {
			yyl3656 := r.ReadArrayStart()
			if yyl3656 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3657Slc
	var yyhl3657 bool = l >= 0
	for yyj3657 := 0; ; yyj3657++ {
		if yyhl3657 {
			if yyj3657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3657Slc = r.DecodeBytes(yys3657Slc, true, true)
		yys3657 := string(yys3657Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3657 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3665 := &x.Command
				yym3666 := z.DecBinary()
				_ = yym3666
				if false {
				} else {
					z.F.DecSliceStringX(yyv3665, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3657)
		} // end switch yys3657
	} // end for yyj3657
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3667 int
	var yyb3667 bool
	var yyhl3667 bool = l >= 0
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3667++
	if yyhl3667 {
		yyb3667 = yyj3667 > l
	} else {
		yyb3667 = r.CheckBreak()
	}
	if yyb3667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3675 := &x.Command
		yym3676 := z.DecBinary()
		_ = yym3676
		if false {
		} else {
			z.F.DecSliceStringX(yyv3675, false, d)
		}
	}
	for {
		yyj3667++
		if yyhl3667 {
			yyb3667 = yyj3667 > l
		} else {
			yyb3667 = r.CheckBreak()
		}
		if yyb3667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3677 := z.EncBinary()
		_ = yym3677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3678 := !z.EncBinary()
			yy2arr3678 := z.EncBasicHandle().StructToArray
			var yyq3678 [3]bool
			_, _, _ = yysep3678, yyq3678, yy2arr3678
			const yyr3678 bool = false
			yyq3678[0] = x.Kind != ""
			yyq3678[1] = x.APIVersion != ""
			var yynn3678 int
			if yyr3678 || yy2arr3678 {
				r.EncodeArrayStart(3)
			} else {
				yynn3678 = 1
				for _, b := range yyq3678 {
					if b {
						yynn3678++
					}
				}
				r.EncodeMapStart(yynn3678)
				yynn3678 = 0
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3678[0] {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3678[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3678[1] {
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3678[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3686 := z.EncBinary()
				_ = yym3686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3687 := z.EncBinary()
				_ = yym3687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3678 || yy2arr3678 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3688 := z.DecBinary()
	_ = yym3688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3689 := r.ContainerType()
		if yyct3689 == codecSelferValueTypeMap1234 {
			yyl3689 := r.ReadMapStart()
			if yyl3689 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3689, d)
			}
		} else if yyct3689 == codecSelferValueTypeArray1234 {
			yyl3689 := r.ReadArrayStart()
			if yyl3689 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3690Slc
	var yyhl3690 bool = l >= 0
	for yyj3690 := 0; ; yyj3690++ {
		if yyhl3690 {
			if yyj3690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3690Slc = r.DecodeBytes(yys3690Slc, true, true)
		yys3690 := string(yys3690Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3690 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3690)
		} // end switch yys3690
	} // end for yyj3690
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3694 int
	var yyb3694 bool
	var yyhl3694 bool = l >= 0
	yyj3694++
	if yyhl3694 {
		yyb3694 = yyj3694 > l
	} else {
		yyb3694 = r.CheckBreak()
	}
	if yyb3694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3694++
	if yyhl3694 {
		yyb3694 = yyj3694 > l
	} else {
		yyb3694 = r.CheckBreak()
	}
	if yyb3694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3694++
	if yyhl3694 {
		yyb3694 = yyj3694 > l
	} else {
		yyb3694 = r.CheckBreak()
	}
	if yyb3694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3694++
		if yyhl3694 {
			yyb3694 = yyj3694 > l
		} else {
			yyb3694 = r.CheckBreak()
		}
		if yyb3694 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3694-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3698 := z.EncBinary()
		_ = yym3698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3699 := !z.EncBinary()
			yy2arr3699 := z.EncBasicHandle().StructToArray
			var yyq3699 [3]bool
			_, _, _ = yysep3699, yyq3699, yy2arr3699
			const yyr3699 bool = false
			yyq3699[0] = x.Kind != ""
			yyq3699[1] = x.APIVersion != ""
			var yynn3699 int
			if yyr3699 || yy2arr3699 {
				r.EncodeArrayStart(3)
			} else {
				yynn3699 = 1
				for _, b := range yyq3699 {
					if b {
						yynn3699++
					}
				}
				r.EncodeMapStart(yynn3699)
				yynn3699 = 0
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3699[0] {
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3699[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3702 := z.EncBinary()
					_ = yym3702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3699[1] {
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3707 := z.EncBinary()
				_ = yym3707
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3708 := z.EncBinary()
				_ = yym3708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3699 || yy2arr3699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3709 := z.DecBinary()
	_ = yym3709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3710 := r.ContainerType()
		if yyct3710 == codecSelferValueTypeMap1234 {
			yyl3710 := r.ReadMapStart()
			if yyl3710 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3710, d)
			}
		} else if yyct3710 == codecSelferValueTypeArray1234 {
			yyl3710 := r.ReadArrayStart()
			if yyl3710 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3710, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3711Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3711Slc
	var yyhl3711 bool = l >= 0
	for yyj3711 := 0; ; yyj3711++ {
		if yyhl3711 {
			if yyj3711 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3711Slc = r.DecodeBytes(yys3711Slc, true, true)
		yys3711 := string(yys3711Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3711 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3711)
		} // end switch yys3711
	} // end for yyj3711
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3715 int
	var yyb3715 bool
	var yyhl3715 bool = l >= 0
	yyj3715++
	if yyhl3715 {
		yyb3715 = yyj3715 > l
	} else {
		yyb3715 = r.CheckBreak()
	}
	if yyb3715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3715++
	if yyhl3715 {
		yyb3715 = yyj3715 > l
	} else {
		yyb3715 = r.CheckBreak()
	}
	if yyb3715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3715++
	if yyhl3715 {
		yyb3715 = yyj3715 > l
	} else {
		yyb3715 = r.CheckBreak()
	}
	if yyb3715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3715++
		if yyhl3715 {
			yyb3715 = yyj3715 > l
		} else {
			yyb3715 = r.CheckBreak()
		}
		if yyb3715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3719 := z.EncBinary()
		_ = yym3719
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3720 := !z.EncBinary()
			yy2arr3720 := z.EncBasicHandle().StructToArray
			var yyq3720 [3]bool
			_, _, _ = yysep3720, yyq3720, yy2arr3720
			const yyr3720 bool = false
			yyq3720[0] = x.Kind != ""
			yyq3720[1] = x.APIVersion != ""
			var yynn3720 int
			if yyr3720 || yy2arr3720 {
				r.EncodeArrayStart(3)
			} else {
				yynn3720 = 1
				for _, b := range yyq3720 {
					if b {
						yynn3720++
					}
				}
				r.EncodeMapStart(yynn3720)
				yynn3720 = 0
			}
			if yyr3720 || yy2arr3720 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3720[0] {
					yym3722 := z.EncBinary()
					_ = yym3722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3720[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3720 || yy2arr3720 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3720[1] {
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3720[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3720 || yy2arr3720 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3728 := z.EncBinary()
				_ = yym3728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3729 := z.EncBinary()
				_ = yym3729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3720 || yy2arr3720 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3730 := z.DecBinary()
	_ = yym3730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3731 := r.ContainerType()
		if yyct3731 == codecSelferValueTypeMap1234 {
			yyl3731 := r.ReadMapStart()
			if yyl3731 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3731, d)
			}
		} else if yyct3731 == codecSelferValueTypeArray1234 {
			yyl3731 := r.ReadArrayStart()
			if yyl3731 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3732Slc
	var yyhl3732 bool = l >= 0
	for yyj3732 := 0; ; yyj3732++ {
		if yyhl3732 {
			if yyj3732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3732Slc = r.DecodeBytes(yys3732Slc, true, true)
		yys3732 := string(yys3732Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3732 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3732)
		} // end switch yys3732
	} // end for yyj3732
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3736 int
	var yyb3736 bool
	var yyhl3736 bool = l >= 0
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3736++
		if yyhl3736 {
			yyb3736 = yyj3736 > l
		} else {
			yyb3736 = r.CheckBreak()
		}
		if yyb3736 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3736-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3740 := z.EncBinary()
		_ = yym3740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3741 := !z.EncBinary()
			yy2arr3741 := z.EncBasicHandle().StructToArray
			var yyq3741 [5]bool
			_, _, _ = yysep3741, yyq3741, yy2arr3741
			const yyr3741 bool = false
			yyq3741[4] = x.Controller != nil
			var yynn3741 int
			if yyr3741 || yy2arr3741 {
				r.EncodeArrayStart(5)
			} else {
				yynn3741 = 4
				for _, b := range yyq3741 {
					if b {
						yynn3741++
					}
				}
				r.EncodeMapStart(yynn3741)
				yynn3741 = 0
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3743 := z.EncBinary()
				_ = yym3743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3744 := z.EncBinary()
				_ = yym3744
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3746 := z.EncBinary()
				_ = yym3746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3747 := z.EncBinary()
				_ = yym3747
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3749 := z.EncBinary()
				_ = yym3749
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3750 := z.EncBinary()
				_ = yym3750
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3752 := z.EncBinary()
				_ = yym3752
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3753 := z.EncBinary()
				_ = yym3753
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3755 := *x.Controller
						yym3756 := z.EncBinary()
						_ = yym3756
						if false {
						} else {
							r.EncodeBool(bool(yy3755))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3741[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3757 := *x.Controller
						yym3758 := z.EncBinary()
						_ = yym3758
						if false {
						} else {
							r.EncodeBool(bool(yy3757))
						}
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3759 := z.DecBinary()
	_ = yym3759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3760 := r.ContainerType()
		if yyct3760 == codecSelferValueTypeMap1234 {
			yyl3760 := r.ReadMapStart()
			if yyl3760 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3760, d)
			}
		} else if yyct3760 == codecSelferValueTypeArray1234 {
			yyl3760 := r.ReadArrayStart()
			if yyl3760 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3761Slc
	var yyhl3761 bool = l >= 0
	for yyj3761 := 0; ; yyj3761++ {
		if yyhl3761 {
			if yyj3761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3761Slc = r.DecodeBytes(yys3761Slc, true, true)
		yys3761 := string(yys3761Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3761 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3767 := z.DecBinary()
				_ = yym3767
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3761)
		} // end switch yys3761
	} // end for yyj3761
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3768 int
	var yyb3768 bool
	var yyhl3768 bool = l >= 0
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3768++
	if yyhl3768 {
		yyb3768 = yyj3768 > l
	} else {
		yyb3768 = r.CheckBreak()
	}
	if yyb3768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3774 := z.DecBinary()
		_ = yym3774
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3768++
		if yyhl3768 {
			yyb3768 = yyj3768 > l
		} else {
			yyb3768 = r.CheckBreak()
		}
		if yyb3768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3775 := z.EncBinary()
		_ = yym3775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3776 := !z.EncBinary()
			yy2arr3776 := z.EncBasicHandle().StructToArray
			var yyq3776 [7]bool
			_, _, _ = yysep3776, yyq3776, yy2arr3776
			const yyr3776 bool = false
			yyq3776[0] = x.Kind != ""
			yyq3776[1] = x.Namespace != ""
			yyq3776[2] = x.Name != ""
			yyq3776[3] = x.UID != ""
			yyq3776[4] = x.APIVersion != ""
			yyq3776[5] = x.ResourceVersion != ""
			yyq3776[6] = x.FieldPath != ""
			var yynn3776 int
			if yyr3776 || yy2arr3776 {
				r.EncodeArrayStart(7)
			} else {
				yynn3776 = 0
				for _, b := range yyq3776 {
					if b {
						yynn3776++
					}
				}
				r.EncodeMapStart(yynn3776)
				yynn3776 = 0
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[0] {
					yym3778 := z.EncBinary()
					_ = yym3778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3779 := z.EncBinary()
					_ = yym3779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[1] {
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3782 := z.EncBinary()
					_ = yym3782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[2] {
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[3] {
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[4] {
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[5] {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3776[6] {
					yym3796 := z.EncBinary()
					_ = yym3796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3776[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3776 || yy2arr3776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3798 := z.DecBinary()
	_ = yym3798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3799 := r.ContainerType()
		if yyct3799 == codecSelferValueTypeMap1234 {
			yyl3799 := r.ReadMapStart()
			if yyl3799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3799, d)
			}
		} else if yyct3799 == codecSelferValueTypeArray1234 {
			yyl3799 := r.ReadArrayStart()
			if yyl3799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3800Slc
	var yyhl3800 bool = l >= 0
	for yyj3800 := 0; ; yyj3800++ {
		if yyhl3800 {
			if yyj3800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3800Slc = r.DecodeBytes(yys3800Slc, true, true)
		yys3800 := string(yys3800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3800)
		} // end switch yys3800
	} // end for yyj3800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3808 int
	var yyb3808 bool
	var yyhl3808 bool = l >= 0
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3808++
	if yyhl3808 {
		yyb3808 = yyj3808 > l
	} else {
		yyb3808 = r.CheckBreak()
	}
	if yyb3808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3808++
		if yyhl3808 {
			yyb3808 = yyj3808 > l
		} else {
			yyb3808 = r.CheckBreak()
		}
		if yyb3808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3816 := z.EncBinary()
		_ = yym3816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3817 := !z.EncBinary()
			yy2arr3817 := z.EncBasicHandle().StructToArray
			var yyq3817 [1]bool
			_, _, _ = yysep3817, yyq3817, yy2arr3817
			const yyr3817 bool = false
			var yynn3817 int
			if yyr3817 || yy2arr3817 {
				r.EncodeArrayStart(1)
			} else {
				yynn3817 = 1
				for _, b := range yyq3817 {
					if b {
						yynn3817++
					}
				}
				r.EncodeMapStart(yynn3817)
				yynn3817 = 0
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3819 := z.EncBinary()
				_ = yym3819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3820 := z.EncBinary()
				_ = yym3820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3817 || yy2arr3817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3821 := z.DecBinary()
	_ = yym3821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3822 := r.ContainerType()
		if yyct3822 == codecSelferValueTypeMap1234 {
			yyl3822 := r.ReadMapStart()
			if yyl3822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3822, d)
			}
		} else if yyct3822 == codecSelferValueTypeArray1234 {
			yyl3822 := r.ReadArrayStart()
			if yyl3822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3823Slc
	var yyhl3823 bool = l >= 0
	for yyj3823 := 0; ; yyj3823++ {
		if yyhl3823 {
			if yyj3823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3823Slc = r.DecodeBytes(yys3823Slc, true, true)
		yys3823 := string(yys3823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3823 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3823)
		} // end switch yys3823
	} // end for yyj3823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3825 int
	var yyb3825 bool
	var yyhl3825 bool = l >= 0
	yyj3825++
	if yyhl3825 {
		yyb3825 = yyj3825 > l
	} else {
		yyb3825 = r.CheckBreak()
	}
	if yyb3825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3825++
		if yyhl3825 {
			yyb3825 = yyj3825 > l
		} else {
			yyb3825 = r.CheckBreak()
		}
		if yyb3825 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3825-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3827 := z.EncBinary()
		_ = yym3827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3828 := !z.EncBinary()
			yy2arr3828 := z.EncBasicHandle().StructToArray
			var yyq3828 [3]bool
			_, _, _ = yysep3828, yyq3828, yy2arr3828
			const yyr3828 bool = false
			yyq3828[0] = x.Kind != ""
			yyq3828[1] = x.APIVersion != ""
			yyq3828[2] = true
			var yynn3828 int
			if yyr3828 || yy2arr3828 {
				r.EncodeArrayStart(3)
			} else {
				yynn3828 = 0
				for _, b := range yyq3828 {
					if b {
						yynn3828++
					}
				}
				r.EncodeMapStart(yynn3828)
				yynn3828 = 0
			}
			if yyr3828 || yy2arr3828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3828[0] {
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3828[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3828 || yy2arr3828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3828[1] {
					yym3833 := z.EncBinary()
					_ = yym3833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3828 || yy2arr3828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3828[2] {
					yy3836 := &x.Reference
					yy3836.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3837 := &x.Reference
					yy3837.CodecEncodeSelf(e)
				}
			}
			if yyr3828 || yy2arr3828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3838 := z.DecBinary()
	_ = yym3838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3839 := r.ContainerType()
		if yyct3839 == codecSelferValueTypeMap1234 {
			yyl3839 := r.ReadMapStart()
			if yyl3839 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3839, d)
			}
		} else if yyct3839 == codecSelferValueTypeArray1234 {
			yyl3839 := r.ReadArrayStart()
			if yyl3839 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3840Slc
	var yyhl3840 bool = l >= 0
	for yyj3840 := 0; ; yyj3840++ {
		if yyhl3840 {
			if yyj3840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3840Slc = r.DecodeBytes(yys3840Slc, true, true)
		yys3840 := string(yys3840Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3840 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3843 := &x.Reference
				yyv3843.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3840)
		} // end switch yys3840
	} // end for yyj3840
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3844 int
	var yyb3844 bool
	var yyhl3844 bool = l >= 0
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3847 := &x.Reference
		yyv3847.CodecDecodeSelf(d)
	}
	for {
		yyj3844++
		if yyhl3844 {
			yyb3844 = yyj3844 > l
		} else {
			yyb3844 = r.CheckBreak()
		}
		if yyb3844 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3844-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3848 := z.EncBinary()
		_ = yym3848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3849 := !z.EncBinary()
			yy2arr3849 := z.EncBasicHandle().StructToArray
			var yyq3849 [2]bool
			_, _, _ = yysep3849, yyq3849, yy2arr3849
			const yyr3849 bool = false
			yyq3849[0] = x.Component != ""
			yyq3849[1] = x.Host != ""
			var yynn3849 int
			if yyr3849 || yy2arr3849 {
				r.EncodeArrayStart(2)
			} else {
				yynn3849 = 0
				for _, b := range yyq3849 {
					if b {
						yynn3849++
					}
				}
				r.EncodeMapStart(yynn3849)
				yynn3849 = 0
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[0] {
					yym3851 := z.EncBinary()
					_ = yym3851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3849[1] {
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3849[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3849 || yy2arr3849 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3856 := z.DecBinary()
	_ = yym3856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3857 := r.ContainerType()
		if yyct3857 == codecSelferValueTypeMap1234 {
			yyl3857 := r.ReadMapStart()
			if yyl3857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3857, d)
			}
		} else if yyct3857 == codecSelferValueTypeArray1234 {
			yyl3857 := r.ReadArrayStart()
			if yyl3857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3858Slc
	var yyhl3858 bool = l >= 0
	for yyj3858 := 0; ; yyj3858++ {
		if yyhl3858 {
			if yyj3858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3858Slc = r.DecodeBytes(yys3858Slc, true, true)
		yys3858 := string(yys3858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3858 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3858)
		} // end switch yys3858
	} // end for yyj3858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3861 int
	var yyb3861 bool
	var yyhl3861 bool = l >= 0
	yyj3861++
	if yyhl3861 {
		yyb3861 = yyj3861 > l
	} else {
		yyb3861 = r.CheckBreak()
	}
	if yyb3861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3861++
	if yyhl3861 {
		yyb3861 = yyj3861 > l
	} else {
		yyb3861 = r.CheckBreak()
	}
	if yyb3861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3861++
		if yyhl3861 {
			yyb3861 = yyj3861 > l
		} else {
			yyb3861 = r.CheckBreak()
		}
		if yyb3861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3864 := z.EncBinary()
		_ = yym3864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3865 := !z.EncBinary()
			yy2arr3865 := z.EncBasicHandle().StructToArray
			var yyq3865 [11]bool
			_, _, _ = yysep3865, yyq3865, yy2arr3865
			const yyr3865 bool = false
			yyq3865[0] = x.Kind != ""
			yyq3865[1] = x.APIVersion != ""
			yyq3865[2] = true
			yyq3865[3] = true
			yyq3865[4] = x.Reason != ""
			yyq3865[5] = x.Message != ""
			yyq3865[6] = true
			yyq3865[7] = true
			yyq3865[8] = true
			yyq3865[9] = x.Count != 0
			yyq3865[10] = x.Type != ""
			var yynn3865 int
			if yyr3865 || yy2arr3865 {
				r.EncodeArrayStart(11)
			} else {
				yynn3865 = 0
				for _, b := range yyq3865 {
					if b {
						yynn3865++
					}
				}
				r.EncodeMapStart(yynn3865)
				yynn3865 = 0
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[0] {
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3865[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3868 := z.EncBinary()
					_ = yym3868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[1] {
					yym3870 := z.EncBinary()
					_ = yym3870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3865[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3871 := z.EncBinary()
					_ = yym3871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[2] {
					yy3873 := &x.ObjectMeta
					yy3873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3865[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3874 := &x.ObjectMeta
					yy3874.CodecEncodeSelf(e)
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[3] {
					yy3876 := &x.InvolvedObject
					yy3876.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3865[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3877 := &x.InvolvedObject
					yy3877.CodecEncodeSelf(e)
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[4] {
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3865[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[5] {
					yym3882 := z.EncBinary()
					_ = yym3882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3865[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3883 := z.EncBinary()
					_ = yym3883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[6] {
					yy3885 := &x.Source
					yy3885.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3865[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3886 := &x.Source
					yy3886.CodecEncodeSelf(e)
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[7] {
					yy3888 := &x.FirstTimestamp
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3888) {
					} else if yym3889 {
						z.EncBinaryMarshal(yy3888)
					} else if !yym3889 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3888)
					} else {
						z.EncFallback(yy3888)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3865[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3890 := &x.FirstTimestamp
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3890) {
					} else if yym3891 {
						z.EncBinaryMarshal(yy3890)
					} else if !yym3891 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3890)
					} else {
						z.EncFallback(yy3890)
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[8] {
					yy3893 := &x.LastTimestamp
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3893) {
					} else if yym3894 {
						z.EncBinaryMarshal(yy3893)
					} else if !yym3894 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3893)
					} else {
						z.EncFallback(yy3893)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3865[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3895 := &x.LastTimestamp
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3895) {
					} else if yym3896 {
						z.EncBinaryMarshal(yy3895)
					} else if !yym3896 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3895)
					} else {
						z.EncFallback(yy3895)
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[9] {
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3865[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3865[10] {
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3865[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3902 := z.EncBinary()
					_ = yym3902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3865 || yy2arr3865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3903 := z.DecBinary()
	_ = yym3903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3904 := r.ContainerType()
		if yyct3904 == codecSelferValueTypeMap1234 {
			yyl3904 := r.ReadMapStart()
			if yyl3904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3904, d)
			}
		} else if yyct3904 == codecSelferValueTypeArray1234 {
			yyl3904 := r.ReadArrayStart()
			if yyl3904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3905Slc
	var yyhl3905 bool = l >= 0
	for yyj3905 := 0; ; yyj3905++ {
		if yyhl3905 {
			if yyj3905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3905Slc = r.DecodeBytes(yys3905Slc, true, true)
		yys3905 := string(yys3905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3905 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3908 := &x.ObjectMeta
				yyv3908.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3909 := &x.InvolvedObject
				yyv3909.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3912 := &x.Source
				yyv3912.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3913 := &x.FirstTimestamp
				yym3914 := z.DecBinary()
				_ = yym3914
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3913) {
				} else if yym3914 {
					z.DecBinaryUnmarshal(yyv3913)
				} else if !yym3914 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3913)
				} else {
					z.DecFallback(yyv3913, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3915 := &x.LastTimestamp
				yym3916 := z.DecBinary()
				_ = yym3916
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3915) {
				} else if yym3916 {
					z.DecBinaryUnmarshal(yyv3915)
				} else if !yym3916 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3915)
				} else {
					z.DecFallback(yyv3915, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3905)
		} // end switch yys3905
	} // end for yyj3905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3919 int
	var yyb3919 bool
	var yyhl3919 bool = l >= 0
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3922 := &x.ObjectMeta
		yyv3922.CodecDecodeSelf(d)
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3923 := &x.InvolvedObject
		yyv3923.CodecDecodeSelf(d)
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3926 := &x.Source
		yyv3926.CodecDecodeSelf(d)
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3927 := &x.FirstTimestamp
		yym3928 := z.DecBinary()
		_ = yym3928
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3927) {
		} else if yym3928 {
			z.DecBinaryUnmarshal(yyv3927)
		} else if !yym3928 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3927)
		} else {
			z.DecFallback(yyv3927, false)
		}
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3929 := &x.LastTimestamp
		yym3930 := z.DecBinary()
		_ = yym3930
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3929) {
		} else if yym3930 {
			z.DecBinaryUnmarshal(yyv3929)
		} else if !yym3930 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3929)
		} else {
			z.DecFallback(yyv3929, false)
		}
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3919++
	if yyhl3919 {
		yyb3919 = yyj3919 > l
	} else {
		yyb3919 = r.CheckBreak()
	}
	if yyb3919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3919++
		if yyhl3919 {
			yyb3919 = yyj3919 > l
		} else {
			yyb3919 = r.CheckBreak()
		}
		if yyb3919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3933 := z.EncBinary()
		_ = yym3933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3934 := !z.EncBinary()
			yy2arr3934 := z.EncBasicHandle().StructToArray
			var yyq3934 [4]bool
			_, _, _ = yysep3934, yyq3934, yy2arr3934
			const yyr3934 bool = false
			yyq3934[0] = x.Kind != ""
			yyq3934[1] = x.APIVersion != ""
			yyq3934[2] = true
			var yynn3934 int
			if yyr3934 || yy2arr3934 {
				r.EncodeArrayStart(4)
			} else {
				yynn3934 = 1
				for _, b := range yyq3934 {
					if b {
						yynn3934++
					}
				}
				r.EncodeMapStart(yynn3934)
				yynn3934 = 0
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3934[0] {
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3934[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3934[1] {
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3934[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3934[2] {
					yy3942 := &x.ListMeta
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3942) {
					} else {
						z.EncFallback(yy3942)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3934[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3944 := &x.ListMeta
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3944) {
					} else {
						z.EncFallback(yy3944)
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3934 || yy2arr3934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3949 := z.DecBinary()
	_ = yym3949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3950 := r.ContainerType()
		if yyct3950 == codecSelferValueTypeMap1234 {
			yyl3950 := r.ReadMapStart()
			if yyl3950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3950, d)
			}
		} else if yyct3950 == codecSelferValueTypeArray1234 {
			yyl3950 := r.ReadArrayStart()
			if yyl3950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3951Slc
	var yyhl3951 bool = l >= 0
	for yyj3951 := 0; ; yyj3951++ {
		if yyhl3951 {
			if yyj3951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3951Slc = r.DecodeBytes(yys3951Slc, true, true)
		yys3951 := string(yys3951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3951 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3954 := &x.ListMeta
				yym3955 := z.DecBinary()
				_ = yym3955
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3954) {
				} else {
					z.DecFallback(yyv3954, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3956 := &x.Items
				yym3957 := z.DecBinary()
				_ = yym3957
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3956), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3951)
		} // end switch yys3951
	} // end for yyj3951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3958 int
	var yyb3958 bool
	var yyhl3958 bool = l >= 0
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3961 := &x.ListMeta
		yym3962 := z.DecBinary()
		_ = yym3962
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3961) {
		} else {
			z.DecFallback(yyv3961, false)
		}
	}
	yyj3958++
	if yyhl3958 {
		yyb3958 = yyj3958 > l
	} else {
		yyb3958 = r.CheckBreak()
	}
	if yyb3958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3963 := &x.Items
		yym3964 := z.DecBinary()
		_ = yym3964
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3963), d)
		}
	}
	for {
		yyj3958++
		if yyhl3958 {
			yyb3958 = yyj3958 > l
		} else {
			yyb3958 = r.CheckBreak()
		}
		if yyb3958 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3958-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3965 := z.EncBinary()
		_ = yym3965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3966 := !z.EncBinary()
			yy2arr3966 := z.EncBasicHandle().StructToArray
			var yyq3966 [4]bool
			_, _, _ = yysep3966, yyq3966, yy2arr3966
			const yyr3966 bool = false
			yyq3966[0] = x.Kind != ""
			yyq3966[1] = x.APIVersion != ""
			yyq3966[2] = true
			var yynn3966 int
			if yyr3966 || yy2arr3966 {
				r.EncodeArrayStart(4)
			} else {
				yynn3966 = 1
				for _, b := range yyq3966 {
					if b {
						yynn3966++
					}
				}
				r.EncodeMapStart(yynn3966)
				yynn3966 = 0
			}
			if yyr3966 || yy2arr3966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3966[0] {
					yym3968 := z.EncBinary()
					_ = yym3968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3966[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3969 := z.EncBinary()
					_ = yym3969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3966 || yy2arr3966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3966[1] {
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3966[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3972 := z.EncBinary()
					_ = yym3972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3966 || yy2arr3966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3966[2] {
					yy3974 := &x.ListMeta
					yym3975 := z.EncBinary()
					_ = yym3975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3974) {
					} else {
						z.EncFallback(yy3974)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3966[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3976 := &x.ListMeta
					yym3977 := z.EncBinary()
					_ = yym3977
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3976) {
					} else {
						z.EncFallback(yy3976)
					}
				}
			}
			if yyr3966 || yy2arr3966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3979 := z.EncBinary()
					_ = yym3979
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3980 := z.EncBinary()
					_ = yym3980
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3966 || yy2arr3966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3981 := z.DecBinary()
	_ = yym3981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3982 := r.ContainerType()
		if yyct3982 == codecSelferValueTypeMap1234 {
			yyl3982 := r.ReadMapStart()
			if yyl3982 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3982, d)
			}
		} else if yyct3982 == codecSelferValueTypeArray1234 {
			yyl3982 := r.ReadArrayStart()
			if yyl3982 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3983Slc
	var yyhl3983 bool = l >= 0
	for yyj3983 := 0; ; yyj3983++ {
		if yyhl3983 {
			if yyj3983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3983Slc = r.DecodeBytes(yys3983Slc, true, true)
		yys3983 := string(yys3983Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3983 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3986 := &x.ListMeta
				yym3987 := z.DecBinary()
				_ = yym3987
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3986) {
				} else {
					z.DecFallback(yyv3986, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3988 := &x.Items
				yym3989 := z.DecBinary()
				_ = yym3989
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3988), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3983)
		} // end switch yys3983
	} // end for yyj3983
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3990 int
	var yyb3990 bool
	var yyhl3990 bool = l >= 0
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3993 := &x.ListMeta
		yym3994 := z.DecBinary()
		_ = yym3994
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3993) {
		} else {
			z.DecFallback(yyv3993, false)
		}
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3995 := &x.Items
		yym3996 := z.DecBinary()
		_ = yym3996
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3995), d)
		}
	}
	for {
		yyj3990++
		if yyhl3990 {
			yyb3990 = yyj3990 > l
		} else {
			yyb3990 = r.CheckBreak()
		}
		if yyb3990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3997 := z.EncBinary()
	_ = yym3997
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3998 := z.DecBinary()
	_ = yym3998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3999 := z.EncBinary()
		_ = yym3999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4000 := !z.EncBinary()
			yy2arr4000 := z.EncBasicHandle().StructToArray
			var yyq4000 [6]bool
			_, _, _ = yysep4000, yyq4000, yy2arr4000
			const yyr4000 bool = false
			yyq4000[0] = x.Type != ""
			yyq4000[1] = len(x.Max) != 0
			yyq4000[2] = len(x.Min) != 0
			yyq4000[3] = len(x.Default) != 0
			yyq4000[4] = len(x.DefaultRequest) != 0
			yyq4000[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4000 int
			if yyr4000 || yy2arr4000 {
				r.EncodeArrayStart(6)
			} else {
				yynn4000 = 0
				for _, b := range yyq4000 {
					if b {
						yynn4000++
					}
				}
				r.EncodeMapStart(yynn4000)
				yynn4000 = 0
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4000[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4007 := z.DecBinary()
	_ = yym4007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4008 := r.ContainerType()
		if yyct4008 == codecSelferValueTypeMap1234 {
			yyl4008 := r.ReadMapStart()
			if yyl4008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4008, d)
			}
		} else if yyct4008 == codecSelferValueTypeArray1234 {
			yyl4008 := r.ReadArrayStart()
			if yyl4008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4009Slc
	var yyhl4009 bool = l >= 0
	for yyj4009 := 0; ; yyj4009++ {
		if yyhl4009 {
			if yyj4009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4009Slc = r.DecodeBytes(yys4009Slc, true, true)
		yys4009 := string(yys4009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4009 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4011 := &x.Max
				yyv4011.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4012 := &x.Min
				yyv4012.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4013 := &x.Default
				yyv4013.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4014 := &x.DefaultRequest
				yyv4014.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4015 := &x.MaxLimitRequestRatio
				yyv4015.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4009)
		} // end switch yys4009
	} // end for yyj4009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4016 int
	var yyb4016 bool
	var yyhl4016 bool = l >= 0
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4018 := &x.Max
		yyv4018.CodecDecodeSelf(d)
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4019 := &x.Min
		yyv4019.CodecDecodeSelf(d)
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4020 := &x.Default
		yyv4020.CodecDecodeSelf(d)
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4021 := &x.DefaultRequest
		yyv4021.CodecDecodeSelf(d)
	}
	yyj4016++
	if yyhl4016 {
		yyb4016 = yyj4016 > l
	} else {
		yyb4016 = r.CheckBreak()
	}
	if yyb4016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4022 := &x.MaxLimitRequestRatio
		yyv4022.CodecDecodeSelf(d)
	}
	for {
		yyj4016++
		if yyhl4016 {
			yyb4016 = yyj4016 > l
		} else {
			yyb4016 = r.CheckBreak()
		}
		if yyb4016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4023 := z.EncBinary()
		_ = yym4023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4024 := !z.EncBinary()
			yy2arr4024 := z.EncBasicHandle().StructToArray
			var yyq4024 [1]bool
			_, _, _ = yysep4024, yyq4024, yy2arr4024
			const yyr4024 bool = false
			var yynn4024 int
			if yyr4024 || yy2arr4024 {
				r.EncodeArrayStart(1)
			} else {
				yynn4024 = 1
				for _, b := range yyq4024 {
					if b {
						yynn4024++
					}
				}
				r.EncodeMapStart(yynn4024)
				yynn4024 = 0
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4027 := z.EncBinary()
					_ = yym4027
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4024 || yy2arr4024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4028 := z.DecBinary()
	_ = yym4028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4029 := r.ContainerType()
		if yyct4029 == codecSelferValueTypeMap1234 {
			yyl4029 := r.ReadMapStart()
			if yyl4029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4029, d)
			}
		} else if yyct4029 == codecSelferValueTypeArray1234 {
			yyl4029 := r.ReadArrayStart()
			if yyl4029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4030Slc
	var yyhl4030 bool = l >= 0
	for yyj4030 := 0; ; yyj4030++ {
		if yyhl4030 {
			if yyj4030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4030Slc = r.DecodeBytes(yys4030Slc, true, true)
		yys4030 := string(yys4030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4030 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4031 := &x.Limits
				yym4032 := z.DecBinary()
				_ = yym4032
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4031), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4030)
		} // end switch yys4030
	} // end for yyj4030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4033 int
	var yyb4033 bool
	var yyhl4033 bool = l >= 0
	yyj4033++
	if yyhl4033 {
		yyb4033 = yyj4033 > l
	} else {
		yyb4033 = r.CheckBreak()
	}
	if yyb4033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4034 := &x.Limits
		yym4035 := z.DecBinary()
		_ = yym4035
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4034), d)
		}
	}
	for {
		yyj4033++
		if yyhl4033 {
			yyb4033 = yyj4033 > l
		} else {
			yyb4033 = r.CheckBreak()
		}
		if yyb4033 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4033-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4036 := z.EncBinary()
		_ = yym4036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4037 := !z.EncBinary()
			yy2arr4037 := z.EncBasicHandle().StructToArray
			var yyq4037 [4]bool
			_, _, _ = yysep4037, yyq4037, yy2arr4037
			const yyr4037 bool = false
			yyq4037[0] = x.Kind != ""
			yyq4037[1] = x.APIVersion != ""
			yyq4037[2] = true
			yyq4037[3] = true
			var yynn4037 int
			if yyr4037 || yy2arr4037 {
				r.EncodeArrayStart(4)
			} else {
				yynn4037 = 0
				for _, b := range yyq4037 {
					if b {
						yynn4037++
					}
				}
				r.EncodeMapStart(yynn4037)
				yynn4037 = 0
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[0] {
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[1] {
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[2] {
					yy4045 := &x.ObjectMeta
					yy4045.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4037[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4046 := &x.ObjectMeta
					yy4046.CodecEncodeSelf(e)
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[3] {
					yy4048 := &x.Spec
					yy4048.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4037[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4049 := &x.Spec
					yy4049.CodecEncodeSelf(e)
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4050 := z.DecBinary()
	_ = yym4050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4051 := r.ContainerType()
		if yyct4051 == codecSelferValueTypeMap1234 {
			yyl4051 := r.ReadMapStart()
			if yyl4051 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4051, d)
			}
		} else if yyct4051 == codecSelferValueTypeArray1234 {
			yyl4051 := r.ReadArrayStart()
			if yyl4051 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4052Slc
	var yyhl4052 bool = l >= 0
	for yyj4052 := 0; ; yyj4052++ {
		if yyhl4052 {
			if yyj4052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4052Slc = r.DecodeBytes(yys4052Slc, true, true)
		yys4052 := string(yys4052Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4052 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4055 := &x.ObjectMeta
				yyv4055.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4056 := &x.Spec
				yyv4056.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4052)
		} // end switch yys4052
	} // end for yyj4052
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4057 int
	var yyb4057 bool
	var yyhl4057 bool = l >= 0
	yyj4057++
	if yyhl4057 {
		yyb4057 = yyj4057 > l
	} else {
		yyb4057 = r.CheckBreak()
	}
	if yyb4057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4057++
	if yyhl4057 {
		yyb4057 = yyj4057 > l
	} else {
		yyb4057 = r.CheckBreak()
	}
	if yyb4057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4057++
	if yyhl4057 {
		yyb4057 = yyj4057 > l
	} else {
		yyb4057 = r.CheckBreak()
	}
	if yyb4057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4060 := &x.ObjectMeta
		yyv4060.CodecDecodeSelf(d)
	}
	yyj4057++
	if yyhl4057 {
		yyb4057 = yyj4057 > l
	} else {
		yyb4057 = r.CheckBreak()
	}
	if yyb4057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4061 := &x.Spec
		yyv4061.CodecDecodeSelf(d)
	}
	for {
		yyj4057++
		if yyhl4057 {
			yyb4057 = yyj4057 > l
		} else {
			yyb4057 = r.CheckBreak()
		}
		if yyb4057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4062 := z.EncBinary()
		_ = yym4062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4063 := !z.EncBinary()
			yy2arr4063 := z.EncBasicHandle().StructToArray
			var yyq4063 [4]bool
			_, _, _ = yysep4063, yyq4063, yy2arr4063
			const yyr4063 bool = false
			yyq4063[0] = x.Kind != ""
			yyq4063[1] = x.APIVersion != ""
			yyq4063[2] = true
			var yynn4063 int
			if yyr4063 || yy2arr4063 {
				r.EncodeArrayStart(4)
			} else {
				yynn4063 = 1
				for _, b := range yyq4063 {
					if b {
						yynn4063++
					}
				}
				r.EncodeMapStart(yynn4063)
				yynn4063 = 0
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[0] {
					yym4065 := z.EncBinary()
					_ = yym4065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4063[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[1] {
					yym4068 := z.EncBinary()
					_ = yym4068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4069 := z.EncBinary()
					_ = yym4069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[2] {
					yy4071 := &x.ListMeta
					yym4072 := z.EncBinary()
					_ = yym4072
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4071) {
					} else {
						z.EncFallback(yy4071)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4073 := &x.ListMeta
					yym4074 := z.EncBinary()
					_ = yym4074
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4073) {
					} else {
						z.EncFallback(yy4073)
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4078 := z.DecBinary()
	_ = yym4078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4079 := r.ContainerType()
		if yyct4079 == codecSelferValueTypeMap1234 {
			yyl4079 := r.ReadMapStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4079, d)
			}
		} else if yyct4079 == codecSelferValueTypeArray1234 {
			yyl4079 := r.ReadArrayStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4080Slc
	var yyhl4080 bool = l >= 0
	for yyj4080 := 0; ; yyj4080++ {
		if yyhl4080 {
			if yyj4080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4080Slc = r.DecodeBytes(yys4080Slc, true, true)
		yys4080 := string(yys4080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4080 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4083 := &x.ListMeta
				yym4084 := z.DecBinary()
				_ = yym4084
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4083) {
				} else {
					z.DecFallback(yyv4083, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4085 := &x.Items
				yym4086 := z.DecBinary()
				_ = yym4086
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4085), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4080)
		} // end switch yys4080
	} // end for yyj4080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4087 int
	var yyb4087 bool
	var yyhl4087 bool = l >= 0
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4090 := &x.ListMeta
		yym4091 := z.DecBinary()
		_ = yym4091
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4090) {
		} else {
			z.DecFallback(yyv4090, false)
		}
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4092 := &x.Items
		yym4093 := z.DecBinary()
		_ = yym4093
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4092), d)
		}
	}
	for {
		yyj4087++
		if yyhl4087 {
			yyb4087 = yyj4087 > l
		} else {
			yyb4087 = r.CheckBreak()
		}
		if yyb4087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4094 := z.EncBinary()
	_ = yym4094
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4095 := z.DecBinary()
	_ = yym4095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4096 := z.EncBinary()
		_ = yym4096
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4097 := !z.EncBinary()
			yy2arr4097 := z.EncBasicHandle().StructToArray
			var yyq4097 [2]bool
			_, _, _ = yysep4097, yyq4097, yy2arr4097
			const yyr4097 bool = false
			yyq4097[0] = len(x.Hard) != 0
			yyq4097[1] = len(x.Scopes) != 0
			var yynn4097 int
			if yyr4097 || yy2arr4097 {
				r.EncodeArrayStart(2)
			} else {
				yynn4097 = 0
				for _, b := range yyq4097 {
					if b {
						yynn4097++
					}
				}
				r.EncodeMapStart(yynn4097)
				yynn4097 = 0
			}
			if yyr4097 || yy2arr4097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4097[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4097[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4097 || yy2arr4097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4097[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4100 := z.EncBinary()
						_ = yym4100
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4097[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4101 := z.EncBinary()
						_ = yym4101
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4097 || yy2arr4097 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4102 := z.DecBinary()
	_ = yym4102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4103 := r.ContainerType()
		if yyct4103 == codecSelferValueTypeMap1234 {
			yyl4103 := r.ReadMapStart()
			if yyl4103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4103, d)
			}
		} else if yyct4103 == codecSelferValueTypeArray1234 {
			yyl4103 := r.ReadArrayStart()
			if yyl4103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4104Slc
	var yyhl4104 bool = l >= 0
	for yyj4104 := 0; ; yyj4104++ {
		if yyhl4104 {
			if yyj4104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4104Slc = r.DecodeBytes(yys4104Slc, true, true)
		yys4104 := string(yys4104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4104 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4105 := &x.Hard
				yyv4105.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4106 := &x.Scopes
				yym4107 := z.DecBinary()
				_ = yym4107
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4106), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4104)
		} // end switch yys4104
	} // end for yyj4104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4108 int
	var yyb4108 bool
	var yyhl4108 bool = l >= 0
	yyj4108++
	if yyhl4108 {
		yyb4108 = yyj4108 > l
	} else {
		yyb4108 = r.CheckBreak()
	}
	if yyb4108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4109 := &x.Hard
		yyv4109.CodecDecodeSelf(d)
	}
	yyj4108++
	if yyhl4108 {
		yyb4108 = yyj4108 > l
	} else {
		yyb4108 = r.CheckBreak()
	}
	if yyb4108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4110 := &x.Scopes
		yym4111 := z.DecBinary()
		_ = yym4111
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4110), d)
		}
	}
	for {
		yyj4108++
		if yyhl4108 {
			yyb4108 = yyj4108 > l
		} else {
			yyb4108 = r.CheckBreak()
		}
		if yyb4108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4112 := z.EncBinary()
		_ = yym4112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4113 := !z.EncBinary()
			yy2arr4113 := z.EncBasicHandle().StructToArray
			var yyq4113 [2]bool
			_, _, _ = yysep4113, yyq4113, yy2arr4113
			const yyr4113 bool = false
			yyq4113[0] = len(x.Hard) != 0
			yyq4113[1] = len(x.Used) != 0
			var yynn4113 int
			if yyr4113 || yy2arr4113 {
				r.EncodeArrayStart(2)
			} else {
				yynn4113 = 0
				for _, b := range yyq4113 {
					if b {
						yynn4113++
					}
				}
				r.EncodeMapStart(yynn4113)
				yynn4113 = 0
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4113[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4113[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4113 || yy2arr4113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4116 := z.DecBinary()
	_ = yym4116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4117 := r.ContainerType()
		if yyct4117 == codecSelferValueTypeMap1234 {
			yyl4117 := r.ReadMapStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4117, d)
			}
		} else if yyct4117 == codecSelferValueTypeArray1234 {
			yyl4117 := r.ReadArrayStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4118Slc
	var yyhl4118 bool = l >= 0
	for yyj4118 := 0; ; yyj4118++ {
		if yyhl4118 {
			if yyj4118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4118Slc = r.DecodeBytes(yys4118Slc, true, true)
		yys4118 := string(yys4118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4118 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4119 := &x.Hard
				yyv4119.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4120 := &x.Used
				yyv4120.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4118)
		} // end switch yys4118
	} // end for yyj4118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4121 int
	var yyb4121 bool
	var yyhl4121 bool = l >= 0
	yyj4121++
	if yyhl4121 {
		yyb4121 = yyj4121 > l
	} else {
		yyb4121 = r.CheckBreak()
	}
	if yyb4121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4122 := &x.Hard
		yyv4122.CodecDecodeSelf(d)
	}
	yyj4121++
	if yyhl4121 {
		yyb4121 = yyj4121 > l
	} else {
		yyb4121 = r.CheckBreak()
	}
	if yyb4121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4123 := &x.Used
		yyv4123.CodecDecodeSelf(d)
	}
	for {
		yyj4121++
		if yyhl4121 {
			yyb4121 = yyj4121 > l
		} else {
			yyb4121 = r.CheckBreak()
		}
		if yyb4121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4124 := z.EncBinary()
		_ = yym4124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4125 := !z.EncBinary()
			yy2arr4125 := z.EncBasicHandle().StructToArray
			var yyq4125 [5]bool
			_, _, _ = yysep4125, yyq4125, yy2arr4125
			const yyr4125 bool = false
			yyq4125[0] = x.Kind != ""
			yyq4125[1] = x.APIVersion != ""
			yyq4125[2] = true
			yyq4125[3] = true
			yyq4125[4] = true
			var yynn4125 int
			if yyr4125 || yy2arr4125 {
				r.EncodeArrayStart(5)
			} else {
				yynn4125 = 0
				for _, b := range yyq4125 {
					if b {
						yynn4125++
					}
				}
				r.EncodeMapStart(yynn4125)
				yynn4125 = 0
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[0] {
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4128 := z.EncBinary()
					_ = yym4128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[1] {
					yym4130 := z.EncBinary()
					_ = yym4130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4131 := z.EncBinary()
					_ = yym4131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[2] {
					yy4133 := &x.ObjectMeta
					yy4133.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4134 := &x.ObjectMeta
					yy4134.CodecEncodeSelf(e)
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[3] {
					yy4136 := &x.Spec
					yy4136.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4125[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4137 := &x.Spec
					yy4137.CodecEncodeSelf(e)
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4125[4] {
					yy4139 := &x.Status
					yy4139.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4125[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4140 := &x.Status
					yy4140.CodecEncodeSelf(e)
				}
			}
			if yyr4125 || yy2arr4125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4141 := z.DecBinary()
	_ = yym4141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4142 := r.ContainerType()
		if yyct4142 == codecSelferValueTypeMap1234 {
			yyl4142 := r.ReadMapStart()
			if yyl4142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4142, d)
			}
		} else if yyct4142 == codecSelferValueTypeArray1234 {
			yyl4142 := r.ReadArrayStart()
			if yyl4142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4143Slc
	var yyhl4143 bool = l >= 0
	for yyj4143 := 0; ; yyj4143++ {
		if yyhl4143 {
			if yyj4143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4143Slc = r.DecodeBytes(yys4143Slc, true, true)
		yys4143 := string(yys4143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4143 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4146 := &x.ObjectMeta
				yyv4146.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4147 := &x.Spec
				yyv4147.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4148 := &x.Status
				yyv4148.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4143)
		} // end switch yys4143
	} // end for yyj4143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4149 int
	var yyb4149 bool
	var yyhl4149 bool = l >= 0
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4152 := &x.ObjectMeta
		yyv4152.CodecDecodeSelf(d)
	}
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4153 := &x.Spec
		yyv4153.CodecDecodeSelf(d)
	}
	yyj4149++
	if yyhl4149 {
		yyb4149 = yyj4149 > l
	} else {
		yyb4149 = r.CheckBreak()
	}
	if yyb4149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4154 := &x.Status
		yyv4154.CodecDecodeSelf(d)
	}
	for {
		yyj4149++
		if yyhl4149 {
			yyb4149 = yyj4149 > l
		} else {
			yyb4149 = r.CheckBreak()
		}
		if yyb4149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4155 := z.EncBinary()
		_ = yym4155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4156 := !z.EncBinary()
			yy2arr4156 := z.EncBasicHandle().StructToArray
			var yyq4156 [4]bool
			_, _, _ = yysep4156, yyq4156, yy2arr4156
			const yyr4156 bool = false
			yyq4156[0] = x.Kind != ""
			yyq4156[1] = x.APIVersion != ""
			yyq4156[2] = true
			var yynn4156 int
			if yyr4156 || yy2arr4156 {
				r.EncodeArrayStart(4)
			} else {
				yynn4156 = 1
				for _, b := range yyq4156 {
					if b {
						yynn4156++
					}
				}
				r.EncodeMapStart(yynn4156)
				yynn4156 = 0
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[0] {
					yym4158 := z.EncBinary()
					_ = yym4158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4159 := z.EncBinary()
					_ = yym4159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[1] {
					yym4161 := z.EncBinary()
					_ = yym4161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4162 := z.EncBinary()
					_ = yym4162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[2] {
					yy4164 := &x.ListMeta
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4164) {
					} else {
						z.EncFallback(yy4164)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4166 := &x.ListMeta
					yym4167 := z.EncBinary()
					_ = yym4167
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4166) {
					} else {
						z.EncFallback(yy4166)
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4169 := z.EncBinary()
					_ = yym4169
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4170 := z.EncBinary()
					_ = yym4170
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4171 := z.DecBinary()
	_ = yym4171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4172 := r.ContainerType()
		if yyct4172 == codecSelferValueTypeMap1234 {
			yyl4172 := r.ReadMapStart()
			if yyl4172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4172, d)
			}
		} else if yyct4172 == codecSelferValueTypeArray1234 {
			yyl4172 := r.ReadArrayStart()
			if yyl4172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4173Slc
	var yyhl4173 bool = l >= 0
	for yyj4173 := 0; ; yyj4173++ {
		if yyhl4173 {
			if yyj4173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4173Slc = r.DecodeBytes(yys4173Slc, true, true)
		yys4173 := string(yys4173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4173 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4176 := &x.ListMeta
				yym4177 := z.DecBinary()
				_ = yym4177
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4176) {
				} else {
					z.DecFallback(yyv4176, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4178 := &x.Items
				yym4179 := z.DecBinary()
				_ = yym4179
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4178), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4173)
		} // end switch yys4173
	} // end for yyj4173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4180 int
	var yyb4180 bool
	var yyhl4180 bool = l >= 0
	yyj4180++
	if yyhl4180 {
		yyb4180 = yyj4180 > l
	} else {
		yyb4180 = r.CheckBreak()
	}
	if yyb4180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4180++
	if yyhl4180 {
		yyb4180 = yyj4180 > l
	} else {
		yyb4180 = r.CheckBreak()
	}
	if yyb4180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4180++
	if yyhl4180 {
		yyb4180 = yyj4180 > l
	} else {
		yyb4180 = r.CheckBreak()
	}
	if yyb4180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4183 := &x.ListMeta
		yym4184 := z.DecBinary()
		_ = yym4184
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4183) {
		} else {
			z.DecFallback(yyv4183, false)
		}
	}
	yyj4180++
	if yyhl4180 {
		yyb4180 = yyj4180 > l
	} else {
		yyb4180 = r.CheckBreak()
	}
	if yyb4180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4185 := &x.Items
		yym4186 := z.DecBinary()
		_ = yym4186
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4185), d)
		}
	}
	for {
		yyj4180++
		if yyhl4180 {
			yyb4180 = yyj4180 > l
		} else {
			yyb4180 = r.CheckBreak()
		}
		if yyb4180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4187 := z.EncBinary()
		_ = yym4187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4188 := !z.EncBinary()
			yy2arr4188 := z.EncBasicHandle().StructToArray
			var yyq4188 [5]bool
			_, _, _ = yysep4188, yyq4188, yy2arr4188
			const yyr4188 bool = false
			yyq4188[0] = x.Kind != ""
			yyq4188[1] = x.APIVersion != ""
			yyq4188[2] = true
			yyq4188[3] = len(x.Data) != 0
			yyq4188[4] = x.Type != ""
			var yynn4188 int
			if yyr4188 || yy2arr4188 {
				r.EncodeArrayStart(5)
			} else {
				yynn4188 = 0
				for _, b := range yyq4188 {
					if b {
						yynn4188++
					}
				}
				r.EncodeMapStart(yynn4188)
				yynn4188 = 0
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[0] {
					yym4190 := z.EncBinary()
					_ = yym4190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[1] {
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[2] {
					yy4196 := &x.ObjectMeta
					yy4196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4197 := &x.ObjectMeta
					yy4197.CodecEncodeSelf(e)
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4199 := z.EncBinary()
						_ = yym4199
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4188[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4200 := z.EncBinary()
						_ = yym4200
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4188[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4188[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4188 || yy2arr4188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4202 := z.DecBinary()
	_ = yym4202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4203 := r.ContainerType()
		if yyct4203 == codecSelferValueTypeMap1234 {
			yyl4203 := r.ReadMapStart()
			if yyl4203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4203, d)
			}
		} else if yyct4203 == codecSelferValueTypeArray1234 {
			yyl4203 := r.ReadArrayStart()
			if yyl4203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4204Slc
	var yyhl4204 bool = l >= 0
	for yyj4204 := 0; ; yyj4204++ {
		if yyhl4204 {
			if yyj4204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4204Slc = r.DecodeBytes(yys4204Slc, true, true)
		yys4204 := string(yys4204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4207 := &x.ObjectMeta
				yyv4207.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4208 := &x.Data
				yym4209 := z.DecBinary()
				_ = yym4209
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4208), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4204)
		} // end switch yys4204
	} // end for yyj4204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4211 int
	var yyb4211 bool
	var yyhl4211 bool = l >= 0
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4214 := &x.ObjectMeta
		yyv4214.CodecDecodeSelf(d)
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4215 := &x.Data
		yym4216 := z.DecBinary()
		_ = yym4216
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4215), d)
		}
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4211++
		if yyhl4211 {
			yyb4211 = yyj4211 > l
		} else {
			yyb4211 = r.CheckBreak()
		}
		if yyb4211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4218 := z.EncBinary()
	_ = yym4218
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4219 := z.DecBinary()
	_ = yym4219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4220 := z.EncBinary()
		_ = yym4220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4221 := !z.EncBinary()
			yy2arr4221 := z.EncBasicHandle().StructToArray
			var yyq4221 [4]bool
			_, _, _ = yysep4221, yyq4221, yy2arr4221
			const yyr4221 bool = false
			yyq4221[0] = x.Kind != ""
			yyq4221[1] = x.APIVersion != ""
			yyq4221[2] = true
			var yynn4221 int
			if yyr4221 || yy2arr4221 {
				r.EncodeArrayStart(4)
			} else {
				yynn4221 = 1
				for _, b := range yyq4221 {
					if b {
						yynn4221++
					}
				}
				r.EncodeMapStart(yynn4221)
				yynn4221 = 0
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[0] {
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[1] {
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4227 := z.EncBinary()
					_ = yym4227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[2] {
					yy4229 := &x.ListMeta
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4229) {
					} else {
						z.EncFallback(yy4229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4231 := &x.ListMeta
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4231) {
					} else {
						z.EncFallback(yy4231)
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4234 := z.EncBinary()
					_ = yym4234
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4235 := z.EncBinary()
					_ = yym4235
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4236 := z.DecBinary()
	_ = yym4236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4237 := r.ContainerType()
		if yyct4237 == codecSelferValueTypeMap1234 {
			yyl4237 := r.ReadMapStart()
			if yyl4237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4237, d)
			}
		} else if yyct4237 == codecSelferValueTypeArray1234 {
			yyl4237 := r.ReadArrayStart()
			if yyl4237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4238Slc
	var yyhl4238 bool = l >= 0
	for yyj4238 := 0; ; yyj4238++ {
		if yyhl4238 {
			if yyj4238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4238Slc = r.DecodeBytes(yys4238Slc, true, true)
		yys4238 := string(yys4238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4238 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4241 := &x.ListMeta
				yym4242 := z.DecBinary()
				_ = yym4242
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4241) {
				} else {
					z.DecFallback(yyv4241, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4243 := &x.Items
				yym4244 := z.DecBinary()
				_ = yym4244
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4243), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4238)
		} // end switch yys4238
	} // end for yyj4238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4245 int
	var yyb4245 bool
	var yyhl4245 bool = l >= 0
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4248 := &x.ListMeta
		yym4249 := z.DecBinary()
		_ = yym4249
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4248) {
		} else {
			z.DecFallback(yyv4248, false)
		}
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4250 := &x.Items
		yym4251 := z.DecBinary()
		_ = yym4251
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4250), d)
		}
	}
	for {
		yyj4245++
		if yyhl4245 {
			yyb4245 = yyj4245 > l
		} else {
			yyb4245 = r.CheckBreak()
		}
		if yyb4245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4252 := z.EncBinary()
		_ = yym4252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4253 := !z.EncBinary()
			yy2arr4253 := z.EncBasicHandle().StructToArray
			var yyq4253 [4]bool
			_, _, _ = yysep4253, yyq4253, yy2arr4253
			const yyr4253 bool = false
			yyq4253[0] = x.Kind != ""
			yyq4253[1] = x.APIVersion != ""
			yyq4253[2] = true
			yyq4253[3] = len(x.Data) != 0
			var yynn4253 int
			if yyr4253 || yy2arr4253 {
				r.EncodeArrayStart(4)
			} else {
				yynn4253 = 0
				for _, b := range yyq4253 {
					if b {
						yynn4253++
					}
				}
				r.EncodeMapStart(yynn4253)
				yynn4253 = 0
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[0] {
					yym4255 := z.EncBinary()
					_ = yym4255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4253[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4256 := z.EncBinary()
					_ = yym4256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[1] {
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4253[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4259 := z.EncBinary()
					_ = yym4259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[2] {
					yy4261 := &x.ObjectMeta
					yy4261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4262 := &x.ObjectMeta
					yy4262.CodecEncodeSelf(e)
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4264 := z.EncBinary()
						_ = yym4264
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4265 := z.EncBinary()
						_ = yym4265
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4266 := z.DecBinary()
	_ = yym4266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4267 := r.ContainerType()
		if yyct4267 == codecSelferValueTypeMap1234 {
			yyl4267 := r.ReadMapStart()
			if yyl4267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4267, d)
			}
		} else if yyct4267 == codecSelferValueTypeArray1234 {
			yyl4267 := r.ReadArrayStart()
			if yyl4267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4268Slc
	var yyhl4268 bool = l >= 0
	for yyj4268 := 0; ; yyj4268++ {
		if yyhl4268 {
			if yyj4268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4268Slc = r.DecodeBytes(yys4268Slc, true, true)
		yys4268 := string(yys4268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4271 := &x.ObjectMeta
				yyv4271.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4272 := &x.Data
				yym4273 := z.DecBinary()
				_ = yym4273
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4272, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4268)
		} // end switch yys4268
	} // end for yyj4268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4274 int
	var yyb4274 bool
	var yyhl4274 bool = l >= 0
	yyj4274++
	if yyhl4274 {
		yyb4274 = yyj4274 > l
	} else {
		yyb4274 = r.CheckBreak()
	}
	if yyb4274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4274++
	if yyhl4274 {
		yyb4274 = yyj4274 > l
	} else {
		yyb4274 = r.CheckBreak()
	}
	if yyb4274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4274++
	if yyhl4274 {
		yyb4274 = yyj4274 > l
	} else {
		yyb4274 = r.CheckBreak()
	}
	if yyb4274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4277 := &x.ObjectMeta
		yyv4277.CodecDecodeSelf(d)
	}
	yyj4274++
	if yyhl4274 {
		yyb4274 = yyj4274 > l
	} else {
		yyb4274 = r.CheckBreak()
	}
	if yyb4274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4278 := &x.Data
		yym4279 := z.DecBinary()
		_ = yym4279
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4278, false, d)
		}
	}
	for {
		yyj4274++
		if yyhl4274 {
			yyb4274 = yyj4274 > l
		} else {
			yyb4274 = r.CheckBreak()
		}
		if yyb4274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4280 := z.EncBinary()
		_ = yym4280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4281 := !z.EncBinary()
			yy2arr4281 := z.EncBasicHandle().StructToArray
			var yyq4281 [4]bool
			_, _, _ = yysep4281, yyq4281, yy2arr4281
			const yyr4281 bool = false
			yyq4281[0] = x.Kind != ""
			yyq4281[1] = x.APIVersion != ""
			yyq4281[2] = true
			var yynn4281 int
			if yyr4281 || yy2arr4281 {
				r.EncodeArrayStart(4)
			} else {
				yynn4281 = 1
				for _, b := range yyq4281 {
					if b {
						yynn4281++
					}
				}
				r.EncodeMapStart(yynn4281)
				yynn4281 = 0
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[0] {
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4284 := z.EncBinary()
					_ = yym4284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[1] {
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4287 := z.EncBinary()
					_ = yym4287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4281[2] {
					yy4289 := &x.ListMeta
					yym4290 := z.EncBinary()
					_ = yym4290
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4289) {
					} else {
						z.EncFallback(yy4289)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4291 := &x.ListMeta
					yym4292 := z.EncBinary()
					_ = yym4292
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4291) {
					} else {
						z.EncFallback(yy4291)
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4294 := z.EncBinary()
					_ = yym4294
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4295 := z.EncBinary()
					_ = yym4295
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4281 || yy2arr4281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4296 := z.DecBinary()
	_ = yym4296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4297 := r.ContainerType()
		if yyct4297 == codecSelferValueTypeMap1234 {
			yyl4297 := r.ReadMapStart()
			if yyl4297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4297, d)
			}
		} else if yyct4297 == codecSelferValueTypeArray1234 {
			yyl4297 := r.ReadArrayStart()
			if yyl4297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4298Slc
	var yyhl4298 bool = l >= 0
	for yyj4298 := 0; ; yyj4298++ {
		if yyhl4298 {
			if yyj4298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4298Slc = r.DecodeBytes(yys4298Slc, true, true)
		yys4298 := string(yys4298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4298 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4301 := &x.ListMeta
				yym4302 := z.DecBinary()
				_ = yym4302
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4301) {
				} else {
					z.DecFallback(yyv4301, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4303 := &x.Items
				yym4304 := z.DecBinary()
				_ = yym4304
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4303), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4298)
		} // end switch yys4298
	} // end for yyj4298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4305 int
	var yyb4305 bool
	var yyhl4305 bool = l >= 0
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4308 := &x.ListMeta
		yym4309 := z.DecBinary()
		_ = yym4309
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4308) {
		} else {
			z.DecFallback(yyv4308, false)
		}
	}
	yyj4305++
	if yyhl4305 {
		yyb4305 = yyj4305 > l
	} else {
		yyb4305 = r.CheckBreak()
	}
	if yyb4305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4310 := &x.Items
		yym4311 := z.DecBinary()
		_ = yym4311
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4310), d)
		}
	}
	for {
		yyj4305++
		if yyhl4305 {
			yyb4305 = yyj4305 > l
		} else {
			yyb4305 = r.CheckBreak()
		}
		if yyb4305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4312 := z.EncBinary()
	_ = yym4312
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4313 := z.DecBinary()
	_ = yym4313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4314 := z.EncBinary()
	_ = yym4314
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4315 := z.DecBinary()
	_ = yym4315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4316 := z.EncBinary()
		_ = yym4316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4317 := !z.EncBinary()
			yy2arr4317 := z.EncBasicHandle().StructToArray
			var yyq4317 [4]bool
			_, _, _ = yysep4317, yyq4317, yy2arr4317
			const yyr4317 bool = false
			yyq4317[2] = x.Message != ""
			yyq4317[3] = x.Error != ""
			var yynn4317 int
			if yyr4317 || yy2arr4317 {
				r.EncodeArrayStart(4)
			} else {
				yynn4317 = 2
				for _, b := range yyq4317 {
					if b {
						yynn4317++
					}
				}
				r.EncodeMapStart(yynn4317)
				yynn4317 = 0
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4317[2] {
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4317[3] {
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4317[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4317 || yy2arr4317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4326 := z.DecBinary()
	_ = yym4326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4327 := r.ContainerType()
		if yyct4327 == codecSelferValueTypeMap1234 {
			yyl4327 := r.ReadMapStart()
			if yyl4327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4327, d)
			}
		} else if yyct4327 == codecSelferValueTypeArray1234 {
			yyl4327 := r.ReadArrayStart()
			if yyl4327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4328Slc
	var yyhl4328 bool = l >= 0
	for yyj4328 := 0; ; yyj4328++ {
		if yyhl4328 {
			if yyj4328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4328Slc = r.DecodeBytes(yys4328Slc, true, true)
		yys4328 := string(yys4328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4328 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4328)
		} // end switch yys4328
	} // end for yyj4328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4333 int
	var yyb4333 bool
	var yyhl4333 bool = l >= 0
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4333++
		if yyhl4333 {
			yyb4333 = yyj4333 > l
		} else {
			yyb4333 = r.CheckBreak()
		}
		if yyb4333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4338 := z.EncBinary()
		_ = yym4338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4339 := !z.EncBinary()
			yy2arr4339 := z.EncBasicHandle().StructToArray
			var yyq4339 [4]bool
			_, _, _ = yysep4339, yyq4339, yy2arr4339
			const yyr4339 bool = false
			yyq4339[0] = x.Kind != ""
			yyq4339[1] = x.APIVersion != ""
			yyq4339[2] = true
			yyq4339[3] = len(x.Conditions) != 0
			var yynn4339 int
			if yyr4339 || yy2arr4339 {
				r.EncodeArrayStart(4)
			} else {
				yynn4339 = 0
				for _, b := range yyq4339 {
					if b {
						yynn4339++
					}
				}
				r.EncodeMapStart(yynn4339)
				yynn4339 = 0
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[0] {
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4339[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4342 := z.EncBinary()
					_ = yym4342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[1] {
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4339[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[2] {
					yy4347 := &x.ObjectMeta
					yy4347.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4339[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4348 := &x.ObjectMeta
					yy4348.CodecEncodeSelf(e)
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4339[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4350 := z.EncBinary()
						_ = yym4350
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4339[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4351 := z.EncBinary()
						_ = yym4351
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4339 || yy2arr4339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4352 := z.DecBinary()
	_ = yym4352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4353 := r.ContainerType()
		if yyct4353 == codecSelferValueTypeMap1234 {
			yyl4353 := r.ReadMapStart()
			if yyl4353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4353, d)
			}
		} else if yyct4353 == codecSelferValueTypeArray1234 {
			yyl4353 := r.ReadArrayStart()
			if yyl4353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4354Slc
	var yyhl4354 bool = l >= 0
	for yyj4354 := 0; ; yyj4354++ {
		if yyhl4354 {
			if yyj4354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4354Slc = r.DecodeBytes(yys4354Slc, true, true)
		yys4354 := string(yys4354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4354 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4357 := &x.ObjectMeta
				yyv4357.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4358 := &x.Conditions
				yym4359 := z.DecBinary()
				_ = yym4359
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4358), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4354)
		} // end switch yys4354
	} // end for yyj4354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4360 int
	var yyb4360 bool
	var yyhl4360 bool = l >= 0
	yyj4360++
	if yyhl4360 {
		yyb4360 = yyj4360 > l
	} else {
		yyb4360 = r.CheckBreak()
	}
	if yyb4360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4360++
	if yyhl4360 {
		yyb4360 = yyj4360 > l
	} else {
		yyb4360 = r.CheckBreak()
	}
	if yyb4360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4360++
	if yyhl4360 {
		yyb4360 = yyj4360 > l
	} else {
		yyb4360 = r.CheckBreak()
	}
	if yyb4360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4363 := &x.ObjectMeta
		yyv4363.CodecDecodeSelf(d)
	}
	yyj4360++
	if yyhl4360 {
		yyb4360 = yyj4360 > l
	} else {
		yyb4360 = r.CheckBreak()
	}
	if yyb4360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4364 := &x.Conditions
		yym4365 := z.DecBinary()
		_ = yym4365
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4364), d)
		}
	}
	for {
		yyj4360++
		if yyhl4360 {
			yyb4360 = yyj4360 > l
		} else {
			yyb4360 = r.CheckBreak()
		}
		if yyb4360 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4360-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4366 := z.EncBinary()
		_ = yym4366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4367 := !z.EncBinary()
			yy2arr4367 := z.EncBasicHandle().StructToArray
			var yyq4367 [4]bool
			_, _, _ = yysep4367, yyq4367, yy2arr4367
			const yyr4367 bool = false
			yyq4367[0] = x.Kind != ""
			yyq4367[1] = x.APIVersion != ""
			yyq4367[2] = true
			var yynn4367 int
			if yyr4367 || yy2arr4367 {
				r.EncodeArrayStart(4)
			} else {
				yynn4367 = 1
				for _, b := range yyq4367 {
					if b {
						yynn4367++
					}
				}
				r.EncodeMapStart(yynn4367)
				yynn4367 = 0
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[0] {
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4370 := z.EncBinary()
					_ = yym4370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[1] {
					yym4372 := z.EncBinary()
					_ = yym4372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4367[2] {
					yy4375 := &x.ListMeta
					yym4376 := z.EncBinary()
					_ = yym4376
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4375) {
					} else {
						z.EncFallback(yy4375)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4377 := &x.ListMeta
					yym4378 := z.EncBinary()
					_ = yym4378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4377) {
					} else {
						z.EncFallback(yy4377)
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4380 := z.EncBinary()
					_ = yym4380
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4381 := z.EncBinary()
					_ = yym4381
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4367 || yy2arr4367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4382 := z.DecBinary()
	_ = yym4382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4383 := r.ContainerType()
		if yyct4383 == codecSelferValueTypeMap1234 {
			yyl4383 := r.ReadMapStart()
			if yyl4383 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4383, d)
			}
		} else if yyct4383 == codecSelferValueTypeArray1234 {
			yyl4383 := r.ReadArrayStart()
			if yyl4383 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4383, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4384Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4384Slc
	var yyhl4384 bool = l >= 0
	for yyj4384 := 0; ; yyj4384++ {
		if yyhl4384 {
			if yyj4384 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4384Slc = r.DecodeBytes(yys4384Slc, true, true)
		yys4384 := string(yys4384Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4384 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4387 := &x.ListMeta
				yym4388 := z.DecBinary()
				_ = yym4388
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4387) {
				} else {
					z.DecFallback(yyv4387, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4389 := &x.Items
				yym4390 := z.DecBinary()
				_ = yym4390
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4389), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4384)
		} // end switch yys4384
	} // end for yyj4384
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4391 int
	var yyb4391 bool
	var yyhl4391 bool = l >= 0
	yyj4391++
	if yyhl4391 {
		yyb4391 = yyj4391 > l
	} else {
		yyb4391 = r.CheckBreak()
	}
	if yyb4391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4391++
	if yyhl4391 {
		yyb4391 = yyj4391 > l
	} else {
		yyb4391 = r.CheckBreak()
	}
	if yyb4391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4391++
	if yyhl4391 {
		yyb4391 = yyj4391 > l
	} else {
		yyb4391 = r.CheckBreak()
	}
	if yyb4391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4394 := &x.ListMeta
		yym4395 := z.DecBinary()
		_ = yym4395
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4394) {
		} else {
			z.DecFallback(yyv4394, false)
		}
	}
	yyj4391++
	if yyhl4391 {
		yyb4391 = yyj4391 > l
	} else {
		yyb4391 = r.CheckBreak()
	}
	if yyb4391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4396 := &x.Items
		yym4397 := z.DecBinary()
		_ = yym4397
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4396), d)
		}
	}
	for {
		yyj4391++
		if yyhl4391 {
			yyb4391 = yyj4391 > l
		} else {
			yyb4391 = r.CheckBreak()
		}
		if yyb4391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4398 := z.EncBinary()
		_ = yym4398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4399 := !z.EncBinary()
			yy2arr4399 := z.EncBasicHandle().StructToArray
			var yyq4399 [6]bool
			_, _, _ = yysep4399, yyq4399, yy2arr4399
			const yyr4399 bool = false
			yyq4399[0] = x.Capabilities != nil
			yyq4399[1] = x.Privileged != nil
			yyq4399[2] = x.SELinuxOptions != nil
			yyq4399[3] = x.RunAsUser != nil
			yyq4399[4] = x.RunAsNonRoot != nil
			yyq4399[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4399 int
			if yyr4399 || yy2arr4399 {
				r.EncodeArrayStart(6)
			} else {
				yynn4399 = 0
				for _, b := range yyq4399 {
					if b {
						yynn4399++
					}
				}
				r.EncodeMapStart(yynn4399)
				yynn4399 = 0
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4399[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4402 := *x.Privileged
						yym4403 := z.EncBinary()
						_ = yym4403
						if false {
						} else {
							r.EncodeBool(bool(yy4402))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4399[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4404 := *x.Privileged
						yym4405 := z.EncBinary()
						_ = yym4405
						if false {
						} else {
							r.EncodeBool(bool(yy4404))
						}
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4399[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4408 := *x.RunAsUser
						yym4409 := z.EncBinary()
						_ = yym4409
						if false {
						} else {
							r.EncodeInt(int64(yy4408))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4399[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4410 := *x.RunAsUser
						yym4411 := z.EncBinary()
						_ = yym4411
						if false {
						} else {
							r.EncodeInt(int64(yy4410))
						}
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4413 := *x.RunAsNonRoot
						yym4414 := z.EncBinary()
						_ = yym4414
						if false {
						} else {
							r.EncodeBool(bool(yy4413))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4399[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4415 := *x.RunAsNonRoot
						yym4416 := z.EncBinary()
						_ = yym4416
						if false {
						} else {
							r.EncodeBool(bool(yy4415))
						}
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4399[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4418 := *x.ReadOnlyRootFilesystem
						yym4419 := z.EncBinary()
						_ = yym4419
						if false {
						} else {
							r.EncodeBool(bool(yy4418))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4399[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4420 := *x.ReadOnlyRootFilesystem
						yym4421 := z.EncBinary()
						_ = yym4421
						if false {
						} else {
							r.EncodeBool(bool(yy4420))
						}
					}
				}
			}
			if yyr4399 || yy2arr4399 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4422 := z.DecBinary()
	_ = yym4422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4423 := r.ContainerType()
		if yyct4423 == codecSelferValueTypeMap1234 {
			yyl4423 := r.ReadMapStart()
			if yyl4423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4423, d)
			}
		} else if yyct4423 == codecSelferValueTypeArray1234 {
			yyl4423 := r.ReadArrayStart()
			if yyl4423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4424Slc
	var yyhl4424 bool = l >= 0
	for yyj4424 := 0; ; yyj4424++ {
		if yyhl4424 {
			if yyj4424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4424Slc = r.DecodeBytes(yys4424Slc, true, true)
		yys4424 := string(yys4424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4424 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4427 := z.DecBinary()
				_ = yym4427
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4430 := z.DecBinary()
				_ = yym4430
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4432 := z.DecBinary()
				_ = yym4432
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4434 := z.DecBinary()
				_ = yym4434
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4424)
		} // end switch yys4424
	} // end for yyj4424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4435 int
	var yyb4435 bool
	var yyhl4435 bool = l >= 0
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4438 := z.DecBinary()
		_ = yym4438
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4441 := z.DecBinary()
		_ = yym4441
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4443 := z.DecBinary()
		_ = yym4443
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4435++
	if yyhl4435 {
		yyb4435 = yyj4435 > l
	} else {
		yyb4435 = r.CheckBreak()
	}
	if yyb4435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4445 := z.DecBinary()
		_ = yym4445
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4435++
		if yyhl4435 {
			yyb4435 = yyj4435 > l
		} else {
			yyb4435 = r.CheckBreak()
		}
		if yyb4435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4446 := z.EncBinary()
		_ = yym4446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4447 := !z.EncBinary()
			yy2arr4447 := z.EncBasicHandle().StructToArray
			var yyq4447 [4]bool
			_, _, _ = yysep4447, yyq4447, yy2arr4447
			const yyr4447 bool = false
			yyq4447[0] = x.User != ""
			yyq4447[1] = x.Role != ""
			yyq4447[2] = x.Type != ""
			yyq4447[3] = x.Level != ""
			var yynn4447 int
			if yyr4447 || yy2arr4447 {
				r.EncodeArrayStart(4)
			} else {
				yynn4447 = 0
				for _, b := range yyq4447 {
					if b {
						yynn4447++
					}
				}
				r.EncodeMapStart(yynn4447)
				yynn4447 = 0
			}
			if yyr4447 || yy2arr4447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4447[0] {
					yym4449 := z.EncBinary()
					_ = yym4449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4450 := z.EncBinary()
					_ = yym4450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4447 || yy2arr4447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4447[1] {
					yym4452 := z.EncBinary()
					_ = yym4452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4453 := z.EncBinary()
					_ = yym4453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4447 || yy2arr4447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4447[2] {
					yym4455 := z.EncBinary()
					_ = yym4455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4456 := z.EncBinary()
					_ = yym4456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4447 || yy2arr4447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4447[3] {
					yym4458 := z.EncBinary()
					_ = yym4458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4447[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4459 := z.EncBinary()
					_ = yym4459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4447 || yy2arr4447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4460 := z.DecBinary()
	_ = yym4460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4461 := r.ContainerType()
		if yyct4461 == codecSelferValueTypeMap1234 {
			yyl4461 := r.ReadMapStart()
			if yyl4461 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4461, d)
			}
		} else if yyct4461 == codecSelferValueTypeArray1234 {
			yyl4461 := r.ReadArrayStart()
			if yyl4461 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4462Slc
	var yyhl4462 bool = l >= 0
	for yyj4462 := 0; ; yyj4462++ {
		if yyhl4462 {
			if yyj4462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4462Slc = r.DecodeBytes(yys4462Slc, true, true)
		yys4462 := string(yys4462Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4462 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4462)
		} // end switch yys4462
	} // end for yyj4462
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4467 int
	var yyb4467 bool
	var yyhl4467 bool = l >= 0
	yyj4467++
	if yyhl4467 {
		yyb4467 = yyj4467 > l
	} else {
		yyb4467 = r.CheckBreak()
	}
	if yyb4467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4467++
	if yyhl4467 {
		yyb4467 = yyj4467 > l
	} else {
		yyb4467 = r.CheckBreak()
	}
	if yyb4467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4467++
	if yyhl4467 {
		yyb4467 = yyj4467 > l
	} else {
		yyb4467 = r.CheckBreak()
	}
	if yyb4467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4467++
	if yyhl4467 {
		yyb4467 = yyj4467 > l
	} else {
		yyb4467 = r.CheckBreak()
	}
	if yyb4467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4467++
		if yyhl4467 {
			yyb4467 = yyj4467 > l
		} else {
			yyb4467 = r.CheckBreak()
		}
		if yyb4467 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4467-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4472 := z.EncBinary()
		_ = yym4472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4473 := !z.EncBinary()
			yy2arr4473 := z.EncBasicHandle().StructToArray
			var yyq4473 [5]bool
			_, _, _ = yysep4473, yyq4473, yy2arr4473
			const yyr4473 bool = false
			yyq4473[0] = x.Kind != ""
			yyq4473[1] = x.APIVersion != ""
			yyq4473[2] = true
			var yynn4473 int
			if yyr4473 || yy2arr4473 {
				r.EncodeArrayStart(5)
			} else {
				yynn4473 = 2
				for _, b := range yyq4473 {
					if b {
						yynn4473++
					}
				}
				r.EncodeMapStart(yynn4473)
				yynn4473 = 0
			}
			if yyr4473 || yy2arr4473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4473[0] {
					yym4475 := z.EncBinary()
					_ = yym4475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4476 := z.EncBinary()
					_ = yym4476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4473 || yy2arr4473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4473[1] {
					yym4478 := z.EncBinary()
					_ = yym4478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4479 := z.EncBinary()
					_ = yym4479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4473 || yy2arr4473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4473[2] {
					yy4481 := &x.ObjectMeta
					yy4481.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4473[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4482 := &x.ObjectMeta
					yy4482.CodecEncodeSelf(e)
				}
			}
			if yyr4473 || yy2arr4473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4484 := z.EncBinary()
				_ = yym4484
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4485 := z.EncBinary()
				_ = yym4485
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4473 || yy2arr4473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4487 := z.EncBinary()
					_ = yym4487
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4488 := z.EncBinary()
					_ = yym4488
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4473 || yy2arr4473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4489 := z.DecBinary()
	_ = yym4489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4490 := r.ContainerType()
		if yyct4490 == codecSelferValueTypeMap1234 {
			yyl4490 := r.ReadMapStart()
			if yyl4490 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4490, d)
			}
		} else if yyct4490 == codecSelferValueTypeArray1234 {
			yyl4490 := r.ReadArrayStart()
			if yyl4490 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4491Slc
	var yyhl4491 bool = l >= 0
	for yyj4491 := 0; ; yyj4491++ {
		if yyhl4491 {
			if yyj4491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4491Slc = r.DecodeBytes(yys4491Slc, true, true)
		yys4491 := string(yys4491Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4491 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4494 := &x.ObjectMeta
				yyv4494.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4496 := &x.Data
				yym4497 := z.DecBinary()
				_ = yym4497
				if false {
				} else {
					*yyv4496 = r.DecodeBytes(*(*[]byte)(yyv4496), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4491)
		} // end switch yys4491
	} // end for yyj4491
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4498 int
	var yyb4498 bool
	var yyhl4498 bool = l >= 0
	yyj4498++
	if yyhl4498 {
		yyb4498 = yyj4498 > l
	} else {
		yyb4498 = r.CheckBreak()
	}
	if yyb4498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4498++
	if yyhl4498 {
		yyb4498 = yyj4498 > l
	} else {
		yyb4498 = r.CheckBreak()
	}
	if yyb4498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4498++
	if yyhl4498 {
		yyb4498 = yyj4498 > l
	} else {
		yyb4498 = r.CheckBreak()
	}
	if yyb4498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4501 := &x.ObjectMeta
		yyv4501.CodecDecodeSelf(d)
	}
	yyj4498++
	if yyhl4498 {
		yyb4498 = yyj4498 > l
	} else {
		yyb4498 = r.CheckBreak()
	}
	if yyb4498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4498++
	if yyhl4498 {
		yyb4498 = yyj4498 > l
	} else {
		yyb4498 = r.CheckBreak()
	}
	if yyb4498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4503 := &x.Data
		yym4504 := z.DecBinary()
		_ = yym4504
		if false {
		} else {
			*yyv4503 = r.DecodeBytes(*(*[]byte)(yyv4503), false, false)
		}
	}
	for {
		yyj4498++
		if yyhl4498 {
			yyb4498 = yyj4498 > l
		} else {
			yyb4498 = r.CheckBreak()
		}
		if yyb4498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4505 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4506 := &yyv4505
		yy4506.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4507 := *v
	yyh4507, yyl4507 := z.DecSliceHelperStart()
	var yyc4507 bool
	if yyl4507 == 0 {
		if yyv4507 == nil {
			yyv4507 = []OwnerReference{}
			yyc4507 = true
		} else if len(yyv4507) != 0 {
			yyv4507 = yyv4507[:0]
			yyc4507 = true
		}
	} else if yyl4507 > 0 {
		var yyrr4507, yyrl4507 int
		var yyrt4507 bool
		if yyl4507 > cap(yyv4507) {

			yyrg4507 := len(yyv4507) > 0
			yyv24507 := yyv4507
			yyrl4507, yyrt4507 = z.DecInferLen(yyl4507, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4507 {
				if yyrl4507 <= cap(yyv4507) {
					yyv4507 = yyv4507[:yyrl4507]
				} else {
					yyv4507 = make([]OwnerReference, yyrl4507)
				}
			} else {
				yyv4507 = make([]OwnerReference, yyrl4507)
			}
			yyc4507 = true
			yyrr4507 = len(yyv4507)
			if yyrg4507 {
				copy(yyv4507, yyv24507)
			}
		} else if yyl4507 != len(yyv4507) {
			yyv4507 = yyv4507[:yyl4507]
			yyc4507 = true
		}
		yyj4507 := 0
		for ; yyj4507 < yyrr4507; yyj4507++ {
			yyh4507.ElemContainerState(yyj4507)
			if r.TryDecodeAsNil() {
				yyv4507[yyj4507] = OwnerReference{}
			} else {
				yyv4508 := &yyv4507[yyj4507]
				yyv4508.CodecDecodeSelf(d)
			}

		}
		if yyrt4507 {
			for ; yyj4507 < yyl4507; yyj4507++ {
				yyv4507 = append(yyv4507, OwnerReference{})
				yyh4507.ElemContainerState(yyj4507)
				if r.TryDecodeAsNil() {
					yyv4507[yyj4507] = OwnerReference{}
				} else {
					yyv4509 := &yyv4507[yyj4507]
					yyv4509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4507 := 0
		for ; !r.CheckBreak(); yyj4507++ {

			if yyj4507 >= len(yyv4507) {
				yyv4507 = append(yyv4507, OwnerReference{}) // var yyz4507 OwnerReference
				yyc4507 = true
			}
			yyh4507.ElemContainerState(yyj4507)
			if yyj4507 < len(yyv4507) {
				if r.TryDecodeAsNil() {
					yyv4507[yyj4507] = OwnerReference{}
				} else {
					yyv4510 := &yyv4507[yyj4507]
					yyv4510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4507 < len(yyv4507) {
			yyv4507 = yyv4507[:yyj4507]
			yyc4507 = true
		} else if yyj4507 == 0 && yyv4507 == nil {
			yyv4507 = []OwnerReference{}
			yyc4507 = true
		}
	}
	yyh4507.End()
	if yyc4507 {
		*v = yyv4507
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4511 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4511.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4512 := *v
	yyh4512, yyl4512 := z.DecSliceHelperStart()
	var yyc4512 bool
	if yyl4512 == 0 {
		if yyv4512 == nil {
			yyv4512 = []PersistentVolumeAccessMode{}
			yyc4512 = true
		} else if len(yyv4512) != 0 {
			yyv4512 = yyv4512[:0]
			yyc4512 = true
		}
	} else if yyl4512 > 0 {
		var yyrr4512, yyrl4512 int
		var yyrt4512 bool
		if yyl4512 > cap(yyv4512) {

			yyrl4512, yyrt4512 = z.DecInferLen(yyl4512, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4512 {
				if yyrl4512 <= cap(yyv4512) {
					yyv4512 = yyv4512[:yyrl4512]
				} else {
					yyv4512 = make([]PersistentVolumeAccessMode, yyrl4512)
				}
			} else {
				yyv4512 = make([]PersistentVolumeAccessMode, yyrl4512)
			}
			yyc4512 = true
			yyrr4512 = len(yyv4512)
		} else if yyl4512 != len(yyv4512) {
			yyv4512 = yyv4512[:yyl4512]
			yyc4512 = true
		}
		yyj4512 := 0
		for ; yyj4512 < yyrr4512; yyj4512++ {
			yyh4512.ElemContainerState(yyj4512)
			if r.TryDecodeAsNil() {
				yyv4512[yyj4512] = ""
			} else {
				yyv4512[yyj4512] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4512 {
			for ; yyj4512 < yyl4512; yyj4512++ {
				yyv4512 = append(yyv4512, "")
				yyh4512.ElemContainerState(yyj4512)
				if r.TryDecodeAsNil() {
					yyv4512[yyj4512] = ""
				} else {
					yyv4512[yyj4512] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4512 := 0
		for ; !r.CheckBreak(); yyj4512++ {

			if yyj4512 >= len(yyv4512) {
				yyv4512 = append(yyv4512, "") // var yyz4512 PersistentVolumeAccessMode
				yyc4512 = true
			}
			yyh4512.ElemContainerState(yyj4512)
			if yyj4512 < len(yyv4512) {
				if r.TryDecodeAsNil() {
					yyv4512[yyj4512] = ""
				} else {
					yyv4512[yyj4512] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4512 < len(yyv4512) {
			yyv4512 = yyv4512[:yyj4512]
			yyc4512 = true
		} else if yyj4512 == 0 && yyv4512 == nil {
			yyv4512 = []PersistentVolumeAccessMode{}
			yyc4512 = true
		}
	}
	yyh4512.End()
	if yyc4512 {
		*v = yyv4512
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4516 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4517 := &yyv4516
		yy4517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4518 := *v
	yyh4518, yyl4518 := z.DecSliceHelperStart()
	var yyc4518 bool
	if yyl4518 == 0 {
		if yyv4518 == nil {
			yyv4518 = []PersistentVolume{}
			yyc4518 = true
		} else if len(yyv4518) != 0 {
			yyv4518 = yyv4518[:0]
			yyc4518 = true
		}
	} else if yyl4518 > 0 {
		var yyrr4518, yyrl4518 int
		var yyrt4518 bool
		if yyl4518 > cap(yyv4518) {

			yyrg4518 := len(yyv4518) > 0
			yyv24518 := yyv4518
			yyrl4518, yyrt4518 = z.DecInferLen(yyl4518, z.DecBasicHandle().MaxInitLen, 472)
			if yyrt4518 {
				if yyrl4518 <= cap(yyv4518) {
					yyv4518 = yyv4518[:yyrl4518]
				} else {
					yyv4518 = make([]PersistentVolume, yyrl4518)
				}
			} else {
				yyv4518 = make([]PersistentVolume, yyrl4518)
			}
			yyc4518 = true
			yyrr4518 = len(yyv4518)
			if yyrg4518 {
				copy(yyv4518, yyv24518)
			}
		} else if yyl4518 != len(yyv4518) {
			yyv4518 = yyv4518[:yyl4518]
			yyc4518 = true
		}
		yyj4518 := 0
		for ; yyj4518 < yyrr4518; yyj4518++ {
			yyh4518.ElemContainerState(yyj4518)
			if r.TryDecodeAsNil() {
				yyv4518[yyj4518] = PersistentVolume{}
			} else {
				yyv4519 := &yyv4518[yyj4518]
				yyv4519.CodecDecodeSelf(d)
			}

		}
		if yyrt4518 {
			for ; yyj4518 < yyl4518; yyj4518++ {
				yyv4518 = append(yyv4518, PersistentVolume{})
				yyh4518.ElemContainerState(yyj4518)
				if r.TryDecodeAsNil() {
					yyv4518[yyj4518] = PersistentVolume{}
				} else {
					yyv4520 := &yyv4518[yyj4518]
					yyv4520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4518 := 0
		for ; !r.CheckBreak(); yyj4518++ {

			if yyj4518 >= len(yyv4518) {
				yyv4518 = append(yyv4518, PersistentVolume{}) // var yyz4518 PersistentVolume
				yyc4518 = true
			}
			yyh4518.ElemContainerState(yyj4518)
			if yyj4518 < len(yyv4518) {
				if r.TryDecodeAsNil() {
					yyv4518[yyj4518] = PersistentVolume{}
				} else {
					yyv4521 := &yyv4518[yyj4518]
					yyv4521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4518 < len(yyv4518) {
			yyv4518 = yyv4518[:yyj4518]
			yyc4518 = true
		} else if yyj4518 == 0 && yyv4518 == nil {
			yyv4518 = []PersistentVolume{}
			yyc4518 = true
		}
	}
	yyh4518.End()
	if yyc4518 {
		*v = yyv4518
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4523 := &yyv4522
		yy4523.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4524 := *v
	yyh4524, yyl4524 := z.DecSliceHelperStart()
	var yyc4524 bool
	if yyl4524 == 0 {
		if yyv4524 == nil {
			yyv4524 = []PersistentVolumeClaim{}
			yyc4524 = true
		} else if len(yyv4524) != 0 {
			yyv4524 = yyv4524[:0]
			yyc4524 = true
		}
	} else if yyl4524 > 0 {
		var yyrr4524, yyrl4524 int
		var yyrt4524 bool
		if yyl4524 > cap(yyv4524) {

			yyrg4524 := len(yyv4524) > 0
			yyv24524 := yyv4524
			yyrl4524, yyrt4524 = z.DecInferLen(yyl4524, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4524 {
				if yyrl4524 <= cap(yyv4524) {
					yyv4524 = yyv4524[:yyrl4524]
				} else {
					yyv4524 = make([]PersistentVolumeClaim, yyrl4524)
				}
			} else {
				yyv4524 = make([]PersistentVolumeClaim, yyrl4524)
			}
			yyc4524 = true
			yyrr4524 = len(yyv4524)
			if yyrg4524 {
				copy(yyv4524, yyv24524)
			}
		} else if yyl4524 != len(yyv4524) {
			yyv4524 = yyv4524[:yyl4524]
			yyc4524 = true
		}
		yyj4524 := 0
		for ; yyj4524 < yyrr4524; yyj4524++ {
			yyh4524.ElemContainerState(yyj4524)
			if r.TryDecodeAsNil() {
				yyv4524[yyj4524] = PersistentVolumeClaim{}
			} else {
				yyv4525 := &yyv4524[yyj4524]
				yyv4525.CodecDecodeSelf(d)
			}

		}
		if yyrt4524 {
			for ; yyj4524 < yyl4524; yyj4524++ {
				yyv4524 = append(yyv4524, PersistentVolumeClaim{})
				yyh4524.ElemContainerState(yyj4524)
				if r.TryDecodeAsNil() {
					yyv4524[yyj4524] = PersistentVolumeClaim{}
				} else {
					yyv4526 := &yyv4524[yyj4524]
					yyv4526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4524 := 0
		for ; !r.CheckBreak(); yyj4524++ {

			if yyj4524 >= len(yyv4524) {
				yyv4524 = append(yyv4524, PersistentVolumeClaim{}) // var yyz4524 PersistentVolumeClaim
				yyc4524 = true
			}
			yyh4524.ElemContainerState(yyj4524)
			if yyj4524 < len(yyv4524) {
				if r.TryDecodeAsNil() {
					yyv4524[yyj4524] = PersistentVolumeClaim{}
				} else {
					yyv4527 := &yyv4524[yyj4524]
					yyv4527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4524 < len(yyv4524) {
			yyv4524 = yyv4524[:yyj4524]
			yyc4524 = true
		} else if yyj4524 == 0 && yyv4524 == nil {
			yyv4524 = []PersistentVolumeClaim{}
			yyc4524 = true
		}
	}
	yyh4524.End()
	if yyc4524 {
		*v = yyv4524
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4528 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4529 := &yyv4528
		yy4529.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4530 := *v
	yyh4530, yyl4530 := z.DecSliceHelperStart()
	var yyc4530 bool
	if yyl4530 == 0 {
		if yyv4530 == nil {
			yyv4530 = []KeyToPath{}
			yyc4530 = true
		} else if len(yyv4530) != 0 {
			yyv4530 = yyv4530[:0]
			yyc4530 = true
		}
	} else if yyl4530 > 0 {
		var yyrr4530, yyrl4530 int
		var yyrt4530 bool
		if yyl4530 > cap(yyv4530) {

			yyrg4530 := len(yyv4530) > 0
			yyv24530 := yyv4530
			yyrl4530, yyrt4530 = z.DecInferLen(yyl4530, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4530 {
				if yyrl4530 <= cap(yyv4530) {
					yyv4530 = yyv4530[:yyrl4530]
				} else {
					yyv4530 = make([]KeyToPath, yyrl4530)
				}
			} else {
				yyv4530 = make([]KeyToPath, yyrl4530)
			}
			yyc4530 = true
			yyrr4530 = len(yyv4530)
			if yyrg4530 {
				copy(yyv4530, yyv24530)
			}
		} else if yyl4530 != len(yyv4530) {
			yyv4530 = yyv4530[:yyl4530]
			yyc4530 = true
		}
		yyj4530 := 0
		for ; yyj4530 < yyrr4530; yyj4530++ {
			yyh4530.ElemContainerState(yyj4530)
			if r.TryDecodeAsNil() {
				yyv4530[yyj4530] = KeyToPath{}
			} else {
				yyv4531 := &yyv4530[yyj4530]
				yyv4531.CodecDecodeSelf(d)
			}

		}
		if yyrt4530 {
			for ; yyj4530 < yyl4530; yyj4530++ {
				yyv4530 = append(yyv4530, KeyToPath{})
				yyh4530.ElemContainerState(yyj4530)
				if r.TryDecodeAsNil() {
					yyv4530[yyj4530] = KeyToPath{}
				} else {
					yyv4532 := &yyv4530[yyj4530]
					yyv4532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4530 := 0
		for ; !r.CheckBreak(); yyj4530++ {

			if yyj4530 >= len(yyv4530) {
				yyv4530 = append(yyv4530, KeyToPath{}) // var yyz4530 KeyToPath
				yyc4530 = true
			}
			yyh4530.ElemContainerState(yyj4530)
			if yyj4530 < len(yyv4530) {
				if r.TryDecodeAsNil() {
					yyv4530[yyj4530] = KeyToPath{}
				} else {
					yyv4533 := &yyv4530[yyj4530]
					yyv4533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4530 < len(yyv4530) {
			yyv4530 = yyv4530[:yyj4530]
			yyc4530 = true
		} else if yyj4530 == 0 && yyv4530 == nil {
			yyv4530 = []KeyToPath{}
			yyc4530 = true
		}
	}
	yyh4530.End()
	if yyc4530 {
		*v = yyv4530
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4534 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4535 := &yyv4534
		yy4535.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4536 := *v
	yyh4536, yyl4536 := z.DecSliceHelperStart()
	var yyc4536 bool
	if yyl4536 == 0 {
		if yyv4536 == nil {
			yyv4536 = []DownwardAPIVolumeFile{}
			yyc4536 = true
		} else if len(yyv4536) != 0 {
			yyv4536 = yyv4536[:0]
			yyc4536 = true
		}
	} else if yyl4536 > 0 {
		var yyrr4536, yyrl4536 int
		var yyrt4536 bool
		if yyl4536 > cap(yyv4536) {

			yyrg4536 := len(yyv4536) > 0
			yyv24536 := yyv4536
			yyrl4536, yyrt4536 = z.DecInferLen(yyl4536, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4536 {
				if yyrl4536 <= cap(yyv4536) {
					yyv4536 = yyv4536[:yyrl4536]
				} else {
					yyv4536 = make([]DownwardAPIVolumeFile, yyrl4536)
				}
			} else {
				yyv4536 = make([]DownwardAPIVolumeFile, yyrl4536)
			}
			yyc4536 = true
			yyrr4536 = len(yyv4536)
			if yyrg4536 {
				copy(yyv4536, yyv24536)
			}
		} else if yyl4536 != len(yyv4536) {
			yyv4536 = yyv4536[:yyl4536]
			yyc4536 = true
		}
		yyj4536 := 0
		for ; yyj4536 < yyrr4536; yyj4536++ {
			yyh4536.ElemContainerState(yyj4536)
			if r.TryDecodeAsNil() {
				yyv4536[yyj4536] = DownwardAPIVolumeFile{}
			} else {
				yyv4537 := &yyv4536[yyj4536]
				yyv4537.CodecDecodeSelf(d)
			}

		}
		if yyrt4536 {
			for ; yyj4536 < yyl4536; yyj4536++ {
				yyv4536 = append(yyv4536, DownwardAPIVolumeFile{})
				yyh4536.ElemContainerState(yyj4536)
				if r.TryDecodeAsNil() {
					yyv4536[yyj4536] = DownwardAPIVolumeFile{}
				} else {
					yyv4538 := &yyv4536[yyj4536]
					yyv4538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4536 := 0
		for ; !r.CheckBreak(); yyj4536++ {

			if yyj4536 >= len(yyv4536) {
				yyv4536 = append(yyv4536, DownwardAPIVolumeFile{}) // var yyz4536 DownwardAPIVolumeFile
				yyc4536 = true
			}
			yyh4536.ElemContainerState(yyj4536)
			if yyj4536 < len(yyv4536) {
				if r.TryDecodeAsNil() {
					yyv4536[yyj4536] = DownwardAPIVolumeFile{}
				} else {
					yyv4539 := &yyv4536[yyj4536]
					yyv4539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4536 < len(yyv4536) {
			yyv4536 = yyv4536[:yyj4536]
			yyc4536 = true
		} else if yyj4536 == 0 && yyv4536 == nil {
			yyv4536 = []DownwardAPIVolumeFile{}
			yyc4536 = true
		}
	}
	yyh4536.End()
	if yyc4536 {
		*v = yyv4536
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4540 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4541 := &yyv4540
		yy4541.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4542 := *v
	yyh4542, yyl4542 := z.DecSliceHelperStart()
	var yyc4542 bool
	if yyl4542 == 0 {
		if yyv4542 == nil {
			yyv4542 = []HTTPHeader{}
			yyc4542 = true
		} else if len(yyv4542) != 0 {
			yyv4542 = yyv4542[:0]
			yyc4542 = true
		}
	} else if yyl4542 > 0 {
		var yyrr4542, yyrl4542 int
		var yyrt4542 bool
		if yyl4542 > cap(yyv4542) {

			yyrg4542 := len(yyv4542) > 0
			yyv24542 := yyv4542
			yyrl4542, yyrt4542 = z.DecInferLen(yyl4542, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4542 {
				if yyrl4542 <= cap(yyv4542) {
					yyv4542 = yyv4542[:yyrl4542]
				} else {
					yyv4542 = make([]HTTPHeader, yyrl4542)
				}
			} else {
				yyv4542 = make([]HTTPHeader, yyrl4542)
			}
			yyc4542 = true
			yyrr4542 = len(yyv4542)
			if yyrg4542 {
				copy(yyv4542, yyv24542)
			}
		} else if yyl4542 != len(yyv4542) {
			yyv4542 = yyv4542[:yyl4542]
			yyc4542 = true
		}
		yyj4542 := 0
		for ; yyj4542 < yyrr4542; yyj4542++ {
			yyh4542.ElemContainerState(yyj4542)
			if r.TryDecodeAsNil() {
				yyv4542[yyj4542] = HTTPHeader{}
			} else {
				yyv4543 := &yyv4542[yyj4542]
				yyv4543.CodecDecodeSelf(d)
			}

		}
		if yyrt4542 {
			for ; yyj4542 < yyl4542; yyj4542++ {
				yyv4542 = append(yyv4542, HTTPHeader{})
				yyh4542.ElemContainerState(yyj4542)
				if r.TryDecodeAsNil() {
					yyv4542[yyj4542] = HTTPHeader{}
				} else {
					yyv4544 := &yyv4542[yyj4542]
					yyv4544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4542 := 0
		for ; !r.CheckBreak(); yyj4542++ {

			if yyj4542 >= len(yyv4542) {
				yyv4542 = append(yyv4542, HTTPHeader{}) // var yyz4542 HTTPHeader
				yyc4542 = true
			}
			yyh4542.ElemContainerState(yyj4542)
			if yyj4542 < len(yyv4542) {
				if r.TryDecodeAsNil() {
					yyv4542[yyj4542] = HTTPHeader{}
				} else {
					yyv4545 := &yyv4542[yyj4542]
					yyv4545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4542 < len(yyv4542) {
			yyv4542 = yyv4542[:yyj4542]
			yyc4542 = true
		} else if yyj4542 == 0 && yyv4542 == nil {
			yyv4542 = []HTTPHeader{}
			yyc4542 = true
		}
	}
	yyh4542.End()
	if yyc4542 {
		*v = yyv4542
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4546 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4546.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4547 := *v
	yyh4547, yyl4547 := z.DecSliceHelperStart()
	var yyc4547 bool
	if yyl4547 == 0 {
		if yyv4547 == nil {
			yyv4547 = []Capability{}
			yyc4547 = true
		} else if len(yyv4547) != 0 {
			yyv4547 = yyv4547[:0]
			yyc4547 = true
		}
	} else if yyl4547 > 0 {
		var yyrr4547, yyrl4547 int
		var yyrt4547 bool
		if yyl4547 > cap(yyv4547) {

			yyrl4547, yyrt4547 = z.DecInferLen(yyl4547, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4547 {
				if yyrl4547 <= cap(yyv4547) {
					yyv4547 = yyv4547[:yyrl4547]
				} else {
					yyv4547 = make([]Capability, yyrl4547)
				}
			} else {
				yyv4547 = make([]Capability, yyrl4547)
			}
			yyc4547 = true
			yyrr4547 = len(yyv4547)
		} else if yyl4547 != len(yyv4547) {
			yyv4547 = yyv4547[:yyl4547]
			yyc4547 = true
		}
		yyj4547 := 0
		for ; yyj4547 < yyrr4547; yyj4547++ {
			yyh4547.ElemContainerState(yyj4547)
			if r.TryDecodeAsNil() {
				yyv4547[yyj4547] = ""
			} else {
				yyv4547[yyj4547] = Capability(r.DecodeString())
			}

		}
		if yyrt4547 {
			for ; yyj4547 < yyl4547; yyj4547++ {
				yyv4547 = append(yyv4547, "")
				yyh4547.ElemContainerState(yyj4547)
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = ""
				} else {
					yyv4547[yyj4547] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4547 := 0
		for ; !r.CheckBreak(); yyj4547++ {

			if yyj4547 >= len(yyv4547) {
				yyv4547 = append(yyv4547, "") // var yyz4547 Capability
				yyc4547 = true
			}
			yyh4547.ElemContainerState(yyj4547)
			if yyj4547 < len(yyv4547) {
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = ""
				} else {
					yyv4547[yyj4547] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4547 < len(yyv4547) {
			yyv4547 = yyv4547[:yyj4547]
			yyc4547 = true
		} else if yyj4547 == 0 && yyv4547 == nil {
			yyv4547 = []Capability{}
			yyc4547 = true
		}
	}
	yyh4547.End()
	if yyc4547 {
		*v = yyv4547
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4551 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4552 := &yyv4551
		yy4552.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4553 := *v
	yyh4553, yyl4553 := z.DecSliceHelperStart()
	var yyc4553 bool
	if yyl4553 == 0 {
		if yyv4553 == nil {
			yyv4553 = []ContainerPort{}
			yyc4553 = true
		} else if len(yyv4553) != 0 {
			yyv4553 = yyv4553[:0]
			yyc4553 = true
		}
	} else if yyl4553 > 0 {
		var yyrr4553, yyrl4553 int
		var yyrt4553 bool
		if yyl4553 > cap(yyv4553) {

			yyrg4553 := len(yyv4553) > 0
			yyv24553 := yyv4553
			yyrl4553, yyrt4553 = z.DecInferLen(yyl4553, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4553 {
				if yyrl4553 <= cap(yyv4553) {
					yyv4553 = yyv4553[:yyrl4553]
				} else {
					yyv4553 = make([]ContainerPort, yyrl4553)
				}
			} else {
				yyv4553 = make([]ContainerPort, yyrl4553)
			}
			yyc4553 = true
			yyrr4553 = len(yyv4553)
			if yyrg4553 {
				copy(yyv4553, yyv24553)
			}
		} else if yyl4553 != len(yyv4553) {
			yyv4553 = yyv4553[:yyl4553]
			yyc4553 = true
		}
		yyj4553 := 0
		for ; yyj4553 < yyrr4553; yyj4553++ {
			yyh4553.ElemContainerState(yyj4553)
			if r.TryDecodeAsNil() {
				yyv4553[yyj4553] = ContainerPort{}
			} else {
				yyv4554 := &yyv4553[yyj4553]
				yyv4554.CodecDecodeSelf(d)
			}

		}
		if yyrt4553 {
			for ; yyj4553 < yyl4553; yyj4553++ {
				yyv4553 = append(yyv4553, ContainerPort{})
				yyh4553.ElemContainerState(yyj4553)
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = ContainerPort{}
				} else {
					yyv4555 := &yyv4553[yyj4553]
					yyv4555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4553 := 0
		for ; !r.CheckBreak(); yyj4553++ {

			if yyj4553 >= len(yyv4553) {
				yyv4553 = append(yyv4553, ContainerPort{}) // var yyz4553 ContainerPort
				yyc4553 = true
			}
			yyh4553.ElemContainerState(yyj4553)
			if yyj4553 < len(yyv4553) {
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = ContainerPort{}
				} else {
					yyv4556 := &yyv4553[yyj4553]
					yyv4556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4553 < len(yyv4553) {
			yyv4553 = yyv4553[:yyj4553]
			yyc4553 = true
		} else if yyj4553 == 0 && yyv4553 == nil {
			yyv4553 = []ContainerPort{}
			yyc4553 = true
		}
	}
	yyh4553.End()
	if yyc4553 {
		*v = yyv4553
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4557 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4558 := &yyv4557
		yy4558.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4559 := *v
	yyh4559, yyl4559 := z.DecSliceHelperStart()
	var yyc4559 bool
	if yyl4559 == 0 {
		if yyv4559 == nil {
			yyv4559 = []EnvVar{}
			yyc4559 = true
		} else if len(yyv4559) != 0 {
			yyv4559 = yyv4559[:0]
			yyc4559 = true
		}
	} else if yyl4559 > 0 {
		var yyrr4559, yyrl4559 int
		var yyrt4559 bool
		if yyl4559 > cap(yyv4559) {

			yyrg4559 := len(yyv4559) > 0
			yyv24559 := yyv4559
			yyrl4559, yyrt4559 = z.DecInferLen(yyl4559, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4559 {
				if yyrl4559 <= cap(yyv4559) {
					yyv4559 = yyv4559[:yyrl4559]
				} else {
					yyv4559 = make([]EnvVar, yyrl4559)
				}
			} else {
				yyv4559 = make([]EnvVar, yyrl4559)
			}
			yyc4559 = true
			yyrr4559 = len(yyv4559)
			if yyrg4559 {
				copy(yyv4559, yyv24559)
			}
		} else if yyl4559 != len(yyv4559) {
			yyv4559 = yyv4559[:yyl4559]
			yyc4559 = true
		}
		yyj4559 := 0
		for ; yyj4559 < yyrr4559; yyj4559++ {
			yyh4559.ElemContainerState(yyj4559)
			if r.TryDecodeAsNil() {
				yyv4559[yyj4559] = EnvVar{}
			} else {
				yyv4560 := &yyv4559[yyj4559]
				yyv4560.CodecDecodeSelf(d)
			}

		}
		if yyrt4559 {
			for ; yyj4559 < yyl4559; yyj4559++ {
				yyv4559 = append(yyv4559, EnvVar{})
				yyh4559.ElemContainerState(yyj4559)
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = EnvVar{}
				} else {
					yyv4561 := &yyv4559[yyj4559]
					yyv4561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4559 := 0
		for ; !r.CheckBreak(); yyj4559++ {

			if yyj4559 >= len(yyv4559) {
				yyv4559 = append(yyv4559, EnvVar{}) // var yyz4559 EnvVar
				yyc4559 = true
			}
			yyh4559.ElemContainerState(yyj4559)
			if yyj4559 < len(yyv4559) {
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = EnvVar{}
				} else {
					yyv4562 := &yyv4559[yyj4559]
					yyv4562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4559 < len(yyv4559) {
			yyv4559 = yyv4559[:yyj4559]
			yyc4559 = true
		} else if yyj4559 == 0 && yyv4559 == nil {
			yyv4559 = []EnvVar{}
			yyc4559 = true
		}
	}
	yyh4559.End()
	if yyc4559 {
		*v = yyv4559
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4563 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4564 := &yyv4563
		yy4564.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4565 := *v
	yyh4565, yyl4565 := z.DecSliceHelperStart()
	var yyc4565 bool
	if yyl4565 == 0 {
		if yyv4565 == nil {
			yyv4565 = []VolumeMount{}
			yyc4565 = true
		} else if len(yyv4565) != 0 {
			yyv4565 = yyv4565[:0]
			yyc4565 = true
		}
	} else if yyl4565 > 0 {
		var yyrr4565, yyrl4565 int
		var yyrt4565 bool
		if yyl4565 > cap(yyv4565) {

			yyrg4565 := len(yyv4565) > 0
			yyv24565 := yyv4565
			yyrl4565, yyrt4565 = z.DecInferLen(yyl4565, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4565 {
				if yyrl4565 <= cap(yyv4565) {
					yyv4565 = yyv4565[:yyrl4565]
				} else {
					yyv4565 = make([]VolumeMount, yyrl4565)
				}
			} else {
				yyv4565 = make([]VolumeMount, yyrl4565)
			}
			yyc4565 = true
			yyrr4565 = len(yyv4565)
			if yyrg4565 {
				copy(yyv4565, yyv24565)
			}
		} else if yyl4565 != len(yyv4565) {
			yyv4565 = yyv4565[:yyl4565]
			yyc4565 = true
		}
		yyj4565 := 0
		for ; yyj4565 < yyrr4565; yyj4565++ {
			yyh4565.ElemContainerState(yyj4565)
			if r.TryDecodeAsNil() {
				yyv4565[yyj4565] = VolumeMount{}
			} else {
				yyv4566 := &yyv4565[yyj4565]
				yyv4566.CodecDecodeSelf(d)
			}

		}
		if yyrt4565 {
			for ; yyj4565 < yyl4565; yyj4565++ {
				yyv4565 = append(yyv4565, VolumeMount{})
				yyh4565.ElemContainerState(yyj4565)
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = VolumeMount{}
				} else {
					yyv4567 := &yyv4565[yyj4565]
					yyv4567.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4565 := 0
		for ; !r.CheckBreak(); yyj4565++ {

			if yyj4565 >= len(yyv4565) {
				yyv4565 = append(yyv4565, VolumeMount{}) // var yyz4565 VolumeMount
				yyc4565 = true
			}
			yyh4565.ElemContainerState(yyj4565)
			if yyj4565 < len(yyv4565) {
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = VolumeMount{}
				} else {
					yyv4568 := &yyv4565[yyj4565]
					yyv4568.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4565 < len(yyv4565) {
			yyv4565 = yyv4565[:yyj4565]
			yyc4565 = true
		} else if yyj4565 == 0 && yyv4565 == nil {
			yyv4565 = []VolumeMount{}
			yyc4565 = true
		}
	}
	yyh4565.End()
	if yyc4565 {
		*v = yyv4565
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4569 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4570 := &yyv4569
		yy4570.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4571 := *v
	yyh4571, yyl4571 := z.DecSliceHelperStart()
	var yyc4571 bool
	if yyl4571 == 0 {
		if yyv4571 == nil {
			yyv4571 = []Pod{}
			yyc4571 = true
		} else if len(yyv4571) != 0 {
			yyv4571 = yyv4571[:0]
			yyc4571 = true
		}
	} else if yyl4571 > 0 {
		var yyrr4571, yyrl4571 int
		var yyrt4571 bool
		if yyl4571 > cap(yyv4571) {

			yyrg4571 := len(yyv4571) > 0
			yyv24571 := yyv4571
			yyrl4571, yyrt4571 = z.DecInferLen(yyl4571, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4571 {
				if yyrl4571 <= cap(yyv4571) {
					yyv4571 = yyv4571[:yyrl4571]
				} else {
					yyv4571 = make([]Pod, yyrl4571)
				}
			} else {
				yyv4571 = make([]Pod, yyrl4571)
			}
			yyc4571 = true
			yyrr4571 = len(yyv4571)
			if yyrg4571 {
				copy(yyv4571, yyv24571)
			}
		} else if yyl4571 != len(yyv4571) {
			yyv4571 = yyv4571[:yyl4571]
			yyc4571 = true
		}
		yyj4571 := 0
		for ; yyj4571 < yyrr4571; yyj4571++ {
			yyh4571.ElemContainerState(yyj4571)
			if r.TryDecodeAsNil() {
				yyv4571[yyj4571] = Pod{}
			} else {
				yyv4572 := &yyv4571[yyj4571]
				yyv4572.CodecDecodeSelf(d)
			}

		}
		if yyrt4571 {
			for ; yyj4571 < yyl4571; yyj4571++ {
				yyv4571 = append(yyv4571, Pod{})
				yyh4571.ElemContainerState(yyj4571)
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = Pod{}
				} else {
					yyv4573 := &yyv4571[yyj4571]
					yyv4573.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4571 := 0
		for ; !r.CheckBreak(); yyj4571++ {

			if yyj4571 >= len(yyv4571) {
				yyv4571 = append(yyv4571, Pod{}) // var yyz4571 Pod
				yyc4571 = true
			}
			yyh4571.ElemContainerState(yyj4571)
			if yyj4571 < len(yyv4571) {
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = Pod{}
				} else {
					yyv4574 := &yyv4571[yyj4571]
					yyv4574.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4571 < len(yyv4571) {
			yyv4571 = yyv4571[:yyj4571]
			yyc4571 = true
		} else if yyj4571 == 0 && yyv4571 == nil {
			yyv4571 = []Pod{}
			yyc4571 = true
		}
	}
	yyh4571.End()
	if yyc4571 {
		*v = yyv4571
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4575 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4576 := &yyv4575
		yy4576.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4577 := *v
	yyh4577, yyl4577 := z.DecSliceHelperStart()
	var yyc4577 bool
	if yyl4577 == 0 {
		if yyv4577 == nil {
			yyv4577 = []NodeSelectorTerm{}
			yyc4577 = true
		} else if len(yyv4577) != 0 {
			yyv4577 = yyv4577[:0]
			yyc4577 = true
		}
	} else if yyl4577 > 0 {
		var yyrr4577, yyrl4577 int
		var yyrt4577 bool
		if yyl4577 > cap(yyv4577) {

			yyrg4577 := len(yyv4577) > 0
			yyv24577 := yyv4577
			yyrl4577, yyrt4577 = z.DecInferLen(yyl4577, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4577 {
				if yyrl4577 <= cap(yyv4577) {
					yyv4577 = yyv4577[:yyrl4577]
				} else {
					yyv4577 = make([]NodeSelectorTerm, yyrl4577)
				}
			} else {
				yyv4577 = make([]NodeSelectorTerm, yyrl4577)
			}
			yyc4577 = true
			yyrr4577 = len(yyv4577)
			if yyrg4577 {
				copy(yyv4577, yyv24577)
			}
		} else if yyl4577 != len(yyv4577) {
			yyv4577 = yyv4577[:yyl4577]
			yyc4577 = true
		}
		yyj4577 := 0
		for ; yyj4577 < yyrr4577; yyj4577++ {
			yyh4577.ElemContainerState(yyj4577)
			if r.TryDecodeAsNil() {
				yyv4577[yyj4577] = NodeSelectorTerm{}
			} else {
				yyv4578 := &yyv4577[yyj4577]
				yyv4578.CodecDecodeSelf(d)
			}

		}
		if yyrt4577 {
			for ; yyj4577 < yyl4577; yyj4577++ {
				yyv4577 = append(yyv4577, NodeSelectorTerm{})
				yyh4577.ElemContainerState(yyj4577)
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = NodeSelectorTerm{}
				} else {
					yyv4579 := &yyv4577[yyj4577]
					yyv4579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4577 := 0
		for ; !r.CheckBreak(); yyj4577++ {

			if yyj4577 >= len(yyv4577) {
				yyv4577 = append(yyv4577, NodeSelectorTerm{}) // var yyz4577 NodeSelectorTerm
				yyc4577 = true
			}
			yyh4577.ElemContainerState(yyj4577)
			if yyj4577 < len(yyv4577) {
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = NodeSelectorTerm{}
				} else {
					yyv4580 := &yyv4577[yyj4577]
					yyv4580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4577 < len(yyv4577) {
			yyv4577 = yyv4577[:yyj4577]
			yyc4577 = true
		} else if yyj4577 == 0 && yyv4577 == nil {
			yyv4577 = []NodeSelectorTerm{}
			yyc4577 = true
		}
	}
	yyh4577.End()
	if yyc4577 {
		*v = yyv4577
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4581 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4582 := &yyv4581
		yy4582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4583 := *v
	yyh4583, yyl4583 := z.DecSliceHelperStart()
	var yyc4583 bool
	if yyl4583 == 0 {
		if yyv4583 == nil {
			yyv4583 = []NodeSelectorRequirement{}
			yyc4583 = true
		} else if len(yyv4583) != 0 {
			yyv4583 = yyv4583[:0]
			yyc4583 = true
		}
	} else if yyl4583 > 0 {
		var yyrr4583, yyrl4583 int
		var yyrt4583 bool
		if yyl4583 > cap(yyv4583) {

			yyrg4583 := len(yyv4583) > 0
			yyv24583 := yyv4583
			yyrl4583, yyrt4583 = z.DecInferLen(yyl4583, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4583 {
				if yyrl4583 <= cap(yyv4583) {
					yyv4583 = yyv4583[:yyrl4583]
				} else {
					yyv4583 = make([]NodeSelectorRequirement, yyrl4583)
				}
			} else {
				yyv4583 = make([]NodeSelectorRequirement, yyrl4583)
			}
			yyc4583 = true
			yyrr4583 = len(yyv4583)
			if yyrg4583 {
				copy(yyv4583, yyv24583)
			}
		} else if yyl4583 != len(yyv4583) {
			yyv4583 = yyv4583[:yyl4583]
			yyc4583 = true
		}
		yyj4583 := 0
		for ; yyj4583 < yyrr4583; yyj4583++ {
			yyh4583.ElemContainerState(yyj4583)
			if r.TryDecodeAsNil() {
				yyv4583[yyj4583] = NodeSelectorRequirement{}
			} else {
				yyv4584 := &yyv4583[yyj4583]
				yyv4584.CodecDecodeSelf(d)
			}

		}
		if yyrt4583 {
			for ; yyj4583 < yyl4583; yyj4583++ {
				yyv4583 = append(yyv4583, NodeSelectorRequirement{})
				yyh4583.ElemContainerState(yyj4583)
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = NodeSelectorRequirement{}
				} else {
					yyv4585 := &yyv4583[yyj4583]
					yyv4585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4583 := 0
		for ; !r.CheckBreak(); yyj4583++ {

			if yyj4583 >= len(yyv4583) {
				yyv4583 = append(yyv4583, NodeSelectorRequirement{}) // var yyz4583 NodeSelectorRequirement
				yyc4583 = true
			}
			yyh4583.ElemContainerState(yyj4583)
			if yyj4583 < len(yyv4583) {
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = NodeSelectorRequirement{}
				} else {
					yyv4586 := &yyv4583[yyj4583]
					yyv4586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4583 < len(yyv4583) {
			yyv4583 = yyv4583[:yyj4583]
			yyc4583 = true
		} else if yyj4583 == 0 && yyv4583 == nil {
			yyv4583 = []NodeSelectorRequirement{}
			yyc4583 = true
		}
	}
	yyh4583.End()
	if yyc4583 {
		*v = yyv4583
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4587 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4588 := &yyv4587
		yy4588.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4589 := *v
	yyh4589, yyl4589 := z.DecSliceHelperStart()
	var yyc4589 bool
	if yyl4589 == 0 {
		if yyv4589 == nil {
			yyv4589 = []PodAffinityTerm{}
			yyc4589 = true
		} else if len(yyv4589) != 0 {
			yyv4589 = yyv4589[:0]
			yyc4589 = true
		}
	} else if yyl4589 > 0 {
		var yyrr4589, yyrl4589 int
		var yyrt4589 bool
		if yyl4589 > cap(yyv4589) {

			yyrg4589 := len(yyv4589) > 0
			yyv24589 := yyv4589
			yyrl4589, yyrt4589 = z.DecInferLen(yyl4589, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4589 {
				if yyrl4589 <= cap(yyv4589) {
					yyv4589 = yyv4589[:yyrl4589]
				} else {
					yyv4589 = make([]PodAffinityTerm, yyrl4589)
				}
			} else {
				yyv4589 = make([]PodAffinityTerm, yyrl4589)
			}
			yyc4589 = true
			yyrr4589 = len(yyv4589)
			if yyrg4589 {
				copy(yyv4589, yyv24589)
			}
		} else if yyl4589 != len(yyv4589) {
			yyv4589 = yyv4589[:yyl4589]
			yyc4589 = true
		}
		yyj4589 := 0
		for ; yyj4589 < yyrr4589; yyj4589++ {
			yyh4589.ElemContainerState(yyj4589)
			if r.TryDecodeAsNil() {
				yyv4589[yyj4589] = PodAffinityTerm{}
			} else {
				yyv4590 := &yyv4589[yyj4589]
				yyv4590.CodecDecodeSelf(d)
			}

		}
		if yyrt4589 {
			for ; yyj4589 < yyl4589; yyj4589++ {
				yyv4589 = append(yyv4589, PodAffinityTerm{})
				yyh4589.ElemContainerState(yyj4589)
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = PodAffinityTerm{}
				} else {
					yyv4591 := &yyv4589[yyj4589]
					yyv4591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4589 := 0
		for ; !r.CheckBreak(); yyj4589++ {

			if yyj4589 >= len(yyv4589) {
				yyv4589 = append(yyv4589, PodAffinityTerm{}) // var yyz4589 PodAffinityTerm
				yyc4589 = true
			}
			yyh4589.ElemContainerState(yyj4589)
			if yyj4589 < len(yyv4589) {
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = PodAffinityTerm{}
				} else {
					yyv4592 := &yyv4589[yyj4589]
					yyv4592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4589 < len(yyv4589) {
			yyv4589 = yyv4589[:yyj4589]
			yyc4589 = true
		} else if yyj4589 == 0 && yyv4589 == nil {
			yyv4589 = []PodAffinityTerm{}
			yyc4589 = true
		}
	}
	yyh4589.End()
	if yyc4589 {
		*v = yyv4589
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4593 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4594 := &yyv4593
		yy4594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4595 := *v
	yyh4595, yyl4595 := z.DecSliceHelperStart()
	var yyc4595 bool
	if yyl4595 == 0 {
		if yyv4595 == nil {
			yyv4595 = []WeightedPodAffinityTerm{}
			yyc4595 = true
		} else if len(yyv4595) != 0 {
			yyv4595 = yyv4595[:0]
			yyc4595 = true
		}
	} else if yyl4595 > 0 {
		var yyrr4595, yyrl4595 int
		var yyrt4595 bool
		if yyl4595 > cap(yyv4595) {

			yyrg4595 := len(yyv4595) > 0
			yyv24595 := yyv4595
			yyrl4595, yyrt4595 = z.DecInferLen(yyl4595, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4595 {
				if yyrl4595 <= cap(yyv4595) {
					yyv4595 = yyv4595[:yyrl4595]
				} else {
					yyv4595 = make([]WeightedPodAffinityTerm, yyrl4595)
				}
			} else {
				yyv4595 = make([]WeightedPodAffinityTerm, yyrl4595)
			}
			yyc4595 = true
			yyrr4595 = len(yyv4595)
			if yyrg4595 {
				copy(yyv4595, yyv24595)
			}
		} else if yyl4595 != len(yyv4595) {
			yyv4595 = yyv4595[:yyl4595]
			yyc4595 = true
		}
		yyj4595 := 0
		for ; yyj4595 < yyrr4595; yyj4595++ {
			yyh4595.ElemContainerState(yyj4595)
			if r.TryDecodeAsNil() {
				yyv4595[yyj4595] = WeightedPodAffinityTerm{}
			} else {
				yyv4596 := &yyv4595[yyj4595]
				yyv4596.CodecDecodeSelf(d)
			}

		}
		if yyrt4595 {
			for ; yyj4595 < yyl4595; yyj4595++ {
				yyv4595 = append(yyv4595, WeightedPodAffinityTerm{})
				yyh4595.ElemContainerState(yyj4595)
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = WeightedPodAffinityTerm{}
				} else {
					yyv4597 := &yyv4595[yyj4595]
					yyv4597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4595 := 0
		for ; !r.CheckBreak(); yyj4595++ {

			if yyj4595 >= len(yyv4595) {
				yyv4595 = append(yyv4595, WeightedPodAffinityTerm{}) // var yyz4595 WeightedPodAffinityTerm
				yyc4595 = true
			}
			yyh4595.ElemContainerState(yyj4595)
			if yyj4595 < len(yyv4595) {
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = WeightedPodAffinityTerm{}
				} else {
					yyv4598 := &yyv4595[yyj4595]
					yyv4598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4595 < len(yyv4595) {
			yyv4595 = yyv4595[:yyj4595]
			yyc4595 = true
		} else if yyj4595 == 0 && yyv4595 == nil {
			yyv4595 = []WeightedPodAffinityTerm{}
			yyc4595 = true
		}
	}
	yyh4595.End()
	if yyc4595 {
		*v = yyv4595
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4600 := &yyv4599
		yy4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []PreferredSchedulingTerm{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrg4601 := len(yyv4601) > 0
			yyv24601 := yyv4601
			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]PreferredSchedulingTerm, yyrl4601)
				}
			} else {
				yyv4601 = make([]PreferredSchedulingTerm, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
			if yyrg4601 {
				copy(yyv4601, yyv24601)
			}
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = PreferredSchedulingTerm{}
			} else {
				yyv4602 := &yyv4601[yyj4601]
				yyv4602.CodecDecodeSelf(d)
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, PreferredSchedulingTerm{})
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = PreferredSchedulingTerm{}
				} else {
					yyv4603 := &yyv4601[yyj4601]
					yyv4603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, PreferredSchedulingTerm{}) // var yyz4601 PreferredSchedulingTerm
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = PreferredSchedulingTerm{}
				} else {
					yyv4604 := &yyv4601[yyj4601]
					yyv4604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []PreferredSchedulingTerm{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4606 := &yyv4605
		yy4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []Volume{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrg4607 := len(yyv4607) > 0
			yyv24607 := yyv4607
			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 192)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]Volume, yyrl4607)
				}
			} else {
				yyv4607 = make([]Volume, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
			if yyrg4607 {
				copy(yyv4607, yyv24607)
			}
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = Volume{}
			} else {
				yyv4608 := &yyv4607[yyj4607]
				yyv4608.CodecDecodeSelf(d)
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, Volume{})
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = Volume{}
				} else {
					yyv4609 := &yyv4607[yyj4607]
					yyv4609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, Volume{}) // var yyz4607 Volume
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = Volume{}
				} else {
					yyv4610 := &yyv4607[yyj4607]
					yyv4610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []Volume{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []Container{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]Container, yyrl4613)
				}
			} else {
				yyv4613 = make([]Container, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = Container{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, Container{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = Container{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, Container{}) // var yyz4613 Container
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = Container{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []Container{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4618 := &yyv4617
		yy4618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4619 := *v
	yyh4619, yyl4619 := z.DecSliceHelperStart()
	var yyc4619 bool
	if yyl4619 == 0 {
		if yyv4619 == nil {
			yyv4619 = []LocalObjectReference{}
			yyc4619 = true
		} else if len(yyv4619) != 0 {
			yyv4619 = yyv4619[:0]
			yyc4619 = true
		}
	} else if yyl4619 > 0 {
		var yyrr4619, yyrl4619 int
		var yyrt4619 bool
		if yyl4619 > cap(yyv4619) {

			yyrg4619 := len(yyv4619) > 0
			yyv24619 := yyv4619
			yyrl4619, yyrt4619 = z.DecInferLen(yyl4619, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4619 {
				if yyrl4619 <= cap(yyv4619) {
					yyv4619 = yyv4619[:yyrl4619]
				} else {
					yyv4619 = make([]LocalObjectReference, yyrl4619)
				}
			} else {
				yyv4619 = make([]LocalObjectReference, yyrl4619)
			}
			yyc4619 = true
			yyrr4619 = len(yyv4619)
			if yyrg4619 {
				copy(yyv4619, yyv24619)
			}
		} else if yyl4619 != len(yyv4619) {
			yyv4619 = yyv4619[:yyl4619]
			yyc4619 = true
		}
		yyj4619 := 0
		for ; yyj4619 < yyrr4619; yyj4619++ {
			yyh4619.ElemContainerState(yyj4619)
			if r.TryDecodeAsNil() {
				yyv4619[yyj4619] = LocalObjectReference{}
			} else {
				yyv4620 := &yyv4619[yyj4619]
				yyv4620.CodecDecodeSelf(d)
			}

		}
		if yyrt4619 {
			for ; yyj4619 < yyl4619; yyj4619++ {
				yyv4619 = append(yyv4619, LocalObjectReference{})
				yyh4619.ElemContainerState(yyj4619)
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = LocalObjectReference{}
				} else {
					yyv4621 := &yyv4619[yyj4619]
					yyv4621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4619 := 0
		for ; !r.CheckBreak(); yyj4619++ {

			if yyj4619 >= len(yyv4619) {
				yyv4619 = append(yyv4619, LocalObjectReference{}) // var yyz4619 LocalObjectReference
				yyc4619 = true
			}
			yyh4619.ElemContainerState(yyj4619)
			if yyj4619 < len(yyv4619) {
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = LocalObjectReference{}
				} else {
					yyv4622 := &yyv4619[yyj4619]
					yyv4622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4619 < len(yyv4619) {
			yyv4619 = yyv4619[:yyj4619]
			yyc4619 = true
		} else if yyj4619 == 0 && yyv4619 == nil {
			yyv4619 = []LocalObjectReference{}
			yyc4619 = true
		}
	}
	yyh4619.End()
	if yyc4619 {
		*v = yyv4619
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4624 := &yyv4623
		yy4624.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4625 := *v
	yyh4625, yyl4625 := z.DecSliceHelperStart()
	var yyc4625 bool
	if yyl4625 == 0 {
		if yyv4625 == nil {
			yyv4625 = []PodCondition{}
			yyc4625 = true
		} else if len(yyv4625) != 0 {
			yyv4625 = yyv4625[:0]
			yyc4625 = true
		}
	} else if yyl4625 > 0 {
		var yyrr4625, yyrl4625 int
		var yyrt4625 bool
		if yyl4625 > cap(yyv4625) {

			yyrg4625 := len(yyv4625) > 0
			yyv24625 := yyv4625
			yyrl4625, yyrt4625 = z.DecInferLen(yyl4625, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4625 {
				if yyrl4625 <= cap(yyv4625) {
					yyv4625 = yyv4625[:yyrl4625]
				} else {
					yyv4625 = make([]PodCondition, yyrl4625)
				}
			} else {
				yyv4625 = make([]PodCondition, yyrl4625)
			}
			yyc4625 = true
			yyrr4625 = len(yyv4625)
			if yyrg4625 {
				copy(yyv4625, yyv24625)
			}
		} else if yyl4625 != len(yyv4625) {
			yyv4625 = yyv4625[:yyl4625]
			yyc4625 = true
		}
		yyj4625 := 0
		for ; yyj4625 < yyrr4625; yyj4625++ {
			yyh4625.ElemContainerState(yyj4625)
			if r.TryDecodeAsNil() {
				yyv4625[yyj4625] = PodCondition{}
			} else {
				yyv4626 := &yyv4625[yyj4625]
				yyv4626.CodecDecodeSelf(d)
			}

		}
		if yyrt4625 {
			for ; yyj4625 < yyl4625; yyj4625++ {
				yyv4625 = append(yyv4625, PodCondition{})
				yyh4625.ElemContainerState(yyj4625)
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = PodCondition{}
				} else {
					yyv4627 := &yyv4625[yyj4625]
					yyv4627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4625 := 0
		for ; !r.CheckBreak(); yyj4625++ {

			if yyj4625 >= len(yyv4625) {
				yyv4625 = append(yyv4625, PodCondition{}) // var yyz4625 PodCondition
				yyc4625 = true
			}
			yyh4625.ElemContainerState(yyj4625)
			if yyj4625 < len(yyv4625) {
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = PodCondition{}
				} else {
					yyv4628 := &yyv4625[yyj4625]
					yyv4628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4625 < len(yyv4625) {
			yyv4625 = yyv4625[:yyj4625]
			yyc4625 = true
		} else if yyj4625 == 0 && yyv4625 == nil {
			yyv4625 = []PodCondition{}
			yyc4625 = true
		}
	}
	yyh4625.End()
	if yyc4625 {
		*v = yyv4625
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4629 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4630 := &yyv4629
		yy4630.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4631 := *v
	yyh4631, yyl4631 := z.DecSliceHelperStart()
	var yyc4631 bool
	if yyl4631 == 0 {
		if yyv4631 == nil {
			yyv4631 = []ContainerStatus{}
			yyc4631 = true
		} else if len(yyv4631) != 0 {
			yyv4631 = yyv4631[:0]
			yyc4631 = true
		}
	} else if yyl4631 > 0 {
		var yyrr4631, yyrl4631 int
		var yyrt4631 bool
		if yyl4631 > cap(yyv4631) {

			yyrg4631 := len(yyv4631) > 0
			yyv24631 := yyv4631
			yyrl4631, yyrt4631 = z.DecInferLen(yyl4631, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4631 {
				if yyrl4631 <= cap(yyv4631) {
					yyv4631 = yyv4631[:yyrl4631]
				} else {
					yyv4631 = make([]ContainerStatus, yyrl4631)
				}
			} else {
				yyv4631 = make([]ContainerStatus, yyrl4631)
			}
			yyc4631 = true
			yyrr4631 = len(yyv4631)
			if yyrg4631 {
				copy(yyv4631, yyv24631)
			}
		} else if yyl4631 != len(yyv4631) {
			yyv4631 = yyv4631[:yyl4631]
			yyc4631 = true
		}
		yyj4631 := 0
		for ; yyj4631 < yyrr4631; yyj4631++ {
			yyh4631.ElemContainerState(yyj4631)
			if r.TryDecodeAsNil() {
				yyv4631[yyj4631] = ContainerStatus{}
			} else {
				yyv4632 := &yyv4631[yyj4631]
				yyv4632.CodecDecodeSelf(d)
			}

		}
		if yyrt4631 {
			for ; yyj4631 < yyl4631; yyj4631++ {
				yyv4631 = append(yyv4631, ContainerStatus{})
				yyh4631.ElemContainerState(yyj4631)
				if r.TryDecodeAsNil() {
					yyv4631[yyj4631] = ContainerStatus{}
				} else {
					yyv4633 := &yyv4631[yyj4631]
					yyv4633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4631 := 0
		for ; !r.CheckBreak(); yyj4631++ {

			if yyj4631 >= len(yyv4631) {
				yyv4631 = append(yyv4631, ContainerStatus{}) // var yyz4631 ContainerStatus
				yyc4631 = true
			}
			yyh4631.ElemContainerState(yyj4631)
			if yyj4631 < len(yyv4631) {
				if r.TryDecodeAsNil() {
					yyv4631[yyj4631] = ContainerStatus{}
				} else {
					yyv4634 := &yyv4631[yyj4631]
					yyv4634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4631 < len(yyv4631) {
			yyv4631 = yyv4631[:yyj4631]
			yyc4631 = true
		} else if yyj4631 == 0 && yyv4631 == nil {
			yyv4631 = []ContainerStatus{}
			yyc4631 = true
		}
	}
	yyh4631.End()
	if yyc4631 {
		*v = yyv4631
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4635 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4636 := &yyv4635
		yy4636.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4637 := *v
	yyh4637, yyl4637 := z.DecSliceHelperStart()
	var yyc4637 bool
	if yyl4637 == 0 {
		if yyv4637 == nil {
			yyv4637 = []PodTemplate{}
			yyc4637 = true
		} else if len(yyv4637) != 0 {
			yyv4637 = yyv4637[:0]
			yyc4637 = true
		}
	} else if yyl4637 > 0 {
		var yyrr4637, yyrl4637 int
		var yyrt4637 bool
		if yyl4637 > cap(yyv4637) {

			yyrg4637 := len(yyv4637) > 0
			yyv24637 := yyv4637
			yyrl4637, yyrt4637 = z.DecInferLen(yyl4637, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4637 {
				if yyrl4637 <= cap(yyv4637) {
					yyv4637 = yyv4637[:yyrl4637]
				} else {
					yyv4637 = make([]PodTemplate, yyrl4637)
				}
			} else {
				yyv4637 = make([]PodTemplate, yyrl4637)
			}
			yyc4637 = true
			yyrr4637 = len(yyv4637)
			if yyrg4637 {
				copy(yyv4637, yyv24637)
			}
		} else if yyl4637 != len(yyv4637) {
			yyv4637 = yyv4637[:yyl4637]
			yyc4637 = true
		}
		yyj4637 := 0
		for ; yyj4637 < yyrr4637; yyj4637++ {
			yyh4637.ElemContainerState(yyj4637)
			if r.TryDecodeAsNil() {
				yyv4637[yyj4637] = PodTemplate{}
			} else {
				yyv4638 := &yyv4637[yyj4637]
				yyv4638.CodecDecodeSelf(d)
			}

		}
		if yyrt4637 {
			for ; yyj4637 < yyl4637; yyj4637++ {
				yyv4637 = append(yyv4637, PodTemplate{})
				yyh4637.ElemContainerState(yyj4637)
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = PodTemplate{}
				} else {
					yyv4639 := &yyv4637[yyj4637]
					yyv4639.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4637 := 0
		for ; !r.CheckBreak(); yyj4637++ {

			if yyj4637 >= len(yyv4637) {
				yyv4637 = append(yyv4637, PodTemplate{}) // var yyz4637 PodTemplate
				yyc4637 = true
			}
			yyh4637.ElemContainerState(yyj4637)
			if yyj4637 < len(yyv4637) {
				if r.TryDecodeAsNil() {
					yyv4637[yyj4637] = PodTemplate{}
				} else {
					yyv4640 := &yyv4637[yyj4637]
					yyv4640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4637 < len(yyv4637) {
			yyv4637 = yyv4637[:yyj4637]
			yyc4637 = true
		} else if yyj4637 == 0 && yyv4637 == nil {
			yyv4637 = []PodTemplate{}
			yyc4637 = true
		}
	}
	yyh4637.End()
	if yyc4637 {
		*v = yyv4637
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4641 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4642 := &yyv4641
		yy4642.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4643 := *v
	yyh4643, yyl4643 := z.DecSliceHelperStart()
	var yyc4643 bool
	if yyl4643 == 0 {
		if yyv4643 == nil {
			yyv4643 = []ReplicationController{}
			yyc4643 = true
		} else if len(yyv4643) != 0 {
			yyv4643 = yyv4643[:0]
			yyc4643 = true
		}
	} else if yyl4643 > 0 {
		var yyrr4643, yyrl4643 int
		var yyrt4643 bool
		if yyl4643 > cap(yyv4643) {

			yyrg4643 := len(yyv4643) > 0
			yyv24643 := yyv4643
			yyrl4643, yyrt4643 = z.DecInferLen(yyl4643, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4643 {
				if yyrl4643 <= cap(yyv4643) {
					yyv4643 = yyv4643[:yyrl4643]
				} else {
					yyv4643 = make([]ReplicationController, yyrl4643)
				}
			} else {
				yyv4643 = make([]ReplicationController, yyrl4643)
			}
			yyc4643 = true
			yyrr4643 = len(yyv4643)
			if yyrg4643 {
				copy(yyv4643, yyv24643)
			}
		} else if yyl4643 != len(yyv4643) {
			yyv4643 = yyv4643[:yyl4643]
			yyc4643 = true
		}
		yyj4643 := 0
		for ; yyj4643 < yyrr4643; yyj4643++ {
			yyh4643.ElemContainerState(yyj4643)
			if r.TryDecodeAsNil() {
				yyv4643[yyj4643] = ReplicationController{}
			} else {
				yyv4644 := &yyv4643[yyj4643]
				yyv4644.CodecDecodeSelf(d)
			}

		}
		if yyrt4643 {
			for ; yyj4643 < yyl4643; yyj4643++ {
				yyv4643 = append(yyv4643, ReplicationController{})
				yyh4643.ElemContainerState(yyj4643)
				if r.TryDecodeAsNil() {
					yyv4643[yyj4643] = ReplicationController{}
				} else {
					yyv4645 := &yyv4643[yyj4643]
					yyv4645.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4643 := 0
		for ; !r.CheckBreak(); yyj4643++ {

			if yyj4643 >= len(yyv4643) {
				yyv4643 = append(yyv4643, ReplicationController{}) // var yyz4643 ReplicationController
				yyc4643 = true
			}
			yyh4643.ElemContainerState(yyj4643)
			if yyj4643 < len(yyv4643) {
				if r.TryDecodeAsNil() {
					yyv4643[yyj4643] = ReplicationController{}
				} else {
					yyv4646 := &yyv4643[yyj4643]
					yyv4646.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4643 < len(yyv4643) {
			yyv4643 = yyv4643[:yyj4643]
			yyc4643 = true
		} else if yyj4643 == 0 && yyv4643 == nil {
			yyv4643 = []ReplicationController{}
			yyc4643 = true
		}
	}
	yyh4643.End()
	if yyc4643 {
		*v = yyv4643
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4647 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4648 := &yyv4647
		yy4648.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4649 := *v
	yyh4649, yyl4649 := z.DecSliceHelperStart()
	var yyc4649 bool
	if yyl4649 == 0 {
		if yyv4649 == nil {
			yyv4649 = []Service{}
			yyc4649 = true
		} else if len(yyv4649) != 0 {
			yyv4649 = yyv4649[:0]
			yyc4649 = true
		}
	} else if yyl4649 > 0 {
		var yyrr4649, yyrl4649 int
		var yyrt4649 bool
		if yyl4649 > cap(yyv4649) {

			yyrg4649 := len(yyv4649) > 0
			yyv24649 := yyv4649
			yyrl4649, yyrt4649 = z.DecInferLen(yyl4649, z.DecBasicHandle().MaxInitLen, 424)
			if yyrt4649 {
				if yyrl4649 <= cap(yyv4649) {
					yyv4649 = yyv4649[:yyrl4649]
				} else {
					yyv4649 = make([]Service, yyrl4649)
				}
			} else {
				yyv4649 = make([]Service, yyrl4649)
			}
			yyc4649 = true
			yyrr4649 = len(yyv4649)
			if yyrg4649 {
				copy(yyv4649, yyv24649)
			}
		} else if yyl4649 != len(yyv4649) {
			yyv4649 = yyv4649[:yyl4649]
			yyc4649 = true
		}
		yyj4649 := 0
		for ; yyj4649 < yyrr4649; yyj4649++ {
			yyh4649.ElemContainerState(yyj4649)
			if r.TryDecodeAsNil() {
				yyv4649[yyj4649] = Service{}
			} else {
				yyv4650 := &yyv4649[yyj4649]
				yyv4650.CodecDecodeSelf(d)
			}

		}
		if yyrt4649 {
			for ; yyj4649 < yyl4649; yyj4649++ {
				yyv4649 = append(yyv4649, Service{})
				yyh4649.ElemContainerState(yyj4649)
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = Service{}
				} else {
					yyv4651 := &yyv4649[yyj4649]
					yyv4651.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4649 := 0
		for ; !r.CheckBreak(); yyj4649++ {

			if yyj4649 >= len(yyv4649) {
				yyv4649 = append(yyv4649, Service{}) // var yyz4649 Service
				yyc4649 = true
			}
			yyh4649.ElemContainerState(yyj4649)
			if yyj4649 < len(yyv4649) {
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = Service{}
				} else {
					yyv4652 := &yyv4649[yyj4649]
					yyv4652.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4649 < len(yyv4649) {
			yyv4649 = yyv4649[:yyj4649]
			yyc4649 = true
		} else if yyj4649 == 0 && yyv4649 == nil {
			yyv4649 = []Service{}
			yyc4649 = true
		}
	}
	yyh4649.End()
	if yyc4649 {
		*v = yyv4649
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4653 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4654 := &yyv4653
		yy4654.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4655 := *v
	yyh4655, yyl4655 := z.DecSliceHelperStart()
	var yyc4655 bool
	if yyl4655 == 0 {
		if yyv4655 == nil {
			yyv4655 = []LoadBalancerIngress{}
			yyc4655 = true
		} else if len(yyv4655) != 0 {
			yyv4655 = yyv4655[:0]
			yyc4655 = true
		}
	} else if yyl4655 > 0 {
		var yyrr4655, yyrl4655 int
		var yyrt4655 bool
		if yyl4655 > cap(yyv4655) {

			yyrg4655 := len(yyv4655) > 0
			yyv24655 := yyv4655
			yyrl4655, yyrt4655 = z.DecInferLen(yyl4655, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4655 {
				if yyrl4655 <= cap(yyv4655) {
					yyv4655 = yyv4655[:yyrl4655]
				} else {
					yyv4655 = make([]LoadBalancerIngress, yyrl4655)
				}
			} else {
				yyv4655 = make([]LoadBalancerIngress, yyrl4655)
			}
			yyc4655 = true
			yyrr4655 = len(yyv4655)
			if yyrg4655 {
				copy(yyv4655, yyv24655)
			}
		} else if yyl4655 != len(yyv4655) {
			yyv4655 = yyv4655[:yyl4655]
			yyc4655 = true
		}
		yyj4655 := 0
		for ; yyj4655 < yyrr4655; yyj4655++ {
			yyh4655.ElemContainerState(yyj4655)
			if r.TryDecodeAsNil() {
				yyv4655[yyj4655] = LoadBalancerIngress{}
			} else {
				yyv4656 := &yyv4655[yyj4655]
				yyv4656.CodecDecodeSelf(d)
			}

		}
		if yyrt4655 {
			for ; yyj4655 < yyl4655; yyj4655++ {
				yyv4655 = append(yyv4655, LoadBalancerIngress{})
				yyh4655.ElemContainerState(yyj4655)
				if r.TryDecodeAsNil() {
					yyv4655[yyj4655] = LoadBalancerIngress{}
				} else {
					yyv4657 := &yyv4655[yyj4655]
					yyv4657.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4655 := 0
		for ; !r.CheckBreak(); yyj4655++ {

			if yyj4655 >= len(yyv4655) {
				yyv4655 = append(yyv4655, LoadBalancerIngress{}) // var yyz4655 LoadBalancerIngress
				yyc4655 = true
			}
			yyh4655.ElemContainerState(yyj4655)
			if yyj4655 < len(yyv4655) {
				if r.TryDecodeAsNil() {
					yyv4655[yyj4655] = LoadBalancerIngress{}
				} else {
					yyv4658 := &yyv4655[yyj4655]
					yyv4658.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4655 < len(yyv4655) {
			yyv4655 = yyv4655[:yyj4655]
			yyc4655 = true
		} else if yyj4655 == 0 && yyv4655 == nil {
			yyv4655 = []LoadBalancerIngress{}
			yyc4655 = true
		}
	}
	yyh4655.End()
	if yyc4655 {
		*v = yyv4655
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4659 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4660 := &yyv4659
		yy4660.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4661 := *v
	yyh4661, yyl4661 := z.DecSliceHelperStart()
	var yyc4661 bool
	if yyl4661 == 0 {
		if yyv4661 == nil {
			yyv4661 = []ServicePort{}
			yyc4661 = true
		} else if len(yyv4661) != 0 {
			yyv4661 = yyv4661[:0]
			yyc4661 = true
		}
	} else if yyl4661 > 0 {
		var yyrr4661, yyrl4661 int
		var yyrt4661 bool
		if yyl4661 > cap(yyv4661) {

			yyrg4661 := len(yyv4661) > 0
			yyv24661 := yyv4661
			yyrl4661, yyrt4661 = z.DecInferLen(yyl4661, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4661 {
				if yyrl4661 <= cap(yyv4661) {
					yyv4661 = yyv4661[:yyrl4661]
				} else {
					yyv4661 = make([]ServicePort, yyrl4661)
				}
			} else {
				yyv4661 = make([]ServicePort, yyrl4661)
			}
			yyc4661 = true
			yyrr4661 = len(yyv4661)
			if yyrg4661 {
				copy(yyv4661, yyv24661)
			}
		} else if yyl4661 != len(yyv4661) {
			yyv4661 = yyv4661[:yyl4661]
			yyc4661 = true
		}
		yyj4661 := 0
		for ; yyj4661 < yyrr4661; yyj4661++ {
			yyh4661.ElemContainerState(yyj4661)
			if r.TryDecodeAsNil() {
				yyv4661[yyj4661] = ServicePort{}
			} else {
				yyv4662 := &yyv4661[yyj4661]
				yyv4662.CodecDecodeSelf(d)
			}

		}
		if yyrt4661 {
			for ; yyj4661 < yyl4661; yyj4661++ {
				yyv4661 = append(yyv4661, ServicePort{})
				yyh4661.ElemContainerState(yyj4661)
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = ServicePort{}
				} else {
					yyv4663 := &yyv4661[yyj4661]
					yyv4663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4661 := 0
		for ; !r.CheckBreak(); yyj4661++ {

			if yyj4661 >= len(yyv4661) {
				yyv4661 = append(yyv4661, ServicePort{}) // var yyz4661 ServicePort
				yyc4661 = true
			}
			yyh4661.ElemContainerState(yyj4661)
			if yyj4661 < len(yyv4661) {
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = ServicePort{}
				} else {
					yyv4664 := &yyv4661[yyj4661]
					yyv4664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4661 < len(yyv4661) {
			yyv4661 = yyv4661[:yyj4661]
			yyc4661 = true
		} else if yyj4661 == 0 && yyv4661 == nil {
			yyv4661 = []ServicePort{}
			yyc4661 = true
		}
	}
	yyh4661.End()
	if yyc4661 {
		*v = yyv4661
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4666 := &yyv4665
		yy4666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4667 := *v
	yyh4667, yyl4667 := z.DecSliceHelperStart()
	var yyc4667 bool
	if yyl4667 == 0 {
		if yyv4667 == nil {
			yyv4667 = []ObjectReference{}
			yyc4667 = true
		} else if len(yyv4667) != 0 {
			yyv4667 = yyv4667[:0]
			yyc4667 = true
		}
	} else if yyl4667 > 0 {
		var yyrr4667, yyrl4667 int
		var yyrt4667 bool
		if yyl4667 > cap(yyv4667) {

			yyrg4667 := len(yyv4667) > 0
			yyv24667 := yyv4667
			yyrl4667, yyrt4667 = z.DecInferLen(yyl4667, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4667 {
				if yyrl4667 <= cap(yyv4667) {
					yyv4667 = yyv4667[:yyrl4667]
				} else {
					yyv4667 = make([]ObjectReference, yyrl4667)
				}
			} else {
				yyv4667 = make([]ObjectReference, yyrl4667)
			}
			yyc4667 = true
			yyrr4667 = len(yyv4667)
			if yyrg4667 {
				copy(yyv4667, yyv24667)
			}
		} else if yyl4667 != len(yyv4667) {
			yyv4667 = yyv4667[:yyl4667]
			yyc4667 = true
		}
		yyj4667 := 0
		for ; yyj4667 < yyrr4667; yyj4667++ {
			yyh4667.ElemContainerState(yyj4667)
			if r.TryDecodeAsNil() {
				yyv4667[yyj4667] = ObjectReference{}
			} else {
				yyv4668 := &yyv4667[yyj4667]
				yyv4668.CodecDecodeSelf(d)
			}

		}
		if yyrt4667 {
			for ; yyj4667 < yyl4667; yyj4667++ {
				yyv4667 = append(yyv4667, ObjectReference{})
				yyh4667.ElemContainerState(yyj4667)
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ObjectReference{}
				} else {
					yyv4669 := &yyv4667[yyj4667]
					yyv4669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4667 := 0
		for ; !r.CheckBreak(); yyj4667++ {

			if yyj4667 >= len(yyv4667) {
				yyv4667 = append(yyv4667, ObjectReference{}) // var yyz4667 ObjectReference
				yyc4667 = true
			}
			yyh4667.ElemContainerState(yyj4667)
			if yyj4667 < len(yyv4667) {
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = ObjectReference{}
				} else {
					yyv4670 := &yyv4667[yyj4667]
					yyv4670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4667 < len(yyv4667) {
			yyv4667 = yyv4667[:yyj4667]
			yyc4667 = true
		} else if yyj4667 == 0 && yyv4667 == nil {
			yyv4667 = []ObjectReference{}
			yyc4667 = true
		}
	}
	yyh4667.End()
	if yyc4667 {
		*v = yyv4667
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4672 := &yyv4671
		yy4672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4673 := *v
	yyh4673, yyl4673 := z.DecSliceHelperStart()
	var yyc4673 bool
	if yyl4673 == 0 {
		if yyv4673 == nil {
			yyv4673 = []ServiceAccount{}
			yyc4673 = true
		} else if len(yyv4673) != 0 {
			yyv4673 = yyv4673[:0]
			yyc4673 = true
		}
	} else if yyl4673 > 0 {
		var yyrr4673, yyrl4673 int
		var yyrt4673 bool
		if yyl4673 > cap(yyv4673) {

			yyrg4673 := len(yyv4673) > 0
			yyv24673 := yyv4673
			yyrl4673, yyrt4673 = z.DecInferLen(yyl4673, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4673 {
				if yyrl4673 <= cap(yyv4673) {
					yyv4673 = yyv4673[:yyrl4673]
				} else {
					yyv4673 = make([]ServiceAccount, yyrl4673)
				}
			} else {
				yyv4673 = make([]ServiceAccount, yyrl4673)
			}
			yyc4673 = true
			yyrr4673 = len(yyv4673)
			if yyrg4673 {
				copy(yyv4673, yyv24673)
			}
		} else if yyl4673 != len(yyv4673) {
			yyv4673 = yyv4673[:yyl4673]
			yyc4673 = true
		}
		yyj4673 := 0
		for ; yyj4673 < yyrr4673; yyj4673++ {
			yyh4673.ElemContainerState(yyj4673)
			if r.TryDecodeAsNil() {
				yyv4673[yyj4673] = ServiceAccount{}
			} else {
				yyv4674 := &yyv4673[yyj4673]
				yyv4674.CodecDecodeSelf(d)
			}

		}
		if yyrt4673 {
			for ; yyj4673 < yyl4673; yyj4673++ {
				yyv4673 = append(yyv4673, ServiceAccount{})
				yyh4673.ElemContainerState(yyj4673)
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ServiceAccount{}
				} else {
					yyv4675 := &yyv4673[yyj4673]
					yyv4675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4673 := 0
		for ; !r.CheckBreak(); yyj4673++ {

			if yyj4673 >= len(yyv4673) {
				yyv4673 = append(yyv4673, ServiceAccount{}) // var yyz4673 ServiceAccount
				yyc4673 = true
			}
			yyh4673.ElemContainerState(yyj4673)
			if yyj4673 < len(yyv4673) {
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ServiceAccount{}
				} else {
					yyv4676 := &yyv4673[yyj4673]
					yyv4676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4673 < len(yyv4673) {
			yyv4673 = yyv4673[:yyj4673]
			yyc4673 = true
		} else if yyj4673 == 0 && yyv4673 == nil {
			yyv4673 = []ServiceAccount{}
			yyc4673 = true
		}
	}
	yyh4673.End()
	if yyc4673 {
		*v = yyv4673
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4678 := &yyv4677
		yy4678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4679 := *v
	yyh4679, yyl4679 := z.DecSliceHelperStart()
	var yyc4679 bool
	if yyl4679 == 0 {
		if yyv4679 == nil {
			yyv4679 = []EndpointSubset{}
			yyc4679 = true
		} else if len(yyv4679) != 0 {
			yyv4679 = yyv4679[:0]
			yyc4679 = true
		}
	} else if yyl4679 > 0 {
		var yyrr4679, yyrl4679 int
		var yyrt4679 bool
		if yyl4679 > cap(yyv4679) {

			yyrg4679 := len(yyv4679) > 0
			yyv24679 := yyv4679
			yyrl4679, yyrt4679 = z.DecInferLen(yyl4679, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4679 {
				if yyrl4679 <= cap(yyv4679) {
					yyv4679 = yyv4679[:yyrl4679]
				} else {
					yyv4679 = make([]EndpointSubset, yyrl4679)
				}
			} else {
				yyv4679 = make([]EndpointSubset, yyrl4679)
			}
			yyc4679 = true
			yyrr4679 = len(yyv4679)
			if yyrg4679 {
				copy(yyv4679, yyv24679)
			}
		} else if yyl4679 != len(yyv4679) {
			yyv4679 = yyv4679[:yyl4679]
			yyc4679 = true
		}
		yyj4679 := 0
		for ; yyj4679 < yyrr4679; yyj4679++ {
			yyh4679.ElemContainerState(yyj4679)
			if r.TryDecodeAsNil() {
				yyv4679[yyj4679] = EndpointSubset{}
			} else {
				yyv4680 := &yyv4679[yyj4679]
				yyv4680.CodecDecodeSelf(d)
			}

		}
		if yyrt4679 {
			for ; yyj4679 < yyl4679; yyj4679++ {
				yyv4679 = append(yyv4679, EndpointSubset{})
				yyh4679.ElemContainerState(yyj4679)
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = EndpointSubset{}
				} else {
					yyv4681 := &yyv4679[yyj4679]
					yyv4681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4679 := 0
		for ; !r.CheckBreak(); yyj4679++ {

			if yyj4679 >= len(yyv4679) {
				yyv4679 = append(yyv4679, EndpointSubset{}) // var yyz4679 EndpointSubset
				yyc4679 = true
			}
			yyh4679.ElemContainerState(yyj4679)
			if yyj4679 < len(yyv4679) {
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = EndpointSubset{}
				} else {
					yyv4682 := &yyv4679[yyj4679]
					yyv4682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4679 < len(yyv4679) {
			yyv4679 = yyv4679[:yyj4679]
			yyc4679 = true
		} else if yyj4679 == 0 && yyv4679 == nil {
			yyv4679 = []EndpointSubset{}
			yyc4679 = true
		}
	}
	yyh4679.End()
	if yyc4679 {
		*v = yyv4679
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4684 := &yyv4683
		yy4684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4685 := *v
	yyh4685, yyl4685 := z.DecSliceHelperStart()
	var yyc4685 bool
	if yyl4685 == 0 {
		if yyv4685 == nil {
			yyv4685 = []EndpointAddress{}
			yyc4685 = true
		} else if len(yyv4685) != 0 {
			yyv4685 = yyv4685[:0]
			yyc4685 = true
		}
	} else if yyl4685 > 0 {
		var yyrr4685, yyrl4685 int
		var yyrt4685 bool
		if yyl4685 > cap(yyv4685) {

			yyrg4685 := len(yyv4685) > 0
			yyv24685 := yyv4685
			yyrl4685, yyrt4685 = z.DecInferLen(yyl4685, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4685 {
				if yyrl4685 <= cap(yyv4685) {
					yyv4685 = yyv4685[:yyrl4685]
				} else {
					yyv4685 = make([]EndpointAddress, yyrl4685)
				}
			} else {
				yyv4685 = make([]EndpointAddress, yyrl4685)
			}
			yyc4685 = true
			yyrr4685 = len(yyv4685)
			if yyrg4685 {
				copy(yyv4685, yyv24685)
			}
		} else if yyl4685 != len(yyv4685) {
			yyv4685 = yyv4685[:yyl4685]
			yyc4685 = true
		}
		yyj4685 := 0
		for ; yyj4685 < yyrr4685; yyj4685++ {
			yyh4685.ElemContainerState(yyj4685)
			if r.TryDecodeAsNil() {
				yyv4685[yyj4685] = EndpointAddress{}
			} else {
				yyv4686 := &yyv4685[yyj4685]
				yyv4686.CodecDecodeSelf(d)
			}

		}
		if yyrt4685 {
			for ; yyj4685 < yyl4685; yyj4685++ {
				yyv4685 = append(yyv4685, EndpointAddress{})
				yyh4685.ElemContainerState(yyj4685)
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = EndpointAddress{}
				} else {
					yyv4687 := &yyv4685[yyj4685]
					yyv4687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4685 := 0
		for ; !r.CheckBreak(); yyj4685++ {

			if yyj4685 >= len(yyv4685) {
				yyv4685 = append(yyv4685, EndpointAddress{}) // var yyz4685 EndpointAddress
				yyc4685 = true
			}
			yyh4685.ElemContainerState(yyj4685)
			if yyj4685 < len(yyv4685) {
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = EndpointAddress{}
				} else {
					yyv4688 := &yyv4685[yyj4685]
					yyv4688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4685 < len(yyv4685) {
			yyv4685 = yyv4685[:yyj4685]
			yyc4685 = true
		} else if yyj4685 == 0 && yyv4685 == nil {
			yyv4685 = []EndpointAddress{}
			yyc4685 = true
		}
	}
	yyh4685.End()
	if yyc4685 {
		*v = yyv4685
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4689 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4690 := &yyv4689
		yy4690.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4691 := *v
	yyh4691, yyl4691 := z.DecSliceHelperStart()
	var yyc4691 bool
	if yyl4691 == 0 {
		if yyv4691 == nil {
			yyv4691 = []EndpointPort{}
			yyc4691 = true
		} else if len(yyv4691) != 0 {
			yyv4691 = yyv4691[:0]
			yyc4691 = true
		}
	} else if yyl4691 > 0 {
		var yyrr4691, yyrl4691 int
		var yyrt4691 bool
		if yyl4691 > cap(yyv4691) {

			yyrg4691 := len(yyv4691) > 0
			yyv24691 := yyv4691
			yyrl4691, yyrt4691 = z.DecInferLen(yyl4691, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4691 {
				if yyrl4691 <= cap(yyv4691) {
					yyv4691 = yyv4691[:yyrl4691]
				} else {
					yyv4691 = make([]EndpointPort, yyrl4691)
				}
			} else {
				yyv4691 = make([]EndpointPort, yyrl4691)
			}
			yyc4691 = true
			yyrr4691 = len(yyv4691)
			if yyrg4691 {
				copy(yyv4691, yyv24691)
			}
		} else if yyl4691 != len(yyv4691) {
			yyv4691 = yyv4691[:yyl4691]
			yyc4691 = true
		}
		yyj4691 := 0
		for ; yyj4691 < yyrr4691; yyj4691++ {
			yyh4691.ElemContainerState(yyj4691)
			if r.TryDecodeAsNil() {
				yyv4691[yyj4691] = EndpointPort{}
			} else {
				yyv4692 := &yyv4691[yyj4691]
				yyv4692.CodecDecodeSelf(d)
			}

		}
		if yyrt4691 {
			for ; yyj4691 < yyl4691; yyj4691++ {
				yyv4691 = append(yyv4691, EndpointPort{})
				yyh4691.ElemContainerState(yyj4691)
				if r.TryDecodeAsNil() {
					yyv4691[yyj4691] = EndpointPort{}
				} else {
					yyv4693 := &yyv4691[yyj4691]
					yyv4693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4691 := 0
		for ; !r.CheckBreak(); yyj4691++ {

			if yyj4691 >= len(yyv4691) {
				yyv4691 = append(yyv4691, EndpointPort{}) // var yyz4691 EndpointPort
				yyc4691 = true
			}
			yyh4691.ElemContainerState(yyj4691)
			if yyj4691 < len(yyv4691) {
				if r.TryDecodeAsNil() {
					yyv4691[yyj4691] = EndpointPort{}
				} else {
					yyv4694 := &yyv4691[yyj4691]
					yyv4694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4691 < len(yyv4691) {
			yyv4691 = yyv4691[:yyj4691]
			yyc4691 = true
		} else if yyj4691 == 0 && yyv4691 == nil {
			yyv4691 = []EndpointPort{}
			yyc4691 = true
		}
	}
	yyh4691.End()
	if yyc4691 {
		*v = yyv4691
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4695 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4696 := &yyv4695
		yy4696.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4697 := *v
	yyh4697, yyl4697 := z.DecSliceHelperStart()
	var yyc4697 bool
	if yyl4697 == 0 {
		if yyv4697 == nil {
			yyv4697 = []Endpoints{}
			yyc4697 = true
		} else if len(yyv4697) != 0 {
			yyv4697 = yyv4697[:0]
			yyc4697 = true
		}
	} else if yyl4697 > 0 {
		var yyrr4697, yyrl4697 int
		var yyrt4697 bool
		if yyl4697 > cap(yyv4697) {

			yyrg4697 := len(yyv4697) > 0
			yyv24697 := yyv4697
			yyrl4697, yyrt4697 = z.DecInferLen(yyl4697, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4697 {
				if yyrl4697 <= cap(yyv4697) {
					yyv4697 = yyv4697[:yyrl4697]
				} else {
					yyv4697 = make([]Endpoints, yyrl4697)
				}
			} else {
				yyv4697 = make([]Endpoints, yyrl4697)
			}
			yyc4697 = true
			yyrr4697 = len(yyv4697)
			if yyrg4697 {
				copy(yyv4697, yyv24697)
			}
		} else if yyl4697 != len(yyv4697) {
			yyv4697 = yyv4697[:yyl4697]
			yyc4697 = true
		}
		yyj4697 := 0
		for ; yyj4697 < yyrr4697; yyj4697++ {
			yyh4697.ElemContainerState(yyj4697)
			if r.TryDecodeAsNil() {
				yyv4697[yyj4697] = Endpoints{}
			} else {
				yyv4698 := &yyv4697[yyj4697]
				yyv4698.CodecDecodeSelf(d)
			}

		}
		if yyrt4697 {
			for ; yyj4697 < yyl4697; yyj4697++ {
				yyv4697 = append(yyv4697, Endpoints{})
				yyh4697.ElemContainerState(yyj4697)
				if r.TryDecodeAsNil() {
					yyv4697[yyj4697] = Endpoints{}
				} else {
					yyv4699 := &yyv4697[yyj4697]
					yyv4699.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4697 := 0
		for ; !r.CheckBreak(); yyj4697++ {

			if yyj4697 >= len(yyv4697) {
				yyv4697 = append(yyv4697, Endpoints{}) // var yyz4697 Endpoints
				yyc4697 = true
			}
			yyh4697.ElemContainerState(yyj4697)
			if yyj4697 < len(yyv4697) {
				if r.TryDecodeAsNil() {
					yyv4697[yyj4697] = Endpoints{}
				} else {
					yyv4700 := &yyv4697[yyj4697]
					yyv4700.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4697 < len(yyv4697) {
			yyv4697 = yyv4697[:yyj4697]
			yyc4697 = true
		} else if yyj4697 == 0 && yyv4697 == nil {
			yyv4697 = []Endpoints{}
			yyc4697 = true
		}
	}
	yyh4697.End()
	if yyc4697 {
		*v = yyv4697
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4701 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4702 := &yyv4701
		yy4702.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4703 := *v
	yyh4703, yyl4703 := z.DecSliceHelperStart()
	var yyc4703 bool
	if yyl4703 == 0 {
		if yyv4703 == nil {
			yyv4703 = []NodeCondition{}
			yyc4703 = true
		} else if len(yyv4703) != 0 {
			yyv4703 = yyv4703[:0]
			yyc4703 = true
		}
	} else if yyl4703 > 0 {
		var yyrr4703, yyrl4703 int
		var yyrt4703 bool
		if yyl4703 > cap(yyv4703) {

			yyrg4703 := len(yyv4703) > 0
			yyv24703 := yyv4703
			yyrl4703, yyrt4703 = z.DecInferLen(yyl4703, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4703 {
				if yyrl4703 <= cap(yyv4703) {
					yyv4703 = yyv4703[:yyrl4703]
				} else {
					yyv4703 = make([]NodeCondition, yyrl4703)
				}
			} else {
				yyv4703 = make([]NodeCondition, yyrl4703)
			}
			yyc4703 = true
			yyrr4703 = len(yyv4703)
			if yyrg4703 {
				copy(yyv4703, yyv24703)
			}
		} else if yyl4703 != len(yyv4703) {
			yyv4703 = yyv4703[:yyl4703]
			yyc4703 = true
		}
		yyj4703 := 0
		for ; yyj4703 < yyrr4703; yyj4703++ {
			yyh4703.ElemContainerState(yyj4703)
			if r.TryDecodeAsNil() {
				yyv4703[yyj4703] = NodeCondition{}
			} else {
				yyv4704 := &yyv4703[yyj4703]
				yyv4704.CodecDecodeSelf(d)
			}

		}
		if yyrt4703 {
			for ; yyj4703 < yyl4703; yyj4703++ {
				yyv4703 = append(yyv4703, NodeCondition{})
				yyh4703.ElemContainerState(yyj4703)
				if r.TryDecodeAsNil() {
					yyv4703[yyj4703] = NodeCondition{}
				} else {
					yyv4705 := &yyv4703[yyj4703]
					yyv4705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4703 := 0
		for ; !r.CheckBreak(); yyj4703++ {

			if yyj4703 >= len(yyv4703) {
				yyv4703 = append(yyv4703, NodeCondition{}) // var yyz4703 NodeCondition
				yyc4703 = true
			}
			yyh4703.ElemContainerState(yyj4703)
			if yyj4703 < len(yyv4703) {
				if r.TryDecodeAsNil() {
					yyv4703[yyj4703] = NodeCondition{}
				} else {
					yyv4706 := &yyv4703[yyj4703]
					yyv4706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4703 < len(yyv4703) {
			yyv4703 = yyv4703[:yyj4703]
			yyc4703 = true
		} else if yyj4703 == 0 && yyv4703 == nil {
			yyv4703 = []NodeCondition{}
			yyc4703 = true
		}
	}
	yyh4703.End()
	if yyc4703 {
		*v = yyv4703
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4707 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4708 := &yyv4707
		yy4708.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4709 := *v
	yyh4709, yyl4709 := z.DecSliceHelperStart()
	var yyc4709 bool
	if yyl4709 == 0 {
		if yyv4709 == nil {
			yyv4709 = []NodeAddress{}
			yyc4709 = true
		} else if len(yyv4709) != 0 {
			yyv4709 = yyv4709[:0]
			yyc4709 = true
		}
	} else if yyl4709 > 0 {
		var yyrr4709, yyrl4709 int
		var yyrt4709 bool
		if yyl4709 > cap(yyv4709) {

			yyrg4709 := len(yyv4709) > 0
			yyv24709 := yyv4709
			yyrl4709, yyrt4709 = z.DecInferLen(yyl4709, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4709 {
				if yyrl4709 <= cap(yyv4709) {
					yyv4709 = yyv4709[:yyrl4709]
				} else {
					yyv4709 = make([]NodeAddress, yyrl4709)
				}
			} else {
				yyv4709 = make([]NodeAddress, yyrl4709)
			}
			yyc4709 = true
			yyrr4709 = len(yyv4709)
			if yyrg4709 {
				copy(yyv4709, yyv24709)
			}
		} else if yyl4709 != len(yyv4709) {
			yyv4709 = yyv4709[:yyl4709]
			yyc4709 = true
		}
		yyj4709 := 0
		for ; yyj4709 < yyrr4709; yyj4709++ {
			yyh4709.ElemContainerState(yyj4709)
			if r.TryDecodeAsNil() {
				yyv4709[yyj4709] = NodeAddress{}
			} else {
				yyv4710 := &yyv4709[yyj4709]
				yyv4710.CodecDecodeSelf(d)
			}

		}
		if yyrt4709 {
			for ; yyj4709 < yyl4709; yyj4709++ {
				yyv4709 = append(yyv4709, NodeAddress{})
				yyh4709.ElemContainerState(yyj4709)
				if r.TryDecodeAsNil() {
					yyv4709[yyj4709] = NodeAddress{}
				} else {
					yyv4711 := &yyv4709[yyj4709]
					yyv4711.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4709 := 0
		for ; !r.CheckBreak(); yyj4709++ {

			if yyj4709 >= len(yyv4709) {
				yyv4709 = append(yyv4709, NodeAddress{}) // var yyz4709 NodeAddress
				yyc4709 = true
			}
			yyh4709.ElemContainerState(yyj4709)
			if yyj4709 < len(yyv4709) {
				if r.TryDecodeAsNil() {
					yyv4709[yyj4709] = NodeAddress{}
				} else {
					yyv4712 := &yyv4709[yyj4709]
					yyv4712.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4709 < len(yyv4709) {
			yyv4709 = yyv4709[:yyj4709]
			yyc4709 = true
		} else if yyj4709 == 0 && yyv4709 == nil {
			yyv4709 = []NodeAddress{}
			yyc4709 = true
		}
	}
	yyh4709.End()
	if yyc4709 {
		*v = yyv4709
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4713 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4714 := &yyv4713
		yy4714.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4715 := *v
	yyh4715, yyl4715 := z.DecSliceHelperStart()
	var yyc4715 bool
	if yyl4715 == 0 {
		if yyv4715 == nil {
			yyv4715 = []ContainerImage{}
			yyc4715 = true
		} else if len(yyv4715) != 0 {
			yyv4715 = yyv4715[:0]
			yyc4715 = true
		}
	} else if yyl4715 > 0 {
		var yyrr4715, yyrl4715 int
		var yyrt4715 bool
		if yyl4715 > cap(yyv4715) {

			yyrg4715 := len(yyv4715) > 0
			yyv24715 := yyv4715
			yyrl4715, yyrt4715 = z.DecInferLen(yyl4715, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4715 {
				if yyrl4715 <= cap(yyv4715) {
					yyv4715 = yyv4715[:yyrl4715]
				} else {
					yyv4715 = make([]ContainerImage, yyrl4715)
				}
			} else {
				yyv4715 = make([]ContainerImage, yyrl4715)
			}
			yyc4715 = true
			yyrr4715 = len(yyv4715)
			if yyrg4715 {
				copy(yyv4715, yyv24715)
			}
		} else if yyl4715 != len(yyv4715) {
			yyv4715 = yyv4715[:yyl4715]
			yyc4715 = true
		}
		yyj4715 := 0
		for ; yyj4715 < yyrr4715; yyj4715++ {
			yyh4715.ElemContainerState(yyj4715)
			if r.TryDecodeAsNil() {
				yyv4715[yyj4715] = ContainerImage{}
			} else {
				yyv4716 := &yyv4715[yyj4715]
				yyv4716.CodecDecodeSelf(d)
			}

		}
		if yyrt4715 {
			for ; yyj4715 < yyl4715; yyj4715++ {
				yyv4715 = append(yyv4715, ContainerImage{})
				yyh4715.ElemContainerState(yyj4715)
				if r.TryDecodeAsNil() {
					yyv4715[yyj4715] = ContainerImage{}
				} else {
					yyv4717 := &yyv4715[yyj4715]
					yyv4717.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4715 := 0
		for ; !r.CheckBreak(); yyj4715++ {

			if yyj4715 >= len(yyv4715) {
				yyv4715 = append(yyv4715, ContainerImage{}) // var yyz4715 ContainerImage
				yyc4715 = true
			}
			yyh4715.ElemContainerState(yyj4715)
			if yyj4715 < len(yyv4715) {
				if r.TryDecodeAsNil() {
					yyv4715[yyj4715] = ContainerImage{}
				} else {
					yyv4718 := &yyv4715[yyj4715]
					yyv4718.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4715 < len(yyv4715) {
			yyv4715 = yyv4715[:yyj4715]
			yyc4715 = true
		} else if yyj4715 == 0 && yyv4715 == nil {
			yyv4715 = []ContainerImage{}
			yyc4715 = true
		}
	}
	yyh4715.End()
	if yyc4715 {
		*v = yyv4715
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4719 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4720 := *v
	yyh4720, yyl4720 := z.DecSliceHelperStart()
	var yyc4720 bool
	if yyl4720 == 0 {
		if yyv4720 == nil {
			yyv4720 = []UniqueVolumeName{}
			yyc4720 = true
		} else if len(yyv4720) != 0 {
			yyv4720 = yyv4720[:0]
			yyc4720 = true
		}
	} else if yyl4720 > 0 {
		var yyrr4720, yyrl4720 int
		var yyrt4720 bool
		if yyl4720 > cap(yyv4720) {

			yyrl4720, yyrt4720 = z.DecInferLen(yyl4720, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4720 {
				if yyrl4720 <= cap(yyv4720) {
					yyv4720 = yyv4720[:yyrl4720]
				} else {
					yyv4720 = make([]UniqueVolumeName, yyrl4720)
				}
			} else {
				yyv4720 = make([]UniqueVolumeName, yyrl4720)
			}
			yyc4720 = true
			yyrr4720 = len(yyv4720)
		} else if yyl4720 != len(yyv4720) {
			yyv4720 = yyv4720[:yyl4720]
			yyc4720 = true
		}
		yyj4720 := 0
		for ; yyj4720 < yyrr4720; yyj4720++ {
			yyh4720.ElemContainerState(yyj4720)
			if r.TryDecodeAsNil() {
				yyv4720[yyj4720] = ""
			} else {
				yyv4720[yyj4720] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4720 {
			for ; yyj4720 < yyl4720; yyj4720++ {
				yyv4720 = append(yyv4720, "")
				yyh4720.ElemContainerState(yyj4720)
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = ""
				} else {
					yyv4720[yyj4720] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4720 := 0
		for ; !r.CheckBreak(); yyj4720++ {

			if yyj4720 >= len(yyv4720) {
				yyv4720 = append(yyv4720, "") // var yyz4720 UniqueVolumeName
				yyc4720 = true
			}
			yyh4720.ElemContainerState(yyj4720)
			if yyj4720 < len(yyv4720) {
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = ""
				} else {
					yyv4720[yyj4720] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4720 < len(yyv4720) {
			yyv4720 = yyv4720[:yyj4720]
			yyc4720 = true
		} else if yyj4720 == 0 && yyv4720 == nil {
			yyv4720 = []UniqueVolumeName{}
			yyc4720 = true
		}
	}
	yyh4720.End()
	if yyc4720 {
		*v = yyv4720
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4725 := &yyv4724
		yy4725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4726 := *v
	yyh4726, yyl4726 := z.DecSliceHelperStart()
	var yyc4726 bool
	if yyl4726 == 0 {
		if yyv4726 == nil {
			yyv4726 = []AttachedVolume{}
			yyc4726 = true
		} else if len(yyv4726) != 0 {
			yyv4726 = yyv4726[:0]
			yyc4726 = true
		}
	} else if yyl4726 > 0 {
		var yyrr4726, yyrl4726 int
		var yyrt4726 bool
		if yyl4726 > cap(yyv4726) {

			yyrg4726 := len(yyv4726) > 0
			yyv24726 := yyv4726
			yyrl4726, yyrt4726 = z.DecInferLen(yyl4726, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4726 {
				if yyrl4726 <= cap(yyv4726) {
					yyv4726 = yyv4726[:yyrl4726]
				} else {
					yyv4726 = make([]AttachedVolume, yyrl4726)
				}
			} else {
				yyv4726 = make([]AttachedVolume, yyrl4726)
			}
			yyc4726 = true
			yyrr4726 = len(yyv4726)
			if yyrg4726 {
				copy(yyv4726, yyv24726)
			}
		} else if yyl4726 != len(yyv4726) {
			yyv4726 = yyv4726[:yyl4726]
			yyc4726 = true
		}
		yyj4726 := 0
		for ; yyj4726 < yyrr4726; yyj4726++ {
			yyh4726.ElemContainerState(yyj4726)
			if r.TryDecodeAsNil() {
				yyv4726[yyj4726] = AttachedVolume{}
			} else {
				yyv4727 := &yyv4726[yyj4726]
				yyv4727.CodecDecodeSelf(d)
			}

		}
		if yyrt4726 {
			for ; yyj4726 < yyl4726; yyj4726++ {
				yyv4726 = append(yyv4726, AttachedVolume{})
				yyh4726.ElemContainerState(yyj4726)
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = AttachedVolume{}
				} else {
					yyv4728 := &yyv4726[yyj4726]
					yyv4728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4726 := 0
		for ; !r.CheckBreak(); yyj4726++ {

			if yyj4726 >= len(yyv4726) {
				yyv4726 = append(yyv4726, AttachedVolume{}) // var yyz4726 AttachedVolume
				yyc4726 = true
			}
			yyh4726.ElemContainerState(yyj4726)
			if yyj4726 < len(yyv4726) {
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = AttachedVolume{}
				} else {
					yyv4729 := &yyv4726[yyj4726]
					yyv4729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4726 < len(yyv4726) {
			yyv4726 = yyv4726[:yyj4726]
			yyc4726 = true
		} else if yyj4726 == 0 && yyv4726 == nil {
			yyv4726 = []AttachedVolume{}
			yyc4726 = true
		}
	}
	yyh4726.End()
	if yyc4726 {
		*v = yyv4726
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []PreferAvoidPodsEntry{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]PreferAvoidPodsEntry, yyrl4732)
				}
			} else {
				yyv4732 = make([]PreferAvoidPodsEntry, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = PreferAvoidPodsEntry{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, PreferAvoidPodsEntry{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = PreferAvoidPodsEntry{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, PreferAvoidPodsEntry{}) // var yyz4732 PreferAvoidPodsEntry
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = PreferAvoidPodsEntry{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []PreferAvoidPodsEntry{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4736, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4736.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4737 := &yyv4736
		yym4738 := z.EncBinary()
		_ = yym4738
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4737) {
		} else if !yym4738 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4737)
		} else {
			z.EncFallback(yy4737)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4739 := *v
	yyl4739 := r.ReadMapStart()
	yybh4739 := z.DecBasicHandle()
	if yyv4739 == nil {
		yyrl4739, _ := z.DecInferLen(yyl4739, yybh4739.MaxInitLen, 72)
		yyv4739 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4739)
		*v = yyv4739
	}
	var yymk4739 ResourceName
	var yymv4739 pkg3_resource.Quantity
	var yymg4739 bool
	if yybh4739.MapValueReset {
		yymg4739 = true
	}
	if yyl4739 > 0 {
		for yyj4739 := 0; yyj4739 < yyl4739; yyj4739++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4739 = ""
			} else {
				yymk4739 = ResourceName(r.DecodeString())
			}

			if yymg4739 {
				yymv4739 = yyv4739[yymk4739]
			} else {
				yymv4739 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4739 = pkg3_resource.Quantity{}
			} else {
				yyv4741 := &yymv4739
				yym4742 := z.DecBinary()
				_ = yym4742
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4741) {
				} else if !yym4742 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4741)
				} else {
					z.DecFallback(yyv4741, false)
				}
			}

			if yyv4739 != nil {
				yyv4739[yymk4739] = yymv4739
			}
		}
	} else if yyl4739 < 0 {
		for yyj4739 := 0; !r.CheckBreak(); yyj4739++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4739 = ""
			} else {
				yymk4739 = ResourceName(r.DecodeString())
			}

			if yymg4739 {
				yymv4739 = yyv4739[yymk4739]
			} else {
				yymv4739 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4739 = pkg3_resource.Quantity{}
			} else {
				yyv4744 := &yymv4739
				yym4745 := z.DecBinary()
				_ = yym4745
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4744) {
				} else if !yym4745 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4744)
				} else {
					z.DecFallback(yyv4744, false)
				}
			}

			if yyv4739 != nil {
				yyv4739[yymk4739] = yymv4739
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4746 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4747 := &yyv4746
		yy4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []Node{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrg4748 := len(yyv4748) > 0
			yyv24748 := yyv4748
			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]Node, yyrl4748)
				}
			} else {
				yyv4748 = make([]Node, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
			if yyrg4748 {
				copy(yyv4748, yyv24748)
			}
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = Node{}
			} else {
				yyv4749 := &yyv4748[yyj4748]
				yyv4749.CodecDecodeSelf(d)
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, Node{})
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = Node{}
				} else {
					yyv4750 := &yyv4748[yyj4748]
					yyv4750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, Node{}) // var yyz4748 Node
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = Node{}
				} else {
					yyv4751 := &yyv4748[yyj4748]
					yyv4751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []Node{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4752.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4753 := *v
	yyh4753, yyl4753 := z.DecSliceHelperStart()
	var yyc4753 bool
	if yyl4753 == 0 {
		if yyv4753 == nil {
			yyv4753 = []FinalizerName{}
			yyc4753 = true
		} else if len(yyv4753) != 0 {
			yyv4753 = yyv4753[:0]
			yyc4753 = true
		}
	} else if yyl4753 > 0 {
		var yyrr4753, yyrl4753 int
		var yyrt4753 bool
		if yyl4753 > cap(yyv4753) {

			yyrl4753, yyrt4753 = z.DecInferLen(yyl4753, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4753 {
				if yyrl4753 <= cap(yyv4753) {
					yyv4753 = yyv4753[:yyrl4753]
				} else {
					yyv4753 = make([]FinalizerName, yyrl4753)
				}
			} else {
				yyv4753 = make([]FinalizerName, yyrl4753)
			}
			yyc4753 = true
			yyrr4753 = len(yyv4753)
		} else if yyl4753 != len(yyv4753) {
			yyv4753 = yyv4753[:yyl4753]
			yyc4753 = true
		}
		yyj4753 := 0
		for ; yyj4753 < yyrr4753; yyj4753++ {
			yyh4753.ElemContainerState(yyj4753)
			if r.TryDecodeAsNil() {
				yyv4753[yyj4753] = ""
			} else {
				yyv4753[yyj4753] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4753 {
			for ; yyj4753 < yyl4753; yyj4753++ {
				yyv4753 = append(yyv4753, "")
				yyh4753.ElemContainerState(yyj4753)
				if r.TryDecodeAsNil() {
					yyv4753[yyj4753] = ""
				} else {
					yyv4753[yyj4753] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4753 := 0
		for ; !r.CheckBreak(); yyj4753++ {

			if yyj4753 >= len(yyv4753) {
				yyv4753 = append(yyv4753, "") // var yyz4753 FinalizerName
				yyc4753 = true
			}
			yyh4753.ElemContainerState(yyj4753)
			if yyj4753 < len(yyv4753) {
				if r.TryDecodeAsNil() {
					yyv4753[yyj4753] = ""
				} else {
					yyv4753[yyj4753] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4753 < len(yyv4753) {
			yyv4753 = yyv4753[:yyj4753]
			yyc4753 = true
		} else if yyj4753 == 0 && yyv4753 == nil {
			yyv4753 = []FinalizerName{}
			yyc4753 = true
		}
	}
	yyh4753.End()
	if yyc4753 {
		*v = yyv4753
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4757 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4758 := &yyv4757
		yy4758.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4759 := *v
	yyh4759, yyl4759 := z.DecSliceHelperStart()
	var yyc4759 bool
	if yyl4759 == 0 {
		if yyv4759 == nil {
			yyv4759 = []Namespace{}
			yyc4759 = true
		} else if len(yyv4759) != 0 {
			yyv4759 = yyv4759[:0]
			yyc4759 = true
		}
	} else if yyl4759 > 0 {
		var yyrr4759, yyrl4759 int
		var yyrt4759 bool
		if yyl4759 > cap(yyv4759) {

			yyrg4759 := len(yyv4759) > 0
			yyv24759 := yyv4759
			yyrl4759, yyrt4759 = z.DecInferLen(yyl4759, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4759 {
				if yyrl4759 <= cap(yyv4759) {
					yyv4759 = yyv4759[:yyrl4759]
				} else {
					yyv4759 = make([]Namespace, yyrl4759)
				}
			} else {
				yyv4759 = make([]Namespace, yyrl4759)
			}
			yyc4759 = true
			yyrr4759 = len(yyv4759)
			if yyrg4759 {
				copy(yyv4759, yyv24759)
			}
		} else if yyl4759 != len(yyv4759) {
			yyv4759 = yyv4759[:yyl4759]
			yyc4759 = true
		}
		yyj4759 := 0
		for ; yyj4759 < yyrr4759; yyj4759++ {
			yyh4759.ElemContainerState(yyj4759)
			if r.TryDecodeAsNil() {
				yyv4759[yyj4759] = Namespace{}
			} else {
				yyv4760 := &yyv4759[yyj4759]
				yyv4760.CodecDecodeSelf(d)
			}

		}
		if yyrt4759 {
			for ; yyj4759 < yyl4759; yyj4759++ {
				yyv4759 = append(yyv4759, Namespace{})
				yyh4759.ElemContainerState(yyj4759)
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = Namespace{}
				} else {
					yyv4761 := &yyv4759[yyj4759]
					yyv4761.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4759 := 0
		for ; !r.CheckBreak(); yyj4759++ {

			if yyj4759 >= len(yyv4759) {
				yyv4759 = append(yyv4759, Namespace{}) // var yyz4759 Namespace
				yyc4759 = true
			}
			yyh4759.ElemContainerState(yyj4759)
			if yyj4759 < len(yyv4759) {
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = Namespace{}
				} else {
					yyv4762 := &yyv4759[yyj4759]
					yyv4762.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4759 < len(yyv4759) {
			yyv4759 = yyv4759[:yyj4759]
			yyc4759 = true
		} else if yyj4759 == 0 && yyv4759 == nil {
			yyv4759 = []Namespace{}
			yyc4759 = true
		}
	}
	yyh4759.End()
	if yyc4759 {
		*v = yyv4759
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4763 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4764 := &yyv4763
		yy4764.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4765 := *v
	yyh4765, yyl4765 := z.DecSliceHelperStart()
	var yyc4765 bool
	if yyl4765 == 0 {
		if yyv4765 == nil {
			yyv4765 = []Event{}
			yyc4765 = true
		} else if len(yyv4765) != 0 {
			yyv4765 = yyv4765[:0]
			yyc4765 = true
		}
	} else if yyl4765 > 0 {
		var yyrr4765, yyrl4765 int
		var yyrt4765 bool
		if yyl4765 > cap(yyv4765) {

			yyrg4765 := len(yyv4765) > 0
			yyv24765 := yyv4765
			yyrl4765, yyrt4765 = z.DecInferLen(yyl4765, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4765 {
				if yyrl4765 <= cap(yyv4765) {
					yyv4765 = yyv4765[:yyrl4765]
				} else {
					yyv4765 = make([]Event, yyrl4765)
				}
			} else {
				yyv4765 = make([]Event, yyrl4765)
			}
			yyc4765 = true
			yyrr4765 = len(yyv4765)
			if yyrg4765 {
				copy(yyv4765, yyv24765)
			}
		} else if yyl4765 != len(yyv4765) {
			yyv4765 = yyv4765[:yyl4765]
			yyc4765 = true
		}
		yyj4765 := 0
		for ; yyj4765 < yyrr4765; yyj4765++ {
			yyh4765.ElemContainerState(yyj4765)
			if r.TryDecodeAsNil() {
				yyv4765[yyj4765] = Event{}
			} else {
				yyv4766 := &yyv4765[yyj4765]
				yyv4766.CodecDecodeSelf(d)
			}

		}
		if yyrt4765 {
			for ; yyj4765 < yyl4765; yyj4765++ {
				yyv4765 = append(yyv4765, Event{})
				yyh4765.ElemContainerState(yyj4765)
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = Event{}
				} else {
					yyv4767 := &yyv4765[yyj4765]
					yyv4767.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4765 := 0
		for ; !r.CheckBreak(); yyj4765++ {

			if yyj4765 >= len(yyv4765) {
				yyv4765 = append(yyv4765, Event{}) // var yyz4765 Event
				yyc4765 = true
			}
			yyh4765.ElemContainerState(yyj4765)
			if yyj4765 < len(yyv4765) {
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = Event{}
				} else {
					yyv4768 := &yyv4765[yyj4765]
					yyv4768.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4765 < len(yyv4765) {
			yyv4765 = yyv4765[:yyj4765]
			yyc4765 = true
		} else if yyj4765 == 0 && yyv4765 == nil {
			yyv4765 = []Event{}
			yyc4765 = true
		}
	}
	yyh4765.End()
	if yyc4765 {
		*v = yyv4765
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4769 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4769 == nil {
			r.EncodeNil()
		} else {
			yym4770 := z.EncBinary()
			_ = yym4770
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4769) {
			} else {
				z.EncFallback(yyv4769)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4771 := *v
	yyh4771, yyl4771 := z.DecSliceHelperStart()
	var yyc4771 bool
	if yyl4771 == 0 {
		if yyv4771 == nil {
			yyv4771 = []pkg7_runtime.Object{}
			yyc4771 = true
		} else if len(yyv4771) != 0 {
			yyv4771 = yyv4771[:0]
			yyc4771 = true
		}
	} else if yyl4771 > 0 {
		var yyrr4771, yyrl4771 int
		var yyrt4771 bool
		if yyl4771 > cap(yyv4771) {

			yyrg4771 := len(yyv4771) > 0
			yyv24771 := yyv4771
			yyrl4771, yyrt4771 = z.DecInferLen(yyl4771, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4771 {
				if yyrl4771 <= cap(yyv4771) {
					yyv4771 = yyv4771[:yyrl4771]
				} else {
					yyv4771 = make([]pkg7_runtime.Object, yyrl4771)
				}
			} else {
				yyv4771 = make([]pkg7_runtime.Object, yyrl4771)
			}
			yyc4771 = true
			yyrr4771 = len(yyv4771)
			if yyrg4771 {
				copy(yyv4771, yyv24771)
			}
		} else if yyl4771 != len(yyv4771) {
			yyv4771 = yyv4771[:yyl4771]
			yyc4771 = true
		}
		yyj4771 := 0
		for ; yyj4771 < yyrr4771; yyj4771++ {
			yyh4771.ElemContainerState(yyj4771)
			if r.TryDecodeAsNil() {
				yyv4771[yyj4771] = nil
			} else {
				yyv4772 := &yyv4771[yyj4771]
				yym4773 := z.DecBinary()
				_ = yym4773
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4772) {
				} else {
					z.DecFallback(yyv4772, true)
				}
			}

		}
		if yyrt4771 {
			for ; yyj4771 < yyl4771; yyj4771++ {
				yyv4771 = append(yyv4771, nil)
				yyh4771.ElemContainerState(yyj4771)
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = nil
				} else {
					yyv4774 := &yyv4771[yyj4771]
					yym4775 := z.DecBinary()
					_ = yym4775
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4774) {
					} else {
						z.DecFallback(yyv4774, true)
					}
				}

			}
		}

	} else {
		yyj4771 := 0
		for ; !r.CheckBreak(); yyj4771++ {

			if yyj4771 >= len(yyv4771) {
				yyv4771 = append(yyv4771, nil) // var yyz4771 pkg7_runtime.Object
				yyc4771 = true
			}
			yyh4771.ElemContainerState(yyj4771)
			if yyj4771 < len(yyv4771) {
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = nil
				} else {
					yyv4776 := &yyv4771[yyj4771]
					yym4777 := z.DecBinary()
					_ = yym4777
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4776) {
					} else {
						z.DecFallback(yyv4776, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4771 < len(yyv4771) {
			yyv4771 = yyv4771[:yyj4771]
			yyc4771 = true
		} else if yyj4771 == 0 && yyv4771 == nil {
			yyv4771 = []pkg7_runtime.Object{}
			yyc4771 = true
		}
	}
	yyh4771.End()
	if yyc4771 {
		*v = yyv4771
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4779 := &yyv4778
		yy4779.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4780 := *v
	yyh4780, yyl4780 := z.DecSliceHelperStart()
	var yyc4780 bool
	if yyl4780 == 0 {
		if yyv4780 == nil {
			yyv4780 = []LimitRangeItem{}
			yyc4780 = true
		} else if len(yyv4780) != 0 {
			yyv4780 = yyv4780[:0]
			yyc4780 = true
		}
	} else if yyl4780 > 0 {
		var yyrr4780, yyrl4780 int
		var yyrt4780 bool
		if yyl4780 > cap(yyv4780) {

			yyrg4780 := len(yyv4780) > 0
			yyv24780 := yyv4780
			yyrl4780, yyrt4780 = z.DecInferLen(yyl4780, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4780 {
				if yyrl4780 <= cap(yyv4780) {
					yyv4780 = yyv4780[:yyrl4780]
				} else {
					yyv4780 = make([]LimitRangeItem, yyrl4780)
				}
			} else {
				yyv4780 = make([]LimitRangeItem, yyrl4780)
			}
			yyc4780 = true
			yyrr4780 = len(yyv4780)
			if yyrg4780 {
				copy(yyv4780, yyv24780)
			}
		} else if yyl4780 != len(yyv4780) {
			yyv4780 = yyv4780[:yyl4780]
			yyc4780 = true
		}
		yyj4780 := 0
		for ; yyj4780 < yyrr4780; yyj4780++ {
			yyh4780.ElemContainerState(yyj4780)
			if r.TryDecodeAsNil() {
				yyv4780[yyj4780] = LimitRangeItem{}
			} else {
				yyv4781 := &yyv4780[yyj4780]
				yyv4781.CodecDecodeSelf(d)
			}

		}
		if yyrt4780 {
			for ; yyj4780 < yyl4780; yyj4780++ {
				yyv4780 = append(yyv4780, LimitRangeItem{})
				yyh4780.ElemContainerState(yyj4780)
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = LimitRangeItem{}
				} else {
					yyv4782 := &yyv4780[yyj4780]
					yyv4782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4780 := 0
		for ; !r.CheckBreak(); yyj4780++ {

			if yyj4780 >= len(yyv4780) {
				yyv4780 = append(yyv4780, LimitRangeItem{}) // var yyz4780 LimitRangeItem
				yyc4780 = true
			}
			yyh4780.ElemContainerState(yyj4780)
			if yyj4780 < len(yyv4780) {
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = LimitRangeItem{}
				} else {
					yyv4783 := &yyv4780[yyj4780]
					yyv4783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4780 < len(yyv4780) {
			yyv4780 = yyv4780[:yyj4780]
			yyc4780 = true
		} else if yyj4780 == 0 && yyv4780 == nil {
			yyv4780 = []LimitRangeItem{}
			yyc4780 = true
		}
	}
	yyh4780.End()
	if yyc4780 {
		*v = yyv4780
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4784 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4785 := &yyv4784
		yy4785.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4786 := *v
	yyh4786, yyl4786 := z.DecSliceHelperStart()
	var yyc4786 bool
	if yyl4786 == 0 {
		if yyv4786 == nil {
			yyv4786 = []LimitRange{}
			yyc4786 = true
		} else if len(yyv4786) != 0 {
			yyv4786 = yyv4786[:0]
			yyc4786 = true
		}
	} else if yyl4786 > 0 {
		var yyrr4786, yyrl4786 int
		var yyrt4786 bool
		if yyl4786 > cap(yyv4786) {

			yyrg4786 := len(yyv4786) > 0
			yyv24786 := yyv4786
			yyrl4786, yyrt4786 = z.DecInferLen(yyl4786, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4786 {
				if yyrl4786 <= cap(yyv4786) {
					yyv4786 = yyv4786[:yyrl4786]
				} else {
					yyv4786 = make([]LimitRange, yyrl4786)
				}
			} else {
				yyv4786 = make([]LimitRange, yyrl4786)
			}
			yyc4786 = true
			yyrr4786 = len(yyv4786)
			if yyrg4786 {
				copy(yyv4786, yyv24786)
			}
		} else if yyl4786 != len(yyv4786) {
			yyv4786 = yyv4786[:yyl4786]
			yyc4786 = true
		}
		yyj4786 := 0
		for ; yyj4786 < yyrr4786; yyj4786++ {
			yyh4786.ElemContainerState(yyj4786)
			if r.TryDecodeAsNil() {
				yyv4786[yyj4786] = LimitRange{}
			} else {
				yyv4787 := &yyv4786[yyj4786]
				yyv4787.CodecDecodeSelf(d)
			}

		}
		if yyrt4786 {
			for ; yyj4786 < yyl4786; yyj4786++ {
				yyv4786 = append(yyv4786, LimitRange{})
				yyh4786.ElemContainerState(yyj4786)
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = LimitRange{}
				} else {
					yyv4788 := &yyv4786[yyj4786]
					yyv4788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4786 := 0
		for ; !r.CheckBreak(); yyj4786++ {

			if yyj4786 >= len(yyv4786) {
				yyv4786 = append(yyv4786, LimitRange{}) // var yyz4786 LimitRange
				yyc4786 = true
			}
			yyh4786.ElemContainerState(yyj4786)
			if yyj4786 < len(yyv4786) {
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = LimitRange{}
				} else {
					yyv4789 := &yyv4786[yyj4786]
					yyv4789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4786 < len(yyv4786) {
			yyv4786 = yyv4786[:yyj4786]
			yyc4786 = true
		} else if yyj4786 == 0 && yyv4786 == nil {
			yyv4786 = []LimitRange{}
			yyc4786 = true
		}
	}
	yyh4786.End()
	if yyc4786 {
		*v = yyv4786
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4790 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4790.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4791 := *v
	yyh4791, yyl4791 := z.DecSliceHelperStart()
	var yyc4791 bool
	if yyl4791 == 0 {
		if yyv4791 == nil {
			yyv4791 = []ResourceQuotaScope{}
			yyc4791 = true
		} else if len(yyv4791) != 0 {
			yyv4791 = yyv4791[:0]
			yyc4791 = true
		}
	} else if yyl4791 > 0 {
		var yyrr4791, yyrl4791 int
		var yyrt4791 bool
		if yyl4791 > cap(yyv4791) {

			yyrl4791, yyrt4791 = z.DecInferLen(yyl4791, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4791 {
				if yyrl4791 <= cap(yyv4791) {
					yyv4791 = yyv4791[:yyrl4791]
				} else {
					yyv4791 = make([]ResourceQuotaScope, yyrl4791)
				}
			} else {
				yyv4791 = make([]ResourceQuotaScope, yyrl4791)
			}
			yyc4791 = true
			yyrr4791 = len(yyv4791)
		} else if yyl4791 != len(yyv4791) {
			yyv4791 = yyv4791[:yyl4791]
			yyc4791 = true
		}
		yyj4791 := 0
		for ; yyj4791 < yyrr4791; yyj4791++ {
			yyh4791.ElemContainerState(yyj4791)
			if r.TryDecodeAsNil() {
				yyv4791[yyj4791] = ""
			} else {
				yyv4791[yyj4791] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4791 {
			for ; yyj4791 < yyl4791; yyj4791++ {
				yyv4791 = append(yyv4791, "")
				yyh4791.ElemContainerState(yyj4791)
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = ""
				} else {
					yyv4791[yyj4791] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4791 := 0
		for ; !r.CheckBreak(); yyj4791++ {

			if yyj4791 >= len(yyv4791) {
				yyv4791 = append(yyv4791, "") // var yyz4791 ResourceQuotaScope
				yyc4791 = true
			}
			yyh4791.ElemContainerState(yyj4791)
			if yyj4791 < len(yyv4791) {
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = ""
				} else {
					yyv4791[yyj4791] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4791 < len(yyv4791) {
			yyv4791 = yyv4791[:yyj4791]
			yyc4791 = true
		} else if yyj4791 == 0 && yyv4791 == nil {
			yyv4791 = []ResourceQuotaScope{}
			yyc4791 = true
		}
	}
	yyh4791.End()
	if yyc4791 {
		*v = yyv4791
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4795 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4796 := &yyv4795
		yy4796.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4797 := *v
	yyh4797, yyl4797 := z.DecSliceHelperStart()
	var yyc4797 bool
	if yyl4797 == 0 {
		if yyv4797 == nil {
			yyv4797 = []ResourceQuota{}
			yyc4797 = true
		} else if len(yyv4797) != 0 {
			yyv4797 = yyv4797[:0]
			yyc4797 = true
		}
	} else if yyl4797 > 0 {
		var yyrr4797, yyrl4797 int
		var yyrt4797 bool
		if yyl4797 > cap(yyv4797) {

			yyrg4797 := len(yyv4797) > 0
			yyv24797 := yyv4797
			yyrl4797, yyrt4797 = z.DecInferLen(yyl4797, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4797 {
				if yyrl4797 <= cap(yyv4797) {
					yyv4797 = yyv4797[:yyrl4797]
				} else {
					yyv4797 = make([]ResourceQuota, yyrl4797)
				}
			} else {
				yyv4797 = make([]ResourceQuota, yyrl4797)
			}
			yyc4797 = true
			yyrr4797 = len(yyv4797)
			if yyrg4797 {
				copy(yyv4797, yyv24797)
			}
		} else if yyl4797 != len(yyv4797) {
			yyv4797 = yyv4797[:yyl4797]
			yyc4797 = true
		}
		yyj4797 := 0
		for ; yyj4797 < yyrr4797; yyj4797++ {
			yyh4797.ElemContainerState(yyj4797)
			if r.TryDecodeAsNil() {
				yyv4797[yyj4797] = ResourceQuota{}
			} else {
				yyv4798 := &yyv4797[yyj4797]
				yyv4798.CodecDecodeSelf(d)
			}

		}
		if yyrt4797 {
			for ; yyj4797 < yyl4797; yyj4797++ {
				yyv4797 = append(yyv4797, ResourceQuota{})
				yyh4797.ElemContainerState(yyj4797)
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = ResourceQuota{}
				} else {
					yyv4799 := &yyv4797[yyj4797]
					yyv4799.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4797 := 0
		for ; !r.CheckBreak(); yyj4797++ {

			if yyj4797 >= len(yyv4797) {
				yyv4797 = append(yyv4797, ResourceQuota{}) // var yyz4797 ResourceQuota
				yyc4797 = true
			}
			yyh4797.ElemContainerState(yyj4797)
			if yyj4797 < len(yyv4797) {
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = ResourceQuota{}
				} else {
					yyv4800 := &yyv4797[yyj4797]
					yyv4800.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4797 < len(yyv4797) {
			yyv4797 = yyv4797[:yyj4797]
			yyc4797 = true
		} else if yyj4797 == 0 && yyv4797 == nil {
			yyv4797 = []ResourceQuota{}
			yyc4797 = true
		}
	}
	yyh4797.End()
	if yyc4797 {
		*v = yyv4797
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4801, yyv4801 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4802 := z.EncBinary()
		_ = yym4802
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4801))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4801 == nil {
			r.EncodeNil()
		} else {
			yym4803 := z.EncBinary()
			_ = yym4803
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4801))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4804 := *v
	yyl4804 := r.ReadMapStart()
	yybh4804 := z.DecBasicHandle()
	if yyv4804 == nil {
		yyrl4804, _ := z.DecInferLen(yyl4804, yybh4804.MaxInitLen, 40)
		yyv4804 = make(map[string][]uint8, yyrl4804)
		*v = yyv4804
	}
	var yymk4804 string
	var yymv4804 []uint8
	var yymg4804 bool
	if yybh4804.MapValueReset {
		yymg4804 = true
	}
	if yyl4804 > 0 {
		for yyj4804 := 0; yyj4804 < yyl4804; yyj4804++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4804 = ""
			} else {
				yymk4804 = string(r.DecodeString())
			}

			if yymg4804 {
				yymv4804 = yyv4804[yymk4804]
			} else {
				yymv4804 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4804 = nil
			} else {
				yyv4806 := &yymv4804
				yym4807 := z.DecBinary()
				_ = yym4807
				if false {
				} else {
					*yyv4806 = r.DecodeBytes(*(*[]byte)(yyv4806), false, false)
				}
			}

			if yyv4804 != nil {
				yyv4804[yymk4804] = yymv4804
			}
		}
	} else if yyl4804 < 0 {
		for yyj4804 := 0; !r.CheckBreak(); yyj4804++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4804 = ""
			} else {
				yymk4804 = string(r.DecodeString())
			}

			if yymg4804 {
				yymv4804 = yyv4804[yymk4804]
			} else {
				yymv4804 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4804 = nil
			} else {
				yyv4809 := &yymv4804
				yym4810 := z.DecBinary()
				_ = yym4810
				if false {
				} else {
					*yyv4809 = r.DecodeBytes(*(*[]byte)(yyv4809), false, false)
				}
			}

			if yyv4804 != nil {
				yyv4804[yymk4804] = yymv4804
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4811 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4812 := &yyv4811
		yy4812.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4813 := *v
	yyh4813, yyl4813 := z.DecSliceHelperStart()
	var yyc4813 bool
	if yyl4813 == 0 {
		if yyv4813 == nil {
			yyv4813 = []Secret{}
			yyc4813 = true
		} else if len(yyv4813) != 0 {
			yyv4813 = yyv4813[:0]
			yyc4813 = true
		}
	} else if yyl4813 > 0 {
		var yyrr4813, yyrl4813 int
		var yyrt4813 bool
		if yyl4813 > cap(yyv4813) {

			yyrg4813 := len(yyv4813) > 0
			yyv24813 := yyv4813
			yyrl4813, yyrt4813 = z.DecInferLen(yyl4813, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4813 {
				if yyrl4813 <= cap(yyv4813) {
					yyv4813 = yyv4813[:yyrl4813]
				} else {
					yyv4813 = make([]Secret, yyrl4813)
				}
			} else {
				yyv4813 = make([]Secret, yyrl4813)
			}
			yyc4813 = true
			yyrr4813 = len(yyv4813)
			if yyrg4813 {
				copy(yyv4813, yyv24813)
			}
		} else if yyl4813 != len(yyv4813) {
			yyv4813 = yyv4813[:yyl4813]
			yyc4813 = true
		}
		yyj4813 := 0
		for ; yyj4813 < yyrr4813; yyj4813++ {
			yyh4813.ElemContainerState(yyj4813)
			if r.TryDecodeAsNil() {
				yyv4813[yyj4813] = Secret{}
			} else {
				yyv4814 := &yyv4813[yyj4813]
				yyv4814.CodecDecodeSelf(d)
			}

		}
		if yyrt4813 {
			for ; yyj4813 < yyl4813; yyj4813++ {
				yyv4813 = append(yyv4813, Secret{})
				yyh4813.ElemContainerState(yyj4813)
				if r.TryDecodeAsNil() {
					yyv4813[yyj4813] = Secret{}
				} else {
					yyv4815 := &yyv4813[yyj4813]
					yyv4815.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4813 := 0
		for ; !r.CheckBreak(); yyj4813++ {

			if yyj4813 >= len(yyv4813) {
				yyv4813 = append(yyv4813, Secret{}) // var yyz4813 Secret
				yyc4813 = true
			}
			yyh4813.ElemContainerState(yyj4813)
			if yyj4813 < len(yyv4813) {
				if r.TryDecodeAsNil() {
					yyv4813[yyj4813] = Secret{}
				} else {
					yyv4816 := &yyv4813[yyj4813]
					yyv4816.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4813 < len(yyv4813) {
			yyv4813 = yyv4813[:yyj4813]
			yyc4813 = true
		} else if yyj4813 == 0 && yyv4813 == nil {
			yyv4813 = []Secret{}
			yyc4813 = true
		}
	}
	yyh4813.End()
	if yyc4813 {
		*v = yyv4813
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4817 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4818 := &yyv4817
		yy4818.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4819 := *v
	yyh4819, yyl4819 := z.DecSliceHelperStart()
	var yyc4819 bool
	if yyl4819 == 0 {
		if yyv4819 == nil {
			yyv4819 = []ConfigMap{}
			yyc4819 = true
		} else if len(yyv4819) != 0 {
			yyv4819 = yyv4819[:0]
			yyc4819 = true
		}
	} else if yyl4819 > 0 {
		var yyrr4819, yyrl4819 int
		var yyrt4819 bool
		if yyl4819 > cap(yyv4819) {

			yyrg4819 := len(yyv4819) > 0
			yyv24819 := yyv4819
			yyrl4819, yyrt4819 = z.DecInferLen(yyl4819, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4819 {
				if yyrl4819 <= cap(yyv4819) {
					yyv4819 = yyv4819[:yyrl4819]
				} else {
					yyv4819 = make([]ConfigMap, yyrl4819)
				}
			} else {
				yyv4819 = make([]ConfigMap, yyrl4819)
			}
			yyc4819 = true
			yyrr4819 = len(yyv4819)
			if yyrg4819 {
				copy(yyv4819, yyv24819)
			}
		} else if yyl4819 != len(yyv4819) {
			yyv4819 = yyv4819[:yyl4819]
			yyc4819 = true
		}
		yyj4819 := 0
		for ; yyj4819 < yyrr4819; yyj4819++ {
			yyh4819.ElemContainerState(yyj4819)
			if r.TryDecodeAsNil() {
				yyv4819[yyj4819] = ConfigMap{}
			} else {
				yyv4820 := &yyv4819[yyj4819]
				yyv4820.CodecDecodeSelf(d)
			}

		}
		if yyrt4819 {
			for ; yyj4819 < yyl4819; yyj4819++ {
				yyv4819 = append(yyv4819, ConfigMap{})
				yyh4819.ElemContainerState(yyj4819)
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = ConfigMap{}
				} else {
					yyv4821 := &yyv4819[yyj4819]
					yyv4821.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4819 := 0
		for ; !r.CheckBreak(); yyj4819++ {

			if yyj4819 >= len(yyv4819) {
				yyv4819 = append(yyv4819, ConfigMap{}) // var yyz4819 ConfigMap
				yyc4819 = true
			}
			yyh4819.ElemContainerState(yyj4819)
			if yyj4819 < len(yyv4819) {
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = ConfigMap{}
				} else {
					yyv4822 := &yyv4819[yyj4819]
					yyv4822.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4819 < len(yyv4819) {
			yyv4819 = yyv4819[:yyj4819]
			yyc4819 = true
		} else if yyj4819 == 0 && yyv4819 == nil {
			yyv4819 = []ConfigMap{}
			yyc4819 = true
		}
	}
	yyh4819.End()
	if yyc4819 {
		*v = yyv4819
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4823 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4824 := &yyv4823
		yy4824.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4825 := *v
	yyh4825, yyl4825 := z.DecSliceHelperStart()
	var yyc4825 bool
	if yyl4825 == 0 {
		if yyv4825 == nil {
			yyv4825 = []ComponentCondition{}
			yyc4825 = true
		} else if len(yyv4825) != 0 {
			yyv4825 = yyv4825[:0]
			yyc4825 = true
		}
	} else if yyl4825 > 0 {
		var yyrr4825, yyrl4825 int
		var yyrt4825 bool
		if yyl4825 > cap(yyv4825) {

			yyrg4825 := len(yyv4825) > 0
			yyv24825 := yyv4825
			yyrl4825, yyrt4825 = z.DecInferLen(yyl4825, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4825 {
				if yyrl4825 <= cap(yyv4825) {
					yyv4825 = yyv4825[:yyrl4825]
				} else {
					yyv4825 = make([]ComponentCondition, yyrl4825)
				}
			} else {
				yyv4825 = make([]ComponentCondition, yyrl4825)
			}
			yyc4825 = true
			yyrr4825 = len(yyv4825)
			if yyrg4825 {
				copy(yyv4825, yyv24825)
			}
		} else if yyl4825 != len(yyv4825) {
			yyv4825 = yyv4825[:yyl4825]
			yyc4825 = true
		}
		yyj4825 := 0
		for ; yyj4825 < yyrr4825; yyj4825++ {
			yyh4825.ElemContainerState(yyj4825)
			if r.TryDecodeAsNil() {
				yyv4825[yyj4825] = ComponentCondition{}
			} else {
				yyv4826 := &yyv4825[yyj4825]
				yyv4826.CodecDecodeSelf(d)
			}

		}
		if yyrt4825 {
			for ; yyj4825 < yyl4825; yyj4825++ {
				yyv4825 = append(yyv4825, ComponentCondition{})
				yyh4825.ElemContainerState(yyj4825)
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = ComponentCondition{}
				} else {
					yyv4827 := &yyv4825[yyj4825]
					yyv4827.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4825 := 0
		for ; !r.CheckBreak(); yyj4825++ {

			if yyj4825 >= len(yyv4825) {
				yyv4825 = append(yyv4825, ComponentCondition{}) // var yyz4825 ComponentCondition
				yyc4825 = true
			}
			yyh4825.ElemContainerState(yyj4825)
			if yyj4825 < len(yyv4825) {
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = ComponentCondition{}
				} else {
					yyv4828 := &yyv4825[yyj4825]
					yyv4828.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4825 < len(yyv4825) {
			yyv4825 = yyv4825[:yyj4825]
			yyc4825 = true
		} else if yyj4825 == 0 && yyv4825 == nil {
			yyv4825 = []ComponentCondition{}
			yyc4825 = true
		}
	}
	yyh4825.End()
	if yyc4825 {
		*v = yyv4825
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4829 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4830 := &yyv4829
		yy4830.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4831 := *v
	yyh4831, yyl4831 := z.DecSliceHelperStart()
	var yyc4831 bool
	if yyl4831 == 0 {
		if yyv4831 == nil {
			yyv4831 = []ComponentStatus{}
			yyc4831 = true
		} else if len(yyv4831) != 0 {
			yyv4831 = yyv4831[:0]
			yyc4831 = true
		}
	} else if yyl4831 > 0 {
		var yyrr4831, yyrl4831 int
		var yyrt4831 bool
		if yyl4831 > cap(yyv4831) {

			yyrg4831 := len(yyv4831) > 0
			yyv24831 := yyv4831
			yyrl4831, yyrt4831 = z.DecInferLen(yyl4831, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4831 {
				if yyrl4831 <= cap(yyv4831) {
					yyv4831 = yyv4831[:yyrl4831]
				} else {
					yyv4831 = make([]ComponentStatus, yyrl4831)
				}
			} else {
				yyv4831 = make([]ComponentStatus, yyrl4831)
			}
			yyc4831 = true
			yyrr4831 = len(yyv4831)
			if yyrg4831 {
				copy(yyv4831, yyv24831)
			}
		} else if yyl4831 != len(yyv4831) {
			yyv4831 = yyv4831[:yyl4831]
			yyc4831 = true
		}
		yyj4831 := 0
		for ; yyj4831 < yyrr4831; yyj4831++ {
			yyh4831.ElemContainerState(yyj4831)
			if r.TryDecodeAsNil() {
				yyv4831[yyj4831] = ComponentStatus{}
			} else {
				yyv4832 := &yyv4831[yyj4831]
				yyv4832.CodecDecodeSelf(d)
			}

		}
		if yyrt4831 {
			for ; yyj4831 < yyl4831; yyj4831++ {
				yyv4831 = append(yyv4831, ComponentStatus{})
				yyh4831.ElemContainerState(yyj4831)
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = ComponentStatus{}
				} else {
					yyv4833 := &yyv4831[yyj4831]
					yyv4833.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4831 := 0
		for ; !r.CheckBreak(); yyj4831++ {

			if yyj4831 >= len(yyv4831) {
				yyv4831 = append(yyv4831, ComponentStatus{}) // var yyz4831 ComponentStatus
				yyc4831 = true
			}
			yyh4831.ElemContainerState(yyj4831)
			if yyj4831 < len(yyv4831) {
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = ComponentStatus{}
				} else {
					yyv4834 := &yyv4831[yyj4831]
					yyv4834.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4831 < len(yyv4831) {
			yyv4831 = yyv4831[:yyj4831]
			yyc4831 = true
		} else if yyj4831 == 0 && yyv4831 == nil {
			yyv4831 = []ComponentStatus{}
			yyc4831 = true
		}
	}
	yyh4831.End()
	if yyc4831 {
		*v = yyv4831
	}
}
