/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_util.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				var yynn195 int = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				var yynn234 int = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
			}
			if yyr234 || yy2arr234 {
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep234 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				var yynn524 int = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
			}
			if yyr524 || yy2arr524 {
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep524 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	if !yyhl539 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				var yynn550 int = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
			}
			if yyr550 || yy2arr550 {
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep550 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[3] = x.ReadOnly != false
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				var yynn581 int = 3
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
			}
			if yyr581 || yy2arr581 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy586 := *x.Lun
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeInt(int64(yy586))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy588 := *x.Lun
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(yy588))
					}
				}
			}
			if yyr581 || yy2arr581 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr581 || yy2arr581 {
				if yyq581[3] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep581 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		switch yys598 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv599 := &x.TargetWWNs
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					z.F.DecSliceStringX(yyv599, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	if !yyhl598 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv606 := &x.TargetWWNs
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			z.F.DecSliceStringX(yyv606, false, d)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [4]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[1] = x.FSType != ""
			yyq613[2] = x.Partition != 0
			yyq613[3] = x.ReadOnly != false
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(4)
			} else {
				var yynn613 int = 1
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
			}
			if yyr613 || yy2arr613 {
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep613 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		switch yys628 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	if !yyhl628 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [2]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(2)
			} else {
				var yynn639 int = 2
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
			}
			if yyr639 || yy2arr639 {
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr639 || yy2arr639 {
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		switch yys648 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	if !yyhl648 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj651 int
	var yyb651 bool
	var yyhl651 bool = l >= 0
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj651++
		if yyhl651 {
			yyb651 = yyj651 > l
		} else {
			yyb651 = r.CheckBreak()
		}
		if yyb651 {
			break
		}
		z.DecStructFieldNotFound(yyj651-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [1]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(1)
			} else {
				var yynn655 int = 1
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep655 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		switch yys661 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	if !yyhl661 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [3]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.ReadOnly != false
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(3)
			} else {
				var yynn666 int = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
			}
			if yyr666 || yy2arr666 {
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr666 || yy2arr666 {
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr666 || yy2arr666 {
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym676 := z.DecBinary()
	_ = yym676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl677 := r.ReadMapStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl677, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl677 := r.ReadArrayStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys678Slc
	var yyhl678 bool = l >= 0
	for yyj678 := 0; ; yyj678++ {
		if yyhl678 {
			if yyj678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys678Slc = r.DecodeBytes(yys678Slc, true, true)
		yys678 := string(yys678Slc)
		switch yys678 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys678)
		} // end switch yys678
	} // end for yyj678
	if !yyhl678 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[2] = x.ReadOnly != false
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				var yynn687 int = 2
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
			}
			if yyr687 || yy2arr687 {
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr687 || yy2arr687 {
				yym692 := z.EncBinary()
				_ = yym692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr687 || yy2arr687 {
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq687[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep687 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		switch yys699 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	if !yyhl699 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	r.ReadEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [8]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[2] = x.FSType != ""
			yyq708[7] = x.ReadOnly != false
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(8)
			} else {
				var yynn708 int = 6
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
			}
			if yyr708 || yy2arr708 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[2] {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq708[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym720 := z.EncBinary()
				_ = yym720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr708 || yy2arr708 {
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr708 || yy2arr708 {
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym726 := z.EncBinary()
				_ = yym726
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr708 || yy2arr708 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[7] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq708[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep708 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym731 := z.DecBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl732 := r.ReadMapStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl732, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl732 := r.ReadArrayStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys733Slc
	var yyhl733 bool = l >= 0
	for yyj733 := 0; ; yyj733++ {
		if yyhl733 {
			if yyj733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys733Slc = r.DecodeBytes(yys733Slc, true, true)
		yys733 := string(yys733Slc)
		switch yys733 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv734 := &x.CephMonitors
				yym735 := z.DecBinary()
				_ = yym735
				if false {
				} else {
					z.F.DecSliceStringX(yyv734, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys733)
		} // end switch yys733
	} // end for yyj733
	if !yyhl733 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj743 int
	var yyb743 bool
	var yyhl743 bool = l >= 0
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv744 := &x.CephMonitors
		yym745 := z.DecBinary()
		_ = yym745
		if false {
		} else {
			z.F.DecSliceStringX(yyv744, false, d)
		}
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj743++
		if yyhl743 {
			yyb743 = yyj743 > l
		} else {
			yyb743 = r.CheckBreak()
		}
		if yyb743 {
			break
		}
		z.DecStructFieldNotFound(yyj743-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [3]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[1] = x.FSType != ""
			yyq754[2] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(3)
			} else {
				var yynn754 int = 1
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[1] {
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq754[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[2] {
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl765 := r.ReadMapStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl765, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl765 := r.ReadArrayStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys766Slc
	var yyhl766 bool = l >= 0
	for yyj766 := 0; ; yyj766++ {
		if yyhl766 {
			if yyj766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys766Slc = r.DecodeBytes(yys766Slc, true, true)
		yys766 := string(yys766Slc)
		switch yys766 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys766)
		} // end switch yys766
	} // end for yyj766
	if !yyhl766 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj770 int
	var yyb770 bool
	var yyhl770 bool = l >= 0
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj770++
		if yyhl770 {
			yyb770 = yyj770 > l
		} else {
			yyb770 = r.CheckBreak()
		}
		if yyb770 {
			break
		}
		z.DecStructFieldNotFound(yyj770-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym774 := z.EncBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep775 := !z.EncBinary()
			yy2arr775 := z.EncBasicHandle().StructToArray
			var yyq775 [5]bool
			_, _, _ = yysep775, yyq775, yy2arr775
			const yyr775 bool = false
			yyq775[1] = x.User != ""
			yyq775[2] = x.SecretFile != ""
			yyq775[3] = x.SecretRef != nil
			yyq775[4] = x.ReadOnly != false
			if yyr775 || yy2arr775 {
				r.EncodeArrayStart(5)
			} else {
				var yynn775 int = 1
				for _, b := range yyq775 {
					if b {
						yynn775++
					}
				}
				r.EncodeMapStart(yynn775)
			}
			if yyr775 || yy2arr775 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[1] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[2] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq775[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[4] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq775[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep775 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		switch yys791 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv792 := &x.Monitors
				yym793 := z.DecBinary()
				_ = yym793
				if false {
				} else {
					z.F.DecSliceStringX(yyv792, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	if !yyhl791 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj798 int
	var yyb798 bool
	var yyhl798 bool = l >= 0
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv799 := &x.Monitors
		yym800 := z.DecBinary()
		_ = yym800
		if false {
		} else {
			z.F.DecSliceStringX(yyv799, false, d)
		}
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj798++
		if yyhl798 {
			yyb798 = yyj798 > l
		} else {
			yyb798 = r.CheckBreak()
		}
		if yyb798 {
			break
		}
		z.DecStructFieldNotFound(yyj798-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym805 := z.EncBinary()
		_ = yym805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep806 := !z.EncBinary()
			yy2arr806 := z.EncBasicHandle().StructToArray
			var yyq806 [1]bool
			_, _, _ = yysep806, yyq806, yy2arr806
			const yyr806 bool = false
			if yyr806 || yy2arr806 {
				r.EncodeArrayStart(1)
			} else {
				var yynn806 int = 1
				for _, b := range yyq806 {
					if b {
						yynn806++
					}
				}
				r.EncodeMapStart(yynn806)
			}
			if yyr806 || yy2arr806 {
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep806 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		switch yys812 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	if !yyhl812 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [1]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = len(x.Items) != 0
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn817 int = 0
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym819 := z.EncBinary()
						_ = yym819
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym820 := z.EncBinary()
						_ = yym820
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		switch yys823 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv824 := &x.Items
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	if !yyhl823 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj826 int
	var yyb826 bool
	var yyhl826 bool = l >= 0
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv827 := &x.Items
		yym828 := z.DecBinary()
		_ = yym828
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv827), d)
		}
	}
	for {
		yyj826++
		if yyhl826 {
			yyb826 = yyj826 > l
		} else {
			yyb826 = r.CheckBreak()
		}
		if yyb826 {
			break
		}
		z.DecStructFieldNotFound(yyj826-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym829 := z.EncBinary()
		_ = yym829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep830 := !z.EncBinary()
			yy2arr830 := z.EncBasicHandle().StructToArray
			var yyq830 [2]bool
			_, _, _ = yysep830, yyq830, yy2arr830
			const yyr830 bool = false
			if yyr830 || yy2arr830 {
				r.EncodeArrayStart(2)
			} else {
				var yynn830 int = 2
				for _, b := range yyq830 {
					if b {
						yynn830++
					}
				}
				r.EncodeMapStart(yynn830)
			}
			if yyr830 || yy2arr830 {
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr830 || yy2arr830 {
				yy835 := &x.FieldRef
				yy835.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy836 := &x.FieldRef
				yy836.CodecEncodeSelf(e)
			}
			if yysep830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		switch yys839 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv841 := &x.FieldRef
				yyv841.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	if !yyhl839 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj842 int
	var yyb842 bool
	var yyhl842 bool = l >= 0
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv844 := &x.FieldRef
		yyv844.CodecDecodeSelf(d)
	}
	for {
		yyj842++
		if yyhl842 {
			yyb842 = yyj842 > l
		} else {
			yyb842 = r.CheckBreak()
		}
		if yyb842 {
			break
		}
		z.DecStructFieldNotFound(yyj842-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [5]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[0] = x.Name != ""
			yyq846[1] = x.HostPort != 0
			yyq846[3] = x.Protocol != ""
			yyq846[4] = x.HostIP != ""
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(5)
			} else {
				var yynn846 int = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				if yyq846[0] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[4] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		switch yys862 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	if !yyhl862 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj868 int
	var yyb868 bool
	var yyhl868 bool = l >= 0
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj868++
		if yyhl868 {
			yyb868 = yyj868 > l
		} else {
			yyb868 = r.CheckBreak()
		}
		if yyb868 {
			break
		}
		z.DecStructFieldNotFound(yyj868-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [3]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[1] = x.ReadOnly != false
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(3)
			} else {
				var yynn875 int = 2
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
			}
			if yyr875 || yy2arr875 {
				yym877 := z.EncBinary()
				_ = yym877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym878 := z.EncBinary()
				_ = yym878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr875 || yy2arr875 {
				if yyq875[1] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq875[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr875 || yy2arr875 {
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep875 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		switch yys887 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	if !yyhl887 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj891 int
	var yyb891 bool
	var yyhl891 bool = l >= 0
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj891++
		if yyhl891 {
			yyb891 = yyj891 > l
		} else {
			yyb891 = r.CheckBreak()
		}
		if yyb891 {
			break
		}
		z.DecStructFieldNotFound(yyj891-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [3]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			yyq896[1] = x.Value != ""
			yyq896[2] = x.ValueFrom != nil
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(3)
			} else {
				var yynn896 int = 1
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
			}
			if yyr896 || yy2arr896 {
				yym898 := z.EncBinary()
				_ = yym898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym899 := z.EncBinary()
				_ = yym899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[1] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq896[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		switch yys906 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	if !yyhl906 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj910 int
	var yyb910 bool
	var yyhl910 bool = l >= 0
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj910++
		if yyhl910 {
			yyb910 = yyj910 > l
		} else {
			yyb910 = r.CheckBreak()
		}
		if yyb910 {
			break
		}
		z.DecStructFieldNotFound(yyj910-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [1]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(1)
			} else {
				var yynn915 int = 1
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
			}
			if yyr915 || yy2arr915 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep915 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		switch yys919 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	if !yyhl919 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym923 := z.EncBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep924 := !z.EncBinary()
			yy2arr924 := z.EncBasicHandle().StructToArray
			var yyq924 [2]bool
			_, _, _ = yysep924, yyq924, yy2arr924
			const yyr924 bool = false
			if yyr924 || yy2arr924 {
				r.EncodeArrayStart(2)
			} else {
				var yynn924 int = 2
				for _, b := range yyq924 {
					if b {
						yynn924++
					}
				}
				r.EncodeMapStart(yynn924)
			}
			if yyr924 || yy2arr924 {
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr924 || yy2arr924 {
				yym929 := z.EncBinary()
				_ = yym929
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep924 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym931 := z.DecBinary()
	_ = yym931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl932 := r.ReadMapStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl932, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl932 := r.ReadArrayStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys933Slc
	var yyhl933 bool = l >= 0
	for yyj933 := 0; ; yyj933++ {
		if yyhl933 {
			if yyj933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys933Slc = r.DecodeBytes(yys933Slc, true, true)
		yys933 := string(yys933Slc)
		switch yys933 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys933)
		} // end switch yys933
	} // end for yyj933
	if !yyhl933 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj936 int
	var yyb936 bool
	var yyhl936 bool = l >= 0
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj936++
		if yyhl936 {
			yyb936 = yyj936 > l
		} else {
			yyb936 = r.CheckBreak()
		}
		if yyb936 {
			break
		}
		z.DecStructFieldNotFound(yyj936-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym939 := z.EncBinary()
		_ = yym939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep940 := !z.EncBinary()
			yy2arr940 := z.EncBasicHandle().StructToArray
			var yyq940 [4]bool
			_, _, _ = yysep940, yyq940, yy2arr940
			const yyr940 bool = false
			yyq940[0] = x.Path != ""
			yyq940[1] = true
			yyq940[2] = x.Host != ""
			yyq940[3] = x.Scheme != ""
			if yyr940 || yy2arr940 {
				r.EncodeArrayStart(4)
			} else {
				var yynn940 int = 0
				for _, b := range yyq940 {
					if b {
						yynn940++
					}
				}
				r.EncodeMapStart(yynn940)
			}
			if yyr940 || yy2arr940 {
				if yyq940[0] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[1] {
					yy945 := &x.Port
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy945) {
					} else if !yym946 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy945)
					} else {
						z.EncFallback(yy945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq940[1] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy947 := &x.Port
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy947) {
					} else if !yym948 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy947)
					} else {
						z.EncFallback(yy947)
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[2] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep940 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl954 := r.ReadMapStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl954 := r.ReadArrayStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys955Slc
	var yyhl955 bool = l >= 0
	for yyj955 := 0; ; yyj955++ {
		if yyhl955 {
			if yyj955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys955Slc = r.DecodeBytes(yys955Slc, true, true)
		yys955 := string(yys955Slc)
		switch yys955 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv957 := &x.Port
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv957) {
				} else if !yym958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv957)
				} else {
					z.DecFallback(yyv957, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys955)
		} // end switch yys955
	} // end for yyj955
	if !yyhl955 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv963 := &x.Port
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else if !yym964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv963)
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym967 := z.EncBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym969 := z.EncBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep970 := !z.EncBinary()
			yy2arr970 := z.EncBasicHandle().StructToArray
			var yyq970 [1]bool
			_, _, _ = yysep970, yyq970, yy2arr970
			const yyr970 bool = false
			yyq970[0] = true
			if yyr970 || yy2arr970 {
				r.EncodeArrayStart(1)
			} else {
				var yynn970 int = 0
				for _, b := range yyq970 {
					if b {
						yynn970++
					}
				}
				r.EncodeMapStart(yynn970)
			}
			if yyr970 || yy2arr970 {
				if yyq970[0] {
					yy972 := &x.Port
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else if z.HasExtensions() && z.EncExt(yy972) {
					} else if !yym973 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy972)
					} else {
						z.EncFallback(yy972)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[0] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy974 := &x.Port
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy974) {
					} else if !yym975 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy974)
					} else {
						z.EncFallback(yy974)
					}
				}
			}
			if yysep970 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		switch yys978 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv979 := &x.Port
				yym980 := z.DecBinary()
				_ = yym980
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv979) {
				} else if !yym980 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv979)
				} else {
					z.DecFallback(yyv979, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	if !yyhl978 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv982 := &x.Port
		yym983 := z.DecBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv982) {
		} else if !yym983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv982)
		} else {
			z.DecFallback(yyv982, false)
		}
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [1]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = len(x.Command) != 0
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(1)
			} else {
				var yynn985 int = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
			}
			if yyr985 || yy2arr985 {
				if yyq985[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym989 := z.DecBinary()
	_ = yym989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl990 := r.ReadMapStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl990, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl990 := r.ReadArrayStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys991Slc
	var yyhl991 bool = l >= 0
	for yyj991 := 0; ; yyj991++ {
		if yyhl991 {
			if yyj991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys991Slc = r.DecodeBytes(yys991Slc, true, true)
		yys991 := string(yys991Slc)
		switch yys991 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv992 := &x.Command
				yym993 := z.DecBinary()
				_ = yym993
				if false {
				} else {
					z.F.DecSliceStringX(yyv992, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys991)
		} // end switch yys991
	} // end for yyj991
	if !yyhl991 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv995 := &x.Command
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			z.F.DecSliceStringX(yyv995, false, d)
		}
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [5]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq998[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq998[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq998[3] = x.InitialDelaySeconds != 0
			yyq998[4] = x.TimeoutSeconds != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(5)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			var yyn999 bool
			if x.Handler.Exec == nil {
				yyn999 = true
				goto LABEL999
			}
		LABEL999:
			if yyr998 || yy2arr998 {
				if yyn999 {
					r.EncodeNil()
				} else {
					if yyq998[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn999 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1000 bool
			if x.Handler.HTTPGet == nil {
				yyn1000 = true
				goto LABEL1000
			}
		LABEL1000:
			if yyr998 || yy2arr998 {
				if yyn1000 {
					r.EncodeNil()
				} else {
					if yyq998[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn1000 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1001 bool
			if x.Handler.TCPSocket == nil {
				yyn1001 = true
				goto LABEL1001
			}
		LABEL1001:
			if yyr998 || yy2arr998 {
				if yyn1001 {
					r.EncodeNil()
				} else {
					if yyq998[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn1001 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[3] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[4] {
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1008 := z.DecBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1009 := r.ReadMapStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1009 := r.ReadArrayStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1010Slc
	var yyhl1010 bool = l >= 0
	for yyj1010 := 0; ; yyj1010++ {
		if yyhl1010 {
			if yyj1010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1010Slc = r.DecodeBytes(yys1010Slc, true, true)
		yys1010 := string(yys1010Slc)
		switch yys1010 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1010)
		} // end switch yys1010
	} // end for yyj1010
	if !yyhl1010 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1016 int
	var yyb1016 bool
	var yyhl1016 bool = l >= 0
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj1016++
		if yyhl1016 {
			yyb1016 = yyj1016 > l
		} else {
			yyb1016 = r.CheckBreak()
		}
		if yyb1016 {
			break
		}
		z.DecStructFieldNotFound(yyj1016-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1022 := z.EncBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1024 := z.EncBinary()
	_ = yym1024
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1026 := z.EncBinary()
		_ = yym1026
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1027 := !z.EncBinary()
			yy2arr1027 := z.EncBasicHandle().StructToArray
			var yyq1027 [2]bool
			_, _, _ = yysep1027, yyq1027, yy2arr1027
			const yyr1027 bool = false
			yyq1027[0] = len(x.Add) != 0
			yyq1027[1] = len(x.Drop) != 0
			if yyr1027 || yy2arr1027 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1027 int = 0
				for _, b := range yyq1027 {
					if b {
						yynn1027++
					}
				}
				r.EncodeMapStart(yynn1027)
			}
			if yyr1027 || yy2arr1027 {
				if yyq1027[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1027[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1030 := z.EncBinary()
						_ = yym1030
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1027 || yy2arr1027 {
				if yyq1027[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1032 := z.EncBinary()
						_ = yym1032
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1027[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1027 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1034 := z.DecBinary()
	_ = yym1034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1035 := r.ReadMapStart()
			if yyl1035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1035, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1035 := r.ReadArrayStart()
			if yyl1035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1036Slc
	var yyhl1036 bool = l >= 0
	for yyj1036 := 0; ; yyj1036++ {
		if yyhl1036 {
			if yyj1036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1036Slc = r.DecodeBytes(yys1036Slc, true, true)
		yys1036 := string(yys1036Slc)
		switch yys1036 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1037 := &x.Add
				yym1038 := z.DecBinary()
				_ = yym1038
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1037), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1039 := &x.Drop
				yym1040 := z.DecBinary()
				_ = yym1040
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1039), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1036)
		} // end switch yys1036
	} // end for yyj1036
	if !yyhl1036 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1041 int
	var yyb1041 bool
	var yyhl1041 bool = l >= 0
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1042 := &x.Add
		yym1043 := z.DecBinary()
		_ = yym1043
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1042), d)
		}
	}
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1044 := &x.Drop
		yym1045 := z.DecBinary()
		_ = yym1045
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1044), d)
		}
	}
	for {
		yyj1041++
		if yyhl1041 {
			yyb1041 = yyj1041 > l
		} else {
			yyb1041 = r.CheckBreak()
		}
		if yyb1041 {
			break
		}
		z.DecStructFieldNotFound(yyj1041-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [2]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[0] = len(x.Limits) != 0
			yyq1047[1] = len(x.Requests) != 0
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1047 int = 0
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
			}
			if yyr1047 || yy2arr1047 {
				if yyq1047[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				if yyq1047[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1047 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1051 := r.ReadMapStart()
			if yyl1051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1051, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1051 := r.ReadArrayStart()
			if yyl1051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1052Slc
	var yyhl1052 bool = l >= 0
	for yyj1052 := 0; ; yyj1052++ {
		if yyhl1052 {
			if yyj1052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1052Slc = r.DecodeBytes(yys1052Slc, true, true)
		yys1052 := string(yys1052Slc)
		switch yys1052 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1053 := &x.Limits
				yyv1053.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1054 := &x.Requests
				yyv1054.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1052)
		} // end switch yys1052
	} // end for yyj1052
	if !yyhl1052 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1055 int
	var yyb1055 bool
	var yyhl1055 bool = l >= 0
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1056 := &x.Limits
		yyv1056.CodecDecodeSelf(d)
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1057 := &x.Requests
		yyv1057.CodecDecodeSelf(d)
	}
	for {
		yyj1055++
		if yyhl1055 {
			yyb1055 = yyj1055 > l
		} else {
			yyb1055 = r.CheckBreak()
		}
		if yyb1055 {
			break
		}
		z.DecStructFieldNotFound(yyj1055-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [18]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[2] = len(x.Command) != 0
			yyq1059[3] = len(x.Args) != 0
			yyq1059[4] = x.WorkingDir != ""
			yyq1059[5] = len(x.Ports) != 0
			yyq1059[6] = len(x.Env) != 0
			yyq1059[7] = true
			yyq1059[8] = len(x.VolumeMounts) != 0
			yyq1059[9] = x.LivenessProbe != nil
			yyq1059[10] = x.ReadinessProbe != nil
			yyq1059[11] = x.Lifecycle != nil
			yyq1059[12] = x.TerminationMessagePath != ""
			yyq1059[14] = x.SecurityContext != nil
			yyq1059[15] = x.Stdin != false
			yyq1059[16] = x.StdinOnce != false
			yyq1059[17] = x.TTY != false
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1059 int = 3
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
			}
			if yyr1059 || yy2arr1059 {
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1059 || yy2arr1059 {
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1068 := z.EncBinary()
						_ = yym1068
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1071 := z.EncBinary()
						_ = yym1071
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[4] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1077 := z.EncBinary()
						_ = yym1077
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[7] {
					yy1082 := &x.Resources
					yy1082.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1083 := &x.Resources
					yy1083.CodecEncodeSelf(e)
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1085 := z.EncBinary()
						_ = yym1085
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[12] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[15] {
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[16] {
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1100 := z.EncBinary()
					_ = yym1100
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[17] {
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1059 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1104 := z.DecBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1105 := r.ReadMapStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1105, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1105 := r.ReadArrayStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1106Slc
	var yyhl1106 bool = l >= 0
	for yyj1106 := 0; ; yyj1106++ {
		if yyhl1106 {
			if yyj1106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1106Slc = r.DecodeBytes(yys1106Slc, true, true)
		yys1106 := string(yys1106Slc)
		switch yys1106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1109 := &x.Command
				yym1110 := z.DecBinary()
				_ = yym1110
				if false {
				} else {
					z.F.DecSliceStringX(yyv1109, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1111 := &x.Args
				yym1112 := z.DecBinary()
				_ = yym1112
				if false {
				} else {
					z.F.DecSliceStringX(yyv1111, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1114 := &x.Ports
				yym1115 := z.DecBinary()
				_ = yym1115
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1114), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1116 := &x.Env
				yym1117 := z.DecBinary()
				_ = yym1117
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1116), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1118 := &x.Resources
				yyv1118.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1119 := &x.VolumeMounts
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1119), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1106)
		} // end switch yys1106
	} // end for yyj1106
	if !yyhl1106 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1133 := &x.Command
		yym1134 := z.DecBinary()
		_ = yym1134
		if false {
		} else {
			z.F.DecSliceStringX(yyv1133, false, d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1135 := &x.Args
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			z.F.DecSliceStringX(yyv1135, false, d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1138 := &x.Ports
		yym1139 := z.DecBinary()
		_ = yym1139
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1138), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1140 := &x.Env
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1140), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1142 := &x.Resources
		yyv1142.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1143 := &x.VolumeMounts
		yym1144 := z.DecBinary()
		_ = yym1144
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1143), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [3]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Exec != nil
			yyq1155[1] = x.HTTPGet != nil
			yyq1155[2] = x.TCPSocket != nil
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		switch yys1161 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	if !yyhl1161 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1165 int
	var yyb1165 bool
	var yyhl1165 bool = l >= 0
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1165++
		if yyhl1165 {
			yyb1165 = yyj1165 > l
		} else {
			yyb1165 = r.CheckBreak()
		}
		if yyb1165 {
			break
		}
		z.DecStructFieldNotFound(yyj1165-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1169 := z.EncBinary()
		_ = yym1169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1170 := !z.EncBinary()
			yy2arr1170 := z.EncBasicHandle().StructToArray
			var yyq1170 [2]bool
			_, _, _ = yysep1170, yyq1170, yy2arr1170
			const yyr1170 bool = false
			yyq1170[0] = x.PostStart != nil
			yyq1170[1] = x.PreStop != nil
			if yyr1170 || yy2arr1170 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1170 int = 0
				for _, b := range yyq1170 {
					if b {
						yynn1170++
					}
				}
				r.EncodeMapStart(yynn1170)
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1170 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1173 := z.DecBinary()
	_ = yym1173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1174 := r.ReadMapStart()
			if yyl1174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1174, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1174 := r.ReadArrayStart()
			if yyl1174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1175Slc
	var yyhl1175 bool = l >= 0
	for yyj1175 := 0; ; yyj1175++ {
		if yyhl1175 {
			if yyj1175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1175Slc = r.DecodeBytes(yys1175Slc, true, true)
		yys1175 := string(yys1175Slc)
		switch yys1175 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1175)
		} // end switch yys1175
	} // end for yyj1175
	if !yyhl1175 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1178 int
	var yyb1178 bool
	var yyhl1178 bool = l >= 0
	yyj1178++
	if yyhl1178 {
		yyb1178 = yyj1178 > l
	} else {
		yyb1178 = r.CheckBreak()
	}
	if yyb1178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1178++
	if yyhl1178 {
		yyb1178 = yyj1178 > l
	} else {
		yyb1178 = r.CheckBreak()
	}
	if yyb1178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1178++
		if yyhl1178 {
			yyb1178 = yyj1178 > l
		} else {
			yyb1178 = r.CheckBreak()
		}
		if yyb1178 {
			break
		}
		z.DecStructFieldNotFound(yyj1178-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1181 := z.EncBinary()
	_ = yym1181
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1182 := z.DecBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1183 := z.EncBinary()
		_ = yym1183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1184 := !z.EncBinary()
			yy2arr1184 := z.EncBasicHandle().StructToArray
			var yyq1184 [2]bool
			_, _, _ = yysep1184, yyq1184, yy2arr1184
			const yyr1184 bool = false
			yyq1184[0] = x.Reason != ""
			yyq1184[1] = x.Message != ""
			if yyr1184 || yy2arr1184 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1184 int = 0
				for _, b := range yyq1184 {
					if b {
						yynn1184++
					}
				}
				r.EncodeMapStart(yynn1184)
			}
			if yyr1184 || yy2arr1184 {
				if yyq1184[0] {
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1184[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1184 || yy2arr1184 {
				if yyq1184[1] {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1184[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1184 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1191 := z.DecBinary()
	_ = yym1191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1192 := r.ReadMapStart()
			if yyl1192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1192, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1192 := r.ReadArrayStart()
			if yyl1192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1193Slc
	var yyhl1193 bool = l >= 0
	for yyj1193 := 0; ; yyj1193++ {
		if yyhl1193 {
			if yyj1193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1193Slc = r.DecodeBytes(yys1193Slc, true, true)
		yys1193 := string(yys1193Slc)
		switch yys1193 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1193)
		} // end switch yys1193
	} // end for yyj1193
	if !yyhl1193 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1199 := z.EncBinary()
		_ = yym1199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1200 := !z.EncBinary()
			yy2arr1200 := z.EncBasicHandle().StructToArray
			var yyq1200 [1]bool
			_, _, _ = yysep1200, yyq1200, yy2arr1200
			const yyr1200 bool = false
			yyq1200[0] = true
			if yyr1200 || yy2arr1200 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1200 int = 0
				for _, b := range yyq1200 {
					if b {
						yynn1200++
					}
				}
				r.EncodeMapStart(yynn1200)
			}
			if yyr1200 || yy2arr1200 {
				if yyq1200[0] {
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1200[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1204 := &x.StartedAt
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1204) {
					} else if yym1205 {
						z.EncBinaryMarshal(yy1204)
					} else if !yym1205 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1204)
					} else {
						z.EncFallback(yy1204)
					}
				}
			}
			if yysep1200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		switch yys1208 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1209 := &x.StartedAt
				yym1210 := z.DecBinary()
				_ = yym1210
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1209) {
				} else if yym1210 {
					z.DecBinaryUnmarshal(yyv1209)
				} else if !yym1210 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1209)
				} else {
					z.DecFallback(yyv1209, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	if !yyhl1208 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1212 := &x.StartedAt
		yym1213 := z.DecBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1212) {
		} else if yym1213 {
			z.DecBinaryUnmarshal(yyv1212)
		} else if !yym1213 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1212)
		} else {
			z.DecFallback(yyv1212, false)
		}
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [7]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[1] = x.Signal != 0
			yyq1215[2] = x.Reason != ""
			yyq1215[3] = x.Message != ""
			yyq1215[4] = true
			yyq1215[5] = true
			yyq1215[6] = x.ContainerID != ""
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1215 int = 1
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
			}
			if yyr1215 || yy2arr1215 {
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1218 := z.EncBinary()
				_ = yym1218
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[1] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1215[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[2] {
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[3] {
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[4] {
					yy1229 := &x.StartedAt
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else if yym1230 {
						z.EncBinaryMarshal(yy1229)
					} else if !yym1230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1229)
					} else {
						z.EncFallback(yy1229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1231 := &x.StartedAt
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1231) {
					} else if yym1232 {
						z.EncBinaryMarshal(yy1231)
					} else if !yym1232 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1231)
					} else {
						z.EncFallback(yy1231)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[5] {
					yy1234 := &x.FinishedAt
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1234) {
					} else if yym1235 {
						z.EncBinaryMarshal(yy1234)
					} else if !yym1235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1234)
					} else {
						z.EncFallback(yy1234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1236 := &x.FinishedAt
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1236) {
					} else if yym1237 {
						z.EncBinaryMarshal(yy1236)
					} else if !yym1237 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1236)
					} else {
						z.EncFallback(yy1236)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[6] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1215 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1241 := z.DecBinary()
	_ = yym1241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1242 := r.ReadMapStart()
			if yyl1242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1242 := r.ReadArrayStart()
			if yyl1242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1243Slc
	var yyhl1243 bool = l >= 0
	for yyj1243 := 0; ; yyj1243++ {
		if yyhl1243 {
			if yyj1243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1243Slc = r.DecodeBytes(yys1243Slc, true, true)
		yys1243 := string(yys1243Slc)
		switch yys1243 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1248 := &x.StartedAt
				yym1249 := z.DecBinary()
				_ = yym1249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1248) {
				} else if yym1249 {
					z.DecBinaryUnmarshal(yyv1248)
				} else if !yym1249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1248)
				} else {
					z.DecFallback(yyv1248, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1250 := &x.FinishedAt
				yym1251 := z.DecBinary()
				_ = yym1251
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1250) {
				} else if yym1251 {
					z.DecBinaryUnmarshal(yyv1250)
				} else if !yym1251 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1250)
				} else {
					z.DecFallback(yyv1250, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1243)
		} // end switch yys1243
	} // end for yyj1243
	if !yyhl1243 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1253 int
	var yyb1253 bool
	var yyhl1253 bool = l >= 0
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1258 := &x.StartedAt
		yym1259 := z.DecBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1258) {
		} else if yym1259 {
			z.DecBinaryUnmarshal(yyv1258)
		} else if !yym1259 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1258)
		} else {
			z.DecFallback(yyv1258, false)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1260 := &x.FinishedAt
		yym1261 := z.DecBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1260) {
		} else if yym1261 {
			z.DecBinaryUnmarshal(yyv1260)
		} else if !yym1261 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1260)
		} else {
			z.DecFallback(yyv1260, false)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1253++
		if yyhl1253 {
			yyb1253 = yyj1253 > l
		} else {
			yyb1253 = r.CheckBreak()
		}
		if yyb1253 {
			break
		}
		z.DecStructFieldNotFound(yyj1253-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1263 := z.EncBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1264 := !z.EncBinary()
			yy2arr1264 := z.EncBasicHandle().StructToArray
			var yyq1264 [3]bool
			_, _, _ = yysep1264, yyq1264, yy2arr1264
			const yyr1264 bool = false
			yyq1264[0] = x.Waiting != nil
			yyq1264[1] = x.Running != nil
			yyq1264[2] = x.Terminated != nil
			if yyr1264 || yy2arr1264 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1264 int = 0
				for _, b := range yyq1264 {
					if b {
						yynn1264++
					}
				}
				r.EncodeMapStart(yynn1264)
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1264 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1268 := z.DecBinary()
	_ = yym1268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1269 := r.ReadMapStart()
			if yyl1269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1269 := r.ReadArrayStart()
			if yyl1269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1270Slc
	var yyhl1270 bool = l >= 0
	for yyj1270 := 0; ; yyj1270++ {
		if yyhl1270 {
			if yyj1270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1270Slc = r.DecodeBytes(yys1270Slc, true, true)
		yys1270 := string(yys1270Slc)
		switch yys1270 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1270)
		} // end switch yys1270
	} // end for yyj1270
	if !yyhl1270 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1274 int
	var yyb1274 bool
	var yyhl1274 bool = l >= 0
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1274++
		if yyhl1274 {
			yyb1274 = yyj1274 > l
		} else {
			yyb1274 = r.CheckBreak()
		}
		if yyb1274 {
			break
		}
		z.DecStructFieldNotFound(yyj1274-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1278 := z.EncBinary()
		_ = yym1278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1279 := !z.EncBinary()
			yy2arr1279 := z.EncBasicHandle().StructToArray
			var yyq1279 [8]bool
			_, _, _ = yysep1279, yyq1279, yy2arr1279
			const yyr1279 bool = false
			yyq1279[1] = true
			yyq1279[2] = true
			yyq1279[7] = x.ContainerID != ""
			if yyr1279 || yy2arr1279 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1279 int = 5
				for _, b := range yyq1279 {
					if b {
						yynn1279++
					}
				}
				r.EncodeMapStart(yynn1279)
			}
			if yyr1279 || yy2arr1279 {
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[1] {
					yy1284 := &x.State
					yy1284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1285 := &x.State
					yy1285.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[2] {
					yy1287 := &x.LastTerminationState
					yy1287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1288 := &x.LastTerminationState
					yy1288.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1300 := z.EncBinary()
				_ = yym1300
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[7] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1279[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1279 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1305 := r.ReadMapStart()
			if yyl1305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1305, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1305 := r.ReadArrayStart()
			if yyl1305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1306Slc
	var yyhl1306 bool = l >= 0
	for yyj1306 := 0; ; yyj1306++ {
		if yyhl1306 {
			if yyj1306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1306Slc = r.DecodeBytes(yys1306Slc, true, true)
		yys1306 := string(yys1306Slc)
		switch yys1306 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1308 := &x.State
				yyv1308.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1309 := &x.LastTerminationState
				yyv1309.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1306)
		} // end switch yys1306
	} // end for yyj1306
	if !yyhl1306 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1317 := &x.State
		yyv1317.CodecDecodeSelf(d)
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1318 := &x.LastTerminationState
		yyv1318.CodecDecodeSelf(d)
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1324 := z.EncBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1326 := z.EncBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1327 := z.DecBinary()
	_ = yym1327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1328 := z.EncBinary()
		_ = yym1328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1329 := !z.EncBinary()
			yy2arr1329 := z.EncBasicHandle().StructToArray
			var yyq1329 [6]bool
			_, _, _ = yysep1329, yyq1329, yy2arr1329
			const yyr1329 bool = false
			yyq1329[2] = true
			yyq1329[3] = true
			yyq1329[4] = x.Reason != ""
			yyq1329[5] = x.Message != ""
			if yyr1329 || yy2arr1329 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1329 int = 2
				for _, b := range yyq1329 {
					if b {
						yynn1329++
					}
				}
				r.EncodeMapStart(yynn1329)
			}
			if yyr1329 || yy2arr1329 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1329 || yy2arr1329 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[2] {
					yy1333 := &x.LastProbeTime
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1333) {
					} else if yym1334 {
						z.EncBinaryMarshal(yy1333)
					} else if !yym1334 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1333)
					} else {
						z.EncFallback(yy1333)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1329[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1335 := &x.LastProbeTime
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1335) {
					} else if yym1336 {
						z.EncBinaryMarshal(yy1335)
					} else if !yym1336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1335)
					} else {
						z.EncFallback(yy1335)
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[3] {
					yy1338 := &x.LastTransitionTime
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1338) {
					} else if yym1339 {
						z.EncBinaryMarshal(yy1338)
					} else if !yym1339 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1338)
					} else {
						z.EncFallback(yy1338)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1329[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1340 := &x.LastTransitionTime
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1340) {
					} else if yym1341 {
						z.EncBinaryMarshal(yy1340)
					} else if !yym1341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1340)
					} else {
						z.EncFallback(yy1340)
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[4] {
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1329[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1344 := z.EncBinary()
					_ = yym1344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[5] {
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1329[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1348 := z.DecBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1349 := r.ReadMapStart()
			if yyl1349 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1349, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1349 := r.ReadArrayStart()
			if yyl1349 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1350Slc
	var yyhl1350 bool = l >= 0
	for yyj1350 := 0; ; yyj1350++ {
		if yyhl1350 {
			if yyj1350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1350Slc = r.DecodeBytes(yys1350Slc, true, true)
		yys1350 := string(yys1350Slc)
		switch yys1350 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1353 := &x.LastProbeTime
				yym1354 := z.DecBinary()
				_ = yym1354
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1353) {
				} else if yym1354 {
					z.DecBinaryUnmarshal(yyv1353)
				} else if !yym1354 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1353)
				} else {
					z.DecFallback(yyv1353, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1355 := &x.LastTransitionTime
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1355) {
				} else if yym1356 {
					z.DecBinaryUnmarshal(yyv1355)
				} else if !yym1356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1355)
				} else {
					z.DecFallback(yyv1355, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1350)
		} // end switch yys1350
	} // end for yyj1350
	if !yyhl1350 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1362 := &x.LastProbeTime
		yym1363 := z.DecBinary()
		_ = yym1363
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1362) {
		} else if yym1363 {
			z.DecBinaryUnmarshal(yyv1362)
		} else if !yym1363 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1362)
		} else {
			z.DecFallback(yyv1362, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1364 := &x.LastTransitionTime
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1364) {
		} else if yym1365 {
			z.DecBinaryUnmarshal(yyv1364)
		} else if !yym1365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1364)
		} else {
			z.DecFallback(yyv1364, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1368 := z.EncBinary()
	_ = yym1368
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1369 := z.DecBinary()
	_ = yym1369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1370 := z.EncBinary()
		_ = yym1370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1371 := !z.EncBinary()
			yy2arr1371 := z.EncBasicHandle().StructToArray
			var yyq1371 [4]bool
			_, _, _ = yysep1371, yyq1371, yy2arr1371
			const yyr1371 bool = false
			yyq1371[0] = x.Kind != ""
			yyq1371[1] = x.APIVersion != ""
			yyq1371[2] = true
			if yyr1371 || yy2arr1371 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1371 int = 1
				for _, b := range yyq1371 {
					if b {
						yynn1371++
					}
				}
				r.EncodeMapStart(yynn1371)
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[0] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[1] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[2] {
					yy1379 := &x.ListMeta
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1379) {
					} else {
						z.EncFallback(yy1379)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1371[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1381 := &x.ListMeta
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1381) {
					} else {
						z.EncFallback(yy1381)
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1371 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1386 := z.DecBinary()
	_ = yym1386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1387 := r.ReadMapStart()
			if yyl1387 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1387, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1387 := r.ReadArrayStart()
			if yyl1387 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1388Slc
	var yyhl1388 bool = l >= 0
	for yyj1388 := 0; ; yyj1388++ {
		if yyhl1388 {
			if yyj1388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1388Slc = r.DecodeBytes(yys1388Slc, true, true)
		yys1388 := string(yys1388Slc)
		switch yys1388 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1391 := &x.ListMeta
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1391) {
				} else {
					z.DecFallback(yyv1391, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1393 := &x.Items
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1393), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1388)
		} // end switch yys1388
	} // end for yyj1388
	if !yyhl1388 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1395 int
	var yyb1395 bool
	var yyhl1395 bool = l >= 0
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1398 := &x.ListMeta
		yym1399 := z.DecBinary()
		_ = yym1399
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1398) {
		} else {
			z.DecFallback(yyv1398, false)
		}
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1400 := &x.Items
		yym1401 := z.DecBinary()
		_ = yym1401
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1400), d)
		}
	}
	for {
		yyj1395++
		if yyhl1395 {
			yyb1395 = yyj1395 > l
		} else {
			yyb1395 = r.CheckBreak()
		}
		if yyb1395 {
			break
		}
		z.DecStructFieldNotFound(yyj1395-1, "")
	}
	r.ReadEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1402 := z.EncBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1403 := z.DecBinary()
	_ = yym1403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1404 := z.EncBinary()
		_ = yym1404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1405 := !z.EncBinary()
			yy2arr1405 := z.EncBasicHandle().StructToArray
			var yyq1405 [11]bool
			_, _, _ = yysep1405, yyq1405, yy2arr1405
			const yyr1405 bool = false
			yyq1405[2] = x.RestartPolicy != ""
			yyq1405[3] = x.TerminationGracePeriodSeconds != nil
			yyq1405[4] = x.ActiveDeadlineSeconds != nil
			yyq1405[5] = x.DNSPolicy != ""
			yyq1405[6] = len(x.NodeSelector) != 0
			yyq1405[8] = x.NodeName != ""
			yyq1405[9] = x.SecurityContext != nil
			yyq1405[10] = len(x.ImagePullSecrets) != 0
			if yyr1405 || yy2arr1405 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1405 int = 3
				for _, b := range yyq1405 {
					if b {
						yynn1405++
					}
				}
				r.EncodeMapStart(yynn1405)
			}
			if yyr1405 || yy2arr1405 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1414 := *x.TerminationGracePeriodSeconds
						yym1415 := z.EncBinary()
						_ = yym1415
						if false {
						} else {
							r.EncodeInt(int64(yy1414))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1416 := *x.TerminationGracePeriodSeconds
						yym1417 := z.EncBinary()
						_ = yym1417
						if false {
						} else {
							r.EncodeInt(int64(yy1416))
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1419 := *x.ActiveDeadlineSeconds
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							r.EncodeInt(int64(yy1419))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1421 := *x.ActiveDeadlineSeconds
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							r.EncodeInt(int64(yy1421))
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1425 := z.EncBinary()
						_ = yym1425
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1426 := z.EncBinary()
						_ = yym1426
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[8] {
					yym1431 := z.EncBinary()
					_ = yym1431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[8] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[9] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1435 := z.EncBinary()
						_ = yym1435
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[10] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1436 := z.EncBinary()
						_ = yym1436
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1405 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1437 := z.DecBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1438 := r.ReadMapStart()
			if yyl1438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1438, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1438 := r.ReadArrayStart()
			if yyl1438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1439Slc
	var yyhl1439 bool = l >= 0
	for yyj1439 := 0; ; yyj1439++ {
		if yyhl1439 {
			if yyj1439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1439Slc = r.DecodeBytes(yys1439Slc, true, true)
		yys1439 := string(yys1439Slc)
		switch yys1439 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1440 := &x.Volumes
				yym1441 := z.DecBinary()
				_ = yym1441
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1440), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1442 := &x.Containers
				yym1443 := z.DecBinary()
				_ = yym1443
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1442), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1446 := z.DecBinary()
				_ = yym1446
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1448 := z.DecBinary()
				_ = yym1448
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1450 := &x.NodeSelector
				yym1451 := z.DecBinary()
				_ = yym1451
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1450, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1455 := &x.ImagePullSecrets
				yym1456 := z.DecBinary()
				_ = yym1456
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1439)
		} // end switch yys1439
	} // end for yyj1439
	if !yyhl1439 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1457 int
	var yyb1457 bool
	var yyhl1457 bool = l >= 0
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1458 := &x.Volumes
		yym1459 := z.DecBinary()
		_ = yym1459
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1458), d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1460 := &x.Containers
		yym1461 := z.DecBinary()
		_ = yym1461
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1460), d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1466 := z.DecBinary()
		_ = yym1466
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1468 := &x.NodeSelector
		yym1469 := z.DecBinary()
		_ = yym1469
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1468, false, d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1473 := &x.ImagePullSecrets
		yym1474 := z.DecBinary()
		_ = yym1474
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1473), d)
		}
	}
	for {
		yyj1457++
		if yyhl1457 {
			yyb1457 = yyj1457 > l
		} else {
			yyb1457 = r.CheckBreak()
		}
		if yyb1457 {
			break
		}
		z.DecStructFieldNotFound(yyj1457-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1475 := z.EncBinary()
		_ = yym1475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1476 := !z.EncBinary()
			yy2arr1476 := z.EncBasicHandle().StructToArray
			var yyq1476 [8]bool
			_, _, _ = yysep1476, yyq1476, yy2arr1476
			const yyr1476 bool = false
			yyq1476[0] = x.HostNetwork != false
			yyq1476[1] = x.HostPID != false
			yyq1476[2] = x.HostIPC != false
			yyq1476[3] = x.SELinuxOptions != nil
			yyq1476[4] = x.RunAsUser != nil
			yyq1476[5] = x.RunAsNonRoot != nil
			yyq1476[6] = len(x.SupplementalGroups) != 0
			yyq1476[7] = x.FSGroup != nil
			if yyr1476 || yy2arr1476 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1476 int = 0
				for _, b := range yyq1476 {
					if b {
						yynn1476++
					}
				}
				r.EncodeMapStart(yynn1476)
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[0] {
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[1] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[2] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[3] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1488 := *x.RunAsUser
						yym1489 := z.EncBinary()
						_ = yym1489
						if false {
						} else {
							r.EncodeInt(int64(yy1488))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1490 := *x.RunAsUser
						yym1491 := z.EncBinary()
						_ = yym1491
						if false {
						} else {
							r.EncodeInt(int64(yy1490))
						}
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1493 := *x.RunAsNonRoot
						yym1494 := z.EncBinary()
						_ = yym1494
						if false {
						} else {
							r.EncodeBool(bool(yy1493))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[5] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1495 := *x.RunAsNonRoot
						yym1496 := z.EncBinary()
						_ = yym1496
						if false {
						} else {
							r.EncodeBool(bool(yy1495))
						}
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[6] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1501 := *x.FSGroup
						yym1502 := z.EncBinary()
						_ = yym1502
						if false {
						} else {
							r.EncodeInt(int64(yy1501))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[7] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1503 := *x.FSGroup
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else {
							r.EncodeInt(int64(yy1503))
						}
					}
				}
			}
			if yysep1476 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1505 := z.DecBinary()
	_ = yym1505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1506 := r.ReadMapStart()
			if yyl1506 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1506, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1506 := r.ReadArrayStart()
			if yyl1506 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1507Slc
	var yyhl1507 bool = l >= 0
	for yyj1507 := 0; ; yyj1507++ {
		if yyhl1507 {
			if yyj1507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1507Slc = r.DecodeBytes(yys1507Slc, true, true)
		yys1507 := string(yys1507Slc)
		switch yys1507 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1513 := z.DecBinary()
				_ = yym1513
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1515 := z.DecBinary()
				_ = yym1515
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1516 := &x.SupplementalGroups
				yym1517 := z.DecBinary()
				_ = yym1517
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1516, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1507)
		} // end switch yys1507
	} // end for yyj1507
	if !yyhl1507 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1528 := z.DecBinary()
		_ = yym1528
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1529 := &x.SupplementalGroups
		yym1530 := z.DecBinary()
		_ = yym1530
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1529, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1532 := z.DecBinary()
		_ = yym1532
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1533 := z.EncBinary()
		_ = yym1533
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1534 := !z.EncBinary()
			yy2arr1534 := z.EncBasicHandle().StructToArray
			var yyq1534 [8]bool
			_, _, _ = yysep1534, yyq1534, yy2arr1534
			const yyr1534 bool = false
			yyq1534[0] = x.Phase != ""
			yyq1534[1] = len(x.Conditions) != 0
			yyq1534[2] = x.Message != ""
			yyq1534[3] = x.Reason != ""
			yyq1534[4] = x.HostIP != ""
			yyq1534[5] = x.PodIP != ""
			yyq1534[6] = x.StartTime != nil
			yyq1534[7] = len(x.ContainerStatuses) != 0
			if yyr1534 || yy2arr1534 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1534 int = 0
				for _, b := range yyq1534 {
					if b {
						yynn1534++
					}
				}
				r.EncodeMapStart(yynn1534)
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1534[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1537 := z.EncBinary()
						_ = yym1537
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1534[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[2] {
					yym1540 := z.EncBinary()
					_ = yym1540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1534[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[3] {
					yym1543 := z.EncBinary()
					_ = yym1543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1534[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[4] {
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1534[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[5] {
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1534[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1552 := z.EncBinary()
						_ = yym1552
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1552 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1552 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1534[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1553 := z.EncBinary()
						_ = yym1553
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1553 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1553 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1534 || yy2arr1534 {
				if yyq1534[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1555 := z.EncBinary()
						_ = yym1555
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1534[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1556 := z.EncBinary()
						_ = yym1556
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1534 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1557 := z.DecBinary()
	_ = yym1557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1558 := r.ReadMapStart()
			if yyl1558 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1558, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1558 := r.ReadArrayStart()
			if yyl1558 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1558, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1559Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1559Slc
	var yyhl1559 bool = l >= 0
	for yyj1559 := 0; ; yyj1559++ {
		if yyhl1559 {
			if yyj1559 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1559Slc = r.DecodeBytes(yys1559Slc, true, true)
		yys1559 := string(yys1559Slc)
		switch yys1559 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1561 := &x.Conditions
				yym1562 := z.DecBinary()
				_ = yym1562
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1561), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1568 := z.DecBinary()
				_ = yym1568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1568 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1568 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1569 := &x.ContainerStatuses
				yym1570 := z.DecBinary()
				_ = yym1570
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1569), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1559)
		} // end switch yys1559
	} // end for yyj1559
	if !yyhl1559 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1571 int
	var yyb1571 bool
	var yyhl1571 bool = l >= 0
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1573 := &x.Conditions
		yym1574 := z.DecBinary()
		_ = yym1574
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1573), d)
		}
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1580 := z.DecBinary()
		_ = yym1580
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1580 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1580 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1571++
	if yyhl1571 {
		yyb1571 = yyj1571 > l
	} else {
		yyb1571 = r.CheckBreak()
	}
	if yyb1571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1581 := &x.ContainerStatuses
		yym1582 := z.DecBinary()
		_ = yym1582
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1581), d)
		}
	}
	for {
		yyj1571++
		if yyhl1571 {
			yyb1571 = yyj1571 > l
		} else {
			yyb1571 = r.CheckBreak()
		}
		if yyb1571 {
			break
		}
		z.DecStructFieldNotFound(yyj1571-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1583 := z.EncBinary()
		_ = yym1583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1584 := !z.EncBinary()
			yy2arr1584 := z.EncBasicHandle().StructToArray
			var yyq1584 [4]bool
			_, _, _ = yysep1584, yyq1584, yy2arr1584
			const yyr1584 bool = false
			yyq1584[0] = x.Kind != ""
			yyq1584[1] = x.APIVersion != ""
			yyq1584[2] = true
			yyq1584[3] = true
			if yyr1584 || yy2arr1584 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1584 int = 0
				for _, b := range yyq1584 {
					if b {
						yynn1584++
					}
				}
				r.EncodeMapStart(yynn1584)
			}
			if yyr1584 || yy2arr1584 {
				if yyq1584[0] {
					yym1586 := z.EncBinary()
					_ = yym1586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1584[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				if yyq1584[1] {
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1584[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				if yyq1584[2] {
					yy1592 := &x.ObjectMeta
					yy1592.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1593 := &x.ObjectMeta
					yy1593.CodecEncodeSelf(e)
				}
			}
			if yyr1584 || yy2arr1584 {
				if yyq1584[3] {
					yy1595 := &x.Status
					yy1595.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1596 := &x.Status
					yy1596.CodecEncodeSelf(e)
				}
			}
			if yysep1584 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1597 := z.DecBinary()
	_ = yym1597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1598 := r.ReadMapStart()
			if yyl1598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1598, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1598 := r.ReadArrayStart()
			if yyl1598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1599Slc
	var yyhl1599 bool = l >= 0
	for yyj1599 := 0; ; yyj1599++ {
		if yyhl1599 {
			if yyj1599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1599Slc = r.DecodeBytes(yys1599Slc, true, true)
		yys1599 := string(yys1599Slc)
		switch yys1599 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1602 := &x.ObjectMeta
				yyv1602.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1603 := &x.Status
				yyv1603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1599)
		} // end switch yys1599
	} // end for yyj1599
	if !yyhl1599 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1604 int
	var yyb1604 bool
	var yyhl1604 bool = l >= 0
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1607 := &x.ObjectMeta
		yyv1607.CodecDecodeSelf(d)
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1608 := &x.Status
		yyv1608.CodecDecodeSelf(d)
	}
	for {
		yyj1604++
		if yyhl1604 {
			yyb1604 = yyj1604 > l
		} else {
			yyb1604 = r.CheckBreak()
		}
		if yyb1604 {
			break
		}
		z.DecStructFieldNotFound(yyj1604-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1609 := z.EncBinary()
		_ = yym1609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1610 := !z.EncBinary()
			yy2arr1610 := z.EncBasicHandle().StructToArray
			var yyq1610 [5]bool
			_, _, _ = yysep1610, yyq1610, yy2arr1610
			const yyr1610 bool = false
			yyq1610[0] = x.Kind != ""
			yyq1610[1] = x.APIVersion != ""
			yyq1610[2] = true
			yyq1610[3] = true
			yyq1610[4] = true
			if yyr1610 || yy2arr1610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1610 int = 0
				for _, b := range yyq1610 {
					if b {
						yynn1610++
					}
				}
				r.EncodeMapStart(yynn1610)
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[0] {
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[1] {
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[2] {
					yy1618 := &x.ObjectMeta
					yy1618.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1619 := &x.ObjectMeta
					yy1619.CodecEncodeSelf(e)
				}
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[3] {
					yy1621 := &x.Spec
					yy1621.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1622 := &x.Spec
					yy1622.CodecEncodeSelf(e)
				}
			}
			if yyr1610 || yy2arr1610 {
				if yyq1610[4] {
					yy1624 := &x.Status
					yy1624.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1625 := &x.Status
					yy1625.CodecEncodeSelf(e)
				}
			}
			if yysep1610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1626 := z.DecBinary()
	_ = yym1626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1627 := r.ReadMapStart()
			if yyl1627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1627, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1627 := r.ReadArrayStart()
			if yyl1627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1628Slc
	var yyhl1628 bool = l >= 0
	for yyj1628 := 0; ; yyj1628++ {
		if yyhl1628 {
			if yyj1628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1628Slc = r.DecodeBytes(yys1628Slc, true, true)
		yys1628 := string(yys1628Slc)
		switch yys1628 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1631 := &x.ObjectMeta
				yyv1631.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1632 := &x.Spec
				yyv1632.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1633 := &x.Status
				yyv1633.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1628)
		} // end switch yys1628
	} // end for yyj1628
	if !yyhl1628 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1634 int
	var yyb1634 bool
	var yyhl1634 bool = l >= 0
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1637 := &x.ObjectMeta
		yyv1637.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1638 := &x.Spec
		yyv1638.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1639 := &x.Status
		yyv1639.CodecDecodeSelf(d)
	}
	for {
		yyj1634++
		if yyhl1634 {
			yyb1634 = yyj1634 > l
		} else {
			yyb1634 = r.CheckBreak()
		}
		if yyb1634 {
			break
		}
		z.DecStructFieldNotFound(yyj1634-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1640 := z.EncBinary()
		_ = yym1640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1641 := !z.EncBinary()
			yy2arr1641 := z.EncBasicHandle().StructToArray
			var yyq1641 [2]bool
			_, _, _ = yysep1641, yyq1641, yy2arr1641
			const yyr1641 bool = false
			yyq1641[0] = true
			yyq1641[1] = true
			if yyr1641 || yy2arr1641 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1641 int = 0
				for _, b := range yyq1641 {
					if b {
						yynn1641++
					}
				}
				r.EncodeMapStart(yynn1641)
			}
			if yyr1641 || yy2arr1641 {
				if yyq1641[0] {
					yy1643 := &x.ObjectMeta
					yy1643.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1641[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1644 := &x.ObjectMeta
					yy1644.CodecEncodeSelf(e)
				}
			}
			if yyr1641 || yy2arr1641 {
				if yyq1641[1] {
					yy1646 := &x.Spec
					yy1646.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1641[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1647 := &x.Spec
					yy1647.CodecEncodeSelf(e)
				}
			}
			if yysep1641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1648 := z.DecBinary()
	_ = yym1648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1649 := r.ReadMapStart()
			if yyl1649 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1649, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1649 := r.ReadArrayStart()
			if yyl1649 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1650Slc
	var yyhl1650 bool = l >= 0
	for yyj1650 := 0; ; yyj1650++ {
		if yyhl1650 {
			if yyj1650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1650Slc = r.DecodeBytes(yys1650Slc, true, true)
		yys1650 := string(yys1650Slc)
		switch yys1650 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1651 := &x.ObjectMeta
				yyv1651.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1652 := &x.Spec
				yyv1652.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1650)
		} // end switch yys1650
	} // end for yyj1650
	if !yyhl1650 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1653 int
	var yyb1653 bool
	var yyhl1653 bool = l >= 0
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1654 := &x.ObjectMeta
		yyv1654.CodecDecodeSelf(d)
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1655 := &x.Spec
		yyv1655.CodecDecodeSelf(d)
	}
	for {
		yyj1653++
		if yyhl1653 {
			yyb1653 = yyj1653 > l
		} else {
			yyb1653 = r.CheckBreak()
		}
		if yyb1653 {
			break
		}
		z.DecStructFieldNotFound(yyj1653-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1656 := z.EncBinary()
		_ = yym1656
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1657 := !z.EncBinary()
			yy2arr1657 := z.EncBasicHandle().StructToArray
			var yyq1657 [4]bool
			_, _, _ = yysep1657, yyq1657, yy2arr1657
			const yyr1657 bool = false
			yyq1657[0] = x.Kind != ""
			yyq1657[1] = x.APIVersion != ""
			yyq1657[2] = true
			yyq1657[3] = true
			if yyr1657 || yy2arr1657 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1657 int = 0
				for _, b := range yyq1657 {
					if b {
						yynn1657++
					}
				}
				r.EncodeMapStart(yynn1657)
			}
			if yyr1657 || yy2arr1657 {
				if yyq1657[0] {
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1657[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1657 || yy2arr1657 {
				if yyq1657[1] {
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1657[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1657 || yy2arr1657 {
				if yyq1657[2] {
					yy1665 := &x.ObjectMeta
					yy1665.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1657[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1666 := &x.ObjectMeta
					yy1666.CodecEncodeSelf(e)
				}
			}
			if yyr1657 || yy2arr1657 {
				if yyq1657[3] {
					yy1668 := &x.Template
					yy1668.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1657[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1669 := &x.Template
					yy1669.CodecEncodeSelf(e)
				}
			}
			if yysep1657 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1670 := z.DecBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1671 := r.ReadMapStart()
			if yyl1671 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1671, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1671 := r.ReadArrayStart()
			if yyl1671 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1672Slc
	var yyhl1672 bool = l >= 0
	for yyj1672 := 0; ; yyj1672++ {
		if yyhl1672 {
			if yyj1672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1672Slc = r.DecodeBytes(yys1672Slc, true, true)
		yys1672 := string(yys1672Slc)
		switch yys1672 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1675 := &x.ObjectMeta
				yyv1675.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1676 := &x.Template
				yyv1676.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1672)
		} // end switch yys1672
	} // end for yyj1672
	if !yyhl1672 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1680 := &x.ObjectMeta
		yyv1680.CodecDecodeSelf(d)
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1681 := &x.Template
		yyv1681.CodecDecodeSelf(d)
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1682 := z.EncBinary()
		_ = yym1682
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1683 := !z.EncBinary()
			yy2arr1683 := z.EncBasicHandle().StructToArray
			var yyq1683 [4]bool
			_, _, _ = yysep1683, yyq1683, yy2arr1683
			const yyr1683 bool = false
			yyq1683[0] = x.Kind != ""
			yyq1683[1] = x.APIVersion != ""
			yyq1683[2] = true
			if yyr1683 || yy2arr1683 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1683 int = 1
				for _, b := range yyq1683 {
					if b {
						yynn1683++
					}
				}
				r.EncodeMapStart(yynn1683)
			}
			if yyr1683 || yy2arr1683 {
				if yyq1683[0] {
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1683[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1683 || yy2arr1683 {
				if yyq1683[1] {
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1683[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1683 || yy2arr1683 {
				if yyq1683[2] {
					yy1691 := &x.ListMeta
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1691) {
					} else {
						z.EncFallback(yy1691)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1683[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1693 := &x.ListMeta
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1693) {
					} else {
						z.EncFallback(yy1693)
					}
				}
			}
			if yyr1683 || yy2arr1683 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1683 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1698 := z.DecBinary()
	_ = yym1698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1699 := r.ReadMapStart()
			if yyl1699 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1699, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1699 := r.ReadArrayStart()
			if yyl1699 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1700Slc
	var yyhl1700 bool = l >= 0
	for yyj1700 := 0; ; yyj1700++ {
		if yyhl1700 {
			if yyj1700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1700Slc = r.DecodeBytes(yys1700Slc, true, true)
		yys1700 := string(yys1700Slc)
		switch yys1700 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1703 := &x.ListMeta
				yym1704 := z.DecBinary()
				_ = yym1704
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1703) {
				} else {
					z.DecFallback(yyv1703, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1705 := &x.Items
				yym1706 := z.DecBinary()
				_ = yym1706
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1705), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1700)
		} // end switch yys1700
	} // end for yyj1700
	if !yyhl1700 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1707 int
	var yyb1707 bool
	var yyhl1707 bool = l >= 0
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1710 := &x.ListMeta
		yym1711 := z.DecBinary()
		_ = yym1711
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1710) {
		} else {
			z.DecFallback(yyv1710, false)
		}
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1712 := &x.Items
		yym1713 := z.DecBinary()
		_ = yym1713
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1712), d)
		}
	}
	for {
		yyj1707++
		if yyhl1707 {
			yyb1707 = yyj1707 > l
		} else {
			yyb1707 = r.CheckBreak()
		}
		if yyb1707 {
			break
		}
		z.DecStructFieldNotFound(yyj1707-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1714 := z.EncBinary()
		_ = yym1714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1715 := !z.EncBinary()
			yy2arr1715 := z.EncBasicHandle().StructToArray
			var yyq1715 [3]bool
			_, _, _ = yysep1715, yyq1715, yy2arr1715
			const yyr1715 bool = false
			yyq1715[2] = x.Template != nil
			if yyr1715 || yy2arr1715 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1715 int = 2
				for _, b := range yyq1715 {
					if b {
						yynn1715++
					}
				}
				r.EncodeMapStart(yynn1715)
			}
			if yyr1715 || yy2arr1715 {
				yym1717 := z.EncBinary()
				_ = yym1717
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1718 := z.EncBinary()
				_ = yym1718
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1715 || yy2arr1715 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1720 := z.EncBinary()
					_ = yym1720
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1715 || yy2arr1715 {
				if yyq1715[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1715[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1715 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1723 := z.DecBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1724 := r.ReadMapStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1724, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1724 := r.ReadArrayStart()
			if yyl1724 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1725Slc
	var yyhl1725 bool = l >= 0
	for yyj1725 := 0; ; yyj1725++ {
		if yyhl1725 {
			if yyj1725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1725Slc = r.DecodeBytes(yys1725Slc, true, true)
		yys1725 := string(yys1725Slc)
		switch yys1725 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1727 := &x.Selector
				yym1728 := z.DecBinary()
				_ = yym1728
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1727, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1725)
		} // end switch yys1725
	} // end for yyj1725
	if !yyhl1725 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1730 int
	var yyb1730 bool
	var yyhl1730 bool = l >= 0
	yyj1730++
	if yyhl1730 {
		yyb1730 = yyj1730 > l
	} else {
		yyb1730 = r.CheckBreak()
	}
	if yyb1730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1730++
	if yyhl1730 {
		yyb1730 = yyj1730 > l
	} else {
		yyb1730 = r.CheckBreak()
	}
	if yyb1730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1732 := &x.Selector
		yym1733 := z.DecBinary()
		_ = yym1733
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1732, false, d)
		}
	}
	yyj1730++
	if yyhl1730 {
		yyb1730 = yyj1730 > l
	} else {
		yyb1730 = r.CheckBreak()
	}
	if yyb1730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1730++
		if yyhl1730 {
			yyb1730 = yyj1730 > l
		} else {
			yyb1730 = r.CheckBreak()
		}
		if yyb1730 {
			break
		}
		z.DecStructFieldNotFound(yyj1730-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1735 := z.EncBinary()
		_ = yym1735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1736 := !z.EncBinary()
			yy2arr1736 := z.EncBasicHandle().StructToArray
			var yyq1736 [2]bool
			_, _, _ = yysep1736, yyq1736, yy2arr1736
			const yyr1736 bool = false
			yyq1736[1] = x.ObservedGeneration != 0
			if yyr1736 || yy2arr1736 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1736 int = 1
				for _, b := range yyq1736 {
					if b {
						yynn1736++
					}
				}
				r.EncodeMapStart(yynn1736)
			}
			if yyr1736 || yy2arr1736 {
				yym1738 := z.EncBinary()
				_ = yym1738
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1739 := z.EncBinary()
				_ = yym1739
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1736 || yy2arr1736 {
				if yyq1736[1] {
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1736[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1736 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1743 := z.DecBinary()
	_ = yym1743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1744 := r.ReadMapStart()
			if yyl1744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1744 := r.ReadArrayStart()
			if yyl1744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1745Slc
	var yyhl1745 bool = l >= 0
	for yyj1745 := 0; ; yyj1745++ {
		if yyhl1745 {
			if yyj1745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1745Slc = r.DecodeBytes(yys1745Slc, true, true)
		yys1745 := string(yys1745Slc)
		switch yys1745 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1745)
		} // end switch yys1745
	} // end for yyj1745
	if !yyhl1745 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1748 int
	var yyb1748 bool
	var yyhl1748 bool = l >= 0
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1748++
		if yyhl1748 {
			yyb1748 = yyj1748 > l
		} else {
			yyb1748 = r.CheckBreak()
		}
		if yyb1748 {
			break
		}
		z.DecStructFieldNotFound(yyj1748-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1751 := z.EncBinary()
		_ = yym1751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1752 := !z.EncBinary()
			yy2arr1752 := z.EncBasicHandle().StructToArray
			var yyq1752 [5]bool
			_, _, _ = yysep1752, yyq1752, yy2arr1752
			const yyr1752 bool = false
			yyq1752[0] = x.Kind != ""
			yyq1752[1] = x.APIVersion != ""
			yyq1752[2] = true
			yyq1752[3] = true
			yyq1752[4] = true
			if yyr1752 || yy2arr1752 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1752 int = 0
				for _, b := range yyq1752 {
					if b {
						yynn1752++
					}
				}
				r.EncodeMapStart(yynn1752)
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[0] {
					yym1754 := z.EncBinary()
					_ = yym1754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1752[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1755 := z.EncBinary()
					_ = yym1755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[1] {
					yym1757 := z.EncBinary()
					_ = yym1757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1752[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[2] {
					yy1760 := &x.ObjectMeta
					yy1760.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1761 := &x.ObjectMeta
					yy1761.CodecEncodeSelf(e)
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[3] {
					yy1763 := &x.Spec
					yy1763.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1764 := &x.Spec
					yy1764.CodecEncodeSelf(e)
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[4] {
					yy1766 := &x.Status
					yy1766.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1767 := &x.Status
					yy1767.CodecEncodeSelf(e)
				}
			}
			if yysep1752 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		switch yys1770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1773 := &x.ObjectMeta
				yyv1773.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1774 := &x.Spec
				yyv1774.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1775 := &x.Status
				yyv1775.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	if !yyhl1770 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1776 int
	var yyb1776 bool
	var yyhl1776 bool = l >= 0
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1779 := &x.ObjectMeta
		yyv1779.CodecDecodeSelf(d)
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1780 := &x.Spec
		yyv1780.CodecDecodeSelf(d)
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1781 := &x.Status
		yyv1781.CodecDecodeSelf(d)
	}
	for {
		yyj1776++
		if yyhl1776 {
			yyb1776 = yyj1776 > l
		} else {
			yyb1776 = r.CheckBreak()
		}
		if yyb1776 {
			break
		}
		z.DecStructFieldNotFound(yyj1776-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1782 := z.EncBinary()
		_ = yym1782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1783 := !z.EncBinary()
			yy2arr1783 := z.EncBasicHandle().StructToArray
			var yyq1783 [4]bool
			_, _, _ = yysep1783, yyq1783, yy2arr1783
			const yyr1783 bool = false
			yyq1783[0] = x.Kind != ""
			yyq1783[1] = x.APIVersion != ""
			yyq1783[2] = true
			if yyr1783 || yy2arr1783 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1783 int = 1
				for _, b := range yyq1783 {
					if b {
						yynn1783++
					}
				}
				r.EncodeMapStart(yynn1783)
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[0] {
					yym1785 := z.EncBinary()
					_ = yym1785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[1] {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[2] {
					yy1791 := &x.ListMeta
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1791) {
					} else {
						z.EncFallback(yy1791)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1793 := &x.ListMeta
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1793) {
					} else {
						z.EncFallback(yy1793)
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1783 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1798 := z.DecBinary()
	_ = yym1798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1799 := r.ReadMapStart()
			if yyl1799 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1799, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1799 := r.ReadArrayStart()
			if yyl1799 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1800Slc
	var yyhl1800 bool = l >= 0
	for yyj1800 := 0; ; yyj1800++ {
		if yyhl1800 {
			if yyj1800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1800Slc = r.DecodeBytes(yys1800Slc, true, true)
		yys1800 := string(yys1800Slc)
		switch yys1800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1803 := &x.ListMeta
				yym1804 := z.DecBinary()
				_ = yym1804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1803) {
				} else {
					z.DecFallback(yyv1803, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1805 := &x.Items
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1805), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1800)
		} // end switch yys1800
	} // end for yyj1800
	if !yyhl1800 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1807 int
	var yyb1807 bool
	var yyhl1807 bool = l >= 0
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1810 := &x.ListMeta
		yym1811 := z.DecBinary()
		_ = yym1811
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1810) {
		} else {
			z.DecFallback(yyv1810, false)
		}
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1812 := &x.Items
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1812), d)
		}
	}
	for {
		yyj1807++
		if yyhl1807 {
			yyb1807 = yyj1807 > l
		} else {
			yyb1807 = r.CheckBreak()
		}
		if yyb1807 {
			break
		}
		z.DecStructFieldNotFound(yyj1807-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1814 := z.EncBinary()
		_ = yym1814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1815 := !z.EncBinary()
			yy2arr1815 := z.EncBasicHandle().StructToArray
			var yyq1815 [4]bool
			_, _, _ = yysep1815, yyq1815, yy2arr1815
			const yyr1815 bool = false
			yyq1815[0] = x.Kind != ""
			yyq1815[1] = x.APIVersion != ""
			yyq1815[2] = true
			if yyr1815 || yy2arr1815 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1815 int = 1
				for _, b := range yyq1815 {
					if b {
						yynn1815++
					}
				}
				r.EncodeMapStart(yynn1815)
			}
			if yyr1815 || yy2arr1815 {
				if yyq1815[0] {
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1815[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1815 || yy2arr1815 {
				if yyq1815[1] {
					yym1820 := z.EncBinary()
					_ = yym1820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1815[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1815 || yy2arr1815 {
				if yyq1815[2] {
					yy1823 := &x.ListMeta
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1823) {
					} else {
						z.EncFallback(yy1823)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1815[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1825 := &x.ListMeta
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1825) {
					} else {
						z.EncFallback(yy1825)
					}
				}
			}
			if yyr1815 || yy2arr1815 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1829 := z.EncBinary()
					_ = yym1829
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1815 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1830 := z.DecBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1831 := r.ReadMapStart()
			if yyl1831 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1831, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1831 := r.ReadArrayStart()
			if yyl1831 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1832Slc
	var yyhl1832 bool = l >= 0
	for yyj1832 := 0; ; yyj1832++ {
		if yyhl1832 {
			if yyj1832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1832Slc = r.DecodeBytes(yys1832Slc, true, true)
		yys1832 := string(yys1832Slc)
		switch yys1832 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1835 := &x.ListMeta
				yym1836 := z.DecBinary()
				_ = yym1836
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1835) {
				} else {
					z.DecFallback(yyv1835, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1837 := &x.Items
				yym1838 := z.DecBinary()
				_ = yym1838
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1837), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1832)
		} // end switch yys1832
	} // end for yyj1832
	if !yyhl1832 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1839 int
	var yyb1839 bool
	var yyhl1839 bool = l >= 0
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1842 := &x.ListMeta
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1842) {
		} else {
			z.DecFallback(yyv1842, false)
		}
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1844 := &x.Items
		yym1845 := z.DecBinary()
		_ = yym1845
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1844), d)
		}
	}
	for {
		yyj1839++
		if yyhl1839 {
			yyb1839 = yyj1839 > l
		} else {
			yyb1839 = r.CheckBreak()
		}
		if yyb1839 {
			break
		}
		z.DecStructFieldNotFound(yyj1839-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1846 := z.EncBinary()
	_ = yym1846
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1847 := z.DecBinary()
	_ = yym1847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1848 := z.EncBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1849 := z.DecBinary()
	_ = yym1849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1850 := z.EncBinary()
		_ = yym1850
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1851 := !z.EncBinary()
			yy2arr1851 := z.EncBasicHandle().StructToArray
			var yyq1851 [1]bool
			_, _, _ = yysep1851, yyq1851, yy2arr1851
			const yyr1851 bool = false
			yyq1851[0] = true
			if yyr1851 || yy2arr1851 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1851 int = 0
				for _, b := range yyq1851 {
					if b {
						yynn1851++
					}
				}
				r.EncodeMapStart(yynn1851)
			}
			if yyr1851 || yy2arr1851 {
				if yyq1851[0] {
					yy1853 := &x.LoadBalancer
					yy1853.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1851[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1854 := &x.LoadBalancer
					yy1854.CodecEncodeSelf(e)
				}
			}
			if yysep1851 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		switch yys1857 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1858 := &x.LoadBalancer
				yyv1858.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	if !yyhl1857 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1859 int
	var yyb1859 bool
	var yyhl1859 bool = l >= 0
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1860 := &x.LoadBalancer
		yyv1860.CodecDecodeSelf(d)
	}
	for {
		yyj1859++
		if yyhl1859 {
			yyb1859 = yyj1859 > l
		} else {
			yyb1859 = r.CheckBreak()
		}
		if yyb1859 {
			break
		}
		z.DecStructFieldNotFound(yyj1859-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1861 := z.EncBinary()
		_ = yym1861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1862 := !z.EncBinary()
			yy2arr1862 := z.EncBasicHandle().StructToArray
			var yyq1862 [1]bool
			_, _, _ = yysep1862, yyq1862, yy2arr1862
			const yyr1862 bool = false
			yyq1862[0] = len(x.Ingress) != 0
			if yyr1862 || yy2arr1862 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1862 int = 0
				for _, b := range yyq1862 {
					if b {
						yynn1862++
					}
				}
				r.EncodeMapStart(yynn1862)
			}
			if yyr1862 || yy2arr1862 {
				if yyq1862[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1862[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1862 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		switch yys1868 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1869 := &x.Ingress
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1869), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	if !yyhl1868 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1871 int
	var yyb1871 bool
	var yyhl1871 bool = l >= 0
	yyj1871++
	if yyhl1871 {
		yyb1871 = yyj1871 > l
	} else {
		yyb1871 = r.CheckBreak()
	}
	if yyb1871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1872 := &x.Ingress
		yym1873 := z.DecBinary()
		_ = yym1873
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1872), d)
		}
	}
	for {
		yyj1871++
		if yyhl1871 {
			yyb1871 = yyj1871 > l
		} else {
			yyb1871 = r.CheckBreak()
		}
		if yyb1871 {
			break
		}
		z.DecStructFieldNotFound(yyj1871-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1874 := z.EncBinary()
		_ = yym1874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1875 := !z.EncBinary()
			yy2arr1875 := z.EncBasicHandle().StructToArray
			var yyq1875 [2]bool
			_, _, _ = yysep1875, yyq1875, yy2arr1875
			const yyr1875 bool = false
			yyq1875[0] = x.IP != ""
			yyq1875[1] = x.Hostname != ""
			if yyr1875 || yy2arr1875 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1875 int = 0
				for _, b := range yyq1875 {
					if b {
						yynn1875++
					}
				}
				r.EncodeMapStart(yynn1875)
			}
			if yyr1875 || yy2arr1875 {
				if yyq1875[0] {
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1875[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1878 := z.EncBinary()
					_ = yym1878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1875 || yy2arr1875 {
				if yyq1875[1] {
					yym1880 := z.EncBinary()
					_ = yym1880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1875[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1881 := z.EncBinary()
					_ = yym1881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1875 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1882 := z.DecBinary()
	_ = yym1882
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1883 := r.ReadMapStart()
			if yyl1883 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1883, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1883 := r.ReadArrayStart()
			if yyl1883 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1883, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1884Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1884Slc
	var yyhl1884 bool = l >= 0
	for yyj1884 := 0; ; yyj1884++ {
		if yyhl1884 {
			if yyj1884 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1884Slc = r.DecodeBytes(yys1884Slc, true, true)
		yys1884 := string(yys1884Slc)
		switch yys1884 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1884)
		} // end switch yys1884
	} // end for yyj1884
	if !yyhl1884 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1887 int
	var yyb1887 bool
	var yyhl1887 bool = l >= 0
	yyj1887++
	if yyhl1887 {
		yyb1887 = yyj1887 > l
	} else {
		yyb1887 = r.CheckBreak()
	}
	if yyb1887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1887++
	if yyhl1887 {
		yyb1887 = yyj1887 > l
	} else {
		yyb1887 = r.CheckBreak()
	}
	if yyb1887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1887++
		if yyhl1887 {
			yyb1887 = yyj1887 > l
		} else {
			yyb1887 = r.CheckBreak()
		}
		if yyb1887 {
			break
		}
		z.DecStructFieldNotFound(yyj1887-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1890 := z.EncBinary()
		_ = yym1890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1891 := !z.EncBinary()
			yy2arr1891 := z.EncBasicHandle().StructToArray
			var yyq1891 [7]bool
			_, _, _ = yysep1891, yyq1891, yy2arr1891
			const yyr1891 bool = false
			yyq1891[0] = x.Type != ""
			yyq1891[3] = x.ClusterIP != ""
			yyq1891[4] = len(x.ExternalIPs) != 0
			yyq1891[5] = x.LoadBalancerIP != ""
			yyq1891[6] = x.SessionAffinity != ""
			if yyr1891 || yy2arr1891 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1891 int = 2
				for _, b := range yyq1891 {
					if b {
						yynn1891++
					}
				}
				r.EncodeMapStart(yynn1891)
			}
			if yyr1891 || yy2arr1891 {
				if yyq1891[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1891 || yy2arr1891 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				if yyq1891[3] {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[3] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				if yyq1891[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1903 := z.EncBinary()
						_ = yym1903
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1891[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1904 := z.EncBinary()
						_ = yym1904
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				if yyq1891[5] {
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[5] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1907 := z.EncBinary()
					_ = yym1907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				if yyq1891[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1891 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1909 := z.DecBinary()
	_ = yym1909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1910 := r.ReadMapStart()
			if yyl1910 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1910, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1910 := r.ReadArrayStart()
			if yyl1910 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1911Slc
	var yyhl1911 bool = l >= 0
	for yyj1911 := 0; ; yyj1911++ {
		if yyhl1911 {
			if yyj1911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1911Slc = r.DecodeBytes(yys1911Slc, true, true)
		yys1911 := string(yys1911Slc)
		switch yys1911 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1913 := &x.Ports
				yym1914 := z.DecBinary()
				_ = yym1914
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1913), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1915 := &x.Selector
				yym1916 := z.DecBinary()
				_ = yym1916
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1915, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1918 := &x.ExternalIPs
				yym1919 := z.DecBinary()
				_ = yym1919
				if false {
				} else {
					z.F.DecSliceStringX(yyv1918, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1911)
		} // end switch yys1911
	} // end for yyj1911
	if !yyhl1911 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1922 int
	var yyb1922 bool
	var yyhl1922 bool = l >= 0
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1924 := &x.Ports
		yym1925 := z.DecBinary()
		_ = yym1925
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1924), d)
		}
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1926 := &x.Selector
		yym1927 := z.DecBinary()
		_ = yym1927
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1926, false, d)
		}
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1929 := &x.ExternalIPs
		yym1930 := z.DecBinary()
		_ = yym1930
		if false {
		} else {
			z.F.DecSliceStringX(yyv1929, false, d)
		}
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1922++
		if yyhl1922 {
			yyb1922 = yyj1922 > l
		} else {
			yyb1922 = r.CheckBreak()
		}
		if yyb1922 {
			break
		}
		z.DecStructFieldNotFound(yyj1922-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1933 := z.EncBinary()
		_ = yym1933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1934 := !z.EncBinary()
			yy2arr1934 := z.EncBasicHandle().StructToArray
			var yyq1934 [5]bool
			_, _, _ = yysep1934, yyq1934, yy2arr1934
			const yyr1934 bool = false
			if yyr1934 || yy2arr1934 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1934 int = 5
				for _, b := range yyq1934 {
					if b {
						yynn1934++
					}
				}
				r.EncodeMapStart(yynn1934)
			}
			if yyr1934 || yy2arr1934 {
				yym1936 := z.EncBinary()
				_ = yym1936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1937 := z.EncBinary()
				_ = yym1937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1934 || yy2arr1934 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1934 || yy2arr1934 {
				yym1940 := z.EncBinary()
				_ = yym1940
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1941 := z.EncBinary()
				_ = yym1941
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1934 || yy2arr1934 {
				yy1943 := &x.TargetPort
				yym1944 := z.EncBinary()
				_ = yym1944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1943) {
				} else if !yym1944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1943)
				} else {
					z.EncFallback(yy1943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				yy1945 := &x.TargetPort
				yym1946 := z.EncBinary()
				_ = yym1946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1945) {
				} else if !yym1946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1945)
				} else {
					z.EncFallback(yy1945)
				}
			}
			if yyr1934 || yy2arr1934 {
				yym1948 := z.EncBinary()
				_ = yym1948
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				yym1949 := z.EncBinary()
				_ = yym1949
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1934 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1950 := z.DecBinary()
	_ = yym1950
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1951 := r.ReadMapStart()
			if yyl1951 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1951, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1951 := r.ReadArrayStart()
			if yyl1951 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1951, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1952Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1952Slc
	var yyhl1952 bool = l >= 0
	for yyj1952 := 0; ; yyj1952++ {
		if yyhl1952 {
			if yyj1952 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1952Slc = r.DecodeBytes(yys1952Slc, true, true)
		yys1952 := string(yys1952Slc)
		switch yys1952 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1956 := &x.TargetPort
				yym1957 := z.DecBinary()
				_ = yym1957
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1956) {
				} else if !yym1957 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1956)
				} else {
					z.DecFallback(yyv1956, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1952)
		} // end switch yys1952
	} // end for yyj1952
	if !yyhl1952 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1959 int
	var yyb1959 bool
	var yyhl1959 bool = l >= 0
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1963 := &x.TargetPort
		yym1964 := z.DecBinary()
		_ = yym1964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1963) {
		} else if !yym1964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1963)
		} else {
			z.DecFallback(yyv1963, false)
		}
	}
	yyj1959++
	if yyhl1959 {
		yyb1959 = yyj1959 > l
	} else {
		yyb1959 = r.CheckBreak()
	}
	if yyb1959 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1959++
		if yyhl1959 {
			yyb1959 = yyj1959 > l
		} else {
			yyb1959 = r.CheckBreak()
		}
		if yyb1959 {
			break
		}
		z.DecStructFieldNotFound(yyj1959-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1966 := z.EncBinary()
		_ = yym1966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1967 := !z.EncBinary()
			yy2arr1967 := z.EncBasicHandle().StructToArray
			var yyq1967 [5]bool
			_, _, _ = yysep1967, yyq1967, yy2arr1967
			const yyr1967 bool = false
			yyq1967[0] = x.Kind != ""
			yyq1967[1] = x.APIVersion != ""
			yyq1967[2] = true
			yyq1967[3] = true
			yyq1967[4] = true
			if yyr1967 || yy2arr1967 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1967 int = 0
				for _, b := range yyq1967 {
					if b {
						yynn1967++
					}
				}
				r.EncodeMapStart(yynn1967)
			}
			if yyr1967 || yy2arr1967 {
				if yyq1967[0] {
					yym1969 := z.EncBinary()
					_ = yym1969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1967[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1967 || yy2arr1967 {
				if yyq1967[1] {
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1967[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1967 || yy2arr1967 {
				if yyq1967[2] {
					yy1975 := &x.ObjectMeta
					yy1975.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1967[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1976 := &x.ObjectMeta
					yy1976.CodecEncodeSelf(e)
				}
			}
			if yyr1967 || yy2arr1967 {
				if yyq1967[3] {
					yy1978 := &x.Spec
					yy1978.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1967[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1979 := &x.Spec
					yy1979.CodecEncodeSelf(e)
				}
			}
			if yyr1967 || yy2arr1967 {
				if yyq1967[4] {
					yy1981 := &x.Status
					yy1981.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1967[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1982 := &x.Status
					yy1982.CodecEncodeSelf(e)
				}
			}
			if yysep1967 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1983 := z.DecBinary()
	_ = yym1983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1984 := r.ReadMapStart()
			if yyl1984 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1984, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1984 := r.ReadArrayStart()
			if yyl1984 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1985Slc
	var yyhl1985 bool = l >= 0
	for yyj1985 := 0; ; yyj1985++ {
		if yyhl1985 {
			if yyj1985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1985Slc = r.DecodeBytes(yys1985Slc, true, true)
		yys1985 := string(yys1985Slc)
		switch yys1985 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1988 := &x.ObjectMeta
				yyv1988.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1989 := &x.Spec
				yyv1989.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1990 := &x.Status
				yyv1990.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1985)
		} // end switch yys1985
	} // end for yyj1985
	if !yyhl1985 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1991 int
	var yyb1991 bool
	var yyhl1991 bool = l >= 0
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1994 := &x.ObjectMeta
		yyv1994.CodecDecodeSelf(d)
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1995 := &x.Spec
		yyv1995.CodecDecodeSelf(d)
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1996 := &x.Status
		yyv1996.CodecDecodeSelf(d)
	}
	for {
		yyj1991++
		if yyhl1991 {
			yyb1991 = yyj1991 > l
		} else {
			yyb1991 = r.CheckBreak()
		}
		if yyb1991 {
			break
		}
		z.DecStructFieldNotFound(yyj1991-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1997 := z.EncBinary()
		_ = yym1997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1998 := !z.EncBinary()
			yy2arr1998 := z.EncBasicHandle().StructToArray
			var yyq1998 [5]bool
			_, _, _ = yysep1998, yyq1998, yy2arr1998
			const yyr1998 bool = false
			yyq1998[0] = x.Kind != ""
			yyq1998[1] = x.APIVersion != ""
			yyq1998[2] = true
			yyq1998[4] = len(x.ImagePullSecrets) != 0
			if yyr1998 || yy2arr1998 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1998 int = 1
				for _, b := range yyq1998 {
					if b {
						yynn1998++
					}
				}
				r.EncodeMapStart(yynn1998)
			}
			if yyr1998 || yy2arr1998 {
				if yyq1998[0] {
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2001 := z.EncBinary()
					_ = yym2001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1998 || yy2arr1998 {
				if yyq1998[1] {
					yym2003 := z.EncBinary()
					_ = yym2003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2004 := z.EncBinary()
					_ = yym2004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1998 || yy2arr1998 {
				if yyq1998[2] {
					yy2006 := &x.ObjectMeta
					yy2006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1998[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2007 := &x.ObjectMeta
					yy2007.CodecEncodeSelf(e)
				}
			}
			if yyr1998 || yy2arr1998 {
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr1998 || yy2arr1998 {
				if yyq1998[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2012 := z.EncBinary()
						_ = yym2012
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1998[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2013 := z.EncBinary()
						_ = yym2013
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2014 := z.DecBinary()
	_ = yym2014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2015 := r.ReadMapStart()
			if yyl2015 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2015, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2015 := r.ReadArrayStart()
			if yyl2015 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2016Slc
	var yyhl2016 bool = l >= 0
	for yyj2016 := 0; ; yyj2016++ {
		if yyhl2016 {
			if yyj2016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2016Slc = r.DecodeBytes(yys2016Slc, true, true)
		yys2016 := string(yys2016Slc)
		switch yys2016 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2019 := &x.ObjectMeta
				yyv2019.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2020 := &x.Secrets
				yym2021 := z.DecBinary()
				_ = yym2021
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2020), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2022 := &x.ImagePullSecrets
				yym2023 := z.DecBinary()
				_ = yym2023
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2022), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2016)
		} // end switch yys2016
	} // end for yyj2016
	if !yyhl2016 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2024 int
	var yyb2024 bool
	var yyhl2024 bool = l >= 0
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2027 := &x.ObjectMeta
		yyv2027.CodecDecodeSelf(d)
	}
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2028 := &x.Secrets
		yym2029 := z.DecBinary()
		_ = yym2029
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2028), d)
		}
	}
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2030 := &x.ImagePullSecrets
		yym2031 := z.DecBinary()
		_ = yym2031
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2030), d)
		}
	}
	for {
		yyj2024++
		if yyhl2024 {
			yyb2024 = yyj2024 > l
		} else {
			yyb2024 = r.CheckBreak()
		}
		if yyb2024 {
			break
		}
		z.DecStructFieldNotFound(yyj2024-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2032 := z.EncBinary()
		_ = yym2032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2033 := !z.EncBinary()
			yy2arr2033 := z.EncBasicHandle().StructToArray
			var yyq2033 [4]bool
			_, _, _ = yysep2033, yyq2033, yy2arr2033
			const yyr2033 bool = false
			yyq2033[0] = x.Kind != ""
			yyq2033[1] = x.APIVersion != ""
			yyq2033[2] = true
			if yyr2033 || yy2arr2033 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2033 int = 1
				for _, b := range yyq2033 {
					if b {
						yynn2033++
					}
				}
				r.EncodeMapStart(yynn2033)
			}
			if yyr2033 || yy2arr2033 {
				if yyq2033[0] {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2033[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2036 := z.EncBinary()
					_ = yym2036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2033 || yy2arr2033 {
				if yyq2033[1] {
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2033[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2033 || yy2arr2033 {
				if yyq2033[2] {
					yy2041 := &x.ListMeta
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2041) {
					} else {
						z.EncFallback(yy2041)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2033[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2043 := &x.ListMeta
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2043) {
					} else {
						z.EncFallback(yy2043)
					}
				}
			}
			if yyr2033 || yy2arr2033 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2033 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		switch yys2050 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2053 := &x.ListMeta
				yym2054 := z.DecBinary()
				_ = yym2054
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2053) {
				} else {
					z.DecFallback(yyv2053, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2055 := &x.Items
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2055), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	if !yyhl2050 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2057 int
	var yyb2057 bool
	var yyhl2057 bool = l >= 0
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2060 := &x.ListMeta
		yym2061 := z.DecBinary()
		_ = yym2061
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2060) {
		} else {
			z.DecFallback(yyv2060, false)
		}
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2062 := &x.Items
		yym2063 := z.DecBinary()
		_ = yym2063
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2062), d)
		}
	}
	for {
		yyj2057++
		if yyhl2057 {
			yyb2057 = yyj2057 > l
		} else {
			yyb2057 = r.CheckBreak()
		}
		if yyb2057 {
			break
		}
		z.DecStructFieldNotFound(yyj2057-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2064 := z.EncBinary()
		_ = yym2064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2065 := !z.EncBinary()
			yy2arr2065 := z.EncBasicHandle().StructToArray
			var yyq2065 [4]bool
			_, _, _ = yysep2065, yyq2065, yy2arr2065
			const yyr2065 bool = false
			yyq2065[0] = x.Kind != ""
			yyq2065[1] = x.APIVersion != ""
			yyq2065[2] = true
			if yyr2065 || yy2arr2065 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2065 int = 1
				for _, b := range yyq2065 {
					if b {
						yynn2065++
					}
				}
				r.EncodeMapStart(yynn2065)
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[0] {
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[1] {
					yym2070 := z.EncBinary()
					_ = yym2070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2065[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[2] {
					yy2073 := &x.ObjectMeta
					yy2073.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2074 := &x.ObjectMeta
					yy2074.CodecEncodeSelf(e)
				}
			}
			if yyr2065 || yy2arr2065 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2065 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2078 := z.DecBinary()
	_ = yym2078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2079 := r.ReadMapStart()
			if yyl2079 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2079, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2079 := r.ReadArrayStart()
			if yyl2079 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2080Slc
	var yyhl2080 bool = l >= 0
	for yyj2080 := 0; ; yyj2080++ {
		if yyhl2080 {
			if yyj2080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2080Slc = r.DecodeBytes(yys2080Slc, true, true)
		yys2080 := string(yys2080Slc)
		switch yys2080 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2083 := &x.ObjectMeta
				yyv2083.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2084 := &x.Subsets
				yym2085 := z.DecBinary()
				_ = yym2085
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2084), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2080)
		} // end switch yys2080
	} // end for yyj2080
	if !yyhl2080 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2086 int
	var yyb2086 bool
	var yyhl2086 bool = l >= 0
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2089 := &x.ObjectMeta
		yyv2089.CodecDecodeSelf(d)
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2090 := &x.Subsets
		yym2091 := z.DecBinary()
		_ = yym2091
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2090), d)
		}
	}
	for {
		yyj2086++
		if yyhl2086 {
			yyb2086 = yyj2086 > l
		} else {
			yyb2086 = r.CheckBreak()
		}
		if yyb2086 {
			break
		}
		z.DecStructFieldNotFound(yyj2086-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2092 := z.EncBinary()
		_ = yym2092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2093 := !z.EncBinary()
			yy2arr2093 := z.EncBasicHandle().StructToArray
			var yyq2093 [3]bool
			_, _, _ = yysep2093, yyq2093, yy2arr2093
			const yyr2093 bool = false
			if yyr2093 || yy2arr2093 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2093 int = 3
				for _, b := range yyq2093 {
					if b {
						yynn2093++
					}
				}
				r.EncodeMapStart(yynn2093)
			}
			if yyr2093 || yy2arr2093 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep2093 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		switch yys2105 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2106 := &x.Addresses
				yym2107 := z.DecBinary()
				_ = yym2107
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2106), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2108 := &x.NotReadyAddresses
				yym2109 := z.DecBinary()
				_ = yym2109
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2108), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2110 := &x.Ports
				yym2111 := z.DecBinary()
				_ = yym2111
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2110), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	if !yyhl2105 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2112 int
	var yyb2112 bool
	var yyhl2112 bool = l >= 0
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2113 := &x.Addresses
		yym2114 := z.DecBinary()
		_ = yym2114
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2113), d)
		}
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2115 := &x.NotReadyAddresses
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2115), d)
		}
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2117 := &x.Ports
		yym2118 := z.DecBinary()
		_ = yym2118
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2117), d)
		}
	}
	for {
		yyj2112++
		if yyhl2112 {
			yyb2112 = yyj2112 > l
		} else {
			yyb2112 = r.CheckBreak()
		}
		if yyb2112 {
			break
		}
		z.DecStructFieldNotFound(yyj2112-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2119 := z.EncBinary()
		_ = yym2119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2120 := !z.EncBinary()
			yy2arr2120 := z.EncBasicHandle().StructToArray
			var yyq2120 [2]bool
			_, _, _ = yysep2120, yyq2120, yy2arr2120
			const yyr2120 bool = false
			if yyr2120 || yy2arr2120 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2120 int = 2
				for _, b := range yyq2120 {
					if b {
						yynn2120++
					}
				}
				r.EncodeMapStart(yynn2120)
			}
			if yyr2120 || yy2arr2120 {
				yym2122 := z.EncBinary()
				_ = yym2122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				yym2123 := z.EncBinary()
				_ = yym2123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2120 || yy2arr2120 {
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep2120 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2125 := z.DecBinary()
	_ = yym2125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2126 := r.ReadMapStart()
			if yyl2126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2126, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2126 := r.ReadArrayStart()
			if yyl2126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2127Slc
	var yyhl2127 bool = l >= 0
	for yyj2127 := 0; ; yyj2127++ {
		if yyhl2127 {
			if yyj2127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2127Slc = r.DecodeBytes(yys2127Slc, true, true)
		yys2127 := string(yys2127Slc)
		switch yys2127 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2127)
		} // end switch yys2127
	} // end for yyj2127
	if !yyhl2127 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2130 int
	var yyb2130 bool
	var yyhl2130 bool = l >= 0
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2130++
	if yyhl2130 {
		yyb2130 = yyj2130 > l
	} else {
		yyb2130 = r.CheckBreak()
	}
	if yyb2130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2130++
		if yyhl2130 {
			yyb2130 = yyj2130 > l
		} else {
			yyb2130 = r.CheckBreak()
		}
		if yyb2130 {
			break
		}
		z.DecStructFieldNotFound(yyj2130-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2133 := z.EncBinary()
		_ = yym2133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2134 := !z.EncBinary()
			yy2arr2134 := z.EncBasicHandle().StructToArray
			var yyq2134 [3]bool
			_, _, _ = yysep2134, yyq2134, yy2arr2134
			const yyr2134 bool = false
			if yyr2134 || yy2arr2134 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2134 int = 3
				for _, b := range yyq2134 {
					if b {
						yynn2134++
					}
				}
				r.EncodeMapStart(yynn2134)
			}
			if yyr2134 || yy2arr2134 {
				yym2136 := z.EncBinary()
				_ = yym2136
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2137 := z.EncBinary()
				_ = yym2137
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2134 || yy2arr2134 {
				yym2139 := z.EncBinary()
				_ = yym2139
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2140 := z.EncBinary()
				_ = yym2140
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2134 || yy2arr2134 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep2134 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2142 := z.DecBinary()
	_ = yym2142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2143 := r.ReadMapStart()
			if yyl2143 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2143, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2143 := r.ReadArrayStart()
			if yyl2143 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2144Slc
	var yyhl2144 bool = l >= 0
	for yyj2144 := 0; ; yyj2144++ {
		if yyhl2144 {
			if yyj2144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2144Slc = r.DecodeBytes(yys2144Slc, true, true)
		yys2144 := string(yys2144Slc)
		switch yys2144 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2144)
		} // end switch yys2144
	} // end for yyj2144
	if !yyhl2144 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2148 int
	var yyb2148 bool
	var yyhl2148 bool = l >= 0
	yyj2148++
	if yyhl2148 {
		yyb2148 = yyj2148 > l
	} else {
		yyb2148 = r.CheckBreak()
	}
	if yyb2148 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2148++
	if yyhl2148 {
		yyb2148 = yyj2148 > l
	} else {
		yyb2148 = r.CheckBreak()
	}
	if yyb2148 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2148++
	if yyhl2148 {
		yyb2148 = yyj2148 > l
	} else {
		yyb2148 = r.CheckBreak()
	}
	if yyb2148 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2148++
		if yyhl2148 {
			yyb2148 = yyj2148 > l
		} else {
			yyb2148 = r.CheckBreak()
		}
		if yyb2148 {
			break
		}
		z.DecStructFieldNotFound(yyj2148-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2152 := z.EncBinary()
		_ = yym2152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2153 := !z.EncBinary()
			yy2arr2153 := z.EncBasicHandle().StructToArray
			var yyq2153 [4]bool
			_, _, _ = yysep2153, yyq2153, yy2arr2153
			const yyr2153 bool = false
			yyq2153[0] = x.Kind != ""
			yyq2153[1] = x.APIVersion != ""
			yyq2153[2] = true
			if yyr2153 || yy2arr2153 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2153 int = 1
				for _, b := range yyq2153 {
					if b {
						yynn2153++
					}
				}
				r.EncodeMapStart(yynn2153)
			}
			if yyr2153 || yy2arr2153 {
				if yyq2153[0] {
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				if yyq2153[1] {
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2159 := z.EncBinary()
					_ = yym2159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				if yyq2153[2] {
					yy2161 := &x.ListMeta
					yym2162 := z.EncBinary()
					_ = yym2162
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2161) {
					} else {
						z.EncFallback(yy2161)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2163 := &x.ListMeta
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2163) {
					} else {
						z.EncFallback(yy2163)
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2153 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2168 := z.DecBinary()
	_ = yym2168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2169 := r.ReadMapStart()
			if yyl2169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2169, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2169 := r.ReadArrayStart()
			if yyl2169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2170Slc
	var yyhl2170 bool = l >= 0
	for yyj2170 := 0; ; yyj2170++ {
		if yyhl2170 {
			if yyj2170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2170Slc = r.DecodeBytes(yys2170Slc, true, true)
		yys2170 := string(yys2170Slc)
		switch yys2170 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2173 := &x.ListMeta
				yym2174 := z.DecBinary()
				_ = yym2174
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2173) {
				} else {
					z.DecFallback(yyv2173, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2175 := &x.Items
				yym2176 := z.DecBinary()
				_ = yym2176
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2175), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2170)
		} // end switch yys2170
	} // end for yyj2170
	if !yyhl2170 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2177 int
	var yyb2177 bool
	var yyhl2177 bool = l >= 0
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2180 := &x.ListMeta
		yym2181 := z.DecBinary()
		_ = yym2181
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2180) {
		} else {
			z.DecFallback(yyv2180, false)
		}
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2182 := &x.Items
		yym2183 := z.DecBinary()
		_ = yym2183
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2182), d)
		}
	}
	for {
		yyj2177++
		if yyhl2177 {
			yyb2177 = yyj2177 > l
		} else {
			yyb2177 = r.CheckBreak()
		}
		if yyb2177 {
			break
		}
		z.DecStructFieldNotFound(yyj2177-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2184 := z.EncBinary()
		_ = yym2184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2185 := !z.EncBinary()
			yy2arr2185 := z.EncBasicHandle().StructToArray
			var yyq2185 [4]bool
			_, _, _ = yysep2185, yyq2185, yy2arr2185
			const yyr2185 bool = false
			yyq2185[0] = x.PodCIDR != ""
			yyq2185[1] = x.ExternalID != ""
			yyq2185[2] = x.ProviderID != ""
			yyq2185[3] = x.Unschedulable != false
			if yyr2185 || yy2arr2185 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2185 int = 0
				for _, b := range yyq2185 {
					if b {
						yynn2185++
					}
				}
				r.EncodeMapStart(yynn2185)
			}
			if yyr2185 || yy2arr2185 {
				if yyq2185[0] {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2185[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2185 || yy2arr2185 {
				if yyq2185[1] {
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2185[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2185 || yy2arr2185 {
				if yyq2185[2] {
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2185[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2194 := z.EncBinary()
					_ = yym2194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2185 || yy2arr2185 {
				if yyq2185[3] {
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2185[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2197 := z.EncBinary()
					_ = yym2197
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2185 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2198 := z.DecBinary()
	_ = yym2198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2199 := r.ReadMapStart()
			if yyl2199 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2199, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2199 := r.ReadArrayStart()
			if yyl2199 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2200Slc
	var yyhl2200 bool = l >= 0
	for yyj2200 := 0; ; yyj2200++ {
		if yyhl2200 {
			if yyj2200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2200Slc = r.DecodeBytes(yys2200Slc, true, true)
		yys2200 := string(yys2200Slc)
		switch yys2200 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2200)
		} // end switch yys2200
	} // end for yyj2200
	if !yyhl2200 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2205 int
	var yyb2205 bool
	var yyhl2205 bool = l >= 0
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2205++
	if yyhl2205 {
		yyb2205 = yyj2205 > l
	} else {
		yyb2205 = r.CheckBreak()
	}
	if yyb2205 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2205++
		if yyhl2205 {
			yyb2205 = yyj2205 > l
		} else {
			yyb2205 = r.CheckBreak()
		}
		if yyb2205 {
			break
		}
		z.DecStructFieldNotFound(yyj2205-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2210 := z.EncBinary()
		_ = yym2210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2211 := !z.EncBinary()
			yy2arr2211 := z.EncBasicHandle().StructToArray
			var yyq2211 [1]bool
			_, _, _ = yysep2211, yyq2211, yy2arr2211
			const yyr2211 bool = false
			if yyr2211 || yy2arr2211 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2211 int = 1
				for _, b := range yyq2211 {
					if b {
						yynn2211++
					}
				}
				r.EncodeMapStart(yynn2211)
			}
			if yyr2211 || yy2arr2211 {
				yym2213 := z.EncBinary()
				_ = yym2213
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2214 := z.EncBinary()
				_ = yym2214
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2215 := z.DecBinary()
	_ = yym2215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2216 := r.ReadMapStart()
			if yyl2216 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2216, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2216 := r.ReadArrayStart()
			if yyl2216 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2217Slc
	var yyhl2217 bool = l >= 0
	for yyj2217 := 0; ; yyj2217++ {
		if yyhl2217 {
			if yyj2217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2217Slc = r.DecodeBytes(yys2217Slc, true, true)
		yys2217 := string(yys2217Slc)
		switch yys2217 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2217)
		} // end switch yys2217
	} // end for yyj2217
	if !yyhl2217 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2219 int
	var yyb2219 bool
	var yyhl2219 bool = l >= 0
	yyj2219++
	if yyhl2219 {
		yyb2219 = yyj2219 > l
	} else {
		yyb2219 = r.CheckBreak()
	}
	if yyb2219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2219++
		if yyhl2219 {
			yyb2219 = yyj2219 > l
		} else {
			yyb2219 = r.CheckBreak()
		}
		if yyb2219 {
			break
		}
		z.DecStructFieldNotFound(yyj2219-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2221 := z.EncBinary()
		_ = yym2221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2222 := !z.EncBinary()
			yy2arr2222 := z.EncBasicHandle().StructToArray
			var yyq2222 [1]bool
			_, _, _ = yysep2222, yyq2222, yy2arr2222
			const yyr2222 bool = false
			yyq2222[0] = true
			if yyr2222 || yy2arr2222 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2222 int = 0
				for _, b := range yyq2222 {
					if b {
						yynn2222++
					}
				}
				r.EncodeMapStart(yynn2222)
			}
			if yyr2222 || yy2arr2222 {
				if yyq2222[0] {
					yy2224 := &x.KubeletEndpoint
					yy2224.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2225 := &x.KubeletEndpoint
					yy2225.CodecEncodeSelf(e)
				}
			}
			if yysep2222 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2226 := z.DecBinary()
	_ = yym2226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2227 := r.ReadMapStart()
			if yyl2227 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2227, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2227 := r.ReadArrayStart()
			if yyl2227 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2228Slc
	var yyhl2228 bool = l >= 0
	for yyj2228 := 0; ; yyj2228++ {
		if yyhl2228 {
			if yyj2228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2228Slc = r.DecodeBytes(yys2228Slc, true, true)
		yys2228 := string(yys2228Slc)
		switch yys2228 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2229 := &x.KubeletEndpoint
				yyv2229.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2228)
		} // end switch yys2228
	} // end for yyj2228
	if !yyhl2228 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2230 int
	var yyb2230 bool
	var yyhl2230 bool = l >= 0
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2231 := &x.KubeletEndpoint
		yyv2231.CodecDecodeSelf(d)
	}
	for {
		yyj2230++
		if yyhl2230 {
			yyb2230 = yyj2230 > l
		} else {
			yyb2230 = r.CheckBreak()
		}
		if yyb2230 {
			break
		}
		z.DecStructFieldNotFound(yyj2230-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2232 := z.EncBinary()
		_ = yym2232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2233 := !z.EncBinary()
			yy2arr2233 := z.EncBasicHandle().StructToArray
			var yyq2233 [8]bool
			_, _, _ = yysep2233, yyq2233, yy2arr2233
			const yyr2233 bool = false
			if yyr2233 || yy2arr2233 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2233 int = 8
				for _, b := range yyq2233 {
					if b {
						yynn2233++
					}
				}
				r.EncodeMapStart(yynn2233)
			}
			if yyr2233 || yy2arr2233 {
				yym2235 := z.EncBinary()
				_ = yym2235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2236 := z.EncBinary()
				_ = yym2236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2239 := z.EncBinary()
				_ = yym2239
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2241 := z.EncBinary()
				_ = yym2241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2242 := z.EncBinary()
				_ = yym2242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2244 := z.EncBinary()
				_ = yym2244
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2245 := z.EncBinary()
				_ = yym2245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2247 := z.EncBinary()
				_ = yym2247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2248 := z.EncBinary()
				_ = yym2248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2250 := z.EncBinary()
				_ = yym2250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2251 := z.EncBinary()
				_ = yym2251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2253 := z.EncBinary()
				_ = yym2253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2254 := z.EncBinary()
				_ = yym2254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2233 || yy2arr2233 {
				yym2256 := z.EncBinary()
				_ = yym2256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2257 := z.EncBinary()
				_ = yym2257
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2233 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2258 := z.DecBinary()
	_ = yym2258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2259 := r.ReadMapStart()
			if yyl2259 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2259, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2259 := r.ReadArrayStart()
			if yyl2259 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2260Slc
	var yyhl2260 bool = l >= 0
	for yyj2260 := 0; ; yyj2260++ {
		if yyhl2260 {
			if yyj2260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2260Slc = r.DecodeBytes(yys2260Slc, true, true)
		yys2260 := string(yys2260Slc)
		switch yys2260 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2260)
		} // end switch yys2260
	} // end for yyj2260
	if !yyhl2260 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2269 int
	var yyb2269 bool
	var yyhl2269 bool = l >= 0
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2269++
	if yyhl2269 {
		yyb2269 = yyj2269 > l
	} else {
		yyb2269 = r.CheckBreak()
	}
	if yyb2269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2269++
		if yyhl2269 {
			yyb2269 = yyj2269 > l
		} else {
			yyb2269 = r.CheckBreak()
		}
		if yyb2269 {
			break
		}
		z.DecStructFieldNotFound(yyj2269-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2278 := z.EncBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2279 := !z.EncBinary()
			yy2arr2279 := z.EncBasicHandle().StructToArray
			var yyq2279 [6]bool
			_, _, _ = yysep2279, yyq2279, yy2arr2279
			const yyr2279 bool = false
			yyq2279[0] = len(x.Capacity) != 0
			yyq2279[1] = x.Phase != ""
			yyq2279[2] = len(x.Conditions) != 0
			yyq2279[3] = len(x.Addresses) != 0
			yyq2279[4] = true
			yyq2279[5] = true
			if yyr2279 || yy2arr2279 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2279 int = 0
				for _, b := range yyq2279 {
					if b {
						yynn2279++
					}
				}
				r.EncodeMapStart(yynn2279)
			}
			if yyr2279 || yy2arr2279 {
				if yyq2279[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				if yyq2279[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				if yyq2279[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2283 := z.EncBinary()
						_ = yym2283
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2284 := z.EncBinary()
						_ = yym2284
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				if yyq2279[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2286 := z.EncBinary()
						_ = yym2286
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2287 := z.EncBinary()
						_ = yym2287
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				if yyq2279[4] {
					yy2289 := &x.DaemonEndpoints
					yy2289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2290 := &x.DaemonEndpoints
					yy2290.CodecEncodeSelf(e)
				}
			}
			if yyr2279 || yy2arr2279 {
				if yyq2279[5] {
					yy2292 := &x.NodeInfo
					yy2292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2293 := &x.NodeInfo
					yy2293.CodecEncodeSelf(e)
				}
			}
			if yysep2279 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2294 := z.DecBinary()
	_ = yym2294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2295 := r.ReadMapStart()
			if yyl2295 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2295, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2295 := r.ReadArrayStart()
			if yyl2295 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2296Slc
	var yyhl2296 bool = l >= 0
	for yyj2296 := 0; ; yyj2296++ {
		if yyhl2296 {
			if yyj2296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2296Slc = r.DecodeBytes(yys2296Slc, true, true)
		yys2296 := string(yys2296Slc)
		switch yys2296 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2297 := &x.Capacity
				yyv2297.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2299 := &x.Conditions
				yym2300 := z.DecBinary()
				_ = yym2300
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2299), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2301 := &x.Addresses
				yym2302 := z.DecBinary()
				_ = yym2302
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2301), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2303 := &x.DaemonEndpoints
				yyv2303.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2304 := &x.NodeInfo
				yyv2304.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2296)
		} // end switch yys2296
	} // end for yyj2296
	if !yyhl2296 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2305 int
	var yyb2305 bool
	var yyhl2305 bool = l >= 0
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2306 := &x.Capacity
		yyv2306.CodecDecodeSelf(d)
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2308 := &x.Conditions
		yym2309 := z.DecBinary()
		_ = yym2309
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2308), d)
		}
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2310 := &x.Addresses
		yym2311 := z.DecBinary()
		_ = yym2311
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2310), d)
		}
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2312 := &x.DaemonEndpoints
		yyv2312.CodecDecodeSelf(d)
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2313 := &x.NodeInfo
		yyv2313.CodecDecodeSelf(d)
	}
	for {
		yyj2305++
		if yyhl2305 {
			yyb2305 = yyj2305 > l
		} else {
			yyb2305 = r.CheckBreak()
		}
		if yyb2305 {
			break
		}
		z.DecStructFieldNotFound(yyj2305-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2314 := z.EncBinary()
	_ = yym2314
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2315 := z.DecBinary()
	_ = yym2315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2316 := z.EncBinary()
	_ = yym2316
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2317 := z.DecBinary()
	_ = yym2317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2318 := z.EncBinary()
		_ = yym2318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2319 := !z.EncBinary()
			yy2arr2319 := z.EncBasicHandle().StructToArray
			var yyq2319 [6]bool
			_, _, _ = yysep2319, yyq2319, yy2arr2319
			const yyr2319 bool = false
			yyq2319[2] = true
			yyq2319[3] = true
			yyq2319[4] = x.Reason != ""
			yyq2319[5] = x.Message != ""
			if yyr2319 || yy2arr2319 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2319 int = 2
				for _, b := range yyq2319 {
					if b {
						yynn2319++
					}
				}
				r.EncodeMapStart(yynn2319)
			}
			if yyr2319 || yy2arr2319 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2319 || yy2arr2319 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2319 || yy2arr2319 {
				if yyq2319[2] {
					yy2323 := &x.LastHeartbeatTime
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2323) {
					} else if yym2324 {
						z.EncBinaryMarshal(yy2323)
					} else if !yym2324 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2323)
					} else {
						z.EncFallback(yy2323)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2325 := &x.LastHeartbeatTime
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2325) {
					} else if yym2326 {
						z.EncBinaryMarshal(yy2325)
					} else if !yym2326 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2325)
					} else {
						z.EncFallback(yy2325)
					}
				}
			}
			if yyr2319 || yy2arr2319 {
				if yyq2319[3] {
					yy2328 := &x.LastTransitionTime
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2328) {
					} else if yym2329 {
						z.EncBinaryMarshal(yy2328)
					} else if !yym2329 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2328)
					} else {
						z.EncFallback(yy2328)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2330 := &x.LastTransitionTime
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2330) {
					} else if yym2331 {
						z.EncBinaryMarshal(yy2330)
					} else if !yym2331 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2330)
					} else {
						z.EncFallback(yy2330)
					}
				}
			}
			if yyr2319 || yy2arr2319 {
				if yyq2319[4] {
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2319[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2319 || yy2arr2319 {
				if yyq2319[5] {
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2319[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2319 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2338 := z.DecBinary()
	_ = yym2338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2339 := r.ReadMapStart()
			if yyl2339 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2339, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2339 := r.ReadArrayStart()
			if yyl2339 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2340Slc
	var yyhl2340 bool = l >= 0
	for yyj2340 := 0; ; yyj2340++ {
		if yyhl2340 {
			if yyj2340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2340Slc = r.DecodeBytes(yys2340Slc, true, true)
		yys2340 := string(yys2340Slc)
		switch yys2340 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2343 := &x.LastHeartbeatTime
				yym2344 := z.DecBinary()
				_ = yym2344
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2343) {
				} else if yym2344 {
					z.DecBinaryUnmarshal(yyv2343)
				} else if !yym2344 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2343)
				} else {
					z.DecFallback(yyv2343, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2345 := &x.LastTransitionTime
				yym2346 := z.DecBinary()
				_ = yym2346
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2345) {
				} else if yym2346 {
					z.DecBinaryUnmarshal(yyv2345)
				} else if !yym2346 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2345)
				} else {
					z.DecFallback(yyv2345, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2340)
		} // end switch yys2340
	} // end for yyj2340
	if !yyhl2340 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2349 int
	var yyb2349 bool
	var yyhl2349 bool = l >= 0
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2352 := &x.LastHeartbeatTime
		yym2353 := z.DecBinary()
		_ = yym2353
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2352) {
		} else if yym2353 {
			z.DecBinaryUnmarshal(yyv2352)
		} else if !yym2353 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2352)
		} else {
			z.DecFallback(yyv2352, false)
		}
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2354 := &x.LastTransitionTime
		yym2355 := z.DecBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2354) {
		} else if yym2355 {
			z.DecBinaryUnmarshal(yyv2354)
		} else if !yym2355 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2354)
		} else {
			z.DecFallback(yyv2354, false)
		}
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2349++
		if yyhl2349 {
			yyb2349 = yyj2349 > l
		} else {
			yyb2349 = r.CheckBreak()
		}
		if yyb2349 {
			break
		}
		z.DecStructFieldNotFound(yyj2349-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2358 := z.EncBinary()
	_ = yym2358
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2359 := z.DecBinary()
	_ = yym2359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2360 := z.EncBinary()
		_ = yym2360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2361 := !z.EncBinary()
			yy2arr2361 := z.EncBasicHandle().StructToArray
			var yyq2361 [3]bool
			_, _, _ = yysep2361, yyq2361, yy2arr2361
			const yyr2361 bool = false
			if yyr2361 || yy2arr2361 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2361 int = 3
				for _, b := range yyq2361 {
					if b {
						yynn2361++
					}
				}
				r.EncodeMapStart(yynn2361)
			}
			if yyr2361 || yy2arr2361 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2361 || yy2arr2361 {
				yym2364 := z.EncBinary()
				_ = yym2364
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2365 := z.EncBinary()
				_ = yym2365
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2361 || yy2arr2361 {
				yym2367 := z.EncBinary()
				_ = yym2367
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Subnet))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subnet"))
				yym2368 := z.EncBinary()
				_ = yym2368
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Subnet))
				}
			}
			if yysep2361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2369 := z.DecBinary()
	_ = yym2369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2370 := r.ReadMapStart()
			if yyl2370 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2370, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2370 := r.ReadArrayStart()
			if yyl2370 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2371Slc
	var yyhl2371 bool = l >= 0
	for yyj2371 := 0; ; yyj2371++ {
		if yyhl2371 {
			if yyj2371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2371Slc = r.DecodeBytes(yys2371Slc, true, true)
		yys2371 := string(yys2371Slc)
		switch yys2371 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		case "subnet":
			if r.TryDecodeAsNil() {
				x.Subnet = ""
			} else {
				x.Subnet = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2371)
		} // end switch yys2371
	} // end for yyj2371
	if !yyhl2371 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2375 int
	var yyb2375 bool
	var yyhl2375 bool = l >= 0
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subnet = ""
	} else {
		x.Subnet = string(r.DecodeString())
	}
	for {
		yyj2375++
		if yyhl2375 {
			yyb2375 = yyj2375 > l
		} else {
			yyb2375 = r.CheckBreak()
		}
		if yyb2375 {
			break
		}
		z.DecStructFieldNotFound(yyj2375-1, "")
	}
	r.ReadEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2379 := z.EncBinary()
		_ = yym2379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2380 := !z.EncBinary()
			yy2arr2380 := z.EncBasicHandle().StructToArray
			var yyq2380 [1]bool
			_, _, _ = yysep2380, yyq2380, yy2arr2380
			const yyr2380 bool = false
			yyq2380[0] = len(x.Capacity) != 0
			if yyr2380 || yy2arr2380 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2380 int = 0
				for _, b := range yyq2380 {
					if b {
						yynn2380++
					}
				}
				r.EncodeMapStart(yynn2380)
			}
			if yyr2380 || yy2arr2380 {
				if yyq2380[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2380[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2380 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2382 := z.DecBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2383 := r.ReadMapStart()
			if yyl2383 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2383, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2383 := r.ReadArrayStart()
			if yyl2383 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2383, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2384Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2384Slc
	var yyhl2384 bool = l >= 0
	for yyj2384 := 0; ; yyj2384++ {
		if yyhl2384 {
			if yyj2384 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2384Slc = r.DecodeBytes(yys2384Slc, true, true)
		yys2384 := string(yys2384Slc)
		switch yys2384 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2385 := &x.Capacity
				yyv2385.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2384)
		} // end switch yys2384
	} // end for yyj2384
	if !yyhl2384 {
		r.ReadEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2386 int
	var yyb2386 bool
	var yyhl2386 bool = l >= 0
	yyj2386++
	if yyhl2386 {
		yyb2386 = yyj2386 > l
	} else {
		yyb2386 = r.CheckBreak()
	}
	if yyb2386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2387 := &x.Capacity
		yyv2387.CodecDecodeSelf(d)
	}
	for {
		yyj2386++
		if yyhl2386 {
			yyb2386 = yyj2386 > l
		} else {
			yyb2386 = r.CheckBreak()
		}
		if yyb2386 {
			break
		}
		z.DecStructFieldNotFound(yyj2386-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2388 := z.EncBinary()
	_ = yym2388
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2390 := z.EncBinary()
		_ = yym2390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2391 := z.DecBinary()
	_ = yym2391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2392 := z.EncBinary()
		_ = yym2392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2393 := !z.EncBinary()
			yy2arr2393 := z.EncBasicHandle().StructToArray
			var yyq2393 [5]bool
			_, _, _ = yysep2393, yyq2393, yy2arr2393
			const yyr2393 bool = false
			yyq2393[0] = x.Kind != ""
			yyq2393[1] = x.APIVersion != ""
			yyq2393[2] = true
			yyq2393[3] = true
			yyq2393[4] = true
			if yyr2393 || yy2arr2393 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2393 int = 0
				for _, b := range yyq2393 {
					if b {
						yynn2393++
					}
				}
				r.EncodeMapStart(yynn2393)
			}
			if yyr2393 || yy2arr2393 {
				if yyq2393[0] {
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2393[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				if yyq2393[1] {
					yym2398 := z.EncBinary()
					_ = yym2398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2393[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				if yyq2393[2] {
					yy2401 := &x.ObjectMeta
					yy2401.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2402 := &x.ObjectMeta
					yy2402.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				if yyq2393[3] {
					yy2404 := &x.Spec
					yy2404.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2405 := &x.Spec
					yy2405.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				if yyq2393[4] {
					yy2407 := &x.Status
					yy2407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2408 := &x.Status
					yy2408.CodecEncodeSelf(e)
				}
			}
			if yysep2393 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2409 := z.DecBinary()
	_ = yym2409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2410 := r.ReadMapStart()
			if yyl2410 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2410, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2410 := r.ReadArrayStart()
			if yyl2410 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2411Slc
	var yyhl2411 bool = l >= 0
	for yyj2411 := 0; ; yyj2411++ {
		if yyhl2411 {
			if yyj2411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2411Slc = r.DecodeBytes(yys2411Slc, true, true)
		yys2411 := string(yys2411Slc)
		switch yys2411 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2414 := &x.ObjectMeta
				yyv2414.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2415 := &x.Spec
				yyv2415.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2416 := &x.Status
				yyv2416.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2411)
		} // end switch yys2411
	} // end for yyj2411
	if !yyhl2411 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2417 int
	var yyb2417 bool
	var yyhl2417 bool = l >= 0
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2420 := &x.ObjectMeta
		yyv2420.CodecDecodeSelf(d)
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2421 := &x.Spec
		yyv2421.CodecDecodeSelf(d)
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2422 := &x.Status
		yyv2422.CodecDecodeSelf(d)
	}
	for {
		yyj2417++
		if yyhl2417 {
			yyb2417 = yyj2417 > l
		} else {
			yyb2417 = r.CheckBreak()
		}
		if yyb2417 {
			break
		}
		z.DecStructFieldNotFound(yyj2417-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2423 := z.EncBinary()
		_ = yym2423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2424 := !z.EncBinary()
			yy2arr2424 := z.EncBasicHandle().StructToArray
			var yyq2424 [4]bool
			_, _, _ = yysep2424, yyq2424, yy2arr2424
			const yyr2424 bool = false
			yyq2424[0] = x.Kind != ""
			yyq2424[1] = x.APIVersion != ""
			yyq2424[2] = true
			if yyr2424 || yy2arr2424 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2424 int = 1
				for _, b := range yyq2424 {
					if b {
						yynn2424++
					}
				}
				r.EncodeMapStart(yynn2424)
			}
			if yyr2424 || yy2arr2424 {
				if yyq2424[0] {
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				if yyq2424[1] {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				if yyq2424[2] {
					yy2432 := &x.ListMeta
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2432) {
					} else {
						z.EncFallback(yy2432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2424[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2434 := &x.ListMeta
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2434) {
					} else {
						z.EncFallback(yy2434)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2424 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2439 := z.DecBinary()
	_ = yym2439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2440 := r.ReadMapStart()
			if yyl2440 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2440, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2440 := r.ReadArrayStart()
			if yyl2440 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2441Slc
	var yyhl2441 bool = l >= 0
	for yyj2441 := 0; ; yyj2441++ {
		if yyhl2441 {
			if yyj2441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2441Slc = r.DecodeBytes(yys2441Slc, true, true)
		yys2441 := string(yys2441Slc)
		switch yys2441 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2444 := &x.ListMeta
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2444) {
				} else {
					z.DecFallback(yyv2444, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2446 := &x.Items
				yym2447 := z.DecBinary()
				_ = yym2447
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2446), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2441)
		} // end switch yys2441
	} // end for yyj2441
	if !yyhl2441 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2448 int
	var yyb2448 bool
	var yyhl2448 bool = l >= 0
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2451 := &x.ListMeta
		yym2452 := z.DecBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2451) {
		} else {
			z.DecFallback(yyv2451, false)
		}
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2453 := &x.Items
		yym2454 := z.DecBinary()
		_ = yym2454
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2453), d)
		}
	}
	for {
		yyj2448++
		if yyhl2448 {
			yyb2448 = yyj2448 > l
		} else {
			yyb2448 = r.CheckBreak()
		}
		if yyb2448 {
			break
		}
		z.DecStructFieldNotFound(yyj2448-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2455 := z.EncBinary()
		_ = yym2455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2456 := !z.EncBinary()
			yy2arr2456 := z.EncBasicHandle().StructToArray
			var yyq2456 [1]bool
			_, _, _ = yysep2456, yyq2456, yy2arr2456
			const yyr2456 bool = false
			if yyr2456 || yy2arr2456 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2456 int = 1
				for _, b := range yyq2456 {
					if b {
						yynn2456++
					}
				}
				r.EncodeMapStart(yynn2456)
			}
			if yyr2456 || yy2arr2456 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2459 := z.EncBinary()
					_ = yym2459
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yysep2456 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2460 := z.DecBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2461 := r.ReadMapStart()
			if yyl2461 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2461, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2461 := r.ReadArrayStart()
			if yyl2461 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2462Slc
	var yyhl2462 bool = l >= 0
	for yyj2462 := 0; ; yyj2462++ {
		if yyhl2462 {
			if yyj2462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2462Slc = r.DecodeBytes(yys2462Slc, true, true)
		yys2462 := string(yys2462Slc)
		switch yys2462 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2463 := &x.Finalizers
				yym2464 := z.DecBinary()
				_ = yym2464
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2463), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2462)
		} // end switch yys2462
	} // end for yyj2462
	if !yyhl2462 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2465 int
	var yyb2465 bool
	var yyhl2465 bool = l >= 0
	yyj2465++
	if yyhl2465 {
		yyb2465 = yyj2465 > l
	} else {
		yyb2465 = r.CheckBreak()
	}
	if yyb2465 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2466 := &x.Finalizers
		yym2467 := z.DecBinary()
		_ = yym2467
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2466), d)
		}
	}
	for {
		yyj2465++
		if yyhl2465 {
			yyb2465 = yyj2465 > l
		} else {
			yyb2465 = r.CheckBreak()
		}
		if yyb2465 {
			break
		}
		z.DecStructFieldNotFound(yyj2465-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2468 := z.EncBinary()
	_ = yym2468
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2469 := z.DecBinary()
	_ = yym2469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2470 := z.EncBinary()
		_ = yym2470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2471 := !z.EncBinary()
			yy2arr2471 := z.EncBasicHandle().StructToArray
			var yyq2471 [1]bool
			_, _, _ = yysep2471, yyq2471, yy2arr2471
			const yyr2471 bool = false
			yyq2471[0] = x.Phase != ""
			if yyr2471 || yy2arr2471 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2471 int = 0
				for _, b := range yyq2471 {
					if b {
						yynn2471++
					}
				}
				r.EncodeMapStart(yynn2471)
			}
			if yyr2471 || yy2arr2471 {
				if yyq2471[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2471[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2471 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2473 := z.DecBinary()
	_ = yym2473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2474 := r.ReadMapStart()
			if yyl2474 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2474, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2474 := r.ReadArrayStart()
			if yyl2474 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2475Slc
	var yyhl2475 bool = l >= 0
	for yyj2475 := 0; ; yyj2475++ {
		if yyhl2475 {
			if yyj2475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2475Slc = r.DecodeBytes(yys2475Slc, true, true)
		yys2475 := string(yys2475Slc)
		switch yys2475 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2475)
		} // end switch yys2475
	} // end for yyj2475
	if !yyhl2475 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2477 int
	var yyb2477 bool
	var yyhl2477 bool = l >= 0
	yyj2477++
	if yyhl2477 {
		yyb2477 = yyj2477 > l
	} else {
		yyb2477 = r.CheckBreak()
	}
	if yyb2477 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2477++
		if yyhl2477 {
			yyb2477 = yyj2477 > l
		} else {
			yyb2477 = r.CheckBreak()
		}
		if yyb2477 {
			break
		}
		z.DecStructFieldNotFound(yyj2477-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2479 := z.EncBinary()
	_ = yym2479
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2480 := z.DecBinary()
	_ = yym2480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2481 := z.EncBinary()
		_ = yym2481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2482 := !z.EncBinary()
			yy2arr2482 := z.EncBasicHandle().StructToArray
			var yyq2482 [5]bool
			_, _, _ = yysep2482, yyq2482, yy2arr2482
			const yyr2482 bool = false
			yyq2482[0] = x.Kind != ""
			yyq2482[1] = x.APIVersion != ""
			yyq2482[2] = true
			yyq2482[3] = true
			yyq2482[4] = true
			if yyr2482 || yy2arr2482 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2482 int = 0
				for _, b := range yyq2482 {
					if b {
						yynn2482++
					}
				}
				r.EncodeMapStart(yynn2482)
			}
			if yyr2482 || yy2arr2482 {
				if yyq2482[0] {
					yym2484 := z.EncBinary()
					_ = yym2484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2482[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2485 := z.EncBinary()
					_ = yym2485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2482 || yy2arr2482 {
				if yyq2482[1] {
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2482[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2482 || yy2arr2482 {
				if yyq2482[2] {
					yy2490 := &x.ObjectMeta
					yy2490.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2482[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2491 := &x.ObjectMeta
					yy2491.CodecEncodeSelf(e)
				}
			}
			if yyr2482 || yy2arr2482 {
				if yyq2482[3] {
					yy2493 := &x.Spec
					yy2493.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2482[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2494 := &x.Spec
					yy2494.CodecEncodeSelf(e)
				}
			}
			if yyr2482 || yy2arr2482 {
				if yyq2482[4] {
					yy2496 := &x.Status
					yy2496.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2482[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2497 := &x.Status
					yy2497.CodecEncodeSelf(e)
				}
			}
			if yysep2482 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2498 := z.DecBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2499 := r.ReadMapStart()
			if yyl2499 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2499, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2499 := r.ReadArrayStart()
			if yyl2499 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2500Slc
	var yyhl2500 bool = l >= 0
	for yyj2500 := 0; ; yyj2500++ {
		if yyhl2500 {
			if yyj2500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2500Slc = r.DecodeBytes(yys2500Slc, true, true)
		yys2500 := string(yys2500Slc)
		switch yys2500 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2503 := &x.ObjectMeta
				yyv2503.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2504 := &x.Spec
				yyv2504.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2505 := &x.Status
				yyv2505.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2500)
		} // end switch yys2500
	} // end for yyj2500
	if !yyhl2500 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2506 int
	var yyb2506 bool
	var yyhl2506 bool = l >= 0
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2509 := &x.ObjectMeta
		yyv2509.CodecDecodeSelf(d)
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2510 := &x.Spec
		yyv2510.CodecDecodeSelf(d)
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2511 := &x.Status
		yyv2511.CodecDecodeSelf(d)
	}
	for {
		yyj2506++
		if yyhl2506 {
			yyb2506 = yyj2506 > l
		} else {
			yyb2506 = r.CheckBreak()
		}
		if yyb2506 {
			break
		}
		z.DecStructFieldNotFound(yyj2506-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2512 := z.EncBinary()
		_ = yym2512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2513 := !z.EncBinary()
			yy2arr2513 := z.EncBasicHandle().StructToArray
			var yyq2513 [4]bool
			_, _, _ = yysep2513, yyq2513, yy2arr2513
			const yyr2513 bool = false
			yyq2513[0] = x.Kind != ""
			yyq2513[1] = x.APIVersion != ""
			yyq2513[2] = true
			if yyr2513 || yy2arr2513 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2513 int = 1
				for _, b := range yyq2513 {
					if b {
						yynn2513++
					}
				}
				r.EncodeMapStart(yynn2513)
			}
			if yyr2513 || yy2arr2513 {
				if yyq2513[0] {
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				if yyq2513[1] {
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				if yyq2513[2] {
					yy2521 := &x.ListMeta
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2521) {
					} else {
						z.EncFallback(yy2521)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2513[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2523 := &x.ListMeta
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2523) {
					} else {
						z.EncFallback(yy2523)
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2513 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2528 := z.DecBinary()
	_ = yym2528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2529 := r.ReadMapStart()
			if yyl2529 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2529, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2529 := r.ReadArrayStart()
			if yyl2529 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2530Slc
	var yyhl2530 bool = l >= 0
	for yyj2530 := 0; ; yyj2530++ {
		if yyhl2530 {
			if yyj2530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2530Slc = r.DecodeBytes(yys2530Slc, true, true)
		yys2530 := string(yys2530Slc)
		switch yys2530 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2533 := &x.ListMeta
				yym2534 := z.DecBinary()
				_ = yym2534
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2533) {
				} else {
					z.DecFallback(yyv2533, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2535 := &x.Items
				yym2536 := z.DecBinary()
				_ = yym2536
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2535), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2530)
		} // end switch yys2530
	} // end for yyj2530
	if !yyhl2530 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2537 int
	var yyb2537 bool
	var yyhl2537 bool = l >= 0
	yyj2537++
	if yyhl2537 {
		yyb2537 = yyj2537 > l
	} else {
		yyb2537 = r.CheckBreak()
	}
	if yyb2537 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2537++
	if yyhl2537 {
		yyb2537 = yyj2537 > l
	} else {
		yyb2537 = r.CheckBreak()
	}
	if yyb2537 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2537++
	if yyhl2537 {
		yyb2537 = yyj2537 > l
	} else {
		yyb2537 = r.CheckBreak()
	}
	if yyb2537 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2540 := &x.ListMeta
		yym2541 := z.DecBinary()
		_ = yym2541
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2540) {
		} else {
			z.DecFallback(yyv2540, false)
		}
	}
	yyj2537++
	if yyhl2537 {
		yyb2537 = yyj2537 > l
	} else {
		yyb2537 = r.CheckBreak()
	}
	if yyb2537 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2542 := &x.Items
		yym2543 := z.DecBinary()
		_ = yym2543
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2542), d)
		}
	}
	for {
		yyj2537++
		if yyhl2537 {
			yyb2537 = yyj2537 > l
		} else {
			yyb2537 = r.CheckBreak()
		}
		if yyb2537 {
			break
		}
		z.DecStructFieldNotFound(yyj2537-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2544 := z.EncBinary()
		_ = yym2544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2545 := !z.EncBinary()
			yy2arr2545 := z.EncBasicHandle().StructToArray
			var yyq2545 [4]bool
			_, _, _ = yysep2545, yyq2545, yy2arr2545
			const yyr2545 bool = false
			yyq2545[0] = x.Kind != ""
			yyq2545[1] = x.APIVersion != ""
			yyq2545[2] = true
			if yyr2545 || yy2arr2545 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2545 int = 1
				for _, b := range yyq2545 {
					if b {
						yynn2545++
					}
				}
				r.EncodeMapStart(yynn2545)
			}
			if yyr2545 || yy2arr2545 {
				if yyq2545[0] {
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2545[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				if yyq2545[1] {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2545[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2545 || yy2arr2545 {
				if yyq2545[2] {
					yy2553 := &x.ObjectMeta
					yy2553.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2545[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2554 := &x.ObjectMeta
					yy2554.CodecEncodeSelf(e)
				}
			}
			if yyr2545 || yy2arr2545 {
				yy2556 := &x.Target
				yy2556.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2557 := &x.Target
				yy2557.CodecEncodeSelf(e)
			}
			if yysep2545 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2558 := z.DecBinary()
	_ = yym2558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2559 := r.ReadMapStart()
			if yyl2559 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2559, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2559 := r.ReadArrayStart()
			if yyl2559 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2560Slc
	var yyhl2560 bool = l >= 0
	for yyj2560 := 0; ; yyj2560++ {
		if yyhl2560 {
			if yyj2560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2560Slc = r.DecodeBytes(yys2560Slc, true, true)
		yys2560 := string(yys2560Slc)
		switch yys2560 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2563 := &x.ObjectMeta
				yyv2563.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2564 := &x.Target
				yyv2564.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2560)
		} // end switch yys2560
	} // end for yyj2560
	if !yyhl2560 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2565 int
	var yyb2565 bool
	var yyhl2565 bool = l >= 0
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2568 := &x.ObjectMeta
		yyv2568.CodecDecodeSelf(d)
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2569 := &x.Target
		yyv2569.CodecDecodeSelf(d)
	}
	for {
		yyj2565++
		if yyhl2565 {
			yyb2565 = yyj2565 > l
		} else {
			yyb2565 = r.CheckBreak()
		}
		if yyb2565 {
			break
		}
		z.DecStructFieldNotFound(yyj2565-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2570 := z.EncBinary()
		_ = yym2570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2571 := !z.EncBinary()
			yy2arr2571 := z.EncBasicHandle().StructToArray
			var yyq2571 [3]bool
			_, _, _ = yysep2571, yyq2571, yy2arr2571
			const yyr2571 bool = false
			yyq2571[0] = x.Kind != ""
			yyq2571[1] = x.APIVersion != ""
			if yyr2571 || yy2arr2571 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2571 int = 1
				for _, b := range yyq2571 {
					if b {
						yynn2571++
					}
				}
				r.EncodeMapStart(yynn2571)
			}
			if yyr2571 || yy2arr2571 {
				if yyq2571[0] {
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2571[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				if yyq2571[1] {
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2571[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2571 || yy2arr2571 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2579 := *x.GracePeriodSeconds
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeInt(int64(yy2579))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2581 := *x.GracePeriodSeconds
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeInt(int64(yy2581))
					}
				}
			}
			if yysep2571 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2583 := z.DecBinary()
	_ = yym2583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2584 := r.ReadMapStart()
			if yyl2584 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2584, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2584 := r.ReadArrayStart()
			if yyl2584 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2585Slc
	var yyhl2585 bool = l >= 0
	for yyj2585 := 0; ; yyj2585++ {
		if yyhl2585 {
			if yyj2585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2585Slc = r.DecodeBytes(yys2585Slc, true, true)
		yys2585 := string(yys2585Slc)
		switch yys2585 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2589 := z.DecBinary()
				_ = yym2589
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2585)
		} // end switch yys2585
	} // end for yyj2585
	if !yyhl2585 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2590 int
	var yyb2590 bool
	var yyhl2590 bool = l >= 0
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2594 := z.DecBinary()
		_ = yym2594
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2590++
		if yyhl2590 {
			yyb2590 = yyj2590 > l
		} else {
			yyb2590 = r.CheckBreak()
		}
		if yyb2590 {
			break
		}
		z.DecStructFieldNotFound(yyj2590-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2595 := z.EncBinary()
		_ = yym2595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2596 := !z.EncBinary()
			yy2arr2596 := z.EncBasicHandle().StructToArray
			var yyq2596 [7]bool
			_, _, _ = yysep2596, yyq2596, yy2arr2596
			const yyr2596 bool = false
			yyq2596[0] = x.Kind != ""
			yyq2596[1] = x.APIVersion != ""
			if yyr2596 || yy2arr2596 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2596 int = 5
				for _, b := range yyq2596 {
					if b {
						yynn2596++
					}
				}
				r.EncodeMapStart(yynn2596)
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[0] {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[1] {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				yym2610 := z.EncBinary()
				_ = yym2610
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				yym2611 := z.EncBinary()
				_ = yym2611
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2596 || yy2arr2596 {
				yym2613 := z.EncBinary()
				_ = yym2613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				yym2614 := z.EncBinary()
				_ = yym2614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2596 || yy2arr2596 {
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2616 := *x.TimeoutSeconds
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeInt(int64(yy2616))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2618 := *x.TimeoutSeconds
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeInt(int64(yy2618))
					}
				}
			}
			if yysep2596 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2620 := z.DecBinary()
	_ = yym2620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2621 := r.ReadMapStart()
			if yyl2621 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2621, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2621 := r.ReadArrayStart()
			if yyl2621 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2622Slc
	var yyhl2622 bool = l >= 0
	for yyj2622 := 0; ; yyj2622++ {
		if yyhl2622 {
			if yyj2622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2622Slc = r.DecodeBytes(yys2622Slc, true, true)
		yys2622 := string(yys2622Slc)
		switch yys2622 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2625 := &x.LabelSelector
				yym2626 := z.DecBinary()
				_ = yym2626
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2625) {
				} else {
					z.DecFallback(yyv2625, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2627 := &x.FieldSelector
				yym2628 := z.DecBinary()
				_ = yym2628
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2627) {
				} else {
					z.DecFallback(yyv2627, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2632 := z.DecBinary()
				_ = yym2632
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2622)
		} // end switch yys2622
	} // end for yyj2622
	if !yyhl2622 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2633 int
	var yyb2633 bool
	var yyhl2633 bool = l >= 0
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2636 := &x.LabelSelector
		yym2637 := z.DecBinary()
		_ = yym2637
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2636) {
		} else {
			z.DecFallback(yyv2636, true)
		}
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2638 := &x.FieldSelector
		yym2639 := z.DecBinary()
		_ = yym2639
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2638) {
		} else {
			z.DecFallback(yyv2638, true)
		}
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2643 := z.DecBinary()
		_ = yym2643
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2633++
		if yyhl2633 {
			yyb2633 = yyj2633 > l
		} else {
			yyb2633 = r.CheckBreak()
		}
		if yyb2633 {
			break
		}
		z.DecStructFieldNotFound(yyj2633-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2644 := z.EncBinary()
		_ = yym2644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2645 := !z.EncBinary()
			yy2arr2645 := z.EncBasicHandle().StructToArray
			var yyq2645 [10]bool
			_, _, _ = yysep2645, yyq2645, yy2arr2645
			const yyr2645 bool = false
			yyq2645[0] = x.Kind != ""
			yyq2645[1] = x.APIVersion != ""
			if yyr2645 || yy2arr2645 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2645 int = 8
				for _, b := range yyq2645 {
					if b {
						yynn2645++
					}
				}
				r.EncodeMapStart(yynn2645)
			}
			if yyr2645 || yy2arr2645 {
				if yyq2645[0] {
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2645[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				if yyq2645[1] {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2645[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				yym2653 := z.EncBinary()
				_ = yym2653
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2654 := z.EncBinary()
				_ = yym2654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2645 || yy2arr2645 {
				yym2656 := z.EncBinary()
				_ = yym2656
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				yym2657 := z.EncBinary()
				_ = yym2657
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2645 || yy2arr2645 {
				yym2659 := z.EncBinary()
				_ = yym2659
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				yym2660 := z.EncBinary()
				_ = yym2660
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2645 || yy2arr2645 {
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2662 := *x.SinceSeconds
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						r.EncodeInt(int64(yy2662))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2664 := *x.SinceSeconds
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else {
						r.EncodeInt(int64(yy2664))
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2667 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2667 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2668 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2668 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				yym2670 := z.EncBinary()
				_ = yym2670
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				yym2671 := z.EncBinary()
				_ = yym2671
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2645 || yy2arr2645 {
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2673 := *x.TailLines
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else {
						r.EncodeInt(int64(yy2673))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2675 := *x.TailLines
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeInt(int64(yy2675))
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2678 := *x.LimitBytes
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeInt(int64(yy2678))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2680 := *x.LimitBytes
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeInt(int64(yy2680))
					}
				}
			}
			if yysep2645 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2682 := z.DecBinary()
	_ = yym2682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2683 := r.ReadMapStart()
			if yyl2683 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2683, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2683 := r.ReadArrayStart()
			if yyl2683 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2684Slc
	var yyhl2684 bool = l >= 0
	for yyj2684 := 0; ; yyj2684++ {
		if yyhl2684 {
			if yyj2684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2684Slc = r.DecodeBytes(yys2684Slc, true, true)
		yys2684 := string(yys2684Slc)
		switch yys2684 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2691 := z.DecBinary()
				_ = yym2691
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2693 := z.DecBinary()
				_ = yym2693
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2693 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2693 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2696 := z.DecBinary()
				_ = yym2696
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2698 := z.DecBinary()
				_ = yym2698
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2684)
		} // end switch yys2684
	} // end for yyj2684
	if !yyhl2684 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2699 int
	var yyb2699 bool
	var yyhl2699 bool = l >= 0
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2706 := z.DecBinary()
		_ = yym2706
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2708 := z.DecBinary()
		_ = yym2708
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2708 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2708 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2711 := z.DecBinary()
		_ = yym2711
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2699++
	if yyhl2699 {
		yyb2699 = yyj2699 > l
	} else {
		yyb2699 = r.CheckBreak()
	}
	if yyb2699 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2713 := z.DecBinary()
		_ = yym2713
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2699++
		if yyhl2699 {
			yyb2699 = yyj2699 > l
		} else {
			yyb2699 = r.CheckBreak()
		}
		if yyb2699 {
			break
		}
		z.DecStructFieldNotFound(yyj2699-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2714 := z.EncBinary()
		_ = yym2714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2715 := !z.EncBinary()
			yy2arr2715 := z.EncBasicHandle().StructToArray
			var yyq2715 [7]bool
			_, _, _ = yysep2715, yyq2715, yy2arr2715
			const yyr2715 bool = false
			yyq2715[0] = x.Kind != ""
			yyq2715[1] = x.APIVersion != ""
			yyq2715[2] = x.Stdin != false
			yyq2715[3] = x.Stdout != false
			yyq2715[4] = x.Stderr != false
			yyq2715[5] = x.TTY != false
			yyq2715[6] = x.Container != ""
			if yyr2715 || yy2arr2715 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2715 int = 0
				for _, b := range yyq2715 {
					if b {
						yynn2715++
					}
				}
				r.EncodeMapStart(yynn2715)
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[0] {
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2715[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[1] {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2715[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[2] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2715[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[3] {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2715[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[4] {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2715[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[5] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2715[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2715 || yy2arr2715 {
				if yyq2715[6] {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2715[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2715 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2737 := z.DecBinary()
	_ = yym2737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2738 := r.ReadMapStart()
			if yyl2738 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2738, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2738 := r.ReadArrayStart()
			if yyl2738 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2739Slc
	var yyhl2739 bool = l >= 0
	for yyj2739 := 0; ; yyj2739++ {
		if yyhl2739 {
			if yyj2739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2739Slc = r.DecodeBytes(yys2739Slc, true, true)
		yys2739 := string(yys2739Slc)
		switch yys2739 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2739)
		} // end switch yys2739
	} // end for yyj2739
	if !yyhl2739 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2747 int
	var yyb2747 bool
	var yyhl2747 bool = l >= 0
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2747++
	if yyhl2747 {
		yyb2747 = yyj2747 > l
	} else {
		yyb2747 = r.CheckBreak()
	}
	if yyb2747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2747++
		if yyhl2747 {
			yyb2747 = yyj2747 > l
		} else {
			yyb2747 = r.CheckBreak()
		}
		if yyb2747 {
			break
		}
		z.DecStructFieldNotFound(yyj2747-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2755 := z.EncBinary()
		_ = yym2755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2756 := !z.EncBinary()
			yy2arr2756 := z.EncBasicHandle().StructToArray
			var yyq2756 [8]bool
			_, _, _ = yysep2756, yyq2756, yy2arr2756
			const yyr2756 bool = false
			yyq2756[0] = x.Kind != ""
			yyq2756[1] = x.APIVersion != ""
			if yyr2756 || yy2arr2756 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2756 int = 6
				for _, b := range yyq2756 {
					if b {
						yynn2756++
					}
				}
				r.EncodeMapStart(yynn2756)
			}
			if yyr2756 || yy2arr2756 {
				if yyq2756[0] {
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2756[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2756 || yy2arr2756 {
				if yyq2756[1] {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2756[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2756 || yy2arr2756 {
				yym2764 := z.EncBinary()
				_ = yym2764
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				yym2765 := z.EncBinary()
				_ = yym2765
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2756 || yy2arr2756 {
				yym2767 := z.EncBinary()
				_ = yym2767
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				yym2768 := z.EncBinary()
				_ = yym2768
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2756 || yy2arr2756 {
				yym2770 := z.EncBinary()
				_ = yym2770
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				yym2771 := z.EncBinary()
				_ = yym2771
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2756 || yy2arr2756 {
				yym2773 := z.EncBinary()
				_ = yym2773
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				yym2774 := z.EncBinary()
				_ = yym2774
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2756 || yy2arr2756 {
				yym2776 := z.EncBinary()
				_ = yym2776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2777 := z.EncBinary()
				_ = yym2777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2756 || yy2arr2756 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2780 := z.EncBinary()
					_ = yym2780
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2756 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2781 := z.DecBinary()
	_ = yym2781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2782 := r.ReadMapStart()
			if yyl2782 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2782, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2782 := r.ReadArrayStart()
			if yyl2782 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2783Slc
	var yyhl2783 bool = l >= 0
	for yyj2783 := 0; ; yyj2783++ {
		if yyhl2783 {
			if yyj2783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2783Slc = r.DecodeBytes(yys2783Slc, true, true)
		yys2783 := string(yys2783Slc)
		switch yys2783 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2791 := &x.Command
				yym2792 := z.DecBinary()
				_ = yym2792
				if false {
				} else {
					z.F.DecSliceStringX(yyv2791, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2783)
		} // end switch yys2783
	} // end for yyj2783
	if !yyhl2783 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2793 int
	var yyb2793 bool
	var yyhl2793 bool = l >= 0
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2801 := &x.Command
		yym2802 := z.DecBinary()
		_ = yym2802
		if false {
		} else {
			z.F.DecSliceStringX(yyv2801, false, d)
		}
	}
	for {
		yyj2793++
		if yyhl2793 {
			yyb2793 = yyj2793 > l
		} else {
			yyb2793 = r.CheckBreak()
		}
		if yyb2793 {
			break
		}
		z.DecStructFieldNotFound(yyj2793-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2803 := z.EncBinary()
		_ = yym2803
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2804 := !z.EncBinary()
			yy2arr2804 := z.EncBasicHandle().StructToArray
			var yyq2804 [3]bool
			_, _, _ = yysep2804, yyq2804, yy2arr2804
			const yyr2804 bool = false
			yyq2804[0] = x.Kind != ""
			yyq2804[1] = x.APIVersion != ""
			if yyr2804 || yy2arr2804 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2804 int = 1
				for _, b := range yyq2804 {
					if b {
						yynn2804++
					}
				}
				r.EncodeMapStart(yynn2804)
			}
			if yyr2804 || yy2arr2804 {
				if yyq2804[0] {
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2804[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2804 || yy2arr2804 {
				if yyq2804[1] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2804[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2804 || yy2arr2804 {
				yym2812 := z.EncBinary()
				_ = yym2812
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				yym2813 := z.EncBinary()
				_ = yym2813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep2804 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2814 := z.DecBinary()
	_ = yym2814
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2815 := r.ReadMapStart()
			if yyl2815 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2815, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2815 := r.ReadArrayStart()
			if yyl2815 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2815, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2816Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2816Slc
	var yyhl2816 bool = l >= 0
	for yyj2816 := 0; ; yyj2816++ {
		if yyhl2816 {
			if yyj2816 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2816Slc = r.DecodeBytes(yys2816Slc, true, true)
		yys2816 := string(yys2816Slc)
		switch yys2816 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2816)
		} // end switch yys2816
	} // end for yyj2816
	if !yyhl2816 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2820 int
	var yyb2820 bool
	var yyhl2820 bool = l >= 0
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2820++
		if yyhl2820 {
			yyb2820 = yyj2820 > l
		} else {
			yyb2820 = r.CheckBreak()
		}
		if yyb2820 {
			break
		}
		z.DecStructFieldNotFound(yyj2820-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2824 := z.EncBinary()
		_ = yym2824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2825 := !z.EncBinary()
			yy2arr2825 := z.EncBasicHandle().StructToArray
			var yyq2825 [7]bool
			_, _, _ = yysep2825, yyq2825, yy2arr2825
			const yyr2825 bool = false
			yyq2825[0] = x.Kind != ""
			yyq2825[1] = x.Namespace != ""
			yyq2825[2] = x.Name != ""
			yyq2825[3] = x.UID != ""
			yyq2825[4] = x.APIVersion != ""
			yyq2825[5] = x.ResourceVersion != ""
			yyq2825[6] = x.FieldPath != ""
			if yyr2825 || yy2arr2825 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2825 int = 0
				for _, b := range yyq2825 {
					if b {
						yynn2825++
					}
				}
				r.EncodeMapStart(yynn2825)
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[0] {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[1] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[2] {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[3] {
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2837 := z.EncBinary()
					_ = yym2837
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[4] {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[5] {
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2843 := z.EncBinary()
					_ = yym2843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2825 || yy2arr2825 {
				if yyq2825[6] {
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2825[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2825 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2847 := z.DecBinary()
	_ = yym2847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2848 := r.ReadMapStart()
			if yyl2848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2848, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2848 := r.ReadArrayStart()
			if yyl2848 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2849Slc
	var yyhl2849 bool = l >= 0
	for yyj2849 := 0; ; yyj2849++ {
		if yyhl2849 {
			if yyj2849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2849Slc = r.DecodeBytes(yys2849Slc, true, true)
		yys2849 := string(yys2849Slc)
		switch yys2849 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2849)
		} // end switch yys2849
	} // end for yyj2849
	if !yyhl2849 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2857 int
	var yyb2857 bool
	var yyhl2857 bool = l >= 0
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2857++
	if yyhl2857 {
		yyb2857 = yyj2857 > l
	} else {
		yyb2857 = r.CheckBreak()
	}
	if yyb2857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2857++
		if yyhl2857 {
			yyb2857 = yyj2857 > l
		} else {
			yyb2857 = r.CheckBreak()
		}
		if yyb2857 {
			break
		}
		z.DecStructFieldNotFound(yyj2857-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2865 := z.EncBinary()
		_ = yym2865
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2866 := !z.EncBinary()
			yy2arr2866 := z.EncBasicHandle().StructToArray
			var yyq2866 [1]bool
			_, _, _ = yysep2866, yyq2866, yy2arr2866
			const yyr2866 bool = false
			if yyr2866 || yy2arr2866 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2866 int = 1
				for _, b := range yyq2866 {
					if b {
						yynn2866++
					}
				}
				r.EncodeMapStart(yynn2866)
			}
			if yyr2866 || yy2arr2866 {
				yym2868 := z.EncBinary()
				_ = yym2868
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2869 := z.EncBinary()
				_ = yym2869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep2866 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2870 := z.DecBinary()
	_ = yym2870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2871 := r.ReadMapStart()
			if yyl2871 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2871, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2871 := r.ReadArrayStart()
			if yyl2871 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2872Slc
	var yyhl2872 bool = l >= 0
	for yyj2872 := 0; ; yyj2872++ {
		if yyhl2872 {
			if yyj2872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2872Slc = r.DecodeBytes(yys2872Slc, true, true)
		yys2872 := string(yys2872Slc)
		switch yys2872 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2872)
		} // end switch yys2872
	} // end for yyj2872
	if !yyhl2872 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2874 int
	var yyb2874 bool
	var yyhl2874 bool = l >= 0
	yyj2874++
	if yyhl2874 {
		yyb2874 = yyj2874 > l
	} else {
		yyb2874 = r.CheckBreak()
	}
	if yyb2874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2874++
		if yyhl2874 {
			yyb2874 = yyj2874 > l
		} else {
			yyb2874 = r.CheckBreak()
		}
		if yyb2874 {
			break
		}
		z.DecStructFieldNotFound(yyj2874-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2876 := z.EncBinary()
		_ = yym2876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2877 := !z.EncBinary()
			yy2arr2877 := z.EncBasicHandle().StructToArray
			var yyq2877 [3]bool
			_, _, _ = yysep2877, yyq2877, yy2arr2877
			const yyr2877 bool = false
			yyq2877[0] = x.Kind != ""
			yyq2877[1] = x.APIVersion != ""
			yyq2877[2] = true
			if yyr2877 || yy2arr2877 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2877 int = 0
				for _, b := range yyq2877 {
					if b {
						yynn2877++
					}
				}
				r.EncodeMapStart(yynn2877)
			}
			if yyr2877 || yy2arr2877 {
				if yyq2877[0] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				if yyq2877[1] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				if yyq2877[2] {
					yy2885 := &x.Reference
					yy2885.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2877[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2886 := &x.Reference
					yy2886.CodecEncodeSelf(e)
				}
			}
			if yysep2877 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2887 := z.DecBinary()
	_ = yym2887
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2888 := r.ReadMapStart()
			if yyl2888 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2888, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2888 := r.ReadArrayStart()
			if yyl2888 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2888, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2889Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2889Slc
	var yyhl2889 bool = l >= 0
	for yyj2889 := 0; ; yyj2889++ {
		if yyhl2889 {
			if yyj2889 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2889Slc = r.DecodeBytes(yys2889Slc, true, true)
		yys2889 := string(yys2889Slc)
		switch yys2889 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2892 := &x.Reference
				yyv2892.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2889)
		} // end switch yys2889
	} // end for yyj2889
	if !yyhl2889 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2893 int
	var yyb2893 bool
	var yyhl2893 bool = l >= 0
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2896 := &x.Reference
		yyv2896.CodecDecodeSelf(d)
	}
	for {
		yyj2893++
		if yyhl2893 {
			yyb2893 = yyj2893 > l
		} else {
			yyb2893 = r.CheckBreak()
		}
		if yyb2893 {
			break
		}
		z.DecStructFieldNotFound(yyj2893-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2897 := z.EncBinary()
		_ = yym2897
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2898 := !z.EncBinary()
			yy2arr2898 := z.EncBasicHandle().StructToArray
			var yyq2898 [2]bool
			_, _, _ = yysep2898, yyq2898, yy2arr2898
			const yyr2898 bool = false
			yyq2898[0] = x.Component != ""
			yyq2898[1] = x.Host != ""
			if yyr2898 || yy2arr2898 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2898 int = 0
				for _, b := range yyq2898 {
					if b {
						yynn2898++
					}
				}
				r.EncodeMapStart(yynn2898)
			}
			if yyr2898 || yy2arr2898 {
				if yyq2898[0] {
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2898[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2898 || yy2arr2898 {
				if yyq2898[1] {
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2898[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2898 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2905 := z.DecBinary()
	_ = yym2905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2906 := r.ReadMapStart()
			if yyl2906 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2906, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2906 := r.ReadArrayStart()
			if yyl2906 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2907Slc
	var yyhl2907 bool = l >= 0
	for yyj2907 := 0; ; yyj2907++ {
		if yyhl2907 {
			if yyj2907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2907Slc = r.DecodeBytes(yys2907Slc, true, true)
		yys2907 := string(yys2907Slc)
		switch yys2907 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2907)
		} // end switch yys2907
	} // end for yyj2907
	if !yyhl2907 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2910 int
	var yyb2910 bool
	var yyhl2910 bool = l >= 0
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2910++
	if yyhl2910 {
		yyb2910 = yyj2910 > l
	} else {
		yyb2910 = r.CheckBreak()
	}
	if yyb2910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2910++
		if yyhl2910 {
			yyb2910 = yyj2910 > l
		} else {
			yyb2910 = r.CheckBreak()
		}
		if yyb2910 {
			break
		}
		z.DecStructFieldNotFound(yyj2910-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2913 := z.EncBinary()
		_ = yym2913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2914 := !z.EncBinary()
			yy2arr2914 := z.EncBasicHandle().StructToArray
			var yyq2914 [10]bool
			_, _, _ = yysep2914, yyq2914, yy2arr2914
			const yyr2914 bool = false
			yyq2914[0] = x.Kind != ""
			yyq2914[1] = x.APIVersion != ""
			yyq2914[2] = true
			yyq2914[3] = true
			yyq2914[4] = x.Reason != ""
			yyq2914[5] = x.Message != ""
			yyq2914[6] = true
			yyq2914[7] = true
			yyq2914[8] = true
			yyq2914[9] = x.Count != 0
			if yyr2914 || yy2arr2914 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2914 int = 0
				for _, b := range yyq2914 {
					if b {
						yynn2914++
					}
				}
				r.EncodeMapStart(yynn2914)
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[0] {
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2914[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[1] {
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2914[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[2] {
					yy2922 := &x.ObjectMeta
					yy2922.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2914[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2923 := &x.ObjectMeta
					yy2923.CodecEncodeSelf(e)
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[3] {
					yy2925 := &x.InvolvedObject
					yy2925.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2914[3] {
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					yy2926 := &x.InvolvedObject
					yy2926.CodecEncodeSelf(e)
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[4] {
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2914[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[5] {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2914[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[6] {
					yy2934 := &x.Source
					yy2934.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2914[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2935 := &x.Source
					yy2935.CodecEncodeSelf(e)
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[7] {
					yy2937 := &x.FirstTimestamp
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2937) {
					} else if yym2938 {
						z.EncBinaryMarshal(yy2937)
					} else if !yym2938 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2937)
					} else {
						z.EncFallback(yy2937)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2914[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2939 := &x.FirstTimestamp
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2939) {
					} else if yym2940 {
						z.EncBinaryMarshal(yy2939)
					} else if !yym2940 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2939)
					} else {
						z.EncFallback(yy2939)
					}
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[8] {
					yy2942 := &x.LastTimestamp
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2942) {
					} else if yym2943 {
						z.EncBinaryMarshal(yy2942)
					} else if !yym2943 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2942)
					} else {
						z.EncFallback(yy2942)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2914[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2944 := &x.LastTimestamp
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2944) {
					} else if yym2945 {
						z.EncBinaryMarshal(yy2944)
					} else if !yym2945 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2944)
					} else {
						z.EncFallback(yy2944)
					}
				}
			}
			if yyr2914 || yy2arr2914 {
				if yyq2914[9] {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2914[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2914 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2949 := z.DecBinary()
	_ = yym2949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2950 := r.ReadMapStart()
			if yyl2950 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2950, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2950 := r.ReadArrayStart()
			if yyl2950 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2951Slc
	var yyhl2951 bool = l >= 0
	for yyj2951 := 0; ; yyj2951++ {
		if yyhl2951 {
			if yyj2951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2951Slc = r.DecodeBytes(yys2951Slc, true, true)
		yys2951 := string(yys2951Slc)
		switch yys2951 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2954 := &x.ObjectMeta
				yyv2954.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2955 := &x.InvolvedObject
				yyv2955.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2958 := &x.Source
				yyv2958.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2959 := &x.FirstTimestamp
				yym2960 := z.DecBinary()
				_ = yym2960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2959) {
				} else if yym2960 {
					z.DecBinaryUnmarshal(yyv2959)
				} else if !yym2960 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2959)
				} else {
					z.DecFallback(yyv2959, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2961 := &x.LastTimestamp
				yym2962 := z.DecBinary()
				_ = yym2962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2961) {
				} else if yym2962 {
					z.DecBinaryUnmarshal(yyv2961)
				} else if !yym2962 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2961)
				} else {
					z.DecFallback(yyv2961, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2951)
		} // end switch yys2951
	} // end for yyj2951
	if !yyhl2951 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2964 int
	var yyb2964 bool
	var yyhl2964 bool = l >= 0
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2967 := &x.ObjectMeta
		yyv2967.CodecDecodeSelf(d)
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2968 := &x.InvolvedObject
		yyv2968.CodecDecodeSelf(d)
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2971 := &x.Source
		yyv2971.CodecDecodeSelf(d)
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2972 := &x.FirstTimestamp
		yym2973 := z.DecBinary()
		_ = yym2973
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2972) {
		} else if yym2973 {
			z.DecBinaryUnmarshal(yyv2972)
		} else if !yym2973 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2972)
		} else {
			z.DecFallback(yyv2972, false)
		}
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2974 := &x.LastTimestamp
		yym2975 := z.DecBinary()
		_ = yym2975
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2974) {
		} else if yym2975 {
			z.DecBinaryUnmarshal(yyv2974)
		} else if !yym2975 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2974)
		} else {
			z.DecFallback(yyv2974, false)
		}
	}
	yyj2964++
	if yyhl2964 {
		yyb2964 = yyj2964 > l
	} else {
		yyb2964 = r.CheckBreak()
	}
	if yyb2964 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2964++
		if yyhl2964 {
			yyb2964 = yyj2964 > l
		} else {
			yyb2964 = r.CheckBreak()
		}
		if yyb2964 {
			break
		}
		z.DecStructFieldNotFound(yyj2964-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2977 := z.EncBinary()
		_ = yym2977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2978 := !z.EncBinary()
			yy2arr2978 := z.EncBasicHandle().StructToArray
			var yyq2978 [4]bool
			_, _, _ = yysep2978, yyq2978, yy2arr2978
			const yyr2978 bool = false
			yyq2978[0] = x.Kind != ""
			yyq2978[1] = x.APIVersion != ""
			yyq2978[2] = true
			if yyr2978 || yy2arr2978 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2978 int = 1
				for _, b := range yyq2978 {
					if b {
						yynn2978++
					}
				}
				r.EncodeMapStart(yynn2978)
			}
			if yyr2978 || yy2arr2978 {
				if yyq2978[0] {
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2978[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2978 || yy2arr2978 {
				if yyq2978[1] {
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2978[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2978 || yy2arr2978 {
				if yyq2978[2] {
					yy2986 := &x.ListMeta
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2986) {
					} else {
						z.EncFallback(yy2986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2978[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2988 := &x.ListMeta
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2988) {
					} else {
						z.EncFallback(yy2988)
					}
				}
			}
			if yyr2978 || yy2arr2978 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2978 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2993 := z.DecBinary()
	_ = yym2993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2994 := r.ReadMapStart()
			if yyl2994 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2994, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2994 := r.ReadArrayStart()
			if yyl2994 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2995Slc
	var yyhl2995 bool = l >= 0
	for yyj2995 := 0; ; yyj2995++ {
		if yyhl2995 {
			if yyj2995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2995Slc = r.DecodeBytes(yys2995Slc, true, true)
		yys2995 := string(yys2995Slc)
		switch yys2995 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2998 := &x.ListMeta
				yym2999 := z.DecBinary()
				_ = yym2999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2998) {
				} else {
					z.DecFallback(yyv2998, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3000 := &x.Items
				yym3001 := z.DecBinary()
				_ = yym3001
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2995)
		} // end switch yys2995
	} // end for yyj2995
	if !yyhl2995 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3002 int
	var yyb3002 bool
	var yyhl3002 bool = l >= 0
	yyj3002++
	if yyhl3002 {
		yyb3002 = yyj3002 > l
	} else {
		yyb3002 = r.CheckBreak()
	}
	if yyb3002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3002++
	if yyhl3002 {
		yyb3002 = yyj3002 > l
	} else {
		yyb3002 = r.CheckBreak()
	}
	if yyb3002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3002++
	if yyhl3002 {
		yyb3002 = yyj3002 > l
	} else {
		yyb3002 = r.CheckBreak()
	}
	if yyb3002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3005 := &x.ListMeta
		yym3006 := z.DecBinary()
		_ = yym3006
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3005) {
		} else {
			z.DecFallback(yyv3005, false)
		}
	}
	yyj3002++
	if yyhl3002 {
		yyb3002 = yyj3002 > l
	} else {
		yyb3002 = r.CheckBreak()
	}
	if yyb3002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3007 := &x.Items
		yym3008 := z.DecBinary()
		_ = yym3008
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3007), d)
		}
	}
	for {
		yyj3002++
		if yyhl3002 {
			yyb3002 = yyj3002 > l
		} else {
			yyb3002 = r.CheckBreak()
		}
		if yyb3002 {
			break
		}
		z.DecStructFieldNotFound(yyj3002-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3009 := z.EncBinary()
		_ = yym3009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3010 := !z.EncBinary()
			yy2arr3010 := z.EncBasicHandle().StructToArray
			var yyq3010 [4]bool
			_, _, _ = yysep3010, yyq3010, yy2arr3010
			const yyr3010 bool = false
			yyq3010[0] = x.Kind != ""
			yyq3010[1] = x.APIVersion != ""
			yyq3010[2] = true
			if yyr3010 || yy2arr3010 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3010 int = 1
				for _, b := range yyq3010 {
					if b {
						yynn3010++
					}
				}
				r.EncodeMapStart(yynn3010)
			}
			if yyr3010 || yy2arr3010 {
				if yyq3010[0] {
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3010[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3010 || yy2arr3010 {
				if yyq3010[1] {
					yym3015 := z.EncBinary()
					_ = yym3015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3010[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3010 || yy2arr3010 {
				if yyq3010[2] {
					yy3018 := &x.ListMeta
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3018) {
					} else {
						z.EncFallback(yy3018)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3010[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3020 := &x.ListMeta
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3020) {
					} else {
						z.EncFallback(yy3020)
					}
				}
			}
			if yyr3010 || yy2arr3010 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3023 := z.EncBinary()
					_ = yym3023
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3024 := z.EncBinary()
					_ = yym3024
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep3010 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3025 := z.DecBinary()
	_ = yym3025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3026 := r.ReadMapStart()
			if yyl3026 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3026, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3026 := r.ReadArrayStart()
			if yyl3026 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3027Slc
	var yyhl3027 bool = l >= 0
	for yyj3027 := 0; ; yyj3027++ {
		if yyhl3027 {
			if yyj3027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3027Slc = r.DecodeBytes(yys3027Slc, true, true)
		yys3027 := string(yys3027Slc)
		switch yys3027 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3030 := &x.ListMeta
				yym3031 := z.DecBinary()
				_ = yym3031
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3030) {
				} else {
					z.DecFallback(yyv3030, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3032 := &x.Items
				yym3033 := z.DecBinary()
				_ = yym3033
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3032), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3027)
		} // end switch yys3027
	} // end for yyj3027
	if !yyhl3027 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3034 int
	var yyb3034 bool
	var yyhl3034 bool = l >= 0
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3037 := &x.ListMeta
		yym3038 := z.DecBinary()
		_ = yym3038
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3037) {
		} else {
			z.DecFallback(yyv3037, false)
		}
	}
	yyj3034++
	if yyhl3034 {
		yyb3034 = yyj3034 > l
	} else {
		yyb3034 = r.CheckBreak()
	}
	if yyb3034 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3039 := &x.Items
		yym3040 := z.DecBinary()
		_ = yym3040
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3039), d)
		}
	}
	for {
		yyj3034++
		if yyhl3034 {
			yyb3034 = yyj3034 > l
		} else {
			yyb3034 = r.CheckBreak()
		}
		if yyb3034 {
			break
		}
		z.DecStructFieldNotFound(yyj3034-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3041 := z.EncBinary()
	_ = yym3041
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3042 := z.DecBinary()
	_ = yym3042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3043 := z.EncBinary()
		_ = yym3043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3044 := !z.EncBinary()
			yy2arr3044 := z.EncBasicHandle().StructToArray
			var yyq3044 [6]bool
			_, _, _ = yysep3044, yyq3044, yy2arr3044
			const yyr3044 bool = false
			yyq3044[0] = x.Type != ""
			yyq3044[1] = len(x.Max) != 0
			yyq3044[2] = len(x.Min) != 0
			yyq3044[3] = len(x.Default) != 0
			yyq3044[4] = len(x.DefaultRequest) != 0
			yyq3044[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3044 || yy2arr3044 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3044 int = 0
				for _, b := range yyq3044 {
					if b {
						yynn3044++
					}
				}
				r.EncodeMapStart(yynn3044)
			}
			if yyr3044 || yy2arr3044 {
				if yyq3044[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3044[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3044 || yy2arr3044 {
				if yyq3044[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				if yyq3044[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				if yyq3044[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				if yyq3044[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				if yyq3044[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3044[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3044 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3051 := z.DecBinary()
	_ = yym3051
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3052 := r.ReadMapStart()
			if yyl3052 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3052, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3052 := r.ReadArrayStart()
			if yyl3052 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3052, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3053Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3053Slc
	var yyhl3053 bool = l >= 0
	for yyj3053 := 0; ; yyj3053++ {
		if yyhl3053 {
			if yyj3053 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3053Slc = r.DecodeBytes(yys3053Slc, true, true)
		yys3053 := string(yys3053Slc)
		switch yys3053 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3055 := &x.Max
				yyv3055.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3056 := &x.Min
				yyv3056.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3057 := &x.Default
				yyv3057.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3058 := &x.DefaultRequest
				yyv3058.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3059 := &x.MaxLimitRequestRatio
				yyv3059.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3053)
		} // end switch yys3053
	} // end for yyj3053
	if !yyhl3053 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3060 int
	var yyb3060 bool
	var yyhl3060 bool = l >= 0
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3062 := &x.Max
		yyv3062.CodecDecodeSelf(d)
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3063 := &x.Min
		yyv3063.CodecDecodeSelf(d)
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3064 := &x.Default
		yyv3064.CodecDecodeSelf(d)
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3065 := &x.DefaultRequest
		yyv3065.CodecDecodeSelf(d)
	}
	yyj3060++
	if yyhl3060 {
		yyb3060 = yyj3060 > l
	} else {
		yyb3060 = r.CheckBreak()
	}
	if yyb3060 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3066 := &x.MaxLimitRequestRatio
		yyv3066.CodecDecodeSelf(d)
	}
	for {
		yyj3060++
		if yyhl3060 {
			yyb3060 = yyj3060 > l
		} else {
			yyb3060 = r.CheckBreak()
		}
		if yyb3060 {
			break
		}
		z.DecStructFieldNotFound(yyj3060-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3067 := z.EncBinary()
		_ = yym3067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3068 := !z.EncBinary()
			yy2arr3068 := z.EncBasicHandle().StructToArray
			var yyq3068 [1]bool
			_, _, _ = yysep3068, yyq3068, yy2arr3068
			const yyr3068 bool = false
			if yyr3068 || yy2arr3068 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3068 int = 1
				for _, b := range yyq3068 {
					if b {
						yynn3068++
					}
				}
				r.EncodeMapStart(yynn3068)
			}
			if yyr3068 || yy2arr3068 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3068 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3072 := z.DecBinary()
	_ = yym3072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3073 := r.ReadMapStart()
			if yyl3073 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3073, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3073 := r.ReadArrayStart()
			if yyl3073 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3074Slc
	var yyhl3074 bool = l >= 0
	for yyj3074 := 0; ; yyj3074++ {
		if yyhl3074 {
			if yyj3074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3074Slc = r.DecodeBytes(yys3074Slc, true, true)
		yys3074 := string(yys3074Slc)
		switch yys3074 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3075 := &x.Limits
				yym3076 := z.DecBinary()
				_ = yym3076
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3075), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3074)
		} // end switch yys3074
	} // end for yyj3074
	if !yyhl3074 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3078 := &x.Limits
		yym3079 := z.DecBinary()
		_ = yym3079
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3078), d)
		}
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3080 := z.EncBinary()
		_ = yym3080
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3081 := !z.EncBinary()
			yy2arr3081 := z.EncBasicHandle().StructToArray
			var yyq3081 [4]bool
			_, _, _ = yysep3081, yyq3081, yy2arr3081
			const yyr3081 bool = false
			yyq3081[0] = x.Kind != ""
			yyq3081[1] = x.APIVersion != ""
			yyq3081[2] = true
			yyq3081[3] = true
			if yyr3081 || yy2arr3081 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3081 int = 0
				for _, b := range yyq3081 {
					if b {
						yynn3081++
					}
				}
				r.EncodeMapStart(yynn3081)
			}
			if yyr3081 || yy2arr3081 {
				if yyq3081[0] {
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3081[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3081 || yy2arr3081 {
				if yyq3081[1] {
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3081[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3081 || yy2arr3081 {
				if yyq3081[2] {
					yy3089 := &x.ObjectMeta
					yy3089.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3081[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3090 := &x.ObjectMeta
					yy3090.CodecEncodeSelf(e)
				}
			}
			if yyr3081 || yy2arr3081 {
				if yyq3081[3] {
					yy3092 := &x.Spec
					yy3092.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3081[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3093 := &x.Spec
					yy3093.CodecEncodeSelf(e)
				}
			}
			if yysep3081 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3094 := z.DecBinary()
	_ = yym3094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3095 := r.ReadMapStart()
			if yyl3095 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3095, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3095 := r.ReadArrayStart()
			if yyl3095 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3096Slc
	var yyhl3096 bool = l >= 0
	for yyj3096 := 0; ; yyj3096++ {
		if yyhl3096 {
			if yyj3096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3096Slc = r.DecodeBytes(yys3096Slc, true, true)
		yys3096 := string(yys3096Slc)
		switch yys3096 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3099 := &x.ObjectMeta
				yyv3099.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3100 := &x.Spec
				yyv3100.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3096)
		} // end switch yys3096
	} // end for yyj3096
	if !yyhl3096 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3101 int
	var yyb3101 bool
	var yyhl3101 bool = l >= 0
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3104 := &x.ObjectMeta
		yyv3104.CodecDecodeSelf(d)
	}
	yyj3101++
	if yyhl3101 {
		yyb3101 = yyj3101 > l
	} else {
		yyb3101 = r.CheckBreak()
	}
	if yyb3101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3105 := &x.Spec
		yyv3105.CodecDecodeSelf(d)
	}
	for {
		yyj3101++
		if yyhl3101 {
			yyb3101 = yyj3101 > l
		} else {
			yyb3101 = r.CheckBreak()
		}
		if yyb3101 {
			break
		}
		z.DecStructFieldNotFound(yyj3101-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3106 := z.EncBinary()
		_ = yym3106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3107 := !z.EncBinary()
			yy2arr3107 := z.EncBasicHandle().StructToArray
			var yyq3107 [4]bool
			_, _, _ = yysep3107, yyq3107, yy2arr3107
			const yyr3107 bool = false
			yyq3107[0] = x.Kind != ""
			yyq3107[1] = x.APIVersion != ""
			yyq3107[2] = true
			if yyr3107 || yy2arr3107 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3107 int = 1
				for _, b := range yyq3107 {
					if b {
						yynn3107++
					}
				}
				r.EncodeMapStart(yynn3107)
			}
			if yyr3107 || yy2arr3107 {
				if yyq3107[0] {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3107[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3107 || yy2arr3107 {
				if yyq3107[1] {
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3107[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3107 || yy2arr3107 {
				if yyq3107[2] {
					yy3115 := &x.ListMeta
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3115) {
					} else {
						z.EncFallback(yy3115)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3107[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3117 := &x.ListMeta
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else {
						z.EncFallback(yy3117)
					}
				}
			}
			if yyr3107 || yy2arr3107 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3107 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3123 := r.ReadMapStart()
			if yyl3123 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3123, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3123 := r.ReadArrayStart()
			if yyl3123 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3124Slc
	var yyhl3124 bool = l >= 0
	for yyj3124 := 0; ; yyj3124++ {
		if yyhl3124 {
			if yyj3124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3124Slc = r.DecodeBytes(yys3124Slc, true, true)
		yys3124 := string(yys3124Slc)
		switch yys3124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3127 := &x.ListMeta
				yym3128 := z.DecBinary()
				_ = yym3128
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3127) {
				} else {
					z.DecFallback(yyv3127, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3129 := &x.Items
				yym3130 := z.DecBinary()
				_ = yym3130
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3129), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3124)
		} // end switch yys3124
	} // end for yyj3124
	if !yyhl3124 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3131 int
	var yyb3131 bool
	var yyhl3131 bool = l >= 0
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3134 := &x.ListMeta
		yym3135 := z.DecBinary()
		_ = yym3135
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3134) {
		} else {
			z.DecFallback(yyv3134, false)
		}
	}
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3136 := &x.Items
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3136), d)
		}
	}
	for {
		yyj3131++
		if yyhl3131 {
			yyb3131 = yyj3131 > l
		} else {
			yyb3131 = r.CheckBreak()
		}
		if yyb3131 {
			break
		}
		z.DecStructFieldNotFound(yyj3131-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3138 := z.EncBinary()
		_ = yym3138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3139 := !z.EncBinary()
			yy2arr3139 := z.EncBasicHandle().StructToArray
			var yyq3139 [1]bool
			_, _, _ = yysep3139, yyq3139, yy2arr3139
			const yyr3139 bool = false
			yyq3139[0] = len(x.Hard) != 0
			if yyr3139 || yy2arr3139 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3139 int = 0
				for _, b := range yyq3139 {
					if b {
						yynn3139++
					}
				}
				r.EncodeMapStart(yynn3139)
			}
			if yyr3139 || yy2arr3139 {
				if yyq3139[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3139[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3139 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3141 := z.DecBinary()
	_ = yym3141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3142 := r.ReadMapStart()
			if yyl3142 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3142, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3142 := r.ReadArrayStart()
			if yyl3142 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3143Slc
	var yyhl3143 bool = l >= 0
	for yyj3143 := 0; ; yyj3143++ {
		if yyhl3143 {
			if yyj3143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3143Slc = r.DecodeBytes(yys3143Slc, true, true)
		yys3143 := string(yys3143Slc)
		switch yys3143 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3144 := &x.Hard
				yyv3144.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3143)
		} // end switch yys3143
	} // end for yyj3143
	if !yyhl3143 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3145 int
	var yyb3145 bool
	var yyhl3145 bool = l >= 0
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3146 := &x.Hard
		yyv3146.CodecDecodeSelf(d)
	}
	for {
		yyj3145++
		if yyhl3145 {
			yyb3145 = yyj3145 > l
		} else {
			yyb3145 = r.CheckBreak()
		}
		if yyb3145 {
			break
		}
		z.DecStructFieldNotFound(yyj3145-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3147 := z.EncBinary()
		_ = yym3147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3148 := !z.EncBinary()
			yy2arr3148 := z.EncBasicHandle().StructToArray
			var yyq3148 [2]bool
			_, _, _ = yysep3148, yyq3148, yy2arr3148
			const yyr3148 bool = false
			yyq3148[0] = len(x.Hard) != 0
			yyq3148[1] = len(x.Used) != 0
			if yyr3148 || yy2arr3148 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3148 int = 0
				for _, b := range yyq3148 {
					if b {
						yynn3148++
					}
				}
				r.EncodeMapStart(yynn3148)
			}
			if yyr3148 || yy2arr3148 {
				if yyq3148[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3148[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3148 || yy2arr3148 {
				if yyq3148[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3148[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3148 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3151 := z.DecBinary()
	_ = yym3151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3152 := r.ReadMapStart()
			if yyl3152 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3152, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3152 := r.ReadArrayStart()
			if yyl3152 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3153Slc
	var yyhl3153 bool = l >= 0
	for yyj3153 := 0; ; yyj3153++ {
		if yyhl3153 {
			if yyj3153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3153Slc = r.DecodeBytes(yys3153Slc, true, true)
		yys3153 := string(yys3153Slc)
		switch yys3153 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3154 := &x.Hard
				yyv3154.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3155 := &x.Used
				yyv3155.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3153)
		} // end switch yys3153
	} // end for yyj3153
	if !yyhl3153 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3156 int
	var yyb3156 bool
	var yyhl3156 bool = l >= 0
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3157 := &x.Hard
		yyv3157.CodecDecodeSelf(d)
	}
	yyj3156++
	if yyhl3156 {
		yyb3156 = yyj3156 > l
	} else {
		yyb3156 = r.CheckBreak()
	}
	if yyb3156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3158 := &x.Used
		yyv3158.CodecDecodeSelf(d)
	}
	for {
		yyj3156++
		if yyhl3156 {
			yyb3156 = yyj3156 > l
		} else {
			yyb3156 = r.CheckBreak()
		}
		if yyb3156 {
			break
		}
		z.DecStructFieldNotFound(yyj3156-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3159 := z.EncBinary()
		_ = yym3159
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3160 := !z.EncBinary()
			yy2arr3160 := z.EncBasicHandle().StructToArray
			var yyq3160 [5]bool
			_, _, _ = yysep3160, yyq3160, yy2arr3160
			const yyr3160 bool = false
			yyq3160[0] = x.Kind != ""
			yyq3160[1] = x.APIVersion != ""
			yyq3160[2] = true
			yyq3160[3] = true
			yyq3160[4] = true
			if yyr3160 || yy2arr3160 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3160 int = 0
				for _, b := range yyq3160 {
					if b {
						yynn3160++
					}
				}
				r.EncodeMapStart(yynn3160)
			}
			if yyr3160 || yy2arr3160 {
				if yyq3160[0] {
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3160[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3160 || yy2arr3160 {
				if yyq3160[1] {
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3160[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3160 || yy2arr3160 {
				if yyq3160[2] {
					yy3168 := &x.ObjectMeta
					yy3168.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3160[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3169 := &x.ObjectMeta
					yy3169.CodecEncodeSelf(e)
				}
			}
			if yyr3160 || yy2arr3160 {
				if yyq3160[3] {
					yy3171 := &x.Spec
					yy3171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3160[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3172 := &x.Spec
					yy3172.CodecEncodeSelf(e)
				}
			}
			if yyr3160 || yy2arr3160 {
				if yyq3160[4] {
					yy3174 := &x.Status
					yy3174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3160[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3175 := &x.Status
					yy3175.CodecEncodeSelf(e)
				}
			}
			if yysep3160 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3176 := z.DecBinary()
	_ = yym3176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3177 := r.ReadMapStart()
			if yyl3177 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3177, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3177 := r.ReadArrayStart()
			if yyl3177 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3178Slc
	var yyhl3178 bool = l >= 0
	for yyj3178 := 0; ; yyj3178++ {
		if yyhl3178 {
			if yyj3178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3178Slc = r.DecodeBytes(yys3178Slc, true, true)
		yys3178 := string(yys3178Slc)
		switch yys3178 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3181 := &x.ObjectMeta
				yyv3181.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3182 := &x.Spec
				yyv3182.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3183 := &x.Status
				yyv3183.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3178)
		} // end switch yys3178
	} // end for yyj3178
	if !yyhl3178 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3184 int
	var yyb3184 bool
	var yyhl3184 bool = l >= 0
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3187 := &x.ObjectMeta
		yyv3187.CodecDecodeSelf(d)
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3188 := &x.Spec
		yyv3188.CodecDecodeSelf(d)
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3189 := &x.Status
		yyv3189.CodecDecodeSelf(d)
	}
	for {
		yyj3184++
		if yyhl3184 {
			yyb3184 = yyj3184 > l
		} else {
			yyb3184 = r.CheckBreak()
		}
		if yyb3184 {
			break
		}
		z.DecStructFieldNotFound(yyj3184-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3190 := z.EncBinary()
		_ = yym3190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3191 := !z.EncBinary()
			yy2arr3191 := z.EncBasicHandle().StructToArray
			var yyq3191 [4]bool
			_, _, _ = yysep3191, yyq3191, yy2arr3191
			const yyr3191 bool = false
			yyq3191[0] = x.Kind != ""
			yyq3191[1] = x.APIVersion != ""
			yyq3191[2] = true
			if yyr3191 || yy2arr3191 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3191 int = 1
				for _, b := range yyq3191 {
					if b {
						yynn3191++
					}
				}
				r.EncodeMapStart(yynn3191)
			}
			if yyr3191 || yy2arr3191 {
				if yyq3191[0] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3191[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3191 || yy2arr3191 {
				if yyq3191[1] {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3191[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3191 || yy2arr3191 {
				if yyq3191[2] {
					yy3199 := &x.ListMeta
					yym3200 := z.EncBinary()
					_ = yym3200
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3199) {
					} else {
						z.EncFallback(yy3199)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3191[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3201 := &x.ListMeta
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3201) {
					} else {
						z.EncFallback(yy3201)
					}
				}
			}
			if yyr3191 || yy2arr3191 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3205 := z.EncBinary()
					_ = yym3205
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3191 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3206 := z.DecBinary()
	_ = yym3206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3207 := r.ReadMapStart()
			if yyl3207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3207, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3207 := r.ReadArrayStart()
			if yyl3207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3208Slc
	var yyhl3208 bool = l >= 0
	for yyj3208 := 0; ; yyj3208++ {
		if yyhl3208 {
			if yyj3208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3208Slc = r.DecodeBytes(yys3208Slc, true, true)
		yys3208 := string(yys3208Slc)
		switch yys3208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3211 := &x.ListMeta
				yym3212 := z.DecBinary()
				_ = yym3212
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3211) {
				} else {
					z.DecFallback(yyv3211, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3213 := &x.Items
				yym3214 := z.DecBinary()
				_ = yym3214
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3213), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3208)
		} // end switch yys3208
	} // end for yyj3208
	if !yyhl3208 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3215 int
	var yyb3215 bool
	var yyhl3215 bool = l >= 0
	yyj3215++
	if yyhl3215 {
		yyb3215 = yyj3215 > l
	} else {
		yyb3215 = r.CheckBreak()
	}
	if yyb3215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3215++
	if yyhl3215 {
		yyb3215 = yyj3215 > l
	} else {
		yyb3215 = r.CheckBreak()
	}
	if yyb3215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3215++
	if yyhl3215 {
		yyb3215 = yyj3215 > l
	} else {
		yyb3215 = r.CheckBreak()
	}
	if yyb3215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3218 := &x.ListMeta
		yym3219 := z.DecBinary()
		_ = yym3219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3218) {
		} else {
			z.DecFallback(yyv3218, false)
		}
	}
	yyj3215++
	if yyhl3215 {
		yyb3215 = yyj3215 > l
	} else {
		yyb3215 = r.CheckBreak()
	}
	if yyb3215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3220 := &x.Items
		yym3221 := z.DecBinary()
		_ = yym3221
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3220), d)
		}
	}
	for {
		yyj3215++
		if yyhl3215 {
			yyb3215 = yyj3215 > l
		} else {
			yyb3215 = r.CheckBreak()
		}
		if yyb3215 {
			break
		}
		z.DecStructFieldNotFound(yyj3215-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3222 := z.EncBinary()
		_ = yym3222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3223 := !z.EncBinary()
			yy2arr3223 := z.EncBasicHandle().StructToArray
			var yyq3223 [5]bool
			_, _, _ = yysep3223, yyq3223, yy2arr3223
			const yyr3223 bool = false
			yyq3223[0] = x.Kind != ""
			yyq3223[1] = x.APIVersion != ""
			yyq3223[2] = true
			yyq3223[3] = len(x.Data) != 0
			yyq3223[4] = x.Type != ""
			if yyr3223 || yy2arr3223 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3223 int = 0
				for _, b := range yyq3223 {
					if b {
						yynn3223++
					}
				}
				r.EncodeMapStart(yynn3223)
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[0] {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[1] {
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[2] {
					yy3231 := &x.ObjectMeta
					yy3231.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3232 := &x.ObjectMeta
					yy3232.CodecEncodeSelf(e)
				}
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3234 := z.EncBinary()
						_ = yym3234
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3235 := z.EncBinary()
						_ = yym3235
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				if yyq3223[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3223[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3223 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3237 := z.DecBinary()
	_ = yym3237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3238 := r.ReadMapStart()
			if yyl3238 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3238, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3238 := r.ReadArrayStart()
			if yyl3238 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3239Slc
	var yyhl3239 bool = l >= 0
	for yyj3239 := 0; ; yyj3239++ {
		if yyhl3239 {
			if yyj3239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3239Slc = r.DecodeBytes(yys3239Slc, true, true)
		yys3239 := string(yys3239Slc)
		switch yys3239 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3242 := &x.ObjectMeta
				yyv3242.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3243 := &x.Data
				yym3244 := z.DecBinary()
				_ = yym3244
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3243), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3239)
		} // end switch yys3239
	} // end for yyj3239
	if !yyhl3239 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3246 int
	var yyb3246 bool
	var yyhl3246 bool = l >= 0
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3249 := &x.ObjectMeta
		yyv3249.CodecDecodeSelf(d)
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3250 := &x.Data
		yym3251 := z.DecBinary()
		_ = yym3251
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3250), d)
		}
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3246++
		if yyhl3246 {
			yyb3246 = yyj3246 > l
		} else {
			yyb3246 = r.CheckBreak()
		}
		if yyb3246 {
			break
		}
		z.DecStructFieldNotFound(yyj3246-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3253 := z.EncBinary()
	_ = yym3253
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3254 := z.DecBinary()
	_ = yym3254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3255 := z.EncBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3256 := !z.EncBinary()
			yy2arr3256 := z.EncBasicHandle().StructToArray
			var yyq3256 [4]bool
			_, _, _ = yysep3256, yyq3256, yy2arr3256
			const yyr3256 bool = false
			yyq3256[0] = x.Kind != ""
			yyq3256[1] = x.APIVersion != ""
			yyq3256[2] = true
			if yyr3256 || yy2arr3256 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3256 int = 1
				for _, b := range yyq3256 {
					if b {
						yynn3256++
					}
				}
				r.EncodeMapStart(yynn3256)
			}
			if yyr3256 || yy2arr3256 {
				if yyq3256[0] {
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3256[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				if yyq3256[1] {
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3256[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				if yyq3256[2] {
					yy3264 := &x.ListMeta
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3264) {
					} else {
						z.EncFallback(yy3264)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3256[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3266 := &x.ListMeta
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3266) {
					} else {
						z.EncFallback(yy3266)
					}
				}
			}
			if yyr3256 || yy2arr3256 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3256 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3272 := r.ReadMapStart()
			if yyl3272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3272, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3272 := r.ReadArrayStart()
			if yyl3272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3273Slc
	var yyhl3273 bool = l >= 0
	for yyj3273 := 0; ; yyj3273++ {
		if yyhl3273 {
			if yyj3273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3273Slc = r.DecodeBytes(yys3273Slc, true, true)
		yys3273 := string(yys3273Slc)
		switch yys3273 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3276 := &x.ListMeta
				yym3277 := z.DecBinary()
				_ = yym3277
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3276) {
				} else {
					z.DecFallback(yyv3276, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3278 := &x.Items
				yym3279 := z.DecBinary()
				_ = yym3279
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3278), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3273)
		} // end switch yys3273
	} // end for yyj3273
	if !yyhl3273 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3280 int
	var yyb3280 bool
	var yyhl3280 bool = l >= 0
	yyj3280++
	if yyhl3280 {
		yyb3280 = yyj3280 > l
	} else {
		yyb3280 = r.CheckBreak()
	}
	if yyb3280 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3280++
	if yyhl3280 {
		yyb3280 = yyj3280 > l
	} else {
		yyb3280 = r.CheckBreak()
	}
	if yyb3280 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3280++
	if yyhl3280 {
		yyb3280 = yyj3280 > l
	} else {
		yyb3280 = r.CheckBreak()
	}
	if yyb3280 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3283 := &x.ListMeta
		yym3284 := z.DecBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3283) {
		} else {
			z.DecFallback(yyv3283, false)
		}
	}
	yyj3280++
	if yyhl3280 {
		yyb3280 = yyj3280 > l
	} else {
		yyb3280 = r.CheckBreak()
	}
	if yyb3280 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3285 := &x.Items
		yym3286 := z.DecBinary()
		_ = yym3286
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3285), d)
		}
	}
	for {
		yyj3280++
		if yyhl3280 {
			yyb3280 = yyj3280 > l
		} else {
			yyb3280 = r.CheckBreak()
		}
		if yyb3280 {
			break
		}
		z.DecStructFieldNotFound(yyj3280-1, "")
	}
	r.ReadEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3287 := z.EncBinary()
	_ = yym3287
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3288 := z.DecBinary()
	_ = yym3288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3289 := z.EncBinary()
	_ = yym3289
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3290 := z.DecBinary()
	_ = yym3290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3291 := z.EncBinary()
		_ = yym3291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3292 := !z.EncBinary()
			yy2arr3292 := z.EncBasicHandle().StructToArray
			var yyq3292 [4]bool
			_, _, _ = yysep3292, yyq3292, yy2arr3292
			const yyr3292 bool = false
			yyq3292[2] = x.Message != ""
			yyq3292[3] = x.Error != ""
			if yyr3292 || yy2arr3292 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3292 int = 2
				for _, b := range yyq3292 {
					if b {
						yynn3292++
					}
				}
				r.EncodeMapStart(yynn3292)
			}
			if yyr3292 || yy2arr3292 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3292 || yy2arr3292 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3292 || yy2arr3292 {
				if yyq3292[2] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3292[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3292 || yy2arr3292 {
				if yyq3292[3] {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3292[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3292 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3302 := r.ReadMapStart()
			if yyl3302 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3302, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3302 := r.ReadArrayStart()
			if yyl3302 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3303Slc
	var yyhl3303 bool = l >= 0
	for yyj3303 := 0; ; yyj3303++ {
		if yyhl3303 {
			if yyj3303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3303Slc = r.DecodeBytes(yys3303Slc, true, true)
		yys3303 := string(yys3303Slc)
		switch yys3303 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3303)
		} // end switch yys3303
	} // end for yyj3303
	if !yyhl3303 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3308 int
	var yyb3308 bool
	var yyhl3308 bool = l >= 0
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3308++
		if yyhl3308 {
			yyb3308 = yyj3308 > l
		} else {
			yyb3308 = r.CheckBreak()
		}
		if yyb3308 {
			break
		}
		z.DecStructFieldNotFound(yyj3308-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3313 := z.EncBinary()
		_ = yym3313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3314 := !z.EncBinary()
			yy2arr3314 := z.EncBasicHandle().StructToArray
			var yyq3314 [4]bool
			_, _, _ = yysep3314, yyq3314, yy2arr3314
			const yyr3314 bool = false
			yyq3314[0] = x.Kind != ""
			yyq3314[1] = x.APIVersion != ""
			yyq3314[2] = true
			yyq3314[3] = len(x.Conditions) != 0
			if yyr3314 || yy2arr3314 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3314 int = 0
				for _, b := range yyq3314 {
					if b {
						yynn3314++
					}
				}
				r.EncodeMapStart(yynn3314)
			}
			if yyr3314 || yy2arr3314 {
				if yyq3314[0] {
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3314[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				if yyq3314[1] {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3314[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3314 || yy2arr3314 {
				if yyq3314[2] {
					yy3322 := &x.ObjectMeta
					yy3322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3314[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3323 := &x.ObjectMeta
					yy3323.CodecEncodeSelf(e)
				}
			}
			if yyr3314 || yy2arr3314 {
				if yyq3314[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3325 := z.EncBinary()
						_ = yym3325
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3314[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3326 := z.EncBinary()
						_ = yym3326
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3314 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3327 := z.DecBinary()
	_ = yym3327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3328 := r.ReadMapStart()
			if yyl3328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3328, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3328 := r.ReadArrayStart()
			if yyl3328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3329Slc
	var yyhl3329 bool = l >= 0
	for yyj3329 := 0; ; yyj3329++ {
		if yyhl3329 {
			if yyj3329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3329Slc = r.DecodeBytes(yys3329Slc, true, true)
		yys3329 := string(yys3329Slc)
		switch yys3329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3332 := &x.ObjectMeta
				yyv3332.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3333 := &x.Conditions
				yym3334 := z.DecBinary()
				_ = yym3334
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3333), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3329)
		} // end switch yys3329
	} // end for yyj3329
	if !yyhl3329 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3335 int
	var yyb3335 bool
	var yyhl3335 bool = l >= 0
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3338 := &x.ObjectMeta
		yyv3338.CodecDecodeSelf(d)
	}
	yyj3335++
	if yyhl3335 {
		yyb3335 = yyj3335 > l
	} else {
		yyb3335 = r.CheckBreak()
	}
	if yyb3335 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3339 := &x.Conditions
		yym3340 := z.DecBinary()
		_ = yym3340
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3339), d)
		}
	}
	for {
		yyj3335++
		if yyhl3335 {
			yyb3335 = yyj3335 > l
		} else {
			yyb3335 = r.CheckBreak()
		}
		if yyb3335 {
			break
		}
		z.DecStructFieldNotFound(yyj3335-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3341 := z.EncBinary()
		_ = yym3341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3342 := !z.EncBinary()
			yy2arr3342 := z.EncBasicHandle().StructToArray
			var yyq3342 [4]bool
			_, _, _ = yysep3342, yyq3342, yy2arr3342
			const yyr3342 bool = false
			yyq3342[0] = x.Kind != ""
			yyq3342[1] = x.APIVersion != ""
			yyq3342[2] = true
			if yyr3342 || yy2arr3342 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3342 int = 1
				for _, b := range yyq3342 {
					if b {
						yynn3342++
					}
				}
				r.EncodeMapStart(yynn3342)
			}
			if yyr3342 || yy2arr3342 {
				if yyq3342[0] {
					yym3344 := z.EncBinary()
					_ = yym3344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				if yyq3342[1] {
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3342[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				if yyq3342[2] {
					yy3350 := &x.ListMeta
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3350) {
					} else {
						z.EncFallback(yy3350)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3342[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3352 := &x.ListMeta
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3352) {
					} else {
						z.EncFallback(yy3352)
					}
				}
			}
			if yyr3342 || yy2arr3342 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3342 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3357 := z.DecBinary()
	_ = yym3357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3358 := r.ReadMapStart()
			if yyl3358 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3358, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3358 := r.ReadArrayStart()
			if yyl3358 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3359Slc
	var yyhl3359 bool = l >= 0
	for yyj3359 := 0; ; yyj3359++ {
		if yyhl3359 {
			if yyj3359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3359Slc = r.DecodeBytes(yys3359Slc, true, true)
		yys3359 := string(yys3359Slc)
		switch yys3359 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3362 := &x.ListMeta
				yym3363 := z.DecBinary()
				_ = yym3363
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3362) {
				} else {
					z.DecFallback(yyv3362, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3364 := &x.Items
				yym3365 := z.DecBinary()
				_ = yym3365
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3364), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3359)
		} // end switch yys3359
	} // end for yyj3359
	if !yyhl3359 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3366 int
	var yyb3366 bool
	var yyhl3366 bool = l >= 0
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3369 := &x.ListMeta
		yym3370 := z.DecBinary()
		_ = yym3370
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3369) {
		} else {
			z.DecFallback(yyv3369, false)
		}
	}
	yyj3366++
	if yyhl3366 {
		yyb3366 = yyj3366 > l
	} else {
		yyb3366 = r.CheckBreak()
	}
	if yyb3366 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3371 := &x.Items
		yym3372 := z.DecBinary()
		_ = yym3372
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3371), d)
		}
	}
	for {
		yyj3366++
		if yyhl3366 {
			yyb3366 = yyj3366 > l
		} else {
			yyb3366 = r.CheckBreak()
		}
		if yyb3366 {
			break
		}
		z.DecStructFieldNotFound(yyj3366-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyq3374 [5]bool
			_, _, _ = yysep3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			yyq3374[0] = x.Capabilities != nil
			yyq3374[1] = x.Privileged != nil
			yyq3374[2] = x.SELinuxOptions != nil
			yyq3374[3] = x.RunAsUser != nil
			yyq3374[4] = x.RunAsNonRoot != nil
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3374 int = 0
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
			}
			if yyr3374 || yy2arr3374 {
				if yyq3374[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				if yyq3374[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3377 := *x.Privileged
						yym3378 := z.EncBinary()
						_ = yym3378
						if false {
						} else {
							r.EncodeBool(bool(yy3377))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3379 := *x.Privileged
						yym3380 := z.EncBinary()
						_ = yym3380
						if false {
						} else {
							r.EncodeBool(bool(yy3379))
						}
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				if yyq3374[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				if yyq3374[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3383 := *x.RunAsUser
						yym3384 := z.EncBinary()
						_ = yym3384
						if false {
						} else {
							r.EncodeInt(int64(yy3383))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3385 := *x.RunAsUser
						yym3386 := z.EncBinary()
						_ = yym3386
						if false {
						} else {
							r.EncodeInt(int64(yy3385))
						}
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				if yyq3374[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3388 := *x.RunAsNonRoot
						yym3389 := z.EncBinary()
						_ = yym3389
						if false {
						} else {
							r.EncodeBool(bool(yy3388))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3390 := *x.RunAsNonRoot
						yym3391 := z.EncBinary()
						_ = yym3391
						if false {
						} else {
							r.EncodeBool(bool(yy3390))
						}
					}
				}
			}
			if yysep3374 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3392 := z.DecBinary()
	_ = yym3392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3393 := r.ReadMapStart()
			if yyl3393 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3393, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3393 := r.ReadArrayStart()
			if yyl3393 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3394Slc
	var yyhl3394 bool = l >= 0
	for yyj3394 := 0; ; yyj3394++ {
		if yyhl3394 {
			if yyj3394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3394Slc = r.DecodeBytes(yys3394Slc, true, true)
		yys3394 := string(yys3394Slc)
		switch yys3394 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3397 := z.DecBinary()
				_ = yym3397
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3400 := z.DecBinary()
				_ = yym3400
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3402 := z.DecBinary()
				_ = yym3402
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3394)
		} // end switch yys3394
	} // end for yyj3394
	if !yyhl3394 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3403 int
	var yyb3403 bool
	var yyhl3403 bool = l >= 0
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3406 := z.DecBinary()
		_ = yym3406
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3409 := z.DecBinary()
		_ = yym3409
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3403++
	if yyhl3403 {
		yyb3403 = yyj3403 > l
	} else {
		yyb3403 = r.CheckBreak()
	}
	if yyb3403 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3411 := z.DecBinary()
		_ = yym3411
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3403++
		if yyhl3403 {
			yyb3403 = yyj3403 > l
		} else {
			yyb3403 = r.CheckBreak()
		}
		if yyb3403 {
			break
		}
		z.DecStructFieldNotFound(yyj3403-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3412 := z.EncBinary()
		_ = yym3412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3413 := !z.EncBinary()
			yy2arr3413 := z.EncBasicHandle().StructToArray
			var yyq3413 [4]bool
			_, _, _ = yysep3413, yyq3413, yy2arr3413
			const yyr3413 bool = false
			yyq3413[0] = x.User != ""
			yyq3413[1] = x.Role != ""
			yyq3413[2] = x.Type != ""
			yyq3413[3] = x.Level != ""
			if yyr3413 || yy2arr3413 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3413 int = 0
				for _, b := range yyq3413 {
					if b {
						yynn3413++
					}
				}
				r.EncodeMapStart(yynn3413)
			}
			if yyr3413 || yy2arr3413 {
				if yyq3413[0] {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				if yyq3413[1] {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				if yyq3413[2] {
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3413 || yy2arr3413 {
				if yyq3413[3] {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3413[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3413 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3426 := z.DecBinary()
	_ = yym3426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3427 := r.ReadMapStart()
			if yyl3427 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3427, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3427 := r.ReadArrayStart()
			if yyl3427 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3428Slc
	var yyhl3428 bool = l >= 0
	for yyj3428 := 0; ; yyj3428++ {
		if yyhl3428 {
			if yyj3428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3428Slc = r.DecodeBytes(yys3428Slc, true, true)
		yys3428 := string(yys3428Slc)
		switch yys3428 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3428)
		} // end switch yys3428
	} // end for yyj3428
	if !yyhl3428 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3433 int
	var yyb3433 bool
	var yyhl3433 bool = l >= 0
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3433++
	if yyhl3433 {
		yyb3433 = yyj3433 > l
	} else {
		yyb3433 = r.CheckBreak()
	}
	if yyb3433 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3433++
		if yyhl3433 {
			yyb3433 = yyj3433 > l
		} else {
			yyb3433 = r.CheckBreak()
		}
		if yyb3433 {
			break
		}
		z.DecStructFieldNotFound(yyj3433-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3438 := z.EncBinary()
		_ = yym3438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3439 := !z.EncBinary()
			yy2arr3439 := z.EncBasicHandle().StructToArray
			var yyq3439 [5]bool
			_, _, _ = yysep3439, yyq3439, yy2arr3439
			const yyr3439 bool = false
			yyq3439[0] = x.Kind != ""
			yyq3439[1] = x.APIVersion != ""
			yyq3439[2] = true
			if yyr3439 || yy2arr3439 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3439 int = 2
				for _, b := range yyq3439 {
					if b {
						yynn3439++
					}
				}
				r.EncodeMapStart(yynn3439)
			}
			if yyr3439 || yy2arr3439 {
				if yyq3439[0] {
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				if yyq3439[1] {
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3439[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3439 || yy2arr3439 {
				if yyq3439[2] {
					yy3447 := &x.ObjectMeta
					yy3447.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3439[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3448 := &x.ObjectMeta
					yy3448.CodecEncodeSelf(e)
				}
			}
			if yyr3439 || yy2arr3439 {
				yym3450 := z.EncBinary()
				_ = yym3450
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3451 := z.EncBinary()
				_ = yym3451
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3439 || yy2arr3439 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3453 := z.EncBinary()
					_ = yym3453
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3439 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3455 := z.DecBinary()
	_ = yym3455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3456 := r.ReadMapStart()
			if yyl3456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3456, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3456 := r.ReadArrayStart()
			if yyl3456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3457Slc
	var yyhl3457 bool = l >= 0
	for yyj3457 := 0; ; yyj3457++ {
		if yyhl3457 {
			if yyj3457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3457Slc = r.DecodeBytes(yys3457Slc, true, true)
		yys3457 := string(yys3457Slc)
		switch yys3457 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3460 := &x.ObjectMeta
				yyv3460.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3462 := &x.Data
				yym3463 := z.DecBinary()
				_ = yym3463
				if false {
				} else {
					*yyv3462 = r.DecodeBytes(*(*[]byte)(yyv3462), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3457)
		} // end switch yys3457
	} // end for yyj3457
	if !yyhl3457 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3464 int
	var yyb3464 bool
	var yyhl3464 bool = l >= 0
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3467 := &x.ObjectMeta
		yyv3467.CodecDecodeSelf(d)
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3469 := &x.Data
		yym3470 := z.DecBinary()
		_ = yym3470
		if false {
		} else {
			*yyv3469 = r.DecodeBytes(*(*[]byte)(yyv3469), false, false)
		}
	}
	for {
		yyj3464++
		if yyhl3464 {
			yyb3464 = yyj3464 > l
		} else {
			yyb3464 = r.CheckBreak()
		}
		if yyb3464 {
			break
		}
		z.DecStructFieldNotFound(yyj3464-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3471 := range v {
		yyv3471.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3472 := *v
	yyh3472, yyl3472 := z.DecSliceHelperStart()

	var yyrr3472, yyrl3472 int
	var yyc3472, yyrt3472 bool
	_, _, _ = yyc3472, yyrt3472, yyrl3472
	yyrr3472 = yyl3472

	if yyv3472 == nil {
		if yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 16); yyrt3472 {
			yyrr3472 = yyrl3472
		}
		yyv3472 = make([]PersistentVolumeAccessMode, yyrl3472)
		yyc3472 = true
	}

	if yyl3472 == 0 {
		if len(yyv3472) != 0 {
			yyv3472 = yyv3472[:0]
			yyc3472 = true
		}
	} else if yyl3472 > 0 {

		if yyl3472 > cap(yyv3472) {
			yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 16)

			yyv23472 := yyv3472
			yyv3472 = make([]PersistentVolumeAccessMode, yyrl3472)
			if len(yyv3472) > 0 {
				copy(yyv3472, yyv23472[:cap(yyv23472)])
			}
			yyc3472 = true

			yyrr3472 = len(yyv3472)
		} else if yyl3472 != len(yyv3472) {
			yyv3472 = yyv3472[:yyl3472]
			yyc3472 = true
		}
		yyj3472 := 0
		for ; yyj3472 < yyrr3472; yyj3472++ {
			if r.TryDecodeAsNil() {
				yyv3472[yyj3472] = ""
			} else {
				yyv3472[yyj3472] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3472 {
			for ; yyj3472 < yyl3472; yyj3472++ {
				yyv3472 = append(yyv3472, "")
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = ""
				} else {
					yyv3472[yyj3472] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3472 := 0; !r.CheckBreak(); yyj3472++ {
			if yyj3472 >= len(yyv3472) {
				yyv3472 = append(yyv3472, "") // var yyz3472 PersistentVolumeAccessMode
				yyc3472 = true
			}

			if yyj3472 < len(yyv3472) {
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = ""
				} else {
					yyv3472[yyj3472] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3472.End()
	}
	if yyc3472 {
		*v = yyv3472
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3476 := range v {
		yy3477 := &yyv3476
		yy3477.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3478 := *v
	yyh3478, yyl3478 := z.DecSliceHelperStart()

	var yyrr3478, yyrl3478 int
	var yyc3478, yyrt3478 bool
	_, _, _ = yyc3478, yyrt3478, yyrl3478
	yyrr3478 = yyl3478

	if yyv3478 == nil {
		if yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 384); yyrt3478 {
			yyrr3478 = yyrl3478
		}
		yyv3478 = make([]PersistentVolume, yyrl3478)
		yyc3478 = true
	}

	if yyl3478 == 0 {
		if len(yyv3478) != 0 {
			yyv3478 = yyv3478[:0]
			yyc3478 = true
		}
	} else if yyl3478 > 0 {

		if yyl3478 > cap(yyv3478) {
			yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 384)
			yyv3478 = make([]PersistentVolume, yyrl3478)
			yyc3478 = true

			yyrr3478 = len(yyv3478)
		} else if yyl3478 != len(yyv3478) {
			yyv3478 = yyv3478[:yyl3478]
			yyc3478 = true
		}
		yyj3478 := 0
		for ; yyj3478 < yyrr3478; yyj3478++ {
			if r.TryDecodeAsNil() {
				yyv3478[yyj3478] = PersistentVolume{}
			} else {
				yyv3479 := &yyv3478[yyj3478]
				yyv3479.CodecDecodeSelf(d)
			}

		}
		if yyrt3478 {
			for ; yyj3478 < yyl3478; yyj3478++ {
				yyv3478 = append(yyv3478, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = PersistentVolume{}
				} else {
					yyv3480 := &yyv3478[yyj3478]
					yyv3480.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3478 := 0; !r.CheckBreak(); yyj3478++ {
			if yyj3478 >= len(yyv3478) {
				yyv3478 = append(yyv3478, PersistentVolume{}) // var yyz3478 PersistentVolume
				yyc3478 = true
			}

			if yyj3478 < len(yyv3478) {
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = PersistentVolume{}
				} else {
					yyv3481 := &yyv3478[yyj3478]
					yyv3481.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3478.End()
	}
	if yyc3478 {
		*v = yyv3478
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3482 := range v {
		yy3483 := &yyv3482
		yy3483.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3484 := *v
	yyh3484, yyl3484 := z.DecSliceHelperStart()

	var yyrr3484, yyrl3484 int
	var yyc3484, yyrt3484 bool
	_, _, _ = yyc3484, yyrt3484, yyrl3484
	yyrr3484 = yyl3484

	if yyv3484 == nil {
		if yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 296); yyrt3484 {
			yyrr3484 = yyrl3484
		}
		yyv3484 = make([]PersistentVolumeClaim, yyrl3484)
		yyc3484 = true
	}

	if yyl3484 == 0 {
		if len(yyv3484) != 0 {
			yyv3484 = yyv3484[:0]
			yyc3484 = true
		}
	} else if yyl3484 > 0 {

		if yyl3484 > cap(yyv3484) {
			yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 296)
			yyv3484 = make([]PersistentVolumeClaim, yyrl3484)
			yyc3484 = true

			yyrr3484 = len(yyv3484)
		} else if yyl3484 != len(yyv3484) {
			yyv3484 = yyv3484[:yyl3484]
			yyc3484 = true
		}
		yyj3484 := 0
		for ; yyj3484 < yyrr3484; yyj3484++ {
			if r.TryDecodeAsNil() {
				yyv3484[yyj3484] = PersistentVolumeClaim{}
			} else {
				yyv3485 := &yyv3484[yyj3484]
				yyv3485.CodecDecodeSelf(d)
			}

		}
		if yyrt3484 {
			for ; yyj3484 < yyl3484; yyj3484++ {
				yyv3484 = append(yyv3484, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = PersistentVolumeClaim{}
				} else {
					yyv3486 := &yyv3484[yyj3484]
					yyv3486.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3484 := 0; !r.CheckBreak(); yyj3484++ {
			if yyj3484 >= len(yyv3484) {
				yyv3484 = append(yyv3484, PersistentVolumeClaim{}) // var yyz3484 PersistentVolumeClaim
				yyc3484 = true
			}

			if yyj3484 < len(yyv3484) {
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = PersistentVolumeClaim{}
				} else {
					yyv3487 := &yyv3484[yyj3484]
					yyv3487.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3484.End()
	}
	if yyc3484 {
		*v = yyv3484
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3488 := range v {
		yy3489 := &yyv3488
		yy3489.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3490 := *v
	yyh3490, yyl3490 := z.DecSliceHelperStart()

	var yyrr3490, yyrl3490 int
	var yyc3490, yyrt3490 bool
	_, _, _ = yyc3490, yyrt3490, yyrl3490
	yyrr3490 = yyl3490

	if yyv3490 == nil {
		if yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 48); yyrt3490 {
			yyrr3490 = yyrl3490
		}
		yyv3490 = make([]DownwardAPIVolumeFile, yyrl3490)
		yyc3490 = true
	}

	if yyl3490 == 0 {
		if len(yyv3490) != 0 {
			yyv3490 = yyv3490[:0]
			yyc3490 = true
		}
	} else if yyl3490 > 0 {

		if yyl3490 > cap(yyv3490) {
			yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 48)
			yyv3490 = make([]DownwardAPIVolumeFile, yyrl3490)
			yyc3490 = true

			yyrr3490 = len(yyv3490)
		} else if yyl3490 != len(yyv3490) {
			yyv3490 = yyv3490[:yyl3490]
			yyc3490 = true
		}
		yyj3490 := 0
		for ; yyj3490 < yyrr3490; yyj3490++ {
			if r.TryDecodeAsNil() {
				yyv3490[yyj3490] = DownwardAPIVolumeFile{}
			} else {
				yyv3491 := &yyv3490[yyj3490]
				yyv3491.CodecDecodeSelf(d)
			}

		}
		if yyrt3490 {
			for ; yyj3490 < yyl3490; yyj3490++ {
				yyv3490 = append(yyv3490, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = DownwardAPIVolumeFile{}
				} else {
					yyv3492 := &yyv3490[yyj3490]
					yyv3492.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3490 := 0; !r.CheckBreak(); yyj3490++ {
			if yyj3490 >= len(yyv3490) {
				yyv3490 = append(yyv3490, DownwardAPIVolumeFile{}) // var yyz3490 DownwardAPIVolumeFile
				yyc3490 = true
			}

			if yyj3490 < len(yyv3490) {
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = DownwardAPIVolumeFile{}
				} else {
					yyv3493 := &yyv3490[yyj3490]
					yyv3493.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3490.End()
	}
	if yyc3490 {
		*v = yyv3490
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3494 := range v {
		yyv3494.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3495 := *v
	yyh3495, yyl3495 := z.DecSliceHelperStart()

	var yyrr3495, yyrl3495 int
	var yyc3495, yyrt3495 bool
	_, _, _ = yyc3495, yyrt3495, yyrl3495
	yyrr3495 = yyl3495

	if yyv3495 == nil {
		if yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 16); yyrt3495 {
			yyrr3495 = yyrl3495
		}
		yyv3495 = make([]Capability, yyrl3495)
		yyc3495 = true
	}

	if yyl3495 == 0 {
		if len(yyv3495) != 0 {
			yyv3495 = yyv3495[:0]
			yyc3495 = true
		}
	} else if yyl3495 > 0 {

		if yyl3495 > cap(yyv3495) {
			yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 16)

			yyv23495 := yyv3495
			yyv3495 = make([]Capability, yyrl3495)
			if len(yyv3495) > 0 {
				copy(yyv3495, yyv23495[:cap(yyv23495)])
			}
			yyc3495 = true

			yyrr3495 = len(yyv3495)
		} else if yyl3495 != len(yyv3495) {
			yyv3495 = yyv3495[:yyl3495]
			yyc3495 = true
		}
		yyj3495 := 0
		for ; yyj3495 < yyrr3495; yyj3495++ {
			if r.TryDecodeAsNil() {
				yyv3495[yyj3495] = ""
			} else {
				yyv3495[yyj3495] = Capability(r.DecodeString())
			}

		}
		if yyrt3495 {
			for ; yyj3495 < yyl3495; yyj3495++ {
				yyv3495 = append(yyv3495, "")
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = ""
				} else {
					yyv3495[yyj3495] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3495 := 0; !r.CheckBreak(); yyj3495++ {
			if yyj3495 >= len(yyv3495) {
				yyv3495 = append(yyv3495, "") // var yyz3495 Capability
				yyc3495 = true
			}

			if yyj3495 < len(yyv3495) {
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = ""
				} else {
					yyv3495[yyj3495] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3495.End()
	}
	if yyc3495 {
		*v = yyv3495
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3499 := range v {
		yy3500 := &yyv3499
		yy3500.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3501 := *v
	yyh3501, yyl3501 := z.DecSliceHelperStart()

	var yyrr3501, yyrl3501 int
	var yyc3501, yyrt3501 bool
	_, _, _ = yyc3501, yyrt3501, yyrl3501
	yyrr3501 = yyl3501

	if yyv3501 == nil {
		if yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 64); yyrt3501 {
			yyrr3501 = yyrl3501
		}
		yyv3501 = make([]ContainerPort, yyrl3501)
		yyc3501 = true
	}

	if yyl3501 == 0 {
		if len(yyv3501) != 0 {
			yyv3501 = yyv3501[:0]
			yyc3501 = true
		}
	} else if yyl3501 > 0 {

		if yyl3501 > cap(yyv3501) {
			yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 64)
			yyv3501 = make([]ContainerPort, yyrl3501)
			yyc3501 = true

			yyrr3501 = len(yyv3501)
		} else if yyl3501 != len(yyv3501) {
			yyv3501 = yyv3501[:yyl3501]
			yyc3501 = true
		}
		yyj3501 := 0
		for ; yyj3501 < yyrr3501; yyj3501++ {
			if r.TryDecodeAsNil() {
				yyv3501[yyj3501] = ContainerPort{}
			} else {
				yyv3502 := &yyv3501[yyj3501]
				yyv3502.CodecDecodeSelf(d)
			}

		}
		if yyrt3501 {
			for ; yyj3501 < yyl3501; yyj3501++ {
				yyv3501 = append(yyv3501, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ContainerPort{}
				} else {
					yyv3503 := &yyv3501[yyj3501]
					yyv3503.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3501 := 0; !r.CheckBreak(); yyj3501++ {
			if yyj3501 >= len(yyv3501) {
				yyv3501 = append(yyv3501, ContainerPort{}) // var yyz3501 ContainerPort
				yyc3501 = true
			}

			if yyj3501 < len(yyv3501) {
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = ContainerPort{}
				} else {
					yyv3504 := &yyv3501[yyj3501]
					yyv3504.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3501.End()
	}
	if yyc3501 {
		*v = yyv3501
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3505 := range v {
		yy3506 := &yyv3505
		yy3506.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3507 := *v
	yyh3507, yyl3507 := z.DecSliceHelperStart()

	var yyrr3507, yyrl3507 int
	var yyc3507, yyrt3507 bool
	_, _, _ = yyc3507, yyrt3507, yyrl3507
	yyrr3507 = yyl3507

	if yyv3507 == nil {
		if yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 40); yyrt3507 {
			yyrr3507 = yyrl3507
		}
		yyv3507 = make([]EnvVar, yyrl3507)
		yyc3507 = true
	}

	if yyl3507 == 0 {
		if len(yyv3507) != 0 {
			yyv3507 = yyv3507[:0]
			yyc3507 = true
		}
	} else if yyl3507 > 0 {

		if yyl3507 > cap(yyv3507) {
			yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 40)
			yyv3507 = make([]EnvVar, yyrl3507)
			yyc3507 = true

			yyrr3507 = len(yyv3507)
		} else if yyl3507 != len(yyv3507) {
			yyv3507 = yyv3507[:yyl3507]
			yyc3507 = true
		}
		yyj3507 := 0
		for ; yyj3507 < yyrr3507; yyj3507++ {
			if r.TryDecodeAsNil() {
				yyv3507[yyj3507] = EnvVar{}
			} else {
				yyv3508 := &yyv3507[yyj3507]
				yyv3508.CodecDecodeSelf(d)
			}

		}
		if yyrt3507 {
			for ; yyj3507 < yyl3507; yyj3507++ {
				yyv3507 = append(yyv3507, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = EnvVar{}
				} else {
					yyv3509 := &yyv3507[yyj3507]
					yyv3509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3507 := 0; !r.CheckBreak(); yyj3507++ {
			if yyj3507 >= len(yyv3507) {
				yyv3507 = append(yyv3507, EnvVar{}) // var yyz3507 EnvVar
				yyc3507 = true
			}

			if yyj3507 < len(yyv3507) {
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = EnvVar{}
				} else {
					yyv3510 := &yyv3507[yyj3507]
					yyv3510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3507.End()
	}
	if yyc3507 {
		*v = yyv3507
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3511 := range v {
		yy3512 := &yyv3511
		yy3512.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3513 := *v
	yyh3513, yyl3513 := z.DecSliceHelperStart()

	var yyrr3513, yyrl3513 int
	var yyc3513, yyrt3513 bool
	_, _, _ = yyc3513, yyrt3513, yyrl3513
	yyrr3513 = yyl3513

	if yyv3513 == nil {
		if yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 40); yyrt3513 {
			yyrr3513 = yyrl3513
		}
		yyv3513 = make([]VolumeMount, yyrl3513)
		yyc3513 = true
	}

	if yyl3513 == 0 {
		if len(yyv3513) != 0 {
			yyv3513 = yyv3513[:0]
			yyc3513 = true
		}
	} else if yyl3513 > 0 {

		if yyl3513 > cap(yyv3513) {
			yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 40)
			yyv3513 = make([]VolumeMount, yyrl3513)
			yyc3513 = true

			yyrr3513 = len(yyv3513)
		} else if yyl3513 != len(yyv3513) {
			yyv3513 = yyv3513[:yyl3513]
			yyc3513 = true
		}
		yyj3513 := 0
		for ; yyj3513 < yyrr3513; yyj3513++ {
			if r.TryDecodeAsNil() {
				yyv3513[yyj3513] = VolumeMount{}
			} else {
				yyv3514 := &yyv3513[yyj3513]
				yyv3514.CodecDecodeSelf(d)
			}

		}
		if yyrt3513 {
			for ; yyj3513 < yyl3513; yyj3513++ {
				yyv3513 = append(yyv3513, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = VolumeMount{}
				} else {
					yyv3515 := &yyv3513[yyj3513]
					yyv3515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3513 := 0; !r.CheckBreak(); yyj3513++ {
			if yyj3513 >= len(yyv3513) {
				yyv3513 = append(yyv3513, VolumeMount{}) // var yyz3513 VolumeMount
				yyc3513 = true
			}

			if yyj3513 < len(yyv3513) {
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = VolumeMount{}
				} else {
					yyv3516 := &yyv3513[yyj3513]
					yyv3516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3513.End()
	}
	if yyc3513 {
		*v = yyv3513
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3517 := range v {
		yy3518 := &yyv3517
		yy3518.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3519 := *v
	yyh3519, yyl3519 := z.DecSliceHelperStart()

	var yyrr3519, yyrl3519 int
	var yyc3519, yyrt3519 bool
	_, _, _ = yyc3519, yyrt3519, yyrl3519
	yyrr3519 = yyl3519

	if yyv3519 == nil {
		if yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 496); yyrt3519 {
			yyrr3519 = yyrl3519
		}
		yyv3519 = make([]Pod, yyrl3519)
		yyc3519 = true
	}

	if yyl3519 == 0 {
		if len(yyv3519) != 0 {
			yyv3519 = yyv3519[:0]
			yyc3519 = true
		}
	} else if yyl3519 > 0 {

		if yyl3519 > cap(yyv3519) {
			yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 496)
			yyv3519 = make([]Pod, yyrl3519)
			yyc3519 = true

			yyrr3519 = len(yyv3519)
		} else if yyl3519 != len(yyv3519) {
			yyv3519 = yyv3519[:yyl3519]
			yyc3519 = true
		}
		yyj3519 := 0
		for ; yyj3519 < yyrr3519; yyj3519++ {
			if r.TryDecodeAsNil() {
				yyv3519[yyj3519] = Pod{}
			} else {
				yyv3520 := &yyv3519[yyj3519]
				yyv3520.CodecDecodeSelf(d)
			}

		}
		if yyrt3519 {
			for ; yyj3519 < yyl3519; yyj3519++ {
				yyv3519 = append(yyv3519, Pod{})
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = Pod{}
				} else {
					yyv3521 := &yyv3519[yyj3519]
					yyv3521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3519 := 0; !r.CheckBreak(); yyj3519++ {
			if yyj3519 >= len(yyv3519) {
				yyv3519 = append(yyv3519, Pod{}) // var yyz3519 Pod
				yyc3519 = true
			}

			if yyj3519 < len(yyv3519) {
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = Pod{}
				} else {
					yyv3522 := &yyv3519[yyj3519]
					yyv3522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3519.End()
	}
	if yyc3519 {
		*v = yyv3519
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3523 := range v {
		yy3524 := &yyv3523
		yy3524.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3525 := *v
	yyh3525, yyl3525 := z.DecSliceHelperStart()

	var yyrr3525, yyrl3525 int
	var yyc3525, yyrt3525 bool
	_, _, _ = yyc3525, yyrt3525, yyrl3525
	yyrr3525 = yyl3525

	if yyv3525 == nil {
		if yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 144); yyrt3525 {
			yyrr3525 = yyrl3525
		}
		yyv3525 = make([]Volume, yyrl3525)
		yyc3525 = true
	}

	if yyl3525 == 0 {
		if len(yyv3525) != 0 {
			yyv3525 = yyv3525[:0]
			yyc3525 = true
		}
	} else if yyl3525 > 0 {

		if yyl3525 > cap(yyv3525) {
			yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 144)
			yyv3525 = make([]Volume, yyrl3525)
			yyc3525 = true

			yyrr3525 = len(yyv3525)
		} else if yyl3525 != len(yyv3525) {
			yyv3525 = yyv3525[:yyl3525]
			yyc3525 = true
		}
		yyj3525 := 0
		for ; yyj3525 < yyrr3525; yyj3525++ {
			if r.TryDecodeAsNil() {
				yyv3525[yyj3525] = Volume{}
			} else {
				yyv3526 := &yyv3525[yyj3525]
				yyv3526.CodecDecodeSelf(d)
			}

		}
		if yyrt3525 {
			for ; yyj3525 < yyl3525; yyj3525++ {
				yyv3525 = append(yyv3525, Volume{})
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = Volume{}
				} else {
					yyv3527 := &yyv3525[yyj3525]
					yyv3527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3525 := 0; !r.CheckBreak(); yyj3525++ {
			if yyj3525 >= len(yyv3525) {
				yyv3525 = append(yyv3525, Volume{}) // var yyz3525 Volume
				yyc3525 = true
			}

			if yyj3525 < len(yyv3525) {
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = Volume{}
				} else {
					yyv3528 := &yyv3525[yyj3525]
					yyv3528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3525.End()
	}
	if yyc3525 {
		*v = yyv3525
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3529 := range v {
		yy3530 := &yyv3529
		yy3530.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3531 := *v
	yyh3531, yyl3531 := z.DecSliceHelperStart()

	var yyrr3531, yyrl3531 int
	var yyc3531, yyrt3531 bool
	_, _, _ = yyc3531, yyrt3531, yyrl3531
	yyrr3531 = yyl3531

	if yyv3531 == nil {
		if yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 256); yyrt3531 {
			yyrr3531 = yyrl3531
		}
		yyv3531 = make([]Container, yyrl3531)
		yyc3531 = true
	}

	if yyl3531 == 0 {
		if len(yyv3531) != 0 {
			yyv3531 = yyv3531[:0]
			yyc3531 = true
		}
	} else if yyl3531 > 0 {

		if yyl3531 > cap(yyv3531) {
			yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 256)
			yyv3531 = make([]Container, yyrl3531)
			yyc3531 = true

			yyrr3531 = len(yyv3531)
		} else if yyl3531 != len(yyv3531) {
			yyv3531 = yyv3531[:yyl3531]
			yyc3531 = true
		}
		yyj3531 := 0
		for ; yyj3531 < yyrr3531; yyj3531++ {
			if r.TryDecodeAsNil() {
				yyv3531[yyj3531] = Container{}
			} else {
				yyv3532 := &yyv3531[yyj3531]
				yyv3532.CodecDecodeSelf(d)
			}

		}
		if yyrt3531 {
			for ; yyj3531 < yyl3531; yyj3531++ {
				yyv3531 = append(yyv3531, Container{})
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = Container{}
				} else {
					yyv3533 := &yyv3531[yyj3531]
					yyv3533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3531 := 0; !r.CheckBreak(); yyj3531++ {
			if yyj3531 >= len(yyv3531) {
				yyv3531 = append(yyv3531, Container{}) // var yyz3531 Container
				yyc3531 = true
			}

			if yyj3531 < len(yyv3531) {
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = Container{}
				} else {
					yyv3534 := &yyv3531[yyj3531]
					yyv3534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3531.End()
	}
	if yyc3531 {
		*v = yyv3531
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3535 := range v {
		yy3536 := &yyv3535
		yy3536.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3537 := *v
	yyh3537, yyl3537 := z.DecSliceHelperStart()

	var yyrr3537, yyrl3537 int
	var yyc3537, yyrt3537 bool
	_, _, _ = yyc3537, yyrt3537, yyrl3537
	yyrr3537 = yyl3537

	if yyv3537 == nil {
		if yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 16); yyrt3537 {
			yyrr3537 = yyrl3537
		}
		yyv3537 = make([]LocalObjectReference, yyrl3537)
		yyc3537 = true
	}

	if yyl3537 == 0 {
		if len(yyv3537) != 0 {
			yyv3537 = yyv3537[:0]
			yyc3537 = true
		}
	} else if yyl3537 > 0 {

		if yyl3537 > cap(yyv3537) {
			yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 16)
			yyv3537 = make([]LocalObjectReference, yyrl3537)
			yyc3537 = true

			yyrr3537 = len(yyv3537)
		} else if yyl3537 != len(yyv3537) {
			yyv3537 = yyv3537[:yyl3537]
			yyc3537 = true
		}
		yyj3537 := 0
		for ; yyj3537 < yyrr3537; yyj3537++ {
			if r.TryDecodeAsNil() {
				yyv3537[yyj3537] = LocalObjectReference{}
			} else {
				yyv3538 := &yyv3537[yyj3537]
				yyv3538.CodecDecodeSelf(d)
			}

		}
		if yyrt3537 {
			for ; yyj3537 < yyl3537; yyj3537++ {
				yyv3537 = append(yyv3537, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = LocalObjectReference{}
				} else {
					yyv3539 := &yyv3537[yyj3537]
					yyv3539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3537 := 0; !r.CheckBreak(); yyj3537++ {
			if yyj3537 >= len(yyv3537) {
				yyv3537 = append(yyv3537, LocalObjectReference{}) // var yyz3537 LocalObjectReference
				yyc3537 = true
			}

			if yyj3537 < len(yyv3537) {
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = LocalObjectReference{}
				} else {
					yyv3540 := &yyv3537[yyj3537]
					yyv3540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3537.End()
	}
	if yyc3537 {
		*v = yyv3537
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3541 := range v {
		yy3542 := &yyv3541
		yy3542.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3543 := *v
	yyh3543, yyl3543 := z.DecSliceHelperStart()

	var yyrr3543, yyrl3543 int
	var yyc3543, yyrt3543 bool
	_, _, _ = yyc3543, yyrt3543, yyrl3543
	yyrr3543 = yyl3543

	if yyv3543 == nil {
		if yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 112); yyrt3543 {
			yyrr3543 = yyrl3543
		}
		yyv3543 = make([]PodCondition, yyrl3543)
		yyc3543 = true
	}

	if yyl3543 == 0 {
		if len(yyv3543) != 0 {
			yyv3543 = yyv3543[:0]
			yyc3543 = true
		}
	} else if yyl3543 > 0 {

		if yyl3543 > cap(yyv3543) {
			yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 112)
			yyv3543 = make([]PodCondition, yyrl3543)
			yyc3543 = true

			yyrr3543 = len(yyv3543)
		} else if yyl3543 != len(yyv3543) {
			yyv3543 = yyv3543[:yyl3543]
			yyc3543 = true
		}
		yyj3543 := 0
		for ; yyj3543 < yyrr3543; yyj3543++ {
			if r.TryDecodeAsNil() {
				yyv3543[yyj3543] = PodCondition{}
			} else {
				yyv3544 := &yyv3543[yyj3543]
				yyv3544.CodecDecodeSelf(d)
			}

		}
		if yyrt3543 {
			for ; yyj3543 < yyl3543; yyj3543++ {
				yyv3543 = append(yyv3543, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = PodCondition{}
				} else {
					yyv3545 := &yyv3543[yyj3543]
					yyv3545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3543 := 0; !r.CheckBreak(); yyj3543++ {
			if yyj3543 >= len(yyv3543) {
				yyv3543 = append(yyv3543, PodCondition{}) // var yyz3543 PodCondition
				yyc3543 = true
			}

			if yyj3543 < len(yyv3543) {
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = PodCondition{}
				} else {
					yyv3546 := &yyv3543[yyj3543]
					yyv3546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3543.End()
	}
	if yyc3543 {
		*v = yyv3543
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3547 := range v {
		yy3548 := &yyv3547
		yy3548.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3549 := *v
	yyh3549, yyl3549 := z.DecSliceHelperStart()

	var yyrr3549, yyrl3549 int
	var yyc3549, yyrt3549 bool
	_, _, _ = yyc3549, yyrt3549, yyrl3549
	yyrr3549 = yyl3549

	if yyv3549 == nil {
		if yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 128); yyrt3549 {
			yyrr3549 = yyrl3549
		}
		yyv3549 = make([]ContainerStatus, yyrl3549)
		yyc3549 = true
	}

	if yyl3549 == 0 {
		if len(yyv3549) != 0 {
			yyv3549 = yyv3549[:0]
			yyc3549 = true
		}
	} else if yyl3549 > 0 {

		if yyl3549 > cap(yyv3549) {
			yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 128)
			yyv3549 = make([]ContainerStatus, yyrl3549)
			yyc3549 = true

			yyrr3549 = len(yyv3549)
		} else if yyl3549 != len(yyv3549) {
			yyv3549 = yyv3549[:yyl3549]
			yyc3549 = true
		}
		yyj3549 := 0
		for ; yyj3549 < yyrr3549; yyj3549++ {
			if r.TryDecodeAsNil() {
				yyv3549[yyj3549] = ContainerStatus{}
			} else {
				yyv3550 := &yyv3549[yyj3549]
				yyv3550.CodecDecodeSelf(d)
			}

		}
		if yyrt3549 {
			for ; yyj3549 < yyl3549; yyj3549++ {
				yyv3549 = append(yyv3549, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = ContainerStatus{}
				} else {
					yyv3551 := &yyv3549[yyj3549]
					yyv3551.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3549 := 0; !r.CheckBreak(); yyj3549++ {
			if yyj3549 >= len(yyv3549) {
				yyv3549 = append(yyv3549, ContainerStatus{}) // var yyz3549 ContainerStatus
				yyc3549 = true
			}

			if yyj3549 < len(yyv3549) {
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = ContainerStatus{}
				} else {
					yyv3552 := &yyv3549[yyj3549]
					yyv3552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3549.End()
	}
	if yyc3549 {
		*v = yyv3549
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3553 := range v {
		yy3554 := &yyv3553
		yy3554.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3555 := *v
	yyh3555, yyl3555 := z.DecSliceHelperStart()

	var yyrr3555, yyrl3555 int
	var yyc3555, yyrt3555 bool
	_, _, _ = yyc3555, yyrt3555, yyrl3555
	yyrr3555 = yyl3555

	if yyv3555 == nil {
		if yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 520); yyrt3555 {
			yyrr3555 = yyrl3555
		}
		yyv3555 = make([]PodTemplate, yyrl3555)
		yyc3555 = true
	}

	if yyl3555 == 0 {
		if len(yyv3555) != 0 {
			yyv3555 = yyv3555[:0]
			yyc3555 = true
		}
	} else if yyl3555 > 0 {

		if yyl3555 > cap(yyv3555) {
			yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 520)
			yyv3555 = make([]PodTemplate, yyrl3555)
			yyc3555 = true

			yyrr3555 = len(yyv3555)
		} else if yyl3555 != len(yyv3555) {
			yyv3555 = yyv3555[:yyl3555]
			yyc3555 = true
		}
		yyj3555 := 0
		for ; yyj3555 < yyrr3555; yyj3555++ {
			if r.TryDecodeAsNil() {
				yyv3555[yyj3555] = PodTemplate{}
			} else {
				yyv3556 := &yyv3555[yyj3555]
				yyv3556.CodecDecodeSelf(d)
			}

		}
		if yyrt3555 {
			for ; yyj3555 < yyl3555; yyj3555++ {
				yyv3555 = append(yyv3555, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = PodTemplate{}
				} else {
					yyv3557 := &yyv3555[yyj3555]
					yyv3557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3555 := 0; !r.CheckBreak(); yyj3555++ {
			if yyj3555 >= len(yyv3555) {
				yyv3555 = append(yyv3555, PodTemplate{}) // var yyz3555 PodTemplate
				yyc3555 = true
			}

			if yyj3555 < len(yyv3555) {
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = PodTemplate{}
				} else {
					yyv3558 := &yyv3555[yyj3555]
					yyv3558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3555.End()
	}
	if yyc3555 {
		*v = yyv3555
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3559 := range v {
		yy3560 := &yyv3559
		yy3560.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3561 := *v
	yyh3561, yyl3561 := z.DecSliceHelperStart()

	var yyrr3561, yyrl3561 int
	var yyc3561, yyrt3561 bool
	_, _, _ = yyc3561, yyrt3561, yyrl3561
	yyrr3561 = yyl3561

	if yyv3561 == nil {
		if yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 232); yyrt3561 {
			yyrr3561 = yyrl3561
		}
		yyv3561 = make([]ReplicationController, yyrl3561)
		yyc3561 = true
	}

	if yyl3561 == 0 {
		if len(yyv3561) != 0 {
			yyv3561 = yyv3561[:0]
			yyc3561 = true
		}
	} else if yyl3561 > 0 {

		if yyl3561 > cap(yyv3561) {
			yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 232)
			yyv3561 = make([]ReplicationController, yyrl3561)
			yyc3561 = true

			yyrr3561 = len(yyv3561)
		} else if yyl3561 != len(yyv3561) {
			yyv3561 = yyv3561[:yyl3561]
			yyc3561 = true
		}
		yyj3561 := 0
		for ; yyj3561 < yyrr3561; yyj3561++ {
			if r.TryDecodeAsNil() {
				yyv3561[yyj3561] = ReplicationController{}
			} else {
				yyv3562 := &yyv3561[yyj3561]
				yyv3562.CodecDecodeSelf(d)
			}

		}
		if yyrt3561 {
			for ; yyj3561 < yyl3561; yyj3561++ {
				yyv3561 = append(yyv3561, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = ReplicationController{}
				} else {
					yyv3563 := &yyv3561[yyj3561]
					yyv3563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3561 := 0; !r.CheckBreak(); yyj3561++ {
			if yyj3561 >= len(yyv3561) {
				yyv3561 = append(yyv3561, ReplicationController{}) // var yyz3561 ReplicationController
				yyc3561 = true
			}

			if yyj3561 < len(yyv3561) {
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = ReplicationController{}
				} else {
					yyv3564 := &yyv3561[yyj3561]
					yyv3564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3561.End()
	}
	if yyc3561 {
		*v = yyv3561
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3565 := range v {
		yy3566 := &yyv3565
		yy3566.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3567 := *v
	yyh3567, yyl3567 := z.DecSliceHelperStart()

	var yyrr3567, yyrl3567 int
	var yyc3567, yyrt3567 bool
	_, _, _ = yyc3567, yyrt3567, yyrl3567
	yyrr3567 = yyl3567

	if yyv3567 == nil {
		if yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 336); yyrt3567 {
			yyrr3567 = yyrl3567
		}
		yyv3567 = make([]Service, yyrl3567)
		yyc3567 = true
	}

	if yyl3567 == 0 {
		if len(yyv3567) != 0 {
			yyv3567 = yyv3567[:0]
			yyc3567 = true
		}
	} else if yyl3567 > 0 {

		if yyl3567 > cap(yyv3567) {
			yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 336)
			yyv3567 = make([]Service, yyrl3567)
			yyc3567 = true

			yyrr3567 = len(yyv3567)
		} else if yyl3567 != len(yyv3567) {
			yyv3567 = yyv3567[:yyl3567]
			yyc3567 = true
		}
		yyj3567 := 0
		for ; yyj3567 < yyrr3567; yyj3567++ {
			if r.TryDecodeAsNil() {
				yyv3567[yyj3567] = Service{}
			} else {
				yyv3568 := &yyv3567[yyj3567]
				yyv3568.CodecDecodeSelf(d)
			}

		}
		if yyrt3567 {
			for ; yyj3567 < yyl3567; yyj3567++ {
				yyv3567 = append(yyv3567, Service{})
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = Service{}
				} else {
					yyv3569 := &yyv3567[yyj3567]
					yyv3569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3567 := 0; !r.CheckBreak(); yyj3567++ {
			if yyj3567 >= len(yyv3567) {
				yyv3567 = append(yyv3567, Service{}) // var yyz3567 Service
				yyc3567 = true
			}

			if yyj3567 < len(yyv3567) {
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = Service{}
				} else {
					yyv3570 := &yyv3567[yyj3567]
					yyv3570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3567.End()
	}
	if yyc3567 {
		*v = yyv3567
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3571 := range v {
		yy3572 := &yyv3571
		yy3572.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3573 := *v
	yyh3573, yyl3573 := z.DecSliceHelperStart()

	var yyrr3573, yyrl3573 int
	var yyc3573, yyrt3573 bool
	_, _, _ = yyc3573, yyrt3573, yyrl3573
	yyrr3573 = yyl3573

	if yyv3573 == nil {
		if yyrl3573, yyrt3573 = z.DecInferLen(yyl3573, z.DecBasicHandle().MaxInitLen, 32); yyrt3573 {
			yyrr3573 = yyrl3573
		}
		yyv3573 = make([]LoadBalancerIngress, yyrl3573)
		yyc3573 = true
	}

	if yyl3573 == 0 {
		if len(yyv3573) != 0 {
			yyv3573 = yyv3573[:0]
			yyc3573 = true
		}
	} else if yyl3573 > 0 {

		if yyl3573 > cap(yyv3573) {
			yyrl3573, yyrt3573 = z.DecInferLen(yyl3573, z.DecBasicHandle().MaxInitLen, 32)
			yyv3573 = make([]LoadBalancerIngress, yyrl3573)
			yyc3573 = true

			yyrr3573 = len(yyv3573)
		} else if yyl3573 != len(yyv3573) {
			yyv3573 = yyv3573[:yyl3573]
			yyc3573 = true
		}
		yyj3573 := 0
		for ; yyj3573 < yyrr3573; yyj3573++ {
			if r.TryDecodeAsNil() {
				yyv3573[yyj3573] = LoadBalancerIngress{}
			} else {
				yyv3574 := &yyv3573[yyj3573]
				yyv3574.CodecDecodeSelf(d)
			}

		}
		if yyrt3573 {
			for ; yyj3573 < yyl3573; yyj3573++ {
				yyv3573 = append(yyv3573, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3573[yyj3573] = LoadBalancerIngress{}
				} else {
					yyv3575 := &yyv3573[yyj3573]
					yyv3575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3573 := 0; !r.CheckBreak(); yyj3573++ {
			if yyj3573 >= len(yyv3573) {
				yyv3573 = append(yyv3573, LoadBalancerIngress{}) // var yyz3573 LoadBalancerIngress
				yyc3573 = true
			}

			if yyj3573 < len(yyv3573) {
				if r.TryDecodeAsNil() {
					yyv3573[yyj3573] = LoadBalancerIngress{}
				} else {
					yyv3576 := &yyv3573[yyj3573]
					yyv3576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3573.End()
	}
	if yyc3573 {
		*v = yyv3573
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3577 := range v {
		yy3578 := &yyv3577
		yy3578.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3579 := *v
	yyh3579, yyl3579 := z.DecSliceHelperStart()

	var yyrr3579, yyrl3579 int
	var yyc3579, yyrt3579 bool
	_, _, _ = yyc3579, yyrt3579, yyrl3579
	yyrr3579 = yyl3579

	if yyv3579 == nil {
		if yyrl3579, yyrt3579 = z.DecInferLen(yyl3579, z.DecBasicHandle().MaxInitLen, 80); yyrt3579 {
			yyrr3579 = yyrl3579
		}
		yyv3579 = make([]ServicePort, yyrl3579)
		yyc3579 = true
	}

	if yyl3579 == 0 {
		if len(yyv3579) != 0 {
			yyv3579 = yyv3579[:0]
			yyc3579 = true
		}
	} else if yyl3579 > 0 {

		if yyl3579 > cap(yyv3579) {
			yyrl3579, yyrt3579 = z.DecInferLen(yyl3579, z.DecBasicHandle().MaxInitLen, 80)
			yyv3579 = make([]ServicePort, yyrl3579)
			yyc3579 = true

			yyrr3579 = len(yyv3579)
		} else if yyl3579 != len(yyv3579) {
			yyv3579 = yyv3579[:yyl3579]
			yyc3579 = true
		}
		yyj3579 := 0
		for ; yyj3579 < yyrr3579; yyj3579++ {
			if r.TryDecodeAsNil() {
				yyv3579[yyj3579] = ServicePort{}
			} else {
				yyv3580 := &yyv3579[yyj3579]
				yyv3580.CodecDecodeSelf(d)
			}

		}
		if yyrt3579 {
			for ; yyj3579 < yyl3579; yyj3579++ {
				yyv3579 = append(yyv3579, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3579[yyj3579] = ServicePort{}
				} else {
					yyv3581 := &yyv3579[yyj3579]
					yyv3581.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3579 := 0; !r.CheckBreak(); yyj3579++ {
			if yyj3579 >= len(yyv3579) {
				yyv3579 = append(yyv3579, ServicePort{}) // var yyz3579 ServicePort
				yyc3579 = true
			}

			if yyj3579 < len(yyv3579) {
				if r.TryDecodeAsNil() {
					yyv3579[yyj3579] = ServicePort{}
				} else {
					yyv3582 := &yyv3579[yyj3579]
					yyv3582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3579.End()
	}
	if yyc3579 {
		*v = yyv3579
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3583 := range v {
		yy3584 := &yyv3583
		yy3584.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3585 := *v
	yyh3585, yyl3585 := z.DecSliceHelperStart()

	var yyrr3585, yyrl3585 int
	var yyc3585, yyrt3585 bool
	_, _, _ = yyc3585, yyrt3585, yyrl3585
	yyrr3585 = yyl3585

	if yyv3585 == nil {
		if yyrl3585, yyrt3585 = z.DecInferLen(yyl3585, z.DecBasicHandle().MaxInitLen, 112); yyrt3585 {
			yyrr3585 = yyrl3585
		}
		yyv3585 = make([]ObjectReference, yyrl3585)
		yyc3585 = true
	}

	if yyl3585 == 0 {
		if len(yyv3585) != 0 {
			yyv3585 = yyv3585[:0]
			yyc3585 = true
		}
	} else if yyl3585 > 0 {

		if yyl3585 > cap(yyv3585) {
			yyrl3585, yyrt3585 = z.DecInferLen(yyl3585, z.DecBasicHandle().MaxInitLen, 112)
			yyv3585 = make([]ObjectReference, yyrl3585)
			yyc3585 = true

			yyrr3585 = len(yyv3585)
		} else if yyl3585 != len(yyv3585) {
			yyv3585 = yyv3585[:yyl3585]
			yyc3585 = true
		}
		yyj3585 := 0
		for ; yyj3585 < yyrr3585; yyj3585++ {
			if r.TryDecodeAsNil() {
				yyv3585[yyj3585] = ObjectReference{}
			} else {
				yyv3586 := &yyv3585[yyj3585]
				yyv3586.CodecDecodeSelf(d)
			}

		}
		if yyrt3585 {
			for ; yyj3585 < yyl3585; yyj3585++ {
				yyv3585 = append(yyv3585, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3585[yyj3585] = ObjectReference{}
				} else {
					yyv3587 := &yyv3585[yyj3585]
					yyv3587.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3585 := 0; !r.CheckBreak(); yyj3585++ {
			if yyj3585 >= len(yyv3585) {
				yyv3585 = append(yyv3585, ObjectReference{}) // var yyz3585 ObjectReference
				yyc3585 = true
			}

			if yyj3585 < len(yyv3585) {
				if r.TryDecodeAsNil() {
					yyv3585[yyj3585] = ObjectReference{}
				} else {
					yyv3588 := &yyv3585[yyj3585]
					yyv3588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3585.End()
	}
	if yyc3585 {
		*v = yyv3585
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3589 := range v {
		yy3590 := &yyv3589
		yy3590.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3591 := *v
	yyh3591, yyl3591 := z.DecSliceHelperStart()

	var yyrr3591, yyrl3591 int
	var yyc3591, yyrt3591 bool
	_, _, _ = yyc3591, yyrt3591, yyrl3591
	yyrr3591 = yyl3591

	if yyv3591 == nil {
		if yyrl3591, yyrt3591 = z.DecInferLen(yyl3591, z.DecBasicHandle().MaxInitLen, 240); yyrt3591 {
			yyrr3591 = yyrl3591
		}
		yyv3591 = make([]ServiceAccount, yyrl3591)
		yyc3591 = true
	}

	if yyl3591 == 0 {
		if len(yyv3591) != 0 {
			yyv3591 = yyv3591[:0]
			yyc3591 = true
		}
	} else if yyl3591 > 0 {

		if yyl3591 > cap(yyv3591) {
			yyrl3591, yyrt3591 = z.DecInferLen(yyl3591, z.DecBasicHandle().MaxInitLen, 240)
			yyv3591 = make([]ServiceAccount, yyrl3591)
			yyc3591 = true

			yyrr3591 = len(yyv3591)
		} else if yyl3591 != len(yyv3591) {
			yyv3591 = yyv3591[:yyl3591]
			yyc3591 = true
		}
		yyj3591 := 0
		for ; yyj3591 < yyrr3591; yyj3591++ {
			if r.TryDecodeAsNil() {
				yyv3591[yyj3591] = ServiceAccount{}
			} else {
				yyv3592 := &yyv3591[yyj3591]
				yyv3592.CodecDecodeSelf(d)
			}

		}
		if yyrt3591 {
			for ; yyj3591 < yyl3591; yyj3591++ {
				yyv3591 = append(yyv3591, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3591[yyj3591] = ServiceAccount{}
				} else {
					yyv3593 := &yyv3591[yyj3591]
					yyv3593.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3591 := 0; !r.CheckBreak(); yyj3591++ {
			if yyj3591 >= len(yyv3591) {
				yyv3591 = append(yyv3591, ServiceAccount{}) // var yyz3591 ServiceAccount
				yyc3591 = true
			}

			if yyj3591 < len(yyv3591) {
				if r.TryDecodeAsNil() {
					yyv3591[yyj3591] = ServiceAccount{}
				} else {
					yyv3594 := &yyv3591[yyj3591]
					yyv3594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3591.End()
	}
	if yyc3591 {
		*v = yyv3591
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3595 := range v {
		yy3596 := &yyv3595
		yy3596.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3597 := *v
	yyh3597, yyl3597 := z.DecSliceHelperStart()

	var yyrr3597, yyrl3597 int
	var yyc3597, yyrt3597 bool
	_, _, _ = yyc3597, yyrt3597, yyrl3597
	yyrr3597 = yyl3597

	if yyv3597 == nil {
		if yyrl3597, yyrt3597 = z.DecInferLen(yyl3597, z.DecBasicHandle().MaxInitLen, 72); yyrt3597 {
			yyrr3597 = yyrl3597
		}
		yyv3597 = make([]EndpointSubset, yyrl3597)
		yyc3597 = true
	}

	if yyl3597 == 0 {
		if len(yyv3597) != 0 {
			yyv3597 = yyv3597[:0]
			yyc3597 = true
		}
	} else if yyl3597 > 0 {

		if yyl3597 > cap(yyv3597) {
			yyrl3597, yyrt3597 = z.DecInferLen(yyl3597, z.DecBasicHandle().MaxInitLen, 72)
			yyv3597 = make([]EndpointSubset, yyrl3597)
			yyc3597 = true

			yyrr3597 = len(yyv3597)
		} else if yyl3597 != len(yyv3597) {
			yyv3597 = yyv3597[:yyl3597]
			yyc3597 = true
		}
		yyj3597 := 0
		for ; yyj3597 < yyrr3597; yyj3597++ {
			if r.TryDecodeAsNil() {
				yyv3597[yyj3597] = EndpointSubset{}
			} else {
				yyv3598 := &yyv3597[yyj3597]
				yyv3598.CodecDecodeSelf(d)
			}

		}
		if yyrt3597 {
			for ; yyj3597 < yyl3597; yyj3597++ {
				yyv3597 = append(yyv3597, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3597[yyj3597] = EndpointSubset{}
				} else {
					yyv3599 := &yyv3597[yyj3597]
					yyv3599.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3597 := 0; !r.CheckBreak(); yyj3597++ {
			if yyj3597 >= len(yyv3597) {
				yyv3597 = append(yyv3597, EndpointSubset{}) // var yyz3597 EndpointSubset
				yyc3597 = true
			}

			if yyj3597 < len(yyv3597) {
				if r.TryDecodeAsNil() {
					yyv3597[yyj3597] = EndpointSubset{}
				} else {
					yyv3600 := &yyv3597[yyj3597]
					yyv3600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3597.End()
	}
	if yyc3597 {
		*v = yyv3597
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3601 := range v {
		yy3602 := &yyv3601
		yy3602.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3603 := *v
	yyh3603, yyl3603 := z.DecSliceHelperStart()

	var yyrr3603, yyrl3603 int
	var yyc3603, yyrt3603 bool
	_, _, _ = yyc3603, yyrt3603, yyrl3603
	yyrr3603 = yyl3603

	if yyv3603 == nil {
		if yyrl3603, yyrt3603 = z.DecInferLen(yyl3603, z.DecBasicHandle().MaxInitLen, 24); yyrt3603 {
			yyrr3603 = yyrl3603
		}
		yyv3603 = make([]EndpointAddress, yyrl3603)
		yyc3603 = true
	}

	if yyl3603 == 0 {
		if len(yyv3603) != 0 {
			yyv3603 = yyv3603[:0]
			yyc3603 = true
		}
	} else if yyl3603 > 0 {

		if yyl3603 > cap(yyv3603) {
			yyrl3603, yyrt3603 = z.DecInferLen(yyl3603, z.DecBasicHandle().MaxInitLen, 24)
			yyv3603 = make([]EndpointAddress, yyrl3603)
			yyc3603 = true

			yyrr3603 = len(yyv3603)
		} else if yyl3603 != len(yyv3603) {
			yyv3603 = yyv3603[:yyl3603]
			yyc3603 = true
		}
		yyj3603 := 0
		for ; yyj3603 < yyrr3603; yyj3603++ {
			if r.TryDecodeAsNil() {
				yyv3603[yyj3603] = EndpointAddress{}
			} else {
				yyv3604 := &yyv3603[yyj3603]
				yyv3604.CodecDecodeSelf(d)
			}

		}
		if yyrt3603 {
			for ; yyj3603 < yyl3603; yyj3603++ {
				yyv3603 = append(yyv3603, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3603[yyj3603] = EndpointAddress{}
				} else {
					yyv3605 := &yyv3603[yyj3603]
					yyv3605.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3603 := 0; !r.CheckBreak(); yyj3603++ {
			if yyj3603 >= len(yyv3603) {
				yyv3603 = append(yyv3603, EndpointAddress{}) // var yyz3603 EndpointAddress
				yyc3603 = true
			}

			if yyj3603 < len(yyv3603) {
				if r.TryDecodeAsNil() {
					yyv3603[yyj3603] = EndpointAddress{}
				} else {
					yyv3606 := &yyv3603[yyj3603]
					yyv3606.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3603.End()
	}
	if yyc3603 {
		*v = yyv3603
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3607 := range v {
		yy3608 := &yyv3607
		yy3608.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3609 := *v
	yyh3609, yyl3609 := z.DecSliceHelperStart()

	var yyrr3609, yyrl3609 int
	var yyc3609, yyrt3609 bool
	_, _, _ = yyc3609, yyrt3609, yyrl3609
	yyrr3609 = yyl3609

	if yyv3609 == nil {
		if yyrl3609, yyrt3609 = z.DecInferLen(yyl3609, z.DecBasicHandle().MaxInitLen, 40); yyrt3609 {
			yyrr3609 = yyrl3609
		}
		yyv3609 = make([]EndpointPort, yyrl3609)
		yyc3609 = true
	}

	if yyl3609 == 0 {
		if len(yyv3609) != 0 {
			yyv3609 = yyv3609[:0]
			yyc3609 = true
		}
	} else if yyl3609 > 0 {

		if yyl3609 > cap(yyv3609) {
			yyrl3609, yyrt3609 = z.DecInferLen(yyl3609, z.DecBasicHandle().MaxInitLen, 40)
			yyv3609 = make([]EndpointPort, yyrl3609)
			yyc3609 = true

			yyrr3609 = len(yyv3609)
		} else if yyl3609 != len(yyv3609) {
			yyv3609 = yyv3609[:yyl3609]
			yyc3609 = true
		}
		yyj3609 := 0
		for ; yyj3609 < yyrr3609; yyj3609++ {
			if r.TryDecodeAsNil() {
				yyv3609[yyj3609] = EndpointPort{}
			} else {
				yyv3610 := &yyv3609[yyj3609]
				yyv3610.CodecDecodeSelf(d)
			}

		}
		if yyrt3609 {
			for ; yyj3609 < yyl3609; yyj3609++ {
				yyv3609 = append(yyv3609, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3609[yyj3609] = EndpointPort{}
				} else {
					yyv3611 := &yyv3609[yyj3609]
					yyv3611.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3609 := 0; !r.CheckBreak(); yyj3609++ {
			if yyj3609 >= len(yyv3609) {
				yyv3609 = append(yyv3609, EndpointPort{}) // var yyz3609 EndpointPort
				yyc3609 = true
			}

			if yyj3609 < len(yyv3609) {
				if r.TryDecodeAsNil() {
					yyv3609[yyj3609] = EndpointPort{}
				} else {
					yyv3612 := &yyv3609[yyj3609]
					yyv3612.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3609.End()
	}
	if yyc3609 {
		*v = yyv3609
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3613 := range v {
		yy3614 := &yyv3613
		yy3614.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3615 := *v
	yyh3615, yyl3615 := z.DecSliceHelperStart()

	var yyrr3615, yyrl3615 int
	var yyc3615, yyrt3615 bool
	_, _, _ = yyc3615, yyrt3615, yyrl3615
	yyrr3615 = yyl3615

	if yyv3615 == nil {
		if yyrl3615, yyrt3615 = z.DecInferLen(yyl3615, z.DecBasicHandle().MaxInitLen, 216); yyrt3615 {
			yyrr3615 = yyrl3615
		}
		yyv3615 = make([]Endpoints, yyrl3615)
		yyc3615 = true
	}

	if yyl3615 == 0 {
		if len(yyv3615) != 0 {
			yyv3615 = yyv3615[:0]
			yyc3615 = true
		}
	} else if yyl3615 > 0 {

		if yyl3615 > cap(yyv3615) {
			yyrl3615, yyrt3615 = z.DecInferLen(yyl3615, z.DecBasicHandle().MaxInitLen, 216)
			yyv3615 = make([]Endpoints, yyrl3615)
			yyc3615 = true

			yyrr3615 = len(yyv3615)
		} else if yyl3615 != len(yyv3615) {
			yyv3615 = yyv3615[:yyl3615]
			yyc3615 = true
		}
		yyj3615 := 0
		for ; yyj3615 < yyrr3615; yyj3615++ {
			if r.TryDecodeAsNil() {
				yyv3615[yyj3615] = Endpoints{}
			} else {
				yyv3616 := &yyv3615[yyj3615]
				yyv3616.CodecDecodeSelf(d)
			}

		}
		if yyrt3615 {
			for ; yyj3615 < yyl3615; yyj3615++ {
				yyv3615 = append(yyv3615, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3615[yyj3615] = Endpoints{}
				} else {
					yyv3617 := &yyv3615[yyj3615]
					yyv3617.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3615 := 0; !r.CheckBreak(); yyj3615++ {
			if yyj3615 >= len(yyv3615) {
				yyv3615 = append(yyv3615, Endpoints{}) // var yyz3615 Endpoints
				yyc3615 = true
			}

			if yyj3615 < len(yyv3615) {
				if r.TryDecodeAsNil() {
					yyv3615[yyj3615] = Endpoints{}
				} else {
					yyv3618 := &yyv3615[yyj3615]
					yyv3618.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3615.End()
	}
	if yyc3615 {
		*v = yyv3615
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3619 := range v {
		yy3620 := &yyv3619
		yy3620.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3621 := *v
	yyh3621, yyl3621 := z.DecSliceHelperStart()

	var yyrr3621, yyrl3621 int
	var yyc3621, yyrt3621 bool
	_, _, _ = yyc3621, yyrt3621, yyrl3621
	yyrr3621 = yyl3621

	if yyv3621 == nil {
		if yyrl3621, yyrt3621 = z.DecInferLen(yyl3621, z.DecBasicHandle().MaxInitLen, 112); yyrt3621 {
			yyrr3621 = yyrl3621
		}
		yyv3621 = make([]NodeCondition, yyrl3621)
		yyc3621 = true
	}

	if yyl3621 == 0 {
		if len(yyv3621) != 0 {
			yyv3621 = yyv3621[:0]
			yyc3621 = true
		}
	} else if yyl3621 > 0 {

		if yyl3621 > cap(yyv3621) {
			yyrl3621, yyrt3621 = z.DecInferLen(yyl3621, z.DecBasicHandle().MaxInitLen, 112)
			yyv3621 = make([]NodeCondition, yyrl3621)
			yyc3621 = true

			yyrr3621 = len(yyv3621)
		} else if yyl3621 != len(yyv3621) {
			yyv3621 = yyv3621[:yyl3621]
			yyc3621 = true
		}
		yyj3621 := 0
		for ; yyj3621 < yyrr3621; yyj3621++ {
			if r.TryDecodeAsNil() {
				yyv3621[yyj3621] = NodeCondition{}
			} else {
				yyv3622 := &yyv3621[yyj3621]
				yyv3622.CodecDecodeSelf(d)
			}

		}
		if yyrt3621 {
			for ; yyj3621 < yyl3621; yyj3621++ {
				yyv3621 = append(yyv3621, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3621[yyj3621] = NodeCondition{}
				} else {
					yyv3623 := &yyv3621[yyj3621]
					yyv3623.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3621 := 0; !r.CheckBreak(); yyj3621++ {
			if yyj3621 >= len(yyv3621) {
				yyv3621 = append(yyv3621, NodeCondition{}) // var yyz3621 NodeCondition
				yyc3621 = true
			}

			if yyj3621 < len(yyv3621) {
				if r.TryDecodeAsNil() {
					yyv3621[yyj3621] = NodeCondition{}
				} else {
					yyv3624 := &yyv3621[yyj3621]
					yyv3624.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3621.End()
	}
	if yyc3621 {
		*v = yyv3621
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3625 := range v {
		yy3626 := &yyv3625
		yy3626.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3627 := *v
	yyh3627, yyl3627 := z.DecSliceHelperStart()

	var yyrr3627, yyrl3627 int
	var yyc3627, yyrt3627 bool
	_, _, _ = yyc3627, yyrt3627, yyrl3627
	yyrr3627 = yyl3627

	if yyv3627 == nil {
		if yyrl3627, yyrt3627 = z.DecInferLen(yyl3627, z.DecBasicHandle().MaxInitLen, 48); yyrt3627 {
			yyrr3627 = yyrl3627
		}
		yyv3627 = make([]NodeAddress, yyrl3627)
		yyc3627 = true
	}

	if yyl3627 == 0 {
		if len(yyv3627) != 0 {
			yyv3627 = yyv3627[:0]
			yyc3627 = true
		}
	} else if yyl3627 > 0 {

		if yyl3627 > cap(yyv3627) {
			yyrl3627, yyrt3627 = z.DecInferLen(yyl3627, z.DecBasicHandle().MaxInitLen, 48)
			yyv3627 = make([]NodeAddress, yyrl3627)
			yyc3627 = true

			yyrr3627 = len(yyv3627)
		} else if yyl3627 != len(yyv3627) {
			yyv3627 = yyv3627[:yyl3627]
			yyc3627 = true
		}
		yyj3627 := 0
		for ; yyj3627 < yyrr3627; yyj3627++ {
			if r.TryDecodeAsNil() {
				yyv3627[yyj3627] = NodeAddress{}
			} else {
				yyv3628 := &yyv3627[yyj3627]
				yyv3628.CodecDecodeSelf(d)
			}

		}
		if yyrt3627 {
			for ; yyj3627 < yyl3627; yyj3627++ {
				yyv3627 = append(yyv3627, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3627[yyj3627] = NodeAddress{}
				} else {
					yyv3629 := &yyv3627[yyj3627]
					yyv3629.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3627 := 0; !r.CheckBreak(); yyj3627++ {
			if yyj3627 >= len(yyv3627) {
				yyv3627 = append(yyv3627, NodeAddress{}) // var yyz3627 NodeAddress
				yyc3627 = true
			}

			if yyj3627 < len(yyv3627) {
				if r.TryDecodeAsNil() {
					yyv3627[yyj3627] = NodeAddress{}
				} else {
					yyv3630 := &yyv3627[yyj3627]
					yyv3630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3627.End()
	}
	if yyc3627 {
		*v = yyv3627
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3631, yyv3631 := range v {
		yyk3631.CodecEncodeSelf(e)
		yy3632 := &yyv3631
		yym3633 := z.EncBinary()
		_ = yym3633
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3632) {
		} else if !yym3633 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3632)
		} else {
			z.EncFallback(yy3632)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3634 := *v
	yyl3634 := r.ReadMapStart()
	yybh3634 := z.DecBasicHandle()
	if yyv3634 == nil {
		yyrl3634, _ := z.DecInferLen(yyl3634, yybh3634.MaxInitLen, 40)
		yyv3634 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3634)
		*v = yyv3634
	}
	var yymk3634 ResourceName
	var yymv3634 pkg3_resource.Quantity
	var yymg3634 bool
	if yybh3634.MapValueReset {
		yymg3634 = true
	}
	if yyl3634 > 0 {
		for yyj3634 := 0; yyj3634 < yyl3634; yyj3634++ {
			if r.TryDecodeAsNil() {
				yymk3634 = ""
			} else {
				yymk3634 = ResourceName(r.DecodeString())
			}

			if yymg3634 {
				yymv3634 = yyv3634[yymk3634]
			} else {
				yymv3634 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3634 = pkg3_resource.Quantity{}
			} else {
				yyv3636 := &yymv3634
				yym3637 := z.DecBinary()
				_ = yym3637
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3636) {
				} else if !yym3637 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3636)
				} else {
					z.DecFallback(yyv3636, false)
				}
			}

			if yyv3634 != nil {
				yyv3634[yymk3634] = yymv3634
			}
		}
	} else if yyl3634 < 0 {
		for yyj3634 := 0; !r.CheckBreak(); yyj3634++ {
			if r.TryDecodeAsNil() {
				yymk3634 = ""
			} else {
				yymk3634 = ResourceName(r.DecodeString())
			}

			if yymg3634 {
				yymv3634 = yyv3634[yymk3634]
			} else {
				yymv3634 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3634 = pkg3_resource.Quantity{}
			} else {
				yyv3639 := &yymv3634
				yym3640 := z.DecBinary()
				_ = yym3640
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3639) {
				} else if !yym3640 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3639)
				} else {
					z.DecFallback(yyv3639, false)
				}
			}

			if yyv3634 != nil {
				yyv3634[yymk3634] = yymv3634
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3641 := range v {
		yy3642 := &yyv3641
		yy3642.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3643 := *v
	yyh3643, yyl3643 := z.DecSliceHelperStart()

	var yyrr3643, yyrl3643 int
	var yyc3643, yyrt3643 bool
	_, _, _ = yyc3643, yyrt3643, yyrl3643
	yyrr3643 = yyl3643

	if yyv3643 == nil {
		if yyrl3643, yyrt3643 = z.DecInferLen(yyl3643, z.DecBasicHandle().MaxInitLen, 456); yyrt3643 {
			yyrr3643 = yyrl3643
		}
		yyv3643 = make([]Node, yyrl3643)
		yyc3643 = true
	}

	if yyl3643 == 0 {
		if len(yyv3643) != 0 {
			yyv3643 = yyv3643[:0]
			yyc3643 = true
		}
	} else if yyl3643 > 0 {

		if yyl3643 > cap(yyv3643) {
			yyrl3643, yyrt3643 = z.DecInferLen(yyl3643, z.DecBasicHandle().MaxInitLen, 456)
			yyv3643 = make([]Node, yyrl3643)
			yyc3643 = true

			yyrr3643 = len(yyv3643)
		} else if yyl3643 != len(yyv3643) {
			yyv3643 = yyv3643[:yyl3643]
			yyc3643 = true
		}
		yyj3643 := 0
		for ; yyj3643 < yyrr3643; yyj3643++ {
			if r.TryDecodeAsNil() {
				yyv3643[yyj3643] = Node{}
			} else {
				yyv3644 := &yyv3643[yyj3643]
				yyv3644.CodecDecodeSelf(d)
			}

		}
		if yyrt3643 {
			for ; yyj3643 < yyl3643; yyj3643++ {
				yyv3643 = append(yyv3643, Node{})
				if r.TryDecodeAsNil() {
					yyv3643[yyj3643] = Node{}
				} else {
					yyv3645 := &yyv3643[yyj3643]
					yyv3645.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3643 := 0; !r.CheckBreak(); yyj3643++ {
			if yyj3643 >= len(yyv3643) {
				yyv3643 = append(yyv3643, Node{}) // var yyz3643 Node
				yyc3643 = true
			}

			if yyj3643 < len(yyv3643) {
				if r.TryDecodeAsNil() {
					yyv3643[yyj3643] = Node{}
				} else {
					yyv3646 := &yyv3643[yyj3643]
					yyv3646.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3643.End()
	}
	if yyc3643 {
		*v = yyv3643
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3647 := range v {
		yyv3647.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3648 := *v
	yyh3648, yyl3648 := z.DecSliceHelperStart()

	var yyrr3648, yyrl3648 int
	var yyc3648, yyrt3648 bool
	_, _, _ = yyc3648, yyrt3648, yyrl3648
	yyrr3648 = yyl3648

	if yyv3648 == nil {
		if yyrl3648, yyrt3648 = z.DecInferLen(yyl3648, z.DecBasicHandle().MaxInitLen, 16); yyrt3648 {
			yyrr3648 = yyrl3648
		}
		yyv3648 = make([]FinalizerName, yyrl3648)
		yyc3648 = true
	}

	if yyl3648 == 0 {
		if len(yyv3648) != 0 {
			yyv3648 = yyv3648[:0]
			yyc3648 = true
		}
	} else if yyl3648 > 0 {

		if yyl3648 > cap(yyv3648) {
			yyrl3648, yyrt3648 = z.DecInferLen(yyl3648, z.DecBasicHandle().MaxInitLen, 16)

			yyv23648 := yyv3648
			yyv3648 = make([]FinalizerName, yyrl3648)
			if len(yyv3648) > 0 {
				copy(yyv3648, yyv23648[:cap(yyv23648)])
			}
			yyc3648 = true

			yyrr3648 = len(yyv3648)
		} else if yyl3648 != len(yyv3648) {
			yyv3648 = yyv3648[:yyl3648]
			yyc3648 = true
		}
		yyj3648 := 0
		for ; yyj3648 < yyrr3648; yyj3648++ {
			if r.TryDecodeAsNil() {
				yyv3648[yyj3648] = ""
			} else {
				yyv3648[yyj3648] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3648 {
			for ; yyj3648 < yyl3648; yyj3648++ {
				yyv3648 = append(yyv3648, "")
				if r.TryDecodeAsNil() {
					yyv3648[yyj3648] = ""
				} else {
					yyv3648[yyj3648] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3648 := 0; !r.CheckBreak(); yyj3648++ {
			if yyj3648 >= len(yyv3648) {
				yyv3648 = append(yyv3648, "") // var yyz3648 FinalizerName
				yyc3648 = true
			}

			if yyj3648 < len(yyv3648) {
				if r.TryDecodeAsNil() {
					yyv3648[yyj3648] = ""
				} else {
					yyv3648[yyj3648] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3648.End()
	}
	if yyc3648 {
		*v = yyv3648
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3652 := range v {
		yy3653 := &yyv3652
		yy3653.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3654 := *v
	yyh3654, yyl3654 := z.DecSliceHelperStart()

	var yyrr3654, yyrl3654 int
	var yyc3654, yyrt3654 bool
	_, _, _ = yyc3654, yyrt3654, yyrl3654
	yyrr3654 = yyl3654

	if yyv3654 == nil {
		if yyrl3654, yyrt3654 = z.DecInferLen(yyl3654, z.DecBasicHandle().MaxInitLen, 232); yyrt3654 {
			yyrr3654 = yyrl3654
		}
		yyv3654 = make([]Namespace, yyrl3654)
		yyc3654 = true
	}

	if yyl3654 == 0 {
		if len(yyv3654) != 0 {
			yyv3654 = yyv3654[:0]
			yyc3654 = true
		}
	} else if yyl3654 > 0 {

		if yyl3654 > cap(yyv3654) {
			yyrl3654, yyrt3654 = z.DecInferLen(yyl3654, z.DecBasicHandle().MaxInitLen, 232)
			yyv3654 = make([]Namespace, yyrl3654)
			yyc3654 = true

			yyrr3654 = len(yyv3654)
		} else if yyl3654 != len(yyv3654) {
			yyv3654 = yyv3654[:yyl3654]
			yyc3654 = true
		}
		yyj3654 := 0
		for ; yyj3654 < yyrr3654; yyj3654++ {
			if r.TryDecodeAsNil() {
				yyv3654[yyj3654] = Namespace{}
			} else {
				yyv3655 := &yyv3654[yyj3654]
				yyv3655.CodecDecodeSelf(d)
			}

		}
		if yyrt3654 {
			for ; yyj3654 < yyl3654; yyj3654++ {
				yyv3654 = append(yyv3654, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3654[yyj3654] = Namespace{}
				} else {
					yyv3656 := &yyv3654[yyj3654]
					yyv3656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3654 := 0; !r.CheckBreak(); yyj3654++ {
			if yyj3654 >= len(yyv3654) {
				yyv3654 = append(yyv3654, Namespace{}) // var yyz3654 Namespace
				yyc3654 = true
			}

			if yyj3654 < len(yyv3654) {
				if r.TryDecodeAsNil() {
					yyv3654[yyj3654] = Namespace{}
				} else {
					yyv3657 := &yyv3654[yyj3654]
					yyv3657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3654.End()
	}
	if yyc3654 {
		*v = yyv3654
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3658 := range v {
		yy3659 := &yyv3658
		yy3659.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3660 := *v
	yyh3660, yyl3660 := z.DecSliceHelperStart()

	var yyrr3660, yyrl3660 int
	var yyc3660, yyrt3660 bool
	_, _, _ = yyc3660, yyrt3660, yyrl3660
	yyrr3660 = yyl3660

	if yyv3660 == nil {
		if yyrl3660, yyrt3660 = z.DecInferLen(yyl3660, z.DecBasicHandle().MaxInitLen, 424); yyrt3660 {
			yyrr3660 = yyrl3660
		}
		yyv3660 = make([]Event, yyrl3660)
		yyc3660 = true
	}

	if yyl3660 == 0 {
		if len(yyv3660) != 0 {
			yyv3660 = yyv3660[:0]
			yyc3660 = true
		}
	} else if yyl3660 > 0 {

		if yyl3660 > cap(yyv3660) {
			yyrl3660, yyrt3660 = z.DecInferLen(yyl3660, z.DecBasicHandle().MaxInitLen, 424)
			yyv3660 = make([]Event, yyrl3660)
			yyc3660 = true

			yyrr3660 = len(yyv3660)
		} else if yyl3660 != len(yyv3660) {
			yyv3660 = yyv3660[:yyl3660]
			yyc3660 = true
		}
		yyj3660 := 0
		for ; yyj3660 < yyrr3660; yyj3660++ {
			if r.TryDecodeAsNil() {
				yyv3660[yyj3660] = Event{}
			} else {
				yyv3661 := &yyv3660[yyj3660]
				yyv3661.CodecDecodeSelf(d)
			}

		}
		if yyrt3660 {
			for ; yyj3660 < yyl3660; yyj3660++ {
				yyv3660 = append(yyv3660, Event{})
				if r.TryDecodeAsNil() {
					yyv3660[yyj3660] = Event{}
				} else {
					yyv3662 := &yyv3660[yyj3660]
					yyv3662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3660 := 0; !r.CheckBreak(); yyj3660++ {
			if yyj3660 >= len(yyv3660) {
				yyv3660 = append(yyv3660, Event{}) // var yyz3660 Event
				yyc3660 = true
			}

			if yyj3660 < len(yyv3660) {
				if r.TryDecodeAsNil() {
					yyv3660[yyj3660] = Event{}
				} else {
					yyv3663 := &yyv3660[yyj3660]
					yyv3663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3660.End()
	}
	if yyc3660 {
		*v = yyv3660
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3664 := range v {
		if yyv3664 == nil {
			r.EncodeNil()
		} else {
			yym3665 := z.EncBinary()
			_ = yym3665
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3664) {
			} else {
				z.EncFallback(yyv3664)
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3666 := *v
	yyh3666, yyl3666 := z.DecSliceHelperStart()

	var yyrr3666, yyrl3666 int
	var yyc3666, yyrt3666 bool
	_, _, _ = yyc3666, yyrt3666, yyrl3666
	yyrr3666 = yyl3666

	if yyv3666 == nil {
		if yyrl3666, yyrt3666 = z.DecInferLen(yyl3666, z.DecBasicHandle().MaxInitLen, 16); yyrt3666 {
			yyrr3666 = yyrl3666
		}
		yyv3666 = make([]pkg8_runtime.Object, yyrl3666)
		yyc3666 = true
	}

	if yyl3666 == 0 {
		if len(yyv3666) != 0 {
			yyv3666 = yyv3666[:0]
			yyc3666 = true
		}
	} else if yyl3666 > 0 {

		if yyl3666 > cap(yyv3666) {
			yyrl3666, yyrt3666 = z.DecInferLen(yyl3666, z.DecBasicHandle().MaxInitLen, 16)
			yyv3666 = make([]pkg8_runtime.Object, yyrl3666)
			yyc3666 = true

			yyrr3666 = len(yyv3666)
		} else if yyl3666 != len(yyv3666) {
			yyv3666 = yyv3666[:yyl3666]
			yyc3666 = true
		}
		yyj3666 := 0
		for ; yyj3666 < yyrr3666; yyj3666++ {
			if r.TryDecodeAsNil() {
				yyv3666[yyj3666] = nil
			} else {
				yyv3667 := &yyv3666[yyj3666]
				yym3668 := z.DecBinary()
				_ = yym3668
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3667) {
				} else {
					z.DecFallback(yyv3667, true)
				}
			}

		}
		if yyrt3666 {
			for ; yyj3666 < yyl3666; yyj3666++ {
				yyv3666 = append(yyv3666, nil)
				if r.TryDecodeAsNil() {
					yyv3666[yyj3666] = nil
				} else {
					yyv3669 := &yyv3666[yyj3666]
					yym3670 := z.DecBinary()
					_ = yym3670
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3669) {
					} else {
						z.DecFallback(yyv3669, true)
					}
				}

			}
		}

	} else {
		for yyj3666 := 0; !r.CheckBreak(); yyj3666++ {
			if yyj3666 >= len(yyv3666) {
				yyv3666 = append(yyv3666, nil) // var yyz3666 pkg8_runtime.Object
				yyc3666 = true
			}

			if yyj3666 < len(yyv3666) {
				if r.TryDecodeAsNil() {
					yyv3666[yyj3666] = nil
				} else {
					yyv3671 := &yyv3666[yyj3666]
					yym3672 := z.DecBinary()
					_ = yym3672
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3671) {
					} else {
						z.DecFallback(yyv3671, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3666.End()
	}
	if yyc3666 {
		*v = yyv3666
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3673 := range v {
		yy3674 := &yyv3673
		yy3674.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3675 := *v
	yyh3675, yyl3675 := z.DecSliceHelperStart()

	var yyrr3675, yyrl3675 int
	var yyc3675, yyrt3675 bool
	_, _, _ = yyc3675, yyrt3675, yyrl3675
	yyrr3675 = yyl3675

	if yyv3675 == nil {
		if yyrl3675, yyrt3675 = z.DecInferLen(yyl3675, z.DecBasicHandle().MaxInitLen, 56); yyrt3675 {
			yyrr3675 = yyrl3675
		}
		yyv3675 = make([]LimitRangeItem, yyrl3675)
		yyc3675 = true
	}

	if yyl3675 == 0 {
		if len(yyv3675) != 0 {
			yyv3675 = yyv3675[:0]
			yyc3675 = true
		}
	} else if yyl3675 > 0 {

		if yyl3675 > cap(yyv3675) {
			yyrl3675, yyrt3675 = z.DecInferLen(yyl3675, z.DecBasicHandle().MaxInitLen, 56)
			yyv3675 = make([]LimitRangeItem, yyrl3675)
			yyc3675 = true

			yyrr3675 = len(yyv3675)
		} else if yyl3675 != len(yyv3675) {
			yyv3675 = yyv3675[:yyl3675]
			yyc3675 = true
		}
		yyj3675 := 0
		for ; yyj3675 < yyrr3675; yyj3675++ {
			if r.TryDecodeAsNil() {
				yyv3675[yyj3675] = LimitRangeItem{}
			} else {
				yyv3676 := &yyv3675[yyj3675]
				yyv3676.CodecDecodeSelf(d)
			}

		}
		if yyrt3675 {
			for ; yyj3675 < yyl3675; yyj3675++ {
				yyv3675 = append(yyv3675, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3675[yyj3675] = LimitRangeItem{}
				} else {
					yyv3677 := &yyv3675[yyj3675]
					yyv3677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3675 := 0; !r.CheckBreak(); yyj3675++ {
			if yyj3675 >= len(yyv3675) {
				yyv3675 = append(yyv3675, LimitRangeItem{}) // var yyz3675 LimitRangeItem
				yyc3675 = true
			}

			if yyj3675 < len(yyv3675) {
				if r.TryDecodeAsNil() {
					yyv3675[yyj3675] = LimitRangeItem{}
				} else {
					yyv3678 := &yyv3675[yyj3675]
					yyv3678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3675.End()
	}
	if yyc3675 {
		*v = yyv3675
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3679 := range v {
		yy3680 := &yyv3679
		yy3680.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3681 := *v
	yyh3681, yyl3681 := z.DecSliceHelperStart()

	var yyrr3681, yyrl3681 int
	var yyc3681, yyrt3681 bool
	_, _, _ = yyc3681, yyrt3681, yyrl3681
	yyrr3681 = yyl3681

	if yyv3681 == nil {
		if yyrl3681, yyrt3681 = z.DecInferLen(yyl3681, z.DecBasicHandle().MaxInitLen, 216); yyrt3681 {
			yyrr3681 = yyrl3681
		}
		yyv3681 = make([]LimitRange, yyrl3681)
		yyc3681 = true
	}

	if yyl3681 == 0 {
		if len(yyv3681) != 0 {
			yyv3681 = yyv3681[:0]
			yyc3681 = true
		}
	} else if yyl3681 > 0 {

		if yyl3681 > cap(yyv3681) {
			yyrl3681, yyrt3681 = z.DecInferLen(yyl3681, z.DecBasicHandle().MaxInitLen, 216)
			yyv3681 = make([]LimitRange, yyrl3681)
			yyc3681 = true

			yyrr3681 = len(yyv3681)
		} else if yyl3681 != len(yyv3681) {
			yyv3681 = yyv3681[:yyl3681]
			yyc3681 = true
		}
		yyj3681 := 0
		for ; yyj3681 < yyrr3681; yyj3681++ {
			if r.TryDecodeAsNil() {
				yyv3681[yyj3681] = LimitRange{}
			} else {
				yyv3682 := &yyv3681[yyj3681]
				yyv3682.CodecDecodeSelf(d)
			}

		}
		if yyrt3681 {
			for ; yyj3681 < yyl3681; yyj3681++ {
				yyv3681 = append(yyv3681, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3681[yyj3681] = LimitRange{}
				} else {
					yyv3683 := &yyv3681[yyj3681]
					yyv3683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3681 := 0; !r.CheckBreak(); yyj3681++ {
			if yyj3681 >= len(yyv3681) {
				yyv3681 = append(yyv3681, LimitRange{}) // var yyz3681 LimitRange
				yyc3681 = true
			}

			if yyj3681 < len(yyv3681) {
				if r.TryDecodeAsNil() {
					yyv3681[yyj3681] = LimitRange{}
				} else {
					yyv3684 := &yyv3681[yyj3681]
					yyv3684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3681.End()
	}
	if yyc3681 {
		*v = yyv3681
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3685 := range v {
		yy3686 := &yyv3685
		yy3686.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3687 := *v
	yyh3687, yyl3687 := z.DecSliceHelperStart()

	var yyrr3687, yyrl3687 int
	var yyc3687, yyrt3687 bool
	_, _, _ = yyc3687, yyrt3687, yyrl3687
	yyrr3687 = yyl3687

	if yyv3687 == nil {
		if yyrl3687, yyrt3687 = z.DecInferLen(yyl3687, z.DecBasicHandle().MaxInitLen, 216); yyrt3687 {
			yyrr3687 = yyrl3687
		}
		yyv3687 = make([]ResourceQuota, yyrl3687)
		yyc3687 = true
	}

	if yyl3687 == 0 {
		if len(yyv3687) != 0 {
			yyv3687 = yyv3687[:0]
			yyc3687 = true
		}
	} else if yyl3687 > 0 {

		if yyl3687 > cap(yyv3687) {
			yyrl3687, yyrt3687 = z.DecInferLen(yyl3687, z.DecBasicHandle().MaxInitLen, 216)
			yyv3687 = make([]ResourceQuota, yyrl3687)
			yyc3687 = true

			yyrr3687 = len(yyv3687)
		} else if yyl3687 != len(yyv3687) {
			yyv3687 = yyv3687[:yyl3687]
			yyc3687 = true
		}
		yyj3687 := 0
		for ; yyj3687 < yyrr3687; yyj3687++ {
			if r.TryDecodeAsNil() {
				yyv3687[yyj3687] = ResourceQuota{}
			} else {
				yyv3688 := &yyv3687[yyj3687]
				yyv3688.CodecDecodeSelf(d)
			}

		}
		if yyrt3687 {
			for ; yyj3687 < yyl3687; yyj3687++ {
				yyv3687 = append(yyv3687, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3687[yyj3687] = ResourceQuota{}
				} else {
					yyv3689 := &yyv3687[yyj3687]
					yyv3689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3687 := 0; !r.CheckBreak(); yyj3687++ {
			if yyj3687 >= len(yyv3687) {
				yyv3687 = append(yyv3687, ResourceQuota{}) // var yyz3687 ResourceQuota
				yyc3687 = true
			}

			if yyj3687 < len(yyv3687) {
				if r.TryDecodeAsNil() {
					yyv3687[yyj3687] = ResourceQuota{}
				} else {
					yyv3690 := &yyv3687[yyj3687]
					yyv3690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3687.End()
	}
	if yyc3687 {
		*v = yyv3687
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3691, yyv3691 := range v {
		yym3692 := z.EncBinary()
		_ = yym3692
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3691))
		}
		if yyv3691 == nil {
			r.EncodeNil()
		} else {
			yym3693 := z.EncBinary()
			_ = yym3693
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3691))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3694 := *v
	yyl3694 := r.ReadMapStart()
	yybh3694 := z.DecBasicHandle()
	if yyv3694 == nil {
		yyrl3694, _ := z.DecInferLen(yyl3694, yybh3694.MaxInitLen, 40)
		yyv3694 = make(map[string][]uint8, yyrl3694)
		*v = yyv3694
	}
	var yymk3694 string
	var yymv3694 []uint8
	var yymg3694 bool
	if yybh3694.MapValueReset {
		yymg3694 = true
	}
	if yyl3694 > 0 {
		for yyj3694 := 0; yyj3694 < yyl3694; yyj3694++ {
			if r.TryDecodeAsNil() {
				yymk3694 = ""
			} else {
				yymk3694 = string(r.DecodeString())
			}

			if yymg3694 {
				yymv3694 = yyv3694[yymk3694]
			} else {
				yymv3694 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3694 = nil
			} else {
				yyv3696 := &yymv3694
				yym3697 := z.DecBinary()
				_ = yym3697
				if false {
				} else {
					*yyv3696 = r.DecodeBytes(*(*[]byte)(yyv3696), false, false)
				}
			}

			if yyv3694 != nil {
				yyv3694[yymk3694] = yymv3694
			}
		}
	} else if yyl3694 < 0 {
		for yyj3694 := 0; !r.CheckBreak(); yyj3694++ {
			if r.TryDecodeAsNil() {
				yymk3694 = ""
			} else {
				yymk3694 = string(r.DecodeString())
			}

			if yymg3694 {
				yymv3694 = yyv3694[yymk3694]
			} else {
				yymv3694 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3694 = nil
			} else {
				yyv3699 := &yymv3694
				yym3700 := z.DecBinary()
				_ = yym3700
				if false {
				} else {
					*yyv3699 = r.DecodeBytes(*(*[]byte)(yyv3699), false, false)
				}
			}

			if yyv3694 != nil {
				yyv3694[yymk3694] = yymv3694
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3701 := range v {
		yy3702 := &yyv3701
		yy3702.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3703 := *v
	yyh3703, yyl3703 := z.DecSliceHelperStart()

	var yyrr3703, yyrl3703 int
	var yyc3703, yyrt3703 bool
	_, _, _ = yyc3703, yyrt3703, yyrl3703
	yyrr3703 = yyl3703

	if yyv3703 == nil {
		if yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 216); yyrt3703 {
			yyrr3703 = yyrl3703
		}
		yyv3703 = make([]Secret, yyrl3703)
		yyc3703 = true
	}

	if yyl3703 == 0 {
		if len(yyv3703) != 0 {
			yyv3703 = yyv3703[:0]
			yyc3703 = true
		}
	} else if yyl3703 > 0 {

		if yyl3703 > cap(yyv3703) {
			yyrl3703, yyrt3703 = z.DecInferLen(yyl3703, z.DecBasicHandle().MaxInitLen, 216)
			yyv3703 = make([]Secret, yyrl3703)
			yyc3703 = true

			yyrr3703 = len(yyv3703)
		} else if yyl3703 != len(yyv3703) {
			yyv3703 = yyv3703[:yyl3703]
			yyc3703 = true
		}
		yyj3703 := 0
		for ; yyj3703 < yyrr3703; yyj3703++ {
			if r.TryDecodeAsNil() {
				yyv3703[yyj3703] = Secret{}
			} else {
				yyv3704 := &yyv3703[yyj3703]
				yyv3704.CodecDecodeSelf(d)
			}

		}
		if yyrt3703 {
			for ; yyj3703 < yyl3703; yyj3703++ {
				yyv3703 = append(yyv3703, Secret{})
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = Secret{}
				} else {
					yyv3705 := &yyv3703[yyj3703]
					yyv3705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3703 := 0; !r.CheckBreak(); yyj3703++ {
			if yyj3703 >= len(yyv3703) {
				yyv3703 = append(yyv3703, Secret{}) // var yyz3703 Secret
				yyc3703 = true
			}

			if yyj3703 < len(yyv3703) {
				if r.TryDecodeAsNil() {
					yyv3703[yyj3703] = Secret{}
				} else {
					yyv3706 := &yyv3703[yyj3703]
					yyv3706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3703.End()
	}
	if yyc3703 {
		*v = yyv3703
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3707 := range v {
		yy3708 := &yyv3707
		yy3708.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3709 := *v
	yyh3709, yyl3709 := z.DecSliceHelperStart()

	var yyrr3709, yyrl3709 int
	var yyc3709, yyrt3709 bool
	_, _, _ = yyc3709, yyrt3709, yyrl3709
	yyrr3709 = yyl3709

	if yyv3709 == nil {
		if yyrl3709, yyrt3709 = z.DecInferLen(yyl3709, z.DecBasicHandle().MaxInitLen, 64); yyrt3709 {
			yyrr3709 = yyrl3709
		}
		yyv3709 = make([]ComponentCondition, yyrl3709)
		yyc3709 = true
	}

	if yyl3709 == 0 {
		if len(yyv3709) != 0 {
			yyv3709 = yyv3709[:0]
			yyc3709 = true
		}
	} else if yyl3709 > 0 {

		if yyl3709 > cap(yyv3709) {
			yyrl3709, yyrt3709 = z.DecInferLen(yyl3709, z.DecBasicHandle().MaxInitLen, 64)
			yyv3709 = make([]ComponentCondition, yyrl3709)
			yyc3709 = true

			yyrr3709 = len(yyv3709)
		} else if yyl3709 != len(yyv3709) {
			yyv3709 = yyv3709[:yyl3709]
			yyc3709 = true
		}
		yyj3709 := 0
		for ; yyj3709 < yyrr3709; yyj3709++ {
			if r.TryDecodeAsNil() {
				yyv3709[yyj3709] = ComponentCondition{}
			} else {
				yyv3710 := &yyv3709[yyj3709]
				yyv3710.CodecDecodeSelf(d)
			}

		}
		if yyrt3709 {
			for ; yyj3709 < yyl3709; yyj3709++ {
				yyv3709 = append(yyv3709, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = ComponentCondition{}
				} else {
					yyv3711 := &yyv3709[yyj3709]
					yyv3711.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3709 := 0; !r.CheckBreak(); yyj3709++ {
			if yyj3709 >= len(yyv3709) {
				yyv3709 = append(yyv3709, ComponentCondition{}) // var yyz3709 ComponentCondition
				yyc3709 = true
			}

			if yyj3709 < len(yyv3709) {
				if r.TryDecodeAsNil() {
					yyv3709[yyj3709] = ComponentCondition{}
				} else {
					yyv3712 := &yyv3709[yyj3709]
					yyv3712.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3709.End()
	}
	if yyc3709 {
		*v = yyv3709
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3713 := range v {
		yy3714 := &yyv3713
		yy3714.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3715 := *v
	yyh3715, yyl3715 := z.DecSliceHelperStart()

	var yyrr3715, yyrl3715 int
	var yyc3715, yyrt3715 bool
	_, _, _ = yyc3715, yyrt3715, yyrl3715
	yyrr3715 = yyl3715

	if yyv3715 == nil {
		if yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 216); yyrt3715 {
			yyrr3715 = yyrl3715
		}
		yyv3715 = make([]ComponentStatus, yyrl3715)
		yyc3715 = true
	}

	if yyl3715 == 0 {
		if len(yyv3715) != 0 {
			yyv3715 = yyv3715[:0]
			yyc3715 = true
		}
	} else if yyl3715 > 0 {

		if yyl3715 > cap(yyv3715) {
			yyrl3715, yyrt3715 = z.DecInferLen(yyl3715, z.DecBasicHandle().MaxInitLen, 216)
			yyv3715 = make([]ComponentStatus, yyrl3715)
			yyc3715 = true

			yyrr3715 = len(yyv3715)
		} else if yyl3715 != len(yyv3715) {
			yyv3715 = yyv3715[:yyl3715]
			yyc3715 = true
		}
		yyj3715 := 0
		for ; yyj3715 < yyrr3715; yyj3715++ {
			if r.TryDecodeAsNil() {
				yyv3715[yyj3715] = ComponentStatus{}
			} else {
				yyv3716 := &yyv3715[yyj3715]
				yyv3716.CodecDecodeSelf(d)
			}

		}
		if yyrt3715 {
			for ; yyj3715 < yyl3715; yyj3715++ {
				yyv3715 = append(yyv3715, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = ComponentStatus{}
				} else {
					yyv3717 := &yyv3715[yyj3715]
					yyv3717.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3715 := 0; !r.CheckBreak(); yyj3715++ {
			if yyj3715 >= len(yyv3715) {
				yyv3715 = append(yyv3715, ComponentStatus{}) // var yyz3715 ComponentStatus
				yyc3715 = true
			}

			if yyj3715 < len(yyv3715) {
				if r.TryDecodeAsNil() {
					yyv3715[yyj3715] = ComponentStatus{}
				} else {
					yyv3718 := &yyv3715[yyj3715]
					yyv3718.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3715.End()
	}
	if yyc3715 {
		*v = yyv3715
	}

}
